// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Priority_Queue.IFixedSizePriorityQueue`2
#include "Priority_Queue/IFixedSizePriorityQueue_2.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Priority_Queue
namespace Priority_Queue {
  // Skipping declaration: <GetEnumerator>d__22 because it is already included!
  // Forward declaring type: FastPriorityQueueNode
  class FastPriorityQueueNode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // WARNING Size may be invalid!
  // Autogenerated type: Priority_Queue.FastPriorityQueue`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class FastPriorityQueue_1 : public ::Il2CppObject/*, public Priority_Queue::IFixedSizePriorityQueue_2<T, float>*/ {
    public:
    // Nested type: Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22<T>
    class $GetEnumerator$d__22;
    // WARNING Size may be invalid!
    // Autogenerated type: Priority_Queue.FastPriorityQueue`1/Priority_Queue.<GetEnumerator>d__22
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $GetEnumerator$d__22 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = FastPriorityQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<GetEnumerator>d__22";
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T <>2__current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T $$2__current;
      // public Priority_Queue.FastPriorityQueue`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      Priority_Queue::FastPriorityQueue_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(Priority_Queue::FastPriorityQueue_1<T>*) == 0x8);
      // private System.Int32 <i>5__2
      // Size: 0x4
      // Offset: 0x0
      int $i$5__2;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: $GetEnumerator$d__22
      $GetEnumerator$d__22(int $$1__state_ = {}, T $$2__current_ = {}, Priority_Queue::FastPriorityQueue_1<T>* $$4__this_ = {}, int $i$5__2_ = {}) noexcept : $$1__state{$$1__state_}, $$2__current{$$2__current_}, $$4__this{$$4__this_}, $i$5__2{$i$5__2_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<T>
      operator System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      int _get_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_get_$$1__state");
        static auto ___internal__instance = this;
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<>1__state")));
      }
      // Autogenerated instance field setter
      // Set instance field: private System.Int32 <>1__state
      void _set_$$1__state(int value) {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_set_$$1__state");
        static auto ___internal__instance = this;
        THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>1__state", value));
      }
      // Autogenerated instance field getter
      // Get instance field: private T <>2__current
      T _get_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_get_$$2__current");
        static auto ___internal__instance = this;
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<T>(___internal__instance, "<>2__current")));
      }
      // Autogenerated instance field setter
      // Set instance field: private T <>2__current
      void _set_$$2__current(T value) {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_set_$$2__current");
        static auto ___internal__instance = this;
        THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>2__current", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public Priority_Queue.FastPriorityQueue`1<T> <>4__this
      Priority_Queue::FastPriorityQueue_1<T>* _get_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_get_$$4__this");
        static auto ___internal__instance = this;
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<Priority_Queue::FastPriorityQueue_1<T>*>(___internal__instance, "<>4__this")));
      }
      // Autogenerated instance field setter
      // Set instance field: public Priority_Queue.FastPriorityQueue`1<T> <>4__this
      void _set_$$4__this(Priority_Queue::FastPriorityQueue_1<T>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_set_$$4__this");
        static auto ___internal__instance = this;
        THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<>4__this", value));
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <i>5__2
      int _get_$i$5__2() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_get_$i$5__2");
        static auto ___internal__instance = this;
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(___internal__instance, "<i>5__2")));
      }
      // Autogenerated instance field setter
      // Set instance field: private System.Int32 <i>5__2
      void _set_$i$5__2(int value) {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::_set_$i$5__2");
        static auto ___internal__instance = this;
        THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "<i>5__2", value));
      }
      // private T System.Collections.Generic.IEnumerator<T>.get_Current()
      // Offset: 0xFFFFFFFF
      T System_Collections_Generic_IEnumerator$T$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.Collections.Generic.IEnumerator<T>.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<T>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FastPriorityQueue_1<T>::$GetEnumerator$d__22* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FastPriorityQueue_1<T>::$GetEnumerator$d__22*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
      }
    }; // Priority_Queue.FastPriorityQueue`1/Priority_Queue.<GetEnumerator>d__22
    // Could not write size check! Type: Priority_Queue.FastPriorityQueue`1/Priority_Queue.<GetEnumerator>d__22 is generic, or has no fields that are valid for size checks!
    // private System.Int32 _numNodes
    // Size: 0x4
    // Offset: 0x0
    int numNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T[] _nodes
    // Size: 0x8
    // Offset: 0x0
    ::Array<T>* nodes;
    // Field size check
    static_assert(sizeof(::Array<T>*) == 0x8);
    // Creating value type constructor for type: FastPriorityQueue_1
    FastPriorityQueue_1(int numNodes_ = {}, ::Array<T>* nodes_ = {}) noexcept : numNodes{numNodes_}, nodes{nodes_} {}
    // Creating interface conversion operator: operator Priority_Queue::IFixedSizePriorityQueue_2<T, float>
    operator Priority_Queue::IFixedSizePriorityQueue_2<T, float>() noexcept {
      return *reinterpret_cast<Priority_Queue::IFixedSizePriorityQueue_2<T, float>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _numNodes
    int _get__numNodes() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::_get__numNodes");
      static auto ___internal__instance = this;
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(___internal__instance, "_numNodes"));
    }
    // Autogenerated instance field setter
    // Set instance field: private System.Int32 _numNodes
    void _set__numNodes(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::_set__numNodes");
      static auto ___internal__instance = this;
      THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "_numNodes", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] _nodes
    ::Array<T>* _get__nodes() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::_get__nodes");
      static auto ___internal__instance = this;
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<T>*>(___internal__instance, "_nodes"));
    }
    // Autogenerated instance field setter
    // Set instance field: private T[] _nodes
    void _set__nodes(::Array<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::_set__nodes");
      static auto ___internal__instance = this;
      THROW_UNLESS(il2cpp_utils::SetFieldValue(___internal__instance, "_nodes", value));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_MaxSize()
    // Offset: 0xFFFFFFFF
    int get_MaxSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::get_MaxSize");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public T get_First()
    // Offset: 0xFFFFFFFF
    T get_First() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::get_First");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_First", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Int32 maxNodes)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FastPriorityQueue_1<T>* New_ctor(int maxNodes) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FastPriorityQueue_1<T>*, creationType>(maxNodes)));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Clear");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T node)
    // Offset: 0xFFFFFFFF
    bool Contains(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Contains");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node);
    }
    // public System.Void Enqueue(T node, System.Single priority)
    // Offset: 0xFFFFFFFF
    void Enqueue(T node, float priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Enqueue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(priority)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, priority);
    }
    // private System.Void CascadeUp(T node)
    // Offset: 0xFFFFFFFF
    void CascadeUp(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::CascadeUp");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CascadeUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // private System.Void CascadeDown(T node)
    // Offset: 0xFFFFFFFF
    void CascadeDown(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::CascadeDown");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CascadeDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // private System.Boolean HasHigherPriority(T higher, T lower)
    // Offset: 0xFFFFFFFF
    bool HasHigherPriority(T higher, T lower) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::HasHigherPriority");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasHigherPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(higher), ::il2cpp_utils::ExtractType(lower)})));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, higher, lower);
    }
    // private System.Boolean HasHigherOrEqualPriority(T higher, T lower)
    // Offset: 0xFFFFFFFF
    bool HasHigherOrEqualPriority(T higher, T lower) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::HasHigherOrEqualPriority");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasHigherOrEqualPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(higher), ::il2cpp_utils::ExtractType(lower)})));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, higher, lower);
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFF
    T Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Dequeue");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public System.Void Resize(System.Int32 maxNodes)
    // Offset: 0xFFFFFFFF
    void Resize(int maxNodes) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Resize");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxNodes)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxNodes);
    }
    // public System.Void UpdatePriority(T node, System.Single priority)
    // Offset: 0xFFFFFFFF
    void UpdatePriority(T node, float priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::UpdatePriority");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(priority)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, priority);
    }
    // private System.Void OnNodeUpdated(T node)
    // Offset: 0xFFFFFFFF
    void OnNodeUpdated(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::OnNodeUpdated");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNodeUpdated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // public System.Void Remove(T node)
    // Offset: 0xFFFFFFFF
    void Remove(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // public System.Void ResetNode(T node)
    // Offset: 0xFFFFFFFF
    void ResetNode(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::ResetNode");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Boolean IsValidQueue()
    // Offset: 0xFFFFFFFF
    bool IsValidQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::IsValidQueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
    }
  }; // Priority_Queue.FastPriorityQueue`1
  // Could not write size check! Type: Priority_Queue.FastPriorityQueue`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Priority_Queue::FastPriorityQueue_1, "Priority_Queue", "FastPriorityQueue`1");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
