// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // Forward declaring type: GenericPriorityQueueNode`1<TPriority>
  template<typename TPriority>
  class GenericPriorityQueueNode_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Priority_Queue::GenericPriorityQueueNode_1, "Priority_Queue", "GenericPriorityQueueNode`1");
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // WARNING Size may be invalid!
  // Autogenerated type: Priority_Queue.GenericPriorityQueueNode`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TPriority>
  class GenericPriorityQueueNode_1 : public ::Il2CppObject {
    public:
    public:
    // private TPriority <Priority>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TPriority Priority;
    // private System.Int32 <QueueIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int QueueIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 <InsertionIndex>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    int64_t InsertionIndex;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private TPriority <Priority>k__BackingField
    [[deprecated("Use field access instead!")]] TPriority& dyn_$Priority$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::dyn_$Priority$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Priority>k__BackingField"))->offset;
      return *reinterpret_cast<TPriority*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <QueueIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$QueueIndex$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::dyn_$QueueIndex$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<QueueIndex>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int64 <InsertionIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$InsertionIndex$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::dyn_$InsertionIndex$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<InsertionIndex>k__BackingField"))->offset;
      return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public TPriority get_Priority()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TPriority get_Priority() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::get_Priority");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TPriority, false>(this, ___internal__method);
    }
    // protected internal System.Void set_Priority(TPriority value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Priority(TPriority value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::set_Priority");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_QueueIndex()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_QueueIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::get_QueueIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_QueueIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // System.Void set_QueueIndex(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_QueueIndex(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::set_QueueIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_QueueIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int64 get_InsertionIndex()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int64_t get_InsertionIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::get_InsertionIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InsertionIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int64_t, false>(this, ___internal__method);
    }
    // System.Void set_InsertionIndex(System.Int64 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_InsertionIndex(int64_t value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::set_InsertionIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InsertionIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericPriorityQueueNode_1<TPriority>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Priority_Queue::GenericPriorityQueueNode_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericPriorityQueueNode_1<TPriority>*, creationType>()));
    }
  }; // Priority_Queue.GenericPriorityQueueNode`1
  // Could not write size check! Type: Priority_Queue.GenericPriorityQueueNode`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
