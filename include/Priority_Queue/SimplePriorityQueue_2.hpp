// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Priority_Queue.IPriorityQueue`2
#include "Priority_Queue/IPriorityQueue_2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: Priority_Queue.GenericPriorityQueueNode`1
#include "Priority_Queue/GenericPriorityQueueNode_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Priority_Queue
namespace Priority_Queue {
  // Skipping declaration: SimpleNode because it is already included!
  // Forward declaring type: GenericPriorityQueue`2<TItem, TPriority>
  template<typename TItem, typename TPriority>
  class GenericPriorityQueue_2;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IComparable`1 because it is already included!
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // Autogenerated type: Priority_Queue.SimplePriorityQueue`2
  template<typename TItem, typename TPriority>
  class SimplePriorityQueue_2 : public ::Il2CppObject/*, public Priority_Queue::IPriorityQueue_2<TItem, TPriority>*/ {
    public:
    // Nested type: Priority_Queue::SimplePriorityQueue_2::SimpleNode<TItem, TPriority>
    class SimpleNode;
    // Autogenerated type: Priority_Queue.SimplePriorityQueue`2/SimpleNode
    class SimpleNode : public Priority_Queue::GenericPriorityQueueNode_1<TPriority>, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = SimplePriorityQueue_2<TItem, TPriority>*;
      static constexpr std::string_view NESTED_NAME = "SimpleNode";
      // private TItem <Data>k__BackingField
      // Offset: 0x0
      TItem Data;
      // public TItem get_Data()
      // Offset: 0xFFFFFFFF
      TItem get_Data() {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimpleNode").WithContext("get_Data");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TItem>(), "get_Data", {}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<TItem, false>(this, ___internal__method);
      }
      // private System.Void set_Data(TItem value)
      // Offset: 0xFFFFFFFF
      void set_Data(TItem value) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimpleNode").WithContext("set_Data");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "set_Data", {}, ::il2cpp_utils::ExtractTypes(value)));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
      }
      // public System.Void .ctor(TItem data)
      // Offset: 0xFFFFFFFF
      static typename SimplePriorityQueue_2<TItem, TPriority>::SimpleNode* New_ctor(TItem data) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimpleNode").WithContext(".ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*>(data)));
      }
    }; // Priority_Queue.SimplePriorityQueue`2/SimpleNode
    // Could not write size check! Type: Priority_Queue.SimplePriorityQueue`2/SimpleNode is generic!
    // private readonly Priority_Queue.GenericPriorityQueue`2<Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority>,TPriority> _queue
    // Offset: 0x0
    Priority_Queue::GenericPriorityQueue_2<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*, TPriority>* queue;
    // private readonly System.Collections.Generic.Dictionary`2<TItem,System.Collections.Generic.IList`1<Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority>>> _itemToNodesCache
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<TItem, System::Collections::Generic::IList_1<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*>*>* itemToNodesCache;
    // private readonly System.Collections.Generic.IList`1<Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority>> _nullNodesCache
    // Offset: 0x0
    System::Collections::Generic::IList_1<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*>* nullNodesCache;
    // Creating interface conversion operator: operator Priority_Queue::IPriorityQueue_2<TItem, TPriority>
    operator Priority_Queue::IPriorityQueue_2<TItem, TPriority>() noexcept {
      return *reinterpret_cast<Priority_Queue::IPriorityQueue_2<TItem, TPriority>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 INITIAL_QUEUE_SIZE
    static int _get_INITIAL_QUEUE_SIZE() {
      static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("_get_INITIAL_QUEUE_SIZE");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SimplePriorityQueue_2<TItem, TPriority>*>::get(), "INITIAL_QUEUE_SIZE")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 INITIAL_QUEUE_SIZE
    static void _set_INITIAL_QUEUE_SIZE(int value) {
      static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("_set_INITIAL_QUEUE_SIZE");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SimplePriorityQueue_2<TItem, TPriority>*>::get(), "INITIAL_QUEUE_SIZE", value)));
    }
    // public System.Void .ctor(System.Collections.Generic.IComparer`1<TPriority> priorityComparer)
    // Offset: 0xFFFFFFFF
    static SimplePriorityQueue_2<TItem, TPriority>* New_ctor(System::Collections::Generic::IComparer_1<TPriority>* priorityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimplePriorityQueue_2<TItem, TPriority>*>(priorityComparer)));
    }
    // public System.Void .ctor(System.Comparison`1<TPriority> priorityComparer)
    // Offset: 0xFFFFFFFF
    static SimplePriorityQueue_2<TItem, TPriority>* New_ctor(System::Comparison_1<TPriority>* priorityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimplePriorityQueue_2<TItem, TPriority>*>(priorityComparer)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEqualityComparer`1<TItem> itemEquality)
    // Offset: 0xFFFFFFFF
    static SimplePriorityQueue_2<TItem, TPriority>* New_ctor(System::Collections::Generic::IEqualityComparer_1<TItem>* itemEquality) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimplePriorityQueue_2<TItem, TPriority>*>(itemEquality)));
    }
    // public System.Void .ctor(System.Collections.Generic.IComparer`1<TPriority> priorityComparer, System.Collections.Generic.IEqualityComparer`1<TItem> itemEquality)
    // Offset: 0xFFFFFFFF
    static SimplePriorityQueue_2<TItem, TPriority>* New_ctor(System::Collections::Generic::IComparer_1<TPriority>* priorityComparer, System::Collections::Generic::IEqualityComparer_1<TItem>* itemEquality) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimplePriorityQueue_2<TItem, TPriority>*>(priorityComparer, itemEquality)));
    }
    // public System.Void .ctor(System.Comparison`1<TPriority> priorityComparer, System.Collections.Generic.IEqualityComparer`1<TItem> itemEquality)
    // Offset: 0xFFFFFFFF
    static SimplePriorityQueue_2<TItem, TPriority>* New_ctor(System::Comparison_1<TPriority>* priorityComparer, System::Collections::Generic::IEqualityComparer_1<TItem>* itemEquality) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimplePriorityQueue_2<TItem, TPriority>*>(priorityComparer, itemEquality)));
    }
    // private Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority> GetExistingNode(TItem item)
    // Offset: 0xFFFFFFFF
    typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode* GetExistingNode(TItem item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("GetExistingNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*>(), "GetExistingNode", {}, ::il2cpp_utils::ExtractTypes(item))));
      return ::il2cpp_utils::RunMethodThrow<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*, false>(this, ___internal__method, item);
    }
    // private System.Void AddToNodeCache(Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority> node)
    // Offset: 0xFFFFFFFF
    void AddToNodeCache(typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("AddToNodeCache");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "AddToNodeCache", {}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // private System.Void RemoveFromNodeCache(Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority> node)
    // Offset: 0xFFFFFFFF
    void RemoveFromNodeCache(typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("RemoveFromNodeCache");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "RemoveFromNodeCache", {}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // private Priority_Queue.SimplePriorityQueue`2/SimpleNode<TItem,TPriority> EnqueueNoLockOrCache(TItem item, TPriority priority)
    // Offset: 0xFFFFFFFF
    typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode* EnqueueNoLockOrCache(TItem item, TPriority priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("EnqueueNoLockOrCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*>(), "EnqueueNoLockOrCache", {}, ::il2cpp_utils::ExtractTypes(item, priority))));
      return ::il2cpp_utils::RunMethodThrow<typename Priority_Queue::SimplePriorityQueue_2<TItem, TPriority>::SimpleNode*, false>(this, ___internal__method, item, priority);
    }
    // public System.Boolean EnqueueWithoutDuplicates(TItem item, TPriority priority)
    // Offset: 0xFFFFFFFF
    bool EnqueueWithoutDuplicates(TItem item, TPriority priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("EnqueueWithoutDuplicates");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "EnqueueWithoutDuplicates", {}, ::il2cpp_utils::ExtractTypes(item, priority)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item, priority);
    }
    // public TPriority GetPriority(TItem item)
    // Offset: 0xFFFFFFFF
    TPriority GetPriority(TItem item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("GetPriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TPriority>(), "GetPriority", {}, ::il2cpp_utils::ExtractTypes(item)));
      return ::il2cpp_utils::RunMethodThrow<TPriority, false>(this, ___internal__method, item);
    }
    // public System.Boolean TryFirst(out TItem first)
    // Offset: 0xFFFFFFFF
    bool TryFirst(TItem& first) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("TryFirst");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryFirst", {}, ::il2cpp_utils::ExtractTypes(first)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, first);
    }
    // public System.Boolean TryDequeue(out TItem first)
    // Offset: 0xFFFFFFFF
    bool TryDequeue(TItem& first) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("TryDequeue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryDequeue", {}, ::il2cpp_utils::ExtractTypes(first)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, first);
    }
    // public System.Boolean TryRemove(TItem item)
    // Offset: 0xFFFFFFFF
    bool TryRemove(TItem item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("TryRemove");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryRemove", {}, ::il2cpp_utils::ExtractTypes(item)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
    }
    // public System.Boolean TryUpdatePriority(TItem item, TPriority priority)
    // Offset: 0xFFFFFFFF
    bool TryUpdatePriority(TItem item, TPriority priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("TryUpdatePriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryUpdatePriority", {}, ::il2cpp_utils::ExtractTypes(item, priority)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item, priority);
    }
    // public System.Boolean TryGetPriority(TItem item, out TPriority priority)
    // Offset: 0xFFFFFFFF
    bool TryGetPriority(TItem item, TPriority& priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("TryGetPriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "TryGetPriority", {}, ::il2cpp_utils::ExtractTypes(item, priority)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item, priority);
    }
    // public System.Collections.Generic.IEnumerator`1<TItem> GetEnumerator()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerator_1<TItem>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::Collections::Generic::IEnumerator_1<TItem>*>(), "GetEnumerator", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<TItem>*, false>(this, ___internal__method);
    }
    // public System.Boolean IsValidQueue()
    // Offset: 0xFFFFFFFF
    bool IsValidQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("IsValidQueue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsValidQueue", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static SimplePriorityQueue_2<TItem, TPriority>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimplePriorityQueue_2<TItem, TPriority>*>()));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Int32 IPriorityQueue_2::get_Count()
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("get_Count");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<int>(), "get_Count", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public TItem get_First()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: TItem IPriorityQueue_2::get_First()
    TItem get_First() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("get_First");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TItem>(), "get_First", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<TItem, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Clear()
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("Clear");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Clear", {}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(TItem item)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Boolean IPriorityQueue_2::Contains(TItem item)
    bool Contains(TItem item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("Contains");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "Contains", {}, ::il2cpp_utils::ExtractTypes(item)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
    }
    // public TItem Dequeue()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: TItem IPriorityQueue_2::Dequeue()
    TItem Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("Dequeue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TItem>(), "Dequeue", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<TItem, false>(this, ___internal__method);
    }
    // public System.Void Enqueue(TItem item, TPriority priority)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Enqueue(TItem item, TPriority priority)
    void Enqueue(TItem item, TPriority priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("Enqueue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Enqueue", {}, ::il2cpp_utils::ExtractTypes(item, priority)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item, priority);
    }
    // public System.Void Remove(TItem item)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Remove(TItem item)
    void Remove(TItem item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("Remove");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Remove", {}, ::il2cpp_utils::ExtractTypes(item)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item);
    }
    // public System.Void UpdatePriority(TItem item, TPriority priority)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::UpdatePriority(TItem item, TPriority priority)
    void UpdatePriority(TItem item, TPriority priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("UpdatePriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "UpdatePriority", {}, ::il2cpp_utils::ExtractTypes(item, priority)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item, priority);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Priority_Queue").WithContext("SimplePriorityQueue_2").WithContext("System.Collections.IEnumerable.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::Collections::IEnumerator*>(), "System.Collections.IEnumerable.GetEnumerator", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // Priority_Queue.SimplePriorityQueue`2
  // Could not write size check! Type: Priority_Queue.SimplePriorityQueue`2 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Priority_Queue::SimplePriorityQueue_2, "Priority_Queue", "SimplePriorityQueue`2");
#pragma pack(pop)
