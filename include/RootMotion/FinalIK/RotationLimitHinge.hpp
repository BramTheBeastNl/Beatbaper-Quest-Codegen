// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x5C
  // Autogenerated type: RootMotion.FinalIK.RotationLimitHinge
  // [] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: DB4E34
  // [AddComponentMenu] Offset: DB4E34
  class RotationLimitHinge : public RootMotion::FinalIK::RotationLimit {
    public:
    // public System.Boolean useLimits
    // Size: 0x1
    // Offset: 0x38
    bool useLimits;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useLimits and: min
    char __padding0[0x3] = {};
    // public System.Single min
    // Size: 0x4
    // Offset: 0x3C
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single max
    // Size: 0x4
    // Offset: 0x40
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDB7B44
    // public System.Single zeroAxisDisplayOffset
    // Size: 0x4
    // Offset: 0x44
    float zeroAxisDisplayOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion lastRotation
    // Size: 0x10
    // Offset: 0x48
    UnityEngine::Quaternion lastRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private System.Single lastAngle
    // Size: 0x4
    // Offset: 0x58
    float lastAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: RotationLimitHinge
    RotationLimitHinge(bool useLimits_ = {}, float min_ = {}, float max_ = {}, float zeroAxisDisplayOffset_ = {}, UnityEngine::Quaternion lastRotation_ = {}, float lastAngle_ = {}) noexcept : useLimits{useLimits_}, min{min_}, max{max_}, zeroAxisDisplayOffset{zeroAxisDisplayOffset_}, lastRotation{lastRotation_}, lastAngle{lastAngle_} {}
    // private System.Void OpenUserManual()
    // Offset: 0x15E6A88
    void OpenUserManual();
    // private System.Void OpenScriptReference()
    // Offset: 0x15E6AD4
    void OpenScriptReference();
    // private System.Void SupportGroup()
    // Offset: 0x15E6B20
    void SupportGroup();
    // private System.Void ASThread()
    // Offset: 0x15E6B6C
    void ASThread();
    // private UnityEngine.Quaternion LimitHinge(UnityEngine.Quaternion rotation)
    // Offset: 0x15E6BE0
    UnityEngine::Quaternion LimitHinge(UnityEngine::Quaternion rotation);
    // protected override UnityEngine.Quaternion LimitRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x15E6BB8
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: UnityEngine.Quaternion RotationLimit::LimitRotation(UnityEngine.Quaternion rotation)
    UnityEngine::Quaternion LimitRotation(UnityEngine::Quaternion rotation);
    // public System.Void .ctor()
    // Offset: 0x15E6EE0
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: System.Void RotationLimit::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationLimitHinge* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitHinge").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationLimitHinge*, creationType>()));
    }
  }; // RootMotion.FinalIK.RotationLimitHinge
  static check_size<sizeof(RotationLimitHinge), 88 + sizeof(float)> __RootMotion_FinalIK_RotationLimitHingeSizeCheck;
  static_assert(sizeof(RotationLimitHinge) == 0x5C);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::RotationLimitHinge*, "RootMotion.FinalIK", "RotationLimitHinge");
#pragma pack(pop)
