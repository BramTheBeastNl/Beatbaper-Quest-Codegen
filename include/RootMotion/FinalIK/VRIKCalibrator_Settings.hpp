// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator
#include "RootMotion/FinalIK/VRIKCalibrator.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.Settings
  // [TokenAttribute] Offset: FFFFFFFF
  class VRIKCalibrator::Settings : public ::Il2CppObject {
    public:
    // [TooltipAttribute] Offset: 0xEA5570
    // public System.Single scaleMlp
    // Size: 0x4
    // Offset: 0x10
    float scaleMlp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xEA55A8
    // public UnityEngine.Vector3 headTrackerForward
    // Size: 0xC
    // Offset: 0x14
    UnityEngine::Vector3 headTrackerForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA55E0
    // public UnityEngine.Vector3 headTrackerUp
    // Size: 0xC
    // Offset: 0x20
    UnityEngine::Vector3 headTrackerUp;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA5618
    // public UnityEngine.Vector3 bodyTrackerForward
    // Size: 0xC
    // Offset: 0x2C
    UnityEngine::Vector3 bodyTrackerForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA5650
    // public UnityEngine.Vector3 bodyTrackerUp
    // Size: 0xC
    // Offset: 0x38
    UnityEngine::Vector3 bodyTrackerUp;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA5688
    // public UnityEngine.Vector3 handTrackerForward
    // Size: 0xC
    // Offset: 0x44
    UnityEngine::Vector3 handTrackerForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA56C0
    // public UnityEngine.Vector3 handTrackerUp
    // Size: 0xC
    // Offset: 0x50
    UnityEngine::Vector3 handTrackerUp;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA56F8
    // public UnityEngine.Vector3 footTrackerForward
    // Size: 0xC
    // Offset: 0x5C
    UnityEngine::Vector3 footTrackerForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA5730
    // public UnityEngine.Vector3 footTrackerUp
    // Size: 0xC
    // Offset: 0x68
    UnityEngine::Vector3 footTrackerUp;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0xEA5768
    // [TooltipAttribute] Offset: 0xEA5768
    // public UnityEngine.Vector3 headOffset
    // Size: 0xC
    // Offset: 0x74
    UnityEngine::Vector3 headOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA57B8
    // public UnityEngine.Vector3 handOffset
    // Size: 0xC
    // Offset: 0x80
    UnityEngine::Vector3 handOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xEA57F0
    // public System.Single footForwardOffset
    // Size: 0x4
    // Offset: 0x8C
    float footForwardOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xEA5828
    // public System.Single footInwardOffset
    // Size: 0x4
    // Offset: 0x90
    float footInwardOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xEA5860
    // [RangeAttribute] Offset: 0xEA5860
    // public System.Single footHeadingOffset
    // Size: 0x4
    // Offset: 0x94
    float footHeadingOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xEA58BC
    // public System.Single pelvisPositionWeight
    // Size: 0x4
    // Offset: 0x98
    float pelvisPositionWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xEA58D4
    // public System.Single pelvisRotationWeight
    // Size: 0x4
    // Offset: 0x9C
    float pelvisRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: Settings
    Settings(float scaleMlp_ = {}, UnityEngine::Vector3 headTrackerForward_ = {}, UnityEngine::Vector3 headTrackerUp_ = {}, UnityEngine::Vector3 bodyTrackerForward_ = {}, UnityEngine::Vector3 bodyTrackerUp_ = {}, UnityEngine::Vector3 handTrackerForward_ = {}, UnityEngine::Vector3 handTrackerUp_ = {}, UnityEngine::Vector3 footTrackerForward_ = {}, UnityEngine::Vector3 footTrackerUp_ = {}, UnityEngine::Vector3 headOffset_ = {}, UnityEngine::Vector3 handOffset_ = {}, float footForwardOffset_ = {}, float footInwardOffset_ = {}, float footHeadingOffset_ = {}, float pelvisPositionWeight_ = {}, float pelvisRotationWeight_ = {}) noexcept : scaleMlp{scaleMlp_}, headTrackerForward{headTrackerForward_}, headTrackerUp{headTrackerUp_}, bodyTrackerForward{bodyTrackerForward_}, bodyTrackerUp{bodyTrackerUp_}, handTrackerForward{handTrackerForward_}, handTrackerUp{handTrackerUp_}, footTrackerForward{footTrackerForward_}, footTrackerUp{footTrackerUp_}, headOffset{headOffset_}, handOffset{handOffset_}, footForwardOffset{footForwardOffset_}, footInwardOffset{footInwardOffset_}, footHeadingOffset{footHeadingOffset_}, pelvisPositionWeight{pelvisPositionWeight_}, pelvisRotationWeight{pelvisRotationWeight_} {}
    // Get instance field: public System.Single scaleMlp
    float _get_scaleMlp();
    // Set instance field: public System.Single scaleMlp
    void _set_scaleMlp(float value);
    // Get instance field: public UnityEngine.Vector3 headTrackerForward
    UnityEngine::Vector3 _get_headTrackerForward();
    // Set instance field: public UnityEngine.Vector3 headTrackerForward
    void _set_headTrackerForward(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 headTrackerUp
    UnityEngine::Vector3 _get_headTrackerUp();
    // Set instance field: public UnityEngine.Vector3 headTrackerUp
    void _set_headTrackerUp(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 bodyTrackerForward
    UnityEngine::Vector3 _get_bodyTrackerForward();
    // Set instance field: public UnityEngine.Vector3 bodyTrackerForward
    void _set_bodyTrackerForward(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 bodyTrackerUp
    UnityEngine::Vector3 _get_bodyTrackerUp();
    // Set instance field: public UnityEngine.Vector3 bodyTrackerUp
    void _set_bodyTrackerUp(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 handTrackerForward
    UnityEngine::Vector3 _get_handTrackerForward();
    // Set instance field: public UnityEngine.Vector3 handTrackerForward
    void _set_handTrackerForward(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 handTrackerUp
    UnityEngine::Vector3 _get_handTrackerUp();
    // Set instance field: public UnityEngine.Vector3 handTrackerUp
    void _set_handTrackerUp(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 footTrackerForward
    UnityEngine::Vector3 _get_footTrackerForward();
    // Set instance field: public UnityEngine.Vector3 footTrackerForward
    void _set_footTrackerForward(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 footTrackerUp
    UnityEngine::Vector3 _get_footTrackerUp();
    // Set instance field: public UnityEngine.Vector3 footTrackerUp
    void _set_footTrackerUp(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 headOffset
    UnityEngine::Vector3 _get_headOffset();
    // Set instance field: public UnityEngine.Vector3 headOffset
    void _set_headOffset(UnityEngine::Vector3 value);
    // Get instance field: public UnityEngine.Vector3 handOffset
    UnityEngine::Vector3 _get_handOffset();
    // Set instance field: public UnityEngine.Vector3 handOffset
    void _set_handOffset(UnityEngine::Vector3 value);
    // Get instance field: public System.Single footForwardOffset
    float _get_footForwardOffset();
    // Set instance field: public System.Single footForwardOffset
    void _set_footForwardOffset(float value);
    // Get instance field: public System.Single footInwardOffset
    float _get_footInwardOffset();
    // Set instance field: public System.Single footInwardOffset
    void _set_footInwardOffset(float value);
    // Get instance field: public System.Single footHeadingOffset
    float _get_footHeadingOffset();
    // Set instance field: public System.Single footHeadingOffset
    void _set_footHeadingOffset(float value);
    // Get instance field: public System.Single pelvisPositionWeight
    float _get_pelvisPositionWeight();
    // Set instance field: public System.Single pelvisPositionWeight
    void _set_pelvisPositionWeight(float value);
    // Get instance field: public System.Single pelvisRotationWeight
    float _get_pelvisRotationWeight();
    // Set instance field: public System.Single pelvisRotationWeight
    void _set_pelvisRotationWeight(float value);
    // public System.Void .ctor()
    // Offset: 0x173AF28
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRIKCalibrator::Settings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::Settings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRIKCalibrator::Settings*, creationType>()));
    }
  }; // RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.Settings
  #pragma pack(pop)
  static check_size<sizeof(VRIKCalibrator::Settings), 156 + sizeof(float)> __RootMotion_FinalIK_VRIKCalibrator_SettingsSizeCheck;
  static_assert(sizeof(VRIKCalibrator::Settings) == 0xA0);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::VRIKCalibrator::Settings*, "RootMotion.FinalIK", "VRIKCalibrator/Settings");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::VRIKCalibrator::Settings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
