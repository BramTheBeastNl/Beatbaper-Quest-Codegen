// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.SolverManager
#include "RootMotion/SolverManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: Finger
  class Finger;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.FingerRig
  class FingerRig : public RootMotion::SolverManager {
    public:
    // Writing base type padding for base size: 0x33 to desired offset: 0x34
    char ___base_padding[0x1] = {};
    // [TooltipAttribute] Offset: 0xE08028
    // [RangeAttribute] Offset: 0xE08028
    // public System.Single weight
    // Size: 0x4
    // Offset: 0x34
    float weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public RootMotion.FinalIK.Finger[] fingers
    // Size: 0x8
    // Offset: 0x38
    ::Array<RootMotion::FinalIK::Finger*>* fingers;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::Finger*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE0807C
    // private System.Boolean <initiated>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: FingerRig
    FingerRig(float weight_ = {}, ::Array<RootMotion::FinalIK::Finger*>* fingers_ = {}, bool initiated_ = {}) noexcept : weight{weight_}, fingers{fingers_}, initiated{initiated_} {}
    // public System.Boolean get_initiated()
    // Offset: 0x1C5708C
    bool get_initiated();
    // private System.Void set_initiated(System.Boolean value)
    // Offset: 0x1C57094
    void set_initiated(bool value);
    // public System.Boolean IsValid(ref System.String errorMessage)
    // Offset: 0x1C570A0
    bool IsValid(::Il2CppString*& errorMessage);
    // public System.Void AutoDetect()
    // Offset: 0x1C5712C
    void AutoDetect();
    // public System.Void AddFinger(UnityEngine.Transform bone1, UnityEngine.Transform bone2, UnityEngine.Transform bone3, UnityEngine.Transform tip, UnityEngine.Transform target)
    // Offset: 0x1C57448
    void AddFinger(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* tip, UnityEngine::Transform* target);
    // public System.Void RemoveFinger(System.Int32 index)
    // Offset: 0x1C575BC
    void RemoveFinger(int index);
    // private System.Void AddChildrenRecursive(UnityEngine.Transform parent, ref UnityEngine.Transform[] array)
    // Offset: 0x1C57340
    void AddChildrenRecursive(UnityEngine::Transform* parent, ::Array<UnityEngine::Transform*>*& array);
    // public System.Void UpdateFingerSolvers()
    // Offset: 0x1C577EC
    void UpdateFingerSolvers();
    // public System.Void FixFingerTransforms()
    // Offset: 0x1C57868
    void FixFingerTransforms();
    // public System.Void StoreDefaultLocalState()
    // Offset: 0x1C578E0
    void StoreDefaultLocalState();
    // protected override System.Void InitiateSolver()
    // Offset: 0x1C57724
    // Implemented from: RootMotion.SolverManager
    // Base method: System.Void SolverManager::InitiateSolver()
    void InitiateSolver();
    // protected override System.Void UpdateSolver()
    // Offset: 0x1C5794C
    // Implemented from: RootMotion.SolverManager
    // Base method: System.Void SolverManager::UpdateSolver()
    void UpdateSolver();
    // protected override System.Void FixTransforms()
    // Offset: 0x1C57950
    // Implemented from: RootMotion.SolverManager
    // Base method: System.Void SolverManager::FixTransforms()
    void FixTransforms();
    // public System.Void .ctor()
    // Offset: 0x1C57964
    // Implemented from: RootMotion.SolverManager
    // Base method: System.Void SolverManager::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerRig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerRig*, creationType>()));
    }
  }; // RootMotion.FinalIK.FingerRig
  #pragma pack(pop)
  static check_size<sizeof(FingerRig), 64 + sizeof(bool)> __RootMotion_FinalIK_FingerRigSizeCheck;
  static_assert(sizeof(FingerRig) == 0x41);
  // Writing MetadataGetter for method: FingerRig::get_initiated
  // Il2CppName: get_initiated
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FingerRig::*)()>(&FingerRig::get_initiated)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::set_initiated
  // Il2CppName: set_initiated
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(bool)>(&FingerRig::set_initiated)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: FingerRig::IsValid
  // Il2CppName: IsValid
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FingerRig::*)(::Il2CppString*&)>(&FingerRig::IsValid)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
    }
  };
  // Writing MetadataGetter for method: FingerRig::AutoDetect
  // Il2CppName: AutoDetect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::AutoDetect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "AutoDetect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::AddFinger
  // Il2CppName: AddFinger
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&FingerRig::AddFinger)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "AddFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
    }
  };
  // Writing MetadataGetter for method: FingerRig::RemoveFinger
  // Il2CppName: RemoveFinger
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(int)>(&FingerRig::RemoveFinger)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "RemoveFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: FingerRig::AddChildrenRecursive
  // Il2CppName: AddChildrenRecursive
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(UnityEngine::Transform*, ::Array<UnityEngine::Transform*>*&)>(&FingerRig::AddChildrenRecursive)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "AddChildrenRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*&>()});
    }
  };
  // Writing MetadataGetter for method: FingerRig::UpdateFingerSolvers
  // Il2CppName: UpdateFingerSolvers
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::UpdateFingerSolvers)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "UpdateFingerSolvers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::FixFingerTransforms
  // Il2CppName: FixFingerTransforms
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::FixFingerTransforms)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "FixFingerTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::StoreDefaultLocalState
  // Il2CppName: StoreDefaultLocalState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::StoreDefaultLocalState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::InitiateSolver
  // Il2CppName: InitiateSolver
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::InitiateSolver)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "InitiateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::UpdateSolver
  // Il2CppName: UpdateSolver
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::UpdateSolver)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "UpdateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::FixTransforms
  // Il2CppName: FixTransforms
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::FixTransforms)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FingerRig::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FingerRig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::FingerRig*, "RootMotion.FinalIK", "FingerRig");
