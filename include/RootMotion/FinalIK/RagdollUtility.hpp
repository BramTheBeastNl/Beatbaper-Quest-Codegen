// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.AnimatorUpdateMode
#include "UnityEngine/AnimatorUpdateMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IK
  class IK;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x78
  // Autogenerated type: RootMotion.FinalIK.RagdollUtility
  // [] Offset: FFFFFFFF
  // [RequireComponent] Offset: DB4D70
  class RagdollUtility : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: RootMotion::FinalIK::RagdollUtility::Rigidbone
    class Rigidbone;
    // Nested type: RootMotion::FinalIK::RagdollUtility::Child
    class Child;
    // Nested type: RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21
    class $DisableRagdollSmooth$d__21;
    // [TooltipAttribute] Offset: 0xDB79D4
    // public RootMotion.FinalIK.IK ik
    // Size: 0x8
    // Offset: 0x18
    RootMotion::FinalIK::IK* ik;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IK*) == 0x8);
    // [TooltipAttribute] Offset: 0xDB7A0C
    // public System.Single ragdollToAnimationTime
    // Size: 0x4
    // Offset: 0x20
    float ragdollToAnimationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDB7A44
    // public System.Boolean applyIkOnRagdoll
    // Size: 0x1
    // Offset: 0x24
    bool applyIkOnRagdoll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applyIkOnRagdoll and: applyVelocity
    char __padding2[0x3] = {};
    // [TooltipAttribute] Offset: 0xDB7A7C
    // public System.Single applyVelocity
    // Size: 0x4
    // Offset: 0x28
    float applyVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDB7AB4
    // public System.Single applyAngularVelocity
    // Size: 0x4
    // Offset: 0x2C
    float applyAngularVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(UnityEngine::Animator*) == 0x8);
    // private RootMotion.FinalIK.RagdollUtility/Rigidbone[] rigidbones
    // Size: 0x8
    // Offset: 0x38
    ::Array<RootMotion::FinalIK::RagdollUtility::Rigidbone*>* rigidbones;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::RagdollUtility::Rigidbone*>*) == 0x8);
    // private RootMotion.FinalIK.RagdollUtility/Child[] children
    // Size: 0x8
    // Offset: 0x40
    ::Array<RootMotion::FinalIK::RagdollUtility::Child*>* children;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::RagdollUtility::Child*>*) == 0x8);
    // private System.Boolean enableRagdollFlag
    // Size: 0x1
    // Offset: 0x48
    bool enableRagdollFlag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableRagdollFlag and: animatorUpdateMode
    char __padding8[0x3] = {};
    // private UnityEngine.AnimatorUpdateMode animatorUpdateMode
    // Size: 0x4
    // Offset: 0x4C
    UnityEngine::AnimatorUpdateMode animatorUpdateMode;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimatorUpdateMode) == 0x4);
    // private RootMotion.FinalIK.IK[] allIKComponents
    // Size: 0x8
    // Offset: 0x50
    ::Array<RootMotion::FinalIK::IK*>* allIKComponents;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::IK*>*) == 0x8);
    // private System.Boolean[] fixTransforms
    // Size: 0x8
    // Offset: 0x58
    ::Array<bool>* fixTransforms;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // private System.Single ragdollWeight
    // Size: 0x4
    // Offset: 0x60
    float ragdollWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ragdollWeightV
    // Size: 0x4
    // Offset: 0x64
    float ragdollWeightV;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean fixedFrame
    // Size: 0x1
    // Offset: 0x68
    bool fixedFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fixedFrame and: disabledIKComponents
    char __padding14[0x7] = {};
    // private System.Boolean[] disabledIKComponents
    // Size: 0x8
    // Offset: 0x70
    ::Array<bool>* disabledIKComponents;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // Creating value type constructor for type: RagdollUtility
    RagdollUtility(RootMotion::FinalIK::IK* ik_ = {}, float ragdollToAnimationTime_ = {}, bool applyIkOnRagdoll_ = {}, float applyVelocity_ = {}, float applyAngularVelocity_ = {}, UnityEngine::Animator* animator_ = {}, ::Array<RootMotion::FinalIK::RagdollUtility::Rigidbone*>* rigidbones_ = {}, ::Array<RootMotion::FinalIK::RagdollUtility::Child*>* children_ = {}, bool enableRagdollFlag_ = {}, UnityEngine::AnimatorUpdateMode animatorUpdateMode_ = {}, ::Array<RootMotion::FinalIK::IK*>* allIKComponents_ = {}, ::Array<bool>* fixTransforms_ = {}, float ragdollWeight_ = {}, float ragdollWeightV_ = {}, bool fixedFrame_ = {}, ::Array<bool>* disabledIKComponents_ = {}) noexcept : ik{ik_}, ragdollToAnimationTime{ragdollToAnimationTime_}, applyIkOnRagdoll{applyIkOnRagdoll_}, applyVelocity{applyVelocity_}, applyAngularVelocity{applyAngularVelocity_}, animator{animator_}, rigidbones{rigidbones_}, children{children_}, enableRagdollFlag{enableRagdollFlag_}, animatorUpdateMode{animatorUpdateMode_}, allIKComponents{allIKComponents_}, fixTransforms{fixTransforms_}, ragdollWeight{ragdollWeight_}, ragdollWeightV{ragdollWeightV_}, fixedFrame{fixedFrame_}, disabledIKComponents{disabledIKComponents_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void EnableRagdoll()
    // Offset: 0x15E2B30
    void EnableRagdoll();
    // public System.Void DisableRagdoll()
    // Offset: 0x15E2BE0
    void DisableRagdoll();
    // public System.Void Start()
    // Offset: 0x15E2D1C
    void Start();
    // private System.Collections.IEnumerator DisableRagdollSmooth()
    // Offset: 0x15E2CA0
    System::Collections::IEnumerator* DisableRagdollSmooth();
    // private System.Void Update()
    // Offset: 0x15E33A4
    void Update();
    // private System.Void FixedUpdate()
    // Offset: 0x15E35F0
    void FixedUpdate();
    // private System.Void LateUpdate()
    // Offset: 0x15E36A8
    void LateUpdate();
    // private System.Void AfterLastIK()
    // Offset: 0x15E38E8
    void AfterLastIK();
    // private System.Void AfterAnimation()
    // Offset: 0x15E3728
    void AfterAnimation();
    // private System.Void OnFinalPose()
    // Offset: 0x15E38A4
    void OnFinalPose();
    // private System.Void RagdollEnabler()
    // Offset: 0x15E3984
    void RagdollEnabler();
    // private System.Boolean get_isRagdoll()
    // Offset: 0x15E2B68
    bool get_isRagdoll();
    // private System.Void RecordVelocities()
    // Offset: 0x15E391C
    void RecordVelocities();
    // private System.Boolean get_ikUsed()
    // Offset: 0x15E3764
    bool get_ikUsed();
    // private System.Void StoreLocalState()
    // Offset: 0x15E2C38
    void StoreLocalState();
    // private System.Void FixTransforms(System.Single weight)
    // Offset: 0x15E3630
    void FixTransforms(float weight);
    // private System.Void OnDestroy()
    // Offset: 0x15E4128
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x15E4250
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RagdollUtility* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RagdollUtility").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RagdollUtility*, creationType>()));
    }
  }; // RootMotion.FinalIK.RagdollUtility
  static check_size<sizeof(RagdollUtility), 112 + sizeof(::Array<bool>*)> __RootMotion_FinalIK_RagdollUtilitySizeCheck;
  static_assert(sizeof(RagdollUtility) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::RagdollUtility*, "RootMotion.FinalIK", "RagdollUtility");
#pragma pack(pop)
