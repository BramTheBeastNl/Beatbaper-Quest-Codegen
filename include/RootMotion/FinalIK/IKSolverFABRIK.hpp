// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverHeuristic
#include "RootMotion/FinalIK/IKSolverHeuristic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolverFABRIK
  class IKSolverFABRIK : public RootMotion::FinalIK::IKSolverHeuristic {
    public:
    // public RootMotion.FinalIK.IKSolver/IterationDelegate OnPreIteration
    // Size: 0x8
    // Offset: 0x88
    RootMotion::FinalIK::IKSolver::IterationDelegate* OnPreIteration;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver::IterationDelegate*) == 0x8);
    // private System.Boolean[] limitedBones
    // Size: 0x8
    // Offset: 0x90
    ::Array<bool>* limitedBones;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // private UnityEngine.Vector3[] solverLocalPositions
    // Size: 0x8
    // Offset: 0x98
    ::Array<UnityEngine::Vector3>* solverLocalPositions;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // Creating value type constructor for type: IKSolverFABRIK
    IKSolverFABRIK(RootMotion::FinalIK::IKSolver::IterationDelegate* OnPreIteration_ = {}, ::Array<bool>* limitedBones_ = {}, ::Array<UnityEngine::Vector3>* solverLocalPositions_ = {}) noexcept : OnPreIteration{OnPreIteration_}, limitedBones{limitedBones_}, solverLocalPositions{solverLocalPositions_} {}
    // public System.Void SolveForward(UnityEngine.Vector3 position)
    // Offset: 0x1BF4BAC
    void SolveForward(UnityEngine::Vector3 position);
    // public System.Void SolveBackward(UnityEngine.Vector3 position)
    // Offset: 0x1BF52F0
    void SolveBackward(UnityEngine::Vector3 position);
    // private UnityEngine.Vector3 SolveJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, System.Single length)
    // Offset: 0x1BF5DCC
    UnityEngine::Vector3 SolveJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length);
    // private System.Void OnPreSolve()
    // Offset: 0x1BF4C7C
    void OnPreSolve();
    // private System.Void OnPostSolve()
    // Offset: 0x1BF53D0
    void OnPostSolve();
    // private System.Void Solve(UnityEngine.Vector3 targetPosition)
    // Offset: 0x1BF5D68
    void Solve(UnityEngine::Vector3 targetPosition);
    // private System.Void ForwardReach(UnityEngine.Vector3 position)
    // Offset: 0x1BF5118
    void ForwardReach(UnityEngine::Vector3 position);
    // private System.Void SolverMove(System.Int32 index, UnityEngine.Vector3 offset)
    // Offset: 0x1BF6614
    void SolverMove(int index, UnityEngine::Vector3 offset);
    // private System.Void SolverRotate(System.Int32 index, UnityEngine.Quaternion rotation, System.Boolean recursive)
    // Offset: 0x1BF6724
    void SolverRotate(int index, UnityEngine::Quaternion rotation, bool recursive);
    // private System.Void SolverRotateChildren(System.Int32 index, UnityEngine.Quaternion rotation)
    // Offset: 0x1BF6850
    void SolverRotateChildren(int index, UnityEngine::Quaternion rotation);
    // private System.Void SolverMoveChildrenAroundPoint(System.Int32 index, UnityEngine.Quaternion rotation)
    // Offset: 0x1BF6968
    void SolverMoveChildrenAroundPoint(int index, UnityEngine::Quaternion rotation);
    // private UnityEngine.Quaternion GetParentSolverRotation(System.Int32 index)
    // Offset: 0x1BF57C8
    UnityEngine::Quaternion GetParentSolverRotation(int index);
    // private UnityEngine.Vector3 GetParentSolverPosition(System.Int32 index)
    // Offset: 0x1BF5914
    UnityEngine::Vector3 GetParentSolverPosition(int index);
    // private UnityEngine.Quaternion GetLimitedRotation(System.Int32 index, UnityEngine.Quaternion q, out System.Boolean changed)
    // Offset: 0x1BF6B54
    UnityEngine::Quaternion GetLimitedRotation(int index, UnityEngine::Quaternion q, bool& changed);
    // private System.Void LimitForward(System.Int32 rotateBone, System.Int32 limitBone)
    // Offset: 0x1BF6088
    void LimitForward(int rotateBone, int limitBone);
    // private System.Void BackwardReach(UnityEngine.Vector3 position)
    // Offset: 0x1BF53C0
    void BackwardReach(UnityEngine::Vector3 position);
    // private System.Void BackwardReachUnlimited(UnityEngine.Vector3 position)
    // Offset: 0x1BF72C4
    void BackwardReachUnlimited(UnityEngine::Vector3 position);
    // private System.Void BackwardReachLimited(UnityEngine.Vector3 position)
    // Offset: 0x1BF6D2C
    void BackwardReachLimited(UnityEngine::Vector3 position);
    // private System.Void MapToSolverPositions()
    // Offset: 0x1BF5EE4
    void MapToSolverPositions();
    // private System.Void MapToSolverPositionsLimited()
    // Offset: 0x1BF5FC4
    void MapToSolverPositionsLimited();
    // public override UnityEngine.Vector3 GetIKPosition()
    // Offset: 0x1BF5424
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: UnityEngine.Vector3 IKSolver::GetIKPosition()
    UnityEngine::Vector3 GetIKPosition();
    // protected override System.Void OnInitiate()
    // Offset: 0x1BF54BC
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Void IKSolverHeuristic::OnInitiate()
    void OnInitiate();
    // protected override System.Void OnUpdate()
    // Offset: 0x1BF5A60
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Void IKSolverHeuristic::OnUpdate()
    void OnUpdate();
    // protected override System.Boolean get_boneLengthCanBeZero()
    // Offset: 0x1BF5DC4
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Boolean IKSolverHeuristic::get_boneLengthCanBeZero()
    bool get_boneLengthCanBeZero();
    // public System.Void .ctor()
    // Offset: 0x1BF7390
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Void IKSolverHeuristic::.ctor()
    // Base method: System.Void IKSolver::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverFABRIK* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverFABRIK*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolverFABRIK
  #pragma pack(pop)
  static check_size<sizeof(IKSolverFABRIK), 152 + sizeof(::Array<UnityEngine::Vector3>*)> __RootMotion_FinalIK_IKSolverFABRIKSizeCheck;
  static_assert(sizeof(IKSolverFABRIK) == 0xA0);
  // Writing MetadataGetter for method: IKSolverFABRIK::SolveForward
  // Il2CppName: SolveForward
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::SolveForward)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolveForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::SolveBackward
  // Il2CppName: SolveBackward
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::SolveBackward)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolveBackward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::SolveJoint
  // Il2CppName: SolveJoint
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIK::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverFABRIK::SolveJoint)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolveJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::OnPreSolve
  // Il2CppName: OnPreSolve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnPreSolve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnPreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::OnPostSolve
  // Il2CppName: OnPostSolve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnPostSolve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnPostSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::Solve
  // Il2CppName: Solve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::Solve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::ForwardReach
  // Il2CppName: ForwardReach
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::ForwardReach)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "ForwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::SolverMove
  // Il2CppName: SolverMove
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Vector3)>(&IKSolverFABRIK::SolverMove)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::SolverRotate
  // Il2CppName: SolverRotate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Quaternion, bool)>(&IKSolverFABRIK::SolverRotate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverRotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::SolverRotateChildren
  // Il2CppName: SolverRotateChildren
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Quaternion)>(&IKSolverFABRIK::SolverRotateChildren)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverRotateChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::SolverMoveChildrenAroundPoint
  // Il2CppName: SolverMoveChildrenAroundPoint
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Quaternion)>(&IKSolverFABRIK::SolverMoveChildrenAroundPoint)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverMoveChildrenAroundPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::GetParentSolverRotation
  // Il2CppName: GetParentSolverRotation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverFABRIK::*)(int)>(&IKSolverFABRIK::GetParentSolverRotation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetParentSolverRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::GetParentSolverPosition
  // Il2CppName: GetParentSolverPosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIK::*)(int)>(&IKSolverFABRIK::GetParentSolverPosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetParentSolverPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::GetLimitedRotation
  // Il2CppName: GetLimitedRotation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverFABRIK::*)(int, UnityEngine::Quaternion, bool&)>(&IKSolverFABRIK::GetLimitedRotation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetLimitedRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::LimitForward
  // Il2CppName: LimitForward
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, int)>(&IKSolverFABRIK::LimitForward)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "LimitForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::BackwardReach
  // Il2CppName: BackwardReach
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::BackwardReach)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "BackwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::BackwardReachUnlimited
  // Il2CppName: BackwardReachUnlimited
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::BackwardReachUnlimited)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "BackwardReachUnlimited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::BackwardReachLimited
  // Il2CppName: BackwardReachLimited
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::BackwardReachLimited)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "BackwardReachLimited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::MapToSolverPositions
  // Il2CppName: MapToSolverPositions
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::MapToSolverPositions)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "MapToSolverPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::MapToSolverPositionsLimited
  // Il2CppName: MapToSolverPositionsLimited
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::MapToSolverPositionsLimited)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "MapToSolverPositionsLimited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::GetIKPosition
  // Il2CppName: GetIKPosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIK::*)()>(&IKSolverFABRIK::GetIKPosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::OnInitiate
  // Il2CppName: OnInitiate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnInitiate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::OnUpdate
  // Il2CppName: OnUpdate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnUpdate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::get_boneLengthCanBeZero
  // Il2CppName: get_boneLengthCanBeZero
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverFABRIK::*)()>(&IKSolverFABRIK::get_boneLengthCanBeZero)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "get_boneLengthCanBeZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IKSolverFABRIK::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverFABRIK*, "RootMotion.FinalIK", "IKSolverFABRIK");
