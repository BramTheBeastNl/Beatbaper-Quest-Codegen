// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverHeuristic
#include "RootMotion/FinalIK/IKSolverHeuristic.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolverFABRIK
  // [] Offset: FFFFFFFF
  class IKSolverFABRIK : public RootMotion::FinalIK::IKSolverHeuristic {
    public:
    // public RootMotion.FinalIK.IKSolver/IterationDelegate OnPreIteration
    // Size: 0x8
    // Offset: 0x88
    RootMotion::FinalIK::IKSolver::IterationDelegate* OnPreIteration;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver::IterationDelegate*) == 0x8);
    // private System.Boolean[] limitedBones
    // Size: 0x8
    // Offset: 0x90
    ::Array<bool>* limitedBones;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // private UnityEngine.Vector3[] solverLocalPositions
    // Size: 0x8
    // Offset: 0x98
    ::Array<UnityEngine::Vector3>* solverLocalPositions;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // Creating value type constructor for type: IKSolverFABRIK
    IKSolverFABRIK(RootMotion::FinalIK::IKSolver::IterationDelegate* OnPreIteration_ = {}, ::Array<bool>* limitedBones_ = {}, ::Array<UnityEngine::Vector3>* solverLocalPositions_ = {}) noexcept : OnPreIteration{OnPreIteration_}, limitedBones{limitedBones_}, solverLocalPositions{solverLocalPositions_} {}
    // public System.Void SolveForward(UnityEngine.Vector3 position)
    // Offset: 0x1A44E9C
    void SolveForward(UnityEngine::Vector3 position);
    // public System.Void SolveBackward(UnityEngine.Vector3 position)
    // Offset: 0x1A455E0
    void SolveBackward(UnityEngine::Vector3 position);
    // private UnityEngine.Vector3 SolveJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, System.Single length)
    // Offset: 0x1A460BC
    UnityEngine::Vector3 SolveJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length);
    // private System.Void OnPreSolve()
    // Offset: 0x1A44F6C
    void OnPreSolve();
    // private System.Void OnPostSolve()
    // Offset: 0x1A456C0
    void OnPostSolve();
    // private System.Void Solve(UnityEngine.Vector3 targetPosition)
    // Offset: 0x1A46058
    void Solve(UnityEngine::Vector3 targetPosition);
    // private System.Void ForwardReach(UnityEngine.Vector3 position)
    // Offset: 0x1A45408
    void ForwardReach(UnityEngine::Vector3 position);
    // private System.Void SolverMove(System.Int32 index, UnityEngine.Vector3 offset)
    // Offset: 0x1A46904
    void SolverMove(int index, UnityEngine::Vector3 offset);
    // private System.Void SolverRotate(System.Int32 index, UnityEngine.Quaternion rotation, System.Boolean recursive)
    // Offset: 0x1A46A14
    void SolverRotate(int index, UnityEngine::Quaternion rotation, bool recursive);
    // private System.Void SolverRotateChildren(System.Int32 index, UnityEngine.Quaternion rotation)
    // Offset: 0x1A46B40
    void SolverRotateChildren(int index, UnityEngine::Quaternion rotation);
    // private System.Void SolverMoveChildrenAroundPoint(System.Int32 index, UnityEngine.Quaternion rotation)
    // Offset: 0x1A46C58
    void SolverMoveChildrenAroundPoint(int index, UnityEngine::Quaternion rotation);
    // private UnityEngine.Quaternion GetParentSolverRotation(System.Int32 index)
    // Offset: 0x1A45AB8
    UnityEngine::Quaternion GetParentSolverRotation(int index);
    // private UnityEngine.Vector3 GetParentSolverPosition(System.Int32 index)
    // Offset: 0x1A45C04
    UnityEngine::Vector3 GetParentSolverPosition(int index);
    // private UnityEngine.Quaternion GetLimitedRotation(System.Int32 index, UnityEngine.Quaternion q, out System.Boolean changed)
    // Offset: 0x1A46E44
    UnityEngine::Quaternion GetLimitedRotation(int index, UnityEngine::Quaternion q, bool& changed);
    // private System.Void LimitForward(System.Int32 rotateBone, System.Int32 limitBone)
    // Offset: 0x1A46378
    void LimitForward(int rotateBone, int limitBone);
    // private System.Void BackwardReach(UnityEngine.Vector3 position)
    // Offset: 0x1A456B0
    void BackwardReach(UnityEngine::Vector3 position);
    // private System.Void BackwardReachUnlimited(UnityEngine.Vector3 position)
    // Offset: 0x1A475B4
    void BackwardReachUnlimited(UnityEngine::Vector3 position);
    // private System.Void BackwardReachLimited(UnityEngine.Vector3 position)
    // Offset: 0x1A4701C
    void BackwardReachLimited(UnityEngine::Vector3 position);
    // private System.Void MapToSolverPositions()
    // Offset: 0x1A461D4
    void MapToSolverPositions();
    // private System.Void MapToSolverPositionsLimited()
    // Offset: 0x1A462B4
    void MapToSolverPositionsLimited();
    // public override UnityEngine.Vector3 GetIKPosition()
    // Offset: 0x1A45714
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: UnityEngine.Vector3 IKSolver::GetIKPosition()
    UnityEngine::Vector3 GetIKPosition();
    // protected override System.Void OnInitiate()
    // Offset: 0x1A457AC
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Void IKSolverHeuristic::OnInitiate()
    void OnInitiate();
    // protected override System.Void OnUpdate()
    // Offset: 0x1A45D50
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Void IKSolverHeuristic::OnUpdate()
    void OnUpdate();
    // protected override System.Boolean get_boneLengthCanBeZero()
    // Offset: 0x1A460B4
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Boolean IKSolverHeuristic::get_boneLengthCanBeZero()
    bool get_boneLengthCanBeZero();
    // public System.Void .ctor()
    // Offset: 0x1A47680
    // Implemented from: RootMotion.FinalIK.IKSolverHeuristic
    // Base method: System.Void IKSolverHeuristic::.ctor()
    // Base method: System.Void IKSolver::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverFABRIK* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverFABRIK*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolverFABRIK
  #pragma pack(pop)
  static check_size<sizeof(IKSolverFABRIK), 152 + sizeof(::Array<UnityEngine::Vector3>*)> __RootMotion_FinalIK_IKSolverFABRIKSizeCheck;
  static_assert(sizeof(IKSolverFABRIK) == 0xA0);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverFABRIK*, "RootMotion.FinalIK", "IKSolverFABRIK");
