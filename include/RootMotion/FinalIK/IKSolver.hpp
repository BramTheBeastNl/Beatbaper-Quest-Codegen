// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolver
  class IKSolver : public ::Il2CppObject {
    public:
    // Nested type: RootMotion::FinalIK::IKSolver::Point
    class Point;
    // Nested type: RootMotion::FinalIK::IKSolver::Bone
    class Bone;
    // Nested type: RootMotion::FinalIK::IKSolver::Node
    class Node;
    // Nested type: RootMotion::FinalIK::IKSolver::UpdateDelegate
    class UpdateDelegate;
    // Nested type: RootMotion::FinalIK::IKSolver::IterationDelegate
    class IterationDelegate;
    // [HideInInspector] Offset: 0xE094BC
    // public UnityEngine.Vector3 IKPosition
    // Size: 0xC
    // Offset: 0x10
    UnityEngine::Vector3 IKPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xE094CC
    // [RangeAttribute] Offset: 0xE094CC
    // public System.Single IKPositionWeight
    // Size: 0x4
    // Offset: 0x1C
    float IKPositionWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xE09520
    // private System.Boolean <initiated>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initiated and: OnPreInitiate
    char __padding2[0x7] = {};
    // public RootMotion.FinalIK.IKSolver/UpdateDelegate OnPreInitiate
    // Size: 0x8
    // Offset: 0x28
    RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPreInitiate;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver::UpdateDelegate*) == 0x8);
    // public RootMotion.FinalIK.IKSolver/UpdateDelegate OnPostInitiate
    // Size: 0x8
    // Offset: 0x30
    RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPostInitiate;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver::UpdateDelegate*) == 0x8);
    // public RootMotion.FinalIK.IKSolver/UpdateDelegate OnPreUpdate
    // Size: 0x8
    // Offset: 0x38
    RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPreUpdate;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver::UpdateDelegate*) == 0x8);
    // public RootMotion.FinalIK.IKSolver/UpdateDelegate OnPostUpdate
    // Size: 0x8
    // Offset: 0x40
    RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPostUpdate;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver::UpdateDelegate*) == 0x8);
    // protected System.Boolean firstInitiation
    // Size: 0x1
    // Offset: 0x48
    bool firstInitiation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: firstInitiation and: root
    char __padding7[0x7] = {};
    // [HideInInspector] Offset: 0xE09530
    // protected UnityEngine.Transform root
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Transform* root;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: IKSolver
    IKSolver(UnityEngine::Vector3 IKPosition_ = {}, float IKPositionWeight_ = {}, bool initiated_ = {}, RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPreInitiate_ = {}, RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPostInitiate_ = {}, RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPreUpdate_ = {}, RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPostUpdate_ = {}, bool firstInitiation_ = {}, UnityEngine::Transform* root_ = {}) noexcept : IKPosition{IKPosition_}, IKPositionWeight{IKPositionWeight_}, initiated{initiated_}, OnPreInitiate{OnPreInitiate_}, OnPostInitiate{OnPostInitiate_}, OnPreUpdate{OnPreUpdate_}, OnPostUpdate{OnPostUpdate_}, firstInitiation{firstInitiation_}, root{root_} {}
    // public System.Boolean IsValid()
    // Offset: 0x1C6CB8C
    bool IsValid();
    // public System.Boolean IsValid(ref System.String message)
    // Offset: 0xFFFFFFFF
    bool IsValid(::Il2CppString*& message);
    // public System.Void Initiate(UnityEngine.Transform root)
    // Offset: 0x1C655D8
    void Initiate(UnityEngine::Transform* root);
    // public System.Void Update()
    // Offset: 0x1C654F8
    void Update();
    // public UnityEngine.Vector3 GetIKPosition()
    // Offset: 0x1C6CC08
    UnityEngine::Vector3 GetIKPosition();
    // public System.Void SetIKPosition(UnityEngine.Vector3 position)
    // Offset: 0x1C6CC14
    void SetIKPosition(UnityEngine::Vector3 position);
    // public System.Single GetIKPositionWeight()
    // Offset: 0x1C6CC20
    float GetIKPositionWeight();
    // public System.Void SetIKPositionWeight(System.Single weight)
    // Offset: 0x1C6CC28
    void SetIKPositionWeight(float weight);
    // public UnityEngine.Transform GetRoot()
    // Offset: 0x1C6CCAC
    UnityEngine::Transform* GetRoot();
    // public System.Boolean get_initiated()
    // Offset: 0x1C6CCB4
    bool get_initiated();
    // private System.Void set_initiated(System.Boolean value)
    // Offset: 0x1C6CCBC
    void set_initiated(bool value);
    // public RootMotion.FinalIK.IKSolver/Point[] GetPoints()
    // Offset: 0xFFFFFFFF
    ::Array<RootMotion::FinalIK::IKSolver::Point*>* GetPoints();
    // public RootMotion.FinalIK.IKSolver/Point GetPoint(UnityEngine.Transform transform)
    // Offset: 0xFFFFFFFF
    RootMotion::FinalIK::IKSolver::Point* GetPoint(UnityEngine::Transform* transform);
    // public System.Void FixTransforms()
    // Offset: 0xFFFFFFFF
    void FixTransforms();
    // public System.Void StoreDefaultLocalState()
    // Offset: 0xFFFFFFFF
    void StoreDefaultLocalState();
    // protected System.Void OnInitiate()
    // Offset: 0xFFFFFFFF
    void OnInitiate();
    // protected System.Void OnUpdate()
    // Offset: 0xFFFFFFFF
    void OnUpdate();
    // protected System.Void LogWarning(System.String message)
    // Offset: 0x1C6CCC8
    void LogWarning(::Il2CppString* message);
    // static public UnityEngine.Transform ContainsDuplicateBone(RootMotion.FinalIK.IKSolver/Bone[] bones)
    // Offset: 0x1C6CCE0
    static UnityEngine::Transform* ContainsDuplicateBone(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones);
    // static public System.Boolean HierarchyIsValid(RootMotion.FinalIK.IKSolver/Bone[] bones)
    // Offset: 0x1C6CE1C
    static bool HierarchyIsValid(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones);
    // static protected System.Single PreSolveBones(ref RootMotion.FinalIK.IKSolver/Bone[] bones)
    // Offset: 0x1C6CEC8
    static float PreSolveBones(::Array<RootMotion::FinalIK::IKSolver::Bone*>*& bones);
    // protected System.Void .ctor()
    // Offset: 0x1C6D24C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolver* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolver*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolver
  #pragma pack(pop)
  static check_size<sizeof(IKSolver), 80 + sizeof(UnityEngine::Transform*)> __RootMotion_FinalIK_IKSolverSizeCheck;
  static_assert(sizeof(IKSolver) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolver*, "RootMotion.FinalIK", "IKSolver");
// Writing MetadataGetter for method: IKSolver::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolver::*)()>(&IKSolver::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolver::*)(::Il2CppString*&)>(&IKSolver::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(UnityEngine::Transform*)>(&IKSolver::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::GetIKPosition
// Il2CppName: GetIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolver::*)()>(&IKSolver::GetIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::SetIKPosition
// Il2CppName: SetIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(UnityEngine::Vector3)>(&IKSolver::SetIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "SetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolver::GetIKPositionWeight
// Il2CppName: GetIKPositionWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolver::*)()>(&IKSolver::GetIKPositionWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetIKPositionWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::SetIKPositionWeight
// Il2CppName: SetIKPositionWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(float)>(&IKSolver::SetIKPositionWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "SetIKPositionWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::GetRoot
// Il2CppName: GetRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (IKSolver::*)()>(&IKSolver::GetRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolver::*)()>(&IKSolver::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(bool)>(&IKSolver::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolver::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolver::*)()>(&IKSolver::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolver::*)(UnityEngine::Transform*)>(&IKSolver::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(::Il2CppString*)>(&IKSolver::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::ContainsDuplicateBone
// Il2CppName: ContainsDuplicateBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*)>(&IKSolver::ContainsDuplicateBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "ContainsDuplicateBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::HierarchyIsValid
// Il2CppName: HierarchyIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*)>(&IKSolver::HierarchyIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "HierarchyIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::PreSolveBones
// Il2CppName: PreSolveBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*&)>(&IKSolver::PreSolveBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "PreSolveBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolver::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
