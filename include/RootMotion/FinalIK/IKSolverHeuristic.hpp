// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolverHeuristic
  // [] Offset: FFFFFFFF
  class IKSolverHeuristic : public RootMotion::FinalIK::IKSolver {
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public System.Single tolerance
    // Size: 0x4
    // Offset: 0x60
    float tolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxIterations
    // Size: 0x4
    // Offset: 0x64
    int maxIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean useRotationLimits
    // Size: 0x1
    // Offset: 0x68
    bool useRotationLimits;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean XY
    // Size: 0x1
    // Offset: 0x69
    bool XY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: XY and: bones
    char __padding4[0x6] = {};
    // public RootMotion.FinalIK.IKSolver/Bone[] bones
    // Size: 0x8
    // Offset: 0x70
    ::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::IKSolver::Bone*>*) == 0x8);
    // protected UnityEngine.Vector3 lastLocalDirection
    // Size: 0xC
    // Offset: 0x78
    UnityEngine::Vector3 lastLocalDirection;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // protected System.Single chainLength
    // Size: 0x4
    // Offset: 0x84
    float chainLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: IKSolverHeuristic
    IKSolverHeuristic(UnityEngine::Transform* target_ = {}, float tolerance_ = {}, int maxIterations_ = {}, bool useRotationLimits_ = {}, bool XY_ = {}, ::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones_ = {}, UnityEngine::Vector3 lastLocalDirection_ = {}, float chainLength_ = {}) noexcept : target{target_}, tolerance{tolerance_}, maxIterations{maxIterations_}, useRotationLimits{useRotationLimits_}, XY{XY_}, bones{bones_}, lastLocalDirection{lastLocalDirection_}, chainLength{chainLength_} {}
    // public System.Boolean SetChain(UnityEngine.Transform[] hierarchy, UnityEngine.Transform root)
    // Offset: 0x1A49454
    bool SetChain(::Array<UnityEngine::Transform*>* hierarchy, UnityEngine::Transform* root);
    // public System.Void AddBone(UnityEngine.Transform bone)
    // Offset: 0x1A495E8
    void AddBone(UnityEngine::Transform* bone);
    // protected System.Int32 get_minBones()
    // Offset: 0x1A49C98
    int get_minBones();
    // protected System.Boolean get_boneLengthCanBeZero()
    // Offset: 0x1A49CA0
    bool get_boneLengthCanBeZero();
    // protected System.Boolean get_allowCommonParent()
    // Offset: 0x1A49CA8
    bool get_allowCommonParent_NEW();
    // protected System.Void InitiateBones()
    // Offset: 0x1A3FFFC
    void InitiateBones();
    // protected UnityEngine.Vector3 get_localDirection()
    // Offset: 0x1A49CB8
    UnityEngine::Vector3 get_localDirection();
    // protected System.Single get_positionOffset()
    // Offset: 0x1A40C18
    float get_positionOffset();
    // protected UnityEngine.Vector3 GetSingularityOffset()
    // Offset: 0x1A40874
    UnityEngine::Vector3 GetSingularityOffset();
    // private System.Boolean SingularityDetected()
    // Offset: 0x1A49DEC
    bool SingularityDetected();
    // public override System.Void StoreDefaultLocalState()
    // Offset: 0x1A49724
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::StoreDefaultLocalState_NEW()
    void StoreDefaultLocalState();
    // public override System.Void FixTransforms()
    // Offset: 0x1A49790
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::FixTransforms_NEW()
    void FixTransforms();
    // public override System.Boolean IsValid(ref System.String message)
    // Offset: 0x1A49810
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Boolean IKSolver::IsValid_NEW(ref System.String message)
    bool IsValid(::Il2CppString*& message);
    // public override RootMotion.FinalIK.IKSolver/Point[] GetPoints()
    // Offset: 0x1A49B9C
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: RootMotion.FinalIK.IKSolver/Point[] IKSolver::GetPoints_NEW()
    ::Array<RootMotion::FinalIK::IKSolver::Point*>* GetPoints();
    // public override RootMotion.FinalIK.IKSolver/Point GetPoint(UnityEngine.Transform transform)
    // Offset: 0x1A49BA4
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: RootMotion.FinalIK.IKSolver/Point IKSolver::GetPoint_NEW(UnityEngine.Transform transform)
    RootMotion::FinalIK::IKSolver::Point* GetPoint(UnityEngine::Transform* transform);
    // protected override System.Void OnInitiate()
    // Offset: 0x1A49CB0
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::OnInitiate_NEW()
    void OnInitiate();
    // protected override System.Void OnUpdate()
    // Offset: 0x1A49CB4
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::OnUpdate_NEW()
    void OnUpdate();
    // public System.Void .ctor()
    // Offset: 0x1A3EFCC
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverHeuristic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverHeuristic*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolverHeuristic
  #pragma pack(pop)
  static check_size<sizeof(IKSolverHeuristic), 132 + sizeof(float)> __RootMotion_FinalIK_IKSolverHeuristicSizeCheck;
  static_assert(sizeof(IKSolverHeuristic) == 0x88);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverHeuristic*, "RootMotion.FinalIK", "IKSolverHeuristic");
