// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderQuadruped
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: RootMotion.FinalIK.Grounding
#include "RootMotion/FinalIK/Grounding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKSolver
  class IKSolver;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x28
  // Autogenerated type: RootMotion.FinalIK.GrounderQuadruped/Foot
  // [] Offset: FFFFFFFF
  struct GrounderQuadruped::Foot/*, public System::ValueType*/ {
    public:
    // public RootMotion.FinalIK.IKSolver solver
    // Size: 0x8
    // Offset: 0x0
    RootMotion::FinalIK::IKSolver* solver;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolver*) == 0x8);
    // public UnityEngine.Transform transform
    // Size: 0x8
    // Offset: 0x8
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x10
    UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // public RootMotion.FinalIK.Grounding/Leg leg
    // Size: 0x8
    // Offset: 0x20
    RootMotion::FinalIK::Grounding::Leg* leg;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::Grounding::Leg*) == 0x8);
    // Creating value type constructor for type: Foot
    constexpr Foot(RootMotion::FinalIK::IKSolver* solver_ = {}, UnityEngine::Transform* transform_ = {}, UnityEngine::Quaternion rotation_ = {}, RootMotion::FinalIK::Grounding::Leg* leg_ = {}) noexcept : solver{solver_}, transform{transform_}, rotation{rotation_}, leg{leg_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(RootMotion.FinalIK.IKSolver solver, UnityEngine.Transform transform)
    // Offset: 0xCA689C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Foot(RootMotion::FinalIK::IKSolver* solver, UnityEngine::Transform* transform) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Foot").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(solver, transform)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, solver, transform);
    }
  }; // RootMotion.FinalIK.GrounderQuadruped/Foot
  static check_size<sizeof(GrounderQuadruped::Foot), 32 + sizeof(RootMotion::FinalIK::Grounding::Leg*)> __RootMotion_FinalIK_GrounderQuadruped_FootSizeCheck;
  static_assert(sizeof(GrounderQuadruped::Foot) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::GrounderQuadruped::Foot, "RootMotion.FinalIK", "GrounderQuadruped/Foot");
#pragma pack(pop)
