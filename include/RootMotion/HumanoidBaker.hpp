// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.Baker
#include "RootMotion/Baker.hpp"
// Including type: UnityEngine.HumanPose
#include "UnityEngine/HumanPose.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: BakerMuscle
  class BakerMuscle;
  // Forward declaring type: BakerHumanoidQT
  class BakerHumanoidQT;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: HumanPoseHandler
  class HumanPoseHandler;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.HumanoidBaker
  // [TokenAttribute] Offset: FFFFFFFF
  class HumanoidBaker : public RootMotion::Baker {
    public:
    // [TooltipAttribute] Offset: 0xE9F230
    // public System.Boolean bakeHandIK
    // Size: 0x1
    // Offset: 0x74
    bool bakeHandIK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bakeHandIK and: IKKeyReductionError
    char __padding0[0x3] = {};
    // [TooltipAttribute] Offset: 0xE9F268
    // [RangeAttribute] Offset: 0xE9F268
    // public System.Single IKKeyReductionError
    // Size: 0x4
    // Offset: 0x78
    float IKKeyReductionError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xE9F2C0
    // [RangeAttribute] Offset: 0xE9F2C0
    // public System.Int32 muscleFrameRateDiv
    // Size: 0x4
    // Offset: 0x7C
    int muscleFrameRateDiv;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private RootMotion.BakerMuscle[] bakerMuscles
    // Size: 0x8
    // Offset: 0x80
    ::Array<RootMotion::BakerMuscle*>* bakerMuscles;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::BakerMuscle*>*) == 0x8);
    // private RootMotion.BakerHumanoidQT rootQT
    // Size: 0x8
    // Offset: 0x88
    RootMotion::BakerHumanoidQT* rootQT;
    // Field size check
    static_assert(sizeof(RootMotion::BakerHumanoidQT*) == 0x8);
    // private RootMotion.BakerHumanoidQT leftFootQT
    // Size: 0x8
    // Offset: 0x90
    RootMotion::BakerHumanoidQT* leftFootQT;
    // Field size check
    static_assert(sizeof(RootMotion::BakerHumanoidQT*) == 0x8);
    // private RootMotion.BakerHumanoidQT rightFootQT
    // Size: 0x8
    // Offset: 0x98
    RootMotion::BakerHumanoidQT* rightFootQT;
    // Field size check
    static_assert(sizeof(RootMotion::BakerHumanoidQT*) == 0x8);
    // private RootMotion.BakerHumanoidQT leftHandQT
    // Size: 0x8
    // Offset: 0xA0
    RootMotion::BakerHumanoidQT* leftHandQT;
    // Field size check
    static_assert(sizeof(RootMotion::BakerHumanoidQT*) == 0x8);
    // private RootMotion.BakerHumanoidQT rightHandQT
    // Size: 0x8
    // Offset: 0xA8
    RootMotion::BakerHumanoidQT* rightHandQT;
    // Field size check
    static_assert(sizeof(RootMotion::BakerHumanoidQT*) == 0x8);
    // private System.Single[] muscles
    // Size: 0x8
    // Offset: 0xB0
    ::Array<float>* muscles;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // private UnityEngine.HumanPose pose
    // Size: 0x28
    // Offset: 0xB8
    UnityEngine::HumanPose pose;
    // Field size check
    static_assert(sizeof(UnityEngine::HumanPose) == 0x28);
    // private UnityEngine.HumanPoseHandler handler
    // Size: 0x8
    // Offset: 0xE0
    UnityEngine::HumanPoseHandler* handler;
    // Field size check
    static_assert(sizeof(UnityEngine::HumanPoseHandler*) == 0x8);
    // private UnityEngine.Vector3 bodyPosition
    // Size: 0xC
    // Offset: 0xE8
    UnityEngine::Vector3 bodyPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion bodyRotation
    // Size: 0x10
    // Offset: 0xF4
    UnityEngine::Quaternion bodyRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private System.Int32 mN
    // Size: 0x4
    // Offset: 0x104
    int mN;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Quaternion lastBodyRotation
    // Size: 0x10
    // Offset: 0x108
    UnityEngine::Quaternion lastBodyRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // Creating value type constructor for type: HumanoidBaker
    HumanoidBaker(bool bakeHandIK_ = {}, float IKKeyReductionError_ = {}, int muscleFrameRateDiv_ = {}, ::Array<RootMotion::BakerMuscle*>* bakerMuscles_ = {}, RootMotion::BakerHumanoidQT* rootQT_ = {}, RootMotion::BakerHumanoidQT* leftFootQT_ = {}, RootMotion::BakerHumanoidQT* rightFootQT_ = {}, RootMotion::BakerHumanoidQT* leftHandQT_ = {}, RootMotion::BakerHumanoidQT* rightHandQT_ = {}, ::Array<float>* muscles_ = {}, UnityEngine::HumanPose pose_ = {}, UnityEngine::HumanPoseHandler* handler_ = {}, UnityEngine::Vector3 bodyPosition_ = {}, UnityEngine::Quaternion bodyRotation_ = {}, int mN_ = {}, UnityEngine::Quaternion lastBodyRotation_ = {}) noexcept : bakeHandIK{bakeHandIK_}, IKKeyReductionError{IKKeyReductionError_}, muscleFrameRateDiv{muscleFrameRateDiv_}, bakerMuscles{bakerMuscles_}, rootQT{rootQT_}, leftFootQT{leftFootQT_}, rightFootQT{rightFootQT_}, leftHandQT{leftHandQT_}, rightHandQT{rightHandQT_}, muscles{muscles_}, pose{pose_}, handler{handler_}, bodyPosition{bodyPosition_}, bodyRotation{bodyRotation_}, mN{mN_}, lastBodyRotation{lastBodyRotation_} {}
    // Get instance field: public System.Boolean bakeHandIK
    bool _get_bakeHandIK();
    // Set instance field: public System.Boolean bakeHandIK
    void _set_bakeHandIK(bool value);
    // Get instance field: public System.Single IKKeyReductionError
    float _get_IKKeyReductionError();
    // Set instance field: public System.Single IKKeyReductionError
    void _set_IKKeyReductionError(float value);
    // Get instance field: public System.Int32 muscleFrameRateDiv
    int _get_muscleFrameRateDiv();
    // Set instance field: public System.Int32 muscleFrameRateDiv
    void _set_muscleFrameRateDiv(int value);
    // Get instance field: private RootMotion.BakerMuscle[] bakerMuscles
    ::Array<RootMotion::BakerMuscle*>* _get_bakerMuscles();
    // Set instance field: private RootMotion.BakerMuscle[] bakerMuscles
    void _set_bakerMuscles(::Array<RootMotion::BakerMuscle*>* value);
    // Get instance field: private RootMotion.BakerHumanoidQT rootQT
    RootMotion::BakerHumanoidQT* _get_rootQT();
    // Set instance field: private RootMotion.BakerHumanoidQT rootQT
    void _set_rootQT(RootMotion::BakerHumanoidQT* value);
    // Get instance field: private RootMotion.BakerHumanoidQT leftFootQT
    RootMotion::BakerHumanoidQT* _get_leftFootQT();
    // Set instance field: private RootMotion.BakerHumanoidQT leftFootQT
    void _set_leftFootQT(RootMotion::BakerHumanoidQT* value);
    // Get instance field: private RootMotion.BakerHumanoidQT rightFootQT
    RootMotion::BakerHumanoidQT* _get_rightFootQT();
    // Set instance field: private RootMotion.BakerHumanoidQT rightFootQT
    void _set_rightFootQT(RootMotion::BakerHumanoidQT* value);
    // Get instance field: private RootMotion.BakerHumanoidQT leftHandQT
    RootMotion::BakerHumanoidQT* _get_leftHandQT();
    // Set instance field: private RootMotion.BakerHumanoidQT leftHandQT
    void _set_leftHandQT(RootMotion::BakerHumanoidQT* value);
    // Get instance field: private RootMotion.BakerHumanoidQT rightHandQT
    RootMotion::BakerHumanoidQT* _get_rightHandQT();
    // Set instance field: private RootMotion.BakerHumanoidQT rightHandQT
    void _set_rightHandQT(RootMotion::BakerHumanoidQT* value);
    // Get instance field: private System.Single[] muscles
    ::Array<float>* _get_muscles();
    // Set instance field: private System.Single[] muscles
    void _set_muscles(::Array<float>* value);
    // Get instance field: private UnityEngine.HumanPose pose
    UnityEngine::HumanPose _get_pose();
    // Set instance field: private UnityEngine.HumanPose pose
    void _set_pose(UnityEngine::HumanPose value);
    // Get instance field: private UnityEngine.HumanPoseHandler handler
    UnityEngine::HumanPoseHandler* _get_handler();
    // Set instance field: private UnityEngine.HumanPoseHandler handler
    void _set_handler(UnityEngine::HumanPoseHandler* value);
    // Get instance field: private UnityEngine.Vector3 bodyPosition
    UnityEngine::Vector3 _get_bodyPosition();
    // Set instance field: private UnityEngine.Vector3 bodyPosition
    void _set_bodyPosition(UnityEngine::Vector3 value);
    // Get instance field: private UnityEngine.Quaternion bodyRotation
    UnityEngine::Quaternion _get_bodyRotation();
    // Set instance field: private UnityEngine.Quaternion bodyRotation
    void _set_bodyRotation(UnityEngine::Quaternion value);
    // Get instance field: private System.Int32 mN
    int _get_mN();
    // Set instance field: private System.Int32 mN
    void _set_mN(int value);
    // Get instance field: private UnityEngine.Quaternion lastBodyRotation
    UnityEngine::Quaternion _get_lastBodyRotation();
    // Set instance field: private UnityEngine.Quaternion lastBodyRotation
    void _set_lastBodyRotation(UnityEngine::Quaternion value);
    // private System.Void Awake()
    // Offset: 0x173CE70
    void Awake();
    // private System.Void UpdateHumanPose()
    // Offset: 0x173D9AC
    void UpdateHumanPose();
    // public System.Void .ctor()
    // Offset: 0x173DA88
    // Implemented from: RootMotion.Baker
    // Base method: System.Void Baker::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HumanoidBaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::HumanoidBaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HumanoidBaker*, creationType>()));
    }
    // protected override UnityEngine.Transform GetCharacterRoot()
    // Offset: 0x173D29C
    // Implemented from: RootMotion.Baker
    // Base method: UnityEngine.Transform Baker::GetCharacterRoot()
    UnityEngine::Transform* GetCharacterRoot();
    // protected override System.Void OnStartBaking()
    // Offset: 0x173D2B8
    // Implemented from: RootMotion.Baker
    // Base method: System.Void Baker::OnStartBaking()
    void OnStartBaking();
    // protected override System.Void OnSetLoopFrame(System.Single time)
    // Offset: 0x173D3D8
    // Implemented from: RootMotion.Baker
    // Base method: System.Void Baker::OnSetLoopFrame(System.Single time)
    void OnSetLoopFrame(float time);
    // protected override System.Void OnSetCurves(ref UnityEngine.AnimationClip clip)
    // Offset: 0x173D4B4
    // Implemented from: RootMotion.Baker
    // Base method: System.Void Baker::OnSetCurves(ref UnityEngine.AnimationClip clip)
    void OnSetCurves(ByRef<UnityEngine::AnimationClip*> clip);
    // protected override System.Void OnSetKeyframes(System.Single time, System.Boolean lastFrame)
    // Offset: 0x173D684
    // Implemented from: RootMotion.Baker
    // Base method: System.Void Baker::OnSetKeyframes(System.Single time, System.Boolean lastFrame)
    void OnSetKeyframes(float time, bool lastFrame);
  }; // RootMotion.HumanoidBaker
  #pragma pack(pop)
  static check_size<sizeof(HumanoidBaker), 264 + sizeof(UnityEngine::Quaternion)> __RootMotion_HumanoidBakerSizeCheck;
  static_assert(sizeof(HumanoidBaker) == 0x118);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::HumanoidBaker*, "RootMotion", "HumanoidBaker");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::HumanoidBaker::*)()>(&RootMotion::HumanoidBaker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::UpdateHumanPose
// Il2CppName: UpdateHumanPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::HumanoidBaker::*)()>(&RootMotion::HumanoidBaker::UpdateHumanPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "UpdateHumanPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::GetCharacterRoot
// Il2CppName: GetCharacterRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (RootMotion::HumanoidBaker::*)()>(&RootMotion::HumanoidBaker::GetCharacterRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "GetCharacterRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::OnStartBaking
// Il2CppName: OnStartBaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::HumanoidBaker::*)()>(&RootMotion::HumanoidBaker::OnStartBaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "OnStartBaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::OnSetLoopFrame
// Il2CppName: OnSetLoopFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::HumanoidBaker::*)(float)>(&RootMotion::HumanoidBaker::OnSetLoopFrame)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "OnSetLoopFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::OnSetCurves
// Il2CppName: OnSetCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::HumanoidBaker::*)(ByRef<UnityEngine::AnimationClip*>)>(&RootMotion::HumanoidBaker::OnSetCurves)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "OnSetCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: RootMotion::HumanoidBaker::OnSetKeyframes
// Il2CppName: OnSetKeyframes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::HumanoidBaker::*)(float, bool)>(&RootMotion::HumanoidBaker::OnSetKeyframes)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lastFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::HumanoidBaker*), "OnSetKeyframes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lastFrame});
  }
};
