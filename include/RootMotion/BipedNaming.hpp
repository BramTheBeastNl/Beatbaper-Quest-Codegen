// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.Object
#include "System/Object.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion
namespace RootMotion {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct CsObject;
struct CsString;
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Autogenerated type: RootMotion.BipedNaming
  class BipedNaming : public ::CsObject {
    public:
    // Nested type: RootMotion::BipedNaming::BoneType
    struct BoneType;
    // Nested type: RootMotion::BipedNaming::BoneSide
    struct BoneSide;
    // Get static field: static public System.String[] typeLeft
    static ::Array<::CsString*>* _get_typeLeft();
    // Set static field: static public System.String[] typeLeft
    static void _set_typeLeft(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeRight
    static ::Array<::CsString*>* _get_typeRight();
    // Set static field: static public System.String[] typeRight
    static void _set_typeRight(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeSpine
    static ::Array<::CsString*>* _get_typeSpine();
    // Set static field: static public System.String[] typeSpine
    static void _set_typeSpine(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeHead
    static ::Array<::CsString*>* _get_typeHead();
    // Set static field: static public System.String[] typeHead
    static void _set_typeHead(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeArm
    static ::Array<::CsString*>* _get_typeArm();
    // Set static field: static public System.String[] typeArm
    static void _set_typeArm(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeLeg
    static ::Array<::CsString*>* _get_typeLeg();
    // Set static field: static public System.String[] typeLeg
    static void _set_typeLeg(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeTail
    static ::Array<::CsString*>* _get_typeTail();
    // Set static field: static public System.String[] typeTail
    static void _set_typeTail(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeEye
    static ::Array<::CsString*>* _get_typeEye();
    // Set static field: static public System.String[] typeEye
    static void _set_typeEye(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExclude
    static ::Array<::CsString*>* _get_typeExclude();
    // Set static field: static public System.String[] typeExclude
    static void _set_typeExclude(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExcludeSpine
    static ::Array<::CsString*>* _get_typeExcludeSpine();
    // Set static field: static public System.String[] typeExcludeSpine
    static void _set_typeExcludeSpine(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExcludeHead
    static ::Array<::CsString*>* _get_typeExcludeHead();
    // Set static field: static public System.String[] typeExcludeHead
    static void _set_typeExcludeHead(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExcludeArm
    static ::Array<::CsString*>* _get_typeExcludeArm();
    // Set static field: static public System.String[] typeExcludeArm
    static void _set_typeExcludeArm(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExcludeLeg
    static ::Array<::CsString*>* _get_typeExcludeLeg();
    // Set static field: static public System.String[] typeExcludeLeg
    static void _set_typeExcludeLeg(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExcludeTail
    static ::Array<::CsString*>* _get_typeExcludeTail();
    // Set static field: static public System.String[] typeExcludeTail
    static void _set_typeExcludeTail(::Array<::CsString*>* value);
    // Get static field: static public System.String[] typeExcludeEye
    static ::Array<::CsString*>* _get_typeExcludeEye();
    // Set static field: static public System.String[] typeExcludeEye
    static void _set_typeExcludeEye(::Array<::CsString*>* value);
    // Get static field: static public System.String[] pelvis
    static ::Array<::CsString*>* _get_pelvis();
    // Set static field: static public System.String[] pelvis
    static void _set_pelvis(::Array<::CsString*>* value);
    // Get static field: static public System.String[] hand
    static ::Array<::CsString*>* _get_hand();
    // Set static field: static public System.String[] hand
    static void _set_hand(::Array<::CsString*>* value);
    // Get static field: static public System.String[] foot
    static ::Array<::CsString*>* _get_foot();
    // Set static field: static public System.String[] foot
    static void _set_foot(::Array<::CsString*>* value);
    // static public UnityEngine.Transform[] GetBonesOfType(RootMotion.BipedNaming/BoneType boneType, UnityEngine.Transform[] bones)
    // Offset: 0x1389C5C
    static ::Array<UnityEngine::Transform*>* GetBonesOfType(RootMotion::BipedNaming::BoneType boneType, ::Array<UnityEngine::Transform*>* bones);
    // static public UnityEngine.Transform[] GetBonesOfSide(RootMotion.BipedNaming/BoneSide boneSide, UnityEngine.Transform[] bones)
    // Offset: 0x1389F64
    static ::Array<UnityEngine::Transform*>* GetBonesOfSide(RootMotion::BipedNaming::BoneSide boneSide, ::Array<UnityEngine::Transform*>* bones);
    // static public UnityEngine.Transform[] GetBonesOfTypeAndSide(RootMotion.BipedNaming/BoneType boneType, RootMotion.BipedNaming/BoneSide boneSide, UnityEngine.Transform[] bones)
    // Offset: 0x138A1BC
    static ::Array<UnityEngine::Transform*>* GetBonesOfTypeAndSide(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, ::Array<UnityEngine::Transform*>* bones);
    // static public UnityEngine.Transform GetFirstBoneOfTypeAndSide(RootMotion.BipedNaming/BoneType boneType, RootMotion.BipedNaming/BoneSide boneSide, UnityEngine.Transform[] bones)
    // Offset: 0x138A240
    static UnityEngine::Transform* GetFirstBoneOfTypeAndSide(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, ::Array<UnityEngine::Transform*>* bones);
    // static public UnityEngine.Transform GetNamingMatch(UnityEngine.Transform[] transforms, System.String[][] namings)
    // Offset: 0x138A2EC
    static UnityEngine::Transform* GetNamingMatch(::Array<UnityEngine::Transform*>* transforms, ::Array<::Array<::CsString*>*>* namings);
    // static public RootMotion.BipedNaming/BoneType GetBoneType(System.String boneName)
    // Offset: 0x1389E14
    static RootMotion::BipedNaming::BoneType GetBoneType(::CsString* boneName);
    // static public RootMotion.BipedNaming/BoneSide GetBoneSide(System.String boneName)
    // Offset: 0x138A11C
    static RootMotion::BipedNaming::BoneSide GetBoneSide(::CsString* boneName);
    // static public UnityEngine.Transform GetBone(UnityEngine.Transform[] transforms, RootMotion.BipedNaming/BoneType boneType, RootMotion.BipedNaming/BoneSide boneSide, System.String[][] namings)
    // Offset: 0x138AB2C
    static UnityEngine::Transform* GetBone(::Array<UnityEngine::Transform*>* transforms, RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, ::Array<::Array<::CsString*>*>* namings);
    // static private System.Boolean isLeft(System.String boneName)
    // Offset: 0x138A944
    static bool isLeft(::CsString* boneName);
    // static private System.Boolean isRight(System.String boneName)
    // Offset: 0x138AA38
    static bool isRight(::CsString* boneName);
    // static private System.Boolean isSpine(System.String boneName)
    // Offset: 0x138A50C
    static bool isSpine(::CsString* boneName);
    // static private System.Boolean isHead(System.String boneName)
    // Offset: 0x138A5C0
    static bool isHead(::CsString* boneName);
    // static private System.Boolean isArm(System.String boneName)
    // Offset: 0x138A674
    static bool isArm(::CsString* boneName);
    // static private System.Boolean isLeg(System.String boneName)
    // Offset: 0x138A728
    static bool isLeg(::CsString* boneName);
    // static private System.Boolean isTail(System.String boneName)
    // Offset: 0x138A7DC
    static bool isTail(::CsString* boneName);
    // static private System.Boolean isEye(System.String boneName)
    // Offset: 0x138A890
    static bool isEye(::CsString* boneName);
    // static private System.Boolean isTypeExclude(System.String boneName)
    // Offset: 0x138AD40
    static bool isTypeExclude(::CsString* boneName);
    // static private System.Boolean matchesNaming(System.String boneName, System.String[] namingConvention)
    // Offset: 0x138A420
    static bool matchesNaming(::CsString* boneName, ::Array<::CsString*>* namingConvention);
    // static private System.Boolean excludesNaming(System.String boneName, System.String[] namingConvention)
    // Offset: 0x138ACB0
    static bool excludesNaming(::CsString* boneName, ::Array<::CsString*>* namingConvention);
    // static private System.Boolean matchesLastLetter(System.String boneName, System.String[] namingConvention)
    // Offset: 0x138ADB0
    static bool matchesLastLetter(::CsString* boneName, ::Array<::CsString*>* namingConvention);
    // static private System.Boolean LastLetterIs(System.String boneName, System.String letter)
    // Offset: 0x138AE88
    static bool LastLetterIs(::CsString* boneName, ::CsString* letter);
    // static private System.String firstLetter(System.String boneName)
    // Offset: 0x138AC34
    static ::CsString* firstLetter(::CsString* boneName);
    // static private System.String lastLetter(System.String boneName)
    // Offset: 0x138ABBC
    static ::CsString* lastLetter(::CsString* boneName);
    // static private System.Void .cctor()
    // Offset: 0x138AEC8
    static void _cctor();
  }; // RootMotion.BipedNaming
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::BipedNaming*, "RootMotion", "BipedNaming");
#pragma pack(pop)
