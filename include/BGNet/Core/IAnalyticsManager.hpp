// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MetricIdentifier
  struct MetricIdentifier;
}
// Forward declaring namespace: BGNet::Core
namespace BGNet::Core {
  // Forward declaring type: AnalyticsMetricUnit
  struct AnalyticsMetricUnit;
}
// Completed forward declares
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Forward declaring type: IAnalyticsManager
  class IAnalyticsManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BGNet::Core::IAnalyticsManager);
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Core::IAnalyticsManager*, "BGNet.Core", "IAnalyticsManager");
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BGNet.Core.IAnalyticsManager
  // [TokenAttribute] Offset: FFFFFFFF
  class IAnalyticsManager/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public System.Void PollUpdate()
    // Offset: 0xFFFFFFFF
    void PollUpdate();
    // public System.Void UpdateState(MetricIdentifier metricIdentifier, System.Int64 state, BGNet.Core.AnalyticsMetricUnit unit, System.Boolean alarmMetric)
    // Offset: 0xFFFFFFFF
    void UpdateState(::GlobalNamespace::MetricIdentifier metricIdentifier, int64_t state, ::BGNet::Core::AnalyticsMetricUnit unit, bool alarmMetric);
    // public System.Void UpdateAverage(MetricIdentifier metricIdentifier, System.Double value, BGNet.Core.AnalyticsMetricUnit unit, System.Boolean alarmMetric)
    // Offset: 0xFFFFFFFF
    void UpdateAverage(::GlobalNamespace::MetricIdentifier metricIdentifier, double value, ::BGNet::Core::AnalyticsMetricUnit unit, bool alarmMetric);
    // public System.Void IncrementCounter(MetricIdentifier metricIdentifier, System.Int64 incrementAmount, BGNet.Core.AnalyticsMetricUnit unit)
    // Offset: 0xFFFFFFFF
    void IncrementCounter(::GlobalNamespace::MetricIdentifier metricIdentifier, int64_t incrementAmount, ::BGNet::Core::AnalyticsMetricUnit unit);
  }; // BGNet.Core.IAnalyticsManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BGNet::Core::IAnalyticsManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::IAnalyticsManager::*)()>(&BGNet::Core::IAnalyticsManager::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::IAnalyticsManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNet::Core::IAnalyticsManager::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::IAnalyticsManager::*)(::GlobalNamespace::MetricIdentifier, int64_t, ::BGNet::Core::AnalyticsMetricUnit, bool)>(&BGNet::Core::IAnalyticsManager::UpdateState)> {
  static const MethodInfo* get() {
    static auto* metricIdentifier = &::il2cpp_utils::GetClassFromName("", "MetricIdentifier")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* unit = &::il2cpp_utils::GetClassFromName("BGNet.Core", "AnalyticsMetricUnit")->byval_arg;
    static auto* alarmMetric = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::IAnalyticsManager*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricIdentifier, state, unit, alarmMetric});
  }
};
// Writing MetadataGetter for method: BGNet::Core::IAnalyticsManager::UpdateAverage
// Il2CppName: UpdateAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::IAnalyticsManager::*)(::GlobalNamespace::MetricIdentifier, double, ::BGNet::Core::AnalyticsMetricUnit, bool)>(&BGNet::Core::IAnalyticsManager::UpdateAverage)> {
  static const MethodInfo* get() {
    static auto* metricIdentifier = &::il2cpp_utils::GetClassFromName("", "MetricIdentifier")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* unit = &::il2cpp_utils::GetClassFromName("BGNet.Core", "AnalyticsMetricUnit")->byval_arg;
    static auto* alarmMetric = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::IAnalyticsManager*), "UpdateAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricIdentifier, value, unit, alarmMetric});
  }
};
// Writing MetadataGetter for method: BGNet::Core::IAnalyticsManager::IncrementCounter
// Il2CppName: IncrementCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Core::IAnalyticsManager::*)(::GlobalNamespace::MetricIdentifier, int64_t, ::BGNet::Core::AnalyticsMetricUnit)>(&BGNet::Core::IAnalyticsManager::IncrementCounter)> {
  static const MethodInfo* get() {
    static auto* metricIdentifier = &::il2cpp_utils::GetClassFromName("", "MetricIdentifier")->byval_arg;
    static auto* incrementAmount = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* unit = &::il2cpp_utils::GetClassFromName("BGNet.Core", "AnalyticsMetricUnit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::IAnalyticsManager*), "IncrementCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metricIdentifier, incrementAmount, unit});
  }
};
