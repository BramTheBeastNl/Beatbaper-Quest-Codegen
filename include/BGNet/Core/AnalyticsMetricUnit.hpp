// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Forward declaring type: AnalyticsMetricUnit
  struct AnalyticsMetricUnit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(BGNet::Core::AnalyticsMetricUnit, "BGNet.Core", "AnalyticsMetricUnit");
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: BGNet.Core.AnalyticsMetricUnit
  // [TokenAttribute] Offset: FFFFFFFF
  struct AnalyticsMetricUnit/*, public System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AnalyticsMetricUnit
    constexpr AnalyticsMetricUnit(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator System::Enum
    operator System::Enum() noexcept {
      return *reinterpret_cast<System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit None
    static constexpr const int None = 0;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit None
    static BGNet::Core::AnalyticsMetricUnit _get_None();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit None
    static void _set_None(BGNet::Core::AnalyticsMetricUnit value);
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit Count
    static constexpr const int Count = 1;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit Count
    static BGNet::Core::AnalyticsMetricUnit _get_Count();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit Count
    static void _set_Count(BGNet::Core::AnalyticsMetricUnit value);
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit Percent
    static constexpr const int Percent = 2;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit Percent
    static BGNet::Core::AnalyticsMetricUnit _get_Percent();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit Percent
    static void _set_Percent(BGNet::Core::AnalyticsMetricUnit value);
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit Seconds
    static constexpr const int Seconds = 3;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit Seconds
    static BGNet::Core::AnalyticsMetricUnit _get_Seconds();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit Seconds
    static void _set_Seconds(BGNet::Core::AnalyticsMetricUnit value);
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit Milliseconds
    static constexpr const int Milliseconds = 4;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit Milliseconds
    static BGNet::Core::AnalyticsMetricUnit _get_Milliseconds();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit Milliseconds
    static void _set_Milliseconds(BGNet::Core::AnalyticsMetricUnit value);
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit Microseconds
    static constexpr const int Microseconds = 5;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit Microseconds
    static BGNet::Core::AnalyticsMetricUnit _get_Microseconds();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit Microseconds
    static void _set_Microseconds(BGNet::Core::AnalyticsMetricUnit value);
    // static field const value: static public BGNet.Core.AnalyticsMetricUnit Bytes
    static constexpr const int Bytes = 6;
    // Get static field: static public BGNet.Core.AnalyticsMetricUnit Bytes
    static BGNet::Core::AnalyticsMetricUnit _get_Bytes();
    // Set static field: static public BGNet.Core.AnalyticsMetricUnit Bytes
    static void _set_Bytes(BGNet::Core::AnalyticsMetricUnit value);
    // Get instance field reference: public System.Int32 value__
    int& dyn_value__();
  }; // BGNet.Core.AnalyticsMetricUnit
  #pragma pack(pop)
  static check_size<sizeof(AnalyticsMetricUnit), 0 + sizeof(int)> __BGNet_Core_AnalyticsMetricUnitSizeCheck;
  static_assert(sizeof(AnalyticsMetricUnit) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
