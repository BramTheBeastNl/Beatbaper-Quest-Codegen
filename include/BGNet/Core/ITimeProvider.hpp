// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(BGNet::Core::ITimeProvider);
DEFINE_IL2CPP_ARG_TYPE(BGNet::Core::ITimeProvider*, "BGNet.Core", "ITimeProvider");
// Type namespace: BGNet.Core
namespace BGNet::Core {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BGNet.Core.ITimeProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class ITimeProvider {
    public:
    // public System.Int64 GetTimeMs()
    // Offset: 0xFFFFFFFF
    int64_t GetTimeMs();
    // public System.Threading.Tasks.Task DelayMs(System.Int32 millis, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task* DelayMs(int millis, System::Threading::CancellationToken cancellationToken);
  }; // BGNet.Core.ITimeProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BGNet::Core::ITimeProvider::GetTimeMs
// Il2CppName: GetTimeMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (BGNet::Core::ITimeProvider::*)()>(&BGNet::Core::ITimeProvider::GetTimeMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITimeProvider*), "GetTimeMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNet::Core::ITimeProvider::DelayMs
// Il2CppName: DelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (BGNet::Core::ITimeProvider::*)(int, System::Threading::CancellationToken)>(&BGNet::Core::ITimeProvider::DelayMs)> {
  static const MethodInfo* get() {
    static auto* millis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Core::ITimeProvider*), "DelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millis, cancellationToken});
  }
};
