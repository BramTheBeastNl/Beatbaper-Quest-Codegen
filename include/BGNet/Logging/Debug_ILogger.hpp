// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BGNet.Logging.Debug
#include "BGNet/Logging/Debug.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BGNet::Logging::Debug::ILogger);
DEFINE_IL2CPP_ARG_TYPE(::BGNet::Logging::Debug::ILogger*, "BGNet.Logging", "Debug/ILogger");
// Type namespace: BGNet.Logging
namespace BGNet::Logging {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BGNet.Logging.Debug/BGNet.Logging.ILogger
  // [TokenAttribute] Offset: FFFFFFFF
  class Debug::ILogger {
    public:
    // public System.Void LogInfo(System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LogInfo(::StringW message);
    // public System.Void LogError(System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LogError(::StringW message);
    // public System.Void LogException(System.Exception exception, System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LogException(::System::Exception* exception, ::StringW message);
    // public System.Void LogWarning(System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LogWarning(::StringW message);
  }; // BGNet.Logging.Debug/BGNet.Logging.ILogger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BGNet::Logging::Debug::ILogger::LogInfo
// Il2CppName: LogInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Logging::Debug::ILogger::*)(::StringW)>(&BGNet::Logging::Debug::ILogger::LogInfo)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Logging::Debug::ILogger*), "LogInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: BGNet::Logging::Debug::ILogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Logging::Debug::ILogger::*)(::StringW)>(&BGNet::Logging::Debug::ILogger::LogError)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Logging::Debug::ILogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: BGNet::Logging::Debug::ILogger::LogException
// Il2CppName: LogException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Logging::Debug::ILogger::*)(::System::Exception*, ::StringW)>(&BGNet::Logging::Debug::ILogger::LogException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Logging::Debug::ILogger*), "LogException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, message});
  }
};
// Writing MetadataGetter for method: BGNet::Logging::Debug::ILogger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BGNet::Logging::Debug::ILogger::*)(::StringW)>(&BGNet::Logging::Debug::ILogger::LogWarning)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BGNet::Logging::Debug::ILogger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
