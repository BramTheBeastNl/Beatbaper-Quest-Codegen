// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ZenjectException
  class ZenjectException;
}
// Completed forward declares
// Type namespace: ModestTree
namespace ModestTree {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ModestTree.Assert
  // [] Offset: FFFFFFFF
  class _Assert : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: _Assert
    _Assert() noexcept {}
    // static public System.Void That(System.Boolean condition)
    // Offset: 0x1297CAC
    static void That(bool condition);
    // static public System.Void IsNotEmpty(System.String str)
    // Offset: 0x1297D74
    static void IsNotEmpty(::Il2CppString* str);
    // static public System.Void IsEmpty(System.Collections.Generic.IList`1<T> list)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsEmpty(System::Collections::Generic::IList_1<T>* list) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEmpty");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEmpty", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(list)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, list);
    }
    // static public System.Void IsEmpty(System.Collections.Generic.IEnumerable`1<T> sequence)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsEmpty(System::Collections::Generic::IEnumerable_1<T>* sequence) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsEmpty");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsEmpty", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(sequence)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, sequence);
    }
    // static public System.Void IsType(System.Object obj)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsType(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsType");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsType", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(obj)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, obj);
    }
    // static public System.Void IsType(System.Object obj, System.String message)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsType(::Il2CppObject* obj, ::Il2CppString* message) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsType");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsType", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(obj, message)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, obj, message);
    }
    // static public System.Void DerivesFrom(System.Type type)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void DerivesFrom(System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::DerivesFrom");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFrom", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(type)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, type);
    }
    // static public System.Void DerivesFromOrEqual(System.Type type)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void DerivesFromOrEqual(System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::DerivesFromOrEqual");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "DerivesFromOrEqual", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(type)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, type);
    }
    // static public System.Void DerivesFrom(System.Type childType, System.Type parentType)
    // Offset: 0x1297DE4
    static void DerivesFrom(System::Type* childType, System::Type* parentType);
    // static public System.Void DerivesFromOrEqual(System.Type childType, System.Type parentType)
    // Offset: 0x129805C
    static void DerivesFromOrEqual(System::Type* childType, System::Type* parentType);
    // static public System.Void IsEqual(System.Object left, System.Object right)
    // Offset: 0x1298244
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right);
    // static public System.Void IsEqual(System.Object left, System.Object right, System.Func`1<System.String> messageGenerator)
    // Offset: 0x12983C8
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void IsApproximately(System.Single left, System.Single right, System.Single epsilon)
    // Offset: 0x1298514
    static void IsApproximately(float left, float right, float epsilon);
    // static public System.Void IsEqual(System.Object left, System.Object right, System.String message)
    // Offset: 0x12982A4
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message);
    // static public System.Void IsNotEqual(System.Object left, System.Object right)
    // Offset: 0x129865C
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right);
    // static public System.Void IsNotEqual(System.Object left, System.Object right, System.Func`1<System.String> messageGenerator)
    // Offset: 0x12987B4
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void IsNull(System.Object val)
    // Offset: 0x1298900
    static void IsNull(::Il2CppObject* val);
    // static public System.Void IsNull(System.Object val, System.String message)
    // Offset: 0x12989A0
    static void IsNull(::Il2CppObject* val, ::Il2CppString* message);
    // static public System.Void IsNull(System.Object val, System.String message, System.Object p1)
    // Offset: 0x1298A4C
    static void IsNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void IsNotNull(System.Object val)
    // Offset: 0x1298CF8
    static void IsNotNull(::Il2CppObject* val);
    // static public System.Void IsNotNull(System.Object val, System.String message)
    // Offset: 0x1298D5C
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message);
    // static public System.Void IsNotNull(System.Object val, System.String message, System.Object p1)
    // Offset: 0x1298E08
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void IsNotNull(System.Object val, System.String message, System.Object p1, System.Object p2)
    // Offset: 0x1298F00
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2);
    // static public System.Void IsNotEmpty(System.Collections.Generic.IEnumerable`1<T> val, System.String message)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsNotEmpty(System::Collections::Generic::IEnumerable_1<T>* val, ::Il2CppString* message) {
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::IsNotEmpty");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "IsNotEmpty", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(val, message)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, val, message);
    }
    // static public System.Void IsNotEqual(System.Object left, System.Object right, System.String message)
    // Offset: 0x12986BC
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message);
    // static public System.Void Warn(System.Boolean condition)
    // Offset: 0x1299028
    static void Warn(bool condition);
    // static public System.Void Warn(System.Boolean condition, System.Func`1<System.String> messageGenerator)
    // Offset: 0x1299198
    static void Warn(bool condition, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void That(System.Boolean condition, System.String message)
    // Offset: 0x12992C4
    static void That(bool condition, ::Il2CppString* message);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1)
    // Offset: 0x1299340
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1, System.Object p2)
    // Offset: 0x1299408
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1, System.Object p2, System.Object p3)
    // Offset: 0x1299500
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3);
    // static public System.Void Warn(System.Boolean condition, System.String message)
    // Offset: 0x1299620
    static void Warn(bool condition, ::Il2CppString* message);
    // static public System.Void Throws(System.Action action)
    // Offset: 0x129972C
    static void Throws(System::Action* action);
    // static public System.Void Throws(System.Action action)
    // Offset: 0xFFFFFFFF
    template<class TException>
    static void Throws(System::Action* action) {
      static_assert(std::is_convertible_v<TException, System::Exception*>);
      static auto ___internal__logger = ::Logger::get().WithContext("ModestTree::_Assert::Throws");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("ModestTree", "Assert", "Throws", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TException>::get()}, ::il2cpp_utils::ExtractTypes(action)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TException>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, action);
    }
    // static public Zenject.ZenjectException CreateException()
    // Offset: 0x129977C
    static Zenject::ZenjectException* CreateException();
    // static public Zenject.ZenjectException CreateException(System.String message)
    // Offset: 0x1297D10
    static Zenject::ZenjectException* CreateException(::Il2CppString* message);
    // static public Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
    // Offset: 0x1297FD8
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, ::Array<::Il2CppObject*>* parameters);
    // Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters);
    // Creating TArgs -> initializer_list proxy for: Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
    template<class ...TParams>
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, TParams&&... parameters) {
      return CreateException(message, {parameters...});
    }
    // static public Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
    // Offset: 0x12997E4
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, ::Array<::Il2CppObject*>* parameters);
    // Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters);
    // Creating TArgs -> initializer_list proxy for: Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
    template<class ...TParams>
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, TParams&&... parameters) {
      return CreateException(innerException, message, {parameters...});
    }
  }; // ModestTree.Assert
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(ModestTree::_Assert*, "ModestTree", "Assert");
