// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ModestTree.LinqExtensions
#include "ModestTree/LinqExtensions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::ModestTree::LinqExtensions::$$c__DisplayClass10_0_1, "ModestTree", "LinqExtensions/<>c__DisplayClass10_0`1");
// Type namespace: ModestTree
namespace ModestTree {
  // WARNING Size may be invalid!
  // Autogenerated type: ModestTree.LinqExtensions/ModestTree.<>c__DisplayClass10_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename T>
  class LinqExtensions::$$c__DisplayClass10_0_1 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public T value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T value;
    public:
    // Autogenerated instance field getter
    // Get instance field: public T value
    T& dyn_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::LinqExtensions::$$c__DisplayClass10_0_1::dyn_value");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Boolean <ContainsItem>b__0(T x)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool $ContainsItem$b__0(T x) {
      static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::LinqExtensions::$$c__DisplayClass10_0_1::<ContainsItem>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ContainsItem>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, x);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinqExtensions::$$c__DisplayClass10_0_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::ModestTree::LinqExtensions::$$c__DisplayClass10_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinqExtensions::$$c__DisplayClass10_0_1<T>*, creationType>()));
    }
  }; // ModestTree.LinqExtensions/ModestTree.<>c__DisplayClass10_0`1
  // Could not write size check! Type: ModestTree.LinqExtensions/ModestTree.<>c__DisplayClass10_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
