// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Security.AuthenticatedStream
#include "System/Net/Security/AuthenticatedStream.hpp"
// Including type: Mono.Security.Interface.IMonoSslStream
#include "Mono/Security/Interface/IMonoSslStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MobileTlsContext
  class MobileTlsContext;
  // Forward declaring type: AsyncProtocolRequest
  class AsyncProtocolRequest;
  // Forward declaring type: BufferOffsetSize2
  class BufferOffsetSize2;
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
  // Forward declaring type: AsyncOperationStatus
  struct AsyncOperationStatus;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslStream
  class SslStream;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
  // Forward declaring type: MonoTlsProvider
  class MonoTlsProvider;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: System::Security::Authentication
namespace System::Security::Authentication {
  // Forward declaring type: SslProtocols
  struct SslProtocols;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.Security.MobileAuthenticatedStream
  class MobileAuthenticatedStream : public System::Net::Security::AuthenticatedStream/*, public Mono::Security::Interface::IMonoSslStream*/ {
    public:
    // Writing base type padding for base size: 0x31 to desired offset: 0x38
    char ___base_padding[0x7] = {};
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::OperationType
    struct OperationType;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47
    struct $ProcessAuthentication$d__47;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58
    struct $StartOperation$d__58;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$$c__DisplayClass66_0
    class $$c__DisplayClass66_0;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$InnerRead$d__66
    struct $InnerRead$d__66;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$InnerWrite$d__67
    struct $InnerWrite$d__67;
    // private Mono.Net.Security.MobileTlsContext xobileTlsContext
    // Size: 0x8
    // Offset: 0x38
    Mono::Net::Security::MobileTlsContext* xobileTlsContext;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::MobileTlsContext*) == 0x8);
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo lastException
    // Size: 0x8
    // Offset: 0x40
    System::Runtime::ExceptionServices::ExceptionDispatchInfo* lastException;
    // Field size check
    static_assert(sizeof(System::Runtime::ExceptionServices::ExceptionDispatchInfo*) == 0x8);
    // private Mono.Net.Security.AsyncProtocolRequest asyncHandshakeRequest
    // Size: 0x8
    // Offset: 0x48
    Mono::Net::Security::AsyncProtocolRequest* asyncHandshakeRequest;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::AsyncProtocolRequest*) == 0x8);
    // private Mono.Net.Security.AsyncProtocolRequest asyncReadRequest
    // Size: 0x8
    // Offset: 0x50
    Mono::Net::Security::AsyncProtocolRequest* asyncReadRequest;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::AsyncProtocolRequest*) == 0x8);
    // private Mono.Net.Security.AsyncProtocolRequest asyncWriteRequest
    // Size: 0x8
    // Offset: 0x58
    Mono::Net::Security::AsyncProtocolRequest* asyncWriteRequest;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::AsyncProtocolRequest*) == 0x8);
    // private Mono.Net.Security.BufferOffsetSize2 readBuffer
    // Size: 0x8
    // Offset: 0x60
    Mono::Net::Security::BufferOffsetSize2* readBuffer;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::BufferOffsetSize2*) == 0x8);
    // private Mono.Net.Security.BufferOffsetSize2 writeBuffer
    // Size: 0x8
    // Offset: 0x68
    Mono::Net::Security::BufferOffsetSize2* writeBuffer;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::BufferOffsetSize2*) == 0x8);
    // private System.Object ioLock
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppObject* ioLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 closeRequested
    // Size: 0x4
    // Offset: 0x78
    int closeRequested;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean shutdown
    // Size: 0x1
    // Offset: 0x7C
    bool shutdown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shutdown and: SslStream
    char __padding9[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD887CC
    // private readonly System.Net.Security.SslStream <SslStream>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    System::Net::Security::SslStream* SslStream;
    // Field size check
    static_assert(sizeof(System::Net::Security::SslStream*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD887DC
    // private readonly Mono.Security.Interface.MonoTlsSettings <Settings>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    Mono::Security::Interface::MonoTlsSettings* Settings;
    // Field size check
    static_assert(sizeof(Mono::Security::Interface::MonoTlsSettings*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD887EC
    // private readonly Mono.Security.Interface.MonoTlsProvider <Provider>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    Mono::Security::Interface::MonoTlsProvider* Provider;
    // Field size check
    static_assert(sizeof(Mono::Security::Interface::MonoTlsProvider*) == 0x8);
    // readonly System.Int32 ID
    // Size: 0x4
    // Offset: 0x98
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: MobileAuthenticatedStream
    MobileAuthenticatedStream(Mono::Net::Security::MobileTlsContext* xobileTlsContext_ = {}, System::Runtime::ExceptionServices::ExceptionDispatchInfo* lastException_ = {}, Mono::Net::Security::AsyncProtocolRequest* asyncHandshakeRequest_ = {}, Mono::Net::Security::AsyncProtocolRequest* asyncReadRequest_ = {}, Mono::Net::Security::AsyncProtocolRequest* asyncWriteRequest_ = {}, Mono::Net::Security::BufferOffsetSize2* readBuffer_ = {}, Mono::Net::Security::BufferOffsetSize2* writeBuffer_ = {}, ::Il2CppObject* ioLock_ = {}, int closeRequested_ = {}, bool shutdown_ = {}, System::Net::Security::SslStream* SslStream_ = {}, Mono::Security::Interface::MonoTlsSettings* Settings_ = {}, Mono::Security::Interface::MonoTlsProvider* Provider_ = {}, int _ID_ = {}) noexcept : xobileTlsContext{xobileTlsContext_}, lastException{lastException_}, asyncHandshakeRequest{asyncHandshakeRequest_}, asyncReadRequest{asyncReadRequest_}, asyncWriteRequest{asyncWriteRequest_}, readBuffer{readBuffer_}, writeBuffer{writeBuffer_}, ioLock{ioLock_}, closeRequested{closeRequested_}, shutdown{shutdown_}, SslStream{SslStream_}, Settings{Settings_}, Provider{Provider_}, _ID{_ID_} {}
    // Creating interface conversion operator: operator Mono::Security::Interface::IMonoSslStream
    operator Mono::Security::Interface::IMonoSslStream() noexcept {
      return *reinterpret_cast<Mono::Security::Interface::IMonoSslStream*>(this);
    }
    // Get static field: static private System.Int32 uniqueNameInteger
    static int _get_uniqueNameInteger();
    // Set static field: static private System.Int32 uniqueNameInteger
    static void _set_uniqueNameInteger(int value);
    // Get static field: static private System.Int32 nextId
    static int _get_nextId();
    // Set static field: static private System.Int32 nextId
    static void _set_nextId(int value);
    // public System.Void .ctor(System.IO.Stream innerStream, System.Boolean leaveInnerStreamOpen, System.Net.Security.SslStream owner, Mono.Security.Interface.MonoTlsSettings settings, Mono.Security.Interface.MonoTlsProvider provider)
    // Offset: 0x15F0588
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MobileAuthenticatedStream* New_ctor(System::IO::Stream* innerStream, bool leaveInnerStreamOpen, System::Net::Security::SslStream* owner, Mono::Security::Interface::MonoTlsSettings* settings, Mono::Security::Interface::MonoTlsProvider* provider) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileAuthenticatedStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MobileAuthenticatedStream*, creationType>(innerStream, leaveInnerStreamOpen, owner, settings, provider)));
    }
    // public Mono.Security.Interface.MonoTlsSettings get_Settings()
    // Offset: 0x15F06A0
    Mono::Security::Interface::MonoTlsSettings* get_Settings();
    // public Mono.Security.Interface.MonoTlsProvider get_Provider()
    // Offset: 0x15F06A8
    Mono::Security::Interface::MonoTlsProvider* get_Provider();
    // System.Void CheckThrow(System.Boolean authSuccessCheck, System.Boolean shutdownCheck)
    // Offset: 0x15F06B0
    void CheckThrow(bool authSuccessCheck, bool shutdownCheck);
    // static System.Exception GetSSPIException(System.Exception e)
    // Offset: 0x15EE93C
    static System::Exception* GetSSPIException(System::Exception* e);
    // static System.Exception GetIOException(System.Exception e, System.String message)
    // Offset: 0x15F0790
    static System::Exception* GetIOException(System::Exception* e, ::Il2CppString* message);
    // System.Runtime.ExceptionServices.ExceptionDispatchInfo SetException(System.Exception e)
    // Offset: 0x15EEA70
    System::Runtime::ExceptionServices::ExceptionDispatchInfo* SetException(System::Exception* e);
    // public System.Void AuthenticateAsClient(System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    // Offset: 0x15F08C8
    void AuthenticateAsClient(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    // public System.Void AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Boolean clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    // Offset: 0x15F0A60
    void AuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, bool clientCertificateRequired, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    // public System.Net.Security.AuthenticatedStream get_AuthenticatedStream()
    // Offset: 0x15F0B04
    System::Net::Security::AuthenticatedStream* get_AuthenticatedStream();
    // private System.Threading.Tasks.Task ProcessAuthentication(System.Boolean runSynchronously, System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean clientCertRequired)
    // Offset: 0x15F090C
    System::Threading::Tasks::Task* ProcessAuthentication(bool runSynchronously, bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool clientCertRequired);
    // protected Mono.Net.Security.MobileTlsContext CreateContext(System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean askForClientCert)
    // Offset: 0xFFFFFFFF
    Mono::Net::Security::MobileTlsContext* CreateContext(bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert);
    // private System.Threading.Tasks.Task`1<System.Int32> StartOperation(Mono.Net.Security.MobileAuthenticatedStream/OperationType type, Mono.Net.Security.AsyncProtocolRequest asyncRequest, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15F0BE8
    System::Threading::Tasks::Task_1<int>* StartOperation(Mono::Net::Security::MobileAuthenticatedStream::OperationType type, Mono::Net::Security::AsyncProtocolRequest* asyncRequest, System::Threading::CancellationToken cancellationToken);
    // System.Int32 InternalRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, out System.Boolean outWantMore)
    // Offset: 0x15F112C
    int InternalRead(::Array<uint8_t>* buffer, int offset, int size, bool& outWantMore);
    // private System.ValueTuple`2<System.Int32,System.Boolean> InternalRead(Mono.Net.Security.AsyncProtocolRequest asyncRequest, Mono.Net.Security.BufferOffsetSize internalBuffer, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x15F127C
    System::ValueTuple_2<int, bool> InternalRead(Mono::Net::Security::AsyncProtocolRequest* asyncRequest, Mono::Net::Security::BufferOffsetSize* internalBuffer, ::Array<uint8_t>* buffer, int offset, int size);
    // System.Boolean InternalWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x15F13FC
    bool InternalWrite(::Array<uint8_t>* buffer, int offset, int size);
    // private System.Boolean InternalWrite(Mono.Net.Security.AsyncProtocolRequest asyncRequest, Mono.Net.Security.BufferOffsetSize2 internalBuffer, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x15F1540
    bool InternalWrite(Mono::Net::Security::AsyncProtocolRequest* asyncRequest, Mono::Net::Security::BufferOffsetSize2* internalBuffer, ::Array<uint8_t>* buffer, int offset, int size);
    // System.Threading.Tasks.Task`1<System.Int32> InnerRead(System.Boolean sync, System.Int32 requestedSize, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15EDF90
    System::Threading::Tasks::Task_1<int>* InnerRead(bool sync, int requestedSize, System::Threading::CancellationToken cancellationToken);
    // System.Threading.Tasks.Task InnerWrite(System.Boolean sync, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15EE4B4
    System::Threading::Tasks::Task* InnerWrite(bool sync, System::Threading::CancellationToken cancellationToken);
    // Mono.Net.Security.AsyncOperationStatus ProcessHandshake(Mono.Net.Security.AsyncOperationStatus status)
    // Offset: 0x15ED674
    Mono::Net::Security::AsyncOperationStatus ProcessHandshake(Mono::Net::Security::AsyncOperationStatus status);
    // System.ValueTuple`2<System.Int32,System.Boolean> ProcessRead(Mono.Net.Security.BufferOffsetSize userBuffer)
    // Offset: 0x15EEE18
    System::ValueTuple_2<int, bool> ProcessRead(Mono::Net::Security::BufferOffsetSize* userBuffer);
    // System.ValueTuple`2<System.Int32,System.Boolean> ProcessWrite(Mono.Net.Security.BufferOffsetSize userBuffer)
    // Offset: 0x15EEFA0
    System::ValueTuple_2<int, bool> ProcessWrite(Mono::Net::Security::BufferOffsetSize* userBuffer);
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_InternalLocalCertificate()
    // Offset: 0x15F1920
    System::Security::Cryptography::X509Certificates::X509Certificate* get_InternalLocalCertificate();
    // private System.Void <InnerWrite>b__67_0()
    // Offset: 0x15F1C70
    void $InnerWrite$b__67_0();
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    // Offset: 0x15F0B08
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    System::IAsyncResult* BeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x15F0D10
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    // Offset: 0x15F0D60
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    System::IAsyncResult* BeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x15F0E40
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(System::IAsyncResult* asyncResult);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x15F0E4C
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::Array<uint8_t>* buffer, int offset, int count);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x15F0F24
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::Array<uint8_t>* buffer, int offset, int count);
    // public override System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15F0FF4
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task`1<System.Int32> Stream::ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task_1<int>* ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);
    // public override System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15F1090
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task Stream::WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task* WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);
    // public override System.Boolean get_IsAuthenticated()
    // Offset: 0x15F166C
    // Implemented from: System.Net.Security.AuthenticatedStream
    // Base method: System.Boolean AuthenticatedStream::get_IsAuthenticated()
    bool get_IsAuthenticated();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x15F1720
    // Implemented from: System.Net.Security.AuthenticatedStream
    // Base method: System.Void AuthenticatedStream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Void Flush()
    // Offset: 0x15F18FC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x15F19EC
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x15F1A4C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Boolean get_CanRead()
    // Offset: 0x15F1A70
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x15F1AC4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x15F1B2C
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Int64 get_Length()
    // Offset: 0x15F1B34
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x15F1B54
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x15F1B74
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int32 get_ReadTimeout()
    // Offset: 0x15F1BD4
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_ReadTimeout()
    int get_ReadTimeout();
    // public override System.Int32 get_WriteTimeout()
    // Offset: 0x15F1BF8
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_WriteTimeout()
    int get_WriteTimeout();
    // static private System.Void .cctor()
    // Offset: 0x15F1C1C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::.cctor()
    static void _cctor();
  }; // Mono.Net.Security.MobileAuthenticatedStream
  #pragma pack(pop)
  static check_size<sizeof(MobileAuthenticatedStream), 152 + sizeof(int)> __Mono_Net_Security_MobileAuthenticatedStreamSizeCheck;
  static_assert(sizeof(MobileAuthenticatedStream) == 0x9C);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Net::Security::MobileAuthenticatedStream*, "Mono.Net.Security", "MobileAuthenticatedStream");
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_Settings
// Il2CppName: get_Settings
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_Provider
// Il2CppName: get_Provider
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::CheckThrow
// Il2CppName: CheckThrow
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::GetSSPIException
// Il2CppName: GetSSPIException
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::GetIOException
// Il2CppName: GetIOException
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::SetException
// Il2CppName: SetException
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::AuthenticateAsClient
// Il2CppName: AuthenticateAsClient
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::AuthenticateAsServer
// Il2CppName: AuthenticateAsServer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_AuthenticatedStream
// Il2CppName: get_AuthenticatedStream
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::ProcessAuthentication
// Il2CppName: ProcessAuthentication
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::CreateContext
// Il2CppName: CreateContext
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::StartOperation
// Il2CppName: StartOperation
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::InternalRead
// Il2CppName: InternalRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::InternalRead
// Il2CppName: InternalRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::InternalWrite
// Il2CppName: InternalWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::InternalWrite
// Il2CppName: InternalWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::InnerRead
// Il2CppName: InnerRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::InnerWrite
// Il2CppName: InnerWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::ProcessHandshake
// Il2CppName: ProcessHandshake
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::ProcessRead
// Il2CppName: ProcessRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::ProcessWrite
// Il2CppName: ProcessWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_InternalLocalCertificate
// Il2CppName: get_InternalLocalCertificate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::$InnerWrite$b__67_0
// Il2CppName: <InnerWrite>b__67_0
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::BeginRead
// Il2CppName: BeginRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::EndRead
// Il2CppName: EndRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::BeginWrite
// Il2CppName: BeginWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::EndWrite
// Il2CppName: EndWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::Read
// Il2CppName: Read
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::Write
// Il2CppName: Write
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::ReadAsync
// Il2CppName: ReadAsync
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::WriteAsync
// Il2CppName: WriteAsync
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_IsAuthenticated
// Il2CppName: get_IsAuthenticated
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::Dispose
// Il2CppName: Dispose
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::Flush
// Il2CppName: Flush
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::Seek
// Il2CppName: Seek
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::SetLength
// Il2CppName: SetLength
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_CanRead
// Il2CppName: get_CanRead
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_CanWrite
// Il2CppName: get_CanWrite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_CanSeek
// Il2CppName: get_CanSeek
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_Length
// Il2CppName: get_Length
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_Position
// Il2CppName: get_Position
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::set_Position
// Il2CppName: set_Position
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_ReadTimeout
// Il2CppName: get_ReadTimeout
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::get_WriteTimeout
// Il2CppName: get_WriteTimeout
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Mono::Net::Security::MobileAuthenticatedStream::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
