// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.CFObject
#include "Mono/Net/CFObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Net
namespace Mono::Net {
  // Forward declaring type: CFString
  class CFString;
}
// Completed forward declares
// Type namespace: Mono.Net
namespace Mono::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.CFRunLoop
  class CFRunLoop : public Mono::Net::CFObject {
    public:
    // Creating value type constructor for type: CFRunLoop
    CFRunLoop() noexcept {}
    // static private System.Void CFRunLoopAddSource(System.IntPtr rl, System.IntPtr source, System.IntPtr mode)
    // Offset: 0x15ECF10
    static void CFRunLoopAddSource(System::IntPtr rl, System::IntPtr source, System::IntPtr mode);
    // static private System.Void CFRunLoopRemoveSource(System.IntPtr rl, System.IntPtr source, System.IntPtr mode)
    // Offset: 0x15ECFA8
    static void CFRunLoopRemoveSource(System::IntPtr rl, System::IntPtr source, System::IntPtr mode);
    // static private System.Int32 CFRunLoopRunInMode(System.IntPtr mode, System.Double seconds, System.Boolean returnAfterSourceHandled)
    // Offset: 0x15ED040
    static int CFRunLoopRunInMode(System::IntPtr mode, double seconds, bool returnAfterSourceHandled);
    // static private System.IntPtr CFRunLoopGetCurrent()
    // Offset: 0x15ED0E0
    static System::IntPtr CFRunLoopGetCurrent();
    // static private System.Void CFRunLoopStop(System.IntPtr rl)
    // Offset: 0x15ED154
    static void CFRunLoopStop(System::IntPtr rl);
    // static public Mono.Net.CFRunLoop get_CurrentRunLoop()
    // Offset: 0x15EA98C
    static Mono::Net::CFRunLoop* get_CurrentRunLoop();
    // public System.Void AddSource(System.IntPtr source, Mono.Net.CFString mode)
    // Offset: 0x15EAAD8
    void AddSource(System::IntPtr source, Mono::Net::CFString* mode);
    // public System.Void RemoveSource(System.IntPtr source, Mono.Net.CFString mode)
    // Offset: 0x15EAB10
    void RemoveSource(System::IntPtr source, Mono::Net::CFString* mode);
    // public System.Int32 RunInMode(Mono.Net.CFString mode, System.Double seconds, System.Boolean returnAfterSourceHandled)
    // Offset: 0x15EAAF4
    int RunInMode(Mono::Net::CFString* mode, double seconds, bool returnAfterSourceHandled);
    // public System.Void Stop()
    // Offset: 0x15EB380
    void Stop();
    // public System.Void .ctor(System.IntPtr handle, System.Boolean own)
    // Offset: 0x15ED1D4
    // Implemented from: Mono.Net.CFObject
    // Base method: System.Void CFObject::.ctor(System.IntPtr handle, System.Boolean own)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CFRunLoop* New_ctor(System::IntPtr handle, bool own) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFRunLoop::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CFRunLoop*, creationType>(handle, own)));
    }
  }; // Mono.Net.CFRunLoop
  #pragma pack(pop)
  // Writing MetadataGetter for method: CFRunLoop::CFRunLoopAddSource
  // Il2CppName: CFRunLoopAddSource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::IntPtr, System::IntPtr)>(&CFRunLoop::CFRunLoopAddSource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "CFRunLoopAddSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::CFRunLoopRemoveSource
  // Il2CppName: CFRunLoopRemoveSource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::IntPtr, System::IntPtr)>(&CFRunLoop::CFRunLoopRemoveSource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "CFRunLoopRemoveSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::CFRunLoopRunInMode
  // Il2CppName: CFRunLoopRunInMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, double, bool)>(&CFRunLoop::CFRunLoopRunInMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "CFRunLoopRunInMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::CFRunLoopGetCurrent
  // Il2CppName: CFRunLoopGetCurrent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&CFRunLoop::CFRunLoopGetCurrent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "CFRunLoopGetCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::CFRunLoopStop
  // Il2CppName: CFRunLoopStop
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&CFRunLoop::CFRunLoopStop)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "CFRunLoopStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::get_CurrentRunLoop
  // Il2CppName: get_CurrentRunLoop
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Net::CFRunLoop* (*)()>(&CFRunLoop::get_CurrentRunLoop)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "get_CurrentRunLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::AddSource
  // Il2CppName: AddSource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CFRunLoop::*)(System::IntPtr, Mono::Net::CFString*)>(&CFRunLoop::AddSource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "AddSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<Mono::Net::CFString*>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::RemoveSource
  // Il2CppName: RemoveSource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CFRunLoop::*)(System::IntPtr, Mono::Net::CFString*)>(&CFRunLoop::RemoveSource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "RemoveSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<Mono::Net::CFString*>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::RunInMode
  // Il2CppName: RunInMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CFRunLoop::*)(Mono::Net::CFString*, double, bool)>(&CFRunLoop::RunInMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "RunInMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Mono::Net::CFString*>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::Stop
  // Il2CppName: Stop
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CFRunLoop::*)()>(&CFRunLoop::Stop)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CFRunLoop::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CFRunLoop::*)(System::IntPtr, bool)>(&CFRunLoop::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CFRunLoop::*)(System::IntPtr, bool)>(&CFRunLoop::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CFRunLoop*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Net::CFRunLoop*, "Mono.Net", "CFRunLoop");
