// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Mono.Net
namespace Mono::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.CFObject
  // [] Offset: FFFFFFFF
  class CFObject : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCA2354
    // private System.IntPtr <Handle>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr Handle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: CFObject
    CFObject(System::IntPtr Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return Handle;
    }
    // static public System.IntPtr dlopen(System.String path, System.Int32 mode)
    // Offset: 0x142ECC0
    static System::IntPtr dlopen(::Il2CppString* path, int mode);
    // static private System.IntPtr dlsym(System.IntPtr handle, System.String symbol)
    // Offset: 0x1431CE8
    static System::IntPtr dlsym(System::IntPtr handle, ::Il2CppString* symbol);
    // static public System.Void dlclose(System.IntPtr handle)
    // Offset: 0x142ED6C
    static void dlclose(System::IntPtr handle);
    // static public System.IntPtr GetIndirect(System.IntPtr handle, System.String symbol)
    // Offset: 0x142ED68
    static System::IntPtr GetIndirect(System::IntPtr handle, ::Il2CppString* symbol);
    // static public System.IntPtr GetCFObjectHandle(System.IntPtr handle, System.String symbol)
    // Offset: 0x1431D94
    static System::IntPtr GetCFObjectHandle(System::IntPtr handle, ::Il2CppString* symbol);
    // public System.Void .ctor(System.IntPtr handle, System.Boolean own)
    // Offset: 0x142EBA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CFObject* New_ctor(System::IntPtr handle, bool own) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::CFObject::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CFObject*, creationType>(handle, own)));
    }
    // public System.IntPtr get_Handle()
    // Offset: 0x1431EB8
    System::IntPtr get_Handle();
    // private System.Void set_Handle(System.IntPtr value)
    // Offset: 0x1431EC0
    void set_Handle(System::IntPtr value);
    // static System.IntPtr CFRetain(System.IntPtr handle)
    // Offset: 0x1431EC8
    static System::IntPtr CFRetain(System::IntPtr handle);
    // private System.Void Retain()
    // Offset: 0x1431E3C
    void Retain();
    // static System.Void CFRelease(System.IntPtr handle)
    // Offset: 0x1431F44
    static void CFRelease(System::IntPtr handle);
    // private System.Void Release()
    // Offset: 0x1431FC4
    void Release();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1431FCC
    void Dispose(bool disposing);
    // public System.Void Dispose()
    // Offset: 0x142FD2C
    void Dispose();
    // protected override System.Void Finalize()
    // Offset: 0x1431E44
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Mono.Net.CFObject
  #pragma pack(pop)
  static check_size<sizeof(CFObject), 16 + sizeof(System::IntPtr)> __Mono_Net_CFObjectSizeCheck;
  static_assert(sizeof(CFObject) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Net::CFObject*, "Mono.Net", "CFObject");
