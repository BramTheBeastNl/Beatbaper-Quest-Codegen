// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Globalization::Unicode
namespace Mono::Globalization::Unicode {
}
// Completed forward declares
// Type namespace: Mono.Globalization.Unicode
namespace Mono::Globalization::Unicode {
  // Size: 0x24
  // Autogenerated type: Mono.Globalization.Unicode.CodePointIndexer
  // [] Offset: FFFFFFFF
  class CodePointIndexer : public ::Il2CppObject {
    public:
    // Nested type: Mono::Globalization::Unicode::CodePointIndexer::TableRange
    struct TableRange;
    // private readonly Mono.Globalization.Unicode.CodePointIndexer/TableRange[] ranges
    // Size: 0x8
    // Offset: 0x10
    ::Array<Mono::Globalization::Unicode::CodePointIndexer::TableRange>* ranges;
    // Field size check
    static_assert(sizeof(::Array<Mono::Globalization::Unicode::CodePointIndexer::TableRange>*) == 0x8);
    // public readonly System.Int32 TotalCount
    // Size: 0x4
    // Offset: 0x18
    int TotalCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 defaultIndex
    // Size: 0x4
    // Offset: 0x1C
    int defaultIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 defaultCP
    // Size: 0x4
    // Offset: 0x20
    int defaultCP;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: CodePointIndexer
    CodePointIndexer(::Array<Mono::Globalization::Unicode::CodePointIndexer::TableRange>* ranges_ = {}, int TotalCount_ = {}, int defaultIndex_ = {}, int defaultCP_ = {}) noexcept : ranges{ranges_}, TotalCount{TotalCount_}, defaultIndex{defaultIndex_}, defaultCP{defaultCP_} {}
    // public System.Void .ctor(System.Int32[] starts, System.Int32[] ends, System.Int32 defaultIndex, System.Int32 defaultCP)
    // Offset: 0x1518D88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CodePointIndexer* New_ctor(::Array<int>* starts, ::Array<int>* ends, int defaultIndex, int defaultCP) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Globalization::Unicode").WithContext("CodePointIndexer").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CodePointIndexer*, creationType>(starts, ends, defaultIndex, defaultCP)));
    }
    // public System.Int32 ToIndex(System.Int32 cp)
    // Offset: 0x1518F28
    int ToIndex(int cp);
  }; // Mono.Globalization.Unicode.CodePointIndexer
  static check_size<sizeof(CodePointIndexer), 32 + sizeof(int)> __Mono_Globalization_Unicode_CodePointIndexerSizeCheck;
  static_assert(sizeof(CodePointIndexer) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Globalization::Unicode::CodePointIndexer*, "Mono.Globalization.Unicode", "CodePointIndexer");
#pragma pack(pop)
