// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.Cryptography
namespace Mono::Security::Cryptography {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Cryptography.PKCS1
  class PKCS1 : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: PKCS1
    PKCS1() noexcept {}
    // Get static field: static private System.Byte[] emptySHA1
    static ::Array<uint8_t>* _get_emptySHA1();
    // Set static field: static private System.Byte[] emptySHA1
    static void _set_emptySHA1(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] emptySHA256
    static ::Array<uint8_t>* _get_emptySHA256();
    // Set static field: static private System.Byte[] emptySHA256
    static void _set_emptySHA256(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] emptySHA384
    static ::Array<uint8_t>* _get_emptySHA384();
    // Set static field: static private System.Byte[] emptySHA384
    static void _set_emptySHA384(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] emptySHA512
    static ::Array<uint8_t>* _get_emptySHA512();
    // Set static field: static private System.Byte[] emptySHA512
    static void _set_emptySHA512(::Array<uint8_t>* value);
    // static System.String HashNameFromOid(System.String oid, System.Boolean throwOnError)
    // Offset: 0x1D75500
    static ::Il2CppString* HashNameFromOid(::Il2CppString* oid, bool throwOnError);
    // static System.Security.Cryptography.HashAlgorithm CreateFromOid(System.String oid)
    // Offset: 0x1D757D0
    static System::Security::Cryptography::HashAlgorithm* CreateFromOid(::Il2CppString* oid);
    // static System.Security.Cryptography.HashAlgorithm CreateFromName(System.String name)
    // Offset: 0x1D7583C
    static System::Security::Cryptography::HashAlgorithm* CreateFromName(::Il2CppString* name);
    // static private System.Void .cctor()
    // Offset: 0x1D75BB4
    static void _cctor();
  }; // Mono.Security.Cryptography.PKCS1
  #pragma pack(pop)
  // Writing MetadataGetter for method: PKCS1::HashNameFromOid
  // Il2CppName: HashNameFromOid
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, bool)>(&PKCS1::HashNameFromOid)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PKCS1*), "HashNameFromOid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: PKCS1::CreateFromOid
  // Il2CppName: CreateFromOid
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::HashAlgorithm* (*)(::Il2CppString*)>(&PKCS1::CreateFromOid)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PKCS1*), "CreateFromOid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: PKCS1::CreateFromName
  // Il2CppName: CreateFromName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::HashAlgorithm* (*)(::Il2CppString*)>(&PKCS1::CreateFromName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PKCS1*), "CreateFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: PKCS1::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PKCS1::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PKCS1*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::Cryptography::PKCS1*, "Mono.Security.Cryptography", "PKCS1");
