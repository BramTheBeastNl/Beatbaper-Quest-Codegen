// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Mono.Security.Protocol.Ntlm
namespace Mono::Security::Protocol::Ntlm {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Protocol.Ntlm.ChallengeResponse
  // [ObsoleteAttribute] Offset: D86648
  class ChallengeResponse : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x10
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: challenge
    char __padding0[0x7] = {};
    // private System.Byte[] _challenge
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint8_t>* challenge;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] _lmpwd
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint8_t>* lmpwd;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] _ntpwd
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* ntpwd;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: ChallengeResponse
    ChallengeResponse(bool disposed_ = {}, ::Array<uint8_t>* challenge_ = {}, ::Array<uint8_t>* lmpwd_ = {}, ::Array<uint8_t>* ntpwd_ = {}) noexcept : disposed{disposed_}, challenge{challenge_}, lmpwd{lmpwd_}, ntpwd{ntpwd_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.Byte[] magic
    static ::Array<uint8_t>* _get_magic();
    // Set static field: static private System.Byte[] magic
    static void _set_magic(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] nullEncMagic
    static ::Array<uint8_t>* _get_nullEncMagic();
    // Set static field: static private System.Byte[] nullEncMagic
    static void _set_nullEncMagic(::Array<uint8_t>* value);
    // public System.Void .ctor(System.String password, System.Byte[] challenge)
    // Offset: 0x1D798E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChallengeResponse* New_ctor(::Il2CppString* password, ::Array<uint8_t>* challenge) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Security::Protocol::Ntlm::ChallengeResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChallengeResponse*, creationType>(password, challenge)));
    }
    // public System.Void set_Password(System.String value)
    // Offset: 0x1D7992C
    void set_Password(::Il2CppString* value);
    // public System.Void set_Challenge(System.Byte[] value)
    // Offset: 0x1D79D58
    void set_Challenge(::Array<uint8_t>* value);
    // public System.Byte[] get_LM()
    // Offset: 0x1D7A088
    ::Array<uint8_t>* get_LM();
    // public System.Byte[] get_NT()
    // Offset: 0x1D7A408
    ::Array<uint8_t>* get_NT();
    // public System.Void Dispose()
    // Offset: 0x1D79EC8
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1D7A494
    void Dispose(bool disposing);
    // private System.Byte[] GetResponse(System.Byte[] pwd)
    // Offset: 0x1D7A114
    ::Array<uint8_t>* GetResponse(::Array<uint8_t>* pwd);
    // private System.Byte[] PrepareDESKey(System.Byte[] key56bits, System.Int32 position)
    // Offset: 0x1D7A50C
    ::Array<uint8_t>* PrepareDESKey(::Array<uint8_t>* key56bits, int position);
    // private System.Byte[] PasswordToKey(System.String password, System.Int32 position)
    // Offset: 0x1D79F3C
    ::Array<uint8_t>* PasswordToKey(::Il2CppString* password, int position);
    // static private System.Void .cctor()
    // Offset: 0x1D7A714
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1D79870
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChallengeResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Security::Protocol::Ntlm::ChallengeResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChallengeResponse*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1D79E54
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Mono.Security.Protocol.Ntlm.ChallengeResponse
  #pragma pack(pop)
  static check_size<sizeof(ChallengeResponse), 40 + sizeof(::Array<uint8_t>*)> __Mono_Security_Protocol_Ntlm_ChallengeResponseSizeCheck;
  static_assert(sizeof(ChallengeResponse) == 0x30);
  // Writing MetadataGetter for method: ChallengeResponse::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)(::Il2CppString*, ::Array<uint8_t>*)>(&ChallengeResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)(::Il2CppString*, ::Array<uint8_t>*)>(&ChallengeResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::set_Password
  // Il2CppName: set_Password
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)(::Il2CppString*)>(&ChallengeResponse::set_Password)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "set_Password", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::set_Challenge
  // Il2CppName: set_Challenge
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)(::Array<uint8_t>*)>(&ChallengeResponse::set_Challenge)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "set_Challenge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::get_LM
  // Il2CppName: get_LM
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ChallengeResponse::*)()>(&ChallengeResponse::get_LM)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "get_LM", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::get_NT
  // Il2CppName: get_NT
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ChallengeResponse::*)()>(&ChallengeResponse::get_NT)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "get_NT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::Dispose
  // Il2CppName: Dispose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)()>(&ChallengeResponse::Dispose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::Dispose
  // Il2CppName: Dispose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)(bool)>(&ChallengeResponse::Dispose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::GetResponse
  // Il2CppName: GetResponse
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ChallengeResponse::*)(::Array<uint8_t>*)>(&ChallengeResponse::GetResponse)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::PrepareDESKey
  // Il2CppName: PrepareDESKey
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ChallengeResponse::*)(::Array<uint8_t>*, int)>(&ChallengeResponse::PrepareDESKey)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "PrepareDESKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::PasswordToKey
  // Il2CppName: PasswordToKey
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (ChallengeResponse::*)(::Il2CppString*, int)>(&ChallengeResponse::PasswordToKey)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "PasswordToKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ChallengeResponse::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)()>(&ChallengeResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)()>(&ChallengeResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ChallengeResponse::Finalize
  // Il2CppName: Finalize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChallengeResponse::*)()>(&ChallengeResponse::Finalize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ChallengeResponse*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::Protocol::Ntlm::ChallengeResponse*, "Mono.Security.Protocol.Ntlm", "ChallengeResponse");
