// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Math::Prime
namespace Mono::Math::Prime {
  // Forward declaring type: ConfidenceFactor
  struct ConfidenceFactor;
  // Forward declaring type: PrimalityTest
  class PrimalityTest;
}
// Forward declaring namespace: Mono::Math
namespace Mono::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Mono.Math.Prime.Generator
namespace Mono::Math::Prime::Generator {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Math.Prime.Generator.PrimeGeneratorBase
  class PrimeGeneratorBase : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: PrimeGeneratorBase
    PrimeGeneratorBase() noexcept {}
    // public Mono.Math.Prime.ConfidenceFactor get_Confidence()
    // Offset: 0x1D6EF64
    Mono::Math::Prime::ConfidenceFactor get_Confidence();
    // public Mono.Math.Prime.PrimalityTest get_PrimalityTest()
    // Offset: 0x1D6EF6C
    Mono::Math::Prime::PrimalityTest* get_PrimalityTest();
    // public System.Int32 get_TrialDivisionBounds()
    // Offset: 0x1D6EFE0
    int get_TrialDivisionBounds();
    // public Mono.Math.BigInteger GenerateNewPrime(System.Int32 bits)
    // Offset: 0xFFFFFFFF
    Mono::Math::BigInteger* GenerateNewPrime(int bits);
    // protected System.Void .ctor()
    // Offset: 0x1D6EFE8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrimeGeneratorBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Math::Prime::Generator::PrimeGeneratorBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrimeGeneratorBase*, creationType>()));
    }
  }; // Mono.Math.Prime.Generator.PrimeGeneratorBase
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Math::Prime::Generator::PrimeGeneratorBase*, "Mono.Math.Prime.Generator", "PrimeGeneratorBase");
// Writing MetadataGetter for method: PrimeGeneratorBase::get_Confidence
// Il2CppName: get_Confidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Math::Prime::ConfidenceFactor (PrimeGeneratorBase::*)()>(&PrimeGeneratorBase::get_Confidence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrimeGeneratorBase*), "get_Confidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrimeGeneratorBase::get_PrimalityTest
// Il2CppName: get_PrimalityTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Math::Prime::PrimalityTest* (PrimeGeneratorBase::*)()>(&PrimeGeneratorBase::get_PrimalityTest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrimeGeneratorBase*), "get_PrimalityTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrimeGeneratorBase::get_TrialDivisionBounds
// Il2CppName: get_TrialDivisionBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PrimeGeneratorBase::*)()>(&PrimeGeneratorBase::get_TrialDivisionBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrimeGeneratorBase*), "get_TrialDivisionBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PrimeGeneratorBase::GenerateNewPrime
// Il2CppName: GenerateNewPrime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Mono::Math::BigInteger* (PrimeGeneratorBase::*)(int)>(&PrimeGeneratorBase::GenerateNewPrime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrimeGeneratorBase*), "GenerateNewPrime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PrimeGeneratorBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrimeGeneratorBase::*)()>(&PrimeGeneratorBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrimeGeneratorBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrimeGeneratorBase::*)()>(&PrimeGeneratorBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrimeGeneratorBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
