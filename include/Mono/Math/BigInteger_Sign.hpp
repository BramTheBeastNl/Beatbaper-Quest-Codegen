// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Math.BigInteger
#include "Mono/Math/BigInteger.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Mono.Math
namespace Mono::Math {
  // Autogenerated type: Mono.Math.BigInteger/Sign
  // [] Offset: FFFFFFFF
  struct BigInteger::Sign/*, public System::Enum*/ {
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Sign
    constexpr Sign(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator System::Enum
    operator System::Enum() noexcept {
      return *reinterpret_cast<System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Mono.Math.BigInteger/Sign Negative
    static constexpr const int Negative = -1;
    // Get static field: static public Mono.Math.BigInteger/Sign Negative
    static Mono::Math::BigInteger::Sign _get_Negative();
    // Set static field: static public Mono.Math.BigInteger/Sign Negative
    static void _set_Negative(Mono::Math::BigInteger::Sign value);
    // static field const value: static public Mono.Math.BigInteger/Sign Zero
    static constexpr const int Zero = 0;
    // Get static field: static public Mono.Math.BigInteger/Sign Zero
    static Mono::Math::BigInteger::Sign _get_Zero();
    // Set static field: static public Mono.Math.BigInteger/Sign Zero
    static void _set_Zero(Mono::Math::BigInteger::Sign value);
    // static field const value: static public Mono.Math.BigInteger/Sign Positive
    static constexpr const int Positive = 1;
    // Get static field: static public Mono.Math.BigInteger/Sign Positive
    static Mono::Math::BigInteger::Sign _get_Positive();
    // Set static field: static public Mono.Math.BigInteger/Sign Positive
    static void _set_Positive(Mono::Math::BigInteger::Sign value);
  }; // Mono.Math.BigInteger/Sign
  static check_size<sizeof(BigInteger::Sign), 0 + sizeof(int)> __Mono_Math_BigInteger_SignSizeCheck;
  static_assert(sizeof(BigInteger::Sign) == 0x4);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Math::BigInteger::Sign, "Mono.Math", "BigInteger/Sign");
#pragma pack(pop)
