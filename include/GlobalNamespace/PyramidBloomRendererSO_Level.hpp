// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
// Including type: PyramidBloomRendererSO
#include "GlobalNamespace/PyramidBloomRendererSO.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  // Autogenerated type: PyramidBloomRendererSO/Level
  // [] Offset: FFFFFFFF
  struct PyramidBloomRendererSO::Level/*, public System::ValueType*/ {
    public:
    // UnityEngine.RenderTexture down
    // Size: 0x8
    // Offset: 0x0
    UnityEngine::RenderTexture* down;
    // Field size check
    static_assert(sizeof(UnityEngine::RenderTexture*) == 0x8);
    // UnityEngine.RenderTexture up
    // Size: 0x8
    // Offset: 0x8
    UnityEngine::RenderTexture* up;
    // Field size check
    static_assert(sizeof(UnityEngine::RenderTexture*) == 0x8);
    // Creating value type constructor for type: Level
    constexpr Level(UnityEngine::RenderTexture* down_ = {}, UnityEngine::RenderTexture* up_ = {}) noexcept : down{down_}, up{up_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // PyramidBloomRendererSO/Level
  static check_size<sizeof(PyramidBloomRendererSO::Level), 8 + sizeof(UnityEngine::RenderTexture*)> __GlobalNamespace_PyramidBloomRendererSO_LevelSizeCheck;
  static_assert(sizeof(PyramidBloomRendererSO::Level) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PyramidBloomRendererSO::Level, "", "PyramidBloomRendererSO/Level");
#pragma pack(pop)
