// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: SyncStateId
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct SyncStateId/*, public System::ValueType, public LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>, public System::IEquatable_1<GlobalNamespace::SyncStateId>*/ {
    public:
    // private readonly System.Byte _id
    // Size: 0x1
    // Offset: 0x0
    uint8_t id;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Creating value type constructor for type: SyncStateId
    constexpr SyncStateId(uint8_t id_ = {}) noexcept : id{id_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>
    operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<GlobalNamespace::SyncStateId>
    operator System::IEquatable_1<GlobalNamespace::SyncStateId>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<GlobalNamespace::SyncStateId>*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return id;
    }
    // static field const value: static private System.Byte kMaxValue
    static constexpr const uint8_t kMaxValue = 128u;
    // Get static field: static private System.Byte kMaxValue
    static uint8_t _get_kMaxValue();
    // Set static field: static private System.Byte kMaxValue
    static void _set_kMaxValue(uint8_t value);
    // private System.Void .ctor(System.Byte id)
    // Offset: 0xF227D4
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  SyncStateId(uint8_t id)
    // public System.Boolean Equals(SyncStateId other)
    // Offset: 0xF227DC
    bool Equals(GlobalNamespace::SyncStateId other);
    // public SyncStateId Increment()
    // Offset: 0xF2284C
    GlobalNamespace::SyncStateId Increment();
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xF2285C
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void SerializeWithFlag(LiteNetLib.Utils.NetDataWriter writer, System.Boolean flag)
    // Offset: 0xF22880
    void SerializeWithFlag(LiteNetLib::Utils::NetDataWriter* writer, bool flag);
    // static public SyncStateId Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x237D5CC
    static GlobalNamespace::SyncStateId Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // static public SyncStateId DeserializeWithFlag(LiteNetLib.Utils.NetDataReader reader, out System.Boolean flag)
    // Offset: 0x237D340
    static GlobalNamespace::SyncStateId DeserializeWithFlag(LiteNetLib::Utils::NetDataReader* reader, bool& flag);
    // public SyncStateId CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xF2288C
    GlobalNamespace::SyncStateId CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // static public System.Boolean WithinRange(SyncStateId a, SyncStateId b, System.Int32 range)
    // Offset: 0x237D7A4
    static bool WithinRange(GlobalNamespace::SyncStateId a, GlobalNamespace::SyncStateId b, int range);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xF227EC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF227F4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xF22820
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // SyncStateId
  #pragma pack(pop)
  static check_size<sizeof(SyncStateId), 0 + sizeof(uint8_t)> __GlobalNamespace_SyncStateIdSizeCheck;
  static_assert(sizeof(SyncStateId) == 0x1);
  // static public System.Boolean op_Equality(SyncStateId a, SyncStateId b)
  // Offset: 0x237D74C
  bool operator ==(const GlobalNamespace::SyncStateId& a, const GlobalNamespace::SyncStateId& b);
  // static public System.Boolean op_Inequality(SyncStateId a, SyncStateId b)
  // Offset: 0x237D75C
  bool operator !=(const GlobalNamespace::SyncStateId& a, const GlobalNamespace::SyncStateId& b);
  // Writing MetadataGetter for method: SyncStateId::SyncStateId
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(uint8_t)>(&SyncStateId::SyncStateId<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(uint8_t)>(&SyncStateId::SyncStateId<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SyncStateId::*)(GlobalNamespace::SyncStateId)>(&SyncStateId::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::Increment
  // Il2CppName: Increment
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (SyncStateId::*)()>(&SyncStateId::Increment)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Increment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::Serialize
  // Il2CppName: Serialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(LiteNetLib::Utils::NetDataWriter*)>(&SyncStateId::Serialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::SerializeWithFlag
  // Il2CppName: SerializeWithFlag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SyncStateId::*)(LiteNetLib::Utils::NetDataWriter*, bool)>(&SyncStateId::SerializeWithFlag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "SerializeWithFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::Deserialize
  // Il2CppName: Deserialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (*)(LiteNetLib::Utils::NetDataReader*)>(&SyncStateId::Deserialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::DeserializeWithFlag
  // Il2CppName: DeserializeWithFlag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (*)(LiteNetLib::Utils::NetDataReader*, bool&)>(&SyncStateId::DeserializeWithFlag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "DeserializeWithFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::CreateFromSerializedData
  // Il2CppName: CreateFromSerializedData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SyncStateId (SyncStateId::*)(LiteNetLib::Utils::NetDataReader*)>(&SyncStateId::CreateFromSerializedData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::WithinRange
  // Il2CppName: WithinRange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::SyncStateId, GlobalNamespace::SyncStateId, int)>(&SyncStateId::WithinRange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "WithinRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SyncStateId>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SyncStateId::*)(::Il2CppObject*)>(&SyncStateId::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SyncStateId::*)()>(&SyncStateId::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SyncStateId::*)()>(&SyncStateId::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::operator ==
  // Il2CppName: op_Equality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::SyncStateId&, const GlobalNamespace::SyncStateId&)>(&SyncStateId::operator ==)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>()});
    }
  };
  // Writing MetadataGetter for method: SyncStateId::operator !=
  // Il2CppName: op_Inequality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const GlobalNamespace::SyncStateId&, const GlobalNamespace::SyncStateId&)>(&SyncStateId::operator !=)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SyncStateId), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>(), ::il2cpp_utils::ExtractIndependentType<const GlobalNamespace::SyncStateId&>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SyncStateId, "", "SyncStateId");
