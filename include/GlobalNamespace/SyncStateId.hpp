// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: SyncStateId
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct SyncStateId/*, public System::ValueType, public LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>, public System::IEquatable_1<GlobalNamespace::SyncStateId>*/ {
    public:
    // private readonly System.Byte _id
    // Size: 0x1
    // Offset: 0x0
    uint8_t id;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Creating value type constructor for type: SyncStateId
    constexpr SyncStateId(uint8_t id_ = {}) noexcept : id{id_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>
    operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SyncStateId>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<GlobalNamespace::SyncStateId>
    operator System::IEquatable_1<GlobalNamespace::SyncStateId>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<GlobalNamespace::SyncStateId>*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return id;
    }
    // static field const value: static private System.Byte kMaxValue
    static constexpr const uint8_t kMaxValue = 128u;
    // Get static field: static private System.Byte kMaxValue
    static uint8_t _get_kMaxValue();
    // Set static field: static private System.Byte kMaxValue
    static void _set_kMaxValue(uint8_t value);
    // private System.Void .ctor(System.Byte id)
    // Offset: 0xE19EB8
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  SyncStateId(uint8_t id)
    // public System.Boolean Equals(SyncStateId other)
    // Offset: 0xE19EC0
    bool Equals(GlobalNamespace::SyncStateId other);
    // public SyncStateId Increment()
    // Offset: 0xE19F30
    GlobalNamespace::SyncStateId Increment();
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xE19F40
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void SerializeWithFlag(LiteNetLib.Utils.NetDataWriter writer, System.Boolean flag)
    // Offset: 0xE19F64
    void SerializeWithFlag(LiteNetLib::Utils::NetDataWriter* writer, bool flag);
    // static public SyncStateId Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x2162970
    static GlobalNamespace::SyncStateId Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // static public SyncStateId DeserializeWithFlag(LiteNetLib.Utils.NetDataReader reader, out System.Boolean flag)
    // Offset: 0x2162724
    static GlobalNamespace::SyncStateId DeserializeWithFlag(LiteNetLib::Utils::NetDataReader* reader, bool& flag);
    // public SyncStateId CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xE19F70
    GlobalNamespace::SyncStateId CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // static public System.Boolean WithinRange(SyncStateId a, SyncStateId b, System.Int32 range)
    // Offset: 0x2162BE4
    static bool WithinRange(GlobalNamespace::SyncStateId a, GlobalNamespace::SyncStateId b, int range);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE19ED0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE19ED8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xE19F04
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // SyncStateId
  #pragma pack(pop)
  static check_size<sizeof(SyncStateId), 0 + sizeof(uint8_t)> __GlobalNamespace_SyncStateIdSizeCheck;
  static_assert(sizeof(SyncStateId) == 0x1);
  // static public System.Boolean op_Equality(SyncStateId a, SyncStateId b)
  // Offset: 0x2162B8C
  bool operator ==(const GlobalNamespace::SyncStateId& a, const GlobalNamespace::SyncStateId& b);
  // static public System.Boolean op_Inequality(SyncStateId a, SyncStateId b)
  // Offset: 0x2162B9C
  bool operator !=(const GlobalNamespace::SyncStateId& a, const GlobalNamespace::SyncStateId& b);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SyncStateId, "", "SyncStateId");
