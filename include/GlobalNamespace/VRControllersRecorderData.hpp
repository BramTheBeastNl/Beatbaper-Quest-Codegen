// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  // Autogenerated type: VRControllersRecorderData
  // [] Offset: FFFFFFFF
  class VRControllersRecorderData : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::VRControllersRecorderData::PositionAndRotation
    struct PositionAndRotation;
    // Nested type: GlobalNamespace::VRControllersRecorderData::Keyframe
    class Keyframe;
    // Nested type: GlobalNamespace::VRControllersRecorderData::NodeInfo
    class NodeInfo;
    // public readonly VRControllersRecorderData/NodeInfo[] nodesInfo
    // Size: 0x8
    // Offset: 0x10
    ::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>* nodesInfo;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<VRControllersRecorderData/Keyframe> _keyframes
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<GlobalNamespace::VRControllersRecorderData::Keyframe*>* keyframes;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::VRControllersRecorderData::Keyframe*>*) == 0x8);
    // Creating value type constructor for type: VRControllersRecorderData
    VRControllersRecorderData(::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>* nodesInfo_ = {}, System::Collections::Generic::List_1<GlobalNamespace::VRControllersRecorderData::Keyframe*>* keyframes_ = {}) noexcept : nodesInfo{nodesInfo_}, keyframes{keyframes_} {}
    // public System.Void .ctor(VRControllersRecorderData/NodeInfo[] nodesInfo)
    // Offset: 0x1973CDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRControllersRecorderData* New_ctor(::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>* nodesInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("VRControllersRecorderData").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRControllersRecorderData*, creationType>(nodesInfo)));
    }
    // public System.Void AddKeyFrame(VRControllersRecorderData/PositionAndRotation[] positionsAndRotations, System.Single time)
    // Offset: 0x1973D74
    void AddKeyFrame(::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>* positionsAndRotations, float time);
    // public VRControllersRecorderData/PositionAndRotation GetPositionAndRotation(System.Int32 frameIdx, UnityEngine.XR.XRNode nodeType, System.Int32 nodeIdx)
    // Offset: 0x1973E64
    GlobalNamespace::VRControllersRecorderData::PositionAndRotation GetPositionAndRotation(int frameIdx, UnityEngine::XR::XRNode nodeType, int nodeIdx);
    // public VRControllersRecorderData/PositionAndRotation GetLerpedPositionAndRotation(System.Int32 frameIdx, System.Single t, UnityEngine.XR.XRNode nodeType, System.Int32 nodeIdx)
    // Offset: 0x1973F90
    GlobalNamespace::VRControllersRecorderData::PositionAndRotation GetLerpedPositionAndRotation(int frameIdx, float t, UnityEngine::XR::XRNode nodeType, int nodeIdx);
    // public System.Single GetFrameTime(System.Int32 frameIdx)
    // Offset: 0x197418C
    float GetFrameTime(int frameIdx);
    // public System.Int32 get_numberOfKeyframes()
    // Offset: 0x197420C
    int get_numberOfKeyframes();
  }; // VRControllersRecorderData
  static check_size<sizeof(VRControllersRecorderData), 24 + sizeof(System::Collections::Generic::List_1<GlobalNamespace::VRControllersRecorderData::Keyframe*>*)> __GlobalNamespace_VRControllersRecorderDataSizeCheck;
  static_assert(sizeof(VRControllersRecorderData) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::VRControllersRecorderData*, "", "VRControllersRecorderData");
#pragma pack(pop)
