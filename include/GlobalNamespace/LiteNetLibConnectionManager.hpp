// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketEncryptionLayer
  class PacketEncryptionLayer;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: DisconnectInfo
  struct DisconnectInfo;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: UnconnectedMessageType
  struct UnconnectedMessageType;
  // Forward declaring type: DisconnectReason
  struct DisconnectReason;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketError
  struct SocketError;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLibConnectionManager
  class LiteNetLibConnectionManager : public ::Il2CppObject/*, public GlobalNamespace::IConnectionManager, public LiteNetLib::INetEventListener*/ {
    public:
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::NetworkMode
    struct NetworkMode;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::ConnectionState
    struct ConnectionState;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase
    class LiteNetLibConnectionParamsBase;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::StartServerParams
    class StartServerParams;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::StartRelayParams
    class StartRelayParams;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::StartClientParams
    class StartClientParams;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest
    class NetPeerConnectionRequest;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection
    class NetPeerConnection;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated
    class StatisticsUpdated;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::$$c
    class $$c;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__126
    struct $BackgroundDisconnectSentry$d__126;
    // Nested type: GlobalNamespace::LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__127
    struct $BackgroundShutdownSentry$d__127;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LiteNetLibConnectionManager/NetworkMode
    struct NetworkMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: NetworkMode
      constexpr NetworkMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode None
      static constexpr const int None = 0;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode None
      static GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_None();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode None
      static void _set_None(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode Client
      static constexpr const int Client = 1;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode Client
      static GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_Client();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode Client
      static void _set_Client(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode Server
      static constexpr const int Server = 2;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode Server
      static GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_Server();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode Server
      static void _set_Server(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode Relay
      static constexpr const int Relay = 3;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode Relay
      static GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_Relay();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode Relay
      static void _set_Relay(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
    }; // LiteNetLibConnectionManager/NetworkMode
    #pragma pack(pop)
    static check_size<sizeof(LiteNetLibConnectionManager::NetworkMode), 0 + sizeof(int)> __GlobalNamespace_LiteNetLibConnectionManager_NetworkModeSizeCheck;
    static_assert(sizeof(LiteNetLibConnectionManager::NetworkMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LiteNetLibConnectionManager/ConnectionState
    struct ConnectionState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Unconnected
      static constexpr const int Unconnected = 0;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Unconnected
      static GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Unconnected();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Unconnected
      static void _set_Unconnected(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Connecting
      static constexpr const int Connecting = 1;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Connecting
      static GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Connecting();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Connecting
      static void _set_Connecting(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Connected
      static constexpr const int Connected = 2;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Connected
      static GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Connected();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Connected
      static void _set_Connected(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
      static constexpr const int Disconnecting = 3;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
      static GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Disconnecting();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
      static void _set_Disconnecting(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
    }; // LiteNetLibConnectionManager/ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(LiteNetLibConnectionManager::ConnectionState), 0 + sizeof(int)> __GlobalNamespace_LiteNetLibConnectionManager_ConnectionStateSizeCheck;
    static_assert(sizeof(LiteNetLibConnectionManager::ConnectionState) == 0x4);
    // private readonly LiteNetLib.NetManager _netManager
    // Size: 0x8
    // Offset: 0x10
    LiteNetLib::NetManager* netManager;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetManager*) == 0x8);
    // private readonly PacketEncryptionLayer _encryptionLayer
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PacketEncryptionLayer* encryptionLayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PacketEncryptionLayer*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnection> _connections
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* connections;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnection> _pendingConnections
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* pendingConnections;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnectionRequest> _pendingRequests
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest*>* pendingRequests;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.Net.IPEndPoint> _pendingReconnections
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::HashSet_1<System::Net::IPEndPoint*>* pendingReconnections;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<System::Net::IPEndPoint*>*) == 0x8);
    // private System.String _userId
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _userName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _secret
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private LiteNetLibConnectionManager/NetworkMode _mode
    // Size: 0x4
    // Offset: 0x58
    GlobalNamespace::LiteNetLibConnectionManager::NetworkMode mode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode) == 0x4);
    // private LiteNetLibConnectionManager/ConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x5C
    GlobalNamespace::LiteNetLibConnectionManager::ConnectionState connectionState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState) == 0x4);
    // private System.Threading.CancellationTokenSource _backgroundSentryDisconnectCts
    // Size: 0x8
    // Offset: 0x60
    System::Threading::CancellationTokenSource* backgroundSentryDisconnectCts;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Threading.CancellationTokenSource _backgroundSentryShutdownCts
    // Size: 0x8
    // Offset: 0x68
    System::Threading::CancellationTokenSource* backgroundSentryShutdownCts;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Boolean _sentryDisconnected
    // Size: 0x1
    // Offset: 0x70
    bool sentryDisconnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sentryShutdown
    // Size: 0x1
    // Offset: 0x71
    bool sentryShutdown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sentryShutdown and: lastPollUpdateTime
    char __padding14[0x6] = {};
    // private System.Int64 _lastPollUpdateTime
    // Size: 0x8
    // Offset: 0x78
    int64_t lastPollUpdateTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _lastStatisticsUpdateTime
    // Size: 0x8
    // Offset: 0x80
    int64_t lastStatisticsUpdateTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05ECC
    // private System.Action onConnectedEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action* onConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05EDC
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05EEC
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05EFC
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnection*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05F0C
    // private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05F1C
    // private System.Action`2<IConnection,System.Single> onLatencyUpdatedEvent
    // Size: 0x8
    // Offset: 0xB0
    System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05F2C
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    // Size: 0x8
    // Offset: 0xB8
    System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05F3C
    // private System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> onReceiveUnconnectedDataEvent
    // Size: 0x8
    // Offset: 0xC0
    System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* onReceiveUnconnectedDataEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05F4C
    // private LiteNetLibConnectionManager/StatisticsUpdated onStatisticsUpdatedEvent
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* onStatisticsUpdatedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*) == 0x8);
    // Creating value type constructor for type: LiteNetLibConnectionManager
    LiteNetLibConnectionManager(LiteNetLib::NetManager* netManager_ = {}, GlobalNamespace::PacketEncryptionLayer* encryptionLayer_ = {}, System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* connections_ = {}, System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* pendingConnections_ = {}, System::Collections::Generic::List_1<GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest*>* pendingRequests_ = {}, System::Collections::Generic::HashSet_1<System::Net::IPEndPoint*>* pendingReconnections_ = {}, ::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, ::Il2CppString* secret_ = {}, GlobalNamespace::LiteNetLibConnectionManager::NetworkMode mode_ = {}, GlobalNamespace::LiteNetLibConnectionManager::ConnectionState connectionState_ = {}, System::Threading::CancellationTokenSource* backgroundSentryDisconnectCts_ = {}, System::Threading::CancellationTokenSource* backgroundSentryShutdownCts_ = {}, bool sentryDisconnected_ = {}, bool sentryShutdown_ = {}, int64_t lastPollUpdateTime_ = {}, int64_t lastStatisticsUpdateTime_ = {}, System::Action* onConnectedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent_ = {}, System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent_ = {}, System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* onReceiveUnconnectedDataEvent_ = {}, GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* onStatisticsUpdatedEvent_ = {}) noexcept : netManager{netManager_}, encryptionLayer{encryptionLayer_}, connections{connections_}, pendingConnections{pendingConnections_}, pendingRequests{pendingRequests_}, pendingReconnections{pendingReconnections_}, userId{userId_}, userName{userName_}, secret{secret_}, mode{mode_}, connectionState{connectionState_}, backgroundSentryDisconnectCts{backgroundSentryDisconnectCts_}, backgroundSentryShutdownCts{backgroundSentryShutdownCts_}, sentryDisconnected{sentryDisconnected_}, sentryShutdown{sentryShutdown_}, lastPollUpdateTime{lastPollUpdateTime_}, lastStatisticsUpdateTime{lastStatisticsUpdateTime_}, onConnectedEvent{onConnectedEvent_}, onDisconnectedEvent{onDisconnectedEvent_}, onConnectionFailedEvent{onConnectionFailedEvent_}, onConnectionConnectedEvent{onConnectionConnectedEvent_}, onConnectionDisconnectedEvent{onConnectionDisconnectedEvent_}, onLatencyUpdatedEvent{onLatencyUpdatedEvent_}, onReceivedDataEvent{onReceivedDataEvent_}, onReceiveUnconnectedDataEvent{onReceiveUnconnectedDataEvent_}, onStatisticsUpdatedEvent{onStatisticsUpdatedEvent_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectionManager
    operator GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectionManager*>(this);
    }
    // Creating interface conversion operator: operator LiteNetLib::INetEventListener
    operator LiteNetLib::INetEventListener() noexcept {
      return *reinterpret_cast<LiteNetLib::INetEventListener*>(this);
    }
    // static field const value: static private System.Int64 kBackgroundDisconnectTimeout
    static constexpr const int64_t kBackgroundDisconnectTimeout = 1200000000;
    // Get static field: static private System.Int64 kBackgroundDisconnectTimeout
    static int64_t _get_kBackgroundDisconnectTimeout();
    // Set static field: static private System.Int64 kBackgroundDisconnectTimeout
    static void _set_kBackgroundDisconnectTimeout(int64_t value);
    // static field const value: static private System.Int64 kBackgroundShutdownTimeout
    static constexpr const int64_t kBackgroundShutdownTimeout = 9000000000;
    // Get static field: static private System.Int64 kBackgroundShutdownTimeout
    static int64_t _get_kBackgroundShutdownTimeout();
    // Set static field: static private System.Int64 kBackgroundShutdownTimeout
    static void _set_kBackgroundShutdownTimeout(int64_t value);
    // static field const value: static private System.Int64 kStatisticsUpdateInterval
    static constexpr const int64_t kStatisticsUpdateInterval = 300000000;
    // Get static field: static private System.Int64 kStatisticsUpdateInterval
    static int64_t _get_kStatisticsUpdateInterval();
    // Set static field: static private System.Int64 kStatisticsUpdateInterval
    static void _set_kStatisticsUpdateInterval(int64_t value);
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x1217070
    void add_onConnectedEvent(System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x1217114
    void remove_onConnectedEvent(System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x12171B8
    void add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x121725C
    void remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x1217300
    void add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x12173A4
    void remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x1217448
    void add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x12174EC
    void remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x1217590
    void add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x1217634
    void remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x12176D8
    void add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x121777C
    void remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x1217820
    void add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x12178C4
    void remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.Void add_onReceiveUnconnectedDataEvent(System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> value)
    // Offset: 0x1217968
    void add_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value);
    // public System.Void remove_onReceiveUnconnectedDataEvent(System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> value)
    // Offset: 0x1217A0C
    void remove_onReceiveUnconnectedDataEvent(System::Action_2<System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataReader*>* value);
    // public System.Void add_onStatisticsUpdatedEvent(LiteNetLibConnectionManager/StatisticsUpdated value)
    // Offset: 0x1217AB0
    void add_onStatisticsUpdatedEvent(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* value);
    // public System.Void remove_onStatisticsUpdatedEvent(LiteNetLibConnectionManager/StatisticsUpdated value)
    // Offset: 0x1217B54
    void remove_onStatisticsUpdatedEvent(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* value);
    // public System.String get_userId()
    // Offset: 0x1217BF8
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x1217C00
    ::Il2CppString* get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x1217C08
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x1217C18
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x1217C28
    bool get_isDisconnecting();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x1217C38
    bool get_isConnectionOwner();
    // public System.Boolean get_hasConnectionOwner()
    // Offset: 0x1217C48
    bool get_hasConnectionOwner();
    // public System.Boolean get_isRelay()
    // Offset: 0x1217D4C
    bool get_isRelay();
    // public System.Boolean get_isServer()
    // Offset: 0x1217D5C
    bool get_isServer();
    // public System.Boolean get_isClient()
    // Offset: 0x1217D6C
    bool get_isClient();
    // public System.Boolean get_isDisposed()
    // Offset: 0x1217D7C
    bool get_isDisposed();
    // public System.Int32 get_connectionCount()
    // Offset: 0x1217D8C
    int get_connectionCount();
    // public System.String get_secret()
    // Offset: 0x1217DDC
    ::Il2CppString* get_secret();
    // public System.Int32 get_port()
    // Offset: 0x1217DE4
    int get_port();
    // public PacketEncryptionLayer get_encryptionLayer()
    // Offset: 0x1217E00
    GlobalNamespace::PacketEncryptionLayer* get_encryptionLayer();
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1217F64
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x1217F80
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection);
    // public System.Void SendUnconnectedMessage(LiteNetLib.Utils.NetDataWriter writer, System.Net.IPEndPoint endPoint)
    // Offset: 0x1218038
    void SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* endPoint);
    // public System.Void SendUnconnectedMessage(System.Byte[] message, System.Int32 offset, System.Int32 length, System.Net.IPEndPoint endPoint)
    // Offset: 0x1218054
    void SendUnconnectedMessage(::Array<uint8_t>* message, int offset, int length, System::Net::IPEndPoint* endPoint);
    // public System.Void PollUpdate()
    // Offset: 0x1218070
    void PollUpdate();
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool Init(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::Init");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initParams)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___generic__method, initParams);
    }
    // public System.Void SetSecret(System.String secret)
    // Offset: 0x1218404
    void SetSecret(::Il2CppString* secret);
    // public System.Void ConnectToEndPoint(System.Net.IPEndPoint remoteEndPoint, System.String remoteUserId, System.String remoteUserName, System.Boolean remoteUserIsConnectionOwner)
    // Offset: 0x121840C
    void ConnectToEndPoint(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* remoteUserId, ::Il2CppString* remoteUserName, bool remoteUserIsConnectionOwner);
    // public System.Void Dispose()
    // Offset: 0x121862C
    void Dispose();
    // public System.Threading.Tasks.Task DisposeAsync()
    // Offset: 0x12186A8
    System::Threading::Tasks::Task* DisposeAsync();
    // private System.Void DisposeInternal()
    // Offset: 0x121865C
    void DisposeInternal();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x1218744
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x121874C
    void DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Boolean TryStartNetManager(System.Int32 port, System.Boolean enableBackgroundSentry)
    // Offset: 0x1218834
    bool TryStartNetManager(int port, bool enableBackgroundSentry);
    // private System.Void StartBackgroundSentry()
    // Offset: 0x121892C
    void StartBackgroundSentry();
    // private System.Void CheckSentryState()
    // Offset: 0x1218120
    void CheckSentryState();
    // private System.Void UpdateStatistics()
    // Offset: 0x121817C
    void UpdateStatistics();
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x1218DE8
    GlobalNamespace::IConnection* GetConnection(int index);
    // public System.Boolean IsConnectedToUser(System.String userId)
    // Offset: 0x1218E60
    bool IsConnectedToUser(::Il2CppString* userId);
    // public System.Boolean HasConnectionToEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x1218F14
    bool HasConnectionToEndPoint(System::Net::IPEndPoint* endPoint);
    // private System.Boolean HasPendingConnectionToEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x1218FD0
    bool HasPendingConnectionToEndPoint(System::Net::IPEndPoint* endPoint);
    // private System.Void LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer peer)
    // Offset: 0x121908C
    void LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketError)
    // Offset: 0x1219370
    void LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketError);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latencyMs)
    // Offset: 0x121938C
    void LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latencyMs);
    // private System.Void LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    // Offset: 0x12194FC
    void LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request);
    // private System.Void LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    // Offset: 0x121986C
    void LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1219AD0
    void LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    // Offset: 0x1219B84
    void LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType);
    // private LiteNetLibConnectionManager/NetPeerConnection GetConnection(LiteNetLib.NetPeer peer)
    // Offset: 0x1219424
    GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* GetConnection(LiteNetLib::NetPeer* peer);
    // private System.Void AcceptAllPendingRequests()
    // Offset: 0x12192AC
    void AcceptAllPendingRequests();
    // private System.Void TryAccept(LiteNetLib.ConnectionRequest request, System.String userId, System.String userName, System.Boolean isConnectionOwner)
    // Offset: 0x12196B0
    void TryAccept(LiteNetLib::ConnectionRequest* request, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner);
    // private System.Void CreatePendingConnection(LiteNetLib.NetPeer peer, System.String userId, System.String userName, System.Boolean isConnectionOwner)
    // Offset: 0x1218548
    void CreatePendingConnection(LiteNetLib::NetPeer* peer, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner);
    // private System.Void RemoveConnection(LiteNetLib.NetPeer netPeer, LiteNetLib.DisconnectReason reason)
    // Offset: 0x12198D0
    void RemoveConnection(LiteNetLib::NetPeer* netPeer, LiteNetLib::DisconnectReason reason);
    // private System.Void TryDisconnect(LiteNetLib.DisconnectReason reason)
    // Offset: 0x12197AC
    void TryDisconnect(LiteNetLib::DisconnectReason reason);
    // private DisconnectedReason ToDisconnectedReason(LiteNetLib.DisconnectReason disconnectReason)
    // Offset: 0x1219CC8
    GlobalNamespace::DisconnectedReason ToDisconnectedReason(LiteNetLib::DisconnectReason disconnectReason);
    // private ConnectionFailedReason ToConnectionFailedReason(LiteNetLib.DisconnectReason disconnectReason)
    // Offset: 0x1219D00
    GlobalNamespace::ConnectionFailedReason ToConnectionFailedReason(LiteNetLib::DisconnectReason disconnectReason);
    // private LiteNetLib.Utils.NetDataWriter GetConnectionMessage()
    // Offset: 0x1218498
    LiteNetLib::Utils::NetDataWriter* GetConnectionMessage();
    // private System.Boolean ParseConnectionMessage(LiteNetLib.Utils.NetDataReader reader, out System.String secret, out System.String userId, out System.String userName, out System.Boolean isConnectionOwner)
    // Offset: 0x1219610
    bool ParseConnectionMessage(LiteNetLib::Utils::NetDataReader* reader, ::Il2CppString*& secret, ::Il2CppString*& userId, ::Il2CppString*& userName, bool& isConnectionOwner);
    // private System.Threading.Tasks.Task BackgroundDisconnectSentry()
    // Offset: 0x1219D14
    System::Threading::Tasks::Task* BackgroundDisconnectSentry();
    // private System.Threading.Tasks.Task BackgroundShutdownSentry()
    // Offset: 0x1219E24
    System::Threading::Tasks::Task* BackgroundShutdownSentry();
    // private System.Void Log(System.String msg)
    // Offset: 0x1219F34
    void Log(::Il2CppString* msg);
    // private System.Void LogError(System.String msg)
    // Offset: 0x1219FB8
    void LogError(::Il2CppString* msg);
    // private System.Void <DisposeAsync>b__97_0()
    // Offset: 0x121A03C
    void $DisposeAsync$b__97_0();
    // public System.Void .ctor()
    // Offset: 0x1217E08
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiteNetLibConnectionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LiteNetLibConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiteNetLibConnectionManager*, creationType>()));
    }
  }; // LiteNetLibConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(LiteNetLibConnectionManager), 200 + sizeof(GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*)> __GlobalNamespace_LiteNetLibConnectionManagerSizeCheck;
  static_assert(sizeof(LiteNetLibConnectionManager) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LiteNetLibConnectionManager*, "", "LiteNetLibConnectionManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LiteNetLibConnectionManager::NetworkMode, "", "LiteNetLibConnectionManager/NetworkMode");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LiteNetLibConnectionManager::ConnectionState, "", "LiteNetLibConnectionManager/ConnectionState");
