// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: IUnconnectedConnectionManager
#include "GlobalNamespace/IUnconnectedConnectionManager.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketEncryptionLayer
  class PacketEncryptionLayer;
  // Forward declaring type: IConnectionRequestHandler
  class IConnectionRequestHandler;
  // Forward declaring type: IUnconnectedMessageReceiver
  class IUnconnectedMessageReceiver;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: DisconnectInfo
  struct DisconnectInfo;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: UnconnectedMessageType
  struct UnconnectedMessageType;
  // Forward declaring type: DisconnectReason
  struct DisconnectReason;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: BGNet::Core
namespace BGNet::Core {
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketError
  struct SocketError;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LiteNetLibConnectionManager
  class LiteNetLibConnectionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LiteNetLibConnectionManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LiteNetLibConnectionManager*, "", "LiteNetLibConnectionManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLibConnectionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LiteNetLibConnectionManager : public ::Il2CppObject/*, public ::GlobalNamespace::IConnectionManager, public ::LiteNetLib::INetEventListener, public ::GlobalNamespace::IUnconnectedConnectionManager*/ {
    public:
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode
    struct NetworkMode;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState
    struct ConnectionState;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase
    class LiteNetLibConnectionParamsBase;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::StartServerParams
    class StartServerParams;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::StartClientParams
    class StartClientParams;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest
    class NetPeerConnectionRequest;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection
    class NetPeerConnection;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated
    class StatisticsUpdated;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::$BackgroundDisconnectSentry$d__128
    struct $BackgroundDisconnectSentry$d__128;
    // Nested type: ::GlobalNamespace::LiteNetLibConnectionManager::$BackgroundShutdownSentry$d__129
    struct $BackgroundShutdownSentry$d__129;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LiteNetLibConnectionManager/NetworkMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct NetworkMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NetworkMode
      constexpr NetworkMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode None
      static constexpr const int None = 0;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode None
      static ::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_None();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode None
      static void _set_None(::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode Client
      static constexpr const int Client = 1;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode Client
      static ::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_Client();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode Client
      static void _set_Client(::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
      // static field const value: static public LiteNetLibConnectionManager/NetworkMode Server
      static constexpr const int Server = 2;
      // Get static field: static public LiteNetLibConnectionManager/NetworkMode Server
      static ::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode _get_Server();
      // Set static field: static public LiteNetLibConnectionManager/NetworkMode Server
      static void _set_Server(::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // LiteNetLibConnectionManager/NetworkMode
    #pragma pack(pop)
    static check_size<sizeof(LiteNetLibConnectionManager::NetworkMode), 0 + sizeof(int)> __GlobalNamespace_LiteNetLibConnectionManager_NetworkModeSizeCheck;
    static_assert(sizeof(LiteNetLibConnectionManager::NetworkMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LiteNetLibConnectionManager/ConnectionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConnectionState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Unconnected
      static constexpr const int Unconnected = 0;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Unconnected
      static ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Unconnected();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Unconnected
      static void _set_Unconnected(::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Connecting
      static constexpr const int Connecting = 1;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Connecting
      static ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Connecting();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Connecting
      static void _set_Connecting(::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Connected
      static constexpr const int Connected = 2;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Connected
      static ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Connected();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Connected
      static void _set_Connected(::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // static field const value: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
      static constexpr const int Disconnecting = 3;
      // Get static field: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
      static ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState _get_Disconnecting();
      // Set static field: static public LiteNetLibConnectionManager/ConnectionState Disconnecting
      static void _set_Disconnecting(::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // LiteNetLibConnectionManager/ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(LiteNetLibConnectionManager::ConnectionState), 0 + sizeof(int)> __GlobalNamespace_LiteNetLibConnectionManager_ConnectionStateSizeCheck;
    static_assert(sizeof(LiteNetLibConnectionManager::ConnectionState) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Byte[] _unconnectedPacketHeader
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> unconnectedPacketHeader;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly LiteNetLib.NetManager _netManager
    // Size: 0x8
    // Offset: 0x18
    ::LiteNetLib::NetManager* netManager;
    // Field size check
    static_assert(sizeof(::LiteNetLib::NetManager*) == 0x8);
    // private readonly PacketEncryptionLayer _encryptionLayer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PacketEncryptionLayer* encryptionLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PacketEncryptionLayer*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnection> _connections
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* connections;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnection> _pendingConnections
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>* pendingConnections;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnectionRequest> _pendingRequests
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest*>* pendingRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.Net.IPEndPoint> _pendingReconnections
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::HashSet_1<::System::Net::IPEndPoint*>* pendingReconnections;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::System::Net::IPEndPoint*>*) == 0x8);
    // private System.String _userId
    // Size: 0x8
    // Offset: 0x48
    ::StringW userId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _userName
    // Size: 0x8
    // Offset: 0x50
    ::StringW userName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private IConnectionRequestHandler _connectionRequestHandler
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::IConnectionRequestHandler* connectionRequestHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IConnectionRequestHandler*) == 0x8);
    // private IUnconnectedMessageReceiver _unconnectedMessageReceiver
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::IUnconnectedMessageReceiver* unconnectedMessageReceiver;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IUnconnectedMessageReceiver*) == 0x8);
    // private LiteNetLibConnectionManager/NetworkMode _mode
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode) == 0x4);
    // private LiteNetLibConnectionManager/ConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x6C
    ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState connectionState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState) == 0x4);
    // private System.Threading.CancellationTokenSource _backgroundSentryDisconnectCts
    // Size: 0x8
    // Offset: 0x70
    ::System::Threading::CancellationTokenSource* backgroundSentryDisconnectCts;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Threading.CancellationTokenSource _backgroundSentryShutdownCts
    // Size: 0x8
    // Offset: 0x78
    ::System::Threading::CancellationTokenSource* backgroundSentryShutdownCts;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Boolean _sentryDisconnected
    // Size: 0x1
    // Offset: 0x80
    bool sentryDisconnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _sentryShutdown
    // Size: 0x1
    // Offset: 0x81
    bool sentryShutdown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sentryShutdown and: lastPollUpdateTime
    char __padding16[0x6] = {};
    // private System.Int64 _lastPollUpdateTime
    // Size: 0x8
    // Offset: 0x88
    int64_t lastPollUpdateTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _lastStatisticsUpdateTime
    // Size: 0x8
    // Offset: 0x90
    int64_t lastStatisticsUpdateTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Action onInitializedEvent
    // Size: 0x8
    // Offset: 0x98
    ::System::Action* onInitializedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action onConnectedEvent
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action* onConnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action_1<::GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::DisconnectedReason>*) == 0x8);
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action_1<::GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::IConnection*>*) == 0x8);
    // private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    // Size: 0x8
    // Offset: 0xC0
    ::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*) == 0x8);
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    // Size: 0x8
    // Offset: 0xC8
    ::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>* onReceivedDataEvent;
    // Field size check
    static_assert(sizeof(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>*) == 0x8);
    // private System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> onReceiveUnconnectedDataEvent
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>* onReceiveUnconnectedDataEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>*) == 0x8);
    // private LiteNetLibConnectionManager/StatisticsUpdated onStatisticsUpdatedEvent
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* onStatisticsUpdatedEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IConnectionManager
    operator ::GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IConnectionManager*>(this);
    }
    // Creating interface conversion operator: operator ::LiteNetLib::INetEventListener
    operator ::LiteNetLib::INetEventListener() noexcept {
      return *reinterpret_cast<::LiteNetLib::INetEventListener*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IUnconnectedConnectionManager
    operator ::GlobalNamespace::IUnconnectedConnectionManager() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IUnconnectedConnectionManager*>(this);
    }
    // static field const value: static private System.Int64 kBackgroundDisconnectTimeout
    static constexpr const int64_t kBackgroundDisconnectTimeout = 1200000000;
    // Get static field: static private System.Int64 kBackgroundDisconnectTimeout
    static int64_t _get_kBackgroundDisconnectTimeout();
    // Set static field: static private System.Int64 kBackgroundDisconnectTimeout
    static void _set_kBackgroundDisconnectTimeout(int64_t value);
    // static field const value: static private System.Int64 kBackgroundShutdownTimeout
    static constexpr const int64_t kBackgroundShutdownTimeout = 9000000000;
    // Get static field: static private System.Int64 kBackgroundShutdownTimeout
    static int64_t _get_kBackgroundShutdownTimeout();
    // Set static field: static private System.Int64 kBackgroundShutdownTimeout
    static void _set_kBackgroundShutdownTimeout(int64_t value);
    // static field const value: static private System.Int64 kStatisticsUpdateInterval
    static constexpr const int64_t kStatisticsUpdateInterval = 300000000;
    // Get static field: static private System.Int64 kStatisticsUpdateInterval
    static int64_t _get_kStatisticsUpdateInterval();
    // Set static field: static private System.Int64 kStatisticsUpdateInterval
    static void _set_kStatisticsUpdateInterval(int64_t value);
    // Get instance field reference: private readonly System.Byte[] _unconnectedPacketHeader
    ::ArrayW<uint8_t>& dyn__unconnectedPacketHeader();
    // Get instance field reference: private readonly LiteNetLib.NetManager _netManager
    ::LiteNetLib::NetManager*& dyn__netManager();
    // Get instance field reference: private readonly PacketEncryptionLayer _encryptionLayer
    ::GlobalNamespace::PacketEncryptionLayer*& dyn__encryptionLayer();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnection> _connections
    ::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*& dyn__connections();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnection> _pendingConnections
    ::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*>*& dyn__pendingConnections();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<LiteNetLibConnectionManager/NetPeerConnectionRequest> _pendingRequests
    ::System::Collections::Generic::List_1<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnectionRequest*>*& dyn__pendingRequests();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.Net.IPEndPoint> _pendingReconnections
    ::System::Collections::Generic::HashSet_1<::System::Net::IPEndPoint*>*& dyn__pendingReconnections();
    // Get instance field reference: private System.String _userId
    ::StringW& dyn__userId();
    // Get instance field reference: private System.String _userName
    ::StringW& dyn__userName();
    // Get instance field reference: private IConnectionRequestHandler _connectionRequestHandler
    ::GlobalNamespace::IConnectionRequestHandler*& dyn__connectionRequestHandler();
    // Get instance field reference: private IUnconnectedMessageReceiver _unconnectedMessageReceiver
    ::GlobalNamespace::IUnconnectedMessageReceiver*& dyn__unconnectedMessageReceiver();
    // Get instance field reference: private LiteNetLibConnectionManager/NetworkMode _mode
    ::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode& dyn__mode();
    // Get instance field reference: private LiteNetLibConnectionManager/ConnectionState _connectionState
    ::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState& dyn__connectionState();
    // Get instance field reference: private System.Threading.CancellationTokenSource _backgroundSentryDisconnectCts
    ::System::Threading::CancellationTokenSource*& dyn__backgroundSentryDisconnectCts();
    // Get instance field reference: private System.Threading.CancellationTokenSource _backgroundSentryShutdownCts
    ::System::Threading::CancellationTokenSource*& dyn__backgroundSentryShutdownCts();
    // Get instance field reference: private System.Boolean _sentryDisconnected
    bool& dyn__sentryDisconnected();
    // Get instance field reference: private System.Boolean _sentryShutdown
    bool& dyn__sentryShutdown();
    // Get instance field reference: private System.Int64 _lastPollUpdateTime
    int64_t& dyn__lastPollUpdateTime();
    // Get instance field reference: private System.Int64 _lastStatisticsUpdateTime
    int64_t& dyn__lastStatisticsUpdateTime();
    // Get instance field reference: private System.Action onInitializedEvent
    ::System::Action*& dyn_onInitializedEvent();
    // Get instance field reference: private System.Action onConnectedEvent
    ::System::Action*& dyn_onConnectedEvent();
    // Get instance field reference: private System.Action`1<DisconnectedReason> onDisconnectedEvent
    ::System::Action_1<::GlobalNamespace::DisconnectedReason>*& dyn_onDisconnectedEvent();
    // Get instance field reference: private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*& dyn_onConnectionFailedEvent();
    // Get instance field reference: private System.Action`1<IConnection> onConnectionConnectedEvent
    ::System::Action_1<::GlobalNamespace::IConnection*>*& dyn_onConnectionConnectedEvent();
    // Get instance field reference: private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    ::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*& dyn_onConnectionDisconnectedEvent();
    // Get instance field reference: private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    ::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>*& dyn_onReceivedDataEvent();
    // Get instance field reference: private System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> onReceiveUnconnectedDataEvent
    ::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>*& dyn_onReceiveUnconnectedDataEvent();
    // Get instance field reference: private LiteNetLibConnectionManager/StatisticsUpdated onStatisticsUpdatedEvent
    ::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*& dyn_onStatisticsUpdatedEvent();
    // public System.String get_userId()
    // Offset: 0x2C49844
    ::StringW get_userId();
    // public System.String get_userName()
    // Offset: 0x2C4984C
    ::StringW get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x2C49854
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x2C49864
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x2C447D8
    bool get_isDisconnecting();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x2C43A80
    bool get_isConnectionOwner();
    // public System.Boolean get_hasConnectionOwner()
    // Offset: 0x2C49874
    bool get_hasConnectionOwner();
    // public System.Boolean get_isServer()
    // Offset: 0x2C49978
    bool get_isServer();
    // public System.Boolean get_isClient()
    // Offset: 0x2C448CC
    bool get_isClient();
    // public System.Boolean get_isDisposed()
    // Offset: 0x2C43AB4
    bool get_isDisposed();
    // public System.Int32 get_connectionCount()
    // Offset: 0x2C43A0C
    int get_connectionCount();
    // public IConnectionRequestHandler get_connectionRequestHandler()
    // Offset: 0x2C49988
    ::GlobalNamespace::IConnectionRequestHandler* get_connectionRequestHandler();
    // public System.Int32 get_port()
    // Offset: 0x2C43AEC
    int get_port();
    // public System.Byte[] get_unconnectedPacketHeader()
    // Offset: 0x2C49990
    ::ArrayW<uint8_t> get_unconnectedPacketHeader();
    // public PacketEncryptionLayer get_encryptionLayer()
    // Offset: 0x2C49998
    ::GlobalNamespace::PacketEncryptionLayer* get_encryptionLayer();
    // public System.Void add_onInitializedEvent(System.Action value)
    // Offset: 0x2C49094
    void add_onInitializedEvent(::System::Action* value);
    // public System.Void remove_onInitializedEvent(System.Action value)
    // Offset: 0x2C49138
    void remove_onInitializedEvent(::System::Action* value);
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x2C441F0
    void add_onConnectedEvent(::System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x2C491DC
    void remove_onConnectedEvent(::System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x2C44294
    void add_onDisconnectedEvent(::System::Action_1<::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x2C49280
    void remove_onDisconnectedEvent(::System::Action_1<::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x2C44480
    void add_onConnectionFailedEvent(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x2C49324
    void remove_onConnectionFailedEvent(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x2C44338
    void add_onConnectionConnectedEvent(::System::Action_1<::GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x2C493C8
    void remove_onConnectionConnectedEvent(::System::Action_1<::GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x2C443DC
    void add_onConnectionDisconnectedEvent(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x2C4946C
    void remove_onConnectionDisconnectedEvent(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x2C44524
    void add_onReceivedDataEvent(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x2C49510
    void remove_onReceivedDataEvent(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>* value);
    // public System.Void add_onReceiveUnconnectedDataEvent(System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> value)
    // Offset: 0x2C495B4
    void add_onReceiveUnconnectedDataEvent(::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>* value);
    // public System.Void remove_onReceiveUnconnectedDataEvent(System.Action`2<System.Net.IPEndPoint,LiteNetLib.Utils.NetDataReader> value)
    // Offset: 0x2C49658
    void remove_onReceiveUnconnectedDataEvent(::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>* value);
    // public System.Void add_onStatisticsUpdatedEvent(LiteNetLibConnectionManager/StatisticsUpdated value)
    // Offset: 0x2C496FC
    void add_onStatisticsUpdatedEvent(::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* value);
    // public System.Void remove_onStatisticsUpdatedEvent(LiteNetLibConnectionManager/StatisticsUpdated value)
    // Offset: 0x2C497A0
    void remove_onStatisticsUpdatedEvent(::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated* value);
    // public System.Void .ctor(BGNet.Core.ITimeProvider timeProvider)
    // Offset: 0x2C4404C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiteNetLibConnectionManager* New_ctor(::BGNet::Core::ITimeProvider* timeProvider) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LiteNetLibConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiteNetLibConnectionManager*, creationType>(timeProvider)));
    }
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x2C43B84
    void SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, ::LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x2C43BB8
    void SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, ::LiteNetLib::DeliveryMethod deliveryMethod, ::GlobalNamespace::IConnection* excludingConnection);
    // public System.Void SendUnconnectedMessage(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x2C49A04
    void SendUnconnectedMessage(::System::Net::IPEndPoint* remoteEndPoint, ::LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void RegisterReceiver(IUnconnectedMessageReceiver receiver)
    // Offset: 0x2C49A2C
    void RegisterReceiver(::GlobalNamespace::IUnconnectedMessageReceiver* receiver);
    // public System.Void UnregisterReceiver(IUnconnectedMessageReceiver receiver)
    // Offset: 0x2C49A34
    void UnregisterReceiver(::GlobalNamespace::IUnconnectedMessageReceiver* receiver);
    // public System.Void PollUpdate()
    // Offset: 0x2C43C88
    void PollUpdate();
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool Init(::GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::GlobalNamespace::IConnectionManager>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LiteNetLibConnectionManager::Init");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initParams)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, initParams);
    }
    // public System.Void SetPlayerIdentity(System.String userId, System.String userName)
    // Offset: 0x2C44E90
    void SetPlayerIdentity(::StringW userId, ::StringW userName);
    // public System.Void ConnectToEndPoint(System.Net.IPEndPoint remoteEndPoint, System.String remoteUserId, System.String remoteUserName, System.Boolean remoteUserIsConnectionOwner)
    // Offset: 0x2C44F28
    void ConnectToEndPoint(::System::Net::IPEndPoint* remoteEndPoint, ::StringW remoteUserId, ::StringW remoteUserName, bool remoteUserIsConnectionOwner);
    // public System.Void Dispose()
    // Offset: 0x2C445E0
    void Dispose();
    // public System.Threading.Tasks.Task DisposeAsync()
    // Offset: 0x2C49F60
    ::System::Threading::Tasks::Task* DisposeAsync();
    // private System.Void DisposeInternal()
    // Offset: 0x2C49F14
    void DisposeInternal();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x2C447E8
    void Disconnect(::GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x2C49FFC
    void DisconnectInternal(::GlobalNamespace::DisconnectedReason disconnectedReason, ::GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Boolean TryStartNetManager(System.Int32 port, System.Boolean enableBackgroundSentry)
    // Offset: 0x2C4A0E4
    bool TryStartNetManager(int port, bool enableBackgroundSentry);
    // private System.Void StartBackgroundSentry()
    // Offset: 0x2C4A188
    void StartBackgroundSentry();
    // private System.Void CheckSentryState()
    // Offset: 0x2C49A4C
    void CheckSentryState();
    // private System.Void UpdateStatistics()
    // Offset: 0x2C49AA8
    void UpdateStatistics();
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x2C44808
    ::GlobalNamespace::IConnection* GetConnection(int index);
    // public System.Boolean IsConnectedToUser(System.String userId)
    // Offset: 0x2C4A644
    bool IsConnectedToUser(::StringW userId);
    // public System.Boolean HasConnectionToEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x2C4A6F8
    bool HasConnectionToEndPoint(::System::Net::IPEndPoint* endPoint);
    // private System.Boolean HasPendingConnectionToEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x2C4A7B4
    bool HasPendingConnectionToEndPoint(::System::Net::IPEndPoint* endPoint);
    // private System.Void LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer peer)
    // Offset: 0x2C4A870
    void LiteNetLib_INetEventListener_OnPeerConnected(::LiteNetLib::NetPeer* peer);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketError)
    // Offset: 0x2C4AA70
    void LiteNetLib_INetEventListener_OnNetworkError(::System::Net::IPEndPoint* endPoint, ::System::Net::Sockets::SocketError socketError);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latencyMs)
    // Offset: 0x2C4AA8C
    void LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(::LiteNetLib::NetPeer* peer, int latencyMs);
    // private System.Void LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    // Offset: 0x2C4AA90
    void LiteNetLib_INetEventListener_OnConnectionRequest(::LiteNetLib::ConnectionRequest* request);
    // private System.Void LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    // Offset: 0x2C4ACF8
    void LiteNetLib_INetEventListener_OnPeerDisconnected(::LiteNetLib::NetPeer* peer, ::LiteNetLib::DisconnectInfo disconnectInfo);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x2C4AF5C
    void LiteNetLib_INetEventListener_OnNetworkReceive(::LiteNetLib::NetPeer* peer, ::LiteNetLib::NetPacketReader* reader, ::LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    // Offset: 0x2C4B0E8
    void LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(::System::Net::IPEndPoint* remoteEndPoint, ::LiteNetLib::NetPacketReader* reader, ::LiteNetLib::UnconnectedMessageType messageType);
    // private LiteNetLibConnectionManager/NetPeerConnection GetConnection(LiteNetLib.NetPeer peer)
    // Offset: 0x2C4B010
    ::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* GetConnection(::LiteNetLib::NetPeer* peer);
    // private System.Void AcceptAllPendingRequests()
    // Offset: 0x2C4B1E0
    void AcceptAllPendingRequests();
    // private System.Void TryAccept(LiteNetLib.ConnectionRequest request, System.String userId, System.String userName, System.Boolean isConnectionOwner)
    // Offset: 0x2C4ABE0
    void TryAccept(::LiteNetLib::ConnectionRequest* request, ::StringW userId, ::StringW userName, bool isConnectionOwner);
    // private System.Void CreatePendingConnection(LiteNetLib.NetPeer peer, System.String userId, System.String userName, System.Boolean isConnectionOwner)
    // Offset: 0x2C49E30
    void CreatePendingConnection(::LiteNetLib::NetPeer* peer, ::StringW userId, ::StringW userName, bool isConnectionOwner);
    // private System.Void RemoveConnection(LiteNetLib.NetPeer netPeer, LiteNetLib.DisconnectReason reason)
    // Offset: 0x2C4AD5C
    void RemoveConnection(::LiteNetLib::NetPeer* netPeer, ::LiteNetLib::DisconnectReason reason);
    // private System.Void TryDisconnect(LiteNetLib.DisconnectReason reason)
    // Offset: 0x2C4AC38
    void TryDisconnect(::LiteNetLib::DisconnectReason reason);
    // private DisconnectedReason ToDisconnectedReason(LiteNetLib.DisconnectReason disconnectReason)
    // Offset: 0x2C4B314
    ::GlobalNamespace::DisconnectedReason ToDisconnectedReason(::LiteNetLib::DisconnectReason disconnectReason);
    // private ConnectionFailedReason ToConnectionFailedReason(LiteNetLib.DisconnectReason disconnectReason)
    // Offset: 0x2C4B34C
    ::GlobalNamespace::ConnectionFailedReason ToConnectionFailedReason(::LiteNetLib::DisconnectReason disconnectReason);
    // private LiteNetLib.Utils.NetDataWriter GetConnectionMessage()
    // Offset: 0x2C49D30
    ::LiteNetLib::Utils::NetDataWriter* GetConnectionMessage();
    // private System.Threading.Tasks.Task BackgroundDisconnectSentry()
    // Offset: 0x2C4B360
    ::System::Threading::Tasks::Task* BackgroundDisconnectSentry();
    // private System.Threading.Tasks.Task BackgroundShutdownSentry()
    // Offset: 0x2C4B470
    ::System::Threading::Tasks::Task* BackgroundShutdownSentry();
    // private System.Void Log(System.String msg)
    // Offset: 0x2C4B580
    void Log(::StringW msg);
    // private System.Void LogError(System.String msg)
    // Offset: 0x2C4B608
    void LogError(::StringW msg);
    // static private System.String GetLogFormatConnection(LiteNetLibConnectionManager/NetPeerConnection netPeerConnection)
    // Offset: 0x2C4B690
    static ::StringW GetLogFormatConnection(::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* netPeerConnection);
    // static private System.String GetLogFormatUserInfo(System.String userName, System.String userId, System.Net.IPEndPoint ipEndPoint)
    // Offset: 0x2C4B6B8
    static ::StringW GetLogFormatUserInfo(::StringW userName, ::StringW userId, ::System::Net::IPEndPoint* ipEndPoint);
    // private System.Void <DisposeAsync>b__100_0()
    // Offset: 0x2C4B71C
    void $DisposeAsync$b__100_0();
    // public System.Void .ctor()
    // Offset: 0x2C499A0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiteNetLibConnectionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LiteNetLibConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiteNetLibConnectionManager*, creationType>()));
    }
  }; // LiteNetLibConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(LiteNetLibConnectionManager), 216 + sizeof(::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*)> __GlobalNamespace_LiteNetLibConnectionManagerSizeCheck;
  static_assert(sizeof(LiteNetLibConnectionManager) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LiteNetLibConnectionManager::ConnectionState, "", "LiteNetLibConnectionManager/ConnectionState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LiteNetLibConnectionManager::NetworkMode, "", "LiteNetLibConnectionManager/NetworkMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isDisconnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isConnectionOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_hasConnectionOwner
// Il2CppName: get_hasConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_hasConnectionOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_hasConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isServer
// Il2CppName: get_isServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isClient
// Il2CppName: get_isClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_isDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_connectionCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_connectionRequestHandler
// Il2CppName: get_connectionRequestHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IConnectionRequestHandler* (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_connectionRequestHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_connectionRequestHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_unconnectedPacketHeader
// Il2CppName: get_unconnectedPacketHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_unconnectedPacketHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_unconnectedPacketHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::get_encryptionLayer
// Il2CppName: get_encryptionLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PacketEncryptionLayer* (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::get_encryptionLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "get_encryptionLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onInitializedEvent
// Il2CppName: add_onInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onInitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onInitializedEvent
// Il2CppName: remove_onInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onInitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_1<::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_1<::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_1<::GlobalNamespace::IConnection*>*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_1<::GlobalNamespace::IConnection*>*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onConnectionDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onConnectionDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onReceivedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader"), ::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::LiteNetLib::DeliveryMethod>*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onReceivedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader"), ::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent
// Il2CppName: add_onReceiveUnconnectedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onReceiveUnconnectedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent
// Il2CppName: remove_onReceiveUnconnectedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Action_2<::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataReader*>*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onReceiveUnconnectedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onReceiveUnconnectedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::add_onStatisticsUpdatedEvent
// Il2CppName: add_onStatisticsUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*)>(&GlobalNamespace::LiteNetLibConnectionManager::add_onStatisticsUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LiteNetLibConnectionManager/StatisticsUpdated")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "add_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::remove_onStatisticsUpdatedEvent
// Il2CppName: remove_onStatisticsUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::GlobalNamespace::LiteNetLibConnectionManager::StatisticsUpdated*)>(&GlobalNamespace::LiteNetLibConnectionManager::remove_onStatisticsUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LiteNetLibConnectionManager/StatisticsUpdated")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "remove_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::Utils::NetDataWriter*, ::LiteNetLib::DeliveryMethod)>(&GlobalNamespace::LiteNetLibConnectionManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::Utils::NetDataWriter*, ::LiteNetLib::DeliveryMethod, ::GlobalNamespace::IConnection*)>(&GlobalNamespace::LiteNetLibConnectionManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludingConnection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, deliveryMethod, excludingConnection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::SendUnconnectedMessage
// Il2CppName: SendUnconnectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Net::IPEndPoint*, ::LiteNetLib::Utils::NetDataWriter*)>(&GlobalNamespace::LiteNetLibConnectionManager::SendUnconnectedMessage)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "SendUnconnectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, writer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::RegisterReceiver
// Il2CppName: RegisterReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::GlobalNamespace::IUnconnectedMessageReceiver*)>(&GlobalNamespace::LiteNetLibConnectionManager::RegisterReceiver)> {
  static const MethodInfo* get() {
    static auto* receiver = &::il2cpp_utils::GetClassFromName("", "IUnconnectedMessageReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "RegisterReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receiver});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::UnregisterReceiver
// Il2CppName: UnregisterReceiver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::GlobalNamespace::IUnconnectedMessageReceiver*)>(&GlobalNamespace::LiteNetLibConnectionManager::UnregisterReceiver)> {
  static const MethodInfo* get() {
    static auto* receiver = &::il2cpp_utils::GetClassFromName("", "IUnconnectedMessageReceiver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "UnregisterReceiver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receiver});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::SetPlayerIdentity
// Il2CppName: SetPlayerIdentity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::StringW, ::StringW)>(&GlobalNamespace::LiteNetLibConnectionManager::SetPlayerIdentity)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "SetPlayerIdentity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, userName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::ConnectToEndPoint
// Il2CppName: ConnectToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Net::IPEndPoint*, ::StringW, ::StringW, bool)>(&GlobalNamespace::LiteNetLibConnectionManager::ConnectToEndPoint)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* remoteUserId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteUserName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteUserIsConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "ConnectToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, remoteUserId, remoteUserName, remoteUserIsConnectionOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::DisposeAsync
// Il2CppName: DisposeAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::DisposeAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "DisposeAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::DisposeInternal
// Il2CppName: DisposeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::DisposeInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "DisposeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::LiteNetLibConnectionManager::Disconnect)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::GlobalNamespace::DisconnectedReason, ::GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::LiteNetLibConnectionManager::DisconnectInternal)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    static auto* connectionFailedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason, connectionFailedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::TryStartNetManager
// Il2CppName: TryStartNetManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)(int, bool)>(&GlobalNamespace::LiteNetLibConnectionManager::TryStartNetManager)> {
  static const MethodInfo* get() {
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enableBackgroundSentry = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "TryStartNetManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{port, enableBackgroundSentry});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::StartBackgroundSentry
// Il2CppName: StartBackgroundSentry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::StartBackgroundSentry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "StartBackgroundSentry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::CheckSentryState
// Il2CppName: CheckSentryState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::CheckSentryState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "CheckSentryState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::UpdateStatistics
// Il2CppName: UpdateStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::UpdateStatistics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "UpdateStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IConnection* (GlobalNamespace::LiteNetLibConnectionManager::*)(int)>(&GlobalNamespace::LiteNetLibConnectionManager::GetConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::IsConnectedToUser
// Il2CppName: IsConnectedToUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)(::StringW)>(&GlobalNamespace::LiteNetLibConnectionManager::IsConnectedToUser)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "IsConnectedToUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::HasConnectionToEndPoint
// Il2CppName: HasConnectionToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Net::IPEndPoint*)>(&GlobalNamespace::LiteNetLibConnectionManager::HasConnectionToEndPoint)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "HasConnectionToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::HasPendingConnectionToEndPoint
// Il2CppName: HasPendingConnectionToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Net::IPEndPoint*)>(&GlobalNamespace::LiteNetLibConnectionManager::HasPendingConnectionToEndPoint)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "HasPendingConnectionToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerConnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerConnected)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkError
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Net::IPEndPoint*, ::System::Net::Sockets::SocketError)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkError)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* socketError = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, socketError});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*, int)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* latencyMs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, latencyMs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnConnectionRequest
// Il2CppName: LiteNetLib.INetEventListener.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::ConnectionRequest*)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerDisconnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*, ::LiteNetLib::DisconnectInfo)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnPeerDisconnected)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* disconnectInfo = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, disconnectInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceive
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*, ::LiteNetLib::NetPacketReader*, ::LiteNetLib::DeliveryMethod)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceive)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacketReader")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, reader, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::System::Net::IPEndPoint*, ::LiteNetLib::NetPacketReader*, ::LiteNetLib::UnconnectedMessageType)>(&GlobalNamespace::LiteNetLibConnectionManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacketReader")->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("LiteNetLib", "UnconnectedMessageType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, reader, messageType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection* (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*)>(&GlobalNamespace::LiteNetLibConnectionManager::GetConnection)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::AcceptAllPendingRequests
// Il2CppName: AcceptAllPendingRequests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::AcceptAllPendingRequests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "AcceptAllPendingRequests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::TryAccept
// Il2CppName: TryAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::ConnectionRequest*, ::StringW, ::StringW, bool)>(&GlobalNamespace::LiteNetLibConnectionManager::TryAccept)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionRequest")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "TryAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, userId, userName, isConnectionOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::CreatePendingConnection
// Il2CppName: CreatePendingConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*, ::StringW, ::StringW, bool)>(&GlobalNamespace::LiteNetLibConnectionManager::CreatePendingConnection)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "CreatePendingConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, userId, userName, isConnectionOwner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::RemoveConnection
// Il2CppName: RemoveConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::NetPeer*, ::LiteNetLib::DisconnectReason)>(&GlobalNamespace::LiteNetLibConnectionManager::RemoveConnection)> {
  static const MethodInfo* get() {
    static auto* netPeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "RemoveConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netPeer, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::TryDisconnect
// Il2CppName: TryDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::DisconnectReason)>(&GlobalNamespace::LiteNetLibConnectionManager::TryDisconnect)> {
  static const MethodInfo* get() {
    static auto* reason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "TryDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::ToDisconnectedReason
// Il2CppName: ToDisconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DisconnectedReason (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::DisconnectReason)>(&GlobalNamespace::LiteNetLibConnectionManager::ToDisconnectedReason)> {
  static const MethodInfo* get() {
    static auto* disconnectReason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "ToDisconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::ToConnectionFailedReason
// Il2CppName: ToConnectionFailedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ConnectionFailedReason (GlobalNamespace::LiteNetLibConnectionManager::*)(::LiteNetLib::DisconnectReason)>(&GlobalNamespace::LiteNetLibConnectionManager::ToConnectionFailedReason)> {
  static const MethodInfo* get() {
    static auto* disconnectReason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "ToConnectionFailedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::GetConnectionMessage
// Il2CppName: GetConnectionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LiteNetLib::Utils::NetDataWriter* (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::GetConnectionMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "GetConnectionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::BackgroundDisconnectSentry
// Il2CppName: BackgroundDisconnectSentry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::BackgroundDisconnectSentry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "BackgroundDisconnectSentry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::BackgroundShutdownSentry
// Il2CppName: BackgroundShutdownSentry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::BackgroundShutdownSentry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "BackgroundShutdownSentry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::StringW)>(&GlobalNamespace::LiteNetLibConnectionManager::Log)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)(::StringW)>(&GlobalNamespace::LiteNetLibConnectionManager::LogError)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::GetLogFormatConnection
// Il2CppName: GetLogFormatConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::GlobalNamespace::LiteNetLibConnectionManager::NetPeerConnection*)>(&GlobalNamespace::LiteNetLibConnectionManager::GetLogFormatConnection)> {
  static const MethodInfo* get() {
    static auto* netPeerConnection = &::il2cpp_utils::GetClassFromName("", "LiteNetLibConnectionManager/NetPeerConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "GetLogFormatConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netPeerConnection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::GetLogFormatUserInfo
// Il2CppName: GetLogFormatUserInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW, ::System::Net::IPEndPoint*)>(&GlobalNamespace::LiteNetLibConnectionManager::GetLogFormatUserInfo)> {
  static const MethodInfo* get() {
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ipEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "GetLogFormatUserInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userName, userId, ipEndPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::$DisposeAsync$b__100_0
// Il2CppName: <DisposeAsync>b__100_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LiteNetLibConnectionManager::*)()>(&GlobalNamespace::LiteNetLibConnectionManager::$DisposeAsync$b__100_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LiteNetLibConnectionManager*), "<DisposeAsync>b__100_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LiteNetLibConnectionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
