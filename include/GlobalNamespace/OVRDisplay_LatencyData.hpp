// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRDisplay
#include "GlobalNamespace/OVRDisplay.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRDisplay/LatencyData
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRDisplay::LatencyData/*, public System::ValueType*/ {
    public:
    // public System.Single render
    // Size: 0x4
    // Offset: 0x0
    float render;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeWarp
    // Size: 0x4
    // Offset: 0x4
    float timeWarp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single postPresent
    // Size: 0x4
    // Offset: 0x8
    float postPresent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single renderError
    // Size: 0x4
    // Offset: 0xC
    float renderError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeWarpError
    // Size: 0x4
    // Offset: 0x10
    float timeWarpError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: LatencyData
    constexpr LatencyData(float render_ = {}, float timeWarp_ = {}, float postPresent_ = {}, float renderError_ = {}, float timeWarpError_ = {}) noexcept : render{render_}, timeWarp{timeWarp_}, postPresent{postPresent_}, renderError{renderError_}, timeWarpError{timeWarpError_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public System.Single render
    float _get_render();
    // Set instance field: public System.Single render
    void _set_render(float value);
    // Get instance field: public System.Single timeWarp
    float _get_timeWarp();
    // Set instance field: public System.Single timeWarp
    void _set_timeWarp(float value);
    // Get instance field: public System.Single postPresent
    float _get_postPresent();
    // Set instance field: public System.Single postPresent
    void _set_postPresent(float value);
    // Get instance field: public System.Single renderError
    float _get_renderError();
    // Set instance field: public System.Single renderError
    void _set_renderError(float value);
    // Get instance field: public System.Single timeWarpError
    float _get_timeWarpError();
    // Set instance field: public System.Single timeWarpError
    void _set_timeWarpError(float value);
  }; // OVRDisplay/LatencyData
  #pragma pack(pop)
  static check_size<sizeof(OVRDisplay::LatencyData), 16 + sizeof(float)> __GlobalNamespace_OVRDisplay_LatencyDataSizeCheck;
  static_assert(sizeof(OVRDisplay::LatencyData) == 0x14);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay::LatencyData, "", "OVRDisplay/LatencyData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
