// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TrailElement
  class TrailElement;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: TrailElementCollection
  // [DefaultMemberAttribute] Offset: E10FA0
  class TrailElementCollection : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xE1ABEC
    // private readonly System.Int32 <capacity>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: capacity and: snapshots
    char __padding0[0x4] = {};
    // private readonly TrailElement[] _snapshots
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::TrailElement*>* snapshots;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TrailElement*>*) == 0x8);
    // private System.Int32 _headIndex
    // Size: 0x4
    // Offset: 0x20
    int headIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: TrailElementCollection
    TrailElementCollection(int capacity_ = {}, ::Array<GlobalNamespace::TrailElement*>* snapshots_ = {}, int headIndex_ = {}) noexcept : capacity{capacity_}, snapshots{snapshots_}, headIndex{headIndex_} {}
    // public System.Int32 get_capacity()
    // Offset: 0x111A25C
    int get_capacity();
    // public TrailElement get_head()
    // Offset: 0x111A264
    GlobalNamespace::TrailElement* get_head();
    // public TrailElement get_Item(System.Int32 index)
    // Offset: 0x111A2A4
    GlobalNamespace::TrailElement* get_Item(int index);
    // public System.Void .ctor(System.Int32 capacity, UnityEngine.Vector3 defaultStartPosition, UnityEngine.Vector3 defaultEndPosition, System.Single time)
    // Offset: 0x111A308
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrailElementCollection* New_ctor(int capacity, UnityEngine::Vector3 defaultStartPosition, UnityEngine::Vector3 defaultEndPosition, float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrailElementCollection*, creationType>(capacity, defaultStartPosition, defaultEndPosition, time)));
    }
    // public System.Void InitSnapshots(UnityEngine.Vector3 defaultStartPosition, UnityEngine.Vector3 defaultEndPosition, System.Single time)
    // Offset: 0x111A4A4
    void InitSnapshots(UnityEngine::Vector3 defaultStartPosition, UnityEngine::Vector3 defaultEndPosition, float time);
    // public System.Void MoveTailToHead()
    // Offset: 0x111A56C
    void MoveTailToHead();
    // public System.Void UpdateDistances()
    // Offset: 0x111A58C
    void UpdateDistances();
    // public UnityEngine.Vector3 InterpolateByLen(System.Single tl)
    // Offset: 0x111A6EC
    UnityEngine::Vector3 InterpolateByLen(float tl);
    // public UnityEngine.Vector3 InterpolateNormalByLen(System.Single tl)
    // Offset: 0x111AA04
    UnityEngine::Vector3 InterpolateNormalByLen(float tl);
    // public System.Single InterpolateTimeByLen(System.Single tl)
    // Offset: 0x111AB4C
    float InterpolateTimeByLen(float tl);
    // private System.Int32 LenToSegment(System.Single t, out System.Single localF)
    // Offset: 0x111A834
    int LenToSegment(float t, float& localF);
    // private TrailElement GetElementWithinBoundary(System.Int32 index)
    // Offset: 0x111A978
    GlobalNamespace::TrailElement* GetElementWithinBoundary(int index);
  }; // TrailElementCollection
  #pragma pack(pop)
  static check_size<sizeof(TrailElementCollection), 32 + sizeof(int)> __GlobalNamespace_TrailElementCollectionSizeCheck;
  static_assert(sizeof(TrailElementCollection) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TrailElementCollection*, "", "TrailElementCollection");
// Writing MetadataGetter for method: TrailElementCollection::get_capacity
// Il2CppName: get_capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrailElementCollection::*)()>(&TrailElementCollection::get_capacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "get_capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::get_head
// Il2CppName: get_head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrailElement* (TrailElementCollection::*)()>(&TrailElementCollection::get_head)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "get_head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrailElement* (TrailElementCollection::*)(int)>(&TrailElementCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)(int, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElementCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)(int, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElementCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InitSnapshots
// Il2CppName: InitSnapshots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElementCollection::InitSnapshots)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InitSnapshots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::MoveTailToHead
// Il2CppName: MoveTailToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)()>(&TrailElementCollection::MoveTailToHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "MoveTailToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::UpdateDistances
// Il2CppName: UpdateDistances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)()>(&TrailElementCollection::UpdateDistances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "UpdateDistances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InterpolateByLen
// Il2CppName: InterpolateByLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TrailElementCollection::*)(float)>(&TrailElementCollection::InterpolateByLen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InterpolateByLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InterpolateNormalByLen
// Il2CppName: InterpolateNormalByLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TrailElementCollection::*)(float)>(&TrailElementCollection::InterpolateNormalByLen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InterpolateNormalByLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InterpolateTimeByLen
// Il2CppName: InterpolateTimeByLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrailElementCollection::*)(float)>(&TrailElementCollection::InterpolateTimeByLen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InterpolateTimeByLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::LenToSegment
// Il2CppName: LenToSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrailElementCollection::*)(float, float&)>(&TrailElementCollection::LenToSegment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "LenToSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::GetElementWithinBoundary
// Il2CppName: GetElementWithinBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrailElement* (TrailElementCollection::*)(int)>(&TrailElementCollection::GetElementWithinBoundary)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "GetElementWithinBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
