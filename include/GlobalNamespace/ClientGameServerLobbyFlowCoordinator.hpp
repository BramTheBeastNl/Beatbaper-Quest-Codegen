// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameServerLobbyFlowCoordinator
#include "GlobalNamespace/GameServerLobbyFlowCoordinator.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ClientLobbySetupViewController
  class ClientLobbySetupViewController;
  // Forward declaring type: IUnifiedNetworkPlayerModel
  class IUnifiedNetworkPlayerModel;
  // Forward declaring type: MultiplayerGameState
  struct MultiplayerGameState;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: ClientGameServerLobbyFlowCoordinator
  class ClientGameServerLobbyFlowCoordinator : public GlobalNamespace::GameServerLobbyFlowCoordinator {
    public:
    // Nested type: GlobalNamespace::ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    // private readonly ClientLobbySetupViewController _clientLobbySetupViewController
    // Offset: 0x158
    GlobalNamespace::ClientLobbySetupViewController* clientLobbySetupViewController;
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Offset: 0x160
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // private System.Action`1<ClientGameServerLobbyFlowCoordinator> didFinishedEvent
    // Offset: 0x168
    System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* didFinishedEvent;
    // public System.Void add_didFinishedEvent(System.Action`1<ClientGameServerLobbyFlowCoordinator> value)
    // Offset: 0xF1F754
    void add_didFinishedEvent(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* value);
    // public System.Void remove_didFinishedEvent(System.Action`1<ClientGameServerLobbyFlowCoordinator> value)
    // Offset: 0xF1F7FC
    void remove_didFinishedEvent(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* value);
    // private System.Void HandleLobbyPlayersDataModelDidChange(System.String userId)
    // Offset: 0xF22350
    void HandleLobbyPlayersDataModelDidChange(::Il2CppString* userId);
    // private System.Void SetServerLevelGameplaySetupDataToViews(System.String userId)
    // Offset: 0xF2068C
    void SetServerLevelGameplaySetupDataToViews(::Il2CppString* userId);
    // private System.Void SetLocalPlayerDataModelToViews(System.String userId)
    // Offset: 0xF20874
    void SetLocalPlayerDataModelToViews(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetMultiplayerGameState(System.String userId, MultiplayerGameState gameState)
    // Offset: 0xF2284C
    void HandleMenuRpcManagerSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState);
    // private System.Void HandleClientLobbySetupViewControllerClientSetReady(System.Boolean isReady)
    // Offset: 0xF22A5C
    void HandleClientLobbySetupViewControllerClientSetReady(bool isReady);
    // private System.Void HandleClientLobbySetupViewControllerPlayerActiveStateChanged(System.Boolean isActive)
    // Offset: 0xF22B20
    void HandleClientLobbySetupViewControllerPlayerActiveStateChanged(bool isActive);
    // private System.Void HandleServerPlayerListControllerSelectSuggestedLevel(System.String levelId, BeatmapCharacteristicSO beatmapCharacteristic, BeatmapDifficulty beatmapDifficulty)
    // Offset: 0xF22D50
    void HandleServerPlayerListControllerSelectSuggestedLevel(::Il2CppString* levelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // private System.Void HandleServerPlayerListControllerSelectSuggestedGameplayModifiers(GameplayModifiers modifiers)
    // Offset: 0xF22E2C
    void HandleServerPlayerListControllerSelectSuggestedGameplayModifiers(GlobalNamespace::GameplayModifiers* modifiers);
    // private System.Void HandleClientLobbySetupViewControllerClearSelectedBeatmap()
    // Offset: 0xF22EF0
    void HandleClientLobbySetupViewControllerClearSelectedBeatmap();
    // private System.Void HandleClientLobbySetupViewControllerClearSelectedModifiers()
    // Offset: 0xF22FA4
    void HandleClientLobbySetupViewControllerClearSelectedModifiers();
    // private System.Void HandleLobbyGameStateControllerStartTimeChanged()
    // Offset: 0xF23058
    void HandleLobbyGameStateControllerStartTimeChanged();
    // private System.Void HandleLobbyGameStateControllerGameStartCancelled()
    // Offset: 0xF2311C
    void HandleLobbyGameStateControllerGameStartCancelled();
    // private System.Void HandleLobbyGameStateControllerGameStarted()
    // Offset: 0xF23168
    void HandleLobbyGameStateControllerGameStarted();
    // private System.Void HandleLobbyGameStateControllerSongStillDownloading()
    // Offset: 0xF23254
    void HandleLobbyGameStateControllerSongStillDownloading();
    // private System.Void HandleLobbyGameBeforeSceneSwitchCallback()
    // Offset: 0xF23258
    void HandleLobbyGameBeforeSceneSwitchCallback();
    // private System.Void DismissViewControllersAndCoordinators()
    // Offset: 0xF22240
    void DismissViewControllersAndCoordinators();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF1F8A4
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0xF20A44
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0xF215E8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xF21734
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected override System.Void InitialViewControllerWasPresented()
    // Offset: 0xF218B4
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::InitialViewControllerWasPresented()
    void InitialViewControllerWasPresented();
    // protected override System.Void TransitionDidFinish()
    // Offset: 0xF21AC4
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::TransitionDidFinish()
    void TransitionDidFinish();
    // protected override System.Void HandleLobbySetupViewControllerSelectBeatmap()
    // Offset: 0xF21DDC
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap()
    void HandleLobbySetupViewControllerSelectBeatmap();
    // protected override System.Void HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, LevelCompletionResults myCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> othersCompletionResults)
    // Offset: 0xF21F9C
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, LevelCompletionResults myCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> othersCompletionResults)
    void HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* myCompletionResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* othersCompletionResults);
    // protected override System.Void Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    // Offset: 0xF22088
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    void Finish(System::Action* finishedCallback, bool withFadeOut);
    // public System.Void .ctor()
    // Offset: 0xF23280
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::.ctor()
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static ClientGameServerLobbyFlowCoordinator* New_ctor();
  }; // ClientGameServerLobbyFlowCoordinator
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ClientGameServerLobbyFlowCoordinator*, "", "ClientGameServerLobbyFlowCoordinator");
#pragma pack(pop)
