// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerSpectatingSpotManager
  class MultiplayerSpectatingSpotManager;
  // Forward declaring type: MultiplayerLocalInactivePlayerSongSyncController
  class MultiplayerLocalInactivePlayerSongSyncController;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: IMultiplayerSpectatingSpot
  class IMultiplayerSpectatingSpot;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerSpectatorController
  class MultiplayerSpectatorController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17
    class $SwitchToDefaultSpotWithFadeCoroutine$d__17;
    // Nested type: GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18
    class $SwitchToDefaultSpotCoroutine$d__18;
    // [InjectAttribute] Offset: 0xE1EFC8
    // private readonly MultiplayerSpectatingSpotManager _spotManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MultiplayerSpectatingSpotManager* spotManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerSpectatingSpotManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE1EFD8
    // private readonly MultiplayerLocalInactivePlayerSongSyncController _songController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController* songController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xE1EFE8
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerController*) == 0x8);
    // [InjectAttribute] Offset: 0xE1EFF8
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1F008
    // private System.Action`1<IMultiplayerSpectatingSpot> spectatingSpotDidChangeEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* spectatingSpotDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private IMultiplayerSpectatingSpot _currentSpot
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::IMultiplayerSpectatingSpot* currentSpot;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSpectatingSpot*) == 0x8);
    // Creating value type constructor for type: MultiplayerSpectatorController
    MultiplayerSpectatorController(GlobalNamespace::MultiplayerSpectatingSpotManager* spotManager_ = {}, GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController* songController_ = {}, GlobalNamespace::MultiplayerController* multiplayerController_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* spectatingSpotDidChangeEvent_ = {}, UnityEngine::Transform* transform_ = {}, GlobalNamespace::IMultiplayerSpectatingSpot* currentSpot_ = {}) noexcept : spotManager{spotManager_}, songController{songController_}, multiplayerController{multiplayerController_}, fadeInOutController{fadeInOutController_}, spectatingSpotDidChangeEvent{spectatingSpotDidChangeEvent_}, transform{transform_}, currentSpot{currentSpot_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_spectatingSpotDidChangeEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0x1013040
    void add_spectatingSpotDidChangeEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void remove_spectatingSpotDidChangeEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0x101326C
    void remove_spectatingSpotDidChangeEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public IMultiplayerSpectatingSpot get_currentSpot()
    // Offset: 0x10133E4
    GlobalNamespace::IMultiplayerSpectatingSpot* get_currentSpot();
    // protected System.Void Awake()
    // Offset: 0x10133EC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1013414
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x10134A8
    void OnDestroy();
    // public System.Void SwitchToDefaultSpot()
    // Offset: 0x100BB90
    void SwitchToDefaultSpot();
    // public System.Void SwitchToPrev()
    // Offset: 0x1013390
    void SwitchToPrev();
    // public System.Void SwitchToNext()
    // Offset: 0x101332C
    void SwitchToNext();
    // private System.Collections.IEnumerator SwitchToDefaultSpotWithFadeCoroutine()
    // Offset: 0x1013860
    System::Collections::IEnumerator* SwitchToDefaultSpotWithFadeCoroutine();
    // private System.Collections.IEnumerator SwitchToDefaultSpotCoroutine()
    // Offset: 0x1013584
    System::Collections::IEnumerator* SwitchToDefaultSpotCoroutine();
    // private System.Void SwitchToSpectatingSpot(IMultiplayerSpectatingSpot spectatingSpot)
    // Offset: 0x10135F4
    void SwitchToSpectatingSpot(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot);
    // private System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0x1013928
    void HandleStateChanged(GlobalNamespace::MultiplayerController::State state);
    // public System.Void .ctor()
    // Offset: 0x1013960
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerSpectatorController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatorController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerSpectatorController*, creationType>()));
    }
  }; // MultiplayerSpectatorController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerSpectatorController), 72 + sizeof(GlobalNamespace::IMultiplayerSpectatingSpot*)> __GlobalNamespace_MultiplayerSpectatorControllerSizeCheck;
  static_assert(sizeof(MultiplayerSpectatorController) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerSpectatorController*, "", "MultiplayerSpectatorController");
// Writing MetadataGetter for method: MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent
// Il2CppName: add_spectatingSpotDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*)>(&MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "add_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent
// Il2CppName: remove_spectatingSpotDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*)>(&MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "remove_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::get_currentSpot
// Il2CppName: get_currentSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IMultiplayerSpectatingSpot* (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::get_currentSpot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "get_currentSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::SwitchToDefaultSpot
// Il2CppName: SwitchToDefaultSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::SwitchToDefaultSpot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "SwitchToDefaultSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::SwitchToPrev
// Il2CppName: SwitchToPrev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::SwitchToPrev)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "SwitchToPrev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::SwitchToNext
// Il2CppName: SwitchToNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::SwitchToNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "SwitchToNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine
// Il2CppName: SwitchToDefaultSpotWithFadeCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "SwitchToDefaultSpotWithFadeCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine
// Il2CppName: SwitchToDefaultSpotCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "SwitchToDefaultSpotCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::SwitchToSpectatingSpot
// Il2CppName: SwitchToSpectatingSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)(GlobalNamespace::IMultiplayerSpectatingSpot*)>(&MultiplayerSpectatorController::SwitchToSpectatingSpot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "SwitchToSpectatingSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSpectatingSpot*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)(GlobalNamespace::MultiplayerController::State)>(&MultiplayerSpectatorController::HandleStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerController::State>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatorController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatorController::*)()>(&MultiplayerSpectatorController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatorController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
