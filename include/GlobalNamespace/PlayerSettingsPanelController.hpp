// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerHeightSettingsController
  class PlayerHeightSettingsController;
  // Forward declaring type: FormattedFloatListSettingsController
  class FormattedFloatListSettingsController;
  // Forward declaring type: NoteJumpStartBeatOffsetDropdown
  class NoteJumpStartBeatOffsetDropdown;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ToggleBinder
  class ToggleBinder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PlayerSettingsPanelController
  class PlayerSettingsPanelController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IRefreshable*/ {
    public:
    // Nested type: GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout
    struct PlayerSettingsPanelLayout;
    // private UnityEngine.UI.Toggle _leftHandedToggle
    // Offset: 0x18
    UnityEngine::UI::Toggle* leftHandedToggle;
    // private UnityEngine.UI.Toggle _staticLightsToggle
    // Offset: 0x20
    UnityEngine::UI::Toggle* staticLightsToggle;
    // private UnityEngine.UI.Toggle _reduceDebrisToggle
    // Offset: 0x28
    UnityEngine::UI::Toggle* reduceDebrisToggle;
    // private UnityEngine.UI.Toggle _noTextsAndHudsToggle
    // Offset: 0x30
    UnityEngine::UI::Toggle* noTextsAndHudsToggle;
    // private UnityEngine.UI.Toggle _advanceHudToggle
    // Offset: 0x38
    UnityEngine::UI::Toggle* advanceHudToggle;
    // private UnityEngine.UI.Toggle _autoRestartToggle
    // Offset: 0x40
    UnityEngine::UI::Toggle* autoRestartToggle;
    // private PlayerHeightSettingsController _playerHeightSettingsController
    // Offset: 0x48
    GlobalNamespace::PlayerHeightSettingsController* playerHeightSettingsController;
    // private UnityEngine.UI.Toggle _automaticPlayerHeightToggle
    // Offset: 0x50
    UnityEngine::UI::Toggle* automaticPlayerHeightToggle;
    // private FormattedFloatListSettingsController _sfxVolumeSettingsController
    // Offset: 0x58
    GlobalNamespace::FormattedFloatListSettingsController* sfxVolumeSettingsController;
    // private FormattedFloatListSettingsController _saberTrailIntensitySettingsController
    // Offset: 0x60
    GlobalNamespace::FormattedFloatListSettingsController* saberTrailIntensitySettingsController;
    // private NoteJumpStartBeatOffsetDropdown _noteJumpStartBeatOffsetDropdown
    // Offset: 0x68
    GlobalNamespace::NoteJumpStartBeatOffsetDropdown* noteJumpStartBeatOffsetDropdown;
    // private UnityEngine.UI.Toggle _hideNoteSpawnEffectToggle
    // Offset: 0x70
    UnityEngine::UI::Toggle* hideNoteSpawnEffectToggle;
    // private UnityEngine.UI.Toggle _adaptiveSfxToggle
    // Offset: 0x78
    UnityEngine::UI::Toggle* adaptiveSfxToggle;
    // private UnityEngine.CanvasGroup _singleplayerOnlyCanvasGroup
    // Offset: 0x80
    UnityEngine::CanvasGroup* singleplayerOnlyCanvasGroup;
    // private System.Action didChangePlayerSettingsEvent
    // Offset: 0x88
    System::Action* didChangePlayerSettingsEvent;
    // private PlayerSpecificSettings _playerSpecificSettings
    // Offset: 0x90
    GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // private HMUI.ToggleBinder _toggleBinder
    // Offset: 0x98
    HMUI::ToggleBinder* toggleBinder;
    // private System.Boolean _dirty
    // Offset: 0xA0
    bool dirty;
    // private System.Boolean _refreshed
    // Offset: 0xA1
    bool refreshed;
    // Creating interface conversion operator: operator GlobalNamespace::IRefreshable
    operator GlobalNamespace::IRefreshable() noexcept {
      return *reinterpret_cast<GlobalNamespace::IRefreshable*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kDisabledSectionAlpha
    static constexpr const float kDisabledSectionAlpha = 0.2;
    // Get static field: static private System.Single kDisabledSectionAlpha
    static float _get_kDisabledSectionAlpha();
    // Set static field: static private System.Single kDisabledSectionAlpha
    static void _set_kDisabledSectionAlpha(float value);
    // public System.Void add_didChangePlayerSettingsEvent(System.Action value)
    // Offset: 0x208DAA4
    void add_didChangePlayerSettingsEvent(System::Action* value);
    // public System.Void remove_didChangePlayerSettingsEvent(System.Action value)
    // Offset: 0x208DB48
    void remove_didChangePlayerSettingsEvent(System::Action* value);
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0x208D594
    GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // public System.Void SetData(PlayerSpecificSettings playerSpecificSettings)
    // Offset: 0x208D2D8
    void SetData(GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings);
    // public System.Void SetLayout(PlayerSettingsPanelController/PlayerSettingsPanelLayout layout)
    // Offset: 0x208D2A8
    void SetLayout(GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout layout);
    // protected System.Void Awake()
    // Offset: 0x208DC58
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x208E068
    void OnDestroy();
    // private System.Void HandleSFXVolumeSettingsControllerValueDidChange(FormattedFloatListSettingsController settingsController, System.Single value)
    // Offset: 0x208E248
    void HandleSFXVolumeSettingsControllerValueDidChange(GlobalNamespace::FormattedFloatListSettingsController* settingsController, float value);
    // private System.Void HandleSaberTrailIntensitySettingsControllerValueDidChange(FormattedFloatListSettingsController settingsController, System.Single value)
    // Offset: 0x208E288
    void HandleSaberTrailIntensitySettingsControllerValueDidChange(GlobalNamespace::FormattedFloatListSettingsController* settingsController, float value);
    // private System.Void HandlePlayerHeightSettingsControllerValueDidChange(System.Single value)
    // Offset: 0x208E2A8
    void HandlePlayerHeightSettingsControllerValueDidChange(float value);
    // private System.Void HandleNoteJumpStartBeatOffsetPositionSelected(System.Int32 idx)
    // Offset: 0x208E2C8
    void HandleNoteJumpStartBeatOffsetPositionSelected(int idx);
    // private System.Void HandleAdvancedHudToggleChanged(System.Boolean on)
    // Offset: 0x208E2E8
    void HandleAdvancedHudToggleChanged(bool on);
    // private System.Void HandleNoTextsAndHudsToggleChanged(System.Boolean on)
    // Offset: 0x208E340
    void HandleNoTextsAndHudsToggleChanged(bool on);
    // private System.Void SetIsDirty()
    // Offset: 0x208E268
    void SetIsDirty();
    // private System.Void SetSection(UnityEngine.CanvasGroup sectionCanvasGroup, System.Boolean block)
    // Offset: 0x208DBEC
    void SetSection(UnityEngine::CanvasGroup* sectionCanvasGroup, bool block);
    // private System.Void <Awake>b__27_0(System.Boolean on)
    // Offset: 0x208E3A0
    void $Awake$b__27_0(bool on);
    // private System.Void <Awake>b__27_1(System.Boolean on)
    // Offset: 0x208E3C0
    void $Awake$b__27_1(bool on);
    // private System.Void <Awake>b__27_2(System.Boolean on)
    // Offset: 0x208E3E0
    void $Awake$b__27_2(bool on);
    // private System.Void <Awake>b__27_3(System.Boolean on)
    // Offset: 0x208E400
    void $Awake$b__27_3(bool on);
    // private System.Void <Awake>b__27_4(System.Boolean on)
    // Offset: 0x208E420
    void $Awake$b__27_4(bool on);
    // private System.Void <Awake>b__27_5(System.Boolean on)
    // Offset: 0x208E440
    void $Awake$b__27_5(bool on);
    // private System.Void <Awake>b__27_6(System.Boolean on)
    // Offset: 0x208E460
    void $Awake$b__27_6(bool on);
    // public System.Void Refresh()
    // Offset: 0x208D32C
    // Implemented from: IRefreshable
    // Base method: System.Void IRefreshable::Refresh()
    void Refresh();
    // Creating proxy method: GlobalNamespace_IRefreshable_Refresh
    // Maps to method: Refresh
    void GlobalNamespace_IRefreshable_Refresh();
    // public System.Void .ctor()
    // Offset: 0x208E398
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static PlayerSettingsPanelController* New_ctor();
  }; // PlayerSettingsPanelController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerSettingsPanelController*, "", "PlayerSettingsPanelController");
#pragma pack(pop)
