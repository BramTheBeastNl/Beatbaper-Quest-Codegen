// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerHeightSettingsController
  class PlayerHeightSettingsController;
  // Forward declaring type: FormattedFloatListSettingsController
  class FormattedFloatListSettingsController;
  // Forward declaring type: NoteJumpStartBeatOffsetDropdown
  class NoteJumpStartBeatOffsetDropdown;
  // Forward declaring type: EnvironmentEffectsFilterPresetDropdown
  class EnvironmentEffectsFilterPresetDropdown;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ToggleBinder
  class ToggleBinder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAA
  #pragma pack(push, 1)
  // Autogenerated type: PlayerSettingsPanelController
  class PlayerSettingsPanelController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IRefreshable*/ {
    public:
    // Nested type: GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout
    struct PlayerSettingsPanelLayout;
    // private UnityEngine.UI.Toggle _leftHandedToggle
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::UI::Toggle* leftHandedToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _reduceDebrisToggle
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::UI::Toggle* reduceDebrisToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _noTextsAndHudsToggle
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::UI::Toggle* noTextsAndHudsToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _advanceHudToggle
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::UI::Toggle* advanceHudToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _autoRestartToggle
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::UI::Toggle* autoRestartToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private PlayerHeightSettingsController _playerHeightSettingsController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::PlayerHeightSettingsController* playerHeightSettingsController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeightSettingsController*) == 0x8);
    // private UnityEngine.UI.Toggle _automaticPlayerHeightToggle
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::UI::Toggle* automaticPlayerHeightToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private FormattedFloatListSettingsController _sfxVolumeSettingsController
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::FormattedFloatListSettingsController* sfxVolumeSettingsController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FormattedFloatListSettingsController*) == 0x8);
    // private FormattedFloatListSettingsController _saberTrailIntensitySettingsController
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::FormattedFloatListSettingsController* saberTrailIntensitySettingsController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FormattedFloatListSettingsController*) == 0x8);
    // private NoteJumpStartBeatOffsetDropdown _noteJumpStartBeatOffsetDropdown
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::NoteJumpStartBeatOffsetDropdown* noteJumpStartBeatOffsetDropdown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteJumpStartBeatOffsetDropdown*) == 0x8);
    // private EnvironmentEffectsFilterPresetDropdown _environmentEffectsFilterDefaultPresetDropdown
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::EnvironmentEffectsFilterPresetDropdown* environmentEffectsFilterDefaultPresetDropdown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentEffectsFilterPresetDropdown*) == 0x8);
    // private EnvironmentEffectsFilterPresetDropdown _environmentEffectsFilterExpertPlusPresetDropdown
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::EnvironmentEffectsFilterPresetDropdown* environmentEffectsFilterExpertPlusPresetDropdown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentEffectsFilterPresetDropdown*) == 0x8);
    // private UnityEngine.UI.Toggle _hideNoteSpawnEffectToggle
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::Toggle* hideNoteSpawnEffectToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _adaptiveSfxToggle
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::UI::Toggle* adaptiveSfxToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // [SpaceAttribute] Offset: 0xD2E594
    // private UnityEngine.CanvasGroup _singleplayerOnlyCanvasGroup
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::CanvasGroup* singleplayerOnlyCanvasGroup;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasGroup*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2E5CC
    // private System.Action didChangePlayerSettingsEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* didChangePlayerSettingsEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private PlayerSpecificSettings _playerSpecificSettings
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerSpecificSettings*) == 0x8);
    // private HMUI.ToggleBinder _toggleBinder
    // Size: 0x8
    // Offset: 0xA0
    HMUI::ToggleBinder* toggleBinder;
    // Field size check
    static_assert(sizeof(HMUI::ToggleBinder*) == 0x8);
    // private System.Boolean _dirty
    // Size: 0x1
    // Offset: 0xA8
    bool dirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _refreshed
    // Size: 0x1
    // Offset: 0xA9
    bool refreshed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: PlayerSettingsPanelController
    PlayerSettingsPanelController(UnityEngine::UI::Toggle* leftHandedToggle_ = {}, UnityEngine::UI::Toggle* reduceDebrisToggle_ = {}, UnityEngine::UI::Toggle* noTextsAndHudsToggle_ = {}, UnityEngine::UI::Toggle* advanceHudToggle_ = {}, UnityEngine::UI::Toggle* autoRestartToggle_ = {}, GlobalNamespace::PlayerHeightSettingsController* playerHeightSettingsController_ = {}, UnityEngine::UI::Toggle* automaticPlayerHeightToggle_ = {}, GlobalNamespace::FormattedFloatListSettingsController* sfxVolumeSettingsController_ = {}, GlobalNamespace::FormattedFloatListSettingsController* saberTrailIntensitySettingsController_ = {}, GlobalNamespace::NoteJumpStartBeatOffsetDropdown* noteJumpStartBeatOffsetDropdown_ = {}, GlobalNamespace::EnvironmentEffectsFilterPresetDropdown* environmentEffectsFilterDefaultPresetDropdown_ = {}, GlobalNamespace::EnvironmentEffectsFilterPresetDropdown* environmentEffectsFilterExpertPlusPresetDropdown_ = {}, UnityEngine::UI::Toggle* hideNoteSpawnEffectToggle_ = {}, UnityEngine::UI::Toggle* adaptiveSfxToggle_ = {}, UnityEngine::CanvasGroup* singleplayerOnlyCanvasGroup_ = {}, System::Action* didChangePlayerSettingsEvent_ = {}, GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings_ = {}, HMUI::ToggleBinder* toggleBinder_ = {}, bool dirty_ = {}, bool refreshed_ = {}) noexcept : leftHandedToggle{leftHandedToggle_}, reduceDebrisToggle{reduceDebrisToggle_}, noTextsAndHudsToggle{noTextsAndHudsToggle_}, advanceHudToggle{advanceHudToggle_}, autoRestartToggle{autoRestartToggle_}, playerHeightSettingsController{playerHeightSettingsController_}, automaticPlayerHeightToggle{automaticPlayerHeightToggle_}, sfxVolumeSettingsController{sfxVolumeSettingsController_}, saberTrailIntensitySettingsController{saberTrailIntensitySettingsController_}, noteJumpStartBeatOffsetDropdown{noteJumpStartBeatOffsetDropdown_}, environmentEffectsFilterDefaultPresetDropdown{environmentEffectsFilterDefaultPresetDropdown_}, environmentEffectsFilterExpertPlusPresetDropdown{environmentEffectsFilterExpertPlusPresetDropdown_}, hideNoteSpawnEffectToggle{hideNoteSpawnEffectToggle_}, adaptiveSfxToggle{adaptiveSfxToggle_}, singleplayerOnlyCanvasGroup{singleplayerOnlyCanvasGroup_}, didChangePlayerSettingsEvent{didChangePlayerSettingsEvent_}, playerSpecificSettings{playerSpecificSettings_}, toggleBinder{toggleBinder_}, dirty{dirty_}, refreshed{refreshed_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IRefreshable
    operator GlobalNamespace::IRefreshable() noexcept {
      return *reinterpret_cast<GlobalNamespace::IRefreshable*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kDisabledSectionAlpha
    static constexpr const float kDisabledSectionAlpha = 0.2;
    // Get static field: static private System.Single kDisabledSectionAlpha
    static float _get_kDisabledSectionAlpha();
    // Set static field: static private System.Single kDisabledSectionAlpha
    static void _set_kDisabledSectionAlpha(float value);
    // public System.Void add_didChangePlayerSettingsEvent(System.Action value)
    // Offset: 0xF6AA70
    void add_didChangePlayerSettingsEvent(System::Action* value);
    // public System.Void remove_didChangePlayerSettingsEvent(System.Action value)
    // Offset: 0xF6AB14
    void remove_didChangePlayerSettingsEvent(System::Action* value);
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0xF6A574
    GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // public System.Void SetData(PlayerSpecificSettings playerSpecificSettings)
    // Offset: 0xF6A2B8
    void SetData(GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings);
    // public System.Void SetLayout(PlayerSettingsPanelController/PlayerSettingsPanelLayout layout)
    // Offset: 0xF6A288
    void SetLayout(GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout layout);
    // protected System.Void Awake()
    // Offset: 0xF6AC24
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xF6B04C
    void OnDestroy();
    // public System.Void Refresh()
    // Offset: 0xF6A2FC
    void Refresh();
    // private System.Void HandleSFXVolumeSettingsControllerValueDidChange(FormattedFloatListSettingsController settingsController, System.Single value)
    // Offset: 0xF6B324
    void HandleSFXVolumeSettingsControllerValueDidChange(GlobalNamespace::FormattedFloatListSettingsController* settingsController, float value);
    // private System.Void HandleSaberTrailIntensitySettingsControllerValueDidChange(FormattedFloatListSettingsController settingsController, System.Single value)
    // Offset: 0xF6B364
    void HandleSaberTrailIntensitySettingsControllerValueDidChange(GlobalNamespace::FormattedFloatListSettingsController* settingsController, float value);
    // private System.Void HandlePlayerHeightSettingsControllerValueDidChange(System.Single value)
    // Offset: 0xF6B384
    void HandlePlayerHeightSettingsControllerValueDidChange(float value);
    // private System.Void HandleNoteJumpStartBeatOffsetPositionSelected(System.Int32 idx)
    // Offset: 0xF6B3A4
    void HandleNoteJumpStartBeatOffsetPositionSelected(int idx);
    // private System.Void HandleLightReductionAmountSelected(System.Int32 obj)
    // Offset: 0xF6B3C4
    void HandleLightReductionAmountSelected(int obj);
    // private System.Void HandleAdvancedHudToggleChanged(System.Boolean on)
    // Offset: 0xF6B3E4
    void HandleAdvancedHudToggleChanged(bool on);
    // private System.Void HandleNoTextsAndHudsToggleChanged(System.Boolean on)
    // Offset: 0xF6B43C
    void HandleNoTextsAndHudsToggleChanged(bool on);
    // private System.Void SetIsDirty()
    // Offset: 0xF6B344
    void SetIsDirty();
    // private System.Void SetSection(UnityEngine.CanvasGroup sectionCanvasGroup, System.Boolean block)
    // Offset: 0xF6ABB8
    void SetSection(UnityEngine::CanvasGroup* sectionCanvasGroup, bool block);
    // private System.Void <Awake>b__28_0(System.Boolean on)
    // Offset: 0xF6B49C
    void $Awake$b__28_0(bool on);
    // private System.Void <Awake>b__28_1(System.Boolean on)
    // Offset: 0xF6B4BC
    void $Awake$b__28_1(bool on);
    // private System.Void <Awake>b__28_2(System.Boolean on)
    // Offset: 0xF6B4DC
    void $Awake$b__28_2(bool on);
    // private System.Void <Awake>b__28_3(System.Boolean on)
    // Offset: 0xF6B4FC
    void $Awake$b__28_3(bool on);
    // private System.Void <Awake>b__28_4(System.Boolean on)
    // Offset: 0xF6B51C
    void $Awake$b__28_4(bool on);
    // private System.Void <Awake>b__28_5(System.Boolean on)
    // Offset: 0xF6B53C
    void $Awake$b__28_5(bool on);
    // public System.Void .ctor()
    // Offset: 0xF6B494
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerSettingsPanelController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSettingsPanelController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerSettingsPanelController*, creationType>()));
    }
  }; // PlayerSettingsPanelController
  #pragma pack(pop)
  static check_size<sizeof(PlayerSettingsPanelController), 169 + sizeof(bool)> __GlobalNamespace_PlayerSettingsPanelControllerSizeCheck;
  static_assert(sizeof(PlayerSettingsPanelController) == 0xAA);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerSettingsPanelController*, "", "PlayerSettingsPanelController");
