// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObstacleType
#include "GlobalNamespace/ObstacleType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: MockObstacleData
  class MockObstacleData : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDFD2A8
    // private System.Single <time>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDFD2B8
    // private System.Int32 <lineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int lineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDFD2C8
    // private ObstacleType <obstacleType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::ObstacleType obstacleType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ObstacleType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDFD2D8
    // private System.Single <duration>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDFD2E8
    // private System.Int32 <width>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: MockObstacleData
    MockObstacleData(float time_ = {}, int lineIndex_ = {}, GlobalNamespace::ObstacleType obstacleType_ = {}, float duration_ = {}, int width_ = {}) noexcept : time{time_}, lineIndex{lineIndex_}, obstacleType{obstacleType_}, duration{duration_}, width{width_} {}
    // public System.Single get_time()
    // Offset: 0x2399C94
    float get_time();
    // public System.Void set_time(System.Single value)
    // Offset: 0x2399C9C
    void set_time(float value);
    // public System.Int32 get_lineIndex()
    // Offset: 0x2399CA4
    int get_lineIndex();
    // public System.Void set_lineIndex(System.Int32 value)
    // Offset: 0x2399CAC
    void set_lineIndex(int value);
    // public ObstacleType get_obstacleType()
    // Offset: 0x2399CB4
    GlobalNamespace::ObstacleType get_obstacleType();
    // public System.Void set_obstacleType(ObstacleType value)
    // Offset: 0x2399CBC
    void set_obstacleType(GlobalNamespace::ObstacleType value);
    // public System.Single get_duration()
    // Offset: 0x2399CC4
    float get_duration();
    // public System.Void set_duration(System.Single value)
    // Offset: 0x2399CCC
    void set_duration(float value);
    // public System.Int32 get_width()
    // Offset: 0x2399CD4
    int get_width();
    // public System.Void set_width(System.Int32 value)
    // Offset: 0x2399CDC
    void set_width(int value);
    // public System.Void .ctor()
    // Offset: 0x2399CE4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockObstacleData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockObstacleData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockObstacleData*, creationType>()));
    }
  }; // MockObstacleData
  #pragma pack(pop)
  static check_size<sizeof(MockObstacleData), 32 + sizeof(int)> __GlobalNamespace_MockObstacleDataSizeCheck;
  static_assert(sizeof(MockObstacleData) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockObstacleData*, "", "MockObstacleData");
