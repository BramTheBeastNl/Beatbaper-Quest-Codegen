// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: RenderTexture
  class RenderTexture;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/Media
  class OVRPlugin::Media : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRPlugin::Media::MrcActivationMode
    struct MrcActivationMode;
    // Nested type: GlobalNamespace::OVRPlugin::Media::PlatformCameraMode
    struct PlatformCameraMode;
    // Nested type: GlobalNamespace::OVRPlugin::Media::InputVideoBufferType
    struct InputVideoBufferType;
    // Creating value type constructor for type: Media
    Media() noexcept {}
    // Get static field: static private UnityEngine.Texture2D cachedTexture
    static UnityEngine::Texture2D* _get_cachedTexture();
    // Set static field: static private UnityEngine.Texture2D cachedTexture
    static void _set_cachedTexture(UnityEngine::Texture2D* value);
    // static public System.Boolean Initialize()
    // Offset: 0x1619D30
    static bool Initialize();
    // static public System.Boolean Shutdown()
    // Offset: 0x1619EA4
    static bool Shutdown();
    // static public System.Boolean GetInitialized()
    // Offset: 0x161A018
    static bool GetInitialized();
    // static public System.Boolean Update()
    // Offset: 0x161A1AC
    static bool Update();
    // static public OVRPlugin/Media/MrcActivationMode GetMrcActivationMode()
    // Offset: 0x161A320
    static GlobalNamespace::OVRPlugin::Media::MrcActivationMode GetMrcActivationMode();
    // static public System.Boolean SetMrcActivationMode(OVRPlugin/Media/MrcActivationMode mode)
    // Offset: 0x161A4AC
    static bool SetMrcActivationMode(GlobalNamespace::OVRPlugin::Media::MrcActivationMode mode);
    // static public System.Boolean SetPlatformInitialized()
    // Offset: 0x161A634
    static bool SetPlatformInitialized();
    // static public OVRPlugin/Media/PlatformCameraMode GetPlatformCameraMode()
    // Offset: 0x161A7A8
    static GlobalNamespace::OVRPlugin::Media::PlatformCameraMode GetPlatformCameraMode();
    // static public System.Boolean SetPlatformCameraMode(OVRPlugin/Media/PlatformCameraMode mode)
    // Offset: 0x161A934
    static bool SetPlatformCameraMode(GlobalNamespace::OVRPlugin::Media::PlatformCameraMode mode);
    // static public System.Boolean IsMrcEnabled()
    // Offset: 0x161AABC
    static bool IsMrcEnabled();
    // static public System.Boolean IsMrcActivated()
    // Offset: 0x161AC4C
    static bool IsMrcActivated();
    // static public System.Boolean UseMrcDebugCamera()
    // Offset: 0x161ADDC
    static bool UseMrcDebugCamera();
    // static public System.Boolean SetMrcInputVideoBufferType(OVRPlugin/Media/InputVideoBufferType videoBufferType)
    // Offset: 0x161AF6C
    static bool SetMrcInputVideoBufferType(GlobalNamespace::OVRPlugin::Media::InputVideoBufferType videoBufferType);
    // static public OVRPlugin/Media/InputVideoBufferType GetMrcInputVideoBufferType()
    // Offset: 0x161B0F4
    static GlobalNamespace::OVRPlugin::Media::InputVideoBufferType GetMrcInputVideoBufferType();
    // static public System.Boolean SetMrcFrameSize(System.Int32 frameWidth, System.Int32 frameHeight)
    // Offset: 0x161B27C
    static bool SetMrcFrameSize(int frameWidth, int frameHeight);
    // static public System.Void GetMrcFrameSize(out System.Int32 frameWidth, out System.Int32 frameHeight)
    // Offset: 0x161B424
    static void GetMrcFrameSize(int& frameWidth, int& frameHeight);
    // static public System.Boolean SetMrcAudioSampleRate(System.Int32 sampleRate)
    // Offset: 0x161B5D8
    static bool SetMrcAudioSampleRate(int sampleRate);
    // static public System.Int32 GetMrcAudioSampleRate()
    // Offset: 0x161B760
    static int GetMrcAudioSampleRate();
    // static public System.Boolean SetMrcFrameImageFlipped(System.Boolean imageFlipped)
    // Offset: 0x161B8E4
    static bool SetMrcFrameImageFlipped(bool imageFlipped);
    // static public System.Boolean GetMrcFrameImageFlipped()
    // Offset: 0x161BA70
    static bool GetMrcFrameImageFlipped();
    // static public System.Boolean EncodeMrcFrame(System.IntPtr textureHandle, System.IntPtr fgTextureHandle, System.Single[] audioData, System.Int32 audioFrames, System.Int32 audioChannels, System.Double timestamp, System.Double poseTime, ref System.Int32 outSyncId)
    // Offset: 0x161BBFC
    static bool EncodeMrcFrame(System::IntPtr textureHandle, System::IntPtr fgTextureHandle, ::Array<float>* audioData, int audioFrames, int audioChannels, double timestamp, double poseTime, int& outSyncId);
    // static public System.Boolean EncodeMrcFrame(UnityEngine.RenderTexture frame, System.Single[] audioData, System.Int32 audioFrames, System.Int32 audioChannels, System.Double timestamp, System.Double poseTime, ref System.Int32 outSyncId)
    // Offset: 0x161C350
    static bool EncodeMrcFrame(UnityEngine::RenderTexture* frame, ::Array<float>* audioData, int audioFrames, int audioChannels, double timestamp, double poseTime, int& outSyncId);
    // static public System.Boolean SyncMrcFrame(System.Int32 syncId)
    // Offset: 0x161C92C
    static bool SyncMrcFrame(int syncId);
    // static public System.Boolean SetAvailableQueueIndexVulkan(System.UInt32 queueIndexVk)
    // Offset: 0x161CAB4
    static bool SetAvailableQueueIndexVulkan(uint queueIndexVk);
    // static public System.Boolean SetMrcHeadsetControllerPose(OVRPlugin/Posef headsetPose, OVRPlugin/Posef leftControllerPose, OVRPlugin/Posef rightControllerPose)
    // Offset: 0x161CC3C
    static bool SetMrcHeadsetControllerPose(GlobalNamespace::OVRPlugin::Posef headsetPose, GlobalNamespace::OVRPlugin::Posef leftControllerPose, GlobalNamespace::OVRPlugin::Posef rightControllerPose);
    // static private System.Void .cctor()
    // Offset: 0x161CEA0
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x161CE98
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRPlugin::Media* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRPlugin::Media::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRPlugin::Media*, creationType>()));
    }
  }; // OVRPlugin/Media
  #pragma pack(pop)
  // Writing MetadataGetter for method: OVRPlugin::Media::Initialize
  // Il2CppName: Initialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::Initialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::Shutdown
  // Il2CppName: Shutdown
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::Shutdown)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetInitialized
  // Il2CppName: GetInitialized
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::GetInitialized)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::Update
  // Il2CppName: Update
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::Update)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetMrcActivationMode
  // Il2CppName: GetMrcActivationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Media::MrcActivationMode (*)()>(&OVRPlugin::Media::GetMrcActivationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetMrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetMrcActivationMode
  // Il2CppName: SetMrcActivationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRPlugin::Media::MrcActivationMode)>(&OVRPlugin::Media::SetMrcActivationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetMrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::MrcActivationMode>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetPlatformInitialized
  // Il2CppName: SetPlatformInitialized
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::SetPlatformInitialized)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetPlatformInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetPlatformCameraMode
  // Il2CppName: GetPlatformCameraMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Media::PlatformCameraMode (*)()>(&OVRPlugin::Media::GetPlatformCameraMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetPlatformCameraMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetPlatformCameraMode
  // Il2CppName: SetPlatformCameraMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRPlugin::Media::PlatformCameraMode)>(&OVRPlugin::Media::SetPlatformCameraMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetPlatformCameraMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::PlatformCameraMode>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::IsMrcEnabled
  // Il2CppName: IsMrcEnabled
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::IsMrcEnabled)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "IsMrcEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::IsMrcActivated
  // Il2CppName: IsMrcActivated
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::IsMrcActivated)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "IsMrcActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::UseMrcDebugCamera
  // Il2CppName: UseMrcDebugCamera
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::UseMrcDebugCamera)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "UseMrcDebugCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetMrcInputVideoBufferType
  // Il2CppName: SetMrcInputVideoBufferType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRPlugin::Media::InputVideoBufferType)>(&OVRPlugin::Media::SetMrcInputVideoBufferType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetMrcInputVideoBufferType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Media::InputVideoBufferType>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetMrcInputVideoBufferType
  // Il2CppName: GetMrcInputVideoBufferType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Media::InputVideoBufferType (*)()>(&OVRPlugin::Media::GetMrcInputVideoBufferType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetMrcInputVideoBufferType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetMrcFrameSize
  // Il2CppName: SetMrcFrameSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int)>(&OVRPlugin::Media::SetMrcFrameSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetMrcFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetMrcFrameSize
  // Il2CppName: GetMrcFrameSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int&, int&)>(&OVRPlugin::Media::GetMrcFrameSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetMrcFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetMrcAudioSampleRate
  // Il2CppName: SetMrcAudioSampleRate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&OVRPlugin::Media::SetMrcAudioSampleRate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetMrcAudioSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetMrcAudioSampleRate
  // Il2CppName: GetMrcAudioSampleRate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&OVRPlugin::Media::GetMrcAudioSampleRate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetMrcAudioSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetMrcFrameImageFlipped
  // Il2CppName: SetMrcFrameImageFlipped
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&OVRPlugin::Media::SetMrcFrameImageFlipped)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetMrcFrameImageFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::GetMrcFrameImageFlipped
  // Il2CppName: GetMrcFrameImageFlipped
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OVRPlugin::Media::GetMrcFrameImageFlipped)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "GetMrcFrameImageFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::EncodeMrcFrame
  // Il2CppName: EncodeMrcFrame
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::IntPtr, System::IntPtr, ::Array<float>*, int, int, double, double, int&)>(&OVRPlugin::Media::EncodeMrcFrame)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "EncodeMrcFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::EncodeMrcFrame
  // Il2CppName: EncodeMrcFrame
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::RenderTexture*, ::Array<float>*, int, int, double, double, int&)>(&OVRPlugin::Media::EncodeMrcFrame)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "EncodeMrcFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SyncMrcFrame
  // Il2CppName: SyncMrcFrame
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&OVRPlugin::Media::SyncMrcFrame)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SyncMrcFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetAvailableQueueIndexVulkan
  // Il2CppName: SetAvailableQueueIndexVulkan
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&OVRPlugin::Media::SetAvailableQueueIndexVulkan)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetAvailableQueueIndexVulkan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::SetMrcHeadsetControllerPose
  // Il2CppName: SetMrcHeadsetControllerPose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRPlugin::Posef, GlobalNamespace::OVRPlugin::Posef, GlobalNamespace::OVRPlugin::Posef)>(&OVRPlugin::Media::SetMrcHeadsetControllerPose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), "SetMrcHeadsetControllerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Posef>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::Media::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::Media::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRPlugin::Media::*)()>(&OVRPlugin::Media::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRPlugin::Media::*)()>(&OVRPlugin::Media::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::Media*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Media*, "", "OVRPlugin/Media");
