// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BGNetDebug
  class BGNetDebug : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BGNetDebug::ILogger
    class ILogger;
    // Nested type: GlobalNamespace::BGNetDebug::NetLogger
    class NetLogger;
    // Creating value type constructor for type: BGNetDebug
    BGNetDebug() noexcept {}
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDF0900
    // Get static field: static private BGNetDebug/ILogger _logger
    static GlobalNamespace::BGNetDebug::ILogger* _get__logger();
    // Set static field: static private BGNetDebug/ILogger _logger
    static void _set__logger(GlobalNamespace::BGNetDebug::ILogger* value);
    // static private System.Void .cctor()
    // Offset: 0x1320A80
    static void _cctor();
    // static public System.Void SetLogger(BGNetDebug/ILogger logger)
    // Offset: 0x1320B0C
    static void SetLogger(GlobalNamespace::BGNetDebug::ILogger* logger);
    // static public System.Void Log(System.String message)
    // Offset: 0x1320B78
    static void Log(::Il2CppString* message);
    // static public System.Void LogError(System.String message)
    // Offset: 0x1320C90
    static void LogError(::Il2CppString* message);
    // static public System.Void LogWarning(System.String message)
    // Offset: 0x1320DD4
    static void LogWarning(::Il2CppString* message);
  }; // BGNetDebug
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BGNetDebug*, "", "BGNetDebug");
// Writing MetadataGetter for method: BGNetDebug::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BGNetDebug::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BGNetDebug::SetLogger
// Il2CppName: SetLogger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::BGNetDebug::ILogger*)>(&BGNetDebug::SetLogger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "SetLogger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BGNetDebug::ILogger*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BGNetDebug::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BGNetDebug::LogError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BGNetDebug::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BGNetDebug::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BGNetDebug*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
