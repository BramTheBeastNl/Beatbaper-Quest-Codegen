// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BGNetDebug
  class BGNetDebug;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BGNetDebug);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BGNetDebug*, "", "BGNetDebug");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BGNetDebug
  // [TokenAttribute] Offset: FFFFFFFF
  class BGNetDebug : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::BGNetDebug::ILogger
    class ILogger;
    // Nested type: ::GlobalNamespace::BGNetDebug::NetLogger
    class NetLogger;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1221720
    // Get static field: static private BGNetDebug/ILogger _logger
    static ::GlobalNamespace::BGNetDebug::ILogger* _get__logger();
    // Set static field: static private BGNetDebug/ILogger _logger
    static void _set__logger(::GlobalNamespace::BGNetDebug::ILogger* value);
    // static private System.Void .cctor()
    // Offset: 0x2B8D0AC
    static void _cctor();
    // static public System.Void SetLogger(BGNetDebug/ILogger logger)
    // Offset: 0x2B8D138
    static void SetLogger(::GlobalNamespace::BGNetDebug::ILogger* logger);
    // static public System.Void Log(System.String message)
    // Offset: 0x2B80858
    static void Log(::StringW message);
    // static public System.Void LogError(System.String message)
    // Offset: 0x2B8D1A4
    static void LogError(::StringW message);
    // static public System.Void LogException(System.Exception exception, System.String message)
    // Offset: 0x2B7C048
    static void LogException(::System::Exception* exception, ::StringW message);
    // static public System.Void LogWarning(System.String message)
    // Offset: 0x2B853BC
    static void LogWarning(::StringW message);
  }; // BGNetDebug
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BGNetDebug::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BGNetDebug::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BGNetDebug*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BGNetDebug::SetLogger
// Il2CppName: SetLogger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::BGNetDebug::ILogger*)>(&GlobalNamespace::BGNetDebug::SetLogger)> {
  static const MethodInfo* get() {
    static auto* logger = &::il2cpp_utils::GetClassFromName("", "BGNetDebug/ILogger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BGNetDebug*), "SetLogger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BGNetDebug::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::BGNetDebug::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BGNetDebug*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BGNetDebug::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::BGNetDebug::LogError)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BGNetDebug*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BGNetDebug::LogException
// Il2CppName: LogException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Exception*, ::StringW)>(&GlobalNamespace::BGNetDebug::LogException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BGNetDebug*), "LogException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BGNetDebug::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::BGNetDebug::LogWarning)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BGNetDebug*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
