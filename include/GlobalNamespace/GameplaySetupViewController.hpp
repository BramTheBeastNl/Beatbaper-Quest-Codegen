// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerSettingsPanelController
  class PlayerSettingsPanelController;
  // Forward declaring type: GameplayModifiersPanelController
  class GameplayModifiersPanelController;
  // Forward declaring type: EnvironmentOverrideSettingsPanelController
  class EnvironmentOverrideSettingsPanelController;
  // Forward declaring type: ColorsOverrideSettingsPanelController
  class ColorsOverrideSettingsPanelController;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: OverrideEnvironmentSettings
  class OverrideEnvironmentSettings;
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TextSegmentedControl
  class TextSegmentedControl;
  // Forward declaring type: SegmentedControl
  class SegmentedControl;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB9
  #pragma pack(push, 1)
  // Autogenerated type: GameplaySetupViewController
  // [] Offset: FFFFFFFF
  class GameplaySetupViewController : public HMUI::ViewController {
    public:
    // Nested type: GlobalNamespace::GameplaySetupViewController::Panel
    class Panel;
    // private HMUI.TextSegmentedControl _selectionSegmentedControl
    // Size: 0x8
    // Offset: 0x70
    HMUI::TextSegmentedControl* selectionSegmentedControl;
    // Field size check
    static_assert(sizeof(HMUI::TextSegmentedControl*) == 0x8);
    // private PlayerSettingsPanelController _playerSettingsPanelController
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::PlayerSettingsPanelController* playerSettingsPanelController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerSettingsPanelController*) == 0x8);
    // private GameplayModifiersPanelController _gameplayModifiersPanelController
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::GameplayModifiersPanelController* gameplayModifiersPanelController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiersPanelController*) == 0x8);
    // private EnvironmentOverrideSettingsPanelController _environmentOverrideSettingsPanelController
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::EnvironmentOverrideSettingsPanelController* environmentOverrideSettingsPanelController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentOverrideSettingsPanelController*) == 0x8);
    // private ColorsOverrideSettingsPanelController _colorsOverrideSettingsPanelController
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::ColorsOverrideSettingsPanelController* colorsOverrideSettingsPanelController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorsOverrideSettingsPanelController*) == 0x8);
    // [InjectAttribute] Offset: 0xDCF840
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCF850
    // private System.Action didChangeGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action* didChangeGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Collections.Generic.List`1<GameplaySetupViewController/Panel> _panels
    // Size: 0x8
    // Offset: 0xA8
    System::Collections::Generic::List_1<GlobalNamespace::GameplaySetupViewController::Panel*>* panels;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::GameplaySetupViewController::Panel*>*) == 0x8);
    // private System.Int32 _activePanelIdx
    // Size: 0x4
    // Offset: 0xB0
    int activePanelIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _showModifiers
    // Size: 0x1
    // Offset: 0xB4
    bool showModifiers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showEnvironmentOverrideSettings
    // Size: 0x1
    // Offset: 0xB5
    bool showEnvironmentOverrideSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showColorSchemesSettings
    // Size: 0x1
    // Offset: 0xB6
    bool showColorSchemesSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _shouldRefreshContent
    // Size: 0x1
    // Offset: 0xB7
    bool shouldRefreshContent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0xB8
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: GameplaySetupViewController
    GameplaySetupViewController(HMUI::TextSegmentedControl* selectionSegmentedControl_ = {}, GlobalNamespace::PlayerSettingsPanelController* playerSettingsPanelController_ = {}, GlobalNamespace::GameplayModifiersPanelController* gameplayModifiersPanelController_ = {}, GlobalNamespace::EnvironmentOverrideSettingsPanelController* environmentOverrideSettingsPanelController_ = {}, GlobalNamespace::ColorsOverrideSettingsPanelController* colorsOverrideSettingsPanelController_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, System::Action* didChangeGameplayModifiersEvent_ = {}, System::Collections::Generic::List_1<GlobalNamespace::GameplaySetupViewController::Panel*>* panels_ = {}, int activePanelIdx_ = {}, bool showModifiers_ = {}, bool showEnvironmentOverrideSettings_ = {}, bool showColorSchemesSettings_ = {}, bool shouldRefreshContent_ = {}, bool isInitialized_ = {}) noexcept : selectionSegmentedControl{selectionSegmentedControl_}, playerSettingsPanelController{playerSettingsPanelController_}, gameplayModifiersPanelController{gameplayModifiersPanelController_}, environmentOverrideSettingsPanelController{environmentOverrideSettingsPanelController_}, colorsOverrideSettingsPanelController{colorsOverrideSettingsPanelController_}, playerDataModel{playerDataModel_}, didChangeGameplayModifiersEvent{didChangeGameplayModifiersEvent_}, panels{panels_}, activePanelIdx{activePanelIdx_}, showModifiers{showModifiers_}, showEnvironmentOverrideSettings{showEnvironmentOverrideSettings_}, showColorSchemesSettings{showColorSchemesSettings_}, shouldRefreshContent{shouldRefreshContent_}, isInitialized{isInitialized_} {}
    // public System.Void add_didChangeGameplayModifiersEvent(System.Action value)
    // Offset: 0xF0FFF8
    void add_didChangeGameplayModifiersEvent(System::Action* value);
    // public System.Void remove_didChangeGameplayModifiersEvent(System.Action value)
    // Offset: 0xF1009C
    void remove_didChangeGameplayModifiersEvent(System::Action* value);
    // public PlayerSpecificSettings get_playerSettings()
    // Offset: 0xF10140
    GlobalNamespace::PlayerSpecificSettings* get_playerSettings();
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0xF1015C
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // public OverrideEnvironmentSettings get_environmentOverrideSettings()
    // Offset: 0xF10178
    GlobalNamespace::OverrideEnvironmentSettings* get_environmentOverrideSettings();
    // public ColorSchemesSettings get_colorSchemesSettings()
    // Offset: 0xF101A0
    GlobalNamespace::ColorSchemesSettings* get_colorSchemesSettings();
    // public System.Void Setup(System.Boolean showModifiers, System.Boolean showEnvironmentOverrideSettings, System.Boolean showColorSchemesSettings, System.Boolean multiplayer)
    // Offset: 0xF101C8
    void Setup(bool showModifiers, bool showEnvironmentOverrideSettings, bool showColorSchemesSettings, bool multiplayer);
    // private System.Void Init()
    // Offset: 0xF10260
    void Init();
    // protected System.Void OnDisable()
    // Offset: 0xF10908
    void OnDisable();
    // private System.Void HandleSelectionSegmentedControlDidSelectCell(HMUI.SegmentedControl segmentedControl, System.Int32 cellIdx)
    // Offset: 0xF109F0
    void HandleSelectionSegmentedControlDidSelectCell(HMUI::SegmentedControl* segmentedControl, int cellIdx);
    // private System.Void HandlePlayerSettingsPanelControllerDidChangePlayerSettings()
    // Offset: 0xF109F8
    void HandlePlayerSettingsPanelControllerDidChangePlayerSettings();
    // private System.Void HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers()
    // Offset: 0xF10A40
    void HandleGameplayModifiersPanelControllerDidChangeGameplayModifiers();
    // private System.Void SetActivePanel(System.Int32 panelIdx)
    // Offset: 0xF10850
    void SetActivePanel(int panelIdx);
    // private System.Void RefreshContent()
    // Offset: 0xF10304
    void RefreshContent();
    // private System.Void RefreshActivePanel()
    // Offset: 0xF10A9C
    void RefreshActivePanel();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF10700
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // public System.Void .ctor()
    // Offset: 0xF10BEC
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplaySetupViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplaySetupViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplaySetupViewController*, creationType>()));
    }
  }; // GameplaySetupViewController
  static check_size<sizeof(GameplaySetupViewController), 184 + sizeof(bool)> __GlobalNamespace_GameplaySetupViewControllerSizeCheck;
  static_assert(sizeof(GameplaySetupViewController) == 0xB9);
}
#pragma pack(pop)
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplaySetupViewController*, "", "GameplaySetupViewController");
