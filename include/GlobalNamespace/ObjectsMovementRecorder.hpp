// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PoseObject
  class PoseObject;
  // Forward declaring type: PoseObjectIdSO
  class PoseObjectIdSO;
  // Forward declaring type: PosesRecorder
  class PosesRecorder;
  // Forward declaring type: PosesPlayback
  class PosesPlayback;
  // Forward declaring type: PlaybackScreenshotRecorder
  class PlaybackScreenshotRecorder;
  // Forward declaring type: PlaybackRenderer
  class PlaybackRenderer;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ObjectsMovementRecorder
  class ObjectsMovementRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ObjectsMovementRecorder);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectsMovementRecorder*, "", "ObjectsMovementRecorder");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: ObjectsMovementRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 12382EC
  class ObjectsMovementRecorder : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ObjectsMovementRecorder::Mode
    struct Mode;
    // Nested type: ::GlobalNamespace::ObjectsMovementRecorder::CameraView
    struct CameraView;
    // Nested type: ::GlobalNamespace::ObjectsMovementRecorder::InitData
    class InitData;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ObjectsMovementRecorder/Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ObjectsMovementRecorder/Mode Record
      static constexpr const int Record = 0;
      // Get static field: static public ObjectsMovementRecorder/Mode Record
      static ::GlobalNamespace::ObjectsMovementRecorder::Mode _get_Record();
      // Set static field: static public ObjectsMovementRecorder/Mode Record
      static void _set_Record(::GlobalNamespace::ObjectsMovementRecorder::Mode value);
      // static field const value: static public ObjectsMovementRecorder/Mode Playback
      static constexpr const int Playback = 1;
      // Get static field: static public ObjectsMovementRecorder/Mode Playback
      static ::GlobalNamespace::ObjectsMovementRecorder::Mode _get_Playback();
      // Set static field: static public ObjectsMovementRecorder/Mode Playback
      static void _set_Playback(::GlobalNamespace::ObjectsMovementRecorder::Mode value);
      // static field const value: static public ObjectsMovementRecorder/Mode Off
      static constexpr const int Off = 2;
      // Get static field: static public ObjectsMovementRecorder/Mode Off
      static ::GlobalNamespace::ObjectsMovementRecorder::Mode _get_Off();
      // Set static field: static public ObjectsMovementRecorder/Mode Off
      static void _set_Off(::GlobalNamespace::ObjectsMovementRecorder::Mode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // ObjectsMovementRecorder/Mode
    #pragma pack(pop)
    static check_size<sizeof(ObjectsMovementRecorder::Mode), 0 + sizeof(int)> __GlobalNamespace_ObjectsMovementRecorder_ModeSizeCheck;
    static_assert(sizeof(ObjectsMovementRecorder::Mode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ObjectsMovementRecorder/CameraView
    // [TokenAttribute] Offset: FFFFFFFF
    struct CameraView/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CameraView
      constexpr CameraView(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ObjectsMovementRecorder/CameraView FirstPerson
      static constexpr const int FirstPerson = 0;
      // Get static field: static public ObjectsMovementRecorder/CameraView FirstPerson
      static ::GlobalNamespace::ObjectsMovementRecorder::CameraView _get_FirstPerson();
      // Set static field: static public ObjectsMovementRecorder/CameraView FirstPerson
      static void _set_FirstPerson(::GlobalNamespace::ObjectsMovementRecorder::CameraView value);
      // static field const value: static public ObjectsMovementRecorder/CameraView ThirdPerson
      static constexpr const int ThirdPerson = 1;
      // Get static field: static public ObjectsMovementRecorder/CameraView ThirdPerson
      static ::GlobalNamespace::ObjectsMovementRecorder::CameraView _get_ThirdPerson();
      // Set static field: static public ObjectsMovementRecorder/CameraView ThirdPerson
      static void _set_ThirdPerson(::GlobalNamespace::ObjectsMovementRecorder::CameraView value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // ObjectsMovementRecorder/CameraView
    #pragma pack(pop)
    static check_size<sizeof(ObjectsMovementRecorder::CameraView), 0 + sizeof(int)> __GlobalNamespace_ObjectsMovementRecorder_CameraViewSizeCheck;
    static_assert(sizeof(ObjectsMovementRecorder::CameraView) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private PoseObject[] _poseObjects
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::PoseObject*> poseObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::PoseObject*>) == 0x8);
    // [SpaceAttribute] Offset: 0x124FD10
    // private PoseObjectIdSO _livPoseObjectId
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PoseObjectIdSO* livPoseObjectId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PoseObjectIdSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x124FD48
    // private PosesRecorder _recorder
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::PosesRecorder* recorder;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PosesRecorder*) == 0x8);
    // private PosesPlayback _playback
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::PosesPlayback* playback;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PosesPlayback*) == 0x8);
    // private PlaybackScreenshotRecorder _playbackScreenshotRecorder
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::PlaybackScreenshotRecorder* playbackScreenshotRecorder;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlaybackScreenshotRecorder*) == 0x8);
    // private PlaybackRenderer _playbackRender
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::PlaybackRenderer* playbackRender;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlaybackRenderer*) == 0x8);
    // [SpaceAttribute] Offset: 0x124FDB0
    // private UnityEngine.Camera _externalCameraPrefab
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Camera* externalCameraPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private UnityEngine.LayerMask _layerMask
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::LayerMask layerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: layerMask and: audioTimeSyncController
    char __padding7[0x4] = {};
    // [InjectAttribute] Offset: 0x124FDF8
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0x124FE08
    // private readonly UnityEngine.Camera _hmdCamera
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Camera* hmdCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // [InjectOptionalAttribute] Offset: 0x124FE18
    // private readonly ObjectsMovementRecorder/InitData _initData
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::ObjectsMovementRecorder::InitData* initData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::InitData*) == 0x8);
    // private ObjectsMovementRecorder/Mode _mode
    // Size: 0x4
    // Offset: 0x70
    ::GlobalNamespace::ObjectsMovementRecorder::Mode mode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::Mode) == 0x4);
    // private ObjectsMovementRecorder/CameraView _cameraView
    // Size: 0x4
    // Offset: 0x74
    ::GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::CameraView) == 0x4);
    // private System.String _recordingFileName
    // Size: 0x8
    // Offset: 0x78
    ::StringW recordingFileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Camera _externalCamera
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Camera* externalCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private PoseObject[] _poseObjects
    ::ArrayW<::GlobalNamespace::PoseObject*>& dyn__poseObjects();
    // Get instance field reference: private PoseObjectIdSO _livPoseObjectId
    ::GlobalNamespace::PoseObjectIdSO*& dyn__livPoseObjectId();
    // Get instance field reference: private PosesRecorder _recorder
    ::GlobalNamespace::PosesRecorder*& dyn__recorder();
    // Get instance field reference: private PosesPlayback _playback
    ::GlobalNamespace::PosesPlayback*& dyn__playback();
    // Get instance field reference: private PlaybackScreenshotRecorder _playbackScreenshotRecorder
    ::GlobalNamespace::PlaybackScreenshotRecorder*& dyn__playbackScreenshotRecorder();
    // Get instance field reference: private PlaybackRenderer _playbackRender
    ::GlobalNamespace::PlaybackRenderer*& dyn__playbackRender();
    // Get instance field reference: private UnityEngine.Camera _externalCameraPrefab
    ::UnityEngine::Camera*& dyn__externalCameraPrefab();
    // Get instance field reference: private UnityEngine.LayerMask _layerMask
    ::UnityEngine::LayerMask& dyn__layerMask();
    // Get instance field reference: private readonly AudioTimeSyncController _audioTimeSyncController
    ::GlobalNamespace::AudioTimeSyncController*& dyn__audioTimeSyncController();
    // Get instance field reference: private readonly UnityEngine.Camera _hmdCamera
    ::UnityEngine::Camera*& dyn__hmdCamera();
    // Get instance field reference: private readonly ObjectsMovementRecorder/InitData _initData
    ::GlobalNamespace::ObjectsMovementRecorder::InitData*& dyn__initData();
    // Get instance field reference: private ObjectsMovementRecorder/Mode _mode
    ::GlobalNamespace::ObjectsMovementRecorder::Mode& dyn__mode();
    // Get instance field reference: private ObjectsMovementRecorder/CameraView _cameraView
    ::GlobalNamespace::ObjectsMovementRecorder::CameraView& dyn__cameraView();
    // Get instance field reference: private System.String _recordingFileName
    ::StringW& dyn__recordingFileName();
    // Get instance field reference: private UnityEngine.Camera _externalCamera
    ::UnityEngine::Camera*& dyn__externalCamera();
    // public System.Void Init()
    // Offset: 0x2B31F10
    void Init();
    // protected System.Void OnDestroy()
    // Offset: 0x2B323D0
    void OnDestroy();
    // private System.Void HandleGameStateChanged()
    // Offset: 0x2B3255C
    void HandleGameStateChanged();
    // public System.Void .ctor()
    // Offset: 0x2B325E0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectsMovementRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ObjectsMovementRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectsMovementRecorder*, creationType>()));
    }
  }; // ObjectsMovementRecorder
  #pragma pack(pop)
  static check_size<sizeof(ObjectsMovementRecorder), 128 + sizeof(::UnityEngine::Camera*)> __GlobalNamespace_ObjectsMovementRecorderSizeCheck;
  static_assert(sizeof(ObjectsMovementRecorder) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectsMovementRecorder::CameraView, "", "ObjectsMovementRecorder/CameraView");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ObjectsMovementRecorder::Mode, "", "ObjectsMovementRecorder/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ObjectsMovementRecorder::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectsMovementRecorder::*)()>(&GlobalNamespace::ObjectsMovementRecorder::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectsMovementRecorder*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectsMovementRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectsMovementRecorder::*)()>(&GlobalNamespace::ObjectsMovementRecorder::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectsMovementRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectsMovementRecorder::HandleGameStateChanged
// Il2CppName: HandleGameStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ObjectsMovementRecorder::*)()>(&GlobalNamespace::ObjectsMovementRecorder::HandleGameStateChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ObjectsMovementRecorder*), "HandleGameStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ObjectsMovementRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
