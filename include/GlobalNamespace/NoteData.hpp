// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectType
  struct BeatmapObjectType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: NoteData
  class NoteData : public GlobalNamespace::BeatmapObjectData {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDCBF1C
    // private ColorType <colorType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::ColorType colorType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF2C
    // private NoteCutDirection <cutDirection>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    GlobalNamespace::NoteCutDirection cutDirection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteCutDirection) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF3C
    // private System.Single <timeToNextColorNote>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float timeToNextColorNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF4C
    // private System.Single <timeToPrevColorNote>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float timeToPrevColorNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF5C
    // private NoteLineLayer <noteLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::NoteLineLayer noteLineLayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteLineLayer) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF6C
    // private NoteLineLayer <startNoteLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    GlobalNamespace::NoteLineLayer startNoteLineLayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteLineLayer) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF7C
    // private System.Int32 <flipLineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    int flipLineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF8C
    // private System.Single <flipYSide>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float flipYSide;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBF9C
    // private System.Single <duration>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: NoteData
    NoteData(GlobalNamespace::ColorType colorType_ = {}, GlobalNamespace::NoteCutDirection cutDirection_ = {}, float timeToNextColorNote_ = {}, float timeToPrevColorNote_ = {}, GlobalNamespace::NoteLineLayer noteLineLayer_ = {}, GlobalNamespace::NoteLineLayer startNoteLineLayer_ = {}, int flipLineIndex_ = {}, float flipYSide_ = {}, float duration_ = {}) noexcept : colorType{colorType_}, cutDirection{cutDirection_}, timeToNextColorNote{timeToNextColorNote_}, timeToPrevColorNote{timeToPrevColorNote_}, noteLineLayer{noteLineLayer_}, startNoteLineLayer{startNoteLineLayer_}, flipLineIndex{flipLineIndex_}, flipYSide{flipYSide_}, duration{duration_} {}
    // public ColorType get_colorType()
    // Offset: 0x23DFFFC
    GlobalNamespace::ColorType get_colorType();
    // private System.Void set_colorType(ColorType value)
    // Offset: 0x23E0004
    void set_colorType(GlobalNamespace::ColorType value);
    // public NoteCutDirection get_cutDirection()
    // Offset: 0x23E000C
    GlobalNamespace::NoteCutDirection get_cutDirection();
    // private System.Void set_cutDirection(NoteCutDirection value)
    // Offset: 0x23E0014
    void set_cutDirection(GlobalNamespace::NoteCutDirection value);
    // public System.Single get_timeToNextColorNote()
    // Offset: 0x23E001C
    float get_timeToNextColorNote();
    // public System.Void set_timeToNextColorNote(System.Single value)
    // Offset: 0x23E0024
    void set_timeToNextColorNote(float value);
    // public System.Single get_timeToPrevColorNote()
    // Offset: 0x23E002C
    float get_timeToPrevColorNote();
    // public System.Void set_timeToPrevColorNote(System.Single value)
    // Offset: 0x23E0034
    void set_timeToPrevColorNote(float value);
    // public NoteLineLayer get_noteLineLayer()
    // Offset: 0x23E003C
    GlobalNamespace::NoteLineLayer get_noteLineLayer();
    // private System.Void set_noteLineLayer(NoteLineLayer value)
    // Offset: 0x23E0044
    void set_noteLineLayer(GlobalNamespace::NoteLineLayer value);
    // public NoteLineLayer get_startNoteLineLayer()
    // Offset: 0x23E004C
    GlobalNamespace::NoteLineLayer get_startNoteLineLayer();
    // private System.Void set_startNoteLineLayer(NoteLineLayer value)
    // Offset: 0x23E0054
    void set_startNoteLineLayer(GlobalNamespace::NoteLineLayer value);
    // public System.Int32 get_flipLineIndex()
    // Offset: 0x23E005C
    int get_flipLineIndex();
    // private System.Void set_flipLineIndex(System.Int32 value)
    // Offset: 0x23E0064
    void set_flipLineIndex(int value);
    // public System.Single get_flipYSide()
    // Offset: 0x23E006C
    float get_flipYSide();
    // private System.Void set_flipYSide(System.Single value)
    // Offset: 0x23E0074
    void set_flipYSide(float value);
    // public System.Single get_duration()
    // Offset: 0x23E007C
    float get_duration();
    // private System.Void set_duration(System.Single value)
    // Offset: 0x23E0084
    void set_duration(float value);
    // public System.Void .ctor(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, NoteLineLayer startNoteLineLayer, ColorType colorType, NoteCutDirection cutDirection, System.Single timeToNextColorNote, System.Single timeToPrevColorNote, System.Int32 flipLineIndex, System.Single flipYSide, System.Single duration)
    // Offset: 0x23E012C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteData* New_ctor(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::NoteLineLayer startNoteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection, float timeToNextColorNote, float timeToPrevColorNote, int flipLineIndex, float flipYSide, float duration) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteData*, creationType>(time, lineIndex, noteLineLayer, startNoteLineLayer, colorType, cutDirection, timeToNextColorNote, timeToPrevColorNote, flipLineIndex, flipYSide, duration)));
    }
    // static public NoteData CreateBombNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x23E01C8
    static GlobalNamespace::NoteData* CreateBombNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer);
    // static public NoteData CreateBasicNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, ColorType colorType, NoteCutDirection cutDirection)
    // Offset: 0x23E0264
    static GlobalNamespace::NoteData* CreateBasicNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection);
    // public System.Void SetNoteStartLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x23E030C
    void SetNoteStartLineLayer(GlobalNamespace::NoteLineLayer lineLayer);
    // public System.Void SetNoteFlipToNote(NoteData targetNote)
    // Offset: 0x23E0314
    void SetNoteFlipToNote(GlobalNamespace::NoteData* targetNote);
    // private System.Void SwitchNoteColorType()
    // Offset: 0x23E03CC
    void SwitchNoteColorType();
    // private System.Void MirrorTransformCutDirection()
    // Offset: 0x23E03F0
    void MirrorTransformCutDirection();
    // public System.Void SetNoteToAnyCutDirection()
    // Offset: 0x23E0414
    void SetNoteToAnyCutDirection();
    // public System.Void ChangeNoteCutDirection(NoteCutDirection newCutDirection)
    // Offset: 0x23E0420
    void ChangeNoteCutDirection(GlobalNamespace::NoteCutDirection newCutDirection);
    // public System.Void TransformNoteAOrBToRandomType()
    // Offset: 0x23E0428
    void TransformNoteAOrBToRandomType();
    // public override BeatmapObjectType get_beatmapObjectType()
    // Offset: 0x23DFFF4
    // Implemented from: BeatmapObjectData
    // Base method: BeatmapObjectType BeatmapObjectData::get_beatmapObjectType()
    GlobalNamespace::BeatmapObjectType get_beatmapObjectType();
    // public override BeatmapObjectData GetCopy()
    // Offset: 0x23E008C
    // Implemented from: BeatmapObjectData
    // Base method: BeatmapObjectData BeatmapObjectData::GetCopy()
    GlobalNamespace::BeatmapObjectData* GetCopy();
    // public override System.Void MirrorLineIndex(System.Int32 lineCount)
    // Offset: 0x23E0390
    // Implemented from: BeatmapObjectData
    // Base method: System.Void BeatmapObjectData::MirrorLineIndex(System.Int32 lineCount)
    void MirrorLineIndex(int lineCount);
  }; // NoteData
  #pragma pack(pop)
  static check_size<sizeof(NoteData), 56 + sizeof(float)> __GlobalNamespace_NoteDataSizeCheck;
  static_assert(sizeof(NoteData) == 0x3C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteData*, "", "NoteData");
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_colorType
// Il2CppName: get_colorType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_colorType
// Il2CppName: set_colorType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_cutDirection
// Il2CppName: get_cutDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_cutDirection
// Il2CppName: set_cutDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_timeToNextColorNote
// Il2CppName: get_timeToNextColorNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_timeToNextColorNote
// Il2CppName: set_timeToNextColorNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_timeToPrevColorNote
// Il2CppName: get_timeToPrevColorNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_timeToPrevColorNote
// Il2CppName: set_timeToPrevColorNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_noteLineLayer
// Il2CppName: get_noteLineLayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_noteLineLayer
// Il2CppName: set_noteLineLayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_startNoteLineLayer
// Il2CppName: get_startNoteLineLayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_startNoteLineLayer
// Il2CppName: set_startNoteLineLayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_flipLineIndex
// Il2CppName: get_flipLineIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_flipLineIndex
// Il2CppName: set_flipLineIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_flipYSide
// Il2CppName: get_flipYSide
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_flipYSide
// Il2CppName: set_flipYSide
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_duration
// Il2CppName: get_duration
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_duration
// Il2CppName: set_duration
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBombNoteData
// Il2CppName: CreateBombNoteData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBasicNoteData
// Il2CppName: CreateBasicNoteData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteStartLineLayer
// Il2CppName: SetNoteStartLineLayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteFlipToNote
// Il2CppName: SetNoteFlipToNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SwitchNoteColorType
// Il2CppName: SwitchNoteColorType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::MirrorTransformCutDirection
// Il2CppName: MirrorTransformCutDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteToAnyCutDirection
// Il2CppName: SetNoteToAnyCutDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeNoteCutDirection
// Il2CppName: ChangeNoteCutDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::TransformNoteAOrBToRandomType
// Il2CppName: TransformNoteAOrBToRandomType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::GetCopy
// Il2CppName: GetCopy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::MirrorLineIndex
// Il2CppName: MirrorLineIndex
// Cannot perform method pointer template specialization from operators!
