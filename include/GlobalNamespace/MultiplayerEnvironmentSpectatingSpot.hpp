// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerSpectatingSpotManager
  class MultiplayerSpectatingSpotManager;
  // Forward declaring type: MultiplayerActivePlayersTimeOffsetAverage
  class MultiplayerActivePlayersTimeOffsetAverage;
  // Forward declaring type: IMultiplayerObservable
  class IMultiplayerObservable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerEnvironmentSpectatingSpot
  // [] Offset: FFFFFFFF
  class MultiplayerEnvironmentSpectatingSpot : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IMultiplayerSpectatingSpot*/ {
    public:
    // private System.Boolean _preferredSpectatingSpot
    // Size: 0x1
    // Offset: 0x18
    bool preferredSpectatingSpot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _displaySpotNumber
    // Size: 0x1
    // Offset: 0x19
    bool displaySpotNumber;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: displaySpotNumber and: spotNumber
    char __padding1[0x2] = {};
    // [DrawIfAttribute] Offset: 0xD289DC
    // private System.Int32 _spotNumber
    // Size: 0x4
    // Offset: 0x1C
    int spotNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [InjectAttribute] Offset: 0xD28A84
    // private readonly MultiplayerSpectatingSpotManager _spectatingSpotManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerSpectatingSpotManager* spectatingSpotManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerSpectatingSpotManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD28A94
    // private readonly MultiplayerActivePlayersTimeOffsetAverage _activePlayersTimeOffsetAverage
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage* activePlayersTimeOffsetAverage;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD28AA4
    // private System.Action`1<IMultiplayerSpectatingSpot> hasBeenRemovedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* hasBeenRemovedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*) == 0x8);
    // Creating value type constructor for type: MultiplayerEnvironmentSpectatingSpot
    MultiplayerEnvironmentSpectatingSpot(bool preferredSpectatingSpot_ = {}, bool displaySpotNumber_ = {}, int spotNumber_ = {}, GlobalNamespace::MultiplayerSpectatingSpotManager* spectatingSpotManager_ = {}, GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage* activePlayersTimeOffsetAverage_ = {}, System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* hasBeenRemovedEvent_ = {}) noexcept : preferredSpectatingSpot{preferredSpectatingSpot_}, displaySpotNumber{displaySpotNumber_}, spotNumber{spotNumber_}, spectatingSpotManager{spectatingSpotManager_}, activePlayersTimeOffsetAverage{activePlayersTimeOffsetAverage_}, hasBeenRemovedEvent{hasBeenRemovedEvent_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerSpectatingSpot
    operator GlobalNamespace::IMultiplayerSpectatingSpot() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerSpectatingSpot*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0xF3E3A4
    void add_hasBeenRemovedEvent_NEW(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void remove_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0xF3E448
    void remove_hasBeenRemovedEvent_NEW(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public IMultiplayerObservable get_observable()
    // Offset: 0xF3E4EC
    GlobalNamespace::IMultiplayerObservable* get_observable_NEW();
    // public System.String get_spotName()
    // Offset: 0xF3E4F4
    ::Il2CppString* get_spotName_NEW();
    // public System.Boolean get_isMain()
    // Offset: 0xF3E5A0
    bool get_isMain_NEW();
    // protected System.Void Start()
    // Offset: 0xF3E5A8
    void Start();
    // protected System.Void OnDisable()
    // Offset: 0xF3E5C8
    void OnDisable();
    // public System.Void SetIsObserved(System.Boolean isObserved)
    // Offset: 0xF3E62C
    void SetIsObserved_NEW(bool isObserved);
    // private UnityEngine.Transform IMultiplayerSpectatingSpot.get_transform()
    // Offset: 0xF3E638
    UnityEngine::Transform* IMultiplayerSpectatingSpot_get_transform_NEW();
    // public System.Void .ctor()
    // Offset: 0xF3E630
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerEnvironmentSpectatingSpot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentSpectatingSpot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerEnvironmentSpectatingSpot*, creationType>()));
    }
  }; // MultiplayerEnvironmentSpectatingSpot
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerEnvironmentSpectatingSpot), 48 + sizeof(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*)> __GlobalNamespace_MultiplayerEnvironmentSpectatingSpotSizeCheck;
  static_assert(sizeof(MultiplayerEnvironmentSpectatingSpot) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerEnvironmentSpectatingSpot*, "", "MultiplayerEnvironmentSpectatingSpot");
