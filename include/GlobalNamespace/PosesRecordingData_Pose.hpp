// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PosesRecordingData
#include "GlobalNamespace/PosesRecordingData.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Pose
  struct Pose;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PosesRecordingData::Pose, "", "PosesRecordingData/Pose");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: PosesRecordingData/Pose
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct PosesRecordingData::Pose/*, public System::ValueType*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public readonly UnityEngine.Vector3 pos
    // Size: 0xC
    // Offset: 0x0
    UnityEngine::Vector3 pos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Quaternion rot
    // Size: 0x10
    // Offset: 0xC
    UnityEngine::Quaternion rot;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    public:
    // Creating value type constructor for type: Pose
    constexpr Pose(UnityEngine::Vector3 pos_ = {}, UnityEngine::Quaternion rot_ = {}) noexcept : pos{pos_}, rot{rot_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public readonly UnityEngine.Vector3 pos
    UnityEngine::Vector3& dyn_pos();
    // Get instance field reference: public readonly UnityEngine.Quaternion rot
    UnityEngine::Quaternion& dyn_rot();
    // public System.Void .ctor(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x11AE300
    // ABORTED: conflicts with another method.  Pose(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot);
    // static public PosesRecordingData/Pose Lerp(PosesRecordingData/Pose a, PosesRecordingData/Pose b, System.Single t)
    // Offset: 0x11ADDC8
    static GlobalNamespace::PosesRecordingData::Pose Lerp(GlobalNamespace::PosesRecordingData::Pose a, GlobalNamespace::PosesRecordingData::Pose b, float t);
  }; // PosesRecordingData/Pose
  #pragma pack(pop)
  static check_size<sizeof(PosesRecordingData::Pose), 12 + sizeof(UnityEngine::Quaternion)> __GlobalNamespace_PosesRecordingData_PoseSizeCheck;
  static_assert(sizeof(PosesRecordingData::Pose) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingData::Pose::Pose
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingData::Pose::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PosesRecordingData::Pose (*)(GlobalNamespace::PosesRecordingData::Pose, GlobalNamespace::PosesRecordingData::Pose, float)>(&GlobalNamespace::PosesRecordingData::Pose::Lerp)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/Pose")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/Pose")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingData::Pose), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
