// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerScoreRingItem
#include "GlobalNamespace/MultiplayerScoreRingItem.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: BeatmapObjectSpawnCenter
  class BeatmapObjectSpawnCenter;
  // Forward declaring type: MultiplayerLayoutProvider
  class MultiplayerLayoutProvider;
  // Forward declaring type: MultiplayerScoreProvider
  class MultiplayerScoreProvider;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: EaseType
  struct EaseType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7A
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerScoreRingManager
  class MultiplayerScoreRingManager : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _delayBetweenScoreUpdates
    // Size: 0x4
    // Offset: 0x18
    float delayBetweenScoreUpdates;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _centerDistanceOffset
    // Size: 0x4
    // Offset: 0x1C
    float centerDistanceOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InjectAttribute] Offset: 0xE1ED18
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerController*) == 0x8);
    // [InjectAttribute] Offset: 0xE1ED28
    // private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE1ED38
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE1ED48
    // private readonly BeatmapObjectSpawnCenter _spawnCenter
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::BeatmapObjectSpawnCenter* spawnCenter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnCenter*) == 0x8);
    // [InjectAttribute] Offset: 0xE1ED58
    // private readonly MultiplayerLayoutProvider _layoutProvider
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::MultiplayerLayoutProvider* layoutProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLayoutProvider*) == 0x8);
    // [InjectAttribute] Offset: 0xE1ED68
    // private readonly MultiplayerScoreProvider _scoreProvider
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::MultiplayerScoreProvider* scoreProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreProvider*) == 0x8);
    // [InjectAttribute] Offset: 0xE1ED78
    // private readonly MultiplayerScoreRingItem/Pool _scoreRingItemPool
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::MultiplayerScoreRingItem::Pool* scoreRingItemPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreRingItem::Pool*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerScoreRingItem> _scoreRingItems
    // Size: 0x8
    // Offset: 0x58
    System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreRingItem*>* scoreRingItems;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreRingItem*>*) == 0x8);
    // private System.Collections.Generic.List`1<IConnectedPlayer> _allActivePlayers
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* allActivePlayers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // private System.Int32 _currentlyScoreUpdateIndex
    // Size: 0x4
    // Offset: 0x68
    int currentlyScoreUpdateIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _timeSinceLastScoreUpdate
    // Size: 0x4
    // Offset: 0x6C
    float timeSinceLastScoreUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private MultiplayerScoreRingItem _firstPlayerItem
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::MultiplayerScoreRingItem* firstPlayerItem;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreRingItem*) == 0x8);
    // private System.Boolean _spawnCenterDistanceFound
    // Size: 0x1
    // Offset: 0x78
    bool spawnCenterDistanceFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _playersSpawned
    // Size: 0x1
    // Offset: 0x79
    bool playersSpawned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MultiplayerScoreRingManager
    MultiplayerScoreRingManager(float delayBetweenScoreUpdates_ = {}, float centerDistanceOffset_ = {}, GlobalNamespace::MultiplayerController* multiplayerController_ = {}, GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::BeatmapObjectSpawnCenter* spawnCenter_ = {}, GlobalNamespace::MultiplayerLayoutProvider* layoutProvider_ = {}, GlobalNamespace::MultiplayerScoreProvider* scoreProvider_ = {}, GlobalNamespace::MultiplayerScoreRingItem::Pool* scoreRingItemPool_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreRingItem*>* scoreRingItems_ = {}, System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* allActivePlayers_ = {}, int currentlyScoreUpdateIndex_ = {}, float timeSinceLastScoreUpdate_ = {}, GlobalNamespace::MultiplayerScoreRingItem* firstPlayerItem_ = {}, bool spawnCenterDistanceFound_ = {}, bool playersSpawned_ = {}) noexcept : delayBetweenScoreUpdates{delayBetweenScoreUpdates_}, centerDistanceOffset{centerDistanceOffset_}, multiplayerController{multiplayerController_}, multiplayerPlayersManager{multiplayerPlayersManager_}, multiplayerSessionManager{multiplayerSessionManager_}, spawnCenter{spawnCenter_}, layoutProvider{layoutProvider_}, scoreProvider{scoreProvider_}, scoreRingItemPool{scoreRingItemPool_}, scoreRingItems{scoreRingItems_}, allActivePlayers{allActivePlayers_}, currentlyScoreUpdateIndex{currentlyScoreUpdateIndex_}, timeSinceLastScoreUpdate{timeSinceLastScoreUpdate_}, firstPlayerItem{firstPlayerItem_}, spawnCenterDistanceFound{spawnCenterDistanceFound_}, playersSpawned{playersSpawned_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x23E5D88
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x23E6458
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x23E6778
    void Update();
    // private System.Void UpdateScore(IConnectedPlayer playerToUpdate)
    // Offset: 0x23E685C
    void UpdateScore(GlobalNamespace::IConnectedPlayer* playerToUpdate);
    // public System.Void AnimateColorsForPlayer(System.String userId, UnityEngine.Color nameColor, UnityEngine.Color scoreColor, System.Single duration, Tweening.EaseType easeType)
    // Offset: 0x23E6A40
    void AnimateColorsForPlayer(::Il2CppString* userId, UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType);
    // public MultiplayerScoreRingItem GetScoreRingItem(System.String userId)
    // Offset: 0x23E6BAC
    GlobalNamespace::MultiplayerScoreRingItem* GetScoreRingItem(::Il2CppString* userId);
    // public UnityEngine.GameObject[] GetScoreRingItems()
    // Offset: 0x23DDA54
    ::Array<UnityEngine::GameObject*>* GetScoreRingItems();
    // public System.Void AnimateColorsForAllPlayers(UnityEngine.Color nameColor, UnityEngine.Color scoreColor, System.Single duration, Tweening.EaseType easeType)
    // Offset: 0x23E6C9C
    void AnimateColorsForAllPlayers(UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType);
    // private System.Void SetPlayerToFailedState(IConnectedPlayer player)
    // Offset: 0x23E6E14
    void SetPlayerToFailedState(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void TrySpawnTexts()
    // Offset: 0x23E6F24
    void TrySpawnTexts();
    // private System.Void SpawnTexts()
    // Offset: 0x23E6F3C
    void SpawnTexts();
    // private System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0x23E5F44
    void HandleStateChanged(GlobalNamespace::MultiplayerController::State state);
    // private System.Void HandleSpawnCenterDistanceWasFound(System.Single spawnCenterDistance)
    // Offset: 0x23E5F14
    void HandleSpawnCenterDistanceWasFound(float spawnCenterDistance);
    // private System.Void HandlePlayerSpawningDidFinish()
    // Offset: 0x23E5F2C
    void HandlePlayerSpawningDidFinish();
    // private System.Void HandlePlayerStateChanged(IConnectedPlayer player)
    // Offset: 0x23E7574
    void HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandlePlayerDisconnected(IConnectedPlayer player)
    // Offset: 0x23E75B8
    void HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player);
    // public System.Void .ctor()
    // Offset: 0x23E75BC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerScoreRingManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerScoreRingManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerScoreRingManager*, creationType>()));
    }
  }; // MultiplayerScoreRingManager
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerScoreRingManager), 121 + sizeof(bool)> __GlobalNamespace_MultiplayerScoreRingManagerSizeCheck;
  static_assert(sizeof(MultiplayerScoreRingManager) == 0x7A);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerScoreRingManager*, "", "MultiplayerScoreRingManager");
