// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: PublicServerInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct PublicServerInfo/*, public System::ValueType*/ {
    public:
    // public readonly System.String serverName
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* serverName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public readonly System.String code
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppString* code;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public readonly System.Int32 currentPlayerCount
    // Size: 0x4
    // Offset: 0x10
    int currentPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Boolean hasPassword
    // Size: 0x1
    // Offset: 0x14
    bool hasPassword;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasPassword and: selectionMask
    char __padding3[0x3] = {};
    // public readonly BeatmapLevelSelectionMask selectionMask
    // Size: 0x18
    // Offset: 0x18
    GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // public readonly GameplayServerConfiguration configuration
    // Size: 0x18
    // Offset: 0x30
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // Creating value type constructor for type: PublicServerInfo
    constexpr PublicServerInfo(::Il2CppString* serverName_ = {}, ::Il2CppString* code_ = {}, int currentPlayerCount_ = {}, bool hasPassword_ = {}, GlobalNamespace::BeatmapLevelSelectionMask selectionMask_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}) noexcept : serverName{serverName_}, code{code_}, currentPlayerCount{currentPlayerCount_}, hasPassword{hasPassword_}, selectionMask{selectionMask_}, configuration{configuration_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public readonly System.String serverName
    ::Il2CppString* _get_serverName();
    // Set instance field: public readonly System.String serverName
    void _set_serverName(::Il2CppString* value);
    // Get instance field: public readonly System.String code
    ::Il2CppString* _get_code();
    // Set instance field: public readonly System.String code
    void _set_code(::Il2CppString* value);
    // Get instance field: public readonly System.Int32 currentPlayerCount
    int _get_currentPlayerCount();
    // Set instance field: public readonly System.Int32 currentPlayerCount
    void _set_currentPlayerCount(int value);
    // Get instance field: public readonly System.Boolean hasPassword
    bool _get_hasPassword();
    // Set instance field: public readonly System.Boolean hasPassword
    void _set_hasPassword(bool value);
    // Get instance field: public readonly BeatmapLevelSelectionMask selectionMask
    GlobalNamespace::BeatmapLevelSelectionMask _get_selectionMask();
    // Set instance field: public readonly BeatmapLevelSelectionMask selectionMask
    void _set_selectionMask(GlobalNamespace::BeatmapLevelSelectionMask value);
    // Get instance field: public readonly GameplayServerConfiguration configuration
    GlobalNamespace::GameplayServerConfiguration _get_configuration();
    // Set instance field: public readonly GameplayServerConfiguration configuration
    void _set_configuration(GlobalNamespace::GameplayServerConfiguration value);
    // public System.Void .ctor(System.String serverName, System.String code, System.Int32 currentPlayerCount, System.Boolean hasPassword, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
    // Offset: 0xF8C4F8
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  PublicServerInfo(::Il2CppString* serverName, ::Il2CppString* code, int currentPlayerCount, bool hasPassword, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration)
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer, System.UInt32 version)
    // Offset: 0xF8C550
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer, uint version);
    // static public PublicServerInfo Deserialize(LiteNetLib.Utils.NetDataReader reader, System.UInt32 version)
    // Offset: 0x23CEE00
    static GlobalNamespace::PublicServerInfo Deserialize(LiteNetLib::Utils::NetDataReader* reader, uint version);
  }; // PublicServerInfo
  #pragma pack(pop)
  static check_size<sizeof(PublicServerInfo), 48 + sizeof(GlobalNamespace::GameplayServerConfiguration)> __GlobalNamespace_PublicServerInfoSizeCheck;
  static_assert(sizeof(PublicServerInfo) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PublicServerInfo, "", "PublicServerInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PublicServerInfo::PublicServerInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PublicServerInfo::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PublicServerInfo::*)(LiteNetLib::Utils::NetDataWriter*, uint)>(&GlobalNamespace::PublicServerInfo::Serialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PublicServerInfo), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, version});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PublicServerInfo::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PublicServerInfo (*)(LiteNetLib::Utils::NetDataReader*, uint)>(&GlobalNamespace::PublicServerInfo::Deserialize)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PublicServerInfo), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, version});
  }
};
