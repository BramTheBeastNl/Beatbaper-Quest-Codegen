// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
  // Forward declaring type: RandomObjectPicker`1<T>
  template<typename T>
  class RandomObjectPicker_1;
  // Forward declaring type: DirectionalLight
  class DirectionalLight;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: FireworkItemController
  // [] Offset: FFFFFFFF
  class FireworkItemController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::FireworkItemController::Pool
    class Pool;
    // Nested type: GlobalNamespace::FireworkItemController::$FireCoroutine$d__28
    class $FireCoroutine$d__28;
    // private TubeBloomPrePassLight[] _lights
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::TubeBloomPrePassLight*>* lights;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TubeBloomPrePassLight*>*) == 0x8);
    // private UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // [SpaceAttribute] Offset: 0xD23F3C
    // private System.Int32 _numberOfParticles
    // Size: 0x4
    // Offset: 0x30
    int numberOfParticles;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _lightFlashDuration
    // Size: 0x4
    // Offset: 0x34
    float lightFlashDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _lightIntensityCurve
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::AnimationCurve* lightIntensityCurve;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _lightIntensityMultiplier
    // Size: 0x4
    // Offset: 0x40
    float lightIntensityMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xD23FA4
    // private System.Boolean _randomizeColor
    // Size: 0x1
    // Offset: 0x44
    bool randomizeColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: randomizeColor and: lightsColor
    char __padding7[0x3] = {};
    // [DrawIfAttribute] Offset: 0xD23FF0
    // private UnityEngine.Color _lightsColor
    // Size: 0x10
    // Offset: 0x48
    UnityEngine::Color lightsColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [DrawIfAttribute] Offset: 0xD24094
    // private UnityEngine.Gradient _lightsColorGradient
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Gradient* lightsColorGradient;
    // Field size check
    static_assert(sizeof(UnityEngine::Gradient*) == 0x8);
    // [SpaceAttribute] Offset: 0xD2413C
    // private System.Boolean _randomizeSpeed
    // Size: 0x1
    // Offset: 0x60
    bool randomizeSpeed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: randomizeSpeed and: minSpeed
    char __padding10[0x3] = {};
    // [DrawIfAttribute] Offset: 0xD24174
    // private System.Single _minSpeed
    // Size: 0x4
    // Offset: 0x64
    float minSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0xD2421C
    // private System.Single _maxSpeed
    // Size: 0x4
    // Offset: 0x68
    float maxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxSpeed and: explosionClips
    char __padding12[0x4] = {};
    // private UnityEngine.AudioClip[] _explosionClips
    // Size: 0x8
    // Offset: 0x70
    ::Array<UnityEngine::AudioClip*>* explosionClips;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::AudioClip*>*) == 0x8);
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _randomAudioPicker
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* randomAudioPicker;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>*) == 0x8);
    // private DirectionalLight _directionalLight
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::DirectionalLight* directionalLight;
    // Field size check
    static_assert(sizeof(GlobalNamespace::DirectionalLight*) == 0x8);
    // private System.Single _directionalLightIntensity
    // Size: 0x4
    // Offset: 0x88
    float directionalLightIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: directionalLightIntensity and: didFinishEvent
    char __padding16[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD242D4
    // private System.Action`1<FireworkItemController> didFinishEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action_1<GlobalNamespace::FireworkItemController*>* didFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::FireworkItemController*>*) == 0x8);
    // Creating value type constructor for type: FireworkItemController
    FireworkItemController(::Array<GlobalNamespace::TubeBloomPrePassLight*>* lights_ = {}, UnityEngine::ParticleSystem* particleSystem_ = {}, UnityEngine::AudioSource* audioSource_ = {}, int numberOfParticles_ = {}, float lightFlashDuration_ = {}, UnityEngine::AnimationCurve* lightIntensityCurve_ = {}, float lightIntensityMultiplier_ = {}, bool randomizeColor_ = {}, UnityEngine::Color lightsColor_ = {}, UnityEngine::Gradient* lightsColorGradient_ = {}, bool randomizeSpeed_ = {}, float minSpeed_ = {}, float maxSpeed_ = {}, ::Array<UnityEngine::AudioClip*>* explosionClips_ = {}, GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* randomAudioPicker_ = {}, GlobalNamespace::DirectionalLight* directionalLight_ = {}, float directionalLightIntensity_ = {}, System::Action_1<GlobalNamespace::FireworkItemController*>* didFinishEvent_ = {}) noexcept : lights{lights_}, particleSystem{particleSystem_}, audioSource{audioSource_}, numberOfParticles{numberOfParticles_}, lightFlashDuration{lightFlashDuration_}, lightIntensityCurve{lightIntensityCurve_}, lightIntensityMultiplier{lightIntensityMultiplier_}, randomizeColor{randomizeColor_}, lightsColor{lightsColor_}, lightsColorGradient{lightsColorGradient_}, randomizeSpeed{randomizeSpeed_}, minSpeed{minSpeed_}, maxSpeed{maxSpeed_}, explosionClips{explosionClips_}, randomAudioPicker{randomAudioPicker_}, directionalLight{directionalLight_}, directionalLightIntensity{directionalLightIntensity_}, didFinishEvent{didFinishEvent_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void set_directionalLight(DirectionalLight value)
    // Offset: 0xF19E98
    void set_directionalLight(GlobalNamespace::DirectionalLight* value);
    // public System.Void set_directionalLightIntensity(System.Single value)
    // Offset: 0xF19EA0
    void set_directionalLightIntensity(float value);
    // public System.Void add_didFinishEvent(System.Action`1<FireworkItemController> value)
    // Offset: 0xF19EA8
    void add_didFinishEvent(System::Action_1<GlobalNamespace::FireworkItemController*>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<FireworkItemController> value)
    // Offset: 0xF19F4C
    void remove_didFinishEvent(System::Action_1<GlobalNamespace::FireworkItemController*>* value);
    // protected System.Void Awake()
    // Offset: 0xF19FF0
    void Awake();
    // protected System.Void OnDisable()
    // Offset: 0xF1A070
    void OnDisable();
    // public System.Void Fire()
    // Offset: 0xF1A230
    void Fire();
    // private System.Collections.IEnumerator FireCoroutine()
    // Offset: 0xF1A25C
    System::Collections::IEnumerator* FireCoroutine();
    // private System.Void SetLightsColor(System.Single intensity)
    // Offset: 0xF1A0FC
    void SetLightsColor(float intensity);
    // private System.Void PlayExplosionSound()
    // Offset: 0xF1A2F8
    void PlayExplosionSound();
    // private System.Void InitializeParticleSystem()
    // Offset: 0xF1A3E4
    void InitializeParticleSystem();
    // public System.Void .ctor()
    // Offset: 0xF1A534
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FireworkItemController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FireworkItemController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FireworkItemController*, creationType>()));
    }
  }; // FireworkItemController
  #pragma pack(pop)
  static check_size<sizeof(FireworkItemController), 144 + sizeof(System::Action_1<GlobalNamespace::FireworkItemController*>*)> __GlobalNamespace_FireworkItemControllerSizeCheck;
  static_assert(sizeof(FireworkItemController) == 0x98);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FireworkItemController*, "", "FireworkItemController");
