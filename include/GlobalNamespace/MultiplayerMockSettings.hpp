// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockPlayer
  class MockPlayer;
  // Forward declaring type: MockServer
  class MockServer;
  // Forward declaring type: MasterServerAvailabilityData
  class MasterServerAvailabilityData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerMockSettings
  class MultiplayerMockSettings : public UnityEngine::ScriptableObject {
    public:
    // Nested type: GlobalNamespace::MultiplayerMockSettings::$get_mockServers$d__21
    class $get_mockServers$d__21;
    // private System.Boolean _isEnabled
    // Offset: 0x18
    bool isEnabled;
    // private System.Collections.Generic.List`1<MockPlayer> _otherPlayers
    // Offset: 0x20
    System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>* otherPlayers;
    // private MockPlayer _localPlayer
    // Offset: 0x28
    GlobalNamespace::MockPlayer* localPlayer;
    // private MockServer _mockServer
    // Offset: 0x30
    GlobalNamespace::MockServer* mockServer;
    // private System.Single _scoreGainAmount
    // Offset: 0x38
    float scoreGainAmount;
    // private System.Single _scoreGainRepeatInterval
    // Offset: 0x3C
    float scoreGainRepeatInterval;
    // private System.Single _scoreStartDelay
    // Offset: 0x40
    float scoreStartDelay;
    // private MasterServerAvailabilityData _masterServerAvailabilityData
    // Offset: 0x48
    GlobalNamespace::MasterServerAvailabilityData* masterServerAvailabilityData;
    // private System.Action partyCreatedEvent
    // Offset: 0x50
    System::Action* partyCreatedEvent;
    // private System.Action`1<MockPlayer> playerDidConnectEvent
    // Offset: 0x58
    System::Action_1<GlobalNamespace::MockPlayer*>* playerDidConnectEvent;
    // private System.Action`1<MockPlayer> playerDidDisconnectEvent
    // Offset: 0x60
    System::Action_1<GlobalNamespace::MockPlayer*>* playerDidDisconnectEvent;
    // private System.Action`1<MockPlayer> playerStateChangedEvent
    // Offset: 0x68
    System::Action_1<GlobalNamespace::MockPlayer*>* playerStateChangedEvent;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public MockPlayer get_localPlayer()
    // Offset: 0x204F494
    GlobalNamespace::MockPlayer* get_localPlayer();
    // public System.Single get_scoreGainAmount()
    // Offset: 0x204F598
    float get_scoreGainAmount();
    // public System.Single get_scoreGainRepeatInterval()
    // Offset: 0x204F5A0
    float get_scoreGainRepeatInterval();
    // public System.Single get_scoreStartDelay()
    // Offset: 0x204F5A8
    float get_scoreStartDelay();
    // public MasterServerAvailabilityData get_masterServerAvailabilityData()
    // Offset: 0x204F5B0
    GlobalNamespace::MasterServerAvailabilityData* get_masterServerAvailabilityData();
    // public System.Collections.Generic.List`1<MockPlayer> get_otherPlayers()
    // Offset: 0x204F5B8
    System::Collections::Generic::List_1<GlobalNamespace::MockPlayer*>* get_otherPlayers();
    // public System.Collections.Generic.IEnumerable`1<MockServer> get_mockServers()
    // Offset: 0x204F5C0
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::MockServer*>* get_mockServers();
    // public MockServer get_mockServer()
    // Offset: 0x204F684
    GlobalNamespace::MockServer* get_mockServer();
    // public System.Void add_partyCreatedEvent(System.Action value)
    // Offset: 0x204F68C
    void add_partyCreatedEvent(System::Action* value);
    // public System.Void remove_partyCreatedEvent(System.Action value)
    // Offset: 0x204F730
    void remove_partyCreatedEvent(System::Action* value);
    // public System.Void add_playerDidConnectEvent(System.Action`1<MockPlayer> value)
    // Offset: 0x204F7D4
    void add_playerDidConnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value);
    // public System.Void remove_playerDidConnectEvent(System.Action`1<MockPlayer> value)
    // Offset: 0x204F878
    void remove_playerDidConnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value);
    // public System.Void add_playerDidDisconnectEvent(System.Action`1<MockPlayer> value)
    // Offset: 0x204F91C
    void add_playerDidDisconnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value);
    // public System.Void remove_playerDidDisconnectEvent(System.Action`1<MockPlayer> value)
    // Offset: 0x204F9C0
    void remove_playerDidDisconnectEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<MockPlayer> value)
    // Offset: 0x204FA64
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<MockPlayer> value)
    // Offset: 0x204FB08
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::MockPlayer*>* value);
    // public System.Boolean get_isEnabled()
    // Offset: 0x204FBAC
    bool get_isEnabled();
    // public System.Void set_isEnabled(System.Boolean value)
    // Offset: 0x204FBB4
    void set_isEnabled(bool value);
    // public System.Void CreateParty()
    // Offset: 0x204FBC0
    void CreateParty();
    // public System.Void ConnectPlayer(MockPlayer player)
    // Offset: 0x204FBD4
    void ConnectPlayer(GlobalNamespace::MockPlayer* player);
    // public System.Void DisconnectPlayer(MockPlayer player)
    // Offset: 0x204FC68
    void DisconnectPlayer(GlobalNamespace::MockPlayer* player);
    // public System.Void ReportPlayerStateChanged(MockPlayer player)
    // Offset: 0x204FD00
    void ReportPlayerStateChanged(GlobalNamespace::MockPlayer* player);
    // public System.Void FailPlayer(MockPlayer player)
    // Offset: 0x204FD74
    void FailPlayer(GlobalNamespace::MockPlayer* player);
    // static public MultiplayerMockSettings SharedSettings()
    // Offset: 0x204FDB4
    static GlobalNamespace::MultiplayerMockSettings* SharedSettings();
    // public System.Void .ctor()
    // Offset: 0x204FDBC
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerMockSettings* New_ctor();
  }; // MultiplayerMockSettings
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerMockSettings*, "", "MultiplayerMockSettings");
#pragma pack(pop)
