// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
  // Forward declaring type: CVRCompositor
  class CVRCompositor;
  // Forward declaring type: CVROverlay
  class CVROverlay;
  // Forward declaring type: VRTextureBounds_t
  struct VRTextureBounds_t;
  // Forward declaring type: EVRInitError
  struct EVRInitError;
  // Forward declaring type: ETrackedDeviceProperty
  struct ETrackedDeviceProperty;
  // Forward declaring type: TrackedDevicePose_t
  struct TrackedDevicePose_t;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SteamVR
  class SteamVR : public ::Il2CppObject, public System::IDisposable {
    public:
    // private Valve.VR.CVRSystem <hmd>k__BackingField
    // Offset: 0x10
    Valve::VR::CVRSystem* hmd;
    // private Valve.VR.CVRCompositor <compositor>k__BackingField
    // Offset: 0x18
    Valve::VR::CVRCompositor* compositor;
    // private Valve.VR.CVROverlay <overlay>k__BackingField
    // Offset: 0x20
    Valve::VR::CVROverlay* overlay;
    // private System.Single <sceneWidth>k__BackingField
    // Offset: 0x28
    float sceneWidth;
    // private System.Single <sceneHeight>k__BackingField
    // Offset: 0x2C
    float sceneHeight;
    // private System.Single <aspect>k__BackingField
    // Offset: 0x30
    float aspect;
    // private System.Single <fieldOfView>k__BackingField
    // Offset: 0x34
    float fieldOfView;
    // private UnityEngine.Vector2 <tanHalfFov>k__BackingField
    // Offset: 0x38
    UnityEngine::Vector2 tanHalfFov;
    // private Valve.VR.VRTextureBounds_t[] <textureBounds>k__BackingField
    // Offset: 0x40
    ::Array<Valve::VR::VRTextureBounds_t>* textureBounds;
    // private SteamVR_Utils/RigidTransform[] <eyes>k__BackingField
    // Offset: 0x48
    ::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* eyes;
    // public Valve.VR.ETextureType textureType
    // Offset: 0x50
    Valve::VR::ETextureType textureType;
    // Get static field: static private System.Boolean _enabled
    static bool _get__enabled();
    // Set static field: static private System.Boolean _enabled
    static void _set__enabled(bool value);
    // Get static field: static private SteamVR _instance
    static GlobalNamespace::SteamVR* _get__instance();
    // Set static field: static private SteamVR _instance
    static void _set__instance(GlobalNamespace::SteamVR* value);
    // Get static field: static private System.Boolean <initializing>k__BackingField
    static bool _get_$initializing$k__BackingField();
    // Set static field: static private System.Boolean <initializing>k__BackingField
    static void _set_$initializing$k__BackingField(bool value);
    // Get static field: static private System.Boolean <calibrating>k__BackingField
    static bool _get_$calibrating$k__BackingField();
    // Set static field: static private System.Boolean <calibrating>k__BackingField
    static void _set_$calibrating$k__BackingField(bool value);
    // Get static field: static private System.Boolean <outOfRange>k__BackingField
    static bool _get_$outOfRange$k__BackingField();
    // Set static field: static private System.Boolean <outOfRange>k__BackingField
    static void _set_$outOfRange$k__BackingField(bool value);
    // Get static field: static public System.Boolean[] connected
    static ::Array<bool>* _get_connected();
    // Set static field: static public System.Boolean[] connected
    static void _set_connected(::Array<bool>* value);
    // static public System.Boolean get_active()
    // Offset: 0xCD9168
    static bool get_active();
    // static public System.Boolean get_enabled()
    // Offset: 0xCD91D8
    static bool get_enabled();
    // static public System.Void set_enabled(System.Boolean value)
    // Offset: 0xCD9274
    static void set_enabled(bool value);
    // static public SteamVR get_instance()
    // Offset: 0xCD93B8
    static GlobalNamespace::SteamVR* get_instance();
    // static public System.Boolean get_usingNativeSupport()
    // Offset: 0xCD96F8
    static bool get_usingNativeSupport();
    // static private SteamVR CreateInstance()
    // Offset: 0xCD94D0
    static GlobalNamespace::SteamVR* CreateInstance();
    // static private System.Void ReportError(Valve.VR.EVRInitError error)
    // Offset: 0xCD9764
    static void ReportError(Valve::VR::EVRInitError error);
    // public Valve.VR.CVRSystem get_hmd()
    // Offset: 0xCDA110
    Valve::VR::CVRSystem* get_hmd();
    // private System.Void set_hmd(Valve.VR.CVRSystem value)
    // Offset: 0xCDA118
    void set_hmd(Valve::VR::CVRSystem* value);
    // public Valve.VR.CVRCompositor get_compositor()
    // Offset: 0xCDA120
    Valve::VR::CVRCompositor* get_compositor();
    // private System.Void set_compositor(Valve.VR.CVRCompositor value)
    // Offset: 0xCDA128
    void set_compositor(Valve::VR::CVRCompositor* value);
    // public Valve.VR.CVROverlay get_overlay()
    // Offset: 0xCDA130
    Valve::VR::CVROverlay* get_overlay();
    // private System.Void set_overlay(Valve.VR.CVROverlay value)
    // Offset: 0xCDA138
    void set_overlay(Valve::VR::CVROverlay* value);
    // static public System.Boolean get_initializing()
    // Offset: 0xCDA140
    static bool get_initializing();
    // static private System.Void set_initializing(System.Boolean value)
    // Offset: 0xCDA1A8
    static void set_initializing(bool value);
    // static public System.Boolean get_calibrating()
    // Offset: 0xCDA218
    static bool get_calibrating();
    // static private System.Void set_calibrating(System.Boolean value)
    // Offset: 0xCDA280
    static void set_calibrating(bool value);
    // static public System.Boolean get_outOfRange()
    // Offset: 0xCDA2F0
    static bool get_outOfRange();
    // static private System.Void set_outOfRange(System.Boolean value)
    // Offset: 0xCDA358
    static void set_outOfRange(bool value);
    // public System.Single get_sceneWidth()
    // Offset: 0xCDA3C8
    float get_sceneWidth();
    // private System.Void set_sceneWidth(System.Single value)
    // Offset: 0xCDA3D0
    void set_sceneWidth(float value);
    // public System.Single get_sceneHeight()
    // Offset: 0xCDA3D8
    float get_sceneHeight();
    // private System.Void set_sceneHeight(System.Single value)
    // Offset: 0xCDA3E0
    void set_sceneHeight(float value);
    // public System.Single get_aspect()
    // Offset: 0xCDA3E8
    float get_aspect();
    // private System.Void set_aspect(System.Single value)
    // Offset: 0xCDA3F0
    void set_aspect(float value);
    // public System.Single get_fieldOfView()
    // Offset: 0xCDA3F8
    float get_fieldOfView();
    // private System.Void set_fieldOfView(System.Single value)
    // Offset: 0xCDA400
    void set_fieldOfView(float value);
    // public UnityEngine.Vector2 get_tanHalfFov()
    // Offset: 0xCDA408
    UnityEngine::Vector2 get_tanHalfFov();
    // private System.Void set_tanHalfFov(UnityEngine.Vector2 value)
    // Offset: 0xCDA410
    void set_tanHalfFov(UnityEngine::Vector2 value);
    // public Valve.VR.VRTextureBounds_t[] get_textureBounds()
    // Offset: 0xCDA418
    ::Array<Valve::VR::VRTextureBounds_t>* get_textureBounds();
    // private System.Void set_textureBounds(Valve.VR.VRTextureBounds_t[] value)
    // Offset: 0xCDA420
    void set_textureBounds(::Array<Valve::VR::VRTextureBounds_t>* value);
    // public SteamVR_Utils/RigidTransform[] get_eyes()
    // Offset: 0xCDA428
    ::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* get_eyes();
    // private System.Void set_eyes(SteamVR_Utils/RigidTransform[] value)
    // Offset: 0xCDA430
    void set_eyes(::Array<GlobalNamespace::SteamVR_Utils::RigidTransform>* value);
    // public System.String get_hmd_TrackingSystemName()
    // Offset: 0xCDA438
    ::Il2CppString* get_hmd_TrackingSystemName();
    // public System.String get_hmd_ModelNumber()
    // Offset: 0xCDA58C
    ::Il2CppString* get_hmd_ModelNumber();
    // public System.String get_hmd_SerialNumber()
    // Offset: 0xCDA598
    ::Il2CppString* get_hmd_SerialNumber();
    // public System.Single get_hmd_SecondsFromVsyncToPhotons()
    // Offset: 0xCDA5A4
    float get_hmd_SecondsFromVsyncToPhotons();
    // public System.Single get_hmd_DisplayFrequency()
    // Offset: 0xCDA5F0
    float get_hmd_DisplayFrequency();
    // public System.String GetTrackedDeviceString(System.UInt32 deviceId)
    // Offset: 0xCDA5FC
    ::Il2CppString* GetTrackedDeviceString(uint deviceId);
    // public System.String GetStringProperty(Valve.VR.ETrackedDeviceProperty prop, System.UInt32 deviceId)
    // Offset: 0xCDA444
    ::Il2CppString* GetStringProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId);
    // public System.Single GetFloatProperty(Valve.VR.ETrackedDeviceProperty prop, System.UInt32 deviceId)
    // Offset: 0xCDA5B0
    float GetFloatProperty(Valve::VR::ETrackedDeviceProperty prop, uint deviceId);
    // private System.Void OnInitializing(System.Boolean initializing)
    // Offset: 0xCDA6E4
    void OnInitializing(bool initializing);
    // private System.Void OnCalibrating(System.Boolean calibrating)
    // Offset: 0xCDA798
    void OnCalibrating(bool calibrating);
    // private System.Void OnOutOfRange(System.Boolean outOfRange)
    // Offset: 0xCDA84C
    void OnOutOfRange(bool outOfRange);
    // private System.Void OnDeviceConnected(System.Int32 i, System.Boolean connected)
    // Offset: 0xCDA900
    void OnDeviceConnected(int i, bool connected);
    // private System.Void OnNewPoses(Valve.VR.TrackedDevicePose_t[] poses)
    // Offset: 0xCDA9A4
    void OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses);
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xCDAEBC
    void Dispose(bool disposing);
    // static public System.Void SafeDispose()
    // Offset: 0xCD9314
    static void SafeDispose();
    // static private System.Void .cctor()
    // Offset: 0xCDB178
    static void _cctor();
    // private System.Void .ctor()
    // Offset: 0xCD98B8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static SteamVR* New_ctor();
    // protected override System.Void Finalize()
    // Offset: 0xCDAE50
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public System.Void Dispose()
    // Offset: 0xCDB104
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // SteamVR
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR*, "", "SteamVR");
#pragma pack(pop)
