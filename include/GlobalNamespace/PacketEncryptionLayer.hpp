// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AesCryptoServiceProvider
  class AesCryptoServiceProvider;
  // Forward declaring type: RNGCryptoServiceProvider
  class RNGCryptoServiceProvider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PacketEncryptionLayer
  class PacketEncryptionLayer : public LiteNetLib::Layers::PacketLayerBase {
    public:
    // Nested type: GlobalNamespace::PacketEncryptionLayer::IEncryptionState
    class IEncryptionState;
    // Nested type: GlobalNamespace::PacketEncryptionLayer::EncryptionState
    class EncryptionState;
    // Nested type: GlobalNamespace::PacketEncryptionLayer::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: GlobalNamespace::PacketEncryptionLayer::$$c
    class $$c;
    // private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,PacketEncryptionLayer/EncryptionState> _encryptionStates
    // Offset: 0x18
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* encryptionStates;
    // private readonly System.Collections.Generic.Dictionary`2<System.Net.IPAddress,System.Collections.Generic.Dictionary`2<System.Int32,PacketEncryptionLayer/EncryptionState>> _pendingEncryptionStates
    // Offset: 0x20
    System::Collections::Generic::Dictionary_2<System::Net::IPAddress*, System::Collections::Generic::Dictionary_2<int, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>*>* pendingEncryptionStates;
    // private readonly System.Security.Cryptography.AesCryptoServiceProvider _aes
    // Offset: 0x28
    System::Security::Cryptography::AesCryptoServiceProvider* aes;
    // private System.Boolean _filterUnencryptedTraffic
    // Offset: 0x30
    bool filterUnencryptedTraffic;
    // private System.Byte[] _unencryptedTrafficFilter
    // Offset: 0x38
    ::Array<uint8_t>* unencryptedTrafficFilter;
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get static field: static private System.Byte[] _masterSecretSeed
    static ::Array<uint8_t>* _get__masterSecretSeed();
    // Set static field: static private System.Byte[] _masterSecretSeed
    static void _set__masterSecretSeed(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _keyExpansionSeed
    static ::Array<uint8_t>* _get__keyExpansionSeed();
    // Set static field: static private System.Byte[] _keyExpansionSeed
    static void _set__keyExpansionSeed(::Array<uint8_t>* value);
    // Get static field: static private System.Security.Cryptography.RNGCryptoServiceProvider _random
    static System::Security::Cryptography::RNGCryptoServiceProvider* _get__random();
    // Set static field: static private System.Security.Cryptography.RNGCryptoServiceProvider _random
    static void _set__random(System::Security::Cryptography::RNGCryptoServiceProvider* value);
    // Get static field: static private System.Byte[] _tempByte
    static ::Array<uint8_t>* _get__tempByte();
    // Set static field: static private System.Byte[] _tempByte
    static void _set__tempByte(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _tempIV
    static ::Array<uint8_t>* _get__tempIV();
    // Set static field: static private System.Byte[] _tempIV
    static void _set__tempIV(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _tempHash
    static ::Array<uint8_t>* _get__tempHash();
    // Set static field: static private System.Byte[] _tempHash
    static void _set__tempHash(::Array<uint8_t>* value);
    // static field const value: static private System.Int32 kMacHashSize
    static constexpr const int kMacHashSize = 10;
    // Get static field: static private System.Int32 kMacHashSize
    static int _get_kMacHashSize();
    // Set static field: static private System.Int32 kMacHashSize
    static void _set_kMacHashSize(int value);
    // static field const value: static private System.Int32 kHeaderSize
    static constexpr const int kHeaderSize = 5;
    // Get static field: static private System.Int32 kHeaderSize
    static int _get_kHeaderSize();
    // Set static field: static private System.Int32 kHeaderSize
    static void _set_kHeaderSize(int value);
    // static field const value: static private System.Int32 kMaxPadding
    static constexpr const int kMaxPadding = 64;
    // Get static field: static private System.Int32 kMaxPadding
    static int _get_kMaxPadding();
    // Set static field: static private System.Int32 kMaxPadding
    static void _set_kMaxPadding(int value);
    // static field const value: static private System.Int32 kMacKeySize
    static constexpr const int kMacKeySize = 64;
    // Get static field: static private System.Int32 kMacKeySize
    static int _get_kMacKeySize();
    // Set static field: static private System.Int32 kMacKeySize
    static void _set_kMacKeySize(int value);
    // static field const value: static private System.Int32 kKeySize
    static constexpr const int kKeySize = 32;
    // Get static field: static private System.Int32 kKeySize
    static int _get_kKeySize();
    // Set static field: static private System.Int32 kKeySize
    static void _set_kKeySize(int value);
    // static field const value: static private System.Int32 kBlockSize
    static constexpr const int kBlockSize = 16;
    // Get static field: static private System.Int32 kBlockSize
    static int _get_kBlockSize();
    // Set static field: static private System.Int32 kBlockSize
    static void _set_kBlockSize(int value);
    // static field const value: static private System.Int32 kMasterKeySize
    static constexpr const int kMasterKeySize = 48;
    // Get static field: static private System.Int32 kMasterKeySize
    static int _get_kMasterKeySize();
    // Set static field: static private System.Int32 kMasterKeySize
    static void _set_kMasterKeySize(int value);
    // static field const value: static private System.Byte kEncryptedPacketType
    static constexpr const uint8_t kEncryptedPacketType = 1u;
    // Get static field: static private System.Byte kEncryptedPacketType
    static uint8_t _get_kEncryptedPacketType();
    // Set static field: static private System.Byte kEncryptedPacketType
    static void _set_kEncryptedPacketType(uint8_t value);
    // static field const value: static private System.Byte kPlaintextPacketType
    static constexpr const uint8_t kPlaintextPacketType = 0u;
    // Get static field: static private System.Byte kPlaintextPacketType
    static uint8_t _get_kPlaintextPacketType();
    // Set static field: static private System.Byte kPlaintextPacketType
    static void _set_kPlaintextPacketType(uint8_t value);
    // static field const value: static public System.Int32 preMasterSecretSize
    static constexpr const int preMasterSecretSize = 48;
    // Get static field: static public System.Int32 preMasterSecretSize
    static int _get_preMasterSecretSize();
    // Set static field: static public System.Int32 preMasterSecretSize
    static void _set_preMasterSecretSize(int value);
    // static field const value: static public System.Int32 randomNonceSize
    static constexpr const int randomNonceSize = 32;
    // Get static field: static public System.Int32 randomNonceSize
    static int _get_randomNonceSize();
    // Set static field: static public System.Int32 randomNonceSize
    static void _set_randomNonceSize(int value);
    // static field const value: static private System.Int64 kEncryptionStateTimeout
    static constexpr const int64_t kEncryptionStateTimeout = 3000000000;
    // Get static field: static private System.Int64 kEncryptionStateTimeout
    static int64_t _get_kEncryptionStateTimeout();
    // Set static field: static private System.Int64 kEncryptionStateTimeout
    static void _set_kEncryptionStateTimeout(int64_t value);
    // static field const value: static private System.Int64 kPendingEncryptionStateTimeout
    static constexpr const int64_t kPendingEncryptionStateTimeout = 100000000;
    // Get static field: static private System.Int64 kPendingEncryptionStateTimeout
    static int64_t _get_kPendingEncryptionStateTimeout();
    // Set static field: static private System.Int64 kPendingEncryptionStateTimeout
    static void _set_kPendingEncryptionStateTimeout(int64_t value);
    // static private System.Void NoDomainReloadInit()
    // Offset: 0x21F27A0
    static void NoDomainReloadInit();
    // private System.Void .ctor(System.Security.Cryptography.AesCryptoServiceProvider aes)
    // Offset: 0x21F2938
    static PacketEncryptionLayer* New_ctor(System::Security::Cryptography::AesCryptoServiceProvider* aes);
    // public System.Boolean get_filterUnencryptedTraffic()
    // Offset: 0x21F2AA8
    bool get_filterUnencryptedTraffic();
    // public System.Void set_filterUnencryptedTraffic(System.Boolean value)
    // Offset: 0x21F2AB0
    void set_filterUnencryptedTraffic(bool value);
    // public System.Void SetUnencryptedTrafficFilter(System.Byte[] unencryptedTrafficFilter)
    // Offset: 0x21F2ABC
    void SetUnencryptedTrafficFilter(::Array<uint8_t>* unencryptedTrafficFilter);
    // public System.Void AddEncryptedEndpoint(System.UInt32 protocolVersion, System.Net.IPEndPoint endPoint, System.String userId, System.String userName, System.Byte[] preMasterSecret, System.Byte[] serverRandom, System.Byte[] clientRandom, System.Boolean isClient)
    // Offset: 0x21F2AC4
    void AddEncryptedEndpoint(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient);
    // public PacketEncryptionLayer/IEncryptionState AddUnidentifiedEncryptedEndpoint(System.UInt32 protocolVersion, System.Net.IPEndPoint endPoint, System.Byte[] preMasterSecret, System.Byte[] serverRandom, System.Byte[] clientRandom, System.Boolean isClient)
    // Offset: 0x21F2F7C
    GlobalNamespace::PacketEncryptionLayer::IEncryptionState* AddUnidentifiedEncryptedEndpoint(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient);
    // public System.Void RemoveUnidentifiedEncryptedEndpoint(System.Net.IPEndPoint endPoint, PacketEncryptionLayer/IEncryptionState encryptionState)
    // Offset: 0x21F30B8
    void RemoveUnidentifiedEncryptedEndpoint(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::IEncryptionState* encryptionState);
    // public System.Boolean RemoveEncryptedEndpoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x21F3208
    bool RemoveEncryptedEndpoint(System::Net::IPEndPoint* endPoint);
    // public System.Void AddPendingEncryptedEndpoint(System.UInt32 protocolVersion, System.Net.IPEndPoint endPoint, System.String userId, System.String userName, System.Byte[] preMasterSecret, System.Byte[] serverRandom, System.Byte[] clientRandom, System.Boolean isClient)
    // Offset: 0x21F3404
    void AddPendingEncryptedEndpoint(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient);
    // public System.Boolean VerifyEndPoint(System.UInt32 protocolVersion, System.Net.IPEndPoint endPoint, System.String userId, System.String userName)
    // Offset: 0x21F35FC
    bool VerifyEndPoint(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Il2CppString* userId, ::Il2CppString* userName);
    // public System.Void RemoveInactiveEndpoints()
    // Offset: 0x21F37A8
    void RemoveInactiveEndpoints();
    // public System.Void RemoveAllEndpoints()
    // Offset: 0x21F4048
    void RemoveAllEndpoints();
    // private System.Boolean TryGetEncryptionState(System.Net.IPEndPoint endPoint, out PacketEncryptionLayer/EncryptionState state, out System.Boolean statePending)
    // Offset: 0x21F413C
    bool TryGetEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::EncryptionState*& state, bool& statePending);
    // private PacketEncryptionLayer/EncryptionState[] GetPotentialPendingEncryptionStates(System.Net.IPEndPoint endPoint)
    // Offset: 0x21F4464
    ::Array<GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* GetPotentialPendingEncryptionStates(System::Net::IPEndPoint* endPoint);
    // private System.Void PromotePendingEncryptionState(System.Net.IPEndPoint endPoint, PacketEncryptionLayer/EncryptionState state)
    // Offset: 0x21F4720
    void PromotePendingEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::EncryptionState* state);
    // static public System.Byte[] GeneratePreMasterSecret()
    // Offset: 0x21F4A54
    static ::Array<uint8_t>* GeneratePreMasterSecret();
    // static public System.Boolean ValidatePreMasterSecret(System.Byte[] preMasterSecret)
    // Offset: 0x21F4B20
    static bool ValidatePreMasterSecret(::Array<uint8_t>* preMasterSecret);
    // static public System.Byte[] GenerateRandom(System.Int32 length)
    // Offset: 0x21F4B54
    static ::Array<uint8_t>* GenerateRandom(int length);
    // static public System.Byte GetRandomByte()
    // Offset: 0x21F4BF8
    static uint8_t GetRandomByte();
    // private System.Boolean MatchesFilter(System.Byte[] data, System.Int32 offset, System.Int32 length)
    // Offset: 0x21F4D1C
    bool MatchesFilter(::Array<uint8_t>* data, int offset, int length);
    // private System.Boolean TryDecryptData(System.Byte[] data, PacketEncryptionLayer/EncryptionState state, System.Int32 startingOffset, ref System.Int32 offset, ref System.Int32 length)
    // Offset: 0x21F4FEC
    bool TryDecryptData(::Array<uint8_t>* data, GlobalNamespace::PacketEncryptionLayer::EncryptionState* state, int startingOffset, int& offset, int& length);
    // static private System.Void FastCopyBlock(System.Byte[] inAr, System.Int32 inOff, System.Byte[] outArr, System.Int32 outOff)
    // Offset: 0x21F656C
    static void FastCopyBlock(::Array<uint8_t>* inAr, int inOff, ::Array<uint8_t>* outArr, int outOff);
    // static private System.Void FastCopyMac(System.Byte[] inAr, System.Int32 inOff, System.Byte[] outArr, System.Int32 outOff)
    // Offset: 0x21F65E8
    static void FastCopyMac(::Array<uint8_t>* inAr, int inOff, ::Array<uint8_t>* outArr, int outOff);
    // static public System.Void Log(System.String message)
    // Offset: 0x21F6664
    static void Log(::Il2CppString* message);
    // static public System.Void LogV(System.String message)
    // Offset: 0x21F66EC
    static void LogV(::Il2CppString* message);
    // static private System.Void .cctor()
    // Offset: 0x21F6774
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x21F2A44
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static PacketEncryptionLayer* New_ctor();
    // public override System.Void ProcessInboundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    // Offset: 0x21F4DA4
    // Implemented from: LiteNetLib.Layers.PacketLayerBase
    // Base method: System.Void PacketLayerBase::ProcessInboundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    void ProcessInboundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length);
    // public override System.Void ProcessOutBoundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    // Offset: 0x21F5B9C
    // Implemented from: LiteNetLib.Layers.PacketLayerBase
    // Base method: System.Void PacketLayerBase::ProcessOutBoundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    void ProcessOutBoundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length);
  }; // PacketEncryptionLayer
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PacketEncryptionLayer*, "", "PacketEncryptionLayer");
#pragma pack(pop)
