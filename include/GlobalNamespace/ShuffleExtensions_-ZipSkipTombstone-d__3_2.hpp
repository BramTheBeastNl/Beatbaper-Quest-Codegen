// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ShuffleExtensions
#include "GlobalNamespace/ShuffleExtensions.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2, "", "ShuffleExtensions/<ZipSkipTombstone>d__3`2");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: ShuffleExtensions/<ZipSkipTombstone>d__3`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename T1, typename T2>
  class ShuffleExtensions::$ZipSkipTombstone$d__3_2 : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<T1, T2>>, public ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<T1, T2>>*/ {
    public:
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x0
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.ValueTuple`2<T1,T2> <>2__current
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::System::ValueTuple_2<T1, T2> $$2__current;
    // private System.Int32 <>l__initialThreadId
    // Size: 0x4
    // Offset: 0x0
    int $$l__initialThreadId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.IEnumerable`1<T1> collection1
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerable_1<T1>* collection1;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<T1>*) == 0x8);
    // public System.Collections.Generic.IEnumerable`1<T1> <>3__collection1
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerable_1<T1>* $$3__collection1;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<T1>*) == 0x8);
    // private System.Collections.Generic.IEnumerable`1<T2> collection2
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerable_1<T2>* collection2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<T2>*) == 0x8);
    // public System.Collections.Generic.IEnumerable`1<T2> <>3__collection2
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerable_1<T2>* $$3__collection2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<T2>*) == 0x8);
    // private T2 collection2Tombstone
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T2 collection2Tombstone;
    // public T2 <>3__collection2Tombstone
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T2 $$3__collection2Tombstone;
    // private System.Collections.Generic.IEnumerator`1<T1> <enum1>5__2
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerator_1<T1>* $enum1$5__2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<T1>*) == 0x8);
    // private System.Collections.Generic.IEnumerator`1<T2> <enum2>5__3
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::IEnumerator_1<T2>* $enum2$5__3;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerator_1<T2>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<T1, T2>>
    operator ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<T1, T2>>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<T1, T2>>*>(this);
    }
    // Creating interface conversion operator: i_ValueTuple_2_T1_T2
    inline ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<T1, T2>>* i_ValueTuple_2_T1_T2() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<T1, T2>>*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<T1, T2>>
    operator ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<T1, T2>>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<T1, T2>>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$$1__state");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.ValueTuple`2<T1,T2> <>2__current
    [[deprecated("Use field access instead!")]] ::System::ValueTuple_2<T1, T2>& dyn_$$2__current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$$2__current");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
      return *reinterpret_cast<::System::ValueTuple_2<T1, T2>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <>l__initialThreadId
    [[deprecated("Use field access instead!")]] int& dyn_$$l__initialThreadId() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$$l__initialThreadId");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEnumerable`1<T1> collection1
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<T1>*& dyn_collection1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_collection1");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collection1"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Collections.Generic.IEnumerable`1<T1> <>3__collection1
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<T1>*& dyn_$$3__collection1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$$3__collection1");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__collection1"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEnumerable`1<T2> collection2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<T2>*& dyn_collection2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_collection2");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collection2"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Collections.Generic.IEnumerable`1<T2> <>3__collection2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<T2>*& dyn_$$3__collection2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$$3__collection2");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__collection2"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<T2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T2 collection2Tombstone
    [[deprecated("Use field access instead!")]] T2& dyn_collection2Tombstone() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_collection2Tombstone");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "collection2Tombstone"))->offset;
      return *reinterpret_cast<T2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public T2 <>3__collection2Tombstone
    [[deprecated("Use field access instead!")]] T2& dyn_$$3__collection2Tombstone() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$$3__collection2Tombstone");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__collection2Tombstone"))->offset;
      return *reinterpret_cast<T2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEnumerator`1<T1> <enum1>5__2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<T1>*& dyn_$enum1$5__2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$enum1$5__2");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<enum1>5__2"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.IEnumerator`1<T2> <enum2>5__3
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerator_1<T2>*& dyn_$enum2$5__3() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::dyn_$enum2$5__3");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<enum2>5__3"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<T2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.ValueTuple`2<T1,T2> System.Collections.Generic.IEnumerator<(T1,T2)>.get_Current()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::ValueTuple_2<T1, T2> System_Collections_Generic_IEnumerator$_T1_T2_$_get_Current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::System.Collections.Generic.IEnumerator<_T1,T2_>.get_Current");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<(T1,T2)>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::ValueTuple_2<T1, T2>, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::System.Collections.IEnumerator.get_Current");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShuffleExtensions::$ZipSkipTombstone$d__3_2<T1, T2>* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShuffleExtensions::$ZipSkipTombstone$d__3_2<T1, T2>*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_IDisposable_Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::System.IDisposable.Dispose");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Boolean MoveNext()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool MoveNext() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::MoveNext");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void <>m__Finally1()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $$m__Finally1() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::<>m__Finally1");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void <>m__Finally2()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $$m__Finally2() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::<>m__Finally2");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void System_Collections_IEnumerator_Reset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::System.Collections.IEnumerator.Reset");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Collections.Generic.IEnumerator`1<System.ValueTuple`2<T1,T2>> System.Collections.Generic.IEnumerable<(T1,T2)>.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<T1, T2>>* System_Collections_Generic_IEnumerable$_T1_T2_$_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::System.Collections.Generic.IEnumerable<_T1,T2_>.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<(T1,T2)>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::System::ValueTuple_2<T1, T2>>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ShuffleExtensions::$ZipSkipTombstone$d__3_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // ShuffleExtensions/<ZipSkipTombstone>d__3`2
  // Could not write size check! Type: ShuffleExtensions/<ZipSkipTombstone>d__3`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
