// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DnsEndPoint
  class DnsEndPoint;
  // Forward declaring type: ServiceEnvironment
  struct ServiceEnvironment;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: INetworkConfig
  class INetworkConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::INetworkConfig);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::INetworkConfig*, "", "INetworkConfig");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: INetworkConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class INetworkConfig {
    public:
    // public System.Int32 get_maxPartySize()
    // Offset: 0xFFFFFFFF
    int get_maxPartySize();
    // public System.Int32 get_discoveryPort()
    // Offset: 0xFFFFFFFF
    int get_discoveryPort();
    // public System.Int32 get_partyPort()
    // Offset: 0xFFFFFFFF
    int get_partyPort();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0xFFFFFFFF
    int get_multiplayerPort();
    // public DnsEndPoint get_masterServerEndPoint()
    // Offset: 0xFFFFFFFF
    ::GlobalNamespace::DnsEndPoint* get_masterServerEndPoint();
    // public System.String get_multiplayerStatusUrl()
    // Offset: 0xFFFFFFFF
    ::StringW get_multiplayerStatusUrl();
    // public System.String get_quickPlaySetupUrl()
    // Offset: 0xFFFFFFFF
    ::StringW get_quickPlaySetupUrl();
    // public System.String get_graphUrl()
    // Offset: 0xFFFFFFFF
    ::StringW get_graphUrl();
    // public System.String get_graphAccessToken()
    // Offset: 0xFFFFFFFF
    ::StringW get_graphAccessToken();
    // public System.Boolean get_forceGameLift()
    // Offset: 0xFFFFFFFF
    bool get_forceGameLift();
    // public ServiceEnvironment get_serviceEnvironment()
    // Offset: 0xFFFFFFFF
    ::GlobalNamespace::ServiceEnvironment get_serviceEnvironment();
  }; // INetworkConfig
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_maxPartySize
// Il2CppName: get_maxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_maxPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_maxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_discoveryPort
// Il2CppName: get_discoveryPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_discoveryPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_discoveryPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_partyPort
// Il2CppName: get_partyPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_partyPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_partyPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_multiplayerPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_masterServerEndPoint
// Il2CppName: get_masterServerEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DnsEndPoint* (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_masterServerEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_masterServerEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_multiplayerStatusUrl
// Il2CppName: get_multiplayerStatusUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_multiplayerStatusUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_multiplayerStatusUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_quickPlaySetupUrl
// Il2CppName: get_quickPlaySetupUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_quickPlaySetupUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_quickPlaySetupUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_graphUrl
// Il2CppName: get_graphUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_graphUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_graphUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_graphAccessToken
// Il2CppName: get_graphAccessToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_graphAccessToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_graphAccessToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_forceGameLift
// Il2CppName: get_forceGameLift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_forceGameLift)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_forceGameLift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConfig::get_serviceEnvironment
// Il2CppName: get_serviceEnvironment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ServiceEnvironment (GlobalNamespace::INetworkConfig::*)()>(&GlobalNamespace::INetworkConfig::get_serviceEnvironment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConfig*), "get_serviceEnvironment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
