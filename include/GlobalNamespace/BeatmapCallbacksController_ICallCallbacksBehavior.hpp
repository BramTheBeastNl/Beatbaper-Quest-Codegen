// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapCallbacksController
#include "GlobalNamespace/BeatmapCallbacksController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CallbacksInTime
  class CallbacksInTime;
  // Forward declaring type: BeatmapDataItem
  class BeatmapDataItem;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior*, "", "BeatmapCallbacksController/ICallCallbacksBehavior");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapCallbacksController/ICallCallbacksBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapCallbacksController::ICallCallbacksBehavior {
    public:
    // public System.Void CallCallbacks(CallbacksInTime callbacksInTime, BeatmapDataItem beatmapDataItem)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CallCallbacks(::GlobalNamespace::CallbacksInTime* callbacksInTime, ::GlobalNamespace::BeatmapDataItem* beatmapDataItem);
    // public System.Void Replay(System.Collections.Generic.Dictionary`2<System.Single,CallbacksInTime> callbacksInTimes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Replay(::System::Collections::Generic::Dictionary_2<float, ::GlobalNamespace::CallbacksInTime*>* callbacksInTimes);
  }; // BeatmapCallbacksController/ICallCallbacksBehavior
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior::CallCallbacks
// Il2CppName: CallCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior::*)(::GlobalNamespace::CallbacksInTime*, ::GlobalNamespace::BeatmapDataItem*)>(&GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior::CallCallbacks)> {
  static const MethodInfo* get() {
    static auto* callbacksInTime = &::il2cpp_utils::GetClassFromName("", "CallbacksInTime")->byval_arg;
    static auto* beatmapDataItem = &::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior*), "CallCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbacksInTime, beatmapDataItem});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior::Replay
// Il2CppName: Replay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior::*)(::System::Collections::Generic::Dictionary_2<float, ::GlobalNamespace::CallbacksInTime*>*)>(&GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior::Replay)> {
  static const MethodInfo* get() {
    static auto* callbacksInTimes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single"), ::il2cpp_utils::GetClassFromName("", "CallbacksInTime")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapCallbacksController::ICallCallbacksBehavior*), "Replay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbacksInTimes});
  }
};
