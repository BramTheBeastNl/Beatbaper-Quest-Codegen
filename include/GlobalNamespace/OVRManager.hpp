// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
// Including type: OVRManager/ColorSpace
#include "GlobalNamespace/OVRManager_ColorSpace.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
// Including type: OVRManager/TrackingOrigin
#include "GlobalNamespace/OVRManager_TrackingOrigin.hpp"
// Including type: OVRManager/XRDevice
#include "GlobalNamespace/OVRManager_XRDevice.hpp"
// Including type: OVRPlugin/EventDataBuffer
#include "GlobalNamespace/OVRPlugin_EventDataBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Vector4
  struct Vector4;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InstantiateMrcCameraDelegate
  class OVRManager_InstantiateMrcCameraDelegate;
  // Forward declaring type: OVRDisplay
  class OVRDisplay;
  // Forward declaring type: OVRTracker
  class OVRTracker;
  // Forward declaring type: OVRBoundary
  class OVRBoundary;
  // Forward declaring type: OVRProfile
  class OVRProfile;
  // Forward declaring type: OVRMixedRealityCaptureSettings
  class OVRMixedRealityCaptureSettings;
  // Forward declaring type: XrApi
  struct OVRManager_XrApi;
  // Forward declaring type: EyeTextureFormat
  struct OVRManager_EyeTextureFormat;
  // Forward declaring type: FixedFoveatedRenderingLevel
  struct OVRManager_FixedFoveatedRenderingLevel;
  // Forward declaring type: TiledMultiResLevel
  struct OVRManager_TiledMultiResLevel;
  // Forward declaring type: SystemHeadsetType
  struct OVRManager_SystemHeadsetType;
  // Forward declaring type: OVRPose
  struct OVRPose;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: WeakReference`1<T>
  template<typename T>
  class WeakReference_1;
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF3
  #pragma pack(push, 1)
  // Autogenerated type: OVRManager
  class OVRManager : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::OVRMixedRealityCaptureConfiguration*/ {
    public:
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.Camera> disabledCameras
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::IEnumerable_1<UnityEngine::Camera*>* disabledCameras;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::IEnumerable_1<UnityEngine::Camera*>*) == 0x8);
    // private System.Single prevTimeScale
    // Size: 0x4
    // Offset: 0x20
    float prevTimeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xDCFE30
    // [TooltipAttribute] Offset: 0xDCFE30
    // public System.Boolean useRecommendedMSAALevel
    // Size: 0x1
    // Offset: 0x24
    bool useRecommendedMSAALevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xDCFE90
    // private System.Boolean _monoscopic
    // Size: 0x1
    // Offset: 0x25
    bool monoscopic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xDCFEDC
    // public System.Boolean enableAdaptiveResolution
    // Size: 0x1
    // Offset: 0x26
    bool enableAdaptiveResolution;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableAdaptiveResolution and: colorGamut
    char __padding4[0x1] = {};
    // [HideInInspector] Offset: 0xDCFF14
    // private OVRManager/ColorSpace _colorGamut
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::OVRManager_ColorSpace colorGamut;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_ColorSpace) == 0x4);
    // [RangeAttribute] Offset: 0xDCFF4C
    // [TooltipAttribute] Offset: 0xDCFF4C
    // public System.Single minRenderScale
    // Size: 0x4
    // Offset: 0x2C
    float minRenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xDCFFA0
    // [TooltipAttribute] Offset: 0xDCFFA0
    // public System.Single maxRenderScale
    // Size: 0x4
    // Offset: 0x30
    float maxRenderScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDCFFF4
    // private UnityEngine.Vector3 _headPoseRelativeOffsetRotation
    // Size: 0xC
    // Offset: 0x34
    UnityEngine::Vector3 headPoseRelativeOffsetRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xDD0040
    // private UnityEngine.Vector3 _headPoseRelativeOffsetTranslation
    // Size: 0xC
    // Offset: 0x40
    UnityEngine::Vector3 headPoseRelativeOffsetTranslation;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public System.Int32 profilerTcpPort
    // Size: 0x4
    // Offset: 0x4C
    int profilerTcpPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [HideInInspector] Offset: 0xDD008C
    // public System.Boolean expandMixedRealityCapturePropertySheet
    // Size: 0x1
    // Offset: 0x50
    bool expandMixedRealityCapturePropertySheet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xDD009C
    // [TooltipAttribute] Offset: 0xDD009C
    // public System.Boolean enableMixedReality
    // Size: 0x1
    // Offset: 0x51
    bool enableMixedReality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableMixedReality and: compositionMethod
    char __padding12[0x2] = {};
    // [HideInInspector] Offset: 0xDD00E8
    // public OVRManager/CompositionMethod compositionMethod
    // Size: 0x4
    // Offset: 0x54
    GlobalNamespace::OVRManager_CompositionMethod compositionMethod;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_CompositionMethod) == 0x4);
    // [HideInInspector] Offset: 0xDD00F8
    // [TooltipAttribute] Offset: 0xDD00F8
    // public UnityEngine.LayerMask extraHiddenLayers
    // Size: 0x4
    // Offset: 0x58
    UnityEngine::LayerMask extraHiddenLayers;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // [HideInInspector] Offset: 0xDD0144
    // [TooltipAttribute] Offset: 0xDD0144
    // public UnityEngine.LayerMask extraVisibleLayers
    // Size: 0x4
    // Offset: 0x5C
    UnityEngine::LayerMask extraVisibleLayers;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // [HideInInspector] Offset: 0xDD0190
    // [TooltipAttribute] Offset: 0xDD0190
    // public System.Boolean dynamicCullingMask
    // Size: 0x1
    // Offset: 0x60
    bool dynamicCullingMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dynamicCullingMask and: externalCompositionBackdropColorRift
    char __padding16[0x3] = {};
    // [HideInInspector] Offset: 0xDD01DC
    // [TooltipAttribute] Offset: 0xDD01DC
    // public UnityEngine.Color externalCompositionBackdropColorRift
    // Size: 0x10
    // Offset: 0x64
    UnityEngine::Color externalCompositionBackdropColorRift;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [HideInInspector] Offset: 0xDD0228
    // [TooltipAttribute] Offset: 0xDD0228
    // public UnityEngine.Color externalCompositionBackdropColorQuest
    // Size: 0x10
    // Offset: 0x74
    UnityEngine::Color externalCompositionBackdropColorQuest;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [HideInInspector] Offset: 0xDD0274
    // [TooltipAttribute] Offset: 0xDD0274
    // public OVRManager/CameraDevice capturingCameraDevice
    // Size: 0x4
    // Offset: 0x84
    GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_CameraDevice) == 0x4);
    // [HideInInspector] Offset: 0xDD02C0
    // [TooltipAttribute] Offset: 0xDD02C0
    // public System.Boolean flipCameraFrameHorizontally
    // Size: 0x1
    // Offset: 0x88
    bool flipCameraFrameHorizontally;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xDD030C
    // [TooltipAttribute] Offset: 0xDD030C
    // public System.Boolean flipCameraFrameVertically
    // Size: 0x1
    // Offset: 0x89
    bool flipCameraFrameVertically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipCameraFrameVertically and: handPoseStateLatency
    char __padding21[0x2] = {};
    // [HideInInspector] Offset: 0xDD0358
    // [TooltipAttribute] Offset: 0xDD0358
    // public System.Single handPoseStateLatency
    // Size: 0x4
    // Offset: 0x8C
    float handPoseStateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD03A4
    // [TooltipAttribute] Offset: 0xDD03A4
    // public System.Single sandwichCompositionRenderLatency
    // Size: 0x4
    // Offset: 0x90
    float sandwichCompositionRenderLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD03F0
    // [TooltipAttribute] Offset: 0xDD03F0
    // public System.Int32 sandwichCompositionBufferedFrames
    // Size: 0x4
    // Offset: 0x94
    int sandwichCompositionBufferedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [HideInInspector] Offset: 0xDD043C
    // [TooltipAttribute] Offset: 0xDD043C
    // public UnityEngine.Color chromaKeyColor
    // Size: 0x10
    // Offset: 0x98
    UnityEngine::Color chromaKeyColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [HideInInspector] Offset: 0xDD0488
    // [TooltipAttribute] Offset: 0xDD0488
    // public System.Single chromaKeySimilarity
    // Size: 0x4
    // Offset: 0xA8
    float chromaKeySimilarity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD04D4
    // [TooltipAttribute] Offset: 0xDD04D4
    // public System.Single chromaKeySmoothRange
    // Size: 0x4
    // Offset: 0xAC
    float chromaKeySmoothRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD0520
    // [TooltipAttribute] Offset: 0xDD0520
    // public System.Single chromaKeySpillRange
    // Size: 0x4
    // Offset: 0xB0
    float chromaKeySpillRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD056C
    // [TooltipAttribute] Offset: 0xDD056C
    // public System.Boolean useDynamicLighting
    // Size: 0x1
    // Offset: 0xB4
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: depthQuality
    char __padding29[0x3] = {};
    // [HideInInspector] Offset: 0xDD05B8
    // [TooltipAttribute] Offset: 0xDD05B8
    // public OVRManager/DepthQuality depthQuality
    // Size: 0x4
    // Offset: 0xB8
    GlobalNamespace::OVRManager_DepthQuality depthQuality;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_DepthQuality) == 0x4);
    // [HideInInspector] Offset: 0xDD0604
    // [TooltipAttribute] Offset: 0xDD0604
    // public System.Single dynamicLightingSmoothFactor
    // Size: 0x4
    // Offset: 0xBC
    float dynamicLightingSmoothFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD0650
    // [TooltipAttribute] Offset: 0xDD0650
    // public System.Single dynamicLightingDepthVariationClampingValue
    // Size: 0x4
    // Offset: 0xC0
    float dynamicLightingDepthVariationClampingValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD069C
    // [TooltipAttribute] Offset: 0xDD069C
    // public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    // Size: 0x4
    // Offset: 0xC4
    GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_VirtualGreenScreenType) == 0x4);
    // [HideInInspector] Offset: 0xDD06E8
    // [TooltipAttribute] Offset: 0xDD06E8
    // public System.Single virtualGreenScreenTopY
    // Size: 0x4
    // Offset: 0xC8
    float virtualGreenScreenTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD0734
    // [TooltipAttribute] Offset: 0xDD0734
    // public System.Single virtualGreenScreenBottomY
    // Size: 0x4
    // Offset: 0xCC
    float virtualGreenScreenBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD0780
    // [TooltipAttribute] Offset: 0xDD0780
    // public System.Boolean virtualGreenScreenApplyDepthCulling
    // Size: 0x1
    // Offset: 0xD0
    bool virtualGreenScreenApplyDepthCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: virtualGreenScreenApplyDepthCulling and: virtualGreenScreenDepthTolerance
    char __padding36[0x3] = {};
    // [HideInInspector] Offset: 0xDD07CC
    // [TooltipAttribute] Offset: 0xDD07CC
    // public System.Single virtualGreenScreenDepthTolerance
    // Size: 0x4
    // Offset: 0xD4
    float virtualGreenScreenDepthTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xDD0818
    // [TooltipAttribute] Offset: 0xDD0818
    // public OVRManager/MrcActivationMode mrcActivationMode
    // Size: 0x4
    // Offset: 0xD8
    GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_MrcActivationMode) == 0x4);
    // Padding between fields: mrcActivationMode and: instantiateMixedRealityCameraGameObject
    char __padding38[0x4] = {};
    // public OVRManager/InstantiateMrcCameraDelegate instantiateMixedRealityCameraGameObject
    // Size: 0x8
    // Offset: 0xE0
    GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* instantiateMixedRealityCameraGameObject;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*) == 0x8);
    // [HeaderAttribute] Offset: 0xDD0864
    // [TooltipAttribute] Offset: 0xDD0864
    // private OVRManager/TrackingOrigin _trackingOriginType
    // Size: 0x4
    // Offset: 0xE8
    GlobalNamespace::OVRManager_TrackingOrigin trackingOriginType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_TrackingOrigin) == 0x4);
    // [TooltipAttribute] Offset: 0xDD08D4
    // public System.Boolean usePositionTracking
    // Size: 0x1
    // Offset: 0xEC
    bool usePositionTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xDD090C
    // public System.Boolean useRotationTracking
    // Size: 0x1
    // Offset: 0xED
    bool useRotationTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xDD091C
    // public System.Boolean useIPDInPositionTracking
    // Size: 0x1
    // Offset: 0xEE
    bool useIPDInPositionTracking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xDD0954
    // public System.Boolean resetTrackerOnLoad
    // Size: 0x1
    // Offset: 0xEF
    bool resetTrackerOnLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xDD098C
    // public System.Boolean AllowRecenter
    // Size: 0x1
    // Offset: 0xF0
    bool AllowRecenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0xDD09C4
    // public System.Boolean LateControllerUpdate
    // Size: 0x1
    // Offset: 0xF1
    bool LateControllerUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xDD09FC
    // private System.Boolean <isSupportedPlatform>k__BackingField
    // Size: 0x1
    // Offset: 0xF2
    bool isSupportedPlatform;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OVRManager
    OVRManager(System::Collections::Generic::IEnumerable_1<UnityEngine::Camera*>* disabledCameras_ = {}, float prevTimeScale_ = {}, bool useRecommendedMSAALevel_ = {}, bool monoscopic_ = {}, bool enableAdaptiveResolution_ = {}, GlobalNamespace::OVRManager_ColorSpace colorGamut_ = {}, float minRenderScale_ = {}, float maxRenderScale_ = {}, UnityEngine::Vector3 headPoseRelativeOffsetRotation_ = {}, UnityEngine::Vector3 headPoseRelativeOffsetTranslation_ = {}, int profilerTcpPort_ = {}, bool expandMixedRealityCapturePropertySheet_ = {}, bool enableMixedReality_ = {}, GlobalNamespace::OVRManager_CompositionMethod compositionMethod_ = {}, UnityEngine::LayerMask extraHiddenLayers_ = {}, UnityEngine::LayerMask extraVisibleLayers_ = {}, bool dynamicCullingMask_ = {}, UnityEngine::Color externalCompositionBackdropColorRift_ = {}, UnityEngine::Color externalCompositionBackdropColorQuest_ = {}, GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice_ = {}, bool flipCameraFrameHorizontally_ = {}, bool flipCameraFrameVertically_ = {}, float handPoseStateLatency_ = {}, float sandwichCompositionRenderLatency_ = {}, int sandwichCompositionBufferedFrames_ = {}, UnityEngine::Color chromaKeyColor_ = {}, float chromaKeySimilarity_ = {}, float chromaKeySmoothRange_ = {}, float chromaKeySpillRange_ = {}, bool useDynamicLighting_ = {}, GlobalNamespace::OVRManager_DepthQuality depthQuality_ = {}, float dynamicLightingSmoothFactor_ = {}, float dynamicLightingDepthVariationClampingValue_ = {}, GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType_ = {}, float virtualGreenScreenTopY_ = {}, float virtualGreenScreenBottomY_ = {}, bool virtualGreenScreenApplyDepthCulling_ = {}, float virtualGreenScreenDepthTolerance_ = {}, GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode_ = {}, GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* instantiateMixedRealityCameraGameObject_ = {}, GlobalNamespace::OVRManager_TrackingOrigin trackingOriginType_ = {}, bool usePositionTracking_ = {}, bool useRotationTracking_ = {}, bool useIPDInPositionTracking_ = {}, bool resetTrackerOnLoad_ = {}, bool AllowRecenter_ = {}, bool LateControllerUpdate_ = {}, bool isSupportedPlatform_ = {}) noexcept : disabledCameras{disabledCameras_}, prevTimeScale{prevTimeScale_}, useRecommendedMSAALevel{useRecommendedMSAALevel_}, monoscopic{monoscopic_}, enableAdaptiveResolution{enableAdaptiveResolution_}, colorGamut{colorGamut_}, minRenderScale{minRenderScale_}, maxRenderScale{maxRenderScale_}, headPoseRelativeOffsetRotation{headPoseRelativeOffsetRotation_}, headPoseRelativeOffsetTranslation{headPoseRelativeOffsetTranslation_}, profilerTcpPort{profilerTcpPort_}, expandMixedRealityCapturePropertySheet{expandMixedRealityCapturePropertySheet_}, enableMixedReality{enableMixedReality_}, compositionMethod{compositionMethod_}, extraHiddenLayers{extraHiddenLayers_}, extraVisibleLayers{extraVisibleLayers_}, dynamicCullingMask{dynamicCullingMask_}, externalCompositionBackdropColorRift{externalCompositionBackdropColorRift_}, externalCompositionBackdropColorQuest{externalCompositionBackdropColorQuest_}, capturingCameraDevice{capturingCameraDevice_}, flipCameraFrameHorizontally{flipCameraFrameHorizontally_}, flipCameraFrameVertically{flipCameraFrameVertically_}, handPoseStateLatency{handPoseStateLatency_}, sandwichCompositionRenderLatency{sandwichCompositionRenderLatency_}, sandwichCompositionBufferedFrames{sandwichCompositionBufferedFrames_}, chromaKeyColor{chromaKeyColor_}, chromaKeySimilarity{chromaKeySimilarity_}, chromaKeySmoothRange{chromaKeySmoothRange_}, chromaKeySpillRange{chromaKeySpillRange_}, useDynamicLighting{useDynamicLighting_}, depthQuality{depthQuality_}, dynamicLightingSmoothFactor{dynamicLightingSmoothFactor_}, dynamicLightingDepthVariationClampingValue{dynamicLightingDepthVariationClampingValue_}, virtualGreenScreenType{virtualGreenScreenType_}, virtualGreenScreenTopY{virtualGreenScreenTopY_}, virtualGreenScreenBottomY{virtualGreenScreenBottomY_}, virtualGreenScreenApplyDepthCulling{virtualGreenScreenApplyDepthCulling_}, virtualGreenScreenDepthTolerance{virtualGreenScreenDepthTolerance_}, mrcActivationMode{mrcActivationMode_}, instantiateMixedRealityCameraGameObject{instantiateMixedRealityCameraGameObject_}, trackingOriginType{trackingOriginType_}, usePositionTracking{usePositionTracking_}, useRotationTracking{useRotationTracking_}, useIPDInPositionTracking{useIPDInPositionTracking_}, resetTrackerOnLoad{resetTrackerOnLoad_}, AllowRecenter{AllowRecenter_}, LateControllerUpdate{LateControllerUpdate_}, isSupportedPlatform{isSupportedPlatform_} {}
    // Creating interface conversion operator: operator GlobalNamespace::OVRMixedRealityCaptureConfiguration
    operator GlobalNamespace::OVRMixedRealityCaptureConfiguration() noexcept {
      return *reinterpret_cast<GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // [CompilerGeneratedAttribute] Offset: 0xDCFD10
    // Get static field: static private OVRManager <instance>k__BackingField
    static GlobalNamespace::OVRManager* _get_$instance$k__BackingField();
    // Set static field: static private OVRManager <instance>k__BackingField
    static void _set_$instance$k__BackingField(GlobalNamespace::OVRManager* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD20
    // Get static field: static private OVRDisplay <display>k__BackingField
    static GlobalNamespace::OVRDisplay* _get_$display$k__BackingField();
    // Set static field: static private OVRDisplay <display>k__BackingField
    static void _set_$display$k__BackingField(GlobalNamespace::OVRDisplay* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD30
    // Get static field: static private OVRTracker <tracker>k__BackingField
    static GlobalNamespace::OVRTracker* _get_$tracker$k__BackingField();
    // Set static field: static private OVRTracker <tracker>k__BackingField
    static void _set_$tracker$k__BackingField(GlobalNamespace::OVRTracker* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD40
    // Get static field: static private OVRBoundary <boundary>k__BackingField
    static GlobalNamespace::OVRBoundary* _get_$boundary$k__BackingField();
    // Set static field: static private OVRBoundary <boundary>k__BackingField
    static void _set_$boundary$k__BackingField(GlobalNamespace::OVRBoundary* value);
    // Get static field: static private OVRProfile _profile
    static GlobalNamespace::OVRProfile* _get__profile();
    // Set static field: static private OVRProfile _profile
    static void _set__profile(GlobalNamespace::OVRProfile* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD50
    // Get static field: static private System.Action HMDAcquired
    static System::Action* _get_HMDAcquired();
    // Set static field: static private System.Action HMDAcquired
    static void _set_HMDAcquired(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD60
    // Get static field: static private System.Action HMDLost
    static System::Action* _get_HMDLost();
    // Set static field: static private System.Action HMDLost
    static void _set_HMDLost(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD70
    // Get static field: static private System.Action HMDMounted
    static System::Action* _get_HMDMounted();
    // Set static field: static private System.Action HMDMounted
    static void _set_HMDMounted(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD80
    // Get static field: static private System.Action HMDUnmounted
    static System::Action* _get_HMDUnmounted();
    // Set static field: static private System.Action HMDUnmounted
    static void _set_HMDUnmounted(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFD90
    // Get static field: static private System.Action VrFocusAcquired
    static System::Action* _get_VrFocusAcquired();
    // Set static field: static private System.Action VrFocusAcquired
    static void _set_VrFocusAcquired(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFDA0
    // Get static field: static private System.Action VrFocusLost
    static System::Action* _get_VrFocusLost();
    // Set static field: static private System.Action VrFocusLost
    static void _set_VrFocusLost(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFDB0
    // Get static field: static private System.Action InputFocusAcquired
    static System::Action* _get_InputFocusAcquired();
    // Set static field: static private System.Action InputFocusAcquired
    static void _set_InputFocusAcquired(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFDC0
    // Get static field: static private System.Action InputFocusLost
    static System::Action* _get_InputFocusLost();
    // Set static field: static private System.Action InputFocusLost
    static void _set_InputFocusLost(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFDD0
    // Get static field: static private System.Action AudioOutChanged
    static System::Action* _get_AudioOutChanged();
    // Set static field: static private System.Action AudioOutChanged
    static void _set_AudioOutChanged(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFDE0
    // Get static field: static private System.Action AudioInChanged
    static System::Action* _get_AudioInChanged();
    // Set static field: static private System.Action AudioInChanged
    static void _set_AudioInChanged(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFDF0
    // Get static field: static private System.Action TrackingAcquired
    static System::Action* _get_TrackingAcquired();
    // Set static field: static private System.Action TrackingAcquired
    static void _set_TrackingAcquired(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFE00
    // Get static field: static private System.Action TrackingLost
    static System::Action* _get_TrackingLost();
    // Set static field: static private System.Action TrackingLost
    static void _set_TrackingLost(System::Action* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFE10
    // Get static field: static private System.Action`2<System.Single,System.Single> DisplayRefreshRateChanged
    static System::Action_2<float, float>* _get_DisplayRefreshRateChanged();
    // Set static field: static private System.Action`2<System.Single,System.Single> DisplayRefreshRateChanged
    static void _set_DisplayRefreshRateChanged(System::Action_2<float, float>* value);
    // [CompilerGeneratedAttribute] Offset: 0xDCFE20
    // Get static field: static private System.Action HSWDismissed
    static System::Action* _get_HSWDismissed();
    // Set static field: static private System.Action HSWDismissed
    static void _set_HSWDismissed(System::Action* value);
    // Get static field: static private System.Boolean _isHmdPresentCached
    static bool _get__isHmdPresentCached();
    // Set static field: static private System.Boolean _isHmdPresentCached
    static void _set__isHmdPresentCached(bool value);
    // Get static field: static private System.Boolean _isHmdPresent
    static bool _get__isHmdPresent();
    // Set static field: static private System.Boolean _isHmdPresent
    static void _set__isHmdPresent(bool value);
    // Get static field: static private System.Boolean _wasHmdPresent
    static bool _get__wasHmdPresent();
    // Set static field: static private System.Boolean _wasHmdPresent
    static void _set__wasHmdPresent(bool value);
    // Get static field: static private System.Boolean _hasVrFocusCached
    static bool _get__hasVrFocusCached();
    // Set static field: static private System.Boolean _hasVrFocusCached
    static void _set__hasVrFocusCached(bool value);
    // Get static field: static private System.Boolean _hasVrFocus
    static bool _get__hasVrFocus();
    // Set static field: static private System.Boolean _hasVrFocus
    static void _set__hasVrFocus(bool value);
    // Get static field: static private System.Boolean _hadVrFocus
    static bool _get__hadVrFocus();
    // Set static field: static private System.Boolean _hadVrFocus
    static void _set__hadVrFocus(bool value);
    // Get static field: static private System.Boolean _hadInputFocus
    static bool _get__hadInputFocus();
    // Set static field: static private System.Boolean _hadInputFocus
    static void _set__hadInputFocus(bool value);
    // Get static field: static public System.String OCULUS_UNITY_NAME_STR
    static ::Il2CppString* _get_OCULUS_UNITY_NAME_STR();
    // Set static field: static public System.String OCULUS_UNITY_NAME_STR
    static void _set_OCULUS_UNITY_NAME_STR(::Il2CppString* value);
    // Get static field: static public System.String OPENVR_UNITY_NAME_STR
    static ::Il2CppString* _get_OPENVR_UNITY_NAME_STR();
    // Set static field: static public System.String OPENVR_UNITY_NAME_STR
    static void _set_OPENVR_UNITY_NAME_STR(::Il2CppString* value);
    // Get static field: static public OVRManager/XRDevice loadedXRDevice
    static GlobalNamespace::OVRManager_XRDevice _get_loadedXRDevice();
    // Set static field: static public OVRManager/XRDevice loadedXRDevice
    static void _set_loadedXRDevice(GlobalNamespace::OVRManager_XRDevice value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerLeft
    static UnityEngine::Vector3 _get_OpenVRTouchRotationOffsetEulerLeft();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerLeft
    static void _set_OpenVRTouchRotationOffsetEulerLeft(UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerRight
    static UnityEngine::Vector3 _get_OpenVRTouchRotationOffsetEulerRight();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchRotationOffsetEulerRight
    static void _set_OpenVRTouchRotationOffsetEulerRight(UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetLeft
    static UnityEngine::Vector3 _get_OpenVRTouchPositionOffsetLeft();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetLeft
    static void _set_OpenVRTouchPositionOffsetLeft(UnityEngine::Vector3 value);
    // Get static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetRight
    static UnityEngine::Vector3 _get_OpenVRTouchPositionOffsetRight();
    // Set static field: static private UnityEngine.Vector3 OpenVRTouchPositionOffsetRight
    static void _set_OpenVRTouchPositionOffsetRight(UnityEngine::Vector3 value);
    // Get static field: static private System.Boolean _isUserPresentCached
    static bool _get__isUserPresentCached();
    // Set static field: static private System.Boolean _isUserPresentCached
    static void _set__isUserPresentCached(bool value);
    // Get static field: static private System.Boolean _isUserPresent
    static bool _get__isUserPresent();
    // Set static field: static private System.Boolean _isUserPresent
    static void _set__isUserPresent(bool value);
    // Get static field: static private System.Boolean _wasUserPresent
    static bool _get__wasUserPresent();
    // Set static field: static private System.Boolean _wasUserPresent
    static void _set__wasUserPresent(bool value);
    // Get static field: static private System.Boolean prevAudioOutIdIsCached
    static bool _get_prevAudioOutIdIsCached();
    // Set static field: static private System.Boolean prevAudioOutIdIsCached
    static void _set_prevAudioOutIdIsCached(bool value);
    // Get static field: static private System.Boolean prevAudioInIdIsCached
    static bool _get_prevAudioInIdIsCached();
    // Set static field: static private System.Boolean prevAudioInIdIsCached
    static void _set_prevAudioInIdIsCached(bool value);
    // Get static field: static private System.String prevAudioOutId
    static ::Il2CppString* _get_prevAudioOutId();
    // Set static field: static private System.String prevAudioOutId
    static void _set_prevAudioOutId(::Il2CppString* value);
    // Get static field: static private System.String prevAudioInId
    static ::Il2CppString* _get_prevAudioInId();
    // Set static field: static private System.String prevAudioInId
    static void _set_prevAudioInId(::Il2CppString* value);
    // Get static field: static private System.Boolean wasPositionTracked
    static bool _get_wasPositionTracked();
    // Set static field: static private System.Boolean wasPositionTracked
    static void _set_wasPositionTracked(bool value);
    // Get static field: static private OVRPlugin/EventDataBuffer eventDataBuffer
    static GlobalNamespace::OVRPlugin::EventDataBuffer _get_eventDataBuffer();
    // Set static field: static private OVRPlugin/EventDataBuffer eventDataBuffer
    static void _set_eventDataBuffer(GlobalNamespace::OVRPlugin::EventDataBuffer value);
    // Get static field: static public System.String UnityAlphaOrBetaVersionWarningMessage
    static ::Il2CppString* _get_UnityAlphaOrBetaVersionWarningMessage();
    // Set static field: static public System.String UnityAlphaOrBetaVersionWarningMessage
    static void _set_UnityAlphaOrBetaVersionWarningMessage(::Il2CppString* value);
    // Get static field: static public System.Boolean OVRManagerinitialized
    static bool _get_OVRManagerinitialized();
    // Set static field: static public System.Boolean OVRManagerinitialized
    static void _set_OVRManagerinitialized(bool value);
    // Get static field: static private System.Boolean multipleMainCameraWarningPresented
    static bool _get_multipleMainCameraWarningPresented();
    // Set static field: static private System.Boolean multipleMainCameraWarningPresented
    static void _set_multipleMainCameraWarningPresented(bool value);
    // Get static field: static private System.WeakReference`1<UnityEngine.Camera> lastFoundMainCamera
    static System::WeakReference_1<UnityEngine::Camera*>* _get_lastFoundMainCamera();
    // Set static field: static private System.WeakReference`1<UnityEngine.Camera> lastFoundMainCamera
    static void _set_lastFoundMainCamera(System::WeakReference_1<UnityEngine::Camera*>* value);
    // Get static field: static public System.Boolean staticMixedRealityCaptureInitialized
    static bool _get_staticMixedRealityCaptureInitialized();
    // Set static field: static public System.Boolean staticMixedRealityCaptureInitialized
    static void _set_staticMixedRealityCaptureInitialized(bool value);
    // Get static field: static public System.Boolean staticPrevEnableMixedRealityCapture
    static bool _get_staticPrevEnableMixedRealityCapture();
    // Set static field: static public System.Boolean staticPrevEnableMixedRealityCapture
    static void _set_staticPrevEnableMixedRealityCapture(bool value);
    // Get static field: static public OVRMixedRealityCaptureSettings staticMrcSettings
    static GlobalNamespace::OVRMixedRealityCaptureSettings* _get_staticMrcSettings();
    // Set static field: static public OVRMixedRealityCaptureSettings staticMrcSettings
    static void _set_staticMrcSettings(GlobalNamespace::OVRMixedRealityCaptureSettings* value);
    // Get static field: static private System.Boolean suppressDisableMixedRealityBecauseOfNoMainCameraWarning
    static bool _get_suppressDisableMixedRealityBecauseOfNoMainCameraWarning();
    // Set static field: static private System.Boolean suppressDisableMixedRealityBecauseOfNoMainCameraWarning
    static void _set_suppressDisableMixedRealityBecauseOfNoMainCameraWarning(bool value);
    // static public OVRManager get_instance()
    // Offset: 0x1502638
    static GlobalNamespace::OVRManager* get_instance();
    // static private System.Void set_instance(OVRManager value)
    // Offset: 0x15026A0
    static void set_instance(GlobalNamespace::OVRManager* value);
    // static public OVRDisplay get_display()
    // Offset: 0x150270C
    static GlobalNamespace::OVRDisplay* get_display();
    // static private System.Void set_display(OVRDisplay value)
    // Offset: 0x1502774
    static void set_display(GlobalNamespace::OVRDisplay* value);
    // static public OVRTracker get_tracker()
    // Offset: 0x15027E0
    static GlobalNamespace::OVRTracker* get_tracker();
    // static private System.Void set_tracker(OVRTracker value)
    // Offset: 0x1502848
    static void set_tracker(GlobalNamespace::OVRTracker* value);
    // static public OVRBoundary get_boundary()
    // Offset: 0x15028B4
    static GlobalNamespace::OVRBoundary* get_boundary();
    // static private System.Void set_boundary(OVRBoundary value)
    // Offset: 0x150291C
    static void set_boundary(GlobalNamespace::OVRBoundary* value);
    // static public OVRProfile get_profile()
    // Offset: 0x1502988
    static GlobalNamespace::OVRProfile* get_profile();
    // static public System.Void add_HMDAcquired(System.Action value)
    // Offset: 0x1502A90
    static void add_HMDAcquired(System::Action* value);
    // static public System.Void remove_HMDAcquired(System.Action value)
    // Offset: 0x1502B80
    static void remove_HMDAcquired(System::Action* value);
    // static public System.Void add_HMDLost(System.Action value)
    // Offset: 0x1502C70
    static void add_HMDLost(System::Action* value);
    // static public System.Void remove_HMDLost(System.Action value)
    // Offset: 0x1502D60
    static void remove_HMDLost(System::Action* value);
    // static public System.Void add_HMDMounted(System.Action value)
    // Offset: 0x1502E50
    static void add_HMDMounted(System::Action* value);
    // static public System.Void remove_HMDMounted(System.Action value)
    // Offset: 0x1502F40
    static void remove_HMDMounted(System::Action* value);
    // static public System.Void add_HMDUnmounted(System.Action value)
    // Offset: 0x1503030
    static void add_HMDUnmounted(System::Action* value);
    // static public System.Void remove_HMDUnmounted(System.Action value)
    // Offset: 0x1503120
    static void remove_HMDUnmounted(System::Action* value);
    // static public System.Void add_VrFocusAcquired(System.Action value)
    // Offset: 0x1503210
    static void add_VrFocusAcquired(System::Action* value);
    // static public System.Void remove_VrFocusAcquired(System.Action value)
    // Offset: 0x1503300
    static void remove_VrFocusAcquired(System::Action* value);
    // static public System.Void add_VrFocusLost(System.Action value)
    // Offset: 0x15033F0
    static void add_VrFocusLost(System::Action* value);
    // static public System.Void remove_VrFocusLost(System.Action value)
    // Offset: 0x15034E0
    static void remove_VrFocusLost(System::Action* value);
    // static public System.Void add_InputFocusAcquired(System.Action value)
    // Offset: 0x15035D0
    static void add_InputFocusAcquired(System::Action* value);
    // static public System.Void remove_InputFocusAcquired(System.Action value)
    // Offset: 0x15036C0
    static void remove_InputFocusAcquired(System::Action* value);
    // static public System.Void add_InputFocusLost(System.Action value)
    // Offset: 0x15037B0
    static void add_InputFocusLost(System::Action* value);
    // static public System.Void remove_InputFocusLost(System.Action value)
    // Offset: 0x15038A0
    static void remove_InputFocusLost(System::Action* value);
    // static public System.Void add_AudioOutChanged(System.Action value)
    // Offset: 0x1503990
    static void add_AudioOutChanged(System::Action* value);
    // static public System.Void remove_AudioOutChanged(System.Action value)
    // Offset: 0x1503A80
    static void remove_AudioOutChanged(System::Action* value);
    // static public System.Void add_AudioInChanged(System.Action value)
    // Offset: 0x1503B70
    static void add_AudioInChanged(System::Action* value);
    // static public System.Void remove_AudioInChanged(System.Action value)
    // Offset: 0x1503C60
    static void remove_AudioInChanged(System::Action* value);
    // static public System.Void add_TrackingAcquired(System.Action value)
    // Offset: 0x1503D50
    static void add_TrackingAcquired(System::Action* value);
    // static public System.Void remove_TrackingAcquired(System.Action value)
    // Offset: 0x1503E40
    static void remove_TrackingAcquired(System::Action* value);
    // static public System.Void add_TrackingLost(System.Action value)
    // Offset: 0x1503F30
    static void add_TrackingLost(System::Action* value);
    // static public System.Void remove_TrackingLost(System.Action value)
    // Offset: 0x1504020
    static void remove_TrackingLost(System::Action* value);
    // static public System.Void add_DisplayRefreshRateChanged(System.Action`2<System.Single,System.Single> value)
    // Offset: 0x1504110
    static void add_DisplayRefreshRateChanged(System::Action_2<float, float>* value);
    // static public System.Void remove_DisplayRefreshRateChanged(System.Action`2<System.Single,System.Single> value)
    // Offset: 0x1504200
    static void remove_DisplayRefreshRateChanged(System::Action_2<float, float>* value);
    // static public System.Void add_HSWDismissed(System.Action value)
    // Offset: 0x15042F0
    static void add_HSWDismissed(System::Action* value);
    // static public System.Void remove_HSWDismissed(System.Action value)
    // Offset: 0x15043E0
    static void remove_HSWDismissed(System::Action* value);
    // static public System.Boolean get_isHmdPresent()
    // Offset: 0x15044D0
    static bool get_isHmdPresent();
    // static private System.Void set_isHmdPresent(System.Boolean value)
    // Offset: 0x15045C8
    static void set_isHmdPresent(bool value);
    // static public System.String get_audioOutId()
    // Offset: 0x1504644
    static ::Il2CppString* get_audioOutId();
    // static public System.String get_audioInId()
    // Offset: 0x15046A4
    static ::Il2CppString* get_audioInId();
    // static public System.Boolean get_hasVrFocus()
    // Offset: 0x1504704
    static bool get_hasVrFocus();
    // static private System.Void set_hasVrFocus(System.Boolean value)
    // Offset: 0x15047FC
    static void set_hasVrFocus(bool value);
    // static public System.Boolean get_hasInputFocus()
    // Offset: 0x1504878
    static bool get_hasInputFocus();
    // public System.Boolean get_chromatic()
    // Offset: 0x15048D8
    bool get_chromatic();
    // public System.Void set_chromatic(System.Boolean value)
    // Offset: 0x1504970
    void set_chromatic(bool value);
    // public System.Boolean get_monoscopic()
    // Offset: 0x1504A0C
    bool get_monoscopic();
    // public System.Void set_monoscopic(System.Boolean value)
    // Offset: 0x1504AA8
    void set_monoscopic(bool value);
    // public OVRManager/ColorSpace get_colorGamut()
    // Offset: 0x1504B50
    GlobalNamespace::OVRManager_ColorSpace get_colorGamut();
    // public System.Void set_colorGamut(OVRManager/ColorSpace value)
    // Offset: 0x1504B58
    void set_colorGamut(GlobalNamespace::OVRManager_ColorSpace value);
    // public OVRManager/ColorSpace get_nativeColorGamut()
    // Offset: 0x1504BD0
    GlobalNamespace::OVRManager_ColorSpace get_nativeColorGamut();
    // static public System.Boolean IsAdaptiveResSupportedByEngine()
    // Offset: 0x1504C30
    static bool IsAdaptiveResSupportedByEngine();
    // public UnityEngine.Vector3 get_headPoseRelativeOffsetRotation()
    // Offset: 0x1504C38
    UnityEngine::Vector3 get_headPoseRelativeOffsetRotation();
    // public System.Void set_headPoseRelativeOffsetRotation(UnityEngine.Vector3 value)
    // Offset: 0x14FA04C
    void set_headPoseRelativeOffsetRotation(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_headPoseRelativeOffsetTranslation()
    // Offset: 0x1504C44
    UnityEngine::Vector3 get_headPoseRelativeOffsetTranslation();
    // public System.Void set_headPoseRelativeOffsetTranslation(UnityEngine.Vector3 value)
    // Offset: 0x14F9EF0
    void set_headPoseRelativeOffsetTranslation(UnityEngine::Vector3 value);
    // static public System.Boolean get_eyeFovPremultipliedAlphaModeEnabled()
    // Offset: 0x1504C50
    static bool get_eyeFovPremultipliedAlphaModeEnabled();
    // static public System.Void set_eyeFovPremultipliedAlphaModeEnabled(System.Boolean value)
    // Offset: 0x1504CB0
    static void set_eyeFovPremultipliedAlphaModeEnabled(bool value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_enableMixedReality()
    // Offset: 0x1504D18
    bool OVRMixedRealityCaptureConfiguration_get_enableMixedReality();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_enableMixedReality(System.Boolean value)
    // Offset: 0x1504D20
    void OVRMixedRealityCaptureConfiguration_set_enableMixedReality(bool value);
    // private UnityEngine.LayerMask OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers()
    // Offset: 0x1504D2C
    UnityEngine::LayerMask OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers(UnityEngine.LayerMask value)
    // Offset: 0x1504D34
    void OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers(UnityEngine::LayerMask value);
    // private UnityEngine.LayerMask OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers()
    // Offset: 0x1504D3C
    UnityEngine::LayerMask OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers(UnityEngine.LayerMask value)
    // Offset: 0x1504D44
    void OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers(UnityEngine::LayerMask value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask()
    // Offset: 0x1504D4C
    bool OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask(System.Boolean value)
    // Offset: 0x1504D54
    void OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask(bool value);
    // private OVRManager/CompositionMethod OVRMixedRealityCaptureConfiguration.get_compositionMethod()
    // Offset: 0x1504D60
    GlobalNamespace::OVRManager_CompositionMethod OVRMixedRealityCaptureConfiguration_get_compositionMethod();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_compositionMethod(OVRManager/CompositionMethod value)
    // Offset: 0x1504D68
    void OVRMixedRealityCaptureConfiguration_set_compositionMethod(GlobalNamespace::OVRManager_CompositionMethod value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift()
    // Offset: 0x1504D70
    UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift(UnityEngine.Color value)
    // Offset: 0x1504D7C
    void OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift(UnityEngine::Color value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest()
    // Offset: 0x1504D88
    UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest(UnityEngine.Color value)
    // Offset: 0x1504D94
    void OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest(UnityEngine::Color value);
    // private OVRManager/CameraDevice OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice()
    // Offset: 0x1504DA0
    GlobalNamespace::OVRManager_CameraDevice OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice(OVRManager/CameraDevice value)
    // Offset: 0x1504DA8
    void OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice(GlobalNamespace::OVRManager_CameraDevice value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally()
    // Offset: 0x1504DB0
    bool OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally(System.Boolean value)
    // Offset: 0x1504DB8
    void OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally(bool value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically()
    // Offset: 0x1504DC4
    bool OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically(System.Boolean value)
    // Offset: 0x1504DCC
    void OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically(bool value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency()
    // Offset: 0x1504DD8
    float OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency(System.Single value)
    // Offset: 0x1504DE0
    void OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency()
    // Offset: 0x1504DE8
    float OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency(System.Single value)
    // Offset: 0x1504DF0
    void OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency(float value);
    // private System.Int32 OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames()
    // Offset: 0x1504DF8
    int OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames(System.Int32 value)
    // Offset: 0x1504E00
    void OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames(int value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_chromaKeyColor()
    // Offset: 0x1504E08
    UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_chromaKeyColor();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeyColor(UnityEngine.Color value)
    // Offset: 0x1504E14
    void OVRMixedRealityCaptureConfiguration_set_chromaKeyColor(UnityEngine::Color value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity()
    // Offset: 0x1504E20
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity(System.Single value)
    // Offset: 0x1504E28
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange()
    // Offset: 0x1504E30
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange(System.Single value)
    // Offset: 0x1504E38
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange()
    // Offset: 0x1504E40
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange(System.Single value)
    // Offset: 0x1504E48
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange(float value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_useDynamicLighting()
    // Offset: 0x1504E50
    bool OVRMixedRealityCaptureConfiguration_get_useDynamicLighting();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_useDynamicLighting(System.Boolean value)
    // Offset: 0x1504E58
    void OVRMixedRealityCaptureConfiguration_set_useDynamicLighting(bool value);
    // private OVRManager/DepthQuality OVRMixedRealityCaptureConfiguration.get_depthQuality()
    // Offset: 0x1504E64
    GlobalNamespace::OVRManager_DepthQuality OVRMixedRealityCaptureConfiguration_get_depthQuality();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_depthQuality(OVRManager/DepthQuality value)
    // Offset: 0x1504E6C
    void OVRMixedRealityCaptureConfiguration_set_depthQuality(GlobalNamespace::OVRManager_DepthQuality value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor()
    // Offset: 0x1504E74
    float OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor(System.Single value)
    // Offset: 0x1504E7C
    void OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue()
    // Offset: 0x1504E84
    float OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue(System.Single value)
    // Offset: 0x1504E8C
    void OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue(float value);
    // private OVRManager/VirtualGreenScreenType OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType()
    // Offset: 0x1504E94
    GlobalNamespace::OVRManager_VirtualGreenScreenType OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType(OVRManager/VirtualGreenScreenType value)
    // Offset: 0x1504E9C
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType(GlobalNamespace::OVRManager_VirtualGreenScreenType value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY()
    // Offset: 0x1504EA4
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY(System.Single value)
    // Offset: 0x1504EAC
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY()
    // Offset: 0x1504EB4
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY(System.Single value)
    // Offset: 0x1504EBC
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY(float value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling()
    // Offset: 0x1504EC4
    bool OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling(System.Boolean value)
    // Offset: 0x1504ECC
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling(bool value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance()
    // Offset: 0x1504ED8
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance(System.Single value)
    // Offset: 0x1504EE0
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance(float value);
    // private OVRManager/MrcActivationMode OVRMixedRealityCaptureConfiguration.get_mrcActivationMode()
    // Offset: 0x1504EE8
    GlobalNamespace::OVRManager_MrcActivationMode OVRMixedRealityCaptureConfiguration_get_mrcActivationMode();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_mrcActivationMode(OVRManager/MrcActivationMode value)
    // Offset: 0x1504EF0
    void OVRMixedRealityCaptureConfiguration_set_mrcActivationMode(GlobalNamespace::OVRManager_MrcActivationMode value);
    // private OVRManager/InstantiateMrcCameraDelegate OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject()
    // Offset: 0x1504EF8
    GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject(OVRManager/InstantiateMrcCameraDelegate value)
    // Offset: 0x1504F00
    void OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value);
    // public OVRManager/XrApi get_xrApi()
    // Offset: 0x1504F08
    GlobalNamespace::OVRManager_XrApi get_xrApi();
    // public System.UInt64 get_xrInstance()
    // Offset: 0x1504F68
    uint64_t get_xrInstance();
    // public System.UInt64 get_xrSession()
    // Offset: 0x1504FC8
    uint64_t get_xrSession();
    // public System.Int32 get_vsyncCount()
    // Offset: 0x1505028
    int get_vsyncCount();
    // public System.Void set_vsyncCount(System.Int32 value)
    // Offset: 0x15050C0
    void set_vsyncCount(int value);
    // static public System.Single get_batteryLevel()
    // Offset: 0x150515C
    static float get_batteryLevel();
    // static public System.Single get_batteryTemperature()
    // Offset: 0x15051F4
    static float get_batteryTemperature();
    // static public System.Int32 get_batteryStatus()
    // Offset: 0x150528C
    static int get_batteryStatus();
    // static public System.Single get_volumeLevel()
    // Offset: 0x1505324
    static float get_volumeLevel();
    // static public System.Int32 get_cpuLevel()
    // Offset: 0x15053BC
    static int get_cpuLevel();
    // static public System.Void set_cpuLevel(System.Int32 value)
    // Offset: 0x1505454
    static void set_cpuLevel(int value);
    // static public System.Int32 get_gpuLevel()
    // Offset: 0x15054F0
    static int get_gpuLevel();
    // static public System.Void set_gpuLevel(System.Int32 value)
    // Offset: 0x1505588
    static void set_gpuLevel(int value);
    // static public System.Boolean get_isPowerSavingActive()
    // Offset: 0x1505624
    static bool get_isPowerSavingActive();
    // static public OVRManager/EyeTextureFormat get_eyeTextureFormat()
    // Offset: 0x15056BC
    static GlobalNamespace::OVRManager_EyeTextureFormat get_eyeTextureFormat();
    // static public System.Void set_eyeTextureFormat(OVRManager/EyeTextureFormat value)
    // Offset: 0x150571C
    static void set_eyeTextureFormat(GlobalNamespace::OVRManager_EyeTextureFormat value);
    // static public System.Boolean get_fixedFoveatedRenderingSupported()
    // Offset: 0x1505784
    static bool get_fixedFoveatedRenderingSupported();
    // static public OVRManager/FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel()
    // Offset: 0x15057E4
    static GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel();
    // static public System.Void set_fixedFoveatedRenderingLevel(OVRManager/FixedFoveatedRenderingLevel value)
    // Offset: 0x150589C
    static void set_fixedFoveatedRenderingLevel(GlobalNamespace::OVRManager_FixedFoveatedRenderingLevel value);
    // static public System.Boolean get_useDynamicFixedFoveatedRendering()
    // Offset: 0x150595C
    static bool get_useDynamicFixedFoveatedRendering();
    // static public System.Void set_useDynamicFixedFoveatedRendering(System.Boolean value)
    // Offset: 0x1505A14
    static void set_useDynamicFixedFoveatedRendering(bool value);
    // static public System.Boolean get_tiledMultiResSupported()
    // Offset: 0x1505AD4
    static bool get_tiledMultiResSupported();
    // static public OVRManager/TiledMultiResLevel get_tiledMultiResLevel()
    // Offset: 0x1505B34
    static GlobalNamespace::OVRManager_TiledMultiResLevel get_tiledMultiResLevel();
    // static public System.Void set_tiledMultiResLevel(OVRManager/TiledMultiResLevel value)
    // Offset: 0x1505BEC
    static void set_tiledMultiResLevel(GlobalNamespace::OVRManager_TiledMultiResLevel value);
    // static public System.Boolean get_gpuUtilSupported()
    // Offset: 0x1505CAC
    static bool get_gpuUtilSupported();
    // static public System.Single get_gpuUtilLevel()
    // Offset: 0x1505D0C
    static float get_gpuUtilLevel();
    // static public OVRManager/SystemHeadsetType get_systemHeadsetType()
    // Offset: 0x1505DC4
    static GlobalNamespace::OVRManager_SystemHeadsetType get_systemHeadsetType();
    // static public System.Void SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean applyToAllLayers)
    // Offset: 0x1505E24
    static void SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool applyToAllLayers);
    // static public System.Void SetOpenVRLocalPose(UnityEngine.Vector3 leftPos, UnityEngine.Vector3 rightPos, UnityEngine.Quaternion leftRot, UnityEngine.Quaternion rightRot)
    // Offset: 0x1505EEC
    static void SetOpenVRLocalPose(UnityEngine::Vector3 leftPos, UnityEngine::Vector3 rightPos, UnityEngine::Quaternion leftRot, UnityEngine::Quaternion rightRot);
    // static public OVRPose GetOpenVRControllerOffset(UnityEngine.XR.XRNode hand)
    // Offset: 0x1506018
    static GlobalNamespace::OVRPose GetOpenVRControllerOffset(UnityEngine::XR::XRNode hand);
    // public OVRManager/TrackingOrigin get_trackingOriginType()
    // Offset: 0x1506278
    GlobalNamespace::OVRManager_TrackingOrigin get_trackingOriginType();
    // public System.Void set_trackingOriginType(OVRManager/TrackingOrigin value)
    // Offset: 0x1506314
    void set_trackingOriginType(GlobalNamespace::OVRManager_TrackingOrigin value);
    // public System.Boolean get_isSupportedPlatform()
    // Offset: 0x15063BC
    bool get_isSupportedPlatform();
    // private System.Void set_isSupportedPlatform(System.Boolean value)
    // Offset: 0x15063C4
    void set_isSupportedPlatform(bool value);
    // public System.Boolean get_isUserPresent()
    // Offset: 0x15063D0
    bool get_isUserPresent();
    // private System.Void set_isUserPresent(System.Boolean value)
    // Offset: 0x15064C8
    void set_isUserPresent(bool value);
    // static public System.Version get_utilitiesVersion()
    // Offset: 0x1506544
    static System::Version* get_utilitiesVersion();
    // static public System.Version get_pluginVersion()
    // Offset: 0x15065AC
    static System::Version* get_pluginVersion();
    // static public System.Version get_sdkVersion()
    // Offset: 0x150660C
    static System::Version* get_sdkVersion();
    // static private System.Boolean MixedRealityEnabledFromCmd()
    // Offset: 0x150666C
    static bool MixedRealityEnabledFromCmd();
    // static private System.Boolean UseDirectCompositionFromCmd()
    // Offset: 0x1506730
    static bool UseDirectCompositionFromCmd();
    // static private System.Boolean UseExternalCompositionFromCmd()
    // Offset: 0x15067F4
    static bool UseExternalCompositionFromCmd();
    // static private System.Boolean CreateMixedRealityCaptureConfigurationFileFromCmd()
    // Offset: 0x15068B8
    static bool CreateMixedRealityCaptureConfigurationFileFromCmd();
    // static private System.Boolean LoadMixedRealityCaptureConfigurationFileFromCmd()
    // Offset: 0x150697C
    static bool LoadMixedRealityCaptureConfigurationFileFromCmd();
    // static public System.Boolean IsUnityAlphaOrBetaVersion()
    // Offset: 0x1506A40
    static bool IsUnityAlphaOrBetaVersion();
    // private System.Void InitOVRManager()
    // Offset: 0x1506AFC
    void InitOVRManager();
    // private System.Void Awake()
    // Offset: 0x1507EFC
    void Awake();
    // private System.Void SetCurrentXRDevice()
    // Offset: 0x1507F00
    void SetCurrentXRDevice();
    // private System.Void Initialize()
    // Offset: 0x1507C18
    void Initialize();
    // private System.Void Update()
    // Offset: 0x1508068
    void Update();
    // private System.Void UpdateHMDEvents()
    // Offset: 0x1509E50
    void UpdateHMDEvents();
    // static private UnityEngine.Camera FindMainCamera()
    // Offset: 0x150A770
    static UnityEngine::Camera* FindMainCamera();
    // private System.Void OnDisable()
    // Offset: 0x150ACF4
    void OnDisable();
    // private System.Void LateUpdate()
    // Offset: 0x150ADA4
    void LateUpdate();
    // private System.Void FixedUpdate()
    // Offset: 0x150AE00
    void FixedUpdate();
    // private System.Void OnDestroy()
    // Offset: 0x150AE5C
    void OnDestroy();
    // private System.Void OnApplicationPause(System.Boolean pause)
    // Offset: 0x150AEF8
    void OnApplicationPause(bool pause);
    // private System.Void OnApplicationFocus(System.Boolean focus)
    // Offset: 0x150AF88
    void OnApplicationFocus(bool focus);
    // private System.Void OnApplicationQuit()
    // Offset: 0x150B018
    void OnApplicationQuit();
    // public System.Void ReturnToLauncher()
    // Offset: 0x150B084
    void ReturnToLauncher();
    // static public System.Void PlatformUIConfirmQuit()
    // Offset: 0x150B0E0
    static void PlatformUIConfirmQuit();
    // static public System.Void StaticInitializeMixedRealityCapture(OVRMixedRealityCaptureConfiguration configuration)
    // Offset: 0x15075E4
    static void StaticInitializeMixedRealityCapture(GlobalNamespace::OVRMixedRealityCaptureConfiguration* configuration);
    // static public System.Void StaticUpdateMixedRealityCapture(OVRMixedRealityCaptureConfiguration configuration, UnityEngine.GameObject gameObject, OVRManager/TrackingOrigin trackingOrigin)
    // Offset: 0x1509FD8
    static void StaticUpdateMixedRealityCapture(GlobalNamespace::OVRMixedRealityCaptureConfiguration* configuration, UnityEngine::GameObject* gameObject, GlobalNamespace::OVRManager_TrackingOrigin trackingOrigin);
    // static public System.Void StaticShutdownMixedRealityCapture(OVRMixedRealityCaptureConfiguration configuration)
    // Offset: 0x1509CF4
    static void StaticShutdownMixedRealityCapture(GlobalNamespace::OVRMixedRealityCaptureConfiguration* configuration);
    // public System.Void .ctor()
    // Offset: 0x150B178
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x150B24C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // OVRManager
  #pragma pack(pop)
  static check_size<sizeof(OVRManager), 242 + sizeof(bool)> __GlobalNamespace_OVRManagerSizeCheck;
  static_assert(sizeof(OVRManager) == 0xF3);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRManager*, "", "OVRManager");
