// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomPrePassBackgroundNonLightRendererCore
#include "GlobalNamespace/BloomPrePassBackgroundNonLightRendererCore.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BloomPrePassBackgroundParticleSystemRenderer
  // [ExecuteAlways] Offset: D141EC
  class BloomPrePassBackgroundParticleSystemRenderer : public GlobalNamespace::BloomPrePassBackgroundNonLightRendererCore {
    public:
    // private UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(UnityEngine::Renderer*) == 0x8);
    // Creating value type constructor for type: BloomPrePassBackgroundParticleSystemRenderer
    BloomPrePassBackgroundParticleSystemRenderer(UnityEngine::ParticleSystem* particleSystem_ = {}, UnityEngine::Renderer* renderer_ = {}) noexcept : particleSystem{particleSystem_}, renderer{renderer_} {}
    // protected override UnityEngine.Renderer get_renderer()
    // Offset: 0x1D0D3E4
    // Implemented from: BloomPrePassBackgroundNonLightRendererCore
    // Base method: UnityEngine.Renderer BloomPrePassBackgroundNonLightRendererCore::get_renderer()
    UnityEngine::Renderer* get_renderer();
    // protected override System.Void Awake()
    // Offset: 0x1D0D3EC
    // Implemented from: BloomPrePassBackgroundNonLightRendererCore
    // Base method: System.Void BloomPrePassBackgroundNonLightRendererCore::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x1D0D450
    // Implemented from: BloomPrePassBackgroundNonLightRendererCore
    // Base method: System.Void BloomPrePassBackgroundNonLightRendererCore::.ctor()
    // Base method: System.Void BloomPrePassNonLightPass::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BloomPrePassBackgroundParticleSystemRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BloomPrePassBackgroundParticleSystemRenderer*, creationType>()));
    }
  }; // BloomPrePassBackgroundParticleSystemRenderer
  #pragma pack(pop)
  static check_size<sizeof(BloomPrePassBackgroundParticleSystemRenderer), 56 + sizeof(UnityEngine::Renderer*)> __GlobalNamespace_BloomPrePassBackgroundParticleSystemRendererSizeCheck;
  static_assert(sizeof(BloomPrePassBackgroundParticleSystemRenderer) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BloomPrePassBackgroundParticleSystemRenderer*, "", "BloomPrePassBackgroundParticleSystemRenderer");
