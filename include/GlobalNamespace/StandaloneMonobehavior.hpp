// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: StandaloneMonobehavior
  class StandaloneMonobehavior : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__12
    class $AfterOneFrame$d__12;
    // Nested type: GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__15
    class $RunAsyncCoroutine$d__15;
    // private System.Boolean _hasExecutedOneFrame
    // Offset: 0x18
    bool hasExecutedOneFrame;
    // private System.Single _startTime
    // Offset: 0x1C
    float startTime;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_objectLifeTime()
    // Offset: 0x1C43C50
    float get_objectLifeTime();
    // public System.Single get_deltaTime()
    // Offset: 0x1C43C7C
    float get_deltaTime();
    // protected System.Void Awake()
    // Offset: 0x1C43C84
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1C43CAC
    void Start();
    // protected System.Void Update()
    // Offset: 0x1C43CB0
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x1C43CB4
    void OnDestroy();
    // protected System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0x1C43CB8
    void OnApplicationPause(bool pauseStatus);
    // public System.Void WhenReady(System.Action action)
    // Offset: 0x1C43CBC
    void WhenReady(System::Action* action);
    // private System.Collections.IEnumerator AfterOneFrame(System.Action action)
    // Offset: 0x1C43D04
    System::Collections::IEnumerator* AfterOneFrame(System::Action* action);
    // static public T Create()
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Create() {
      static_assert(std::is_convertible_v<T, GlobalNamespace::StandaloneMonobehavior*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>("", "StandaloneMonobehavior", "Create", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public System.Threading.Tasks.Task RunAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1C43DC8
    System::Threading::Tasks::Task* RunAsync(System::Threading::CancellationToken cancellationToken);
    // private System.Collections.IEnumerator RunAsyncCoroutine(System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> tcs, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1C43E64
    System::Collections::IEnumerator* RunAsyncCoroutine(System::Threading::Tasks::TaskCompletionSource_1<bool>* tcs, System::Threading::CancellationToken cancellationToken);
    // public System.Void .ctor()
    // Offset: 0x1C37A1C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static StandaloneMonobehavior* New_ctor();
  }; // StandaloneMonobehavior
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandaloneMonobehavior*, "", "StandaloneMonobehavior");
#pragma pack(pop)
