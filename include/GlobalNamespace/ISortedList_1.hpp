// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IComparable`1<T>
  template<typename T>
  class IComparable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ISortedList`1<T>
  template<typename T>
  class ISortedList_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::ISortedList_1, "", "ISortedList`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: ISortedList`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ISortedList_1 {
    public:
    // public System.Collections.Generic.LinkedList`1<T> get_items()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedList_1<T>* get_items() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISortedList_1::get_items");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_items", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedList_1<T>*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.LinkedListNode`1<T> Insert(T newItem)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::LinkedListNode_1<T>* Insert(T newItem) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISortedList_1::Insert");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newItem)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::LinkedListNode_1<T>*, false>(this, ___internal__method, newItem);
    }
    // public System.Void Remove(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Remove(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISortedList_1::Remove");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
    // public System.Void TouchLastUsedNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void TouchLastUsedNode(::System::Collections::Generic::LinkedListNode_1<T>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ISortedList_1::TouchLastUsedNode");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TouchLastUsedNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, node);
    }
  }; // ISortedList`1
  // Could not write size check! Type: ISortedList`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
