// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: RollingAverage
  class RollingAverage;
  // Forward declaring type: IConnectionManager
  class IConnectionManager;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
  // Forward declaring type: INetworkPacketSubSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSubSerializer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: ConnectedPlayerManager
  // [] Offset: FFFFFFFF
  class ConnectedPlayerManager : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer
    class ConnectedPlayer;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::InternalMessageType
    struct InternalMessageType;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::MessageType
    struct MessageType;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket
    class PlayerConnectedPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket
    class PlayerStatePacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket
    class PlayerSortOrderPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket
    class PlayerDisconnectedPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket
    class KickPlayerPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::SyncTimePacket
    class SyncTimePacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket
    class PlayerLatencyPacket;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: ConnectedPlayerManager/InternalMessageType
    // [] Offset: FFFFFFFF
    struct InternalMessageType/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: InternalMessageType
      constexpr InternalMessageType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static constexpr const uint8_t SyncTime = 0u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_SyncTime();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static void _set_SyncTime(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static constexpr const uint8_t PlayerConnected = 1u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerConnected();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static void _set_PlayerConnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static constexpr const uint8_t PlayerStateUpdate = 2u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerStateUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static void _set_PlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static constexpr const uint8_t PlayerLatencyUpdate = 3u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerLatencyUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static void _set_PlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static constexpr const uint8_t PlayerDisconnected = 4u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerDisconnected();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static void _set_PlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static constexpr const uint8_t PlayerSortOrderUpdate = 5u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerSortOrderUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static void _set_PlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType Party
      static constexpr const uint8_t Party = 6u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType Party
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_Party();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType Party
      static void _set_Party(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static constexpr const uint8_t MultiplayerSession = 7u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_MultiplayerSession();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static void _set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static constexpr const uint8_t KickPlayer = 8u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_KickPlayer();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static void _set_KickPlayer(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
    }; // ConnectedPlayerManager/InternalMessageType
    #pragma pack(pop)
    static check_size<sizeof(ConnectedPlayerManager::InternalMessageType), 0 + sizeof(uint8_t)> __GlobalNamespace_ConnectedPlayerManager_InternalMessageTypeSizeCheck;
    static_assert(sizeof(ConnectedPlayerManager::InternalMessageType) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD05CAC
    // private System.Action connectedEvent
    // Size: 0x8
    // Offset: 0x10
    System::Action* connectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05CBC
    // private System.Action reinitializedEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action* reinitializedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05CCC
    // private System.Action`1<DisconnectedReason> disconnectedEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05CDC
    // private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05CEC
    // private System.Action`1<IConnectedPlayer> playerConnectedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05CFC
    // private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05D0C
    // private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05D1C
    // private System.Action`1<IConnectedPlayer> playerOrderChangedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerOrderChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD05D2C
    // private System.Action syncTimeInitializedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action* syncTimeInitializedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private readonly System.Int64 _startTicks
    // Size: 0x8
    // Offset: 0x58
    int64_t startTicks;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly RollingAverage _syncTimeOffset
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::RollingAverage* syncTimeOffset;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RollingAverage*) == 0x8);
    // private System.Single _syncTimeDelay
    // Size: 0x4
    // Offset: 0x68
    float syncTimeDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: syncTimeDelay and: connectionManager
    char __padding11[0x4] = {};
    // private readonly IConnectionManager _connectionManager
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::IConnectionManager* connectionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectionManager*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _temporaryDataWriter
    // Size: 0x8
    // Offset: 0x78
    LiteNetLib::Utils::NetDataWriter* temporaryDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _reliableDataWriter
    // Size: 0x8
    // Offset: 0x80
    LiteNetLib::Utils::NetDataWriter* reliableDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _unreliableDataWriter
    // Size: 0x8
    // Offset: 0x88
    LiteNetLib::Utils::NetDataWriter* unreliableDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly System.Collections.Generic.List`1<ConnectedPlayerManager/ConnectedPlayer> _players
    // Size: 0x8
    // Offset: 0x90
    System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* players;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
    // Size: 0x8
    // Offset: 0x98
    System::Collections::Generic::HashSet_1<::Il2CppString*>* localPlayerState;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<::Il2CppString*>*) == 0x8);
    // private MultiplayerAvatarData _localPlayerAvatar
    // Size: 0x70
    // Offset: 0xA0
    GlobalNamespace::MultiplayerAvatarData localPlayerAvatar;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerAvatarData) == 0x70);
    // private ConnectedPlayerManager/ConnectedPlayer _localPlayer
    // Size: 0x8
    // Offset: 0x110
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* localPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*) == 0x8);
    // private System.Byte _lastConnectionId
    // Size: 0x1
    // Offset: 0x118
    uint8_t lastConnectionId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: lastConnectionId and: lastSyncTimeUpdate
    char __padding20[0x3] = {};
    // private System.Single _lastSyncTimeUpdate
    // Size: 0x4
    // Offset: 0x11C
    float lastSyncTimeUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastPollTime
    // Size: 0x4
    // Offset: 0x120
    float lastPollTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastPollTime and: messageSerializer
    char __padding22[0x4] = {};
    // private readonly NetworkPacketSerializer`2<ConnectedPlayerManager/InternalMessageType,IConnectedPlayer> _messageSerializer
    // Size: 0x8
    // Offset: 0x128
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* messageSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // Creating value type constructor for type: ConnectedPlayerManager
    ConnectedPlayerManager(System::Action* connectedEvent_ = {}, System::Action* reinitializedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerOrderChangedEvent_ = {}, System::Action* syncTimeInitializedEvent_ = {}, int64_t startTicks_ = {}, GlobalNamespace::RollingAverage* syncTimeOffset_ = {}, float syncTimeDelay_ = {}, GlobalNamespace::IConnectionManager* connectionManager_ = {}, LiteNetLib::Utils::NetDataWriter* temporaryDataWriter_ = {}, LiteNetLib::Utils::NetDataWriter* reliableDataWriter_ = {}, LiteNetLib::Utils::NetDataWriter* unreliableDataWriter_ = {}, System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* players_ = {}, System::Collections::Generic::HashSet_1<::Il2CppString*>* localPlayerState_ = {}, GlobalNamespace::MultiplayerAvatarData localPlayerAvatar_ = {}, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* localPlayer_ = {}, uint8_t lastConnectionId_ = {}, float lastSyncTimeUpdate_ = {}, float lastPollTime_ = {}, GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* messageSerializer_ = {}) noexcept : connectedEvent{connectedEvent_}, reinitializedEvent{reinitializedEvent_}, disconnectedEvent{disconnectedEvent_}, connectionFailedEvent{connectionFailedEvent_}, playerConnectedEvent{playerConnectedEvent_}, playerDisconnectedEvent{playerDisconnectedEvent_}, playerStateChangedEvent{playerStateChangedEvent_}, playerOrderChangedEvent{playerOrderChangedEvent_}, syncTimeInitializedEvent{syncTimeInitializedEvent_}, startTicks{startTicks_}, syncTimeOffset{syncTimeOffset_}, syncTimeDelay{syncTimeDelay_}, connectionManager{connectionManager_}, temporaryDataWriter{temporaryDataWriter_}, reliableDataWriter{reliableDataWriter_}, unreliableDataWriter{unreliableDataWriter_}, players{players_}, localPlayerState{localPlayerState_}, localPlayerAvatar{localPlayerAvatar_}, localPlayer{localPlayer_}, lastConnectionId{lastConnectionId_}, lastSyncTimeUpdate{lastSyncTimeUpdate_}, lastPollTime{lastPollTime_}, messageSerializer{messageSerializer_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static public System.Int32 invalidSortIndex
    static constexpr const int invalidSortIndex = -1;
    // Get static field: static public System.Int32 invalidSortIndex
    static int _get_invalidSortIndex();
    // Set static field: static public System.Int32 invalidSortIndex
    static void _set_invalidSortIndex(int value);
    // static field const value: static private System.Byte kAllConnectionsId
    static constexpr const uint8_t kAllConnectionsId = 255u;
    // Get static field: static private System.Byte kAllConnectionsId
    static uint8_t _get_kAllConnectionsId();
    // Set static field: static private System.Byte kAllConnectionsId
    static void _set_kAllConnectionsId(uint8_t value);
    // static field const value: static private System.Byte kLocalConnectionId
    static constexpr const uint8_t kLocalConnectionId = 0u;
    // Get static field: static private System.Byte kLocalConnectionId
    static uint8_t _get_kLocalConnectionId();
    // Set static field: static private System.Byte kLocalConnectionId
    static void _set_kLocalConnectionId(uint8_t value);
    // static field const value: static private System.Single kSyncTimeUpdateFrequency
    static constexpr const float kSyncTimeUpdateFrequency = 5;
    // Get static field: static private System.Single kSyncTimeUpdateFrequency
    static float _get_kSyncTimeUpdateFrequency();
    // Set static field: static private System.Single kSyncTimeUpdateFrequency
    static void _set_kSyncTimeUpdateFrequency(float value);
    // static field const value: static private System.Single kSyncTimeAllowedReceiveWindow
    static constexpr const float kSyncTimeAllowedReceiveWindow = 0.03;
    // Get static field: static private System.Single kSyncTimeAllowedReceiveWindow
    static float _get_kSyncTimeAllowedReceiveWindow();
    // Set static field: static private System.Single kSyncTimeAllowedReceiveWindow
    static void _set_kSyncTimeAllowedReceiveWindow(float value);
    // static field const value: static private System.Int32 kMaxUnreliableMessageLength
    static constexpr const int kMaxUnreliableMessageLength = 412;
    // Get static field: static private System.Int32 kMaxUnreliableMessageLength
    static int _get_kMaxUnreliableMessageLength();
    // Set static field: static private System.Int32 kMaxUnreliableMessageLength
    static void _set_kMaxUnreliableMessageLength(int value);
    // private System.Byte GetNextConnectionId()
    // Offset: 0x120CF94
    uint8_t GetNextConnectionId();
    // private System.Void RemoveAllPlayers(DisconnectedReason reason)
    // Offset: 0x120D0BC
    void RemoveAllPlayers(GlobalNamespace::DisconnectedReason reason);
    // private System.Void RemovePlayer(ConnectedPlayerManager/ConnectedPlayer player, DisconnectedReason reason)
    // Offset: 0x120D138
    void RemovePlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player, GlobalNamespace::DisconnectedReason reason);
    // private System.Void AddPlayer(ConnectedPlayerManager/ConnectedPlayer player)
    // Offset: 0x120D470
    void AddPlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(System.Byte connectionId)
    // Offset: 0x120CFE4
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(uint8_t connectionId);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(IConnection connection, System.Byte remoteConnectionId)
    // Offset: 0x120DD18
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(GlobalNamespace::IConnection* connection, uint8_t remoteConnectionId);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(System.String userId)
    // Offset: 0x120DE3C
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(::Il2CppString* userId);
    // public IConnectedPlayer GetConnectedPlayer(System.Int32 index)
    // Offset: 0x120DF1C
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayer(int index);
    // public System.Void add_connectedEvent(System.Action value)
    // Offset: 0x120DF94
    void add_connectedEvent(System::Action* value);
    // public System.Void remove_connectedEvent(System.Action value)
    // Offset: 0x120E038
    void remove_connectedEvent(System::Action* value);
    // public System.Void add_reinitializedEvent(System.Action value)
    // Offset: 0x120E0DC
    void add_reinitializedEvent(System::Action* value);
    // public System.Void remove_reinitializedEvent(System.Action value)
    // Offset: 0x120E180
    void remove_reinitializedEvent(System::Action* value);
    // public System.Void add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x120E224
    void add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x120E2C8
    void remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x120E36C
    void add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x120E410
    void remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E4B4
    void add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E558
    void remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E5FC
    void add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E6A0
    void remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E744
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E7E8
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerOrderChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E88C
    void add_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerOrderChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x120E930
    void remove_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_syncTimeInitializedEvent(System.Action value)
    // Offset: 0x120E9D4
    void add_syncTimeInitializedEvent(System::Action* value);
    // public System.Void remove_syncTimeInitializedEvent(System.Action value)
    // Offset: 0x120EA78
    void remove_syncTimeInitializedEvent(System::Action* value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x120D6F8
    bool get_isConnectionOwner();
    // public System.Boolean get_isConnectedOrConnecting()
    // Offset: 0x120EB1C
    bool get_isConnectedOrConnecting();
    // public System.Boolean get_isConnected()
    // Offset: 0x120D2F8
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x120EB54
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x120EC08
    bool get_isDisconnecting();
    // public IConnectedPlayer get_localPlayer()
    // Offset: 0x120ECBC
    GlobalNamespace::IConnectedPlayer* get_localPlayer();
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0x120ECC4
    int get_connectedPlayerCount();
    // public System.Single get_syncTime()
    // Offset: 0x120D75C
    float get_syncTime();
    // public System.Single get_syncTimeDelay()
    // Offset: 0x120EDB4
    float get_syncTimeDelay();
    // public System.Void set_syncTimeDelay(System.Single value)
    // Offset: 0x120EDBC
    void set_syncTimeDelay(float value);
    // public System.Boolean get_syncTimeInitialized()
    // Offset: 0x120EDC4
    bool get_syncTimeInitialized();
    // private System.Single get_runTime()
    // Offset: 0x120ED14
    float get_runTime();
    // static public ConnectedPlayerManager TryCreate(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    static GlobalNamespace::ConnectedPlayerManager* TryCreate(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::TryCreate");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "ConnectedPlayerManager", "TryCreate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(initParams)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, initParams);
    }
    // private System.Void .ctor(IConnectionManager connectionManager)
    // Offset: 0x120EE00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectedPlayerManager* New_ctor(GlobalNamespace::IConnectionManager* connectionManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectedPlayerManager*, creationType>(connectionManager)));
    }
    // private System.Void ResetLocalState()
    // Offset: 0x120FB0C
    void ResetLocalState();
    // public System.Boolean TryReinitialize(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool TryReinitialize(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::TryReinitialize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TryReinitialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(initParams)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___generic__method, initParams);
    }
    // public System.Void PollUpdate()
    // Offset: 0x120FE40
    void PollUpdate();
    // public System.Void RegisterSerializer(ConnectedPlayerManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x121020C
    void RegisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void UnregisterSerializer(ConnectedPlayerManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x121027C
    void UnregisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public T GetConnectionManager()
    // Offset: 0xFFFFFFFF
    template<class T>
    T GetConnectionManager() {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetConnectionManager");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetConnectionManager", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method);
    }
    // public System.Void Dispose()
    // Offset: 0x12102EC
    void Dispose();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x120D3AC
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void KickPlayer(System.String userId, DisconnectedReason disconnectedReason)
    // Offset: 0x121082C
    void KickPlayer(::Il2CppString* userId, GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void SetLocalPlayerState(System.String state, System.Boolean setState)
    // Offset: 0x1210918
    void SetLocalPlayerState(::Il2CppString* state, bool setState);
    // public System.Void SetLocalPlayerAvatar(MultiplayerAvatarData multiplayerAvatarData)
    // Offset: 0x12109E8
    void SetLocalPlayerAvatar(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData);
    // public System.Void SetLocalPlayerSortIndex(System.Int32 sortIndex)
    // Offset: 0x1210A94
    void SetLocalPlayerSortIndex(int sortIndex);
    // public System.Void SetPlayerSortIndex(IConnectedPlayer player, System.Int32 sortIndex)
    // Offset: 0x1210AA4
    void SetPlayerSortIndex(GlobalNamespace::IConnectedPlayer* player, int sortIndex);
    // private System.Void HandleConnected()
    // Offset: 0x1210BA8
    void HandleConnected();
    // private System.Void HandleDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x1210BBC
    void HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0x1210C3C
    void HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void HandleConnectionConnected(IConnection connection)
    // Offset: 0x120FD2C
    void HandleConnectionConnected(GlobalNamespace::IConnection* connection);
    // private System.Void OnNetworkLatencyUpdate(IConnection connection, System.Single latency)
    // Offset: 0x1210EA4
    void OnNetworkLatencyUpdate(GlobalNamespace::IConnection* connection, float latency);
    // private System.Void HandleConnectionDisconnected(IConnection connection, DisconnectedReason disconnectedReason)
    // Offset: 0x12110E0
    void HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void OnNetworkReceive(IConnection connection, LiteNetLib.Utils.NetDataReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x12111F8
    void OnNetworkReceive(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Send(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Send");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(message)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, message);
    }
    // public System.Void SendUnreliable(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SendUnreliable(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendUnreliable");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SendUnreliable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(message)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, message);
    }
    // private System.Void SendImmediately(LiteNetLib.Utils.INetSerializable message, System.Boolean onlyFirstDegree)
    // Offset: 0x120D7A0
    void SendImmediately(LiteNetLib::Utils::INetSerializable* message, bool onlyFirstDegree);
    // private System.Void SendImmediatelyExcludingPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer excludingPlayer, System.Boolean onlyFirstDegree)
    // Offset: 0x120D908
    void SendImmediatelyExcludingPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* excludingPlayer, bool onlyFirstDegree);
    // private System.Void SendImmediatelyToPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer toPlayer)
    // Offset: 0x120DA20
    void SendImmediatelyToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer);
    // private System.Void SendImmediatelyFromPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer fromPlayer, System.Boolean onlyFirstDegree)
    // Offset: 0x1210FE0
    void SendImmediatelyFromPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, bool onlyFirstDegree);
    // private System.Void SendImmediatelyFromPlayerToPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer fromPlayer, ConnectedPlayerManager/ConnectedPlayer toPlayer)
    // Offset: 0x120DC20
    void SendImmediatelyFromPlayerToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer);
    // private System.Void FlushReliableQueue()
    // Offset: 0x121001C
    void FlushReliableQueue();
    // private System.Void FlushUnreliableQueue()
    // Offset: 0x1210114
    void FlushUnreliableQueue();
    // private LiteNetLib.Utils.NetDataWriter WriteOne(System.Byte senderId, System.Byte receiverId, LiteNetLib.Utils.INetSerializable message)
    // Offset: 0x121160C
    LiteNetLib::Utils::NetDataWriter* WriteOne(uint8_t senderId, uint8_t receiverId, LiteNetLib::Utils::INetSerializable* message);
    // private System.Void Write(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.Utils.INetSerializable packet)
    // Offset: 0x121168C
    void Write(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::Utils::INetSerializable* packet);
    // private System.Void HandleServerPlayerConnected(ConnectedPlayerManager/PlayerConnectedPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1211788
    void HandleServerPlayerConnected(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerStateUpdate(ConnectedPlayerManager/PlayerStatePacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x12119B0
    void HandlePlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerLatencyUpdate(ConnectedPlayerManager/PlayerLatencyPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1211ACC
    void HandlePlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleServerPlayerDisconnected(ConnectedPlayerManager/PlayerDisconnectedPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1211C1C
    void HandleServerPlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleKickPlayerPacket(ConnectedPlayerManager/KickPlayerPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1211D28
    void HandleKickPlayerPacket(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerSortOrderUpdate(ConnectedPlayerManager/PlayerSortOrderPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1211E74
    void HandlePlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleSyncTimePacket(ConnectedPlayerManager/SyncTimePacket packet, IConnectedPlayer player)
    // Offset: 0x1212010
    void HandleSyncTimePacket(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* packet, GlobalNamespace::IConnectedPlayer* player);
    // private System.Void Log(System.String message)
    // Offset: 0x12121C8
    void Log(::Il2CppString* message);
  }; // ConnectedPlayerManager
  #pragma pack(pop)
  static check_size<sizeof(ConnectedPlayerManager), 296 + sizeof(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>*)> __GlobalNamespace_ConnectedPlayerManagerSizeCheck;
  static_assert(sizeof(ConnectedPlayerManager) == 0x130);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager*, "", "ConnectedPlayerManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager::InternalMessageType, "", "ConnectedPlayerManager/InternalMessageType");
