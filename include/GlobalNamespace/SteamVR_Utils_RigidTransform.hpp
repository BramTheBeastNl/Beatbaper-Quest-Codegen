// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SteamVR_Utils
#include "GlobalNamespace/SteamVR_Utils.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: HmdMatrix34_t
  struct HmdMatrix34_t;
  // Forward declaring type: HmdMatrix44_t
  struct HmdMatrix44_t;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SteamVR_Utils/RigidTransform
  struct SteamVR_Utils::RigidTransform : public System::ValueType {
    public:
    // public UnityEngine.Vector3 pos
    // Offset: 0x0
    UnityEngine::Vector3 pos;
    // public UnityEngine.Quaternion rot
    // Offset: 0xC
    UnityEngine::Quaternion rot;
    // Creating value type constructor for type: RigidTransform
    constexpr RigidTransform(UnityEngine::Vector3 pos_ = {}, UnityEngine::Quaternion rot_ = {}) noexcept : pos{pos_}, rot{rot_} {}
    // static public SteamVR_Utils/RigidTransform get_identity()
    // Offset: 0x152858C
    static GlobalNamespace::SteamVR_Utils::RigidTransform get_identity();
    // static public SteamVR_Utils/RigidTransform FromLocal(UnityEngine.Transform t)
    // Offset: 0x152865C
    static GlobalNamespace::SteamVR_Utils::RigidTransform FromLocal(UnityEngine::Transform* t);
    // public System.Void .ctor(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0xDB5BF8
    // ABORTED: conflicts with another method.  RigidTransform(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot);
    // public System.Void .ctor(UnityEngine.Transform t)
    // Offset: 0xDB5C0C
    RigidTransform(UnityEngine::Transform* t);
    // public System.Void .ctor(UnityEngine.Transform from, UnityEngine.Transform to)
    // Offset: 0xDB5C14
    RigidTransform(UnityEngine::Transform* from, UnityEngine::Transform* to);
    // public System.Void .ctor(Valve.VR.HmdMatrix34_t pose)
    // Offset: 0xDB5C1C
    RigidTransform(Valve::VR::HmdMatrix34_t pose);
    // public System.Void .ctor(Valve.VR.HmdMatrix44_t pose)
    // Offset: 0xDB5C50
    RigidTransform(Valve::VR::HmdMatrix44_t pose);
    // public Valve.VR.HmdMatrix44_t ToHmdMatrix44()
    // Offset: 0xDB5C84
    Valve::VR::HmdMatrix44_t ToHmdMatrix44();
    // public Valve.VR.HmdMatrix34_t ToHmdMatrix34()
    // Offset: 0xDB5C8C
    Valve::VR::HmdMatrix34_t ToHmdMatrix34();
    // public System.Void Inverse()
    // Offset: 0xDB5CD8
    void Inverse();
    // public SteamVR_Utils/RigidTransform GetInverse()
    // Offset: 0xDB5CE0
    GlobalNamespace::SteamVR_Utils::RigidTransform GetInverse();
    // public System.Void Multiply(SteamVR_Utils/RigidTransform a, SteamVR_Utils/RigidTransform b)
    // Offset: 0xDB5CE8
    void Multiply(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b);
    // public UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 point)
    // Offset: 0xDB5D30
    UnityEngine::Vector3 InverseTransformPoint(UnityEngine::Vector3 point);
    // public UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 point)
    // Offset: 0xDB5D38
    UnityEngine::Vector3 TransformPoint(UnityEngine::Vector3 point);
    // static public SteamVR_Utils/RigidTransform Interpolate(SteamVR_Utils/RigidTransform a, SteamVR_Utils/RigidTransform b, System.Single t)
    // Offset: 0x1529AF0
    static GlobalNamespace::SteamVR_Utils::RigidTransform Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform a, GlobalNamespace::SteamVR_Utils::RigidTransform b, float t);
    // public System.Void Interpolate(SteamVR_Utils/RigidTransform to, System.Single t)
    // Offset: 0xDB5D40
    void Interpolate(GlobalNamespace::SteamVR_Utils::RigidTransform to, float t);
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0xDB5C94
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDB5C9C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // SteamVR_Utils/RigidTransform
  // static public System.Boolean op_Equality(SteamVR_Utils/RigidTransform a, SteamVR_Utils/RigidTransform b)
  // Offset: 0x1529258
  bool operator ==(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b);
  // static public System.Boolean op_Inequality(SteamVR_Utils/RigidTransform a, SteamVR_Utils/RigidTransform b)
  // Offset: 0x1529390
  bool operator !=(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b);
  // static public SteamVR_Utils/RigidTransform op_Multiply(SteamVR_Utils/RigidTransform a, SteamVR_Utils/RigidTransform b)
  // Offset: 0x15294C8
  GlobalNamespace::SteamVR_Utils::RigidTransform operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& a, const GlobalNamespace::SteamVR_Utils::RigidTransform& b);
  // static public UnityEngine.Vector3 op_Multiply(SteamVR_Utils/RigidTransform t, UnityEngine.Vector3 v)
  // Offset: 0x1529AEC
  UnityEngine::Vector3 operator*(const GlobalNamespace::SteamVR_Utils::RigidTransform& t, const UnityEngine::Vector3& v);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Utils::RigidTransform, "", "SteamVR_Utils/RigidTransform");
#pragma pack(pop)
