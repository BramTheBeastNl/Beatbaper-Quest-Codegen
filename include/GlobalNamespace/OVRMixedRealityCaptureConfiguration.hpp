// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LayerMask
  struct LayerMask;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CompositionMethod
  struct OVRManager_CompositionMethod;
  // Forward declaring type: CameraDevice
  struct OVRManager_CameraDevice;
  // Forward declaring type: DepthQuality
  struct OVRManager_DepthQuality;
  // Forward declaring type: VirtualGreenScreenType
  struct OVRManager_VirtualGreenScreenType;
  // Forward declaring type: MrcActivationMode
  struct OVRManager_MrcActivationMode;
  // Forward declaring type: InstantiateMrcCameraDelegate
  class OVRManager_InstantiateMrcCameraDelegate;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: OVRMixedRealityCaptureConfiguration
  class OVRMixedRealityCaptureConfiguration {
    public:
    // Creating value type constructor for type: OVRMixedRealityCaptureConfiguration
    OVRMixedRealityCaptureConfiguration() noexcept {}
    // public System.Boolean get_enableMixedReality()
    // Offset: 0xFFFFFFFF
    bool get_enableMixedReality();
    // public System.Void set_enableMixedReality(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_enableMixedReality(bool value);
    // public UnityEngine.LayerMask get_extraHiddenLayers()
    // Offset: 0xFFFFFFFF
    UnityEngine::LayerMask get_extraHiddenLayers();
    // public System.Void set_extraHiddenLayers(UnityEngine.LayerMask value)
    // Offset: 0xFFFFFFFF
    void set_extraHiddenLayers(UnityEngine::LayerMask value);
    // public UnityEngine.LayerMask get_extraVisibleLayers()
    // Offset: 0xFFFFFFFF
    UnityEngine::LayerMask get_extraVisibleLayers();
    // public System.Void set_extraVisibleLayers(UnityEngine.LayerMask value)
    // Offset: 0xFFFFFFFF
    void set_extraVisibleLayers(UnityEngine::LayerMask value);
    // public System.Boolean get_dynamicCullingMask()
    // Offset: 0xFFFFFFFF
    bool get_dynamicCullingMask();
    // public System.Void set_dynamicCullingMask(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_dynamicCullingMask(bool value);
    // public OVRManager/CompositionMethod get_compositionMethod()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_CompositionMethod get_compositionMethod();
    // public System.Void set_compositionMethod(OVRManager/CompositionMethod value)
    // Offset: 0xFFFFFFFF
    void set_compositionMethod(GlobalNamespace::OVRManager_CompositionMethod value);
    // public UnityEngine.Color get_externalCompositionBackdropColorRift()
    // Offset: 0xFFFFFFFF
    UnityEngine::Color get_externalCompositionBackdropColorRift();
    // public System.Void set_externalCompositionBackdropColorRift(UnityEngine.Color value)
    // Offset: 0xFFFFFFFF
    void set_externalCompositionBackdropColorRift(UnityEngine::Color value);
    // public UnityEngine.Color get_externalCompositionBackdropColorQuest()
    // Offset: 0xFFFFFFFF
    UnityEngine::Color get_externalCompositionBackdropColorQuest();
    // public System.Void set_externalCompositionBackdropColorQuest(UnityEngine.Color value)
    // Offset: 0xFFFFFFFF
    void set_externalCompositionBackdropColorQuest(UnityEngine::Color value);
    // public OVRManager/CameraDevice get_capturingCameraDevice()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_CameraDevice get_capturingCameraDevice();
    // public System.Void set_capturingCameraDevice(OVRManager/CameraDevice value)
    // Offset: 0xFFFFFFFF
    void set_capturingCameraDevice(GlobalNamespace::OVRManager_CameraDevice value);
    // public System.Boolean get_flipCameraFrameHorizontally()
    // Offset: 0xFFFFFFFF
    bool get_flipCameraFrameHorizontally();
    // public System.Void set_flipCameraFrameHorizontally(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_flipCameraFrameHorizontally(bool value);
    // public System.Boolean get_flipCameraFrameVertically()
    // Offset: 0xFFFFFFFF
    bool get_flipCameraFrameVertically();
    // public System.Void set_flipCameraFrameVertically(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_flipCameraFrameVertically(bool value);
    // public System.Single get_handPoseStateLatency()
    // Offset: 0xFFFFFFFF
    float get_handPoseStateLatency();
    // public System.Void set_handPoseStateLatency(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_handPoseStateLatency(float value);
    // public System.Single get_sandwichCompositionRenderLatency()
    // Offset: 0xFFFFFFFF
    float get_sandwichCompositionRenderLatency();
    // public System.Void set_sandwichCompositionRenderLatency(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_sandwichCompositionRenderLatency(float value);
    // public System.Int32 get_sandwichCompositionBufferedFrames()
    // Offset: 0xFFFFFFFF
    int get_sandwichCompositionBufferedFrames();
    // public System.Void set_sandwichCompositionBufferedFrames(System.Int32 value)
    // Offset: 0xFFFFFFFF
    void set_sandwichCompositionBufferedFrames(int value);
    // public UnityEngine.Color get_chromaKeyColor()
    // Offset: 0xFFFFFFFF
    UnityEngine::Color get_chromaKeyColor();
    // public System.Void set_chromaKeyColor(UnityEngine.Color value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeyColor(UnityEngine::Color value);
    // public System.Single get_chromaKeySimilarity()
    // Offset: 0xFFFFFFFF
    float get_chromaKeySimilarity();
    // public System.Void set_chromaKeySimilarity(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeySimilarity(float value);
    // public System.Single get_chromaKeySmoothRange()
    // Offset: 0xFFFFFFFF
    float get_chromaKeySmoothRange();
    // public System.Void set_chromaKeySmoothRange(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeySmoothRange(float value);
    // public System.Single get_chromaKeySpillRange()
    // Offset: 0xFFFFFFFF
    float get_chromaKeySpillRange();
    // public System.Void set_chromaKeySpillRange(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeySpillRange(float value);
    // public System.Boolean get_useDynamicLighting()
    // Offset: 0xFFFFFFFF
    bool get_useDynamicLighting();
    // public System.Void set_useDynamicLighting(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_useDynamicLighting(bool value);
    // public OVRManager/DepthQuality get_depthQuality()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_DepthQuality get_depthQuality();
    // public System.Void set_depthQuality(OVRManager/DepthQuality value)
    // Offset: 0xFFFFFFFF
    void set_depthQuality(GlobalNamespace::OVRManager_DepthQuality value);
    // public System.Single get_dynamicLightingSmoothFactor()
    // Offset: 0xFFFFFFFF
    float get_dynamicLightingSmoothFactor();
    // public System.Void set_dynamicLightingSmoothFactor(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_dynamicLightingSmoothFactor(float value);
    // public System.Single get_dynamicLightingDepthVariationClampingValue()
    // Offset: 0xFFFFFFFF
    float get_dynamicLightingDepthVariationClampingValue();
    // public System.Void set_dynamicLightingDepthVariationClampingValue(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_dynamicLightingDepthVariationClampingValue(float value);
    // public OVRManager/VirtualGreenScreenType get_virtualGreenScreenType()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_VirtualGreenScreenType get_virtualGreenScreenType();
    // public System.Void set_virtualGreenScreenType(OVRManager/VirtualGreenScreenType value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenType(GlobalNamespace::OVRManager_VirtualGreenScreenType value);
    // public System.Single get_virtualGreenScreenTopY()
    // Offset: 0xFFFFFFFF
    float get_virtualGreenScreenTopY();
    // public System.Void set_virtualGreenScreenTopY(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenTopY(float value);
    // public System.Single get_virtualGreenScreenBottomY()
    // Offset: 0xFFFFFFFF
    float get_virtualGreenScreenBottomY();
    // public System.Void set_virtualGreenScreenBottomY(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenBottomY(float value);
    // public System.Boolean get_virtualGreenScreenApplyDepthCulling()
    // Offset: 0xFFFFFFFF
    bool get_virtualGreenScreenApplyDepthCulling();
    // public System.Void set_virtualGreenScreenApplyDepthCulling(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenApplyDepthCulling(bool value);
    // public System.Single get_virtualGreenScreenDepthTolerance()
    // Offset: 0xFFFFFFFF
    float get_virtualGreenScreenDepthTolerance();
    // public System.Void set_virtualGreenScreenDepthTolerance(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenDepthTolerance(float value);
    // public OVRManager/MrcActivationMode get_mrcActivationMode()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_MrcActivationMode get_mrcActivationMode();
    // public System.Void set_mrcActivationMode(OVRManager/MrcActivationMode value)
    // Offset: 0xFFFFFFFF
    void set_mrcActivationMode(GlobalNamespace::OVRManager_MrcActivationMode value);
    // public OVRManager/InstantiateMrcCameraDelegate get_instantiateMixedRealityCameraGameObject()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* get_instantiateMixedRealityCameraGameObject();
    // public System.Void set_instantiateMixedRealityCameraGameObject(OVRManager/InstantiateMrcCameraDelegate value)
    // Offset: 0xFFFFFFFF
    void set_instantiateMixedRealityCameraGameObject(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value);
  }; // OVRMixedRealityCaptureConfiguration
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRMixedRealityCaptureConfiguration*, "", "OVRMixedRealityCaptureConfiguration");
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_enableMixedReality
// Il2CppName: get_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_enableMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_enableMixedReality
// Il2CppName: set_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_enableMixedReality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers
// Il2CppName: get_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_extraHiddenLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers
// Il2CppName: set_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::LayerMask)>(&OVRMixedRealityCaptureConfiguration::set_extraHiddenLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers
// Il2CppName: get_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::LayerMask (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_extraVisibleLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers
// Il2CppName: set_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::LayerMask)>(&OVRMixedRealityCaptureConfiguration::set_extraVisibleLayers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask
// Il2CppName: get_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_dynamicCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask
// Il2CppName: set_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_dynamicCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_compositionMethod
// Il2CppName: get_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_CompositionMethod (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_compositionMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_compositionMethod
// Il2CppName: set_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_CompositionMethod)>(&OVRMixedRealityCaptureConfiguration::set_compositionMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_CompositionMethod>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift
// Il2CppName: get_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorRift)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift
// Il2CppName: set_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorRift)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest
// Il2CppName: get_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_externalCompositionBackdropColorQuest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest
// Il2CppName: set_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureConfiguration::set_externalCompositionBackdropColorQuest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice
// Il2CppName: get_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_CameraDevice (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_capturingCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice
// Il2CppName: set_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_CameraDevice)>(&OVRMixedRealityCaptureConfiguration::set_capturingCameraDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_CameraDevice>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally
// Il2CppName: get_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_flipCameraFrameHorizontally)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally
// Il2CppName: set_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_flipCameraFrameHorizontally)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically
// Il2CppName: get_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_flipCameraFrameVertically)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically
// Il2CppName: set_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_flipCameraFrameVertically)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency
// Il2CppName: get_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_handPoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency
// Il2CppName: set_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_handPoseStateLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency
// Il2CppName: get_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_sandwichCompositionRenderLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency
// Il2CppName: set_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_sandwichCompositionRenderLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames
// Il2CppName: get_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_sandwichCompositionBufferedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames
// Il2CppName: set_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(int)>(&OVRMixedRealityCaptureConfiguration::set_sandwichCompositionBufferedFrames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeyColor
// Il2CppName: get_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeyColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeyColor
// Il2CppName: set_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(UnityEngine::Color)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeyColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity
// Il2CppName: get_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeySimilarity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity
// Il2CppName: set_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeySimilarity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange
// Il2CppName: get_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeySmoothRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange
// Il2CppName: set_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeySmoothRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange
// Il2CppName: get_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_chromaKeySpillRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange
// Il2CppName: set_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_chromaKeySpillRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_useDynamicLighting
// Il2CppName: get_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_useDynamicLighting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_useDynamicLighting
// Il2CppName: set_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_useDynamicLighting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_depthQuality
// Il2CppName: get_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_DepthQuality (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_depthQuality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_depthQuality
// Il2CppName: set_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_DepthQuality)>(&OVRMixedRealityCaptureConfiguration::set_depthQuality)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_DepthQuality>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor
// Il2CppName: get_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_dynamicLightingSmoothFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor
// Il2CppName: set_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_dynamicLightingSmoothFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue
// Il2CppName: get_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_dynamicLightingDepthVariationClampingValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue
// Il2CppName: set_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_dynamicLightingDepthVariationClampingValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType
// Il2CppName: get_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_VirtualGreenScreenType (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType
// Il2CppName: set_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_VirtualGreenScreenType)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_VirtualGreenScreenType>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY
// Il2CppName: get_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenTopY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY
// Il2CppName: set_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenTopY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY
// Il2CppName: get_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenBottomY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY
// Il2CppName: set_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenBottomY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling
// Il2CppName: get_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenApplyDepthCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling
// Il2CppName: set_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(bool)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenApplyDepthCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance
// Il2CppName: get_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_virtualGreenScreenDepthTolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance
// Il2CppName: set_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(float)>(&OVRMixedRealityCaptureConfiguration::set_virtualGreenScreenDepthTolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_mrcActivationMode
// Il2CppName: get_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_MrcActivationMode (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_mrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_mrcActivationMode
// Il2CppName: set_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_MrcActivationMode)>(&OVRMixedRealityCaptureConfiguration::set_mrcActivationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_MrcActivationMode>()});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject
// Il2CppName: get_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* (OVRMixedRealityCaptureConfiguration::*)()>(&OVRMixedRealityCaptureConfiguration::get_instantiateMixedRealityCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject
// Il2CppName: set_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRMixedRealityCaptureConfiguration::*)(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)>(&OVRMixedRealityCaptureConfiguration::set_instantiateMixedRealityCameraGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRMixedRealityCaptureConfiguration*), "set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*>()});
  }
};
