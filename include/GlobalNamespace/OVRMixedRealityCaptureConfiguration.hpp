// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LayerMask
  struct LayerMask;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CompositionMethod
  struct OVRManager_CompositionMethod;
  // Forward declaring type: CameraDevice
  struct OVRManager_CameraDevice;
  // Forward declaring type: DepthQuality
  struct OVRManager_DepthQuality;
  // Forward declaring type: VirtualGreenScreenType
  struct OVRManager_VirtualGreenScreenType;
  // Forward declaring type: MrcActivationMode
  struct OVRManager_MrcActivationMode;
  // Forward declaring type: InstantiateMrcCameraDelegate
  class OVRManager_InstantiateMrcCameraDelegate;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: OVRMixedRealityCaptureConfiguration
  class OVRMixedRealityCaptureConfiguration {
    public:
    // Creating value type constructor for type: OVRMixedRealityCaptureConfiguration
    OVRMixedRealityCaptureConfiguration() noexcept {}
    // public System.Boolean get_enableMixedReality()
    // Offset: 0xFFFFFFFF
    bool get_enableMixedReality();
    // public System.Void set_enableMixedReality(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_enableMixedReality(bool value);
    // public UnityEngine.LayerMask get_extraHiddenLayers()
    // Offset: 0xFFFFFFFF
    UnityEngine::LayerMask get_extraHiddenLayers();
    // public System.Void set_extraHiddenLayers(UnityEngine.LayerMask value)
    // Offset: 0xFFFFFFFF
    void set_extraHiddenLayers(UnityEngine::LayerMask value);
    // public UnityEngine.LayerMask get_extraVisibleLayers()
    // Offset: 0xFFFFFFFF
    UnityEngine::LayerMask get_extraVisibleLayers();
    // public System.Void set_extraVisibleLayers(UnityEngine.LayerMask value)
    // Offset: 0xFFFFFFFF
    void set_extraVisibleLayers(UnityEngine::LayerMask value);
    // public System.Boolean get_dynamicCullingMask()
    // Offset: 0xFFFFFFFF
    bool get_dynamicCullingMask();
    // public System.Void set_dynamicCullingMask(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_dynamicCullingMask(bool value);
    // public OVRManager/CompositionMethod get_compositionMethod()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_CompositionMethod get_compositionMethod();
    // public System.Void set_compositionMethod(OVRManager/CompositionMethod value)
    // Offset: 0xFFFFFFFF
    void set_compositionMethod(GlobalNamespace::OVRManager_CompositionMethod value);
    // public UnityEngine.Color get_externalCompositionBackdropColorRift()
    // Offset: 0xFFFFFFFF
    UnityEngine::Color get_externalCompositionBackdropColorRift();
    // public System.Void set_externalCompositionBackdropColorRift(UnityEngine.Color value)
    // Offset: 0xFFFFFFFF
    void set_externalCompositionBackdropColorRift(UnityEngine::Color value);
    // public UnityEngine.Color get_externalCompositionBackdropColorQuest()
    // Offset: 0xFFFFFFFF
    UnityEngine::Color get_externalCompositionBackdropColorQuest();
    // public System.Void set_externalCompositionBackdropColorQuest(UnityEngine.Color value)
    // Offset: 0xFFFFFFFF
    void set_externalCompositionBackdropColorQuest(UnityEngine::Color value);
    // public OVRManager/CameraDevice get_capturingCameraDevice()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_CameraDevice get_capturingCameraDevice();
    // public System.Void set_capturingCameraDevice(OVRManager/CameraDevice value)
    // Offset: 0xFFFFFFFF
    void set_capturingCameraDevice(GlobalNamespace::OVRManager_CameraDevice value);
    // public System.Boolean get_flipCameraFrameHorizontally()
    // Offset: 0xFFFFFFFF
    bool get_flipCameraFrameHorizontally();
    // public System.Void set_flipCameraFrameHorizontally(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_flipCameraFrameHorizontally(bool value);
    // public System.Boolean get_flipCameraFrameVertically()
    // Offset: 0xFFFFFFFF
    bool get_flipCameraFrameVertically();
    // public System.Void set_flipCameraFrameVertically(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_flipCameraFrameVertically(bool value);
    // public System.Single get_handPoseStateLatency()
    // Offset: 0xFFFFFFFF
    float get_handPoseStateLatency();
    // public System.Void set_handPoseStateLatency(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_handPoseStateLatency(float value);
    // public System.Single get_sandwichCompositionRenderLatency()
    // Offset: 0xFFFFFFFF
    float get_sandwichCompositionRenderLatency();
    // public System.Void set_sandwichCompositionRenderLatency(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_sandwichCompositionRenderLatency(float value);
    // public System.Int32 get_sandwichCompositionBufferedFrames()
    // Offset: 0xFFFFFFFF
    int get_sandwichCompositionBufferedFrames();
    // public System.Void set_sandwichCompositionBufferedFrames(System.Int32 value)
    // Offset: 0xFFFFFFFF
    void set_sandwichCompositionBufferedFrames(int value);
    // public UnityEngine.Color get_chromaKeyColor()
    // Offset: 0xFFFFFFFF
    UnityEngine::Color get_chromaKeyColor();
    // public System.Void set_chromaKeyColor(UnityEngine.Color value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeyColor(UnityEngine::Color value);
    // public System.Single get_chromaKeySimilarity()
    // Offset: 0xFFFFFFFF
    float get_chromaKeySimilarity();
    // public System.Void set_chromaKeySimilarity(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeySimilarity(float value);
    // public System.Single get_chromaKeySmoothRange()
    // Offset: 0xFFFFFFFF
    float get_chromaKeySmoothRange();
    // public System.Void set_chromaKeySmoothRange(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeySmoothRange(float value);
    // public System.Single get_chromaKeySpillRange()
    // Offset: 0xFFFFFFFF
    float get_chromaKeySpillRange();
    // public System.Void set_chromaKeySpillRange(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_chromaKeySpillRange(float value);
    // public System.Boolean get_useDynamicLighting()
    // Offset: 0xFFFFFFFF
    bool get_useDynamicLighting();
    // public System.Void set_useDynamicLighting(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_useDynamicLighting(bool value);
    // public OVRManager/DepthQuality get_depthQuality()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_DepthQuality get_depthQuality();
    // public System.Void set_depthQuality(OVRManager/DepthQuality value)
    // Offset: 0xFFFFFFFF
    void set_depthQuality(GlobalNamespace::OVRManager_DepthQuality value);
    // public System.Single get_dynamicLightingSmoothFactor()
    // Offset: 0xFFFFFFFF
    float get_dynamicLightingSmoothFactor();
    // public System.Void set_dynamicLightingSmoothFactor(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_dynamicLightingSmoothFactor(float value);
    // public System.Single get_dynamicLightingDepthVariationClampingValue()
    // Offset: 0xFFFFFFFF
    float get_dynamicLightingDepthVariationClampingValue();
    // public System.Void set_dynamicLightingDepthVariationClampingValue(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_dynamicLightingDepthVariationClampingValue(float value);
    // public OVRManager/VirtualGreenScreenType get_virtualGreenScreenType()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_VirtualGreenScreenType get_virtualGreenScreenType();
    // public System.Void set_virtualGreenScreenType(OVRManager/VirtualGreenScreenType value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenType(GlobalNamespace::OVRManager_VirtualGreenScreenType value);
    // public System.Single get_virtualGreenScreenTopY()
    // Offset: 0xFFFFFFFF
    float get_virtualGreenScreenTopY();
    // public System.Void set_virtualGreenScreenTopY(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenTopY(float value);
    // public System.Single get_virtualGreenScreenBottomY()
    // Offset: 0xFFFFFFFF
    float get_virtualGreenScreenBottomY();
    // public System.Void set_virtualGreenScreenBottomY(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenBottomY(float value);
    // public System.Boolean get_virtualGreenScreenApplyDepthCulling()
    // Offset: 0xFFFFFFFF
    bool get_virtualGreenScreenApplyDepthCulling();
    // public System.Void set_virtualGreenScreenApplyDepthCulling(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenApplyDepthCulling(bool value);
    // public System.Single get_virtualGreenScreenDepthTolerance()
    // Offset: 0xFFFFFFFF
    float get_virtualGreenScreenDepthTolerance();
    // public System.Void set_virtualGreenScreenDepthTolerance(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_virtualGreenScreenDepthTolerance(float value);
    // public OVRManager/MrcActivationMode get_mrcActivationMode()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_MrcActivationMode get_mrcActivationMode();
    // public System.Void set_mrcActivationMode(OVRManager/MrcActivationMode value)
    // Offset: 0xFFFFFFFF
    void set_mrcActivationMode(GlobalNamespace::OVRManager_MrcActivationMode value);
    // public OVRManager/InstantiateMrcCameraDelegate get_instantiateMixedRealityCameraGameObject()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* get_instantiateMixedRealityCameraGameObject();
    // public System.Void set_instantiateMixedRealityCameraGameObject(OVRManager/InstantiateMrcCameraDelegate value)
    // Offset: 0xFFFFFFFF
    void set_instantiateMixedRealityCameraGameObject(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value);
  }; // OVRMixedRealityCaptureConfiguration
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRMixedRealityCaptureConfiguration*, "", "OVRMixedRealityCaptureConfiguration");
