// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SelectableStateController
#include "GlobalNamespace/SelectableStateController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BaseTransitionSO
  class BaseTransitionSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BaseStateTransition
  class BaseStateTransition : public UnityEngine::MonoBehaviour {
    public:
    // protected SelectableStateController _selectableStateController
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::SelectableStateController* selectableStateController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SelectableStateController*) == 0x8);
    // Creating value type constructor for type: BaseStateTransition
    BaseStateTransition(GlobalNamespace::SelectableStateController* selectableStateController_ = {}) noexcept : selectableStateController{selectableStateController_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected Tweening.TweeningManager get_tweeningManager()
    // Offset: 0x119F37C
    Tweening::TweeningManager* get_tweeningManager();
    // protected BaseTransitionSO get_transition()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::BaseTransitionSO* get_transition();
    // public System.Void SetState(SelectableStateController/ViewState viewState)
    // Offset: 0x119F398
    void SetState(GlobalNamespace::SelectableStateController::ViewState viewState);
    // protected System.Void OnEnable()
    // Offset: 0x119F410
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x119F4A4
    void OnDisable();
    // private System.Void HandleSelectableStateControllerStateDidChange(SelectableStateController/ViewState state)
    // Offset: 0x119F538
    void HandleSelectableStateControllerStateDidChange(GlobalNamespace::SelectableStateController::ViewState state);
    // protected System.Void TransitionToNormalState()
    // Offset: 0x119F5A0
    void TransitionToNormalState();
    // protected System.Void TransitionToHighlightedState()
    // Offset: 0x119F5A4
    void TransitionToHighlightedState();
    // protected System.Void TransitionToPressedState()
    // Offset: 0x119F5A8
    void TransitionToPressedState();
    // protected System.Void TransitionToDisabledState()
    // Offset: 0x119F5AC
    void TransitionToDisabledState();
    // protected System.Void TransitionToSelectedState()
    // Offset: 0x119F5B0
    void TransitionToSelectedState();
    // protected System.Void TransitionToSelectedAndHighlightedState()
    // Offset: 0x119F5B4
    void TransitionToSelectedAndHighlightedState();
    // protected System.Void SetNormalState()
    // Offset: 0x119F5B8
    void SetNormalState();
    // protected System.Void SetHighlightedState()
    // Offset: 0x119F5BC
    void SetHighlightedState();
    // protected System.Void SetPressedState()
    // Offset: 0x119F5C0
    void SetPressedState();
    // protected System.Void SetDisabledState()
    // Offset: 0x119F5C4
    void SetDisabledState();
    // protected System.Void SetSelectedState()
    // Offset: 0x119F5C8
    void SetSelectedState();
    // protected System.Void SetSelectedAndHighlightedState()
    // Offset: 0x119F5CC
    void SetSelectedAndHighlightedState();
    // protected System.Void .ctor()
    // Offset: 0x119F5D0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseStateTransition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BaseStateTransition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseStateTransition*, creationType>()));
    }
  }; // BaseStateTransition
  #pragma pack(pop)
  static check_size<sizeof(BaseStateTransition), 24 + sizeof(GlobalNamespace::SelectableStateController*)> __GlobalNamespace_BaseStateTransitionSizeCheck;
  static_assert(sizeof(BaseStateTransition) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BaseStateTransition*, "", "BaseStateTransition");
