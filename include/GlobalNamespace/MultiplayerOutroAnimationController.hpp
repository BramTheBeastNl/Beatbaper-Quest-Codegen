// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerScoreRingManager
  class MultiplayerScoreRingManager;
  // Forward declaring type: MultiplayerResultsPyramidView
  class MultiplayerResultsPyramidView;
  // Forward declaring type: FireworksController
  class FireworksController;
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerResultsData
  class MultiplayerResultsData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerOutroAnimationController
  // [] Offset: FFFFFFFF
  class MultiplayerOutroAnimationController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerOutroAnimationController::$PlayOutroAnimation$d__11
    class $PlayOutroAnimation$d__11;
    // Nested type: GlobalNamespace::MultiplayerOutroAnimationController::$PlayBigAvatarHideSfxClip$d__12
    class $PlayBigAvatarHideSfxClip$d__12;
    // private System.Single _startDelay
    // Size: 0x4
    // Offset: 0x18
    float startDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _endDuration
    // Size: 0x4
    // Offset: 0x1C
    float endDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _songMusicDelay
    // Size: 0x4
    // Offset: 0x20
    float songMusicDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: songMusicDelay and: multiplayerScoreRingManager
    char __padding2[0x4] = {};
    // [SpaceAttribute] Offset: 0xD28384
    // private MultiplayerScoreRingManager _multiplayerScoreRingManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerScoreRingManager* multiplayerScoreRingManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreRingManager*) == 0x8);
    // private MultiplayerResultsPyramidView _multiplayerResultsPyramidView
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MultiplayerResultsPyramidView* multiplayerResultsPyramidView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsPyramidView*) == 0x8);
    // private FireworksController _fireworksController
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::FireworksController* fireworksController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FireworksController*) == 0x8);
    // [InjectAttribute] Offset: 0xD283DC
    // private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD283EC
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // Creating value type constructor for type: MultiplayerOutroAnimationController
    MultiplayerOutroAnimationController(float startDelay_ = {}, float endDuration_ = {}, float songMusicDelay_ = {}, GlobalNamespace::MultiplayerScoreRingManager* multiplayerScoreRingManager_ = {}, GlobalNamespace::MultiplayerResultsPyramidView* multiplayerResultsPyramidView_ = {}, GlobalNamespace::FireworksController* fireworksController_ = {}, GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}) noexcept : startDelay{startDelay_}, endDuration{endDuration_}, songMusicDelay{songMusicDelay_}, multiplayerScoreRingManager{multiplayerScoreRingManager_}, multiplayerResultsPyramidView{multiplayerResultsPyramidView_}, fireworksController{fireworksController_}, multiplayerPlayersManager{multiplayerPlayersManager_}, multiplayerSessionManager{multiplayerSessionManager_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF2D4D8
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF2D648
    void OnDestroy();
    // public System.Void AnimateOutro(MultiplayerResultsData multiplayerResultsData, System.Action onCompleted)
    // Offset: 0xF2D7BC
    void AnimateOutro(GlobalNamespace::MultiplayerResultsData* multiplayerResultsData, System::Action* onCompleted);
    // private System.Collections.IEnumerator PlayOutroAnimation(MultiplayerResultsData multiplayerResultsData, System.Action onCompleted)
    // Offset: 0xF2D7E8
    System::Collections::IEnumerator* PlayOutroAnimation(GlobalNamespace::MultiplayerResultsData* multiplayerResultsData, System::Action* onCompleted);
    // private System.Collections.IEnumerator PlayBigAvatarHideSfxClip(System.Single delay)
    // Offset: 0xF2D898
    System::Collections::IEnumerator* PlayBigAvatarHideSfxClip(float delay);
    // private System.Void PlayMusicPreview(System.Single maxDuration)
    // Offset: 0xF2D93C
    void PlayMusicPreview(float maxDuration);
    // private System.Void HandlePlayerSpawningDidFinish()
    // Offset: 0xF2D57C
    void HandlePlayerSpawningDidFinish();
    // public System.Void .ctor()
    // Offset: 0xF2DD88
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerOutroAnimationController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerOutroAnimationController*, creationType>()));
    }
  }; // MultiplayerOutroAnimationController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerOutroAnimationController), 72 + sizeof(GlobalNamespace::IMultiplayerSessionManager*)> __GlobalNamespace_MultiplayerOutroAnimationControllerSizeCheck;
  static_assert(sizeof(MultiplayerOutroAnimationController) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerOutroAnimationController*, "", "MultiplayerOutroAnimationController");
