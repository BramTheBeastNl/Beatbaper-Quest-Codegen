// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
// Including type: GhostDuplicationEffect/GhostEffectParams
#include "GlobalNamespace/GhostDuplicationEffect_GhostEffectParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockColorAnimator
  class MaterialPropertyBlockColorAnimator;
  // Skipping declaration: GhostDuplicationEffect because it is already included!
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: MultiplayerPlayerResultsData
  class MultiplayerPlayerResultsData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ImageView
  class ImageView;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
  // Forward declaring type: Vector3Tween
  class Vector3Tween;
  // Forward declaring type: FloatTween
  class FloatTween;
  // Forward declaring type: ColorTween
  class ColorTween;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x238
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerResultsPyramidViewAvatar
  // [] Offset: FFFFFFFF
  class MultiplayerResultsPyramidViewAvatar : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Factory
    class Factory;
    // Nested type: GlobalNamespace::MultiplayerResultsPyramidViewAvatar::$BadgeEffectCoroutine$d__59
    class $BadgeEffectCoroutine$d__59;
    // Nested type: GlobalNamespace::MultiplayerResultsPyramidViewAvatar::$AnimationCoroutine$d__60
    class $AnimationCoroutine$d__60;
    // private MaterialPropertyBlockColorAnimator _standColorAnimator
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MaterialPropertyBlockColorAnimator* standColorAnimator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MaterialPropertyBlockColorAnimator*) == 0x8);
    // private UnityEngine.Transform _standTransform
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* standTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _playerAvatarTransform
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* playerAvatarTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _standWithAvatarTransform
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* standWithAvatarTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Single _perPositionRotation
    // Size: 0x4
    // Offset: 0x38
    float perPositionRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _localPlayerColor
    // Size: 0x10
    // Offset: 0x3C
    UnityEngine::Color localPlayerColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Padding between fields: localPlayerColor and: nameCanvas
    char __padding5[0x4] = {};
    // [HeaderAttribute] Offset: 0xD28868
    // private UnityEngine.CanvasGroup _nameCanvas
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::CanvasGroup* nameCanvas;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasGroup*) == 0x8);
    // private TMPro.TextMeshProUGUI _positionText
    // Size: 0x8
    // Offset: 0x58
    TMPro::TextMeshProUGUI* positionText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _nameText
    // Size: 0x8
    // Offset: 0x60
    TMPro::TextMeshProUGUI* nameText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private HMUI.ImageView _nameBackground
    // Size: 0x8
    // Offset: 0x68
    HMUI::ImageView* nameBackground;
    // Field size check
    static_assert(sizeof(HMUI::ImageView*) == 0x8);
    // private System.Single _badgeYOffset
    // Size: 0x4
    // Offset: 0x70
    float badgeYOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Tweening.EaseType _titleMakingSpaceEasing
    // Size: 0x4
    // Offset: 0x74
    Tweening::EaseType titleMakingSpaceEasing;
    // Field size check
    static_assert(sizeof(Tweening::EaseType) == 0x4);
    // [HeaderAttribute] Offset: 0xD28904
    // private UnityEngine.CanvasGroup _badgeCanvas
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::CanvasGroup* badgeCanvas;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasGroup*) == 0x8);
    // private TMPro.TextMeshProUGUI[] _badgeTitles
    // Size: 0x8
    // Offset: 0x80
    ::Array<TMPro::TextMeshProUGUI*>* badgeTitles;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TextMeshProUGUI*>*) == 0x8);
    // private HMUI.ImageView[] _badgeImages
    // Size: 0x8
    // Offset: 0x88
    ::Array<HMUI::ImageView*>* badgeImages;
    // Field size check
    static_assert(sizeof(::Array<HMUI::ImageView*>*) == 0x8);
    // private System.Single _arriveParticleDelay
    // Size: 0x4
    // Offset: 0x90
    float arriveParticleDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: arriveParticleDelay and: badgeReceivedTimeline
    char __padding15[0x4] = {};
    // private UnityEngine.Playables.PlayableDirector _badgeReceivedTimeline
    // Size: 0x8
    // Offset: 0x98
    UnityEngine::Playables::PlayableDirector* badgeReceivedTimeline;
    // Field size check
    static_assert(sizeof(UnityEngine::Playables::PlayableDirector*) == 0x8);
    // private UnityEngine.AudioSource _badgeSlideAudioSource
    // Size: 0x8
    // Offset: 0xA0
    UnityEngine::AudioSource* badgeSlideAudioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _badgeReceiveAudioClip
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::AudioClip* badgeReceiveAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // [HeaderAttribute] Offset: 0xD289B0
    // private TMPro.TextMeshProUGUI _badgeSubtitleText
    // Size: 0x8
    // Offset: 0xB0
    TMPro::TextMeshProUGUI* badgeSubtitleText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private UnityEngine.CanvasGroup _badgeSubtitleCanvas
    // Size: 0x8
    // Offset: 0xB8
    UnityEngine::CanvasGroup* badgeSubtitleCanvas;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasGroup*) == 0x8);
    // [HeaderAttribute] Offset: 0xD28A0C
    // private GhostDuplicationEffect _ghostDuplicationEffect
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::GhostDuplicationEffect* ghostDuplicationEffect;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GhostDuplicationEffect*) == 0x8);
    // private GhostDuplicationEffect/GhostEffectParams _ghostAppear
    // Size: 0x45
    // Offset: 0xC8
    GlobalNamespace::GhostDuplicationEffect::GhostEffectParams ghostAppear;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GhostDuplicationEffect::GhostEffectParams) == 0x45);
    // Padding between fields: ghostAppear and: ghostReceive
    char __padding22[0x3] = {};
    // private GhostDuplicationEffect/GhostEffectParams _ghostReceive
    // Size: 0x45
    // Offset: 0x110
    GlobalNamespace::GhostDuplicationEffect::GhostEffectParams ghostReceive;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GhostDuplicationEffect::GhostEffectParams) == 0x45);
    // Padding between fields: ghostReceive and: trophyImage
    char __padding23[0x3] = {};
    // [HeaderAttribute] Offset: 0xD28A78
    // private HMUI.ImageView _trophyImage
    // Size: 0x8
    // Offset: 0x158
    HMUI::ImageView* trophyImage;
    // Field size check
    static_assert(sizeof(HMUI::ImageView*) == 0x8);
    // private UnityEngine.Sprite _firstPlaceTrophy
    // Size: 0x8
    // Offset: 0x160
    UnityEngine::Sprite* firstPlaceTrophy;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite _secondPlaceTrophy
    // Size: 0x8
    // Offset: 0x168
    UnityEngine::Sprite* secondPlaceTrophy;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite _thirdPlaceTrophy
    // Size: 0x8
    // Offset: 0x170
    UnityEngine::Sprite* thirdPlaceTrophy;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Color _firstPlaceColor
    // Size: 0x10
    // Offset: 0x178
    UnityEngine::Color firstPlaceColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.GameObject _personalBestVisual
    // Size: 0x8
    // Offset: 0x188
    UnityEngine::GameObject* personalBestVisual;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0xD28B14
    // private Tweening.EaseType _riseTweenEasing
    // Size: 0x4
    // Offset: 0x190
    Tweening::EaseType riseTweenEasing;
    // Field size check
    static_assert(sizeof(Tweening::EaseType) == 0x4);
    // private UnityEngine.Vector3 _riseStartOffset
    // Size: 0xC
    // Offset: 0x194
    UnityEngine::Vector3 riseStartOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Single _riseTweenDuration
    // Size: 0x4
    // Offset: 0x1A0
    float riseTweenDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _avatarRelativeDelay
    // Size: 0x4
    // Offset: 0x1A4
    float avatarRelativeDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xD28B90
    // private Tweening.EaseType _nameTweenOpacityEasing
    // Size: 0x4
    // Offset: 0x1A8
    Tweening::EaseType nameTweenOpacityEasing;
    // Field size check
    static_assert(sizeof(Tweening::EaseType) == 0x4);
    // private System.Single _nameTweenDuration
    // Size: 0x4
    // Offset: 0x1AC
    float nameTweenDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _nameTweenDelay
    // Size: 0x4
    // Offset: 0x1B0
    float nameTweenDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _additionalPerPositionDelay
    // Size: 0x4
    // Offset: 0x1B4
    float additionalPerPositionDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0xD28C0C
    // private Tweening.EaseType _nameTweenPositionEasing
    // Size: 0x4
    // Offset: 0x1B8
    Tweening::EaseType nameTweenPositionEasing;
    // Field size check
    static_assert(sizeof(Tweening::EaseType) == 0x4);
    // private UnityEngine.Vector3 _nameTweenOffset
    // Size: 0xC
    // Offset: 0x1BC
    UnityEngine::Vector3 nameTweenOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [InjectAttribute] Offset: 0xD28C54
    // private readonly Tweening.TweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x1C8
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD28C64
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x1D0
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD28C74
    // private readonly IDifficultyBeatmap _difficultyBeatmap
    // Size: 0x8
    // Offset: 0x1D8
    GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IDifficultyBeatmap*) == 0x8);
    // private Tweening.Vector3Tween _riseTween
    // Size: 0x8
    // Offset: 0x1E0
    Tweening::Vector3Tween* riseTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // private Tweening.Vector3Tween _avatarRiseTween
    // Size: 0x8
    // Offset: 0x1E8
    Tweening::Vector3Tween* avatarRiseTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // private Tweening.Vector3Tween _badgePositionTween
    // Size: 0x8
    // Offset: 0x1F0
    Tweening::Vector3Tween* badgePositionTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // private Tweening.FloatTween _badgeOpacityTween
    // Size: 0x8
    // Offset: 0x1F8
    Tweening::FloatTween* badgeOpacityTween;
    // Field size check
    static_assert(sizeof(Tweening::FloatTween*) == 0x8);
    // private Tweening.FloatTween _nameOpacityTween
    // Size: 0x8
    // Offset: 0x200
    Tweening::FloatTween* nameOpacityTween;
    // Field size check
    static_assert(sizeof(Tweening::FloatTween*) == 0x8);
    // private Tweening.Vector3Tween _namePositionTween
    // Size: 0x8
    // Offset: 0x208
    Tweening::Vector3Tween* namePositionTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // private Tweening.ColorTween _localGlowTween
    // Size: 0x8
    // Offset: 0x210
    Tweening::ColorTween* localGlowTween;
    // Field size check
    static_assert(sizeof(Tweening::ColorTween*) == 0x8);
    // private Tweening.Vector3Tween _titleMakingSpaceForBadgeTween
    // Size: 0x8
    // Offset: 0x218
    Tweening::Vector3Tween* titleMakingSpaceForBadgeTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // private UnityEngine.Vector3 _originalBadgeLocalPos
    // Size: 0xC
    // Offset: 0x220
    UnityEngine::Vector3 originalBadgeLocalPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Padding between fields: originalBadgeLocalPos and: connectedPlayer
    char __padding51[0x4] = {};
    // [InjectAttribute] Offset: 0xD28C84
    // private readonly IConnectedPlayer _connectedPlayer
    // Size: 0x8
    // Offset: 0x230
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // Creating value type constructor for type: MultiplayerResultsPyramidViewAvatar
    MultiplayerResultsPyramidViewAvatar(GlobalNamespace::MaterialPropertyBlockColorAnimator* standColorAnimator_ = {}, UnityEngine::Transform* standTransform_ = {}, UnityEngine::Transform* playerAvatarTransform_ = {}, UnityEngine::Transform* standWithAvatarTransform_ = {}, float perPositionRotation_ = {}, UnityEngine::Color localPlayerColor_ = {}, UnityEngine::CanvasGroup* nameCanvas_ = {}, TMPro::TextMeshProUGUI* positionText_ = {}, TMPro::TextMeshProUGUI* nameText_ = {}, HMUI::ImageView* nameBackground_ = {}, float badgeYOffset_ = {}, Tweening::EaseType titleMakingSpaceEasing_ = {}, UnityEngine::CanvasGroup* badgeCanvas_ = {}, ::Array<TMPro::TextMeshProUGUI*>* badgeTitles_ = {}, ::Array<HMUI::ImageView*>* badgeImages_ = {}, float arriveParticleDelay_ = {}, UnityEngine::Playables::PlayableDirector* badgeReceivedTimeline_ = {}, UnityEngine::AudioSource* badgeSlideAudioSource_ = {}, UnityEngine::AudioClip* badgeReceiveAudioClip_ = {}, TMPro::TextMeshProUGUI* badgeSubtitleText_ = {}, UnityEngine::CanvasGroup* badgeSubtitleCanvas_ = {}, GlobalNamespace::GhostDuplicationEffect* ghostDuplicationEffect_ = {}, GlobalNamespace::GhostDuplicationEffect::GhostEffectParams ghostAppear_ = {}, GlobalNamespace::GhostDuplicationEffect::GhostEffectParams ghostReceive_ = {}, HMUI::ImageView* trophyImage_ = {}, UnityEngine::Sprite* firstPlaceTrophy_ = {}, UnityEngine::Sprite* secondPlaceTrophy_ = {}, UnityEngine::Sprite* thirdPlaceTrophy_ = {}, UnityEngine::Color firstPlaceColor_ = {}, UnityEngine::GameObject* personalBestVisual_ = {}, Tweening::EaseType riseTweenEasing_ = {}, UnityEngine::Vector3 riseStartOffset_ = {}, float riseTweenDuration_ = {}, float avatarRelativeDelay_ = {}, Tweening::EaseType nameTweenOpacityEasing_ = {}, float nameTweenDuration_ = {}, float nameTweenDelay_ = {}, float additionalPerPositionDelay_ = {}, Tweening::EaseType nameTweenPositionEasing_ = {}, UnityEngine::Vector3 nameTweenOffset_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap_ = {}, Tweening::Vector3Tween* riseTween_ = {}, Tweening::Vector3Tween* avatarRiseTween_ = {}, Tweening::Vector3Tween* badgePositionTween_ = {}, Tweening::FloatTween* badgeOpacityTween_ = {}, Tweening::FloatTween* nameOpacityTween_ = {}, Tweening::Vector3Tween* namePositionTween_ = {}, Tweening::ColorTween* localGlowTween_ = {}, Tweening::Vector3Tween* titleMakingSpaceForBadgeTween_ = {}, UnityEngine::Vector3 originalBadgeLocalPos_ = {}, GlobalNamespace::IConnectedPlayer* connectedPlayer_ = {}) noexcept : standColorAnimator{standColorAnimator_}, standTransform{standTransform_}, playerAvatarTransform{playerAvatarTransform_}, standWithAvatarTransform{standWithAvatarTransform_}, perPositionRotation{perPositionRotation_}, localPlayerColor{localPlayerColor_}, nameCanvas{nameCanvas_}, positionText{positionText_}, nameText{nameText_}, nameBackground{nameBackground_}, badgeYOffset{badgeYOffset_}, titleMakingSpaceEasing{titleMakingSpaceEasing_}, badgeCanvas{badgeCanvas_}, badgeTitles{badgeTitles_}, badgeImages{badgeImages_}, arriveParticleDelay{arriveParticleDelay_}, badgeReceivedTimeline{badgeReceivedTimeline_}, badgeSlideAudioSource{badgeSlideAudioSource_}, badgeReceiveAudioClip{badgeReceiveAudioClip_}, badgeSubtitleText{badgeSubtitleText_}, badgeSubtitleCanvas{badgeSubtitleCanvas_}, ghostDuplicationEffect{ghostDuplicationEffect_}, ghostAppear{ghostAppear_}, ghostReceive{ghostReceive_}, trophyImage{trophyImage_}, firstPlaceTrophy{firstPlaceTrophy_}, secondPlaceTrophy{secondPlaceTrophy_}, thirdPlaceTrophy{thirdPlaceTrophy_}, firstPlaceColor{firstPlaceColor_}, personalBestVisual{personalBestVisual_}, riseTweenEasing{riseTweenEasing_}, riseStartOffset{riseStartOffset_}, riseTweenDuration{riseTweenDuration_}, avatarRelativeDelay{avatarRelativeDelay_}, nameTweenOpacityEasing{nameTweenOpacityEasing_}, nameTweenDuration{nameTweenDuration_}, nameTweenDelay{nameTweenDelay_}, additionalPerPositionDelay{additionalPerPositionDelay_}, nameTweenPositionEasing{nameTweenPositionEasing_}, nameTweenOffset{nameTweenOffset_}, tweeningManager{tweeningManager_}, playerDataModel{playerDataModel_}, difficultyBeatmap{difficultyBeatmap_}, riseTween{riseTween_}, avatarRiseTween{avatarRiseTween_}, badgePositionTween{badgePositionTween_}, badgeOpacityTween{badgeOpacityTween_}, nameOpacityTween{nameOpacityTween_}, namePositionTween{namePositionTween_}, localGlowTween{localGlowTween_}, titleMakingSpaceForBadgeTween{titleMakingSpaceForBadgeTween_}, originalBadgeLocalPos{originalBadgeLocalPos_}, connectedPlayer{connectedPlayer_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0xF3334C
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0xF335D0
    void OnDestroy();
    // public System.Void AnimateDisplay(MultiplayerPlayerResultsData resultData, System.Int32 position, System.Int32 playerCount)
    // Offset: 0xF32ECC
    void AnimateDisplay(GlobalNamespace::MultiplayerPlayerResultsData* resultData, int position, int playerCount);
    // public System.Void AnimateBadge(UnityEngine.Transform startPosition, UnityEngine.Transform midPosition)
    // Offset: 0xF32FB4
    void AnimateBadge(UnityEngine::Transform* startPosition, UnityEngine::Transform* midPosition);
    // private System.Void OnValidate()
    // Offset: 0xF33780
    void OnValidate();
    // private System.Collections.IEnumerator BadgeEffectCoroutine(System.Single delayBeforeReceiveStarts, System.Single delayBeforeArrivalEffect)
    // Offset: 0xF336FC
    System::Collections::IEnumerator* BadgeEffectCoroutine(float delayBeforeReceiveStarts, float delayBeforeArrivalEffect);
    // private System.Collections.IEnumerator AnimationCoroutine(MultiplayerPlayerResultsData resultData, System.Int32 position, System.Int32 playerCount)
    // Offset: 0xF33668
    System::Collections::IEnumerator* AnimationCoroutine(GlobalNamespace::MultiplayerPlayerResultsData* resultData, int position, int playerCount);
    // private System.Void <Awake>b__54_0(UnityEngine.Vector3 val)
    // Offset: 0xF33904
    void $Awake$b__54_0(UnityEngine::Vector3 val);
    // private System.Void <Awake>b__54_1(UnityEngine.Vector3 val)
    // Offset: 0xF33920
    void $Awake$b__54_1(UnityEngine::Vector3 val);
    // private System.Void <AnimateBadge>b__57_0(UnityEngine.Vector3 val)
    // Offset: 0xF3393C
    void $AnimateBadge$b__57_0(UnityEngine::Vector3 val);
    // private System.Void <AnimationCoroutine>b__60_0(System.Single val)
    // Offset: 0xF33990
    void $AnimationCoroutine$b__60_0(float val);
    // private System.Void <AnimationCoroutine>b__60_1(UnityEngine.Vector3 val)
    // Offset: 0xF339AC
    void $AnimationCoroutine$b__60_1(UnityEngine::Vector3 val);
    // public System.Void .ctor()
    // Offset: 0xF337EC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerResultsPyramidViewAvatar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidViewAvatar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerResultsPyramidViewAvatar*, creationType>()));
    }
  }; // MultiplayerResultsPyramidViewAvatar
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerResultsPyramidViewAvatar), 560 + sizeof(GlobalNamespace::IConnectedPlayer*)> __GlobalNamespace_MultiplayerResultsPyramidViewAvatarSizeCheck;
  static_assert(sizeof(MultiplayerResultsPyramidViewAvatar) == 0x238);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerResultsPyramidViewAvatar*, "", "MultiplayerResultsPyramidViewAvatar");
