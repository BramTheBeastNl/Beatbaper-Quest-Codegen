// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: IBeatToTimeConvertor
  class IBeatToTimeConvertor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::IBeatToTimeConvertor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::IBeatToTimeConvertor*, "", "IBeatToTimeConvertor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: IBeatToTimeConvertor
  // [TokenAttribute] Offset: FFFFFFFF
  class IBeatToTimeConvertor {
    public:
    // public System.Single ConvertBeatToTime(System.Single beat)
    // Offset: 0xFFFFFFFF
    float ConvertBeatToTime(float beat);
  }; // IBeatToTimeConvertor
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IBeatToTimeConvertor::ConvertBeatToTime
// Il2CppName: ConvertBeatToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::IBeatToTimeConvertor::*)(float)>(&GlobalNamespace::IBeatToTimeConvertor::ConvertBeatToTime)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IBeatToTimeConvertor*), "ConvertBeatToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat});
  }
};
