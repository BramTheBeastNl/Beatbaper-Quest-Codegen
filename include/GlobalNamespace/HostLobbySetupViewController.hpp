// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EditableBeatmapSelectionView
  class EditableBeatmapSelectionView;
  // Forward declaring type: EditableModifiersSelectionView
  class EditableModifiersSelectionView;
  // Forward declaring type: ServerCodeView
  class ServerCodeView;
  // Forward declaring type: ILobbyPlayerDataModel
  class ILobbyPlayerDataModel;
  // Forward declaring type: MultiplayerLobbyState
  struct MultiplayerLobbyState;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
  // Forward declaring type: Toggle
  class Toggle;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: HoverHint
  class HoverHint;
  // Forward declaring type: ToggleBinder
  class ToggleBinder;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: HostLobbySetupViewController
  // [] Offset: FFFFFFFF
  class HostLobbySetupViewController : public HMUI::ViewController {
    public:
    // Nested type: GlobalNamespace::HostLobbySetupViewController::CannotStartGameReason
    struct CannotStartGameReason;
    // private UnityEngine.UI.Button _startGameButton
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::UI::Button* startGameButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _cancelStartGameButton
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::Button* cancelStartGameButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Toggle _spectateToggle
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::UI::Toggle* spectateToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // [SpaceAttribute] Offset: 0xDD0BD8
    // private EditableBeatmapSelectionView _beatmapSelectionView
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::EditableBeatmapSelectionView* beatmapSelectionView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EditableBeatmapSelectionView*) == 0x8);
    // private EditableModifiersSelectionView _modifiersSelectionView
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::EditableModifiersSelectionView* modifiersSelectionView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EditableModifiersSelectionView*) == 0x8);
    // private HMUI.HoverHint _cantStartGameHoverHint
    // Size: 0x8
    // Offset: 0x98
    HMUI::HoverHint* cantStartGameHoverHint;
    // Field size check
    static_assert(sizeof(HMUI::HoverHint*) == 0x8);
    // private UnityEngine.GameObject _playerMissingLevelHoverHintWrapper
    // Size: 0x8
    // Offset: 0xA0
    UnityEngine::GameObject* playerMissingLevelHoverHintWrapper;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private HMUI.HoverHint _playersMissingLevelHoverHint
    // Size: 0x8
    // Offset: 0xA8
    HMUI::HoverHint* playersMissingLevelHoverHint;
    // Field size check
    static_assert(sizeof(HMUI::HoverHint*) == 0x8);
    // private ServerCodeView _serverCodeView
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::ServerCodeView* serverCodeView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ServerCodeView*) == 0x8);
    // private readonly HMUI.ToggleBinder _toggleBinder
    // Size: 0x8
    // Offset: 0xB8
    HMUI::ToggleBinder* toggleBinder;
    // Field size check
    static_assert(sizeof(HMUI::ToggleBinder*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDD0C60
    // private System.Action selectBeatmapEvent
    // Size: 0x8
    // Offset: 0xC0
    System::Action* selectBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDD0C70
    // private System.Action selectModifiersEvent
    // Size: 0x8
    // Offset: 0xC8
    System::Action* selectModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDD0C80
    // private System.Action startGameEvent
    // Size: 0x8
    // Offset: 0xD0
    System::Action* startGameEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDD0C90
    // private System.Action cancelStartGameEvent
    // Size: 0x8
    // Offset: 0xD8
    System::Action* cancelStartGameEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDD0CA0
    // private System.Action`1<System.Boolean> playerActiveStateChangedEvent
    // Size: 0x8
    // Offset: 0xE0
    System::Action_1<bool>* playerActiveStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<bool>*) == 0x8);
    // Creating value type constructor for type: HostLobbySetupViewController
    HostLobbySetupViewController(UnityEngine::UI::Button* startGameButton_ = {}, UnityEngine::UI::Button* cancelStartGameButton_ = {}, UnityEngine::UI::Toggle* spectateToggle_ = {}, GlobalNamespace::EditableBeatmapSelectionView* beatmapSelectionView_ = {}, GlobalNamespace::EditableModifiersSelectionView* modifiersSelectionView_ = {}, HMUI::HoverHint* cantStartGameHoverHint_ = {}, UnityEngine::GameObject* playerMissingLevelHoverHintWrapper_ = {}, HMUI::HoverHint* playersMissingLevelHoverHint_ = {}, GlobalNamespace::ServerCodeView* serverCodeView_ = {}, HMUI::ToggleBinder* toggleBinder_ = {}, System::Action* selectBeatmapEvent_ = {}, System::Action* selectModifiersEvent_ = {}, System::Action* startGameEvent_ = {}, System::Action* cancelStartGameEvent_ = {}, System::Action_1<bool>* playerActiveStateChangedEvent_ = {}) noexcept : startGameButton{startGameButton_}, cancelStartGameButton{cancelStartGameButton_}, spectateToggle{spectateToggle_}, beatmapSelectionView{beatmapSelectionView_}, modifiersSelectionView{modifiersSelectionView_}, cantStartGameHoverHint{cantStartGameHoverHint_}, playerMissingLevelHoverHintWrapper{playerMissingLevelHoverHintWrapper_}, playersMissingLevelHoverHint{playersMissingLevelHoverHint_}, serverCodeView{serverCodeView_}, toggleBinder{toggleBinder_}, selectBeatmapEvent{selectBeatmapEvent_}, selectModifiersEvent{selectModifiersEvent_}, startGameEvent{startGameEvent_}, cancelStartGameEvent{cancelStartGameEvent_}, playerActiveStateChangedEvent{playerActiveStateChangedEvent_} {}
    // public System.Void add_selectBeatmapEvent(System.Action value)
    // Offset: 0xF1597C
    void add_selectBeatmapEvent(System::Action* value);
    // public System.Void remove_selectBeatmapEvent(System.Action value)
    // Offset: 0xF16D80
    void remove_selectBeatmapEvent(System::Action* value);
    // public System.Void add_selectModifiersEvent(System.Action value)
    // Offset: 0xF15A20
    void add_selectModifiersEvent(System::Action* value);
    // public System.Void remove_selectModifiersEvent(System.Action value)
    // Offset: 0xF16E24
    void remove_selectModifiersEvent(System::Action* value);
    // public System.Void add_startGameEvent(System.Action value)
    // Offset: 0xF15AC4
    void add_startGameEvent(System::Action* value);
    // public System.Void remove_startGameEvent(System.Action value)
    // Offset: 0xF16EC8
    void remove_startGameEvent(System::Action* value);
    // public System.Void add_cancelStartGameEvent(System.Action value)
    // Offset: 0xF15B68
    void add_cancelStartGameEvent(System::Action* value);
    // public System.Void remove_cancelStartGameEvent(System.Action value)
    // Offset: 0xF16F6C
    void remove_cancelStartGameEvent(System::Action* value);
    // public System.Void add_playerActiveStateChangedEvent(System.Action`1<System.Boolean> value)
    // Offset: 0xF15C0C
    void add_playerActiveStateChangedEvent(System::Action_1<bool>* value);
    // public System.Void remove_playerActiveStateChangedEvent(System.Action`1<System.Boolean> value)
    // Offset: 0xF17010
    void remove_playerActiveStateChangedEvent(System::Action_1<bool>* value);
    // public System.Void SetLobbyPlayerData(ILobbyPlayerDataModel lobbyPlayerDataModel)
    // Offset: 0xF17BCC
    void SetLobbyPlayerData(GlobalNamespace::ILobbyPlayerDataModel* lobbyPlayerDataModel);
    // public System.Void SetPlayersMissingLevelText(System.String playersMissingLevelText)
    // Offset: 0xF1A474
    void SetPlayersMissingLevelText(::Il2CppString* playersMissingLevelText);
    // public System.Void SetStartGameEnabled(System.Boolean startGameEnabled, HostLobbySetupViewController/CannotStartGameReason cannotStartGameReason)
    // Offset: 0xF190F8
    void SetStartGameEnabled(bool startGameEnabled, GlobalNamespace::HostLobbySetupViewController::CannotStartGameReason cannotStartGameReason);
    // public System.Void SetLobbyCode(System.String code)
    // Offset: 0xF17E84
    void SetLobbyCode(::Il2CppString* code);
    // public System.Void SetLobbyState(MultiplayerLobbyState lobbyState)
    // Offset: 0xF163B4
    void SetLobbyState(GlobalNamespace::MultiplayerLobbyState lobbyState);
    // private System.Void HandleSpectateToggleChecked(System.Boolean isChecked)
    // Offset: 0xF1A71C
    void HandleSpectateToggleChecked(bool isChecked);
    // private System.Void <DidActivate>b__31_0()
    // Offset: 0xF1A808
    void $DidActivate$b__31_0();
    // private System.Void <DidActivate>b__31_1()
    // Offset: 0xF1A81C
    void $DidActivate$b__31_1();
    // private System.Void <DidActivate>b__31_2()
    // Offset: 0xF1A830
    void $DidActivate$b__31_2();
    // private System.Void <DidActivate>b__31_3()
    // Offset: 0xF1A844
    void $DidActivate$b__31_3();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF1A4F8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void OnDestroy()
    // Offset: 0xF1A700
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0xF1A794
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HostLobbySetupViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostLobbySetupViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HostLobbySetupViewController*, creationType>()));
    }
  }; // HostLobbySetupViewController
  #pragma pack(pop)
  static check_size<sizeof(HostLobbySetupViewController), 224 + sizeof(System::Action_1<bool>*)> __GlobalNamespace_HostLobbySetupViewControllerSizeCheck;
  static_assert(sizeof(HostLobbySetupViewController) == 0xE8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HostLobbySetupViewController*, "", "HostLobbySetupViewController");
