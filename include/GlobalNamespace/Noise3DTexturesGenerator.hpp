// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture3D
  class Texture3D;
  // Forward declaring type: Color32
  struct Color32;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  // Autogenerated type: Noise3DTexturesGenerator
  // [] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: DB0EE4
  class Noise3DTexturesGenerator : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple
    struct MaterialTextureParamsCouple;
    // Nested type: GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple
    struct MaterialPropertyNameCouple;
    // private Noise3DTexturesGenerator/MaterialTextureParamsCouple[] _data
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>* data;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>*) == 0x8);
    // Creating value type constructor for type: Noise3DTexturesGenerator
    Noise3DTexturesGenerator(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>* data_ = {}) noexcept : data{data_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private UnityEngine.Texture3D _texture
    static UnityEngine::Texture3D* _get__texture();
    // Set static field: static private UnityEngine.Texture3D _texture
    static void _set__texture(UnityEngine::Texture3D* value);
    // static private System.Void NoDomainReloadInit()
    // Offset: 0x198C5BC
    static void NoDomainReloadInit();
    // protected System.Void Awake()
    // Offset: 0x198C628
    void Awake();
    // private UnityEngine.Color32[] CreateNoisePixels(System.Int32 width, System.Int32 height, System.Int32 depth, System.Single scale, System.Int32 repeat, System.Single contrast)
    // Offset: 0x198C8BC
    ::Array<UnityEngine::Color32>* CreateNoisePixels(int width, int height, int depth, float scale, int repeat, float contrast);
    // public System.Void .ctor()
    // Offset: 0x198CB48
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Noise3DTexturesGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("Noise3DTexturesGenerator").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Noise3DTexturesGenerator*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x198CB50
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // Noise3DTexturesGenerator
  static check_size<sizeof(Noise3DTexturesGenerator), 24 + sizeof(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>*)> __GlobalNamespace_Noise3DTexturesGeneratorSizeCheck;
  static_assert(sizeof(Noise3DTexturesGenerator) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::Noise3DTexturesGenerator*, "", "Noise3DTexturesGenerator");
#pragma pack(pop)
