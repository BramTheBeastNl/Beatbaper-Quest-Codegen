// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapData
  class BeatmapData;
  // Forward declaring type: BeatmapDataLoader
  class BeatmapDataLoader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDataSO
  class BeatmapDataSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapDataSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataSO*, "", "BeatmapDataSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapDataSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.String _jsonData
    // Size: 0x8
    // Offset: 0x18
    ::StringW jsonData;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private BeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapData*) == 0x8);
    // private System.Single _beatsPerMinute
    // Size: 0x4
    // Offset: 0x28
    float beatsPerMinute;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shuffle
    // Size: 0x4
    // Offset: 0x2C
    float shuffle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shufflePeriod
    // Size: 0x4
    // Offset: 0x30
    float shufflePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _hasRequiredDataForLoad
    // Size: 0x1
    // Offset: 0x34
    bool hasRequiredDataForLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasRequiredDataForLoad and: beatmapDataLoader
    char __padding5[0x3] = {};
    // private BeatmapDataLoader _beatmapDataLoader
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BeatmapDataLoader* beatmapDataLoader;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataLoader*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String _jsonData
    ::StringW& dyn__jsonData();
    // Get instance field reference: private BeatmapData _beatmapData
    ::GlobalNamespace::BeatmapData*& dyn__beatmapData();
    // Get instance field reference: private System.Single _beatsPerMinute
    float& dyn__beatsPerMinute();
    // Get instance field reference: private System.Single _shuffle
    float& dyn__shuffle();
    // Get instance field reference: private System.Single _shufflePeriod
    float& dyn__shufflePeriod();
    // Get instance field reference: private System.Boolean _hasRequiredDataForLoad
    bool& dyn__hasRequiredDataForLoad();
    // Get instance field reference: private BeatmapDataLoader _beatmapDataLoader
    ::GlobalNamespace::BeatmapDataLoader*& dyn__beatmapDataLoader();
    // public BeatmapData get_beatmapData()
    // Offset: 0x2B4AC24
    ::GlobalNamespace::BeatmapData* get_beatmapData();
    // public System.Void set_beatmapData(BeatmapData value)
    // Offset: 0x2B4AC98
    void set_beatmapData(::GlobalNamespace::BeatmapData* value);
    // public System.Void SetJsonData(System.String jsonData)
    // Offset: 0x2B4ACA0
    void SetJsonData(::StringW jsonData);
    // public System.Void SetRequiredDataForLoad(System.Single beatsPerMinute, System.Single shuffle, System.Single shufflePeriod)
    // Offset: 0x2B4ACA8
    void SetRequiredDataForLoad(float beatsPerMinute, float shuffle, float shufflePeriod);
    // public System.Void Load()
    // Offset: 0x2B4AC54
    void Load();
    // public System.Void .ctor()
    // Offset: 0x2B4ACBC
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataSO*, creationType>()));
    }
  }; // BeatmapDataSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataSO), 56 + sizeof(::GlobalNamespace::BeatmapDataLoader*)> __GlobalNamespace_BeatmapDataSOSizeCheck;
  static_assert(sizeof(BeatmapDataSO) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::get_beatmapData
// Il2CppName: get_beatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapData* (GlobalNamespace::BeatmapDataSO::*)()>(&GlobalNamespace::BeatmapDataSO::get_beatmapData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataSO*), "get_beatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::set_beatmapData
// Il2CppName: set_beatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataSO::*)(::GlobalNamespace::BeatmapData*)>(&GlobalNamespace::BeatmapDataSO::set_beatmapData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataSO*), "set_beatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::SetJsonData
// Il2CppName: SetJsonData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataSO::*)(::StringW)>(&GlobalNamespace::BeatmapDataSO::SetJsonData)> {
  static const MethodInfo* get() {
    static auto* jsonData = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataSO*), "SetJsonData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::SetRequiredDataForLoad
// Il2CppName: SetRequiredDataForLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataSO::*)(float, float, float)>(&GlobalNamespace::BeatmapDataSO::SetRequiredDataForLoad)> {
  static const MethodInfo* get() {
    static auto* beatsPerMinute = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shuffle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shufflePeriod = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataSO*), "SetRequiredDataForLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatsPerMinute, shuffle, shufflePeriod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataSO::*)()>(&GlobalNamespace::BeatmapDataSO::Load)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataSO*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
