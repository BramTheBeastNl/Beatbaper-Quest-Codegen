// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InstantiateMrcCameraDelegate
  class OVRManager_InstantiateMrcCameraDelegate;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: OVRMixedRealityCaptureSettings
  class OVRMixedRealityCaptureSettings : public UnityEngine::ScriptableObject/*, public GlobalNamespace::OVRMixedRealityCaptureConfiguration*/ {
    public:
    // public System.Boolean enableMixedReality
    // Size: 0x1
    // Offset: 0x18
    bool enableMixedReality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableMixedReality and: extraHiddenLayers
    char __padding0[0x3] = {};
    // public UnityEngine.LayerMask extraHiddenLayers
    // Size: 0x4
    // Offset: 0x1C
    UnityEngine::LayerMask extraHiddenLayers;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // public UnityEngine.LayerMask extraVisibleLayers
    // Size: 0x4
    // Offset: 0x20
    UnityEngine::LayerMask extraVisibleLayers;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // public System.Boolean dynamicCullingMask
    // Size: 0x1
    // Offset: 0x24
    bool dynamicCullingMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dynamicCullingMask and: compositionMethod
    char __padding3[0x3] = {};
    // public OVRManager/CompositionMethod compositionMethod
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::OVRManager_CompositionMethod compositionMethod;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_CompositionMethod) == 0x4);
    // public UnityEngine.Color externalCompositionBackdropColorRift
    // Size: 0x10
    // Offset: 0x2C
    UnityEngine::Color externalCompositionBackdropColorRift;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public UnityEngine.Color externalCompositionBackdropColorQuest
    // Size: 0x10
    // Offset: 0x3C
    UnityEngine::Color externalCompositionBackdropColorQuest;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public OVRManager/CameraDevice capturingCameraDevice
    // Size: 0x4
    // Offset: 0x4C
    GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_CameraDevice) == 0x4);
    // public System.Boolean flipCameraFrameHorizontally
    // Size: 0x1
    // Offset: 0x50
    bool flipCameraFrameHorizontally;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipCameraFrameVertically
    // Size: 0x1
    // Offset: 0x51
    bool flipCameraFrameVertically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipCameraFrameVertically and: handPoseStateLatency
    char __padding9[0x2] = {};
    // public System.Single handPoseStateLatency
    // Size: 0x4
    // Offset: 0x54
    float handPoseStateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sandwichCompositionRenderLatency
    // Size: 0x4
    // Offset: 0x58
    float sandwichCompositionRenderLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 sandwichCompositionBufferedFrames
    // Size: 0x4
    // Offset: 0x5C
    int sandwichCompositionBufferedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color chromaKeyColor
    // Size: 0x10
    // Offset: 0x60
    UnityEngine::Color chromaKeyColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public System.Single chromaKeySimilarity
    // Size: 0x4
    // Offset: 0x70
    float chromaKeySimilarity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chromaKeySmoothRange
    // Size: 0x4
    // Offset: 0x74
    float chromaKeySmoothRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chromaKeySpillRange
    // Size: 0x4
    // Offset: 0x78
    float chromaKeySpillRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useDynamicLighting
    // Size: 0x1
    // Offset: 0x7C
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: depthQuality
    char __padding17[0x3] = {};
    // public OVRManager/DepthQuality depthQuality
    // Size: 0x4
    // Offset: 0x80
    GlobalNamespace::OVRManager_DepthQuality depthQuality;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_DepthQuality) == 0x4);
    // public System.Single dynamicLightingSmoothFactor
    // Size: 0x4
    // Offset: 0x84
    float dynamicLightingSmoothFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dynamicLightingDepthVariationClampingValue
    // Size: 0x4
    // Offset: 0x88
    float dynamicLightingDepthVariationClampingValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    // Size: 0x4
    // Offset: 0x8C
    GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_VirtualGreenScreenType) == 0x4);
    // public System.Single virtualGreenScreenTopY
    // Size: 0x4
    // Offset: 0x90
    float virtualGreenScreenTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single virtualGreenScreenBottomY
    // Size: 0x4
    // Offset: 0x94
    float virtualGreenScreenBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean virtualGreenScreenApplyDepthCulling
    // Size: 0x1
    // Offset: 0x98
    bool virtualGreenScreenApplyDepthCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: virtualGreenScreenApplyDepthCulling and: virtualGreenScreenDepthTolerance
    char __padding24[0x3] = {};
    // public System.Single virtualGreenScreenDepthTolerance
    // Size: 0x4
    // Offset: 0x9C
    float virtualGreenScreenDepthTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRManager/MrcActivationMode mrcActivationMode
    // Size: 0x4
    // Offset: 0xA0
    GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_MrcActivationMode) == 0x4);
    // Padding between fields: mrcActivationMode and: instantiateMixedRealityCameraGameObject
    char __padding26[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xDD1044
    // private OVRManager/InstantiateMrcCameraDelegate <OVRMixedRealityCaptureConfiguration.instantiateMixedRealityCameraGameObject>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* instantiateMixedRealityCameraGameObject;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*) == 0x8);
    // Creating value type constructor for type: OVRMixedRealityCaptureSettings
    OVRMixedRealityCaptureSettings(bool enableMixedReality_ = {}, UnityEngine::LayerMask extraHiddenLayers_ = {}, UnityEngine::LayerMask extraVisibleLayers_ = {}, bool dynamicCullingMask_ = {}, GlobalNamespace::OVRManager_CompositionMethod compositionMethod_ = {}, UnityEngine::Color externalCompositionBackdropColorRift_ = {}, UnityEngine::Color externalCompositionBackdropColorQuest_ = {}, GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice_ = {}, bool flipCameraFrameHorizontally_ = {}, bool flipCameraFrameVertically_ = {}, float handPoseStateLatency_ = {}, float sandwichCompositionRenderLatency_ = {}, int sandwichCompositionBufferedFrames_ = {}, UnityEngine::Color chromaKeyColor_ = {}, float chromaKeySimilarity_ = {}, float chromaKeySmoothRange_ = {}, float chromaKeySpillRange_ = {}, bool useDynamicLighting_ = {}, GlobalNamespace::OVRManager_DepthQuality depthQuality_ = {}, float dynamicLightingSmoothFactor_ = {}, float dynamicLightingDepthVariationClampingValue_ = {}, GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType_ = {}, float virtualGreenScreenTopY_ = {}, float virtualGreenScreenBottomY_ = {}, bool virtualGreenScreenApplyDepthCulling_ = {}, float virtualGreenScreenDepthTolerance_ = {}, GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode_ = {}, GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* instantiateMixedRealityCameraGameObject_ = {}) noexcept : enableMixedReality{enableMixedReality_}, extraHiddenLayers{extraHiddenLayers_}, extraVisibleLayers{extraVisibleLayers_}, dynamicCullingMask{dynamicCullingMask_}, compositionMethod{compositionMethod_}, externalCompositionBackdropColorRift{externalCompositionBackdropColorRift_}, externalCompositionBackdropColorQuest{externalCompositionBackdropColorQuest_}, capturingCameraDevice{capturingCameraDevice_}, flipCameraFrameHorizontally{flipCameraFrameHorizontally_}, flipCameraFrameVertically{flipCameraFrameVertically_}, handPoseStateLatency{handPoseStateLatency_}, sandwichCompositionRenderLatency{sandwichCompositionRenderLatency_}, sandwichCompositionBufferedFrames{sandwichCompositionBufferedFrames_}, chromaKeyColor{chromaKeyColor_}, chromaKeySimilarity{chromaKeySimilarity_}, chromaKeySmoothRange{chromaKeySmoothRange_}, chromaKeySpillRange{chromaKeySpillRange_}, useDynamicLighting{useDynamicLighting_}, depthQuality{depthQuality_}, dynamicLightingSmoothFactor{dynamicLightingSmoothFactor_}, dynamicLightingDepthVariationClampingValue{dynamicLightingDepthVariationClampingValue_}, virtualGreenScreenType{virtualGreenScreenType_}, virtualGreenScreenTopY{virtualGreenScreenTopY_}, virtualGreenScreenBottomY{virtualGreenScreenBottomY_}, virtualGreenScreenApplyDepthCulling{virtualGreenScreenApplyDepthCulling_}, virtualGreenScreenDepthTolerance{virtualGreenScreenDepthTolerance_}, mrcActivationMode{mrcActivationMode_}, instantiateMixedRealityCameraGameObject{instantiateMixedRealityCameraGameObject_} {}
    // Creating interface conversion operator: operator GlobalNamespace::OVRMixedRealityCaptureConfiguration
    operator GlobalNamespace::OVRMixedRealityCaptureConfiguration() noexcept {
      return *reinterpret_cast<GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_enableMixedReality()
    // Offset: 0x12D2F80
    bool OVRMixedRealityCaptureConfiguration_get_enableMixedReality();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_enableMixedReality(System.Boolean value)
    // Offset: 0x12D2F88
    void OVRMixedRealityCaptureConfiguration_set_enableMixedReality(bool value);
    // private UnityEngine.LayerMask OVRMixedRealityCaptureConfiguration.get_extraHiddenLayers()
    // Offset: 0x12D2F94
    UnityEngine::LayerMask OVRMixedRealityCaptureConfiguration_get_extraHiddenLayers();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_extraHiddenLayers(UnityEngine.LayerMask value)
    // Offset: 0x12D2F9C
    void OVRMixedRealityCaptureConfiguration_set_extraHiddenLayers(UnityEngine::LayerMask value);
    // private UnityEngine.LayerMask OVRMixedRealityCaptureConfiguration.get_extraVisibleLayers()
    // Offset: 0x12D2FA4
    UnityEngine::LayerMask OVRMixedRealityCaptureConfiguration_get_extraVisibleLayers();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_extraVisibleLayers(UnityEngine.LayerMask value)
    // Offset: 0x12D2FAC
    void OVRMixedRealityCaptureConfiguration_set_extraVisibleLayers(UnityEngine::LayerMask value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_dynamicCullingMask()
    // Offset: 0x12D2FB4
    bool OVRMixedRealityCaptureConfiguration_get_dynamicCullingMask();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicCullingMask(System.Boolean value)
    // Offset: 0x12D2FBC
    void OVRMixedRealityCaptureConfiguration_set_dynamicCullingMask(bool value);
    // private OVRManager/CompositionMethod OVRMixedRealityCaptureConfiguration.get_compositionMethod()
    // Offset: 0x12D2FC8
    GlobalNamespace::OVRManager_CompositionMethod OVRMixedRealityCaptureConfiguration_get_compositionMethod();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_compositionMethod(OVRManager/CompositionMethod value)
    // Offset: 0x12D2FD0
    void OVRMixedRealityCaptureConfiguration_set_compositionMethod(GlobalNamespace::OVRManager_CompositionMethod value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorRift()
    // Offset: 0x12D2FD8
    UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorRift();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorRift(UnityEngine.Color value)
    // Offset: 0x12D2FE4
    void OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorRift(UnityEngine::Color value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_externalCompositionBackdropColorQuest()
    // Offset: 0x12D2FF0
    UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_externalCompositionBackdropColorQuest();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_externalCompositionBackdropColorQuest(UnityEngine.Color value)
    // Offset: 0x12D2FFC
    void OVRMixedRealityCaptureConfiguration_set_externalCompositionBackdropColorQuest(UnityEngine::Color value);
    // private OVRManager/CameraDevice OVRMixedRealityCaptureConfiguration.get_capturingCameraDevice()
    // Offset: 0x12D3008
    GlobalNamespace::OVRManager_CameraDevice OVRMixedRealityCaptureConfiguration_get_capturingCameraDevice();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_capturingCameraDevice(OVRManager/CameraDevice value)
    // Offset: 0x12D3010
    void OVRMixedRealityCaptureConfiguration_set_capturingCameraDevice(GlobalNamespace::OVRManager_CameraDevice value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_flipCameraFrameHorizontally()
    // Offset: 0x12D3018
    bool OVRMixedRealityCaptureConfiguration_get_flipCameraFrameHorizontally();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_flipCameraFrameHorizontally(System.Boolean value)
    // Offset: 0x12D3020
    void OVRMixedRealityCaptureConfiguration_set_flipCameraFrameHorizontally(bool value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_flipCameraFrameVertically()
    // Offset: 0x12D302C
    bool OVRMixedRealityCaptureConfiguration_get_flipCameraFrameVertically();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_flipCameraFrameVertically(System.Boolean value)
    // Offset: 0x12D3034
    void OVRMixedRealityCaptureConfiguration_set_flipCameraFrameVertically(bool value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_handPoseStateLatency()
    // Offset: 0x12D3040
    float OVRMixedRealityCaptureConfiguration_get_handPoseStateLatency();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_handPoseStateLatency(System.Single value)
    // Offset: 0x12D3048
    void OVRMixedRealityCaptureConfiguration_set_handPoseStateLatency(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_sandwichCompositionRenderLatency()
    // Offset: 0x12D3050
    float OVRMixedRealityCaptureConfiguration_get_sandwichCompositionRenderLatency();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_sandwichCompositionRenderLatency(System.Single value)
    // Offset: 0x12D3058
    void OVRMixedRealityCaptureConfiguration_set_sandwichCompositionRenderLatency(float value);
    // private System.Int32 OVRMixedRealityCaptureConfiguration.get_sandwichCompositionBufferedFrames()
    // Offset: 0x12D3060
    int OVRMixedRealityCaptureConfiguration_get_sandwichCompositionBufferedFrames();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_sandwichCompositionBufferedFrames(System.Int32 value)
    // Offset: 0x12D3068
    void OVRMixedRealityCaptureConfiguration_set_sandwichCompositionBufferedFrames(int value);
    // private UnityEngine.Color OVRMixedRealityCaptureConfiguration.get_chromaKeyColor()
    // Offset: 0x12D3070
    UnityEngine::Color OVRMixedRealityCaptureConfiguration_get_chromaKeyColor();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeyColor(UnityEngine.Color value)
    // Offset: 0x12D307C
    void OVRMixedRealityCaptureConfiguration_set_chromaKeyColor(UnityEngine::Color value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySimilarity()
    // Offset: 0x12D3088
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySimilarity();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySimilarity(System.Single value)
    // Offset: 0x12D3090
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySimilarity(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySmoothRange()
    // Offset: 0x12D3098
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySmoothRange();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySmoothRange(System.Single value)
    // Offset: 0x12D30A0
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySmoothRange(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_chromaKeySpillRange()
    // Offset: 0x12D30A8
    float OVRMixedRealityCaptureConfiguration_get_chromaKeySpillRange();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_chromaKeySpillRange(System.Single value)
    // Offset: 0x12D30B0
    void OVRMixedRealityCaptureConfiguration_set_chromaKeySpillRange(float value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_useDynamicLighting()
    // Offset: 0x12D30B8
    bool OVRMixedRealityCaptureConfiguration_get_useDynamicLighting();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_useDynamicLighting(System.Boolean value)
    // Offset: 0x12D30C0
    void OVRMixedRealityCaptureConfiguration_set_useDynamicLighting(bool value);
    // private OVRManager/DepthQuality OVRMixedRealityCaptureConfiguration.get_depthQuality()
    // Offset: 0x12D30CC
    GlobalNamespace::OVRManager_DepthQuality OVRMixedRealityCaptureConfiguration_get_depthQuality();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_depthQuality(OVRManager/DepthQuality value)
    // Offset: 0x12D30D4
    void OVRMixedRealityCaptureConfiguration_set_depthQuality(GlobalNamespace::OVRManager_DepthQuality value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_dynamicLightingSmoothFactor()
    // Offset: 0x12D30DC
    float OVRMixedRealityCaptureConfiguration_get_dynamicLightingSmoothFactor();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicLightingSmoothFactor(System.Single value)
    // Offset: 0x12D30E4
    void OVRMixedRealityCaptureConfiguration_set_dynamicLightingSmoothFactor(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_dynamicLightingDepthVariationClampingValue()
    // Offset: 0x12D30EC
    float OVRMixedRealityCaptureConfiguration_get_dynamicLightingDepthVariationClampingValue();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_dynamicLightingDepthVariationClampingValue(System.Single value)
    // Offset: 0x12D30F4
    void OVRMixedRealityCaptureConfiguration_set_dynamicLightingDepthVariationClampingValue(float value);
    // private OVRManager/VirtualGreenScreenType OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenType()
    // Offset: 0x12D30FC
    GlobalNamespace::OVRManager_VirtualGreenScreenType OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenType();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenType(OVRManager/VirtualGreenScreenType value)
    // Offset: 0x12D3104
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenType(GlobalNamespace::OVRManager_VirtualGreenScreenType value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenTopY()
    // Offset: 0x12D310C
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenTopY();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenTopY(System.Single value)
    // Offset: 0x12D3114
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenTopY(float value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenBottomY()
    // Offset: 0x12D311C
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenBottomY();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenBottomY(System.Single value)
    // Offset: 0x12D3124
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenBottomY(float value);
    // private System.Boolean OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenApplyDepthCulling()
    // Offset: 0x12D312C
    bool OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenApplyDepthCulling();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenApplyDepthCulling(System.Boolean value)
    // Offset: 0x12D3134
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenApplyDepthCulling(bool value);
    // private System.Single OVRMixedRealityCaptureConfiguration.get_virtualGreenScreenDepthTolerance()
    // Offset: 0x12D3140
    float OVRMixedRealityCaptureConfiguration_get_virtualGreenScreenDepthTolerance();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_virtualGreenScreenDepthTolerance(System.Single value)
    // Offset: 0x12D3148
    void OVRMixedRealityCaptureConfiguration_set_virtualGreenScreenDepthTolerance(float value);
    // private OVRManager/MrcActivationMode OVRMixedRealityCaptureConfiguration.get_mrcActivationMode()
    // Offset: 0x12D3150
    GlobalNamespace::OVRManager_MrcActivationMode OVRMixedRealityCaptureConfiguration_get_mrcActivationMode();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_mrcActivationMode(OVRManager/MrcActivationMode value)
    // Offset: 0x12D3158
    void OVRMixedRealityCaptureConfiguration_set_mrcActivationMode(GlobalNamespace::OVRManager_MrcActivationMode value);
    // private OVRManager/InstantiateMrcCameraDelegate OVRMixedRealityCaptureConfiguration.get_instantiateMixedRealityCameraGameObject()
    // Offset: 0x12D3160
    GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* OVRMixedRealityCaptureConfiguration_get_instantiateMixedRealityCameraGameObject();
    // private System.Void OVRMixedRealityCaptureConfiguration.set_instantiateMixedRealityCameraGameObject(OVRManager/InstantiateMrcCameraDelegate value)
    // Offset: 0x12D3168
    void OVRMixedRealityCaptureConfiguration_set_instantiateMixedRealityCameraGameObject(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value);
    // public System.Void .ctor()
    // Offset: 0x12D3170
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRMixedRealityCaptureSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRMixedRealityCaptureSettings*, creationType>()));
    }
  }; // OVRMixedRealityCaptureSettings
  #pragma pack(pop)
  static check_size<sizeof(OVRMixedRealityCaptureSettings), 168 + sizeof(GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)> __GlobalNamespace_OVRMixedRealityCaptureSettingsSizeCheck;
  static_assert(sizeof(OVRMixedRealityCaptureSettings) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRMixedRealityCaptureSettings*, "", "OVRMixedRealityCaptureSettings");
