// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusInit
#include "GlobalNamespace/OculusInit.hpp"
// Including type: Oculus.Platform.Message
#include "Oculus/Platform/Message.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OculusInit/<>c
  // [CompilerGeneratedAttribute] Offset: E11738
  class OculusInit::$$c : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: $$c
    $$c() noexcept {}
    // Get static field: static public readonly OculusInit/<>c <>9
    static GlobalNamespace::OculusInit::$$c* _get_$$9();
    // Set static field: static public readonly OculusInit/<>c <>9
    static void _set_$$9(GlobalNamespace::OculusInit::$$c* value);
    // Get static field: static public Oculus.Platform.Message/Callback <>9__3_0
    static Oculus::Platform::Message::Callback* _get_$$9__3_0();
    // Set static field: static public Oculus.Platform.Message/Callback <>9__3_0
    static void _set_$$9__3_0(Oculus::Platform::Message::Callback* value);
    // static private System.Void .cctor()
    // Offset: 0x11E5E04
    static void _cctor();
    // System.Void <InitCallback>b__3_0(Oculus.Platform.Message message)
    // Offset: 0x11E5E70
    void $InitCallback$b__3_0(Oculus::Platform::Message* message);
    // public System.Void .ctor()
    // Offset: 0x11E5E68
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusInit::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusInit::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusInit::$$c*, creationType>()));
    }
  }; // OculusInit/<>c
  #pragma pack(pop)
  // Writing MetadataGetter for method: OculusInit::$$c::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OculusInit::$$c::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OculusInit::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: OculusInit::$$c::$InitCallback$b__3_0
  // Il2CppName: <InitCallback>b__3_0
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusInit::$$c::*)(Oculus::Platform::Message*)>(&OculusInit::$$c::$InitCallback$b__3_0)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OculusInit::$$c*), "<InitCallback>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Oculus::Platform::Message*>()});
    }
  };
  // Writing MetadataGetter for method: OculusInit::$$c::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusInit::$$c::*)()>(&OculusInit::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OculusInit::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusInit::$$c::*)()>(&OculusInit::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OculusInit::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusInit::$$c*, "", "OculusInit/<>c");
