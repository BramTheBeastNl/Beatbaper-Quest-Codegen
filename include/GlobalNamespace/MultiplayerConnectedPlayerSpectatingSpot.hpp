// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerSpectatingSpotManager
  class MultiplayerSpectatingSpotManager;
  // Forward declaring type: IMultiplayerObservable
  class IMultiplayerObservable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerConnectedPlayerSpectatingSpot
  class MultiplayerConnectedPlayerSpectatingSpot : public UnityEngine::MonoBehaviour, public GlobalNamespace::IMultiplayerSpectatingSpot {
    public:
    // private readonly IConnectedPlayer _connectedPlayer
    // Offset: 0x18
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x20
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // private readonly MultiplayerSpectatingSpotManager _spectatingSpotManager
    // Offset: 0x28
    GlobalNamespace::MultiplayerSpectatingSpotManager* spectatingSpotManager;
    // private System.Action`1<IMultiplayerSpectatingSpot> hasBeenRemovedEvent
    // Offset: 0x30
    System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* hasBeenRemovedEvent;
    // private System.Action`1<System.Boolean> isObservedChangedEvent
    // Offset: 0x38
    System::Action_1<bool>* isObservedChangedEvent;
    // private IMultiplayerObservable <observable>k__BackingField
    // Offset: 0x40
    GlobalNamespace::IMultiplayerObservable* observable;
    // private System.Boolean _playerFailed
    // Offset: 0x48
    bool playerFailed;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_isObservedChangedEvent(System.Action`1<System.Boolean> value)
    // Offset: 0xFCBAD4
    void add_isObservedChangedEvent(System::Action_1<bool>* value);
    // public System.Void remove_isObservedChangedEvent(System.Action`1<System.Boolean> value)
    // Offset: 0xFCBD70
    void remove_isObservedChangedEvent(System::Action_1<bool>* value);
    // private System.Void set_observable(IMultiplayerObservable value)
    // Offset: 0xFCF23C
    void set_observable(GlobalNamespace::IMultiplayerObservable* value);
    // protected System.Void Start()
    // Offset: 0xFCF300
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xFCF460
    void OnDestroy();
    // private System.Void HandlePlayerStateChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0xFCF5C8
    void HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // public System.Void add_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0xFCF0EC
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: System.Void IMultiplayerSpectatingSpot::add_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    void add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void remove_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0xFCF190
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: System.Void IMultiplayerSpectatingSpot::remove_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    void remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public IMultiplayerObservable get_observable()
    // Offset: 0xFCF234
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: IMultiplayerObservable IMultiplayerSpectatingSpot::get_observable()
    GlobalNamespace::IMultiplayerObservable* get_observable();
    // public System.String get_spotName()
    // Offset: 0xFCF244
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: System.String IMultiplayerSpectatingSpot::get_spotName()
    ::Il2CppString* get_spotName();
    // public System.Boolean get_isMain()
    // Offset: 0xFCF2F8
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: System.Boolean IMultiplayerSpectatingSpot::get_isMain()
    bool get_isMain();
    // public System.Void SetIsObserved(System.Boolean isObserved)
    // Offset: 0xFCF554
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: System.Void IMultiplayerSpectatingSpot::SetIsObserved(System.Boolean isObserved)
    void SetIsObserved(bool isObserved);
    // public System.Void .ctor()
    // Offset: 0xFCF760
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerConnectedPlayerSpectatingSpot* New_ctor();
    // private UnityEngine.Transform IMultiplayerSpectatingSpot.get_transform()
    // Offset: 0xFCF768
    // Implemented from: IMultiplayerSpectatingSpot
    // Base method: UnityEngine.Transform IMultiplayerSpectatingSpot::get_transform()
    UnityEngine::Transform* GlobalNamespace_IMultiplayerSpectatingSpot_get_transform();
  }; // MultiplayerConnectedPlayerSpectatingSpot
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot*, "", "MultiplayerConnectedPlayerSpectatingSpot");
#pragma pack(pop)
