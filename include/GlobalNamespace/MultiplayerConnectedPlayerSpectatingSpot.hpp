// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerSpectatingSpotManager
  class MultiplayerSpectatingSpotManager;
  // Forward declaring type: IMultiplayerObservable
  class IMultiplayerObservable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerConnectedPlayerSpectatingSpot
  class MultiplayerConnectedPlayerSpectatingSpot : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IMultiplayerSpectatingSpot*/ {
    public:
    // [InjectAttribute] Offset: 0xE1EE70
    // private readonly IConnectedPlayer _connectedPlayer
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // [InjectAttribute] Offset: 0xE1EE80
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE1EE90
    // private readonly MultiplayerSpectatingSpotManager _spectatingSpotManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerSpectatingSpotManager* spectatingSpotManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerSpectatingSpotManager*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1EEA0
    // private System.Action`1<IMultiplayerSpectatingSpot> hasBeenRemovedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* hasBeenRemovedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1EEB0
    // private System.Action`1<System.Boolean> isObservedChangedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<bool>* isObservedChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<bool>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1EEC0
    // private IMultiplayerObservable <observable>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::IMultiplayerObservable* observable;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerObservable*) == 0x8);
    // private System.Boolean _playerFailed
    // Size: 0x1
    // Offset: 0x48
    bool playerFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MultiplayerConnectedPlayerSpectatingSpot
    MultiplayerConnectedPlayerSpectatingSpot(GlobalNamespace::IConnectedPlayer* connectedPlayer_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::MultiplayerSpectatingSpotManager* spectatingSpotManager_ = {}, System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* hasBeenRemovedEvent_ = {}, System::Action_1<bool>* isObservedChangedEvent_ = {}, GlobalNamespace::IMultiplayerObservable* observable_ = {}, bool playerFailed_ = {}) noexcept : connectedPlayer{connectedPlayer_}, multiplayerSessionManager{multiplayerSessionManager_}, spectatingSpotManager{spectatingSpotManager_}, hasBeenRemovedEvent{hasBeenRemovedEvent_}, isObservedChangedEvent{isObservedChangedEvent_}, observable{observable_}, playerFailed{playerFailed_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerSpectatingSpot
    operator GlobalNamespace::IMultiplayerSpectatingSpot() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerSpectatingSpot*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0x114FEA4
    void add_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void remove_hasBeenRemovedEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0x114FF48
    void remove_hasBeenRemovedEvent(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void add_isObservedChangedEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x114C48C
    void add_isObservedChangedEvent(System::Action_1<bool>* value);
    // public System.Void remove_isObservedChangedEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x114C728
    void remove_isObservedChangedEvent(System::Action_1<bool>* value);
    // public IMultiplayerObservable get_observable()
    // Offset: 0x114FFEC
    GlobalNamespace::IMultiplayerObservable* get_observable();
    // private System.Void set_observable(IMultiplayerObservable value)
    // Offset: 0x114FFF4
    void set_observable(GlobalNamespace::IMultiplayerObservable* value);
    // public System.String get_spotName()
    // Offset: 0x114FFFC
    ::Il2CppString* get_spotName();
    // public System.Boolean get_isMain()
    // Offset: 0x11500B0
    bool get_isMain();
    // protected System.Void Start()
    // Offset: 0x11500B8
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x115029C
    void OnDestroy();
    // public System.Void SetIsObserved(System.Boolean isObserved)
    // Offset: 0x1150440
    void SetIsObserved(bool isObserved);
    // private System.Void ReloadBasedOnPlayerCurrentState(IConnectedPlayer connectedPlayer)
    // Offset: 0x11504B4
    void ReloadBasedOnPlayerCurrentState(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Void HandlePlayerStateChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0x115064C
    void HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Void HandlePlayerDisconnected(IConnectedPlayer connectedPlayer)
    // Offset: 0x1150650
    void HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private UnityEngine.Transform IMultiplayerSpectatingSpot.get_transform()
    // Offset: 0x115065C
    UnityEngine::Transform* IMultiplayerSpectatingSpot_get_transform();
    // public System.Void .ctor()
    // Offset: 0x1150654
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerConnectedPlayerSpectatingSpot* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerConnectedPlayerSpectatingSpot*, creationType>()));
    }
  }; // MultiplayerConnectedPlayerSpectatingSpot
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerConnectedPlayerSpectatingSpot), 72 + sizeof(bool)> __GlobalNamespace_MultiplayerConnectedPlayerSpectatingSpotSizeCheck;
  static_assert(sizeof(MultiplayerConnectedPlayerSpectatingSpot) == 0x49);
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::add_hasBeenRemovedEvent
  // Il2CppName: add_hasBeenRemovedEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*)>(&MultiplayerConnectedPlayerSpectatingSpot::add_hasBeenRemovedEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "add_hasBeenRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::remove_hasBeenRemovedEvent
  // Il2CppName: remove_hasBeenRemovedEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*)>(&MultiplayerConnectedPlayerSpectatingSpot::remove_hasBeenRemovedEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "remove_hasBeenRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::IMultiplayerSpectatingSpot*>*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::add_isObservedChangedEvent
  // Il2CppName: add_isObservedChangedEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(System::Action_1<bool>*)>(&MultiplayerConnectedPlayerSpectatingSpot::add_isObservedChangedEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "add_isObservedChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::remove_isObservedChangedEvent
  // Il2CppName: remove_isObservedChangedEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(System::Action_1<bool>*)>(&MultiplayerConnectedPlayerSpectatingSpot::remove_isObservedChangedEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "remove_isObservedChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::get_observable
  // Il2CppName: get_observable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IMultiplayerObservable* (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::get_observable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "get_observable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::set_observable
  // Il2CppName: set_observable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(GlobalNamespace::IMultiplayerObservable*)>(&MultiplayerConnectedPlayerSpectatingSpot::set_observable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "set_observable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerObservable*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::get_spotName
  // Il2CppName: get_spotName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::get_spotName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "get_spotName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::get_isMain
  // Il2CppName: get_isMain
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::get_isMain)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "get_isMain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::OnDestroy
  // Il2CppName: OnDestroy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::OnDestroy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::SetIsObserved
  // Il2CppName: SetIsObserved
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(bool)>(&MultiplayerConnectedPlayerSpectatingSpot::SetIsObserved)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "SetIsObserved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::ReloadBasedOnPlayerCurrentState
  // Il2CppName: ReloadBasedOnPlayerCurrentState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerConnectedPlayerSpectatingSpot::ReloadBasedOnPlayerCurrentState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "ReloadBasedOnPlayerCurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerStateChanged
  // Il2CppName: HandlePlayerStateChanged
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerStateChanged)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "HandlePlayerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerDisconnected
  // Il2CppName: HandlePlayerDisconnected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerConnectedPlayerSpectatingSpot::HandlePlayerDisconnected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "HandlePlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::IMultiplayerSpectatingSpot_get_transform
  // Il2CppName: IMultiplayerSpectatingSpot.get_transform
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::IMultiplayerSpectatingSpot_get_transform)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), "IMultiplayerSpectatingSpot.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerConnectedPlayerSpectatingSpot::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerConnectedPlayerSpectatingSpot::*)()>(&MultiplayerConnectedPlayerSpectatingSpot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerConnectedPlayerSpectatingSpot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerSpectatingSpot*, "", "MultiplayerConnectedPlayerSpectatingSpot");
