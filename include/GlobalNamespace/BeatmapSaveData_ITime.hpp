// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapSaveData
#include "GlobalNamespace/BeatmapSaveData.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapSaveData/ITime
  class BeatmapSaveData::ITime {
    public:
    // Creating value type constructor for type: ITime
    ITime() noexcept {}
    // public System.Single get_time()
    // Offset: 0xFFFFFFFF
    float get_time();
    // public System.Void MoveTime(System.Single offset)
    // Offset: 0xFFFFFFFF
    void MoveTime(float offset);
  }; // BeatmapSaveData/ITime
  #pragma pack(pop)
  // Writing MetadataGetter for method: BeatmapSaveData::ITime::get_time
  // Il2CppName: get_time
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveData::ITime::*)()>(&BeatmapSaveData::ITime::get_time)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BeatmapSaveData::ITime*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: BeatmapSaveData::ITime::MoveTime
  // Il2CppName: MoveTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapSaveData::ITime::*)(float)>(&BeatmapSaveData::ITime::MoveTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BeatmapSaveData::ITime*), "MoveTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapSaveData::ITime*, "", "BeatmapSaveData/ITime");
