// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TrailElementCollection
  class TrailElementCollection;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: SaberTrailRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class SaberTrailRenderer : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.MeshRenderer _meshRenderer
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Vector3[] _vertices
    // Size: 0x8
    // Offset: 0x30
    ::Array<UnityEngine::Vector3>* vertices;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // private System.Int32[] _indices
    // Size: 0x8
    // Offset: 0x38
    ::Array<int>* indices;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private UnityEngine.Vector2[] _uvs
    // Size: 0x8
    // Offset: 0x40
    ::Array<UnityEngine::Vector2>* uvs;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector2>*) == 0x8);
    // private UnityEngine.Color[] _colors
    // Size: 0x8
    // Offset: 0x48
    ::Array<UnityEngine::Color>* colors;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Color>*) == 0x8);
    // private System.Single _trailWidth
    // Size: 0x4
    // Offset: 0x50
    float trailWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _trailDuration
    // Size: 0x4
    // Offset: 0x54
    float trailDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _segmentDuration
    // Size: 0x4
    // Offset: 0x58
    float segmentDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _granularity
    // Size: 0x4
    // Offset: 0x5C
    int granularity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _whiteSectionMaxDuration
    // Size: 0x4
    // Offset: 0x60
    float whiteSectionMaxDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SaberTrailRenderer
    SaberTrailRenderer(UnityEngine::MeshRenderer* meshRenderer_ = {}, UnityEngine::MeshFilter* meshFilter_ = {}, UnityEngine::Mesh* mesh_ = {}, ::Array<UnityEngine::Vector3>* vertices_ = {}, ::Array<int>* indices_ = {}, ::Array<UnityEngine::Vector2>* uvs_ = {}, ::Array<UnityEngine::Color>* colors_ = {}, float trailWidth_ = {}, float trailDuration_ = {}, float segmentDuration_ = {}, int granularity_ = {}, float whiteSectionMaxDuration_ = {}) noexcept : meshRenderer{meshRenderer_}, meshFilter{meshFilter_}, mesh{mesh_}, vertices{vertices_}, indices{indices_}, uvs{uvs_}, colors{colors_}, trailWidth{trailWidth_}, trailDuration{trailDuration_}, segmentDuration{segmentDuration_}, granularity{granularity_}, whiteSectionMaxDuration{whiteSectionMaxDuration_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE05088
    // Get static field: static private readonly UnityEngine.Bounds _bounds
    static UnityEngine::Bounds _get__bounds();
    // Set static field: static private readonly UnityEngine.Bounds _bounds
    static void _set__bounds(UnityEngine::Bounds value);
    // static field const value: static private System.Single kMinMotionBlurSpeed
    static constexpr const float kMinMotionBlurSpeed = 2.5;
    // Get static field: static private System.Single kMinMotionBlurSpeed
    static float _get_kMinMotionBlurSpeed();
    // Set static field: static private System.Single kMinMotionBlurSpeed
    static void _set_kMinMotionBlurSpeed(float value);
    // static field const value: static private System.Single kMotionBlurStrength
    static constexpr const float kMotionBlurStrength = 0.8;
    // Get static field: static private System.Single kMotionBlurStrength
    static float _get_kMotionBlurStrength();
    // Set static field: static private System.Single kMotionBlurStrength
    static void _set_kMotionBlurStrength(float value);
    // Get instance field: private UnityEngine.MeshRenderer _meshRenderer
    UnityEngine::MeshRenderer* _get__meshRenderer();
    // Set instance field: private UnityEngine.MeshRenderer _meshRenderer
    void _set__meshRenderer(UnityEngine::MeshRenderer* value);
    // Get instance field: private UnityEngine.MeshFilter _meshFilter
    UnityEngine::MeshFilter* _get__meshFilter();
    // Set instance field: private UnityEngine.MeshFilter _meshFilter
    void _set__meshFilter(UnityEngine::MeshFilter* value);
    // Get instance field: private UnityEngine.Mesh _mesh
    UnityEngine::Mesh* _get__mesh();
    // Set instance field: private UnityEngine.Mesh _mesh
    void _set__mesh(UnityEngine::Mesh* value);
    // Get instance field: private UnityEngine.Vector3[] _vertices
    ::Array<UnityEngine::Vector3>* _get__vertices();
    // Set instance field: private UnityEngine.Vector3[] _vertices
    void _set__vertices(::Array<UnityEngine::Vector3>* value);
    // Get instance field: private System.Int32[] _indices
    ::Array<int>* _get__indices();
    // Set instance field: private System.Int32[] _indices
    void _set__indices(::Array<int>* value);
    // Get instance field: private UnityEngine.Vector2[] _uvs
    ::Array<UnityEngine::Vector2>* _get__uvs();
    // Set instance field: private UnityEngine.Vector2[] _uvs
    void _set__uvs(::Array<UnityEngine::Vector2>* value);
    // Get instance field: private UnityEngine.Color[] _colors
    ::Array<UnityEngine::Color>* _get__colors();
    // Set instance field: private UnityEngine.Color[] _colors
    void _set__colors(::Array<UnityEngine::Color>* value);
    // Get instance field: private System.Single _trailWidth
    float _get__trailWidth();
    // Set instance field: private System.Single _trailWidth
    void _set__trailWidth(float value);
    // Get instance field: private System.Single _trailDuration
    float _get__trailDuration();
    // Set instance field: private System.Single _trailDuration
    void _set__trailDuration(float value);
    // Get instance field: private System.Single _segmentDuration
    float _get__segmentDuration();
    // Set instance field: private System.Single _segmentDuration
    void _set__segmentDuration(float value);
    // Get instance field: private System.Int32 _granularity
    int _get__granularity();
    // Set instance field: private System.Int32 _granularity
    void _set__granularity(int value);
    // Get instance field: private System.Single _whiteSectionMaxDuration
    float _get__whiteSectionMaxDuration();
    // Set instance field: private System.Single _whiteSectionMaxDuration
    void _set__whiteSectionMaxDuration(float value);
    // public System.Void Init(System.Single trailWidth, System.Single trailDuration, System.Int32 granularity, System.Single whiteSectionMaxDuration)
    // Offset: 0x114E5FC
    void Init(float trailWidth, float trailDuration, int granularity, float whiteSectionMaxDuration);
    // protected System.Void OnDestroy()
    // Offset: 0x114E924
    void OnDestroy();
    // private System.Void OnValidate()
    // Offset: 0x114E930
    void OnValidate();
    // protected System.Void OnEnable()
    // Offset: 0x114EA10
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x114EAA4
    void OnDisable();
    // public System.Void SetTrailWidth(System.Single width)
    // Offset: 0x114EB38
    void SetTrailWidth(float width);
    // public System.Void UpdateMesh(TrailElementCollection trailElementCollection, UnityEngine.Color color)
    // Offset: 0x114E054
    void UpdateMesh(GlobalNamespace::TrailElementCollection* trailElementCollection, UnityEngine::Color color);
    // protected System.Void UpdateVertices(TrailElementCollection trailElementCollection, UnityEngine.Color color)
    // Offset: 0x114EB40
    void UpdateVertices(GlobalNamespace::TrailElementCollection* trailElementCollection, UnityEngine::Color color);
    // private System.Void UpdateIndices()
    // Offset: 0x114E73C
    void UpdateIndices();
    // public System.Void .ctor()
    // Offset: 0x114F06C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberTrailRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberTrailRenderer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x114F074
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // SaberTrailRenderer
  #pragma pack(pop)
  static check_size<sizeof(SaberTrailRenderer), 96 + sizeof(float)> __GlobalNamespace_SaberTrailRendererSizeCheck;
  static_assert(sizeof(SaberTrailRenderer) == 0x64);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberTrailRenderer*, "", "SaberTrailRenderer");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)(float, float, int, float)>(&GlobalNamespace::SaberTrailRenderer::Init)> {
  static const MethodInfo* get() {
    static auto* trailWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trailDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* granularity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* whiteSectionMaxDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailWidth, trailDuration, granularity, whiteSectionMaxDuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)()>(&GlobalNamespace::SaberTrailRenderer::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)()>(&GlobalNamespace::SaberTrailRenderer::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)()>(&GlobalNamespace::SaberTrailRenderer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)()>(&GlobalNamespace::SaberTrailRenderer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::SetTrailWidth
// Il2CppName: SetTrailWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)(float)>(&GlobalNamespace::SaberTrailRenderer::SetTrailWidth)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "SetTrailWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::UpdateMesh
// Il2CppName: UpdateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)(GlobalNamespace::TrailElementCollection*, UnityEngine::Color)>(&GlobalNamespace::SaberTrailRenderer::UpdateMesh)> {
  static const MethodInfo* get() {
    static auto* trailElementCollection = &::il2cpp_utils::GetClassFromName("", "TrailElementCollection")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "UpdateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailElementCollection, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::UpdateVertices
// Il2CppName: UpdateVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)(GlobalNamespace::TrailElementCollection*, UnityEngine::Color)>(&GlobalNamespace::SaberTrailRenderer::UpdateVertices)> {
  static const MethodInfo* get() {
    static auto* trailElementCollection = &::il2cpp_utils::GetClassFromName("", "TrailElementCollection")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "UpdateVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailElementCollection, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::UpdateIndices
// Il2CppName: UpdateIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberTrailRenderer::*)()>(&GlobalNamespace::SaberTrailRenderer::UpdateIndices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), "UpdateIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SaberTrailRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SaberTrailRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberTrailRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
