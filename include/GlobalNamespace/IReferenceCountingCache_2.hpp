// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: IReferenceCountingCache`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReferenceCountingCache_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::IReferenceCountingCache_2, "", "IReferenceCountingCache`2");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: IReferenceCountingCache`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  class IReferenceCountingCache_2 {
    public:
    // public System.Int32 Insert(TKey key, TValue item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Insert(TKey key, TValue item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IReferenceCountingCache_2::Insert");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key, item);
    }
    // public System.Int32 AddReference(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int AddReference(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IReferenceCountingCache_2::AddReference");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key);
    }
    // public System.Int32 RemoveReference(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RemoveReference(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IReferenceCountingCache_2::RemoveReference");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key);
    }
    // public System.Int32 GetReferenceCount(TKey key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetReferenceCount(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IReferenceCountingCache_2::GetReferenceCount");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReferenceCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key);
    }
    // public System.Boolean TryGet(TKey key, out TValue result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGet(TKey key, ByRef<TValue> result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::IReferenceCountingCache_2::TryGet");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<TValue&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(result));
    }
  }; // IReferenceCountingCache`2
  // Could not write size check! Type: IReferenceCountingCache`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
