// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: MirrorRendererGraphicsSettingsPresets
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets.hpp"
// Including type: NamedPreset
#include "GlobalNamespace/NamedPreset.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: MirrorRendererGraphicsSettingsPresets/Preset
  // [TokenAttribute] Offset: FFFFFFFF
  class MirrorRendererGraphicsSettingsPresets::Preset : public GlobalNamespace::NamedPreset {
    public:
    // Nested type: GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType
    struct MirrorType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MirrorRendererGraphicsSettingsPresets/Preset/MirrorType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MirrorType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: MirrorType
      constexpr MirrorType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType None
      static constexpr const int None = 0;
      // Get static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType None
      static GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType _get_None();
      // Set static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType None
      static void _set_None(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value);
      // static field const value: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType FakeMirror
      static constexpr const int FakeMirror = 1;
      // Get static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType FakeMirror
      static GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType _get_FakeMirror();
      // Set static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType FakeMirror
      static void _set_FakeMirror(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value);
      // static field const value: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType RenderedMirror
      static constexpr const int RenderedMirror = 2;
      // Get static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType RenderedMirror
      static GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType _get_RenderedMirror();
      // Set static field: static public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType RenderedMirror
      static void _set_RenderedMirror(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value);
      // Get instance field: public System.Int32 value__
      int _get_value__();
      // Set instance field: public System.Int32 value__
      void _set_value__(int value);
    }; // MirrorRendererGraphicsSettingsPresets/Preset/MirrorType
    #pragma pack(pop)
    static check_size<sizeof(MirrorRendererGraphicsSettingsPresets::Preset::MirrorType), 0 + sizeof(int)> __GlobalNamespace_MirrorRendererGraphicsSettingsPresets_Preset_MirrorTypeSizeCheck;
    static_assert(sizeof(MirrorRendererGraphicsSettingsPresets::Preset::MirrorType) == 0x4);
    // public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType mirrorType
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType mirrorType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType) == 0x4);
    // public UnityEngine.LayerMask reflectLayers
    // Size: 0x4
    // Offset: 0x1C
    UnityEngine::LayerMask reflectLayers;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // public System.Int32 stereoTextureWidth
    // Size: 0x4
    // Offset: 0x20
    int stereoTextureWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 stereoTextureHeight
    // Size: 0x4
    // Offset: 0x24
    int stereoTextureHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 monoTextureWidth
    // Size: 0x4
    // Offset: 0x28
    int monoTextureWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 monoTextureHeight
    // Size: 0x4
    // Offset: 0x2C
    int monoTextureHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxAntiAliasing
    // Size: 0x4
    // Offset: 0x30
    int maxAntiAliasing;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean enableBloomPrePassFog
    // Size: 0x1
    // Offset: 0x34
    bool enableBloomPrePassFog;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Preset
    Preset(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType mirrorType_ = {}, UnityEngine::LayerMask reflectLayers_ = {}, int stereoTextureWidth_ = {}, int stereoTextureHeight_ = {}, int monoTextureWidth_ = {}, int monoTextureHeight_ = {}, int maxAntiAliasing_ = {}, bool enableBloomPrePassFog_ = {}) noexcept : mirrorType{mirrorType_}, reflectLayers{reflectLayers_}, stereoTextureWidth{stereoTextureWidth_}, stereoTextureHeight{stereoTextureHeight_}, monoTextureWidth{monoTextureWidth_}, monoTextureHeight{monoTextureHeight_}, maxAntiAliasing{maxAntiAliasing_}, enableBloomPrePassFog{enableBloomPrePassFog_} {}
    // Deleting conversion operator: operator ::Il2CppString*
    constexpr operator ::Il2CppString*() const noexcept = delete;
    // Get instance field: public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType mirrorType
    GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType _get_mirrorType();
    // Set instance field: public MirrorRendererGraphicsSettingsPresets/Preset/MirrorType mirrorType
    void _set_mirrorType(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType value);
    // Get instance field: public UnityEngine.LayerMask reflectLayers
    UnityEngine::LayerMask _get_reflectLayers();
    // Set instance field: public UnityEngine.LayerMask reflectLayers
    void _set_reflectLayers(UnityEngine::LayerMask value);
    // Get instance field: public System.Int32 stereoTextureWidth
    int _get_stereoTextureWidth();
    // Set instance field: public System.Int32 stereoTextureWidth
    void _set_stereoTextureWidth(int value);
    // Get instance field: public System.Int32 stereoTextureHeight
    int _get_stereoTextureHeight();
    // Set instance field: public System.Int32 stereoTextureHeight
    void _set_stereoTextureHeight(int value);
    // Get instance field: public System.Int32 monoTextureWidth
    int _get_monoTextureWidth();
    // Set instance field: public System.Int32 monoTextureWidth
    void _set_monoTextureWidth(int value);
    // Get instance field: public System.Int32 monoTextureHeight
    int _get_monoTextureHeight();
    // Set instance field: public System.Int32 monoTextureHeight
    void _set_monoTextureHeight(int value);
    // Get instance field: public System.Int32 maxAntiAliasing
    int _get_maxAntiAliasing();
    // Set instance field: public System.Int32 maxAntiAliasing
    void _set_maxAntiAliasing(int value);
    // Get instance field: public System.Boolean enableBloomPrePassFog
    bool _get_enableBloomPrePassFog();
    // Set instance field: public System.Boolean enableBloomPrePassFog
    void _set_enableBloomPrePassFog(bool value);
    // public System.Void .ctor()
    // Offset: 0x10E78C0
    // Implemented from: NamedPreset
    // Base method: System.Void NamedPreset::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MirrorRendererGraphicsSettingsPresets::Preset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MirrorRendererGraphicsSettingsPresets::Preset*, creationType>()));
    }
  }; // MirrorRendererGraphicsSettingsPresets/Preset
  #pragma pack(pop)
  static check_size<sizeof(MirrorRendererGraphicsSettingsPresets::Preset), 52 + sizeof(bool)> __GlobalNamespace_MirrorRendererGraphicsSettingsPresets_PresetSizeCheck;
  static_assert(sizeof(MirrorRendererGraphicsSettingsPresets::Preset) == 0x35);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset*, "", "MirrorRendererGraphicsSettingsPresets/Preset");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::MirrorType, "", "MirrorRendererGraphicsSettingsPresets/Preset/MirrorType");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MirrorRendererGraphicsSettingsPresets::Preset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
