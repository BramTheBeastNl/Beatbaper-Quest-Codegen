// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRDisplay
#include "GlobalNamespace/OVRDisplay.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  // Autogenerated type: OVRDisplay/EyeFov
  // [] Offset: FFFFFFFF
  struct OVRDisplay::EyeFov/*, public System::ValueType*/ {
    public:
    // public System.Single UpFov
    // Size: 0x4
    // Offset: 0x0
    float UpFov;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single DownFov
    // Size: 0x4
    // Offset: 0x4
    float DownFov;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single LeftFov
    // Size: 0x4
    // Offset: 0x8
    float LeftFov;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single RightFov
    // Size: 0x4
    // Offset: 0xC
    float RightFov;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: EyeFov
    constexpr EyeFov(float UpFov_ = {}, float DownFov_ = {}, float LeftFov_ = {}, float RightFov_ = {}) noexcept : UpFov{UpFov_}, DownFov{DownFov_}, LeftFov{LeftFov_}, RightFov{RightFov_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // OVRDisplay/EyeFov
  static check_size<sizeof(OVRDisplay::EyeFov), 12 + sizeof(float)> __GlobalNamespace_OVRDisplay_EyeFovSizeCheck;
  static_assert(sizeof(OVRDisplay::EyeFov) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay::EyeFov, "", "OVRDisplay/EyeFov");
#pragma pack(pop)
