// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRPlatformSDK
  struct VRPlatformSDK;
  // Forward declaring type: XRDeviceModel
  struct XRDeviceModel;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: OculusVRHelper
  // [] Offset: FFFFFFFF
  class OculusVRHelper : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IVRPlatformHelper*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCF51D4
    // private System.Action inputFocusWasCapturedEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action* inputFocusWasCapturedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF51E4
    // private System.Action inputFocusWasReleasedEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action* inputFocusWasReleasedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF51F4
    // private System.Action vrFocusWasCapturedEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action* vrFocusWasCapturedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF5204
    // private System.Action vrFocusWasReleasedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action* vrFocusWasReleasedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF5214
    // private System.Action hmdUnmountedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* hmdUnmountedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF5224
    // private System.Action hmdMountedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action* hmdMountedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF5234
    // private System.Action joystickWasCenteredThisFrameEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action* joystickWasCenteredThisFrameEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF5244
    // private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<UnityEngine::Vector2>* joystickWasNotCenteredThisFrameEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<UnityEngine::Vector2>*) == 0x8);
    // private System.Boolean _hasInputFocus
    // Size: 0x1
    // Offset: 0x58
    bool hasInputFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasVrFocus
    // Size: 0x1
    // Offset: 0x59
    bool hasVrFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _userPresent
    // Size: 0x1
    // Offset: 0x5A
    bool userPresent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _scrollingLastFrame
    // Size: 0x1
    // Offset: 0x5B
    bool scrollingLastFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: scrollingLastFrame and: disabledEventSystem
    char __padding11[0x4] = {};
    // private UnityEngine.EventSystems.EventSystem _disabledEventSystem
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::EventSystems::EventSystem* disabledEventSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::EventSystem*) == 0x8);
    // Creating value type constructor for type: OculusVRHelper
    OculusVRHelper(System::Action* inputFocusWasCapturedEvent_ = {}, System::Action* inputFocusWasReleasedEvent_ = {}, System::Action* vrFocusWasCapturedEvent_ = {}, System::Action* vrFocusWasReleasedEvent_ = {}, System::Action* hmdUnmountedEvent_ = {}, System::Action* hmdMountedEvent_ = {}, System::Action* joystickWasCenteredThisFrameEvent_ = {}, System::Action_1<UnityEngine::Vector2>* joystickWasNotCenteredThisFrameEvent_ = {}, bool hasInputFocus_ = {}, bool hasVrFocus_ = {}, bool userPresent_ = {}, bool scrollingLastFrame_ = {}, UnityEngine::EventSystems::EventSystem* disabledEventSystem_ = {}) noexcept : inputFocusWasCapturedEvent{inputFocusWasCapturedEvent_}, inputFocusWasReleasedEvent{inputFocusWasReleasedEvent_}, vrFocusWasCapturedEvent{vrFocusWasCapturedEvent_}, vrFocusWasReleasedEvent{vrFocusWasReleasedEvent_}, hmdUnmountedEvent{hmdUnmountedEvent_}, hmdMountedEvent{hmdMountedEvent_}, joystickWasCenteredThisFrameEvent{joystickWasCenteredThisFrameEvent_}, joystickWasNotCenteredThisFrameEvent{joystickWasNotCenteredThisFrameEvent_}, hasInputFocus{hasInputFocus_}, hasVrFocus{hasVrFocus_}, userPresent{userPresent_}, scrollingLastFrame{scrollingLastFrame_}, disabledEventSystem{disabledEventSystem_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IVRPlatformHelper
    operator GlobalNamespace::IVRPlatformHelper() noexcept {
      return *reinterpret_cast<GlobalNamespace::IVRPlatformHelper*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_inputFocusWasCapturedEvent(System.Action value)
    // Offset: 0x112717C
    void add_inputFocusWasCapturedEvent_NEW(System::Action* value);
    // public System.Void remove_inputFocusWasCapturedEvent(System.Action value)
    // Offset: 0x1127220
    void remove_inputFocusWasCapturedEvent_NEW(System::Action* value);
    // public System.Void add_inputFocusWasReleasedEvent(System.Action value)
    // Offset: 0x11272C4
    void add_inputFocusWasReleasedEvent_NEW(System::Action* value);
    // public System.Void remove_inputFocusWasReleasedEvent(System.Action value)
    // Offset: 0x1127368
    void remove_inputFocusWasReleasedEvent_NEW(System::Action* value);
    // public System.Void add_vrFocusWasCapturedEvent(System.Action value)
    // Offset: 0x112740C
    void add_vrFocusWasCapturedEvent_NEW(System::Action* value);
    // public System.Void remove_vrFocusWasCapturedEvent(System.Action value)
    // Offset: 0x11274B0
    void remove_vrFocusWasCapturedEvent_NEW(System::Action* value);
    // public System.Void add_vrFocusWasReleasedEvent(System.Action value)
    // Offset: 0x1127554
    void add_vrFocusWasReleasedEvent_NEW(System::Action* value);
    // public System.Void remove_vrFocusWasReleasedEvent(System.Action value)
    // Offset: 0x11275F8
    void remove_vrFocusWasReleasedEvent_NEW(System::Action* value);
    // public System.Void add_hmdUnmountedEvent(System.Action value)
    // Offset: 0x112769C
    void add_hmdUnmountedEvent_NEW(System::Action* value);
    // public System.Void remove_hmdUnmountedEvent(System.Action value)
    // Offset: 0x1127740
    void remove_hmdUnmountedEvent_NEW(System::Action* value);
    // public System.Void add_hmdMountedEvent(System.Action value)
    // Offset: 0x11277E4
    void add_hmdMountedEvent_NEW(System::Action* value);
    // public System.Void remove_hmdMountedEvent(System.Action value)
    // Offset: 0x1127888
    void remove_hmdMountedEvent_NEW(System::Action* value);
    // public System.Void add_joystickWasCenteredThisFrameEvent(System.Action value)
    // Offset: 0x112792C
    void add_joystickWasCenteredThisFrameEvent_NEW(System::Action* value);
    // public System.Void remove_joystickWasCenteredThisFrameEvent(System.Action value)
    // Offset: 0x11279D0
    void remove_joystickWasCenteredThisFrameEvent_NEW(System::Action* value);
    // public System.Void add_joystickWasNotCenteredThisFrameEvent(System.Action`1<UnityEngine.Vector2> value)
    // Offset: 0x1127A74
    void add_joystickWasNotCenteredThisFrameEvent_NEW(System::Action_1<UnityEngine::Vector2>* value);
    // public System.Void remove_joystickWasNotCenteredThisFrameEvent(System.Action`1<UnityEngine.Vector2> value)
    // Offset: 0x1127B18
    void remove_joystickWasNotCenteredThisFrameEvent_NEW(System::Action_1<UnityEngine::Vector2>* value);
    // public System.Boolean get_hasInputFocus()
    // Offset: 0x1127BBC
    bool get_hasInputFocus_NEW();
    // public System.Boolean get_isAlwaysWireless()
    // Offset: 0x1127C1C
    bool get_isAlwaysWireless_NEW();
    // public VRPlatformSDK get_vrPlatformSDK()
    // Offset: 0x1127C44
    GlobalNamespace::VRPlatformSDK get_vrPlatformSDK_NEW();
    // public XRDeviceModel get_currentXRDeviceModel()
    // Offset: 0x1127C3C
    GlobalNamespace::XRDeviceModel get_currentXRDeviceModel_NEW();
    // private System.Boolean get__isOVRManagerPresent()
    // Offset: 0x1127C4C
    bool get__isOVRManagerPresent();
    // protected System.Void Update()
    // Offset: 0x1127D20
    void Update();
    // protected System.Void FixedUpdate()
    // Offset: 0x1128268
    void FixedUpdate();
    // protected System.Void LateUpdate()
    // Offset: 0x11282DC
    void LateUpdate();
    // public System.Void TriggerHapticPulse(UnityEngine.XR.XRNode node, System.Single duration, System.Single strength, System.Single frequency)
    // Offset: 0x1128350
    void TriggerHapticPulse_NEW(UnityEngine::XR::XRNode node, float duration, float strength, float frequency);
    // public System.Void StopHaptics(UnityEngine.XR.XRNode node)
    // Offset: 0x11283DC
    void StopHaptics_NEW(UnityEngine::XR::XRNode node);
    // public System.Void AdjustControllerTransform(UnityEngine.XR.XRNode node, UnityEngine.Transform transform, UnityEngine.Vector3 position, UnityEngine.Vector3 rotation)
    // Offset: 0x1128458
    void AdjustControllerTransform_NEW(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation);
    // public System.Boolean GetNodePose(UnityEngine.XR.XRNode nodeType, System.Int32 idx, out UnityEngine.Vector3 pos, out UnityEngine.Quaternion rot)
    // Offset: 0x11285D8
    bool GetNodePose_NEW(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot);
    // private System.Void EnableEventSystem()
    // Offset: 0x11281D4
    void EnableEventSystem();
    // private System.Void DisableEventSystem()
    // Offset: 0x11280BC
    void DisableEventSystem();
    // public System.Void .ctor()
    // Offset: 0x1128714
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusVRHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusVRHelper*, creationType>()));
    }
  }; // OculusVRHelper
  #pragma pack(pop)
  static check_size<sizeof(OculusVRHelper), 96 + sizeof(UnityEngine::EventSystems::EventSystem*)> __GlobalNamespace_OculusVRHelperSizeCheck;
  static_assert(sizeof(OculusVRHelper) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusVRHelper*, "", "OculusVRHelper");
