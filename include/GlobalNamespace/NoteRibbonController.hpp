// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteRibbonVisuals
  class NoteRibbonVisuals;
  // Forward declaring type: NoteRibbonCutHelper
  class NoteRibbonCutHelper;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Ray
  struct Ray;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteRibbonController
  class NoteRibbonController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NoteRibbonController::Pool
    class Pool;
    // Nested type: GlobalNamespace::NoteRibbonController::$DissolveCoroutine$d__48
    class $DissolveCoroutine$d__48;
    // private NoteRibbonVisuals _noteRibbonVisuals
    // Offset: 0x18
    GlobalNamespace::NoteRibbonVisuals* noteRibbonVisuals;
    // private UnityEngine.Transform _ribbonWrapperTransform
    // Offset: 0x20
    UnityEngine::Transform* ribbonWrapperTransform;
    // private NoteRibbonCutHelper _noteRibbonCutHelper
    // Offset: 0x28
    GlobalNamespace::NoteRibbonCutHelper* noteRibbonCutHelper;
    // private System.Single _ribbonWidth
    // Offset: 0x30
    float ribbonWidth;
    // private System.Single _ribbonWidthEnlargeScale
    // Offset: 0x34
    float ribbonWidthEnlargeScale;
    // private System.Single _dissolveDuration
    // Offset: 0x38
    float dissolveDuration;
    // private System.Single _noCutToleranceDuration
    // Offset: 0x3C
    float noCutToleranceDuration;
    // private System.Single _cuttableEndTimeOffset
    // Offset: 0x40
    float cuttableEndTimeOffset;
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x48
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Action`1<NoteRibbonController> didInitEvent
    // Offset: 0x50
    System::Action_1<GlobalNamespace::NoteRibbonController*>* didInitEvent;
    // private System.Action`1<NoteRibbonController> didFinishMovementEvent
    // Offset: 0x58
    System::Action_1<GlobalNamespace::NoteRibbonController*>* didFinishMovementEvent;
    // private System.Action`2<NoteRibbonController,System.Single> didStartDissolvingEvent
    // Offset: 0x60
    System::Action_2<GlobalNamespace::NoteRibbonController*, float>* didStartDissolvingEvent;
    // private System.Action`1<NoteRibbonController> didDissolveEvent
    // Offset: 0x68
    System::Action_1<GlobalNamespace::NoteRibbonController*>* didDissolveEvent;
    // private UnityEngine.Vector3 _startPos
    // Offset: 0x70
    UnityEngine::Vector3 startPos;
    // private System.Single _jumpDuration
    // Offset: 0x7C
    float jumpDuration;
    // private System.Single _finishMovementTime
    // Offset: 0x80
    float finishMovementTime;
    // private System.Single _cuttableEndTime
    // Offset: 0x84
    float cuttableEndTime;
    // private System.Boolean _dissolving
    // Offset: 0x88
    bool dissolving;
    // private NoteData _noteData
    // Offset: 0x90
    GlobalNamespace::NoteData* noteData;
    // private UnityEngine.Quaternion _worldRotation
    // Offset: 0x98
    UnityEngine::Quaternion worldRotation;
    // private NoteController _parentNoteController
    // Offset: 0xA8
    GlobalNamespace::NoteController* parentNoteController;
    // private System.Single _noteCutTime
    // Offset: 0xB0
    float noteCutTime;
    // private System.Boolean _wasCutInPreviousFrame
    // Offset: 0xB4
    bool wasCutInPreviousFrame;
    // private System.Boolean _parentNoteWasCut
    // Offset: 0xB5
    bool parentNoteWasCut;
    // private System.Boolean _didPassCuttableEndTime
    // Offset: 0xB6
    bool didPassCuttableEndTime;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didInitEvent(System.Action`1<NoteRibbonController> value)
    // Offset: 0x10AF838
    void add_didInitEvent(System::Action_1<GlobalNamespace::NoteRibbonController*>* value);
    // public System.Void remove_didInitEvent(System.Action`1<NoteRibbonController> value)
    // Offset: 0x10AF8DC
    void remove_didInitEvent(System::Action_1<GlobalNamespace::NoteRibbonController*>* value);
    // public System.Void add_didFinishMovementEvent(System.Action`1<NoteRibbonController> value)
    // Offset: 0x10AF980
    void add_didFinishMovementEvent(System::Action_1<GlobalNamespace::NoteRibbonController*>* value);
    // public System.Void remove_didFinishMovementEvent(System.Action`1<NoteRibbonController> value)
    // Offset: 0x10AFA24
    void remove_didFinishMovementEvent(System::Action_1<GlobalNamespace::NoteRibbonController*>* value);
    // public System.Void add_didStartDissolvingEvent(System.Action`2<NoteRibbonController,System.Single> value)
    // Offset: 0x10AFAC8
    void add_didStartDissolvingEvent(System::Action_2<GlobalNamespace::NoteRibbonController*, float>* value);
    // public System.Void remove_didStartDissolvingEvent(System.Action`2<NoteRibbonController,System.Single> value)
    // Offset: 0x10AFB6C
    void remove_didStartDissolvingEvent(System::Action_2<GlobalNamespace::NoteRibbonController*, float>* value);
    // public System.Void add_didDissolveEvent(System.Action`1<NoteRibbonController> value)
    // Offset: 0x10AFC10
    void add_didDissolveEvent(System::Action_1<GlobalNamespace::NoteRibbonController*>* value);
    // public System.Void remove_didDissolveEvent(System.Action`1<NoteRibbonController> value)
    // Offset: 0x10AFCB4
    void remove_didDissolveEvent(System::Action_1<GlobalNamespace::NoteRibbonController*>* value);
    // public System.Void set_hide(System.Boolean value)
    // Offset: 0x10AFD58
    void set_hide(bool value);
    // public System.Void set_pause(System.Boolean value)
    // Offset: 0x10AFDB4
    void set_pause(bool value);
    // public NoteData get_noteData()
    // Offset: 0x10AFDC4
    GlobalNamespace::NoteData* get_noteData();
    // public System.Void Init(NoteData noteData, NoteController parentNoteController, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Single cutDirectionOffset)
    // Offset: 0x10AFDCC
    void Init(GlobalNamespace::NoteData* noteData, GlobalNamespace::NoteController* parentNoteController, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float cutDirectionOffset);
    // protected System.Void Update()
    // Offset: 0x10B02E4
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x10B0430
    void OnDestroy();
    // public System.Void ManualUpdate()
    // Offset: 0x10B02E8
    void ManualUpdate();
    // private System.Void UnsubscribeFromParentNote()
    // Offset: 0x10B0434
    void UnsubscribeFromParentNote();
    // private System.Void HandleParentNoteControllerWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0x10B06A4
    void HandleParentNoteControllerWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleParentNoteControllerWasMissed(NoteController noteController)
    // Offset: 0x10B0794
    void HandleParentNoteControllerWasMissed(GlobalNamespace::NoteController* noteController);
    // public System.Boolean Cut(UnityEngine.Ray ray, System.Single maxSqrDistance)
    // Offset: 0x10B07BC
    bool Cut(UnityEngine::Ray ray, float maxSqrDistance);
    // private System.Collections.IEnumerator DissolveCoroutine(System.Single duration)
    // Offset: 0x10B0A90
    System::Collections::IEnumerator* DissolveCoroutine(float duration);
    // public System.Void Dissolve(System.Single duration)
    // Offset: 0x10B0574
    void Dissolve(float duration);
    // public System.Void DissolveImmediate()
    // Offset: 0x10B0600
    void DissolveImmediate();
    // public System.Void .ctor()
    // Offset: 0x10B0BC8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NoteRibbonController* New_ctor();
  }; // NoteRibbonController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteRibbonController*, "", "NoteRibbonController");
#pragma pack(pop)
