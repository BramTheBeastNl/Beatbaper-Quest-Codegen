// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectCallback
  class BeatmapObjectCallback;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectCallbackData
  class BeatmapObjectCallbackData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::BeatmapObjectCallbackData);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectCallbackData*, "", "BeatmapObjectCallbackData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectCallbackData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectCallbackData : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.Single aheadTime
    // Size: 0x4
    // Offset: 0x10
    float aheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: aheadTime and: nextObjectIndexInLine
    char __padding0[0x4] = {};
    // public System.Int32[] nextObjectIndexInLine
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> nextObjectIndexInLine;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly BeatmapObjectCallback callback
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BeatmapObjectCallback* callback;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallback*) == 0x8);
    public:
    // Get instance field reference: public System.Single aheadTime
    float& dyn_aheadTime();
    // Get instance field reference: public System.Int32[] nextObjectIndexInLine
    ::ArrayW<int>& dyn_nextObjectIndexInLine();
    // Get instance field reference: public readonly BeatmapObjectCallback callback
    GlobalNamespace::BeatmapObjectCallback*& dyn_callback();
    // public System.Void .ctor(BeatmapObjectCallback callback, System.Single aheadTime, System.Int32 numberOfLines)
    // Offset: 0x132A6F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectCallbackData* New_ctor(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime, int numberOfLines) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectCallbackData*, creationType>(callback, aheadTime, numberOfLines)));
    }
  }; // BeatmapObjectCallbackData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectCallbackData), 32 + sizeof(GlobalNamespace::BeatmapObjectCallback*)> __GlobalNamespace_BeatmapObjectCallbackDataSizeCheck;
  static_assert(sizeof(BeatmapObjectCallbackData) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
