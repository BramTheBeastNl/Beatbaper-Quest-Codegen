// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SceneInfo
  class SceneInfo;
  // Forward declaring type: SceneSetupData
  class SceneSetupData;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: ScenesTransitionSetupDataSO
  class ScenesTransitionSetupDataSO : public GlobalNamespace::PersistentScriptableObject {
    public:
    // private SceneInfo[] <scenes>k__BackingField
    // Offset: 0x18
    ::Array<GlobalNamespace::SceneInfo*>* scenes;
    // private SceneSetupData[] <sceneSetupDataArray>k__BackingField
    // Offset: 0x20
    ::Array<GlobalNamespace::SceneSetupData*>* sceneSetupDataArray;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public SceneInfo[] get_scenes()
    // Offset: 0x103CD68
    ::Array<GlobalNamespace::SceneInfo*>* get_scenes();
    // private System.Void set_scenes(SceneInfo[] value)
    // Offset: 0x103CD70
    void set_scenes(::Array<GlobalNamespace::SceneInfo*>* value);
    // public SceneSetupData[] get_sceneSetupDataArray()
    // Offset: 0x103CD78
    ::Array<GlobalNamespace::SceneSetupData*>* get_sceneSetupDataArray();
    // private System.Void set_sceneSetupDataArray(SceneSetupData[] value)
    // Offset: 0x103CD80
    void set_sceneSetupDataArray(::Array<GlobalNamespace::SceneSetupData*>* value);
    // protected System.Void Init(SceneInfo[] scenes, SceneSetupData[] sceneSetupData)
    // Offset: 0x10309E8
    void Init(::Array<GlobalNamespace::SceneInfo*>* scenes, ::Array<GlobalNamespace::SceneSetupData*>* sceneSetupData);
    // public System.Void InstallBindings(Zenject.DiContainer container)
    // Offset: 0x10335BC
    void InstallBindings(Zenject::DiContainer* container);
    // public T Get()
    // Offset: 0xFFFFFFFF
    template<class T>
    T Get() {
      static_assert(std::is_convertible_v<T, GlobalNamespace::SceneSetupData*>);
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("ScenesTransitionSetupDataSO").WithContext("Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<T>(), "Get", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes())));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0x1030A24
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static ScenesTransitionSetupDataSO* New_ctor();
  }; // ScenesTransitionSetupDataSO
  check_size<sizeof(ScenesTransitionSetupDataSO), 32 + sizeof(void*) + ((32 + sizeof(void*)) % 8 != 0 ? (8 - (32 + sizeof(void*)) % 8) : 0)> __GlobalNamespace_ScenesTransitionSetupDataSOSizeCheck;
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ScenesTransitionSetupDataSO*, "", "ScenesTransitionSetupDataSO");
#pragma pack(pop)
