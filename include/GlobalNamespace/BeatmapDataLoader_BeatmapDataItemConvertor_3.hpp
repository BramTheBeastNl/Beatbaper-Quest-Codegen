// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDataLoader
#include "GlobalNamespace/BeatmapDataLoader.hpp"
// Including type: DataItemConvertor`3
#include "GlobalNamespace/DataItemConvertor_3.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDataItem
  class BeatmapDataItem;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::BeatmapDataLoader::BeatmapDataItemConvertor_3, "", "BeatmapDataLoader/BeatmapDataItemConvertor`3");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: BeatmapDataLoader/BeatmapDataItemConvertor`3
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TBase, typename TIn, typename TOut>
  class BeatmapDataLoader::BeatmapDataItemConvertor_3 : public ::GlobalNamespace::DataItemConvertor_3<TBase, TIn, TOut> {
    public:
    public:
    // private readonly BeatmapDataLoader/BpmTimeProcessor _bpmTimeProcessor
    // Size: 0x8
    // Offset: 0x0
    ::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor* bpmTimeProcessor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*) == 0x8);
    public:
    // Creating conversion operator: operator ::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*
    constexpr operator ::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*() const noexcept {
      return bpmTimeProcessor;
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly BeatmapDataLoader/BpmTimeProcessor _bpmTimeProcessor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*& dyn__bpmTimeProcessor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataLoader::BeatmapDataItemConvertor_3::dyn__bpmTimeProcessor");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bpmTimeProcessor"))->offset;
      return *reinterpret_cast<::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // protected System.Void .ctor(BeatmapDataLoader/BpmTimeProcessor bpmTimeProcessor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataLoader::BeatmapDataItemConvertor_3<TBase, TIn, TOut>* New_ctor(::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor* bpmTimeProcessor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataLoader::BeatmapDataItemConvertor_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataLoader::BeatmapDataItemConvertor_3<TBase, TIn, TOut>*, creationType>(bpmTimeProcessor)));
    }
    // protected System.Single BeatToTime(System.Single beat)
    // Offset: 0xFFFFFFFFFFFFFFFF
    float BeatToTime(float beat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataLoader::BeatmapDataItemConvertor_3::BeatToTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeatToTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beat)})));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method, beat);
    }
  }; // BeatmapDataLoader/BeatmapDataItemConvertor`3
  // Could not write size check! Type: BeatmapDataLoader/BeatmapDataItemConvertor`3 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
