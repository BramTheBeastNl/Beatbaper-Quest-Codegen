// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MenuLightsPresetSO
  class MenuLightsPresetSO;
  // Forward declaring type: LightWithIdManager
  class LightWithIdManager;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MenuLightsManager
  class MenuLightsManager : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MenuLightsManager::$Start$d__4
    class $Start$d__4;
    // private MenuLightsPresetSO _defaultPreset
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MenuLightsPresetSO* defaultPreset;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuLightsPresetSO*) == 0x8);
    // private System.Single _smooth
    // Size: 0x4
    // Offset: 0x20
    float smooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: smooth and: lightManager
    char __padding1[0x4] = {};
    // [InjectAttribute] Offset: 0xE1A7B8
    // private LightWithIdManager _lightManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::LightWithIdManager* lightManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LightWithIdManager*) == 0x8);
    // private MenuLightsPresetSO _preset
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MenuLightsPresetSO* preset;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuLightsPresetSO*) == 0x8);
    // Creating value type constructor for type: MenuLightsManager
    MenuLightsManager(GlobalNamespace::MenuLightsPresetSO* defaultPreset_ = {}, float smooth_ = {}, GlobalNamespace::LightWithIdManager* lightManager_ = {}, GlobalNamespace::MenuLightsPresetSO* preset_ = {}) noexcept : defaultPreset{defaultPreset_}, smooth{smooth_}, lightManager{lightManager_}, preset{preset_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Collections.IEnumerator Start()
    // Offset: 0x2407730
    System::Collections::IEnumerator* Start();
    // protected System.Void Update()
    // Offset: 0x24077CC
    void Update();
    // private System.Boolean IsColorVeryCloseToColor(UnityEngine.Color color0, UnityEngine.Color color1)
    // Offset: 0x2407980
    bool IsColorVeryCloseToColor(UnityEngine::Color color0, UnityEngine::Color color1);
    // private System.Void SetColor(System.Int32 lightId, UnityEngine.Color color)
    // Offset: 0x2407AA8
    void SetColor(int lightId, UnityEngine::Color color);
    // private UnityEngine.Color CurrentColorForID(System.Int32 lightId)
    // Offset: 0x2407AC4
    UnityEngine::Color CurrentColorForID(int lightId);
    // private System.Boolean SetColorsFromPreset(MenuLightsPresetSO preset, System.Single interpolationFactor)
    // Offset: 0x240781C
    bool SetColorsFromPreset(GlobalNamespace::MenuLightsPresetSO* preset, float interpolationFactor);
    // private System.Void RefreshLightsDictForPreset(MenuLightsPresetSO preset)
    // Offset: 0x2407B1C
    void RefreshLightsDictForPreset(GlobalNamespace::MenuLightsPresetSO* preset);
    // public System.Void SetColorPreset(MenuLightsPresetSO preset, System.Boolean animated)
    // Offset: 0x240087C
    void SetColorPreset(GlobalNamespace::MenuLightsPresetSO* preset, bool animated);
    // public System.Void RefreshColors()
    // Offset: 0x2407BF4
    void RefreshColors();
    // public System.Void .ctor()
    // Offset: 0x2407C9C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MenuLightsManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuLightsManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MenuLightsManager*, creationType>()));
    }
  }; // MenuLightsManager
  #pragma pack(pop)
  static check_size<sizeof(MenuLightsManager), 48 + sizeof(GlobalNamespace::MenuLightsPresetSO*)> __GlobalNamespace_MenuLightsManagerSizeCheck;
  static_assert(sizeof(MenuLightsManager) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MenuLightsManager*, "", "MenuLightsManager");
// Writing MetadataGetter for method: MenuLightsManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MenuLightsManager::*)()>(&MenuLightsManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)()>(&MenuLightsManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::IsColorVeryCloseToColor
// Il2CppName: IsColorVeryCloseToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MenuLightsManager::*)(UnityEngine::Color, UnityEngine::Color)>(&MenuLightsManager::IsColorVeryCloseToColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "IsColorVeryCloseToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)(int, UnityEngine::Color)>(&MenuLightsManager::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::CurrentColorForID
// Il2CppName: CurrentColorForID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MenuLightsManager::*)(int)>(&MenuLightsManager::CurrentColorForID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "CurrentColorForID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::SetColorsFromPreset
// Il2CppName: SetColorsFromPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MenuLightsManager::*)(GlobalNamespace::MenuLightsPresetSO*, float)>(&MenuLightsManager::SetColorsFromPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "SetColorsFromPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MenuLightsPresetSO*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::RefreshLightsDictForPreset
// Il2CppName: RefreshLightsDictForPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)(GlobalNamespace::MenuLightsPresetSO*)>(&MenuLightsManager::RefreshLightsDictForPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "RefreshLightsDictForPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MenuLightsPresetSO*>()});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::SetColorPreset
// Il2CppName: SetColorPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)(GlobalNamespace::MenuLightsPresetSO*, bool)>(&MenuLightsManager::SetColorPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "SetColorPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MenuLightsPresetSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::RefreshColors
// Il2CppName: RefreshColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)()>(&MenuLightsManager::RefreshColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), "RefreshColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuLightsManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)()>(&MenuLightsManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuLightsManager::*)()>(&MenuLightsManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuLightsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
