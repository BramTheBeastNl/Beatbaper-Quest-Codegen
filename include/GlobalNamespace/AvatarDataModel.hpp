// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarDataFileManagerSO
  class AvatarDataFileManagerSO;
  // Forward declaring type: AvatarPartsModel
  class AvatarPartsModel;
  // Forward declaring type: AvatarData
  class AvatarData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: AvatarDataModel
  class AvatarDataModel : public UnityEngine::MonoBehaviour {
    public:
    // private AvatarDataFileManagerSO _avatarDataFileManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::AvatarDataFileManagerSO* avatarDataFileManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarDataFileManagerSO*) == 0x8);
    // [InjectAttribute] Offset: 0xE187B0
    // private readonly AvatarPartsModel _avatarPartsModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::AvatarPartsModel* avatarPartsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarPartsModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE187C0
    // private AvatarData <avatarData>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::AvatarData* avatarData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarData*) == 0x8);
    // Creating value type constructor for type: AvatarDataModel
    AvatarDataModel(GlobalNamespace::AvatarDataFileManagerSO* avatarDataFileManager_ = {}, GlobalNamespace::AvatarPartsModel* avatarPartsModel_ = {}, GlobalNamespace::AvatarData* avatarData_ = {}) noexcept : avatarDataFileManager{avatarDataFileManager_}, avatarPartsModel{avatarPartsModel_}, avatarData{avatarData_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public AvatarData get_avatarData()
    // Offset: 0x1134648
    GlobalNamespace::AvatarData* get_avatarData();
    // public System.Void set_avatarData(AvatarData value)
    // Offset: 0x1134650
    void set_avatarData(GlobalNamespace::AvatarData* value);
    // protected System.Void OnEnable()
    // Offset: 0x1134658
    void OnEnable();
    // protected System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0x1134698
    void OnApplicationPause(bool pauseStatus);
    // protected System.Void OnDisable()
    // Offset: 0x11346C0
    void OnDisable();
    // public System.Void Randomize()
    // Offset: 0x11346C4
    void Randomize();
    // public System.Void Save()
    // Offset: 0x11346A4
    void Save();
    // public System.Void Load()
    // Offset: 0x113465C
    void Load();
    // private AvatarData CreateDefaultAvatarData()
    // Offset: 0x11346E8
    GlobalNamespace::AvatarData* CreateDefaultAvatarData();
    // public System.Void .ctor()
    // Offset: 0x113483C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarDataModel*, creationType>()));
    }
  }; // AvatarDataModel
  #pragma pack(pop)
  static check_size<sizeof(AvatarDataModel), 40 + sizeof(GlobalNamespace::AvatarData*)> __GlobalNamespace_AvatarDataModelSizeCheck;
  static_assert(sizeof(AvatarDataModel) == 0x30);
  // Writing MetadataGetter for method: AvatarDataModel::get_avatarData
  // Il2CppName: get_avatarData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarDataModel::*)()>(&AvatarDataModel::get_avatarData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "get_avatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::set_avatarData
  // Il2CppName: set_avatarData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)(GlobalNamespace::AvatarData*)>(&AvatarDataModel::set_avatarData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "set_avatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarData*>()});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::OnEnable
  // Il2CppName: OnEnable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::OnEnable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::OnApplicationPause
  // Il2CppName: OnApplicationPause
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)(bool)>(&AvatarDataModel::OnApplicationPause)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::OnDisable
  // Il2CppName: OnDisable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::OnDisable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::Randomize
  // Il2CppName: Randomize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::Randomize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "Randomize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::Save
  // Il2CppName: Save
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::Save)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::Load
  // Il2CppName: Load
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::Load)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::CreateDefaultAvatarData
  // Il2CppName: CreateDefaultAvatarData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarData* (AvatarDataModel::*)()>(&AvatarDataModel::CreateDefaultAvatarData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), "CreateDefaultAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AvatarDataModel::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarDataModel::*)()>(&AvatarDataModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AvatarDataModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AvatarDataModel*, "", "AvatarDataModel");
