// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: LeaderboardPlayerInfo
  // [] Offset: FFFFFFFF
  class LeaderboardPlayerInfo : public ::Il2CppObject {
    public:
    // public System.String serverKey
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* serverKey;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD203D8
    // private System.String <playerId>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* playerId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD203E8
    // private System.String <playerName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* playerName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD203F8
    // private System.String <playerKey>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* playerKey;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD20408
    // private System.String <authType>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* authType;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD20418
    // private System.String <playerFriends>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* playerFriends;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD20428
    // private System.Boolean <succeeded>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool succeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LeaderboardPlayerInfo
    LeaderboardPlayerInfo(::Il2CppString* serverKey_ = {}, ::Il2CppString* playerId_ = {}, ::Il2CppString* playerName_ = {}, ::Il2CppString* playerKey_ = {}, ::Il2CppString* authType_ = {}, ::Il2CppString* playerFriends_ = {}, bool succeeded_ = {}) noexcept : serverKey{serverKey_}, playerId{playerId_}, playerName{playerName_}, playerKey{playerKey_}, authType{authType_}, playerFriends{playerFriends_}, succeeded{succeeded_} {}
    // public System.String get_playerId()
    // Offset: 0xFF8690
    ::Il2CppString* get_playerId();
    // private System.Void set_playerId(System.String value)
    // Offset: 0xFF8698
    void set_playerId(::Il2CppString* value);
    // public System.String get_playerName()
    // Offset: 0xFF86A0
    ::Il2CppString* get_playerName();
    // private System.Void set_playerName(System.String value)
    // Offset: 0xFF86A8
    void set_playerName(::Il2CppString* value);
    // public System.String get_playerKey()
    // Offset: 0xFF86B0
    ::Il2CppString* get_playerKey();
    // private System.Void set_playerKey(System.String value)
    // Offset: 0xFF86B8
    void set_playerKey(::Il2CppString* value);
    // public System.String get_authType()
    // Offset: 0xFF86C0
    ::Il2CppString* get_authType();
    // private System.Void set_authType(System.String value)
    // Offset: 0xFF86C8
    void set_authType(::Il2CppString* value);
    // public System.String get_playerFriends()
    // Offset: 0xFF86D0
    ::Il2CppString* get_playerFriends();
    // private System.Void set_playerFriends(System.String value)
    // Offset: 0xFF86D8
    void set_playerFriends(::Il2CppString* value);
    // public System.Boolean get_succeeded()
    // Offset: 0xFF86E0
    bool get_succeeded();
    // private System.Void set_succeeded(System.Boolean value)
    // Offset: 0xFF86E8
    void set_succeeded(bool value);
    // public System.Void .ctor(System.Boolean succeeded, System.String playerId, System.String playerName, System.String playerKey, System.String authType, System.String playerFriends)
    // Offset: 0xFF86F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeaderboardPlayerInfo* New_ctor(bool succeeded, ::Il2CppString* playerId, ::Il2CppString* playerName, ::Il2CppString* playerKey, ::Il2CppString* authType, ::Il2CppString* playerFriends) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardPlayerInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeaderboardPlayerInfo*, creationType>(succeeded, playerId, playerName, playerKey, authType, playerFriends)));
    }
  }; // LeaderboardPlayerInfo
  #pragma pack(pop)
  static check_size<sizeof(LeaderboardPlayerInfo), 64 + sizeof(bool)> __GlobalNamespace_LeaderboardPlayerInfoSizeCheck;
  static_assert(sizeof(LeaderboardPlayerInfo) == 0x41);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LeaderboardPlayerInfo*, "", "LeaderboardPlayerInfo");
