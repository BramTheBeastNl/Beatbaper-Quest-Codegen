// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ObjectsMovementRecorder
#include "GlobalNamespace/ObjectsMovementRecorder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::ObjectsMovementRecorder::InitData);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ObjectsMovementRecorder::InitData*, "", "ObjectsMovementRecorder/InitData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ObjectsMovementRecorder/InitData
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectsMovementRecorder::InitData : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public readonly ObjectsMovementRecorder/Mode mode
    // Size: 0x4
    // Offset: 0x10
    GlobalNamespace::ObjectsMovementRecorder::Mode mode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ObjectsMovementRecorder::Mode) == 0x4);
    // public readonly ObjectsMovementRecorder/CameraView cameraView
    // Size: 0x4
    // Offset: 0x14
    GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ObjectsMovementRecorder::CameraView) == 0x4);
    // public readonly System.String recordingFileName
    // Size: 0x8
    // Offset: 0x18
    ::StringW recordingFileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.Boolean addDateTimeSuffixToFileName
    // Size: 0x1
    // Offset: 0x20
    bool addDateTimeSuffixToFileName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean screenshotRecording
    // Size: 0x1
    // Offset: 0x21
    bool screenshotRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: screenshotRecording and: screenshotWidth
    char __padding4[0x2] = {};
    // public readonly System.Int32 screenshotWidth
    // Size: 0x4
    // Offset: 0x24
    int screenshotWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 screenshotHeight
    // Size: 0x4
    // Offset: 0x28
    int screenshotHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 framerate
    // Size: 0x4
    // Offset: 0x2C
    int framerate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly ObjectsMovementRecorder/Mode mode
    GlobalNamespace::ObjectsMovementRecorder::Mode& dyn_mode();
    // Get instance field reference: public readonly ObjectsMovementRecorder/CameraView cameraView
    GlobalNamespace::ObjectsMovementRecorder::CameraView& dyn_cameraView();
    // Get instance field reference: public readonly System.String recordingFileName
    ::StringW& dyn_recordingFileName();
    // Get instance field reference: public readonly System.Boolean addDateTimeSuffixToFileName
    bool& dyn_addDateTimeSuffixToFileName();
    // Get instance field reference: public readonly System.Boolean screenshotRecording
    bool& dyn_screenshotRecording();
    // Get instance field reference: public readonly System.Int32 screenshotWidth
    int& dyn_screenshotWidth();
    // Get instance field reference: public readonly System.Int32 screenshotHeight
    int& dyn_screenshotHeight();
    // Get instance field reference: public readonly System.Int32 framerate
    int& dyn_framerate();
    // public System.Void .ctor(ObjectsMovementRecorder/Mode mode, ObjectsMovementRecorder/CameraView cameraView, System.String recordingFileName, System.Boolean addDateTimeSuffixToFileName, System.Boolean screenshotRecording, System.Int32 screenshotWidth, System.Int32 screenshotHeight, System.Int32 framerate)
    // Offset: 0x2B3261C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectsMovementRecorder::InitData* New_ctor(GlobalNamespace::ObjectsMovementRecorder::Mode mode, GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView, ::StringW recordingFileName, bool addDateTimeSuffixToFileName, bool screenshotRecording, int screenshotWidth, int screenshotHeight, int framerate) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObjectsMovementRecorder::InitData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectsMovementRecorder::InitData*, creationType>(mode, cameraView, recordingFileName, addDateTimeSuffixToFileName, screenshotRecording, screenshotWidth, screenshotHeight, framerate)));
    }
  }; // ObjectsMovementRecorder/InitData
  #pragma pack(pop)
  static check_size<sizeof(ObjectsMovementRecorder::InitData), 44 + sizeof(int)> __GlobalNamespace_ObjectsMovementRecorder_InitDataSizeCheck;
  static_assert(sizeof(ObjectsMovementRecorder::InitData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ObjectsMovementRecorder::InitData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
