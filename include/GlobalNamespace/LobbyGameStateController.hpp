// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerLevelLoader
  class MultiplayerLevelLoader;
  // Forward declaring type: MenuTransitionsHelper
  class MenuTransitionsHelper;
  // Forward declaring type: LobbyGameStateModel
  class LobbyGameStateModel;
  // Forward declaring type: LobbyPlayerPermissionsModel
  class LobbyPlayerPermissionsModel;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: MultiplayerResultsData
  class MultiplayerResultsData;
  // Forward declaring type: PlayersMissingEntitlementsNetSerializable
  class PlayersMissingEntitlementsNetSerializable;
  // Forward declaring type: BeatmapIdentifierNetSerializable
  class BeatmapIdentifierNetSerializable;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xEC
  #pragma pack(push, 1)
  // Autogenerated type: LobbyGameStateController
  // [TokenAttribute] Offset: FFFFFFFF
  class LobbyGameStateController : public ::Il2CppObject/*, public System::IDisposable, public GlobalNamespace::ILobbyGameStateController*/ {
    public:
    // Nested type: GlobalNamespace::LobbyGameStateController::$$c__DisplayClass94_0
    class $$c__DisplayClass94_0;
    // Nested type: GlobalNamespace::LobbyGameStateController::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    protected:
    #endif
    // [InjectAttribute] Offset: 0xF02A94
    // private readonly ILobbyPlayersDataModel _lobbyPlayersDataModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyPlayersDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xF02AA4
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xF02AB4
    // private readonly IMenuRpcManager _menuRpcManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMenuRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF02AC4
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF02AD4
    // private readonly MultiplayerLevelLoader _multiplayerLevelLoader
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MultiplayerLevelLoader* multiplayerLevelLoader;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelLoader*) == 0x8);
    // [InjectAttribute] Offset: 0xF02AE4
    // private readonly MenuTransitionsHelper _menuTransitionsHelper
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuTransitionsHelper*) == 0x8);
    // [InjectAttribute] Offset: 0xF02AF4
    // private readonly LobbyGameStateModel _lobbyGameStateModel
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::LobbyGameStateModel* lobbyGameStateModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyGameStateModel*) == 0x8);
    // [InjectAttribute] Offset: 0xF02B04
    // private readonly LobbyPlayerPermissionsModel _lobbyPlayerPermissionsModel
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::LobbyPlayerPermissionsModel* lobbyPlayerPermissionsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyPlayerPermissionsModel*) == 0x8);
    // private System.Action gameStartedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action* gameStartedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action gameStartCancelledEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action* gameStartCancelledEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action countdownStartedEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action* countdownStartedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action countdownCancelledEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action* countdownCancelledEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action songStillDownloadingEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action* songStillDownloadingEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action startTimeChangedEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action* startTimeChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> levelFinishedEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* levelFinishedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*) == 0x8);
    // private System.Action`1<DisconnectedReason> levelDidGetDisconnectedEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<GlobalNamespace::DisconnectedReason>* levelDidGetDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // private System.Action lobbyDisconnectedEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* lobbyDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action beforeSceneSwitchCallbackEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action* beforeSceneSwitchCallbackEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action`1<MultiplayerLobbyState> lobbyStateChangedEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action_1<GlobalNamespace::MultiplayerLobbyState>* lobbyStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::MultiplayerLobbyState>*) == 0x8);
    // private System.Action`1<CannotStartGameReason> startButtonEnabledEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action_1<GlobalNamespace::CannotStartGameReason>* startButtonEnabledEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::CannotStartGameReason>*) == 0x8);
    // private System.Action`1<PlayersMissingEntitlementsNetSerializable> playerMissingEntitlementsChangedEvent
    // Size: 0x8
    // Offset: 0xB0
    System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>* playerMissingEntitlementsChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>*) == 0x8);
    // private System.Boolean <levelStartInitiated>k__BackingField
    // Size: 0x1
    // Offset: 0xB8
    bool levelStartInitiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: levelStartInitiated and: startedBeatmapId
    char __padding21[0x7] = {};
    // private BeatmapIdentifierNetSerializable <startedBeatmapId>k__BackingField
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::BeatmapIdentifierNetSerializable* startedBeatmapId;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapIdentifierNetSerializable*) == 0x8);
    // private System.Boolean <countdownStarted>k__BackingField
    // Size: 0x1
    // Offset: 0xC8
    bool countdownStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: countdownStarted and: countdownEndTime
    char __padding23[0x3] = {};
    // private System.Single <countdownEndTime>k__BackingField
    // Size: 0x4
    // Offset: 0xCC
    float countdownEndTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <isDisconnected>k__BackingField
    // Size: 0x1
    // Offset: 0xD0
    bool isDisconnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDisconnected and: disconnectedReason
    char __padding25[0x3] = {};
    // private DisconnectedReason <disconnectedReason>k__BackingField
    // Size: 0x4
    // Offset: 0xD4
    GlobalNamespace::DisconnectedReason disconnectedReason;
    // Field size check
    static_assert(sizeof(GlobalNamespace::DisconnectedReason) == 0x4);
    // private System.Single _predictedStartTime
    // Size: 0x4
    // Offset: 0xD8
    float predictedStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0xDC
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _levelStartedOnTime
    // Size: 0x1
    // Offset: 0xE0
    bool levelStartedOnTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: levelStartedOnTime and: state
    char __padding29[0x3] = {};
    // private MultiplayerLobbyState _state
    // Size: 0x4
    // Offset: 0xE4
    GlobalNamespace::MultiplayerLobbyState state;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyState) == 0x4);
    // private CannotStartGameReason _cannotStartGameReason
    // Size: 0x4
    // Offset: 0xE8
    GlobalNamespace::CannotStartGameReason cannotStartGameReason;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CannotStartGameReason) == 0x4);
    public:
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ILobbyGameStateController
    operator GlobalNamespace::ILobbyGameStateController() noexcept {
      return *reinterpret_cast<GlobalNamespace::ILobbyGameStateController*>(this);
    }
    // static field const value: static public System.Single kShortTimerSeconds
    static constexpr const float kShortTimerSeconds = 5;
    // Get static field: static public System.Single kShortTimerSeconds
    static float _get_kShortTimerSeconds();
    // Set static field: static public System.Single kShortTimerSeconds
    static void _set_kShortTimerSeconds(float value);
    // static field const value: static public System.Single kLongTimerSeconds
    static constexpr const float kLongTimerSeconds = 60;
    // Get static field: static public System.Single kLongTimerSeconds
    static float _get_kLongTimerSeconds();
    // Set static field: static public System.Single kLongTimerSeconds
    static void _set_kLongTimerSeconds(float value);
    // Get instance field reference: private readonly ILobbyPlayersDataModel _lobbyPlayersDataModel
    GlobalNamespace::ILobbyPlayersDataModel*& dyn__lobbyPlayersDataModel();
    // Get instance field reference: private readonly PlayerDataModel _playerDataModel
    GlobalNamespace::PlayerDataModel*& dyn__playerDataModel();
    // Get instance field reference: private readonly IMenuRpcManager _menuRpcManager
    GlobalNamespace::IMenuRpcManager*& dyn__menuRpcManager();
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private readonly MultiplayerLevelLoader _multiplayerLevelLoader
    GlobalNamespace::MultiplayerLevelLoader*& dyn__multiplayerLevelLoader();
    // Get instance field reference: private readonly MenuTransitionsHelper _menuTransitionsHelper
    GlobalNamespace::MenuTransitionsHelper*& dyn__menuTransitionsHelper();
    // Get instance field reference: private readonly LobbyGameStateModel _lobbyGameStateModel
    GlobalNamespace::LobbyGameStateModel*& dyn__lobbyGameStateModel();
    // Get instance field reference: private readonly LobbyPlayerPermissionsModel _lobbyPlayerPermissionsModel
    GlobalNamespace::LobbyPlayerPermissionsModel*& dyn__lobbyPlayerPermissionsModel();
    // Get instance field reference: private System.Action gameStartedEvent
    System::Action*& dyn_gameStartedEvent();
    // Get instance field reference: private System.Action gameStartCancelledEvent
    System::Action*& dyn_gameStartCancelledEvent();
    // Get instance field reference: private System.Action countdownStartedEvent
    System::Action*& dyn_countdownStartedEvent();
    // Get instance field reference: private System.Action countdownCancelledEvent
    System::Action*& dyn_countdownCancelledEvent();
    // Get instance field reference: private System.Action songStillDownloadingEvent
    System::Action*& dyn_songStillDownloadingEvent();
    // Get instance field reference: private System.Action startTimeChangedEvent
    System::Action*& dyn_startTimeChangedEvent();
    // Get instance field reference: private System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> levelFinishedEvent
    System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*& dyn_levelFinishedEvent();
    // Get instance field reference: private System.Action`1<DisconnectedReason> levelDidGetDisconnectedEvent
    System::Action_1<GlobalNamespace::DisconnectedReason>*& dyn_levelDidGetDisconnectedEvent();
    // Get instance field reference: private System.Action lobbyDisconnectedEvent
    System::Action*& dyn_lobbyDisconnectedEvent();
    // Get instance field reference: private System.Action beforeSceneSwitchCallbackEvent
    System::Action*& dyn_beforeSceneSwitchCallbackEvent();
    // Get instance field reference: private System.Action`1<MultiplayerLobbyState> lobbyStateChangedEvent
    System::Action_1<GlobalNamespace::MultiplayerLobbyState>*& dyn_lobbyStateChangedEvent();
    // Get instance field reference: private System.Action`1<CannotStartGameReason> startButtonEnabledEvent
    System::Action_1<GlobalNamespace::CannotStartGameReason>*& dyn_startButtonEnabledEvent();
    // Get instance field reference: private System.Action`1<PlayersMissingEntitlementsNetSerializable> playerMissingEntitlementsChangedEvent
    System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>*& dyn_playerMissingEntitlementsChangedEvent();
    // Get instance field reference: private System.Boolean <levelStartInitiated>k__BackingField
    bool& dyn_$levelStartInitiated$k__BackingField();
    // Get instance field reference: private BeatmapIdentifierNetSerializable <startedBeatmapId>k__BackingField
    GlobalNamespace::BeatmapIdentifierNetSerializable*& dyn_$startedBeatmapId$k__BackingField();
    // Get instance field reference: private System.Boolean <countdownStarted>k__BackingField
    bool& dyn_$countdownStarted$k__BackingField();
    // Get instance field reference: private System.Single <countdownEndTime>k__BackingField
    float& dyn_$countdownEndTime$k__BackingField();
    // Get instance field reference: private System.Boolean <isDisconnected>k__BackingField
    bool& dyn_$isDisconnected$k__BackingField();
    // Get instance field reference: private DisconnectedReason <disconnectedReason>k__BackingField
    GlobalNamespace::DisconnectedReason& dyn_$disconnectedReason$k__BackingField();
    // Get instance field reference: private System.Single _predictedStartTime
    float& dyn__predictedStartTime();
    // Get instance field reference: private System.Single _startTime
    float& dyn__startTime();
    // Get instance field reference: private System.Boolean _levelStartedOnTime
    bool& dyn__levelStartedOnTime();
    // Get instance field reference: private MultiplayerLobbyState _state
    GlobalNamespace::MultiplayerLobbyState& dyn__state();
    // Get instance field reference: private CannotStartGameReason _cannotStartGameReason
    GlobalNamespace::CannotStartGameReason& dyn__cannotStartGameReason();
    // public System.Single get_predictedCountdownEndTime()
    // Offset: 0x12B53D0
    float get_predictedCountdownEndTime();
    // public System.Single get_startTime()
    // Offset: 0x12B53D8
    float get_startTime();
    // public System.Void set_startTime(System.Single value)
    // Offset: 0x12B53E0
    void set_startTime(float value);
    // public System.Boolean get_levelStartInitiated()
    // Offset: 0x12B53FC
    bool get_levelStartInitiated();
    // private System.Void set_levelStartInitiated(System.Boolean value)
    // Offset: 0x12B5404
    void set_levelStartInitiated(bool value);
    // public BeatmapIdentifierNetSerializable get_startedBeatmapId()
    // Offset: 0x12B5410
    GlobalNamespace::BeatmapIdentifierNetSerializable* get_startedBeatmapId();
    // private System.Void set_startedBeatmapId(BeatmapIdentifierNetSerializable value)
    // Offset: 0x12B5418
    void set_startedBeatmapId(GlobalNamespace::BeatmapIdentifierNetSerializable* value);
    // public System.Boolean get_countdownStarted()
    // Offset: 0x12B5420
    bool get_countdownStarted();
    // private System.Void set_countdownStarted(System.Boolean value)
    // Offset: 0x12B5428
    void set_countdownStarted(bool value);
    // public System.Single get_countdownEndTime()
    // Offset: 0x12B5434
    float get_countdownEndTime();
    // private System.Void set_countdownEndTime(System.Single value)
    // Offset: 0x12B543C
    void set_countdownEndTime(float value);
    // public MultiplayerLobbyState get_state()
    // Offset: 0x12B5444
    GlobalNamespace::MultiplayerLobbyState get_state();
    // public System.Void set_state(MultiplayerLobbyState value)
    // Offset: 0x12B544C
    void set_state(GlobalNamespace::MultiplayerLobbyState value);
    // public CannotStartGameReason get_cannotStartGameReason()
    // Offset: 0x12B54D0
    GlobalNamespace::CannotStartGameReason get_cannotStartGameReason();
    // public System.Boolean get_isDisconnected()
    // Offset: 0x12B54D8
    bool get_isDisconnected();
    // private System.Void set_isDisconnected(System.Boolean value)
    // Offset: 0x12B54E0
    void set_isDisconnected(bool value);
    // public DisconnectedReason get_disconnectedReason()
    // Offset: 0x12B54EC
    GlobalNamespace::DisconnectedReason get_disconnectedReason();
    // private System.Void set_disconnectedReason(DisconnectedReason value)
    // Offset: 0x12B54F4
    void set_disconnectedReason(GlobalNamespace::DisconnectedReason value);
    // public System.Void add_gameStartedEvent(System.Action value)
    // Offset: 0x12B4328
    void add_gameStartedEvent(System::Action* value);
    // public System.Void remove_gameStartedEvent(System.Action value)
    // Offset: 0x12B43CC
    void remove_gameStartedEvent(System::Action* value);
    // public System.Void add_gameStartCancelledEvent(System.Action value)
    // Offset: 0x12B4470
    void add_gameStartCancelledEvent(System::Action* value);
    // public System.Void remove_gameStartCancelledEvent(System.Action value)
    // Offset: 0x12B4514
    void remove_gameStartCancelledEvent(System::Action* value);
    // public System.Void add_countdownStartedEvent(System.Action value)
    // Offset: 0x12B45B8
    void add_countdownStartedEvent(System::Action* value);
    // public System.Void remove_countdownStartedEvent(System.Action value)
    // Offset: 0x12B465C
    void remove_countdownStartedEvent(System::Action* value);
    // public System.Void add_countdownCancelledEvent(System.Action value)
    // Offset: 0x12B4700
    void add_countdownCancelledEvent(System::Action* value);
    // public System.Void remove_countdownCancelledEvent(System.Action value)
    // Offset: 0x12B47A4
    void remove_countdownCancelledEvent(System::Action* value);
    // public System.Void add_songStillDownloadingEvent(System.Action value)
    // Offset: 0x12B4848
    void add_songStillDownloadingEvent(System::Action* value);
    // public System.Void remove_songStillDownloadingEvent(System.Action value)
    // Offset: 0x12B48EC
    void remove_songStillDownloadingEvent(System::Action* value);
    // public System.Void add_startTimeChangedEvent(System.Action value)
    // Offset: 0x12B4990
    void add_startTimeChangedEvent(System::Action* value);
    // public System.Void remove_startTimeChangedEvent(System.Action value)
    // Offset: 0x12B4A34
    void remove_startTimeChangedEvent(System::Action* value);
    // public System.Void add_levelFinishedEvent(System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> value)
    // Offset: 0x12B4AD8
    void add_levelFinishedEvent(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value);
    // public System.Void remove_levelFinishedEvent(System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> value)
    // Offset: 0x12B4B7C
    void remove_levelFinishedEvent(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value);
    // public System.Void add_levelDidGetDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x12B4C20
    void add_levelDidGetDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_levelDidGetDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x12B4CC4
    void remove_levelDidGetDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_lobbyDisconnectedEvent(System.Action value)
    // Offset: 0x12B4D68
    void add_lobbyDisconnectedEvent(System::Action* value);
    // public System.Void remove_lobbyDisconnectedEvent(System.Action value)
    // Offset: 0x12B4E0C
    void remove_lobbyDisconnectedEvent(System::Action* value);
    // public System.Void add_beforeSceneSwitchCallbackEvent(System.Action value)
    // Offset: 0x12B4EB0
    void add_beforeSceneSwitchCallbackEvent(System::Action* value);
    // public System.Void remove_beforeSceneSwitchCallbackEvent(System.Action value)
    // Offset: 0x12B4F54
    void remove_beforeSceneSwitchCallbackEvent(System::Action* value);
    // public System.Void add_lobbyStateChangedEvent(System.Action`1<MultiplayerLobbyState> value)
    // Offset: 0x12B4FF8
    void add_lobbyStateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerLobbyState>* value);
    // public System.Void remove_lobbyStateChangedEvent(System.Action`1<MultiplayerLobbyState> value)
    // Offset: 0x12B509C
    void remove_lobbyStateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerLobbyState>* value);
    // public System.Void add_startButtonEnabledEvent(System.Action`1<CannotStartGameReason> value)
    // Offset: 0x12B5140
    void add_startButtonEnabledEvent(System::Action_1<GlobalNamespace::CannotStartGameReason>* value);
    // public System.Void remove_startButtonEnabledEvent(System.Action`1<CannotStartGameReason> value)
    // Offset: 0x12B51E4
    void remove_startButtonEnabledEvent(System::Action_1<GlobalNamespace::CannotStartGameReason>* value);
    // public System.Void add_playerMissingEntitlementsChangedEvent(System.Action`1<PlayersMissingEntitlementsNetSerializable> value)
    // Offset: 0x12B5288
    void add_playerMissingEntitlementsChangedEvent(System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>* value);
    // public System.Void remove_playerMissingEntitlementsChangedEvent(System.Action`1<PlayersMissingEntitlementsNetSerializable> value)
    // Offset: 0x12B532C
    void remove_playerMissingEntitlementsChangedEvent(System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>* value);
    // public System.Void Activate()
    // Offset: 0x12B54FC
    void Activate();
    // public System.Void Deactivate()
    // Offset: 0x12B59B4
    void Deactivate();
    // public System.Void Dispose()
    // Offset: 0x12B5FC8
    void Dispose();
    // public System.Void StartListeningToGameStart()
    // Offset: 0x12B5FCC
    void StartListeningToGameStart();
    // public System.Void GetCurrentLevelIfGameStarted()
    // Offset: 0x12B6688
    void GetCurrentLevelIfGameStarted();
    // public System.Void ClearDisconnectedState()
    // Offset: 0x12B5FB8
    void ClearDisconnectedState();
    // public System.Threading.Tasks.Task GetGameStateAndConfigurationAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12B673C
    System::Threading::Tasks::Task* GetGameStateAndConfigurationAsync(System::Threading::CancellationToken cancellationToken);
    // public System.Void PredictCountdownEndTime()
    // Offset: 0x12B6B28
    void PredictCountdownEndTime();
    // public System.Boolean IsCloseToStartGame()
    // Offset: 0x12B6DB8
    bool IsCloseToStartGame();
    // private System.Void HandleMultiplayerSessionManagerDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x12B6F34
    void HandleMultiplayerSessionManagerDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleMultiplayerSessionManagerConnectionOwnerStateChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0x12B6F58
    void HandleMultiplayerSessionManagerConnectionOwnerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Void StopListeningToGameStart()
    // Offset: 0x12B7058
    void StopListeningToGameStart();
    // private System.Void HandleMenuRpcManagerStartedLevel(System.String userId, BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0x12B729C
    void HandleMenuRpcManagerStartedLevel(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // private System.Void HandleMenuRpcManagerCancelledLevelStart(System.String userId)
    // Offset: 0x12B7498
    void HandleMenuRpcManagerCancelledLevelStart(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetCountdownEndTime(System.String userId, System.Single countdownTime)
    // Offset: 0x12B75E8
    void HandleMenuRpcManagerSetCountdownEndTime(::Il2CppString* userId, float countdownTime);
    // private System.Void HandleMenuRpcManagerCancelCountdown(System.String userId)
    // Offset: 0x12B77E4
    void HandleMenuRpcManagerCancelCountdown(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetStartGameTime(System.String userId, System.Single startTime)
    // Offset: 0x12B79D0
    void HandleMenuRpcManagerSetStartGameTime(::Il2CppString* userId, float startTime);
    // private System.Void HandleSetIsStartButtonEnabled(System.String userId, CannotStartGameReason cannotStartGameReason)
    // Offset: 0x12B7A1C
    void HandleSetIsStartButtonEnabled(::Il2CppString* userId, GlobalNamespace::CannotStartGameReason cannotStartGameReason);
    // private System.Void HandleMenuRpcManagerSetPlayersMissingEntitlementsToLevel(System.String userId, PlayersMissingEntitlementsNetSerializable playersMissingEntitlements)
    // Offset: 0x12B7A94
    void HandleMenuRpcManagerSetPlayersMissingEntitlementsToLevel(::Il2CppString* userId, GlobalNamespace::PlayersMissingEntitlementsNetSerializable* playersMissingEntitlements);
    // private System.Void HandleStartTimeChanged()
    // Offset: 0x12B7B08
    void HandleStartTimeChanged();
    // private System.Void HandleMultiplayerLevelLoaderStillDownloadingSong()
    // Offset: 0x12B7B28
    void HandleMultiplayerLevelLoaderStillDownloadingSong();
    // private System.Void HandleMultiplayerLevelLoaderCountdownFinished(IPreviewBeatmapLevel previewBeatmapLevel, BeatmapDifficulty beatmapDifficulty, BeatmapCharacteristicSO beatmapCharacteristic, IDifficultyBeatmap difficultyBeatmap, GameplayModifiers gameplayModifiers)
    // Offset: 0x12B7B3C
    void HandleMultiplayerLevelLoaderCountdownFinished(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // private System.Void StartMultiplayerLevel(IPreviewBeatmapLevel previewBeatmapLevel, BeatmapDifficulty beatmapDifficulty, BeatmapCharacteristicSO beatmapCharacteristic, IDifficultyBeatmap difficultyBeatmap, GameplayModifiers gameplayModifiers, System.Action beforeSceneSwitchCallback)
    // Offset: 0x12B7E8C
    void StartMultiplayerLevel(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, System::Action* beforeSceneSwitchCallback);
    // private System.Void HandleMultiplayerLevelDidFinish(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, MultiplayerResultsData multiplayerResultsData)
    // Offset: 0x12B8024
    void HandleMultiplayerLevelDidFinish(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData);
    // private System.Void HandleMultiplayerLevelDidDisconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x12B80C8
    void HandleMultiplayerLevelDidDisconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void StopLoading()
    // Offset: 0x12B7500
    void StopLoading();
    // public System.Void .ctor()
    // Offset: 0x12B8164
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LobbyGameStateController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LobbyGameStateController*, creationType>()));
    }
  }; // LobbyGameStateController
  #pragma pack(pop)
  static check_size<sizeof(LobbyGameStateController), 232 + sizeof(GlobalNamespace::CannotStartGameReason)> __GlobalNamespace_LobbyGameStateControllerSizeCheck;
  static_assert(sizeof(LobbyGameStateController) == 0xEC);
}
NEED_NO_BOX(GlobalNamespace::LobbyGameStateController);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LobbyGameStateController*, "", "LobbyGameStateController");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_predictedCountdownEndTime
// Il2CppName: get_predictedCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_predictedCountdownEndTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_predictedCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_startTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_startTime
// Il2CppName: set_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(float)>(&GlobalNamespace::LobbyGameStateController::set_startTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_levelStartInitiated
// Il2CppName: get_levelStartInitiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_levelStartInitiated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_levelStartInitiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_levelStartInitiated
// Il2CppName: set_levelStartInitiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(bool)>(&GlobalNamespace::LobbyGameStateController::set_levelStartInitiated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_levelStartInitiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_startedBeatmapId
// Il2CppName: get_startedBeatmapId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapIdentifierNetSerializable* (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_startedBeatmapId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_startedBeatmapId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_startedBeatmapId
// Il2CppName: set_startedBeatmapId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&GlobalNamespace::LobbyGameStateController::set_startedBeatmapId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapIdentifierNetSerializable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_startedBeatmapId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_countdownStarted
// Il2CppName: get_countdownStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_countdownStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_countdownStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_countdownStarted
// Il2CppName: set_countdownStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(bool)>(&GlobalNamespace::LobbyGameStateController::set_countdownStarted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_countdownStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_countdownEndTime
// Il2CppName: get_countdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_countdownEndTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_countdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_countdownEndTime
// Il2CppName: set_countdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(float)>(&GlobalNamespace::LobbyGameStateController::set_countdownEndTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_countdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerLobbyState (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_state
// Il2CppName: set_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::MultiplayerLobbyState)>(&GlobalNamespace::LobbyGameStateController::set_state)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MultiplayerLobbyState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_cannotStartGameReason
// Il2CppName: get_cannotStartGameReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::CannotStartGameReason (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_cannotStartGameReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_cannotStartGameReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_isDisconnected
// Il2CppName: get_isDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_isDisconnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_isDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_isDisconnected
// Il2CppName: set_isDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(bool)>(&GlobalNamespace::LobbyGameStateController::set_isDisconnected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_isDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::DisconnectedReason (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::get_disconnectedReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::set_disconnectedReason
// Il2CppName: set_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::LobbyGameStateController::set_disconnectedReason)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "set_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_gameStartedEvent
// Il2CppName: add_gameStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_gameStartedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_gameStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_gameStartedEvent
// Il2CppName: remove_gameStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_gameStartedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_gameStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_gameStartCancelledEvent
// Il2CppName: add_gameStartCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_gameStartCancelledEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_gameStartCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_gameStartCancelledEvent
// Il2CppName: remove_gameStartCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_gameStartCancelledEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_gameStartCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_countdownStartedEvent
// Il2CppName: add_countdownStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_countdownStartedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_countdownStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_countdownStartedEvent
// Il2CppName: remove_countdownStartedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_countdownStartedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_countdownStartedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_countdownCancelledEvent
// Il2CppName: add_countdownCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_countdownCancelledEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_countdownCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_countdownCancelledEvent
// Il2CppName: remove_countdownCancelledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_countdownCancelledEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_countdownCancelledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_songStillDownloadingEvent
// Il2CppName: add_songStillDownloadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_songStillDownloadingEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_songStillDownloadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_songStillDownloadingEvent
// Il2CppName: remove_songStillDownloadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_songStillDownloadingEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_songStillDownloadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_startTimeChangedEvent
// Il2CppName: add_startTimeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_startTimeChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_startTimeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_startTimeChangedEvent
// Il2CppName: remove_startTimeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_startTimeChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_startTimeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*)>(&GlobalNamespace::LobbyGameStateController::add_levelFinishedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLevelScenesTransitionSetupDataSO"), ::il2cpp_utils::GetClassFromName("", "MultiplayerResultsData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*)>(&GlobalNamespace::LobbyGameStateController::remove_levelFinishedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLevelScenesTransitionSetupDataSO"), ::il2cpp_utils::GetClassFromName("", "MultiplayerResultsData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_levelDidGetDisconnectedEvent
// Il2CppName: add_levelDidGetDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::LobbyGameStateController::add_levelDidGetDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_levelDidGetDisconnectedEvent
// Il2CppName: remove_levelDidGetDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::LobbyGameStateController::remove_levelDidGetDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_levelDidGetDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_lobbyDisconnectedEvent
// Il2CppName: add_lobbyDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_lobbyDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_lobbyDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_lobbyDisconnectedEvent
// Il2CppName: remove_lobbyDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_lobbyDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_lobbyDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_beforeSceneSwitchCallbackEvent
// Il2CppName: add_beforeSceneSwitchCallbackEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::add_beforeSceneSwitchCallbackEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_beforeSceneSwitchCallbackEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_beforeSceneSwitchCallbackEvent
// Il2CppName: remove_beforeSceneSwitchCallbackEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action*)>(&GlobalNamespace::LobbyGameStateController::remove_beforeSceneSwitchCallbackEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_beforeSceneSwitchCallbackEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_lobbyStateChangedEvent
// Il2CppName: add_lobbyStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::MultiplayerLobbyState>*)>(&GlobalNamespace::LobbyGameStateController::add_lobbyStateChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLobbyState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_lobbyStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_lobbyStateChangedEvent
// Il2CppName: remove_lobbyStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::MultiplayerLobbyState>*)>(&GlobalNamespace::LobbyGameStateController::remove_lobbyStateChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLobbyState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_lobbyStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_startButtonEnabledEvent
// Il2CppName: add_startButtonEnabledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::CannotStartGameReason>*)>(&GlobalNamespace::LobbyGameStateController::add_startButtonEnabledEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "CannotStartGameReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_startButtonEnabledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_startButtonEnabledEvent
// Il2CppName: remove_startButtonEnabledEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::CannotStartGameReason>*)>(&GlobalNamespace::LobbyGameStateController::remove_startButtonEnabledEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "CannotStartGameReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_startButtonEnabledEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::add_playerMissingEntitlementsChangedEvent
// Il2CppName: add_playerMissingEntitlementsChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>*)>(&GlobalNamespace::LobbyGameStateController::add_playerMissingEntitlementsChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PlayersMissingEntitlementsNetSerializable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "add_playerMissingEntitlementsChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::remove_playerMissingEntitlementsChangedEvent
// Il2CppName: remove_playerMissingEntitlementsChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(System::Action_1<GlobalNamespace::PlayersMissingEntitlementsNetSerializable*>*)>(&GlobalNamespace::LobbyGameStateController::remove_playerMissingEntitlementsChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PlayersMissingEntitlementsNetSerializable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "remove_playerMissingEntitlementsChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::Activate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::StartListeningToGameStart
// Il2CppName: StartListeningToGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::StartListeningToGameStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "StartListeningToGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::GetCurrentLevelIfGameStarted
// Il2CppName: GetCurrentLevelIfGameStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::GetCurrentLevelIfGameStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "GetCurrentLevelIfGameStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::ClearDisconnectedState
// Il2CppName: ClearDisconnectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::ClearDisconnectedState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "ClearDisconnectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::GetGameStateAndConfigurationAsync
// Il2CppName: GetGameStateAndConfigurationAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (GlobalNamespace::LobbyGameStateController::*)(System::Threading::CancellationToken)>(&GlobalNamespace::LobbyGameStateController::GetGameStateAndConfigurationAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "GetGameStateAndConfigurationAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::PredictCountdownEndTime
// Il2CppName: PredictCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::PredictCountdownEndTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "PredictCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::IsCloseToStartGame
// Il2CppName: IsCloseToStartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::IsCloseToStartGame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "IsCloseToStartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMultiplayerSessionManagerDisconnected
// Il2CppName: HandleMultiplayerSessionManagerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::LobbyGameStateController::HandleMultiplayerSessionManagerDisconnected)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMultiplayerSessionManagerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMultiplayerSessionManagerConnectionOwnerStateChanged
// Il2CppName: HandleMultiplayerSessionManagerConnectionOwnerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::LobbyGameStateController::HandleMultiplayerSessionManagerConnectionOwnerStateChanged)> {
  static const MethodInfo* get() {
    static auto* connectedPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMultiplayerSessionManagerConnectionOwnerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::StopListeningToGameStart
// Il2CppName: StopListeningToGameStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::StopListeningToGameStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "StopListeningToGameStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerStartedLevel
// Il2CppName: HandleMenuRpcManagerStartedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float)>(&GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerStartedLevel)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* beatmapId = &::il2cpp_utils::GetClassFromName("", "BeatmapIdentifierNetSerializable")->byval_arg;
    static auto* gameplayModifiers = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMenuRpcManagerStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, beatmapId, gameplayModifiers, startTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelledLevelStart
// Il2CppName: HandleMenuRpcManagerCancelledLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*)>(&GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelledLevelStart)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMenuRpcManagerCancelledLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetCountdownEndTime
// Il2CppName: HandleMenuRpcManagerSetCountdownEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*, float)>(&GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetCountdownEndTime)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* countdownTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMenuRpcManagerSetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, countdownTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelCountdown
// Il2CppName: HandleMenuRpcManagerCancelCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*)>(&GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerCancelCountdown)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMenuRpcManagerCancelCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetStartGameTime
// Il2CppName: HandleMenuRpcManagerSetStartGameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*, float)>(&GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetStartGameTime)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMenuRpcManagerSetStartGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, startTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleSetIsStartButtonEnabled
// Il2CppName: HandleSetIsStartButtonEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*, GlobalNamespace::CannotStartGameReason)>(&GlobalNamespace::LobbyGameStateController::HandleSetIsStartButtonEnabled)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cannotStartGameReason = &::il2cpp_utils::GetClassFromName("", "CannotStartGameReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleSetIsStartButtonEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, cannotStartGameReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetPlayersMissingEntitlementsToLevel
// Il2CppName: HandleMenuRpcManagerSetPlayersMissingEntitlementsToLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(::Il2CppString*, GlobalNamespace::PlayersMissingEntitlementsNetSerializable*)>(&GlobalNamespace::LobbyGameStateController::HandleMenuRpcManagerSetPlayersMissingEntitlementsToLevel)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playersMissingEntitlements = &::il2cpp_utils::GetClassFromName("", "PlayersMissingEntitlementsNetSerializable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMenuRpcManagerSetPlayersMissingEntitlementsToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, playersMissingEntitlements});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleStartTimeChanged
// Il2CppName: HandleStartTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::HandleStartTimeChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleStartTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderStillDownloadingSong
// Il2CppName: HandleMultiplayerLevelLoaderStillDownloadingSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderStillDownloadingSong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMultiplayerLevelLoaderStillDownloadingSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderCountdownFinished
// Il2CppName: HandleMultiplayerLevelLoaderCountdownFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelLoaderCountdownFinished)> {
  static const MethodInfo* get() {
    static auto* previewBeatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    static auto* beatmapDifficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    static auto* beatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    static auto* difficultyBeatmap = &::il2cpp_utils::GetClassFromName("", "IDifficultyBeatmap")->byval_arg;
    static auto* gameplayModifiers = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMultiplayerLevelLoaderCountdownFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previewBeatmapLevel, beatmapDifficulty, beatmapCharacteristic, difficultyBeatmap, gameplayModifiers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::StartMultiplayerLevel
// Il2CppName: StartMultiplayerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, System::Action*)>(&GlobalNamespace::LobbyGameStateController::StartMultiplayerLevel)> {
  static const MethodInfo* get() {
    static auto* previewBeatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    static auto* beatmapDifficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    static auto* beatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    static auto* difficultyBeatmap = &::il2cpp_utils::GetClassFromName("", "IDifficultyBeatmap")->byval_arg;
    static auto* gameplayModifiers = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    static auto* beforeSceneSwitchCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "StartMultiplayerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previewBeatmapLevel, beatmapDifficulty, beatmapCharacteristic, difficultyBeatmap, gameplayModifiers, beforeSceneSwitchCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidFinish
// Il2CppName: HandleMultiplayerLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*)>(&GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidFinish)> {
  static const MethodInfo* get() {
    static auto* multiplayerLevelScenesTransitionSetupData = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelScenesTransitionSetupDataSO")->byval_arg;
    static auto* multiplayerResultsData = &::il2cpp_utils::GetClassFromName("", "MultiplayerResultsData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMultiplayerLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerLevelScenesTransitionSetupData, multiplayerResultsData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidDisconnect
// Il2CppName: HandleMultiplayerLevelDidDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::LobbyGameStateController::HandleMultiplayerLevelDidDisconnect)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "HandleMultiplayerLevelDidDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::StopLoading
// Il2CppName: StopLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LobbyGameStateController::*)()>(&GlobalNamespace::LobbyGameStateController::StopLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LobbyGameStateController*), "StopLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LobbyGameStateController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
