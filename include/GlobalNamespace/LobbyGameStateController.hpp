// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ILobbyHostGameStateController
#include "GlobalNamespace/ILobbyHostGameStateController.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: MultiplayerLobbyState
#include "GlobalNamespace/MultiplayerLobbyState.hpp"
// Including type: MultiplayerGameType
#include "GlobalNamespace/MultiplayerGameType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerLevelLoader
  class MultiplayerLevelLoader;
  // Forward declaring type: MenuTransitionsHelper
  class MenuTransitionsHelper;
  // Forward declaring type: LobbyGameState
  class LobbyGameState;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: MultiplayerResultsData
  class MultiplayerResultsData;
  // Forward declaring type: BeatmapIdentifierNetSerializable
  class BeatmapIdentifierNetSerializable;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xCD
  #pragma pack(push, 1)
  // Autogenerated type: LobbyGameStateController
  // [] Offset: FFFFFFFF
  class LobbyGameStateController : public ::Il2CppObject/*, public GlobalNamespace::ILobbyHostGameStateController, public System::IDisposable*/ {
    public:
    // [InjectAttribute] Offset: 0xD212CC
    // private readonly ILobbyPlayersDataModel _lobbyPlayersDataModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyPlayersDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD212DC
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD212EC
    // private readonly IMenuRpcManager _menuRpcManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMenuRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD212FC
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD2130C
    // private readonly MultiplayerLevelLoader _multiplayerLevelLoader
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MultiplayerLevelLoader* multiplayerLevelLoader;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelLoader*) == 0x8);
    // [InjectAttribute] Offset: 0xD2131C
    // private readonly MenuTransitionsHelper _menuTransitionsHelper
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuTransitionsHelper*) == 0x8);
    // [InjectAttribute] Offset: 0xD2132C
    // private readonly LobbyGameState _lobbyGameState
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::LobbyGameState* lobbyGameState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyGameState*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2133C
    // private System.Action gameStartedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action* gameStartedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2134C
    // private System.Action gameStartCancelledEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action* gameStartCancelledEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2135C
    // private System.Action countdownStartedEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action* countdownStartedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2136C
    // private System.Action countdownCancelledEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action* countdownCancelledEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2137C
    // private System.Action songStillDownloadingEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action* songStillDownloadingEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2138C
    // private System.Action startTimeChangedEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action* startTimeChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2139C
    // private System.Action`1<MultiplayerGameState> multiplayerGameStateChangedEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action_1<GlobalNamespace::MultiplayerGameState>* multiplayerGameStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::MultiplayerGameState>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD213AC
    // private System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> levelFinishedEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* levelFinishedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD213BC
    // private System.Action`1<DisconnectedReason> levelDidGetDisconnectedEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<GlobalNamespace::DisconnectedReason>* levelDidGetDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD213CC
    // private System.Action lobbyDisconnectedEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* lobbyDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD213DC
    // private System.Action beforeSceneSwitchCallback
    // Size: 0x8
    // Offset: 0x98
    System::Action* beforeSceneSwitchCallback;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD213EC
    // private System.Boolean <levelStartInitiated>k__BackingField
    // Size: 0x1
    // Offset: 0xA0
    bool levelStartInitiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: levelStartInitiated and: startedBeatmapId
    char __padding18[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD213FC
    // private BeatmapIdentifierNetSerializable <startedBeatmapId>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::BeatmapIdentifierNetSerializable* startedBeatmapId;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapIdentifierNetSerializable*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2140C
    // private System.Boolean <countdownStarted>k__BackingField
    // Size: 0x1
    // Offset: 0xB0
    bool countdownStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: countdownStarted and: countdownEndTime
    char __padding20[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD2141C
    // private System.Single <countdownEndTime>k__BackingField
    // Size: 0x4
    // Offset: 0xB4
    float countdownEndTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2142C
    // private MultiplayerLobbyState <state>k__BackingField
    // Size: 0x4
    // Offset: 0xB8
    GlobalNamespace::MultiplayerLobbyState state;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyState) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2143C
    // private MultiplayerGameType <gameType>k__BackingField
    // Size: 0x4
    // Offset: 0xBC
    GlobalNamespace::MultiplayerGameType gameType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerGameType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2144C
    // private System.Boolean <isDisconnected>k__BackingField
    // Size: 0x1
    // Offset: 0xC0
    bool isDisconnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDisconnected and: disconnectedReason
    char __padding24[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD2145C
    // private DisconnectedReason <disconnectedReason>k__BackingField
    // Size: 0x4
    // Offset: 0xC4
    GlobalNamespace::DisconnectedReason disconnectedReason;
    // Field size check
    static_assert(sizeof(GlobalNamespace::DisconnectedReason) == 0x4);
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0xC8
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _levelStartedOnTime
    // Size: 0x1
    // Offset: 0xCC
    bool levelStartedOnTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LobbyGameStateController
    LobbyGameStateController(GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::IMenuRpcManager* menuRpcManager_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::MultiplayerLevelLoader* multiplayerLevelLoader_ = {}, GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper_ = {}, GlobalNamespace::LobbyGameState* lobbyGameState_ = {}, System::Action* gameStartedEvent_ = {}, System::Action* gameStartCancelledEvent_ = {}, System::Action* countdownStartedEvent_ = {}, System::Action* countdownCancelledEvent_ = {}, System::Action* songStillDownloadingEvent_ = {}, System::Action* startTimeChangedEvent_ = {}, System::Action_1<GlobalNamespace::MultiplayerGameState>* multiplayerGameStateChangedEvent_ = {}, System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* levelFinishedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* levelDidGetDisconnectedEvent_ = {}, System::Action* lobbyDisconnectedEvent_ = {}, System::Action* beforeSceneSwitchCallback_ = {}, bool levelStartInitiated_ = {}, GlobalNamespace::BeatmapIdentifierNetSerializable* startedBeatmapId_ = {}, bool countdownStarted_ = {}, float countdownEndTime_ = {}, GlobalNamespace::MultiplayerLobbyState state_ = {}, GlobalNamespace::MultiplayerGameType gameType_ = {}, bool isDisconnected_ = {}, GlobalNamespace::DisconnectedReason disconnectedReason_ = {}, float startTime_ = {}, bool levelStartedOnTime_ = {}) noexcept : lobbyPlayersDataModel{lobbyPlayersDataModel_}, playerDataModel{playerDataModel_}, menuRpcManager{menuRpcManager_}, multiplayerSessionManager{multiplayerSessionManager_}, multiplayerLevelLoader{multiplayerLevelLoader_}, menuTransitionsHelper{menuTransitionsHelper_}, lobbyGameState{lobbyGameState_}, gameStartedEvent{gameStartedEvent_}, gameStartCancelledEvent{gameStartCancelledEvent_}, countdownStartedEvent{countdownStartedEvent_}, countdownCancelledEvent{countdownCancelledEvent_}, songStillDownloadingEvent{songStillDownloadingEvent_}, startTimeChangedEvent{startTimeChangedEvent_}, multiplayerGameStateChangedEvent{multiplayerGameStateChangedEvent_}, levelFinishedEvent{levelFinishedEvent_}, levelDidGetDisconnectedEvent{levelDidGetDisconnectedEvent_}, lobbyDisconnectedEvent{lobbyDisconnectedEvent_}, beforeSceneSwitchCallback{beforeSceneSwitchCallback_}, levelStartInitiated{levelStartInitiated_}, startedBeatmapId{startedBeatmapId_}, countdownStarted{countdownStarted_}, countdownEndTime{countdownEndTime_}, state{state_}, gameType{gameType_}, isDisconnected{isDisconnected_}, disconnectedReason{disconnectedReason_}, startTime{startTime_}, levelStartedOnTime{levelStartedOnTime_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ILobbyHostGameStateController
    operator GlobalNamespace::ILobbyHostGameStateController() noexcept {
      return *reinterpret_cast<GlobalNamespace::ILobbyHostGameStateController*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Void add_gameStartedEvent(System.Action value)
    // Offset: 0x109F540
    void add_gameStartedEvent_NEW(System::Action* value);
    // public System.Void remove_gameStartedEvent(System.Action value)
    // Offset: 0x109F5E4
    void remove_gameStartedEvent_NEW(System::Action* value);
    // public System.Void add_gameStartCancelledEvent(System.Action value)
    // Offset: 0x109F688
    void add_gameStartCancelledEvent_NEW(System::Action* value);
    // public System.Void remove_gameStartCancelledEvent(System.Action value)
    // Offset: 0x109F72C
    void remove_gameStartCancelledEvent_NEW(System::Action* value);
    // public System.Void add_countdownStartedEvent(System.Action value)
    // Offset: 0x109F7D0
    void add_countdownStartedEvent_NEW(System::Action* value);
    // public System.Void remove_countdownStartedEvent(System.Action value)
    // Offset: 0x109F874
    void remove_countdownStartedEvent_NEW(System::Action* value);
    // public System.Void add_countdownCancelledEvent(System.Action value)
    // Offset: 0x109F918
    void add_countdownCancelledEvent_NEW(System::Action* value);
    // public System.Void remove_countdownCancelledEvent(System.Action value)
    // Offset: 0x109F9BC
    void remove_countdownCancelledEvent_NEW(System::Action* value);
    // public System.Void add_songStillDownloadingEvent(System.Action value)
    // Offset: 0x109FA60
    void add_songStillDownloadingEvent_NEW(System::Action* value);
    // public System.Void remove_songStillDownloadingEvent(System.Action value)
    // Offset: 0x109FB04
    void remove_songStillDownloadingEvent_NEW(System::Action* value);
    // public System.Void add_startTimeChangedEvent(System.Action value)
    // Offset: 0x109FBA8
    void add_startTimeChangedEvent_NEW(System::Action* value);
    // public System.Void remove_startTimeChangedEvent(System.Action value)
    // Offset: 0x109FC4C
    void remove_startTimeChangedEvent_NEW(System::Action* value);
    // public System.Void add_multiplayerGameStateChangedEvent(System.Action`1<MultiplayerGameState> value)
    // Offset: 0x109FCF0
    void add_multiplayerGameStateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void remove_multiplayerGameStateChangedEvent(System.Action`1<MultiplayerGameState> value)
    // Offset: 0x109FD94
    void remove_multiplayerGameStateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void add_levelFinishedEvent(System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> value)
    // Offset: 0x109FE38
    void add_levelFinishedEvent_NEW(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value);
    // public System.Void remove_levelFinishedEvent(System.Action`2<MultiplayerLevelScenesTransitionSetupDataSO,MultiplayerResultsData> value)
    // Offset: 0x109FEDC
    void remove_levelFinishedEvent_NEW(System::Action_2<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*>* value);
    // public System.Void add_levelDidGetDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x109FF80
    void add_levelDidGetDisconnectedEvent_NEW(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_levelDidGetDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x10A0024
    void remove_levelDidGetDisconnectedEvent_NEW(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_lobbyDisconnectedEvent(System.Action value)
    // Offset: 0x10A00C8
    void add_lobbyDisconnectedEvent_NEW(System::Action* value);
    // public System.Void remove_lobbyDisconnectedEvent(System.Action value)
    // Offset: 0x10A016C
    void remove_lobbyDisconnectedEvent_NEW(System::Action* value);
    // public System.Void add_beforeSceneSwitchCallback(System.Action value)
    // Offset: 0x10A0210
    void add_beforeSceneSwitchCallback_NEW(System::Action* value);
    // public System.Void remove_beforeSceneSwitchCallback(System.Action value)
    // Offset: 0x10A02B4
    void remove_beforeSceneSwitchCallback_NEW(System::Action* value);
    // public System.Single get_startTime()
    // Offset: 0x10A0358
    float get_startTime_NEW();
    // public System.Void set_startTime(System.Single value)
    // Offset: 0x10A0360
    void set_startTime_NEW(float value);
    // public System.Boolean get_levelStartInitiated()
    // Offset: 0x10A04C4
    bool get_levelStartInitiated_NEW();
    // private System.Void set_levelStartInitiated(System.Boolean value)
    // Offset: 0x10A04CC
    void set_levelStartInitiated(bool value);
    // public BeatmapIdentifierNetSerializable get_startedBeatmapId()
    // Offset: 0x10A04D8
    GlobalNamespace::BeatmapIdentifierNetSerializable* get_startedBeatmapId_NEW();
    // private System.Void set_startedBeatmapId(BeatmapIdentifierNetSerializable value)
    // Offset: 0x10A04E0
    void set_startedBeatmapId(GlobalNamespace::BeatmapIdentifierNetSerializable* value);
    // public System.Boolean get_countdownStarted()
    // Offset: 0x10A04E8
    bool get_countdownStarted_NEW();
    // private System.Void set_countdownStarted(System.Boolean value)
    // Offset: 0x10A04F0
    void set_countdownStarted(bool value);
    // public System.Single get_countdownEndTime()
    // Offset: 0x10A04FC
    float get_countdownEndTime_NEW();
    // private System.Void set_countdownEndTime(System.Single value)
    // Offset: 0x10A0504
    void set_countdownEndTime(float value);
    // public MultiplayerLobbyState get_state()
    // Offset: 0x10A050C
    GlobalNamespace::MultiplayerLobbyState get_state_NEW();
    // private System.Void set_state(MultiplayerLobbyState value)
    // Offset: 0x10A0514
    void set_state(GlobalNamespace::MultiplayerLobbyState value);
    // public MultiplayerGameType get_gameType()
    // Offset: 0x10A051C
    GlobalNamespace::MultiplayerGameType get_gameType_NEW();
    // private System.Void set_gameType(MultiplayerGameType value)
    // Offset: 0x10A0524
    void set_gameType(GlobalNamespace::MultiplayerGameType value);
    // public System.Boolean get_isDisconnected()
    // Offset: 0x10A052C
    bool get_isDisconnected_NEW();
    // private System.Void set_isDisconnected(System.Boolean value)
    // Offset: 0x10A0534
    void set_isDisconnected(bool value);
    // public DisconnectedReason get_disconnectedReason()
    // Offset: 0x10A0540
    GlobalNamespace::DisconnectedReason get_disconnectedReason_NEW();
    // private System.Void set_disconnectedReason(DisconnectedReason value)
    // Offset: 0x10A0548
    void set_disconnectedReason(GlobalNamespace::DisconnectedReason value);
    // public System.Void Activate()
    // Offset: 0x10A0550
    void Activate_NEW();
    // public System.Void Deactivate()
    // Offset: 0x10A09FC
    void Deactivate_NEW();
    // public System.Void Dispose()
    // Offset: 0x10A10A0
    void Dispose_NEW();
    // public System.Void StartListeningToGameStart()
    // Offset: 0x10A10A4
    void StartListeningToGameStart_NEW();
    // public System.Void GetCurrentLevelIfGameStarted()
    // Offset: 0x10A17EC
    void GetCurrentLevelIfGameStarted_NEW();
    // public System.Void SetMultiplayerGameType(MultiplayerGameType multiplayerGameType)
    // Offset: 0x10A18A0
    void SetMultiplayerGameType_NEW(GlobalNamespace::MultiplayerGameType multiplayerGameType);
    // public System.Void ClearDisconnectedState()
    // Offset: 0x10A1090
    void ClearDisconnectedState_NEW();
    // public System.Void StartGame()
    // Offset: 0x10A18A8
    void StartGame_NEW();
    // public System.Void CancelGame()
    // Offset: 0x10A1E70
    void CancelGame_NEW();
    // private System.Void HandleMultiplayerSessionManagerDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x10A20A4
    void HandleMultiplayerSessionManagerDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleGameStateDidChange(MultiplayerGameState newGameState)
    // Offset: 0x10A20C8
    void HandleGameStateDidChange(GlobalNamespace::MultiplayerGameState newGameState);
    // private System.Void HandleMenuRpcManagerGetMultiplayerGameState(System.String userId)
    // Offset: 0x10A21C4
    void HandleMenuRpcManagerGetMultiplayerGameState(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetMultiplayerGameState(System.String userId, MultiplayerGameState newGameState)
    // Offset: 0x10A230C
    void HandleMenuRpcManagerSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState newGameState);
    // private System.Void StopListeningToGameStart()
    // Offset: 0x10A241C
    void StopListeningToGameStart();
    // private System.Void HandleMenuRpcManagerGetStartedLevel(System.String userId)
    // Offset: 0x10A2660
    void HandleMenuRpcManagerGetStartedLevel(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerStartedLevel(System.String userId, BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0x10A2924
    void HandleMenuRpcManagerStartedLevel(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // private System.Void HandleMenuRpcManagerCancelledLevelStart(System.String userId)
    // Offset: 0x10A2B14
    void HandleMenuRpcManagerCancelledLevelStart(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetCountdownEndTime(System.String userId, System.Single countdownTime)
    // Offset: 0x10A2B78
    void HandleMenuRpcManagerSetCountdownEndTime(::Il2CppString* userId, float countdownTime);
    // private System.Void HandleMenuRpcManagerCancelCountdown(System.String userId)
    // Offset: 0x10A2D68
    void HandleMenuRpcManagerCancelCountdown(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetStartGameTime(System.String userId, System.Single startTime)
    // Offset: 0x10A2F48
    void HandleMenuRpcManagerSetStartGameTime(::Il2CppString* userId, float startTime);
    // private System.Void HandleStartTimeChanged()
    // Offset: 0x10A2F84
    void HandleStartTimeChanged();
    // private System.Void HandleMultiplayerLevelLoaderStillDownloadingSong()
    // Offset: 0x10A2FA4
    void HandleMultiplayerLevelLoaderStillDownloadingSong();
    // private System.Void HandleMultiplayerLevelLoaderCountdownFinished(IPreviewBeatmapLevel previewBeatmapLevel, BeatmapDifficulty beatmapDifficulty, BeatmapCharacteristicSO beatmapCharacteristic, IDifficultyBeatmap difficultyBeatmap, GameplayModifiers gameplayModifiers)
    // Offset: 0x10A2FB8
    void HandleMultiplayerLevelLoaderCountdownFinished(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // private System.Void StartMultiplayerLevel(IPreviewBeatmapLevel previewBeatmapLevel, BeatmapDifficulty beatmapDifficulty, BeatmapCharacteristicSO beatmapCharacteristic, IDifficultyBeatmap difficultyBeatmap, GameplayModifiers gameplayModifiers, System.Action beforeSceneSwitchCallback)
    // Offset: 0x10A32F8
    void StartMultiplayerLevel(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapDifficulty beatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, System::Action* beforeSceneSwitchCallback);
    // private System.Void HandleMultiplayerLevelDidFinish(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, MultiplayerResultsData multiplayerResultsData)
    // Offset: 0x10A3490
    void HandleMultiplayerLevelDidFinish(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData);
    // private System.Void HandleMultiplayerLevelDidDisconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x10A352C
    void HandleMultiplayerLevelDidDisconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void StopLoading()
    // Offset: 0x10A1FBC
    void StopLoading();
    // public System.Void .ctor()
    // Offset: 0x10A35C0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LobbyGameStateController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyGameStateController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LobbyGameStateController*, creationType>()));
    }
  }; // LobbyGameStateController
  #pragma pack(pop)
  static check_size<sizeof(LobbyGameStateController), 204 + sizeof(bool)> __GlobalNamespace_LobbyGameStateControllerSizeCheck;
  static_assert(sizeof(LobbyGameStateController) == 0xCD);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LobbyGameStateController*, "", "LobbyGameStateController");
