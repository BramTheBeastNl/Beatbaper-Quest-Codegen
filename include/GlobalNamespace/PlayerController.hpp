// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Saber
  class Saber;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: SaberType
  struct SaberType;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PlayerController
  class PlayerController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::PlayerController::InitData
    class InitData;
    // private Saber _leftSaber
    // Offset: 0x18
    GlobalNamespace::Saber* leftSaber;
    // private Saber _rightSaber
    // Offset: 0x20
    GlobalNamespace::Saber* rightSaber;
    // private SaberManager _saberManager
    // Offset: 0x28
    GlobalNamespace::SaberManager* saberManager;
    // private UnityEngine.Transform _headTransform
    // Offset: 0x30
    UnityEngine::Transform* headTransform;
    // private PlayerController/InitData _initData
    // Offset: 0x38
    GlobalNamespace::PlayerController::InitData* initData;
    // private System.Boolean _overrideHeadPos
    // Offset: 0x40
    bool overrideHeadPos;
    // private UnityEngine.Vector3 _overriddenHeadPos
    // Offset: 0x44
    UnityEngine::Vector3 overriddenHeadPos;
    // private System.Boolean _disableSabers
    // Offset: 0x50
    bool disableSabers;
    // private UnityEngine.Vector3 _headPos
    // Offset: 0x54
    UnityEngine::Vector3 headPos;
    // private UnityEngine.Quaternion _headRot
    // Offset: 0x60
    UnityEngine::Quaternion headRot;
    // public Saber get_leftSaber()
    // Offset: 0xBD75C8
    GlobalNamespace::Saber* get_leftSaber();
    // public Saber get_rightSaber()
    // Offset: 0xBD75D0
    GlobalNamespace::Saber* get_rightSaber();
    // public UnityEngine.Vector3 get_headPos()
    // Offset: 0xBD75D8
    UnityEngine::Vector3 get_headPos();
    // public UnityEngine.Quaternion get_headRot()
    // Offset: 0xBD75E4
    UnityEngine::Quaternion get_headRot();
    // public Saber SaberForType(SaberType saberType)
    // Offset: 0xBD75F0
    GlobalNamespace::Saber* SaberForType(GlobalNamespace::SaberType saberType);
    // public System.Void set_disableSabers(System.Boolean value)
    // Offset: 0xBD7660
    void set_disableSabers(bool value);
    // public System.Boolean get_disableSabers()
    // Offset: 0xBD7690
    bool get_disableSabers();
    // public System.Void OverrideHeadPos(UnityEngine.Vector3 pos)
    // Offset: 0xBCD96C
    void OverrideHeadPos(UnityEngine::Vector3 pos);
    // protected System.Void Start()
    // Offset: 0xBD7698
    void Start();
    // protected System.Void Update()
    // Offset: 0xBD76D4
    void Update();
    // public System.Single MoveTowardsHead(System.Single start, System.Single end, UnityEngine.Quaternion noteInverseWorldRotation, System.Single t)
    // Offset: 0xBD772C
    float MoveTowardsHead(float start, float end, UnityEngine::Quaternion noteInverseWorldRotation, float t);
    // public System.Void .ctor()
    // Offset: 0xBD7848
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static PlayerController* New_ctor();
  }; // PlayerController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerController*, "", "PlayerController");
#pragma pack(pop)
