// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerTransforms
  class PlayerTransforms;
  // Forward declaring type: IBeatmapObjectCallbackController
  class IBeatmapObjectCallbackController;
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: BeatmapObjectCallbackData
  class BeatmapObjectCallbackData;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: PlayerHeightDetector
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerHeightDetector : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::PlayerHeightDetector::InitData
    class InitData;
    // [InjectAttribute] Offset: 0xEB6148
    // private readonly PlayerTransforms _playerTransforms
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PlayerTransforms* playerTransforms;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerTransforms*) == 0x8);
    // [InjectAttribute] Offset: 0xEB6158
    // private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IBeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xEB6168
    // private readonly IAudioTimeSource _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::IAudioTimeSource* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAudioTimeSource*) == 0x8);
    // [InjectAttribute] Offset: 0xEB6178
    // private readonly PlayerHeightDetector/InitData _initData
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::PlayerHeightDetector::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeightDetector::InitData*) == 0x8);
    // private System.Action`1<System.Single> playerHeightDidChangeEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<float>* playerHeightDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // private BeatmapObjectCallbackData _beatmapObjectCallbackData
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::BeatmapObjectCallbackData* beatmapObjectCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackData*) == 0x8);
    // private System.Single _noTopObstaclesStartTime
    // Size: 0x4
    // Offset: 0x48
    float noTopObstaclesStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _computedPlayerHeight
    // Size: 0x4
    // Offset: 0x4C
    float computedPlayerHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _changeWeight
    // Size: 0x4
    // Offset: 0x50
    float changeWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastReportedHeight
    // Size: 0x4
    // Offset: 0x54
    float lastReportedHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: PlayerHeightDetector
    PlayerHeightDetector(GlobalNamespace::PlayerTransforms* playerTransforms_ = {}, GlobalNamespace::IBeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::IAudioTimeSource* audioTimeSyncController_ = {}, GlobalNamespace::PlayerHeightDetector::InitData* initData_ = {}, System::Action_1<float>* playerHeightDidChangeEvent_ = {}, GlobalNamespace::BeatmapObjectCallbackData* beatmapObjectCallbackData_ = {}, float noTopObstaclesStartTime_ = {}, float computedPlayerHeight_ = {}, float changeWeight_ = {}, float lastReportedHeight_ = {}) noexcept : playerTransforms{playerTransforms_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, audioTimeSyncController{audioTimeSyncController_}, initData{initData_}, playerHeightDidChangeEvent{playerHeightDidChangeEvent_}, beatmapObjectCallbackData{beatmapObjectCallbackData_}, noTopObstaclesStartTime{noTopObstaclesStartTime_}, computedPlayerHeight{computedPlayerHeight_}, changeWeight{changeWeight_}, lastReportedHeight{lastReportedHeight_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field: private readonly PlayerTransforms _playerTransforms
    GlobalNamespace::PlayerTransforms* _get__playerTransforms();
    // Set instance field: private readonly PlayerTransforms _playerTransforms
    void _set__playerTransforms(GlobalNamespace::PlayerTransforms* value);
    // Get instance field: private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    GlobalNamespace::IBeatmapObjectCallbackController* _get__beatmapObjectCallbackController();
    // Set instance field: private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    void _set__beatmapObjectCallbackController(GlobalNamespace::IBeatmapObjectCallbackController* value);
    // Get instance field: private readonly IAudioTimeSource _audioTimeSyncController
    GlobalNamespace::IAudioTimeSource* _get__audioTimeSyncController();
    // Set instance field: private readonly IAudioTimeSource _audioTimeSyncController
    void _set__audioTimeSyncController(GlobalNamespace::IAudioTimeSource* value);
    // Get instance field: private readonly PlayerHeightDetector/InitData _initData
    GlobalNamespace::PlayerHeightDetector::InitData* _get__initData();
    // Set instance field: private readonly PlayerHeightDetector/InitData _initData
    void _set__initData(GlobalNamespace::PlayerHeightDetector::InitData* value);
    // Get instance field: private System.Action`1<System.Single> playerHeightDidChangeEvent
    System::Action_1<float>* _get_playerHeightDidChangeEvent();
    // Set instance field: private System.Action`1<System.Single> playerHeightDidChangeEvent
    void _set_playerHeightDidChangeEvent(System::Action_1<float>* value);
    // Get instance field: private BeatmapObjectCallbackData _beatmapObjectCallbackData
    GlobalNamespace::BeatmapObjectCallbackData* _get__beatmapObjectCallbackData();
    // Set instance field: private BeatmapObjectCallbackData _beatmapObjectCallbackData
    void _set__beatmapObjectCallbackData(GlobalNamespace::BeatmapObjectCallbackData* value);
    // Get instance field: private System.Single _noTopObstaclesStartTime
    float _get__noTopObstaclesStartTime();
    // Set instance field: private System.Single _noTopObstaclesStartTime
    void _set__noTopObstaclesStartTime(float value);
    // Get instance field: private System.Single _computedPlayerHeight
    float _get__computedPlayerHeight();
    // Set instance field: private System.Single _computedPlayerHeight
    void _set__computedPlayerHeight(float value);
    // Get instance field: private System.Single _changeWeight
    float _get__changeWeight();
    // Set instance field: private System.Single _changeWeight
    void _set__changeWeight(float value);
    // Get instance field: private System.Single _lastReportedHeight
    float _get__lastReportedHeight();
    // Set instance field: private System.Single _lastReportedHeight
    void _set__lastReportedHeight(float value);
    // public System.Single get_playerHeight()
    // Offset: 0x1F56CB4
    float get_playerHeight();
    // public System.Void add_playerHeightDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x1F56B6C
    void add_playerHeightDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_playerHeightDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x1F56C10
    void remove_playerHeightDidChangeEvent(System::Action_1<float>* value);
    // protected System.Void Start()
    // Offset: 0x1F56CBC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1F56E5C
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0x1F56F20
    void LateUpdate();
    // private System.Void BeatmapObjectSpawnCallback(BeatmapObjectData beatmapObjectData)
    // Offset: 0x1F57110
    void BeatmapObjectSpawnCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // public System.Void .ctor()
    // Offset: 0x1F5721C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerHeightDetector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerHeightDetector*, creationType>()));
    }
  }; // PlayerHeightDetector
  #pragma pack(pop)
  static check_size<sizeof(PlayerHeightDetector), 84 + sizeof(float)> __GlobalNamespace_PlayerHeightDetectorSizeCheck;
  static_assert(sizeof(PlayerHeightDetector) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerHeightDetector*, "", "PlayerHeightDetector");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::get_playerHeight
// Il2CppName: get_playerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PlayerHeightDetector::*)()>(&GlobalNamespace::PlayerHeightDetector::get_playerHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "get_playerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::add_playerHeightDidChangeEvent
// Il2CppName: add_playerHeightDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerHeightDetector::*)(System::Action_1<float>*)>(&GlobalNamespace::PlayerHeightDetector::add_playerHeightDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "add_playerHeightDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::remove_playerHeightDidChangeEvent
// Il2CppName: remove_playerHeightDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerHeightDetector::*)(System::Action_1<float>*)>(&GlobalNamespace::PlayerHeightDetector::remove_playerHeightDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "remove_playerHeightDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerHeightDetector::*)()>(&GlobalNamespace::PlayerHeightDetector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerHeightDetector::*)()>(&GlobalNamespace::PlayerHeightDetector::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerHeightDetector::*)()>(&GlobalNamespace::PlayerHeightDetector::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::BeatmapObjectSpawnCallback
// Il2CppName: BeatmapObjectSpawnCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerHeightDetector::*)(GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::PlayerHeightDetector::BeatmapObjectSpawnCallback)> {
  static const MethodInfo* get() {
    static auto* beatmapObjectData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerHeightDetector*), "BeatmapObjectSpawnCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapObjectData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerHeightDetector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
