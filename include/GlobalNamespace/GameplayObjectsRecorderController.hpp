// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PoseObject
  class PoseObject;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: PosesRecorder
  class PosesRecorder;
  // Forward declaring type: PosesPlayback
  class PosesPlayback;
  // Skipping declaration: Mode because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameplayObjectsRecorderController
  class GameplayObjectsRecorderController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::GameplayObjectsRecorderController);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayObjectsRecorderController*, "", "GameplayObjectsRecorderController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GameplayObjectsRecorderController
  // [TokenAttribute] Offset: FFFFFFFF
  class GameplayObjectsRecorderController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::GameplayObjectsRecorderController::Mode
    struct Mode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GameplayObjectsRecorderController/Mode
    // [TokenAttribute] Offset: FFFFFFFF
    struct Mode/*, public System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GameplayObjectsRecorderController/Mode Record
      static constexpr const int Record = 0;
      // Get static field: static public GameplayObjectsRecorderController/Mode Record
      static GlobalNamespace::GameplayObjectsRecorderController::Mode _get_Record();
      // Set static field: static public GameplayObjectsRecorderController/Mode Record
      static void _set_Record(GlobalNamespace::GameplayObjectsRecorderController::Mode value);
      // static field const value: static public GameplayObjectsRecorderController/Mode Playback
      static constexpr const int Playback = 1;
      // Get static field: static public GameplayObjectsRecorderController/Mode Playback
      static GlobalNamespace::GameplayObjectsRecorderController::Mode _get_Playback();
      // Set static field: static public GameplayObjectsRecorderController/Mode Playback
      static void _set_Playback(GlobalNamespace::GameplayObjectsRecorderController::Mode value);
      // static field const value: static public GameplayObjectsRecorderController/Mode Off
      static constexpr const int Off = 2;
      // Get static field: static public GameplayObjectsRecorderController/Mode Off
      static GlobalNamespace::GameplayObjectsRecorderController::Mode _get_Off();
      // Set static field: static public GameplayObjectsRecorderController/Mode Off
      static void _set_Off(GlobalNamespace::GameplayObjectsRecorderController::Mode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // GameplayObjectsRecorderController/Mode
    #pragma pack(pop)
    static check_size<sizeof(GameplayObjectsRecorderController::Mode), 0 + sizeof(int)> __GlobalNamespace_GameplayObjectsRecorderController_ModeSizeCheck;
    static_assert(sizeof(GameplayObjectsRecorderController::Mode) == 0x4);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.String _recordingFileName
    // Size: 0x8
    // Offset: 0x18
    ::StringW recordingFileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private GameplayObjectsRecorderController/Mode _mode
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::GameplayObjectsRecorderController::Mode mode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayObjectsRecorderController::Mode) == 0x4);
    // Padding between fields: mode and: poseObjects
    char __padding1[0x4] = {};
    // [SpaceAttribute] Offset: 0xF4941C
    // public PoseObject[] _poseObjects
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<GlobalNamespace::PoseObject*> poseObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<GlobalNamespace::PoseObject*>) == 0x8);
    // [InjectAttribute] Offset: 0xF49454
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // private PosesRecorder _recorder
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::PosesRecorder* recorder;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PosesRecorder*) == 0x8);
    // private PosesPlayback _playback
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::PosesPlayback* playback;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PosesPlayback*) == 0x8);
    public:
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String kDefaultRecordingFileName
    static constexpr const char* kDefaultRecordingFileName = "Recordings/PlaybackRecording/Recording.rcd";
    // Get static field: static private System.String kDefaultRecordingFileName
    static ::StringW _get_kDefaultRecordingFileName();
    // Set static field: static private System.String kDefaultRecordingFileName
    static void _set_kDefaultRecordingFileName(::StringW value);
    // Get instance field reference: private System.String _recordingFileName
    ::StringW& dyn__recordingFileName();
    // Get instance field reference: private GameplayObjectsRecorderController/Mode _mode
    GlobalNamespace::GameplayObjectsRecorderController::Mode& dyn__mode();
    // Get instance field reference: public PoseObject[] _poseObjects
    ::ArrayW<GlobalNamespace::PoseObject*>& dyn__poseObjects();
    // Get instance field reference: private readonly AudioTimeSyncController _audioTimeSyncController
    GlobalNamespace::AudioTimeSyncController*& dyn__audioTimeSyncController();
    // Get instance field reference: private PosesRecorder _recorder
    GlobalNamespace::PosesRecorder*& dyn__recorder();
    // Get instance field reference: private PosesPlayback _playback
    GlobalNamespace::PosesPlayback*& dyn__playback();
    // public System.String get_recordingFileName()
    // Offset: 0x11964E4
    ::StringW get_recordingFileName();
    // public System.Void set_recordingFileName(System.String value)
    // Offset: 0x11964EC
    void set_recordingFileName(::StringW value);
    // public GameplayObjectsRecorderController/Mode get_mode()
    // Offset: 0x11964F4
    GlobalNamespace::GameplayObjectsRecorderController::Mode get_mode();
    // public System.Void set_mode(GameplayObjectsRecorderController/Mode value)
    // Offset: 0x11964FC
    void set_mode(GlobalNamespace::GameplayObjectsRecorderController::Mode value);
    // protected System.Void Start()
    // Offset: 0x1196504
    void Start();
    // protected System.Void Update()
    // Offset: 0x1196610
    void Update();
    // protected System.Void LateUpdate()
    // Offset: 0x119664C
    void LateUpdate();
    // protected System.Void OnDestroy()
    // Offset: 0x1196690
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x11966C0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplayObjectsRecorderController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayObjectsRecorderController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplayObjectsRecorderController*, creationType>()));
    }
  }; // GameplayObjectsRecorderController
  #pragma pack(pop)
  static check_size<sizeof(GameplayObjectsRecorderController), 64 + sizeof(GlobalNamespace::PosesPlayback*)> __GlobalNamespace_GameplayObjectsRecorderControllerSizeCheck;
  static_assert(sizeof(GameplayObjectsRecorderController) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayObjectsRecorderController::Mode, "", "GameplayObjectsRecorderController/Mode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::get_recordingFileName
// Il2CppName: get_recordingFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameplayObjectsRecorderController::*)()>(&GlobalNamespace::GameplayObjectsRecorderController::get_recordingFileName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "get_recordingFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::set_recordingFileName
// Il2CppName: set_recordingFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayObjectsRecorderController::*)(::StringW)>(&GlobalNamespace::GameplayObjectsRecorderController::set_recordingFileName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "set_recordingFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::get_mode
// Il2CppName: get_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayObjectsRecorderController::Mode (GlobalNamespace::GameplayObjectsRecorderController::*)()>(&GlobalNamespace::GameplayObjectsRecorderController::get_mode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "get_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::set_mode
// Il2CppName: set_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayObjectsRecorderController::*)(GlobalNamespace::GameplayObjectsRecorderController::Mode)>(&GlobalNamespace::GameplayObjectsRecorderController::set_mode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayObjectsRecorderController/Mode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "set_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayObjectsRecorderController::*)()>(&GlobalNamespace::GameplayObjectsRecorderController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayObjectsRecorderController::*)()>(&GlobalNamespace::GameplayObjectsRecorderController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayObjectsRecorderController::*)()>(&GlobalNamespace::GameplayObjectsRecorderController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayObjectsRecorderController::*)()>(&GlobalNamespace::GameplayObjectsRecorderController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayObjectsRecorderController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayObjectsRecorderController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
