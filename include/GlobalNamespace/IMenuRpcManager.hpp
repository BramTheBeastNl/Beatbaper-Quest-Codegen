// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: EntitlementsStatus
#include "GlobalNamespace/EntitlementsStatus.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapIdentifierNetSerializable
  class BeatmapIdentifierNetSerializable;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: IMenuRpcManager
  class IMenuRpcManager/*, public System::IDisposable*/ {
    public:
    // Creating value type constructor for type: IMenuRpcManager
    IMenuRpcManager() noexcept {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Single get_syncTime()
    // Offset: 0xFFFFFFFF
    float get_syncTime();
    // public System.Void add_getIsReadyEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getIsReadyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getIsReadyEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getIsReadyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0xFFFFFFFF
    void add_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void remove_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0xFFFFFFFF
    void remove_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void add_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0xFFFFFFFF
    void add_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void remove_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0xFFFFFFFF
    void remove_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void add_cancelledLevelStartEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelledLevelStartEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    // Offset: 0xFFFFFFFF
    void add_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value);
    // public System.Void remove_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    // Offset: 0xFFFFFFFF
    void remove_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value);
    // public System.Void add_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    // Offset: 0xFFFFFFFF
    void add_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void remove_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    // Offset: 0xFFFFFFFF
    void remove_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void add_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    // Offset: 0xFFFFFFFF
    void add_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value);
    // public System.Void remove_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    // Offset: 0xFFFFFFFF
    void remove_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value);
    // public System.Void add_getStartedLevelEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getStartedLevelEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    // Offset: 0xFFFFFFFF
    void add_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void remove_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    // Offset: 0xFFFFFFFF
    void remove_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void add_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void add_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    // Offset: 0xFFFFFFFF
    void add_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value);
    // public System.Void remove_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    // Offset: 0xFFFFFFFF
    void remove_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value);
    // public System.Void add_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_getIsInLobbyEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getIsInLobbyEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0xFFFFFFFF
    void add_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void remove_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0xFFFFFFFF
    void remove_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void add_cancelCountdownEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelCountdownEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0xFFFFFFFF
    void add_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void remove_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0xFFFFFFFF
    void remove_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void add_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    // Offset: 0xFFFFFFFF
    void add_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value);
    // public System.Void remove_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    // Offset: 0xFFFFFFFF
    void remove_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value);
    // public System.Void add_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void add_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    // Offset: 0xFFFFFFFF
    void remove_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void SelectBeatmap(BeatmapIdentifierNetSerializable identifier)
    // Offset: 0xFFFFFFFF
    void SelectBeatmap(GlobalNamespace::BeatmapIdentifierNetSerializable* identifier);
    // public System.Void ClearSelectedBeatmap()
    // Offset: 0xFFFFFFFF
    void ClearSelectedBeatmap();
    // public System.Void GetSelectedBeatmap()
    // Offset: 0xFFFFFFFF
    void GetSelectedBeatmap();
    // public System.Void SelectGameplayModifiers(GameplayModifiers gameplayModifiers)
    // Offset: 0xFFFFFFFF
    void SelectGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // public System.Void ClearSelectedGameplayModifiers()
    // Offset: 0xFFFFFFFF
    void ClearSelectedGameplayModifiers();
    // public System.Void GetSelectedGameplayModifiers()
    // Offset: 0xFFFFFFFF
    void GetSelectedGameplayModifiers();
    // public System.Void GetIsReady()
    // Offset: 0xFFFFFFFF
    void GetIsReady();
    // public System.Void SetIsReady(System.Boolean isReady)
    // Offset: 0xFFFFFFFF
    void SetIsReady(bool isReady);
    // public System.Void StartLevel(BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0xFFFFFFFF
    void StartLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // public System.Void GetStartedLevel()
    // Offset: 0xFFFFFFFF
    void GetStartedLevel();
    // public System.Void GetMultiplayerGameState()
    // Offset: 0xFFFFFFFF
    void GetMultiplayerGameState();
    // public System.Void SetMultiplayerGameState(MultiplayerGameState lobbyState)
    // Offset: 0xFFFFFFFF
    void SetMultiplayerGameState(GlobalNamespace::MultiplayerGameState lobbyState);
    // public System.Void CancelLevelStart()
    // Offset: 0xFFFFFFFF
    void CancelLevelStart();
    // public System.Void SetStartGameTime(System.Single newTime)
    // Offset: 0xFFFFFFFF
    void SetStartGameTime(float newTime);
    // public System.Void InvalidateLevelEntitlementStatuses()
    // Offset: 0xFFFFFFFF
    void InvalidateLevelEntitlementStatuses();
    // public System.Void SetIsEntitledToLevel(System.String levelId, EntitlementsStatus entitlementStatus)
    // Offset: 0xFFFFFFFF
    void SetIsEntitledToLevel(::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus entitlementStatus);
    // public System.Void GetIsEntitledToLevel(System.String levelId)
    // Offset: 0xFFFFFFFF
    void GetIsEntitledToLevel(::Il2CppString* levelId);
    // public System.Void GetIsInLobby()
    // Offset: 0xFFFFFFFF
    void GetIsInLobby();
    // public System.Void SetIsInLobby(System.Boolean isBack)
    // Offset: 0xFFFFFFFF
    void SetIsInLobby(bool isBack);
    // public System.Void GetCountdownEndTime()
    // Offset: 0xFFFFFFFF
    void GetCountdownEndTime();
    // public System.Void GetOwnedSongPacks()
    // Offset: 0xFFFFFFFF
    void GetOwnedSongPacks();
    // public System.Void SetOwnedSongPacks(SongPackMask songPackMask)
    // Offset: 0xFFFFFFFF
    void SetOwnedSongPacks(GlobalNamespace::SongPackMask songPackMask);
  }; // IMenuRpcManager
  #pragma pack(pop)
  // Writing MetadataGetter for method: IMenuRpcManager::get_syncTime
  // Il2CppName: get_syncTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IMenuRpcManager::*)()>(&IMenuRpcManager::get_syncTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getIsReadyEvent
  // Il2CppName: add_getIsReadyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getIsReadyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getIsReadyEvent
  // Il2CppName: remove_getIsReadyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getIsReadyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setIsReadyEvent
  // Il2CppName: add_setIsReadyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::add_setIsReadyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setIsReadyEvent
  // Il2CppName: remove_setIsReadyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::remove_setIsReadyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setIsReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setStartGameTimeEvent
  // Il2CppName: add_setStartGameTimeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::add_setStartGameTimeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setStartGameTimeEvent
  // Il2CppName: remove_setStartGameTimeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::remove_setStartGameTimeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setStartGameTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_cancelledLevelStartEvent
  // Il2CppName: add_cancelledLevelStartEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_cancelledLevelStartEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_cancelledLevelStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_cancelledLevelStartEvent
  // Il2CppName: remove_cancelledLevelStartEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_cancelledLevelStartEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_cancelledLevelStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_selectedBeatmapEvent
  // Il2CppName: add_selectedBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*)>(&IMenuRpcManager::add_selectedBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_selectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_selectedBeatmapEvent
  // Il2CppName: remove_selectedBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*)>(&IMenuRpcManager::remove_selectedBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_selectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_clearSelectedBeatmapEvent
  // Il2CppName: add_clearSelectedBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_clearSelectedBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_clearSelectedBeatmapEvent
  // Il2CppName: remove_clearSelectedBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_clearSelectedBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_clearSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getSelectedBeatmapEvent
  // Il2CppName: add_getSelectedBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getSelectedBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getSelectedBeatmapEvent
  // Il2CppName: remove_getSelectedBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getSelectedBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getSelectedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_selectedGameplayModifiersEvent
  // Il2CppName: add_selectedGameplayModifiersEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*)>(&IMenuRpcManager::add_selectedGameplayModifiersEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_selectedGameplayModifiersEvent
  // Il2CppName: remove_selectedGameplayModifiersEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*)>(&IMenuRpcManager::remove_selectedGameplayModifiersEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_selectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_clearSelectedGameplayModifiersEvent
  // Il2CppName: add_clearSelectedGameplayModifiersEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_clearSelectedGameplayModifiersEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent
  // Il2CppName: remove_clearSelectedGameplayModifiersEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_clearSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getSelectedGameplayModifiersEvent
  // Il2CppName: add_getSelectedGameplayModifiersEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getSelectedGameplayModifiersEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getSelectedGameplayModifiersEvent
  // Il2CppName: remove_getSelectedGameplayModifiersEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getSelectedGameplayModifiersEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getSelectedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_startedLevelEvent
  // Il2CppName: add_startedLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*)>(&IMenuRpcManager::add_startedLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_startedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_startedLevelEvent
  // Il2CppName: remove_startedLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*)>(&IMenuRpcManager::remove_startedLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_startedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getStartedLevelEvent
  // Il2CppName: add_getStartedLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getStartedLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getStartedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getStartedLevelEvent
  // Il2CppName: remove_getStartedLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getStartedLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getStartedLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getMultiplayerGameStateEvent
  // Il2CppName: add_getMultiplayerGameStateEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getMultiplayerGameStateEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getMultiplayerGameStateEvent
  // Il2CppName: remove_getMultiplayerGameStateEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getMultiplayerGameStateEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setMultiplayerGameStateEvent
  // Il2CppName: add_setMultiplayerGameStateEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*)>(&IMenuRpcManager::add_setMultiplayerGameStateEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setMultiplayerGameStateEvent
  // Il2CppName: remove_setMultiplayerGameStateEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*)>(&IMenuRpcManager::remove_setMultiplayerGameStateEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setMultiplayerGameStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getIsEntitledToLevelEvent
  // Il2CppName: add_getIsEntitledToLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&IMenuRpcManager::add_getIsEntitledToLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getIsEntitledToLevelEvent
  // Il2CppName: remove_getIsEntitledToLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, ::Il2CppString*>*)>(&IMenuRpcManager::remove_getIsEntitledToLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, ::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setIsEntitledToLevelEvent
  // Il2CppName: add_setIsEntitledToLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*)>(&IMenuRpcManager::add_setIsEntitledToLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setIsEntitledToLevelEvent
  // Il2CppName: remove_setIsEntitledToLevelEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*)>(&IMenuRpcManager::remove_setIsEntitledToLevelEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setIsEntitledToLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent
  // Il2CppName: add_levelEntitlementStatusesInvalidatedEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent
  // Il2CppName: remove_levelEntitlementStatusesInvalidatedEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_levelEntitlementStatusesInvalidatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getIsInLobbyEvent
  // Il2CppName: add_getIsInLobbyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getIsInLobbyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getIsInLobbyEvent
  // Il2CppName: remove_getIsInLobbyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getIsInLobbyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setIsInLobbyEvent
  // Il2CppName: add_setIsInLobbyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::add_setIsInLobbyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setIsInLobbyEvent
  // Il2CppName: remove_setIsInLobbyEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, bool>*)>(&IMenuRpcManager::remove_setIsInLobbyEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setIsInLobbyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, bool>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_cancelCountdownEvent
  // Il2CppName: add_cancelCountdownEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_cancelCountdownEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_cancelCountdownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_cancelCountdownEvent
  // Il2CppName: remove_cancelCountdownEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_cancelCountdownEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_cancelCountdownEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setCountdownEndTimeEvent
  // Il2CppName: add_setCountdownEndTimeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::add_setCountdownEndTimeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setCountdownEndTimeEvent
  // Il2CppName: remove_setCountdownEndTimeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, float>*)>(&IMenuRpcManager::remove_setCountdownEndTimeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setCountdownEndTimeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_setOwnedSongPacksEvent
  // Il2CppName: add_setOwnedSongPacksEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&IMenuRpcManager::add_setOwnedSongPacksEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_setOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_setOwnedSongPacksEvent
  // Il2CppName: remove_setOwnedSongPacksEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)>(&IMenuRpcManager::remove_setOwnedSongPacksEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_setOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::add_getOwnedSongPacksEvent
  // Il2CppName: add_getOwnedSongPacksEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::add_getOwnedSongPacksEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "add_getOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::remove_getOwnedSongPacksEvent
  // Il2CppName: remove_getOwnedSongPacksEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(System::Action_1<::Il2CppString*>*)>(&IMenuRpcManager::remove_getOwnedSongPacksEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "remove_getOwnedSongPacksEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SelectBeatmap
  // Il2CppName: SelectBeatmap
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*)>(&IMenuRpcManager::SelectBeatmap)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SelectBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::ClearSelectedBeatmap
  // Il2CppName: ClearSelectedBeatmap
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::ClearSelectedBeatmap)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "ClearSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetSelectedBeatmap
  // Il2CppName: GetSelectedBeatmap
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetSelectedBeatmap)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SelectGameplayModifiers
  // Il2CppName: SelectGameplayModifiers
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::GameplayModifiers*)>(&IMenuRpcManager::SelectGameplayModifiers)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SelectGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::ClearSelectedGameplayModifiers
  // Il2CppName: ClearSelectedGameplayModifiers
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::ClearSelectedGameplayModifiers)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "ClearSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetSelectedGameplayModifiers
  // Il2CppName: GetSelectedGameplayModifiers
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetSelectedGameplayModifiers)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetSelectedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetIsReady
  // Il2CppName: GetIsReady
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetIsReady)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SetIsReady
  // Il2CppName: SetIsReady
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(bool)>(&IMenuRpcManager::SetIsReady)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetIsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::StartLevel
  // Il2CppName: StartLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float)>(&IMenuRpcManager::StartLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapIdentifierNetSerializable*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetStartedLevel
  // Il2CppName: GetStartedLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetStartedLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetStartedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetMultiplayerGameState
  // Il2CppName: GetMultiplayerGameState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetMultiplayerGameState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SetMultiplayerGameState
  // Il2CppName: SetMultiplayerGameState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::MultiplayerGameState)>(&IMenuRpcManager::SetMultiplayerGameState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::CancelLevelStart
  // Il2CppName: CancelLevelStart
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::CancelLevelStart)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "CancelLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SetStartGameTime
  // Il2CppName: SetStartGameTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(float)>(&IMenuRpcManager::SetStartGameTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetStartGameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::InvalidateLevelEntitlementStatuses
  // Il2CppName: InvalidateLevelEntitlementStatuses
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::InvalidateLevelEntitlementStatuses)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "InvalidateLevelEntitlementStatuses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SetIsEntitledToLevel
  // Il2CppName: SetIsEntitledToLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(::Il2CppString*, GlobalNamespace::EntitlementsStatus)>(&IMenuRpcManager::SetIsEntitledToLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EntitlementsStatus>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetIsEntitledToLevel
  // Il2CppName: GetIsEntitledToLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(::Il2CppString*)>(&IMenuRpcManager::GetIsEntitledToLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetIsEntitledToLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetIsInLobby
  // Il2CppName: GetIsInLobby
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetIsInLobby)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SetIsInLobby
  // Il2CppName: SetIsInLobby
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(bool)>(&IMenuRpcManager::SetIsInLobby)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetCountdownEndTime
  // Il2CppName: GetCountdownEndTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetCountdownEndTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetCountdownEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::GetOwnedSongPacks
  // Il2CppName: GetOwnedSongPacks
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)()>(&IMenuRpcManager::GetOwnedSongPacks)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "GetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMenuRpcManager::SetOwnedSongPacks
  // Il2CppName: SetOwnedSongPacks
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuRpcManager::*)(GlobalNamespace::SongPackMask)>(&IMenuRpcManager::SetOwnedSongPacks)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMenuRpcManager*), "SetOwnedSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::IMenuRpcManager*, "", "IMenuRpcManager");
