// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: QuantizedMathf
  class QuantizedMathf : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: QuantizedMathf
    QuantizedMathf() noexcept {}
    // static field const value: static public System.Int32 kQuaternionSerializableScaleFactor
    static constexpr const int kQuaternionSerializableScaleFactor = 16383;
    // Get static field: static public System.Int32 kQuaternionSerializableScaleFactor
    static int _get_kQuaternionSerializableScaleFactor();
    // Set static field: static public System.Int32 kQuaternionSerializableScaleFactor
    static void _set_kQuaternionSerializableScaleFactor(int value);
    // static field const value: static private System.Single kQuaternionSerializableEpsilon
    static constexpr const float kQuaternionSerializableEpsilon = 6.103888e-05;
    // Get static field: static private System.Single kQuaternionSerializableEpsilon
    static float _get_kQuaternionSerializableEpsilon();
    // Set static field: static private System.Single kQuaternionSerializableEpsilon
    static void _set_kQuaternionSerializableEpsilon(float value);
    // static field const value: static private System.Int32 kVectorSerializableScaleInt
    static constexpr const int kVectorSerializableScaleInt = 1000;
    // Get static field: static private System.Int32 kVectorSerializableScaleInt
    static int _get_kVectorSerializableScaleInt();
    // Set static field: static private System.Int32 kVectorSerializableScaleInt
    static void _set_kVectorSerializableScaleInt(int value);
    // static field const value: static public System.Single kVectorSerializableScale
    static constexpr const float kVectorSerializableScale = 1000;
    // Get static field: static public System.Single kVectorSerializableScale
    static float _get_kVectorSerializableScale();
    // Set static field: static public System.Single kVectorSerializableScale
    static void _set_kVectorSerializableScale(float value);
    // static field const value: static private System.Single kVectorSerializableEpsilon
    static constexpr const float kVectorSerializableEpsilon = 0.001;
    // Get static field: static private System.Single kVectorSerializableEpsilon
    static float _get_kVectorSerializableEpsilon();
    // Set static field: static private System.Single kVectorSerializableEpsilon
    static void _set_kVectorSerializableEpsilon(float value);
    // static public System.Boolean Approximately(UnityEngine.Quaternion a, UnityEngine.Quaternion b)
    // Offset: 0x234A6C8
    static bool Approximately(UnityEngine::Quaternion a, UnityEngine::Quaternion b);
    // static public System.Boolean Approximately(System.Single a, System.Single b, System.Single epsilon)
    // Offset: 0x234A880
    static bool Approximately(float a, float b, float epsilon);
    // static public System.Boolean Approximately(System.Int32 a, System.Int32 b, System.Int32 epsilon)
    // Offset: 0x234A904
    static bool Approximately(int a, int b, int epsilon);
    // static public System.Boolean Approximately(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x234A988
    static bool Approximately(UnityEngine::Vector3 a, UnityEngine::Vector3 b);
    // static public System.Boolean Approximately(UnityEngine.Pose a, UnityEngine.Pose b)
    // Offset: 0x234AA10
    static bool Approximately(UnityEngine::Pose a, UnityEngine::Pose b);
    // static public System.String QuantizedVectorComponentToString(System.Int32 v)
    // Offset: 0x234AA68
    static ::Il2CppString* QuantizedVectorComponentToString(int v);
  }; // QuantizedMathf
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::QuantizedMathf*, "", "QuantizedMathf");
// Writing MetadataGetter for method: QuantizedMathf::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Quaternion, UnityEngine::Quaternion)>(&QuantizedMathf::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuantizedMathf*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: QuantizedMathf::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float, float)>(&QuantizedMathf::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuantizedMathf*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: QuantizedMathf::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int)>(&QuantizedMathf::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuantizedMathf*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: QuantizedMathf::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&QuantizedMathf::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuantizedMathf*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: QuantizedMathf::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Pose, UnityEngine::Pose)>(&QuantizedMathf::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuantizedMathf*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Pose>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Pose>()});
  }
};
// Writing MetadataGetter for method: QuantizedMathf::QuantizedVectorComponentToString
// Il2CppName: QuantizedVectorComponentToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&QuantizedMathf::QuantizedVectorComponentToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuantizedMathf*), "QuantizedVectorComponentToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
