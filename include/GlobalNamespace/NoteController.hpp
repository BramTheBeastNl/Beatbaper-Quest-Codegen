// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteMovement
  class NoteMovement;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: NoteData
  class NoteData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteController
  class NoteController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NoteController::$DissolveCoroutine$d__71
    class $DissolveCoroutine$d__71;
    // protected NoteMovement _noteMovement
    // Offset: 0x18
    GlobalNamespace::NoteMovement* noteMovement;
    // protected UnityEngine.Transform _noteTransform
    // Offset: 0x20
    UnityEngine::Transform* noteTransform;
    // private System.Action`1<NoteController> didInitEvent
    // Offset: 0x28
    System::Action_1<GlobalNamespace::NoteController*>* didInitEvent;
    // private System.Action`1<NoteController> noteDidStartJumpEvent
    // Offset: 0x30
    System::Action_1<GlobalNamespace::NoteController*>* noteDidStartJumpEvent;
    // private System.Action`1<NoteController> noteDidFinishJumpEvent
    // Offset: 0x38
    System::Action_1<GlobalNamespace::NoteController*>* noteDidFinishJumpEvent;
    // private System.Action`1<NoteController> noteDidPassJumpThreeQuartersEvent
    // Offset: 0x40
    System::Action_1<GlobalNamespace::NoteController*>* noteDidPassJumpThreeQuartersEvent;
    // private System.Action`2<NoteController,NoteCutInfo> noteWasCutEvent
    // Offset: 0x48
    System::Action_2<GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo*>* noteWasCutEvent;
    // private System.Action`1<NoteController> noteWasMissedEvent
    // Offset: 0x50
    System::Action_1<GlobalNamespace::NoteController*>* noteWasMissedEvent;
    // private System.Action`2<NoteController,System.Single> noteDidStartDissolvingEvent
    // Offset: 0x58
    System::Action_2<GlobalNamespace::NoteController*, float>* noteDidStartDissolvingEvent;
    // private System.Action`1<NoteController> noteDidDissolveEvent
    // Offset: 0x60
    System::Action_1<GlobalNamespace::NoteController*>* noteDidDissolveEvent;
    // private NoteData _noteData
    // Offset: 0x68
    GlobalNamespace::NoteData* noteData;
    // private System.Boolean _dissolving
    // Offset: 0x70
    bool dissolving;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didInitEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7284
    void add_didInitEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_didInitEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7328
    void remove_didInitEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE73CC
    void add_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7470
    void remove_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteDidFinishJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7514
    void add_noteDidFinishJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidFinishJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE75B8
    void remove_noteDidFinishJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteDidPassJumpThreeQuartersEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE765C
    void add_noteDidPassJumpThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidPassJumpThreeQuartersEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7700
    void remove_noteDidPassJumpThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasCutEvent(System.Action`2<NoteController,NoteCutInfo> value)
    // Offset: 0x1FE77A4
    void add_noteWasCutEvent(System::Action_2<GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo*>* value);
    // public System.Void remove_noteWasCutEvent(System.Action`2<NoteController,NoteCutInfo> value)
    // Offset: 0x1FE7848
    void remove_noteWasCutEvent(System::Action_2<GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo*>* value);
    // public System.Void add_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE78EC
    void add_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7990
    void remove_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteDidStartDissolvingEvent(System.Action`2<NoteController,System.Single> value)
    // Offset: 0x1FE7A34
    void add_noteDidStartDissolvingEvent(System::Action_2<GlobalNamespace::NoteController*, float>* value);
    // public System.Void remove_noteDidStartDissolvingEvent(System.Action`2<NoteController,System.Single> value)
    // Offset: 0x1FE7AD8
    void remove_noteDidStartDissolvingEvent(System::Action_2<GlobalNamespace::NoteController*, float>* value);
    // public System.Void add_noteDidDissolveEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7B7C
    void add_noteDidDissolveEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidDissolveEvent(System.Action`1<NoteController> value)
    // Offset: 0x1FE7C20
    void remove_noteDidDissolveEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public UnityEngine.Transform get_noteTransform()
    // Offset: 0x1FE7CC4
    UnityEngine::Transform* get_noteTransform();
    // public UnityEngine.Quaternion get_worldRotation()
    // Offset: 0x1FE7CCC
    UnityEngine::Quaternion get_worldRotation();
    // public UnityEngine.Quaternion get_inverseWorldRotation()
    // Offset: 0x1FE7CE8
    UnityEngine::Quaternion get_inverseWorldRotation();
    // public System.Single get_moveStartTime()
    // Offset: 0x1FE7D04
    float get_moveStartTime();
    // public System.Single get_moveDuration()
    // Offset: 0x1FE7D20
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x1FE7D3C
    float get_jumpDuration();
    // public UnityEngine.Vector3 get_jumpMoveVec()
    // Offset: 0x1FE7D58
    UnityEngine::Vector3 get_jumpMoveVec();
    // public UnityEngine.Vector3 get_beatPos()
    // Offset: 0x1FE7D74
    UnityEngine::Vector3 get_beatPos();
    // public UnityEngine.Vector3 get_jumpStartPos()
    // Offset: 0x1FE7D90
    UnityEngine::Vector3 get_jumpStartPos();
    // public NoteData get_noteData()
    // Offset: 0x1FE7DAC
    GlobalNamespace::NoteData* get_noteData();
    // public UnityEngine.Vector3 get_moveVec()
    // Offset: 0x1FE7DB4
    UnityEngine::Vector3 get_moveVec();
    // public System.Void set_hide(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_hide(bool value);
    // public System.Boolean get_hide()
    // Offset: 0xFFFFFFFF
    bool get_hide();
    // public System.Void set_pause(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_pause(bool value);
    // protected System.Void Awake()
    // Offset: 0x1FE7E94
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x1FE7FE4
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x1FE817C
    void Update();
    // public System.Void ManualUpdate()
    // Offset: 0x1FE8188
    void ManualUpdate();
    // private System.Void HandleNoteDidStartJump()
    // Offset: 0x1FE81A4
    void HandleNoteDidStartJump();
    // private System.Void HandleNoteDidFinishJump()
    // Offset: 0x1FE8218
    void HandleNoteDidFinishJump();
    // private System.Void HandleNoteDidPassJumpThreeQuarters(NoteMovement noteMovement)
    // Offset: 0x1FE8294
    void HandleNoteDidPassJumpThreeQuarters(GlobalNamespace::NoteMovement* noteMovement);
    // private System.Void HandleNoteDidPassMissedMarkerEvent()
    // Offset: 0x1FE8324
    void HandleNoteDidPassMissedMarkerEvent();
    // protected System.Void NoteDidStartJump()
    // Offset: 0x1FE8340
    void NoteDidStartJump();
    // protected System.Void NoteDidFinishJump()
    // Offset: 0x1FE8344
    void NoteDidFinishJump();
    // protected System.Void NoteDidPassJumpThreeQuarters(NoteMovement noteMovement)
    // Offset: 0x1FE8348
    void NoteDidPassJumpThreeQuarters(GlobalNamespace::NoteMovement* noteMovement);
    // protected System.Void NoteDidPassMissedMarker()
    // Offset: 0x1FE834C
    void NoteDidPassMissedMarker();
    // protected System.Void NoteDidStartDissolving()
    // Offset: 0x1FE8350
    void NoteDidStartDissolving();
    // protected System.Void SendNoteWasMissedEvent()
    // Offset: 0x1FE8354
    void SendNoteWasMissedEvent();
    // protected System.Void SendNoteWasCutEvent(NoteCutInfo noteCutInfo)
    // Offset: 0x1FE83B8
    void SendNoteWasCutEvent(GlobalNamespace::NoteCutInfo* noteCutInfo);
    // protected System.Void Init(NoteData noteData, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Single endRotation)
    // Offset: 0x1FE8430
    void Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float endRotation);
    // private System.Collections.IEnumerator DissolveCoroutine(System.Single duration)
    // Offset: 0x1FE85F4
    System::Collections::IEnumerator* DissolveCoroutine(float duration);
    // public System.Void Dissolve(System.Single duration)
    // Offset: 0x1FE8680
    void Dissolve(float duration);
    // protected System.Void .ctor()
    // Offset: 0x1FE86E4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NoteController* New_ctor();
  }; // NoteController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteController*, "", "NoteController");
#pragma pack(pop)
