// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteMovement
  class NoteMovement;
  // Forward declaring type: LazyCopyHashSet`1<T>
  template<typename T>
  class LazyCopyHashSet_1;
  // Forward declaring type: INoteControllerDidInitEvent
  class INoteControllerDidInitEvent;
  // Forward declaring type: INoteControllerNoteDidStartJumpEvent
  class INoteControllerNoteDidStartJumpEvent;
  // Forward declaring type: INoteControllerNoteDidFinishJumpEvent
  class INoteControllerNoteDidFinishJumpEvent;
  // Forward declaring type: INoteControllerNoteDidPassJumpThreeQuartersEvent
  class INoteControllerNoteDidPassJumpThreeQuartersEvent;
  // Forward declaring type: INoteControllerNoteWasCutEvent
  class INoteControllerNoteWasCutEvent;
  // Forward declaring type: INoteControllerNoteWasMissedEvent
  class INoteControllerNoteWasMissedEvent;
  // Forward declaring type: INoteControllerNoteDidStartDissolvingEvent
  class INoteControllerNoteDidStartDissolvingEvent;
  // Forward declaring type: INoteControllerNoteDidDissolveEvent
  class INoteControllerNoteDidDissolveEvent;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: ILazyCopyHashSet`1<T>
  template<typename T>
  class ILazyCopyHashSet_1;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: NoteController
  class NoteController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NoteController::NoteWasCutDelegate
    class NoteWasCutDelegate;
    // Nested type: GlobalNamespace::NoteController::$DissolveCoroutine$d__75
    class $DissolveCoroutine$d__75;
    // protected NoteMovement _noteMovement
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::NoteMovement* noteMovement;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteMovement*) == 0x8);
    // protected UnityEngine.Transform _noteTransform
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* noteTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerDidInitEvent> _didInitEvent
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>* didInitEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartJumpEvent> _noteDidStartJumpEvent
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* noteDidStartJumpEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidFinishJumpEvent> _noteDidFinishJumpEvent
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* noteDidFinishJumpEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> _noteDidPassJumpThreeQuartersEvent
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* noteDidPassJumpThreeQuartersEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteWasCutEvent> _noteWasCutEvent
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasCutEvent*>* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasCutEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteWasMissedEvent> _noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasMissedEvent*>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasMissedEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> _noteDidStartDissolvingEvent
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* noteDidStartDissolvingEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidDissolveEvent> _noteDidDissolveEvent
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* noteDidDissolveEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>*) == 0x8);
    // private NoteData _noteData
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::NoteData* noteData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteData*) == 0x8);
    // private System.Boolean _dissolving
    // Size: 0x1
    // Offset: 0x70
    bool dissolving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dissolving and: uniformScale
    char __padding11[0x3] = {};
    // private System.Single _uniformScale
    // Size: 0x4
    // Offset: 0x74
    float uniformScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: NoteController
    NoteController(GlobalNamespace::NoteMovement* noteMovement_ = {}, UnityEngine::Transform* noteTransform_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>* didInitEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* noteDidStartJumpEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* noteDidFinishJumpEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* noteDidPassJumpThreeQuartersEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasCutEvent*>* noteWasCutEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasMissedEvent*>* noteWasMissedEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* noteDidStartDissolvingEvent_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* noteDidDissolveEvent_ = {}, GlobalNamespace::NoteData* noteData_ = {}, bool dissolving_ = {}, float uniformScale_ = {}) noexcept : noteMovement{noteMovement_}, noteTransform{noteTransform_}, didInitEvent{didInitEvent_}, noteDidStartJumpEvent{noteDidStartJumpEvent_}, noteDidFinishJumpEvent{noteDidFinishJumpEvent_}, noteDidPassJumpThreeQuartersEvent{noteDidPassJumpThreeQuartersEvent_}, noteWasCutEvent{noteWasCutEvent_}, noteWasMissedEvent{noteWasMissedEvent_}, noteDidStartDissolvingEvent{noteDidStartDissolvingEvent_}, noteDidDissolveEvent{noteDidDissolveEvent_}, noteData{noteData_}, dissolving{dissolving_}, uniformScale{uniformScale_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public ILazyCopyHashSet`1<INoteControllerDidInitEvent> get_didInitEvent()
    // Offset: 0x10C10A4
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerDidInitEvent*>* get_didInitEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidStartJumpEvent> get_noteDidStartJumpEvent()
    // Offset: 0x10C10AC
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* get_noteDidStartJumpEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidFinishJumpEvent> get_noteDidFinishJumpEvent()
    // Offset: 0x10C10B4
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* get_noteDidFinishJumpEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> get_noteDidPassJumpThreeQuartersEvent()
    // Offset: 0x10C10BC
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* get_noteDidPassJumpThreeQuartersEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteWasCutEvent> get_noteWasCutEvent()
    // Offset: 0x10C10C4
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasCutEvent*>* get_noteWasCutEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteWasMissedEvent> get_noteWasMissedEvent()
    // Offset: 0x10C10CC
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteWasMissedEvent*>* get_noteWasMissedEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> get_noteDidStartDissolvingEvent()
    // Offset: 0x10C10D4
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* get_noteDidStartDissolvingEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidDissolveEvent> get_noteDidDissolveEvent()
    // Offset: 0x10C10DC
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* get_noteDidDissolveEvent();
    // public UnityEngine.Transform get_noteTransform()
    // Offset: 0x10C10E4
    UnityEngine::Transform* get_noteTransform();
    // public UnityEngine.Quaternion get_worldRotation()
    // Offset: 0x10C10EC
    UnityEngine::Quaternion get_worldRotation();
    // public UnityEngine.Quaternion get_inverseWorldRotation()
    // Offset: 0x10C1138
    UnityEngine::Quaternion get_inverseWorldRotation();
    // public System.Single get_moveStartTime()
    // Offset: 0x10C1184
    float get_moveStartTime();
    // public System.Single get_moveDuration()
    // Offset: 0x10C11C8
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x10C120C
    float get_jumpDuration();
    // public UnityEngine.Vector3 get_jumpMoveVec()
    // Offset: 0x10C1250
    UnityEngine::Vector3 get_jumpMoveVec();
    // public UnityEngine.Vector3 get_beatPos()
    // Offset: 0x10C129C
    UnityEngine::Vector3 get_beatPos();
    // public UnityEngine.Vector3 get_jumpStartPos()
    // Offset: 0x10C12D8
    UnityEngine::Vector3 get_jumpStartPos();
    // public NoteData get_noteData()
    // Offset: 0x10C1324
    GlobalNamespace::NoteData* get_noteData();
    // public UnityEngine.Vector3 get_moveVec()
    // Offset: 0x10C132C
    UnityEngine::Vector3 get_moveVec();
    // public System.Single get_uniformScale()
    // Offset: 0x10C13F8
    float get_uniformScale();
    // public System.Void set_hide(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_hide(bool value);
    // public System.Boolean get_hide()
    // Offset: 0xFFFFFFFF
    bool get_hide();
    // public System.Void set_pause(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_pause(bool value);
    // protected System.Void Awake()
    // Offset: 0x10C1400
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x10C17D0
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x10C1BE8
    void Update();
    // public System.Void ManualUpdate()
    // Offset: 0x10C1BF4
    void ManualUpdate();
    // private System.Void HandleNoteDidStartJump()
    // Offset: 0x10C1CCC
    void HandleNoteDidStartJump();
    // private System.Void HandleNoteDidFinishJump()
    // Offset: 0x10C1E54
    void HandleNoteDidFinishJump();
    // private System.Void HandleNoteDidPassJumpThreeQuarters(NoteMovement noteMovement)
    // Offset: 0x10C1FE4
    void HandleNoteDidPassJumpThreeQuarters(GlobalNamespace::NoteMovement* noteMovement);
    // private System.Void HandleNoteDidPassMissedMarkerEvent()
    // Offset: 0x10C217C
    void HandleNoteDidPassMissedMarkerEvent();
    // protected System.Void NoteDidStartJump()
    // Offset: 0x10C2198
    void NoteDidStartJump();
    // protected System.Void NoteDidFinishJump()
    // Offset: 0x10C219C
    void NoteDidFinishJump();
    // protected System.Void NoteDidPassJumpThreeQuarters(NoteMovement noteMovement)
    // Offset: 0x10C21A0
    void NoteDidPassJumpThreeQuarters(GlobalNamespace::NoteMovement* noteMovement);
    // protected System.Void NoteDidPassMissedMarker()
    // Offset: 0x10C21A4
    void NoteDidPassMissedMarker();
    // protected System.Void NoteDidStartDissolving()
    // Offset: 0x10C21A8
    void NoteDidStartDissolving();
    // protected System.Void SendNoteWasMissedEvent()
    // Offset: 0x10C21AC
    void SendNoteWasMissedEvent();
    // protected System.Void SendNoteWasCutEvent(in NoteCutInfo noteCutInfo)
    // Offset: 0x10C2324
    void SendNoteWasCutEvent(GlobalNamespace::NoteCutInfo& noteCutInfo);
    // protected System.Void Init(NoteData noteData, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Single endRotation, System.Single uniformScale)
    // Offset: 0x10C24AC
    void Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float endRotation, float uniformScale);
    // private System.Collections.IEnumerator DissolveCoroutine(System.Single duration)
    // Offset: 0x10C291C
    System::Collections::IEnumerator* DissolveCoroutine(float duration);
    // public System.Void Dissolve(System.Single duration)
    // Offset: 0x10C29C8
    void Dissolve(float duration);
    // protected System.Void .ctor()
    // Offset: 0x10C2A2C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteController*, creationType>()));
    }
  }; // NoteController
  #pragma pack(pop)
  static check_size<sizeof(NoteController), 116 + sizeof(float)> __GlobalNamespace_NoteControllerSizeCheck;
  static_assert(sizeof(NoteController) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteController*, "", "NoteController");
