// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileSystemWatcher
  class FileSystemWatcher;
  // Forward declaring type: FileSystemEventArgs
  class FileSystemEventArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_Camera
  class SteamVR_Camera;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xBC
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_ExternalCamera
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR_ExternalCamera : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SteamVR_ExternalCamera::Config
    struct Config;
    // Size: 0x49
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: SteamVR_ExternalCamera/Config
    // [TokenAttribute] Offset: FFFFFFFF
    struct Config/*, public System::ValueType*/ {
      public:
      // public System.Single x
      // Size: 0x4
      // Offset: 0x0
      float x;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single y
      // Size: 0x4
      // Offset: 0x4
      float y;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single z
      // Size: 0x4
      // Offset: 0x8
      float z;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single rx
      // Size: 0x4
      // Offset: 0xC
      float rx;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single ry
      // Size: 0x4
      // Offset: 0x10
      float ry;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single rz
      // Size: 0x4
      // Offset: 0x14
      float rz;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single fov
      // Size: 0x4
      // Offset: 0x18
      float fov;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single near
      // Size: 0x4
      // Offset: 0x1C
      float near;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single far
      // Size: 0x4
      // Offset: 0x20
      float far;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single sceneResolutionScale
      // Size: 0x4
      // Offset: 0x24
      float sceneResolutionScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single frameSkip
      // Size: 0x4
      // Offset: 0x28
      float frameSkip;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single nearOffset
      // Size: 0x4
      // Offset: 0x2C
      float nearOffset;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single farOffset
      // Size: 0x4
      // Offset: 0x30
      float farOffset;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single hmdOffset
      // Size: 0x4
      // Offset: 0x34
      float hmdOffset;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single r
      // Size: 0x4
      // Offset: 0x38
      float r;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single g
      // Size: 0x4
      // Offset: 0x3C
      float g;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single b
      // Size: 0x4
      // Offset: 0x40
      float b;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single a
      // Size: 0x4
      // Offset: 0x44
      float a;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Boolean disableStandardAssets
      // Size: 0x1
      // Offset: 0x48
      bool disableStandardAssets;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Creating value type constructor for type: Config
      constexpr Config(float x_ = {}, float y_ = {}, float z_ = {}, float rx_ = {}, float ry_ = {}, float rz_ = {}, float fov_ = {}, float near_ = {}, float far_ = {}, float sceneResolutionScale_ = {}, float frameSkip_ = {}, float nearOffset_ = {}, float farOffset_ = {}, float hmdOffset_ = {}, float r_ = {}, float g_ = {}, float b_ = {}, float a_ = {}, bool disableStandardAssets_ = {}) noexcept : x{x_}, y{y_}, z{z_}, rx{rx_}, ry{ry_}, rz{rz_}, fov{fov_}, near{near_}, far{far_}, sceneResolutionScale{sceneResolutionScale_}, frameSkip{frameSkip_}, nearOffset{nearOffset_}, farOffset{farOffset_}, hmdOffset{hmdOffset_}, r{r_}, g{g_}, b{b_}, a{a_}, disableStandardAssets{disableStandardAssets_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field: public System.Single x
      float _get_x();
      // Set instance field: public System.Single x
      void _set_x(float value);
      // Get instance field: public System.Single y
      float _get_y();
      // Set instance field: public System.Single y
      void _set_y(float value);
      // Get instance field: public System.Single z
      float _get_z();
      // Set instance field: public System.Single z
      void _set_z(float value);
      // Get instance field: public System.Single rx
      float _get_rx();
      // Set instance field: public System.Single rx
      void _set_rx(float value);
      // Get instance field: public System.Single ry
      float _get_ry();
      // Set instance field: public System.Single ry
      void _set_ry(float value);
      // Get instance field: public System.Single rz
      float _get_rz();
      // Set instance field: public System.Single rz
      void _set_rz(float value);
      // Get instance field: public System.Single fov
      float _get_fov();
      // Set instance field: public System.Single fov
      void _set_fov(float value);
      // Get instance field: public System.Single near
      float _get_near();
      // Set instance field: public System.Single near
      void _set_near(float value);
      // Get instance field: public System.Single far
      float _get_far();
      // Set instance field: public System.Single far
      void _set_far(float value);
      // Get instance field: public System.Single sceneResolutionScale
      float _get_sceneResolutionScale();
      // Set instance field: public System.Single sceneResolutionScale
      void _set_sceneResolutionScale(float value);
      // Get instance field: public System.Single frameSkip
      float _get_frameSkip();
      // Set instance field: public System.Single frameSkip
      void _set_frameSkip(float value);
      // Get instance field: public System.Single nearOffset
      float _get_nearOffset();
      // Set instance field: public System.Single nearOffset
      void _set_nearOffset(float value);
      // Get instance field: public System.Single farOffset
      float _get_farOffset();
      // Set instance field: public System.Single farOffset
      void _set_farOffset(float value);
      // Get instance field: public System.Single hmdOffset
      float _get_hmdOffset();
      // Set instance field: public System.Single hmdOffset
      void _set_hmdOffset(float value);
      // Get instance field: public System.Single r
      float _get_r();
      // Set instance field: public System.Single r
      void _set_r(float value);
      // Get instance field: public System.Single g
      float _get_g();
      // Set instance field: public System.Single g
      void _set_g(float value);
      // Get instance field: public System.Single b
      float _get_b();
      // Set instance field: public System.Single b
      void _set_b(float value);
      // Get instance field: public System.Single a
      float _get_a();
      // Set instance field: public System.Single a
      void _set_a(float value);
      // Get instance field: public System.Boolean disableStandardAssets
      bool _get_disableStandardAssets();
      // Set instance field: public System.Boolean disableStandardAssets
      void _set_disableStandardAssets(bool value);
    }; // SteamVR_ExternalCamera/Config
    #pragma pack(pop)
    static check_size<sizeof(SteamVR_ExternalCamera::Config), 72 + sizeof(bool)> __GlobalNamespace_SteamVR_ExternalCamera_ConfigSizeCheck;
    static_assert(sizeof(SteamVR_ExternalCamera::Config) == 0x49);
    // public SteamVR_ExternalCamera/Config config
    // Size: 0x49
    // Offset: 0x18
    GlobalNamespace::SteamVR_ExternalCamera::Config config;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SteamVR_ExternalCamera::Config) == 0x49);
    // Padding between fields: config and: configPath
    char __padding0[0x7] = {};
    // public System.String configPath
    // Size: 0x8
    // Offset: 0x68
    ::Il2CppString* configPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.IO.FileSystemWatcher watcher
    // Size: 0x8
    // Offset: 0x70
    System::IO::FileSystemWatcher* watcher;
    // Field size check
    static_assert(sizeof(System::IO::FileSystemWatcher*) == 0x8);
    // private UnityEngine.Camera cam
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.GameObject clipQuad
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::GameObject* clipQuad;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material clipMaterial
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::Material* clipMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material colorMat
    // Size: 0x8
    // Offset: 0x98
    UnityEngine::Material* colorMat;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material alphaMat
    // Size: 0x8
    // Offset: 0xA0
    UnityEngine::Material* alphaMat;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Camera[] cameras
    // Size: 0x8
    // Offset: 0xA8
    ::Array<UnityEngine::Camera*>* cameras;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Camera*>*) == 0x8);
    // private UnityEngine.Rect[] cameraRects
    // Size: 0x8
    // Offset: 0xB0
    ::Array<UnityEngine::Rect>* cameraRects;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Rect>*) == 0x8);
    // private System.Single sceneResolutionScale
    // Size: 0x4
    // Offset: 0xB8
    float sceneResolutionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SteamVR_ExternalCamera
    SteamVR_ExternalCamera(GlobalNamespace::SteamVR_ExternalCamera::Config config_ = {}, ::Il2CppString* configPath_ = {}, System::IO::FileSystemWatcher* watcher_ = {}, UnityEngine::Camera* cam_ = {}, UnityEngine::Transform* target_ = {}, UnityEngine::GameObject* clipQuad_ = {}, UnityEngine::Material* clipMaterial_ = {}, UnityEngine::Material* colorMat_ = {}, UnityEngine::Material* alphaMat_ = {}, ::Array<UnityEngine::Camera*>* cameras_ = {}, ::Array<UnityEngine::Rect>* cameraRects_ = {}, float sceneResolutionScale_ = {}) noexcept : config{config_}, configPath{configPath_}, watcher{watcher_}, cam{cam_}, target{target_}, clipQuad{clipQuad_}, clipMaterial{clipMaterial_}, colorMat{colorMat_}, alphaMat{alphaMat_}, cameras{cameras_}, cameraRects{cameraRects_}, sceneResolutionScale{sceneResolutionScale_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field: public SteamVR_ExternalCamera/Config config
    GlobalNamespace::SteamVR_ExternalCamera::Config _get_config();
    // Set instance field: public SteamVR_ExternalCamera/Config config
    void _set_config(GlobalNamespace::SteamVR_ExternalCamera::Config value);
    // Get instance field: public System.String configPath
    ::Il2CppString* _get_configPath();
    // Set instance field: public System.String configPath
    void _set_configPath(::Il2CppString* value);
    // Get instance field: private System.IO.FileSystemWatcher watcher
    System::IO::FileSystemWatcher* _get_watcher();
    // Set instance field: private System.IO.FileSystemWatcher watcher
    void _set_watcher(System::IO::FileSystemWatcher* value);
    // Get instance field: private UnityEngine.Camera cam
    UnityEngine::Camera* _get_cam();
    // Set instance field: private UnityEngine.Camera cam
    void _set_cam(UnityEngine::Camera* value);
    // Get instance field: private UnityEngine.Transform target
    UnityEngine::Transform* _get_target();
    // Set instance field: private UnityEngine.Transform target
    void _set_target(UnityEngine::Transform* value);
    // Get instance field: private UnityEngine.GameObject clipQuad
    UnityEngine::GameObject* _get_clipQuad();
    // Set instance field: private UnityEngine.GameObject clipQuad
    void _set_clipQuad(UnityEngine::GameObject* value);
    // Get instance field: private UnityEngine.Material clipMaterial
    UnityEngine::Material* _get_clipMaterial();
    // Set instance field: private UnityEngine.Material clipMaterial
    void _set_clipMaterial(UnityEngine::Material* value);
    // Get instance field: private UnityEngine.Material colorMat
    UnityEngine::Material* _get_colorMat();
    // Set instance field: private UnityEngine.Material colorMat
    void _set_colorMat(UnityEngine::Material* value);
    // Get instance field: private UnityEngine.Material alphaMat
    UnityEngine::Material* _get_alphaMat();
    // Set instance field: private UnityEngine.Material alphaMat
    void _set_alphaMat(UnityEngine::Material* value);
    // Get instance field: private UnityEngine.Camera[] cameras
    ::Array<UnityEngine::Camera*>* _get_cameras();
    // Set instance field: private UnityEngine.Camera[] cameras
    void _set_cameras(::Array<UnityEngine::Camera*>* value);
    // Get instance field: private UnityEngine.Rect[] cameraRects
    ::Array<UnityEngine::Rect>* _get_cameraRects();
    // Set instance field: private UnityEngine.Rect[] cameraRects
    void _set_cameraRects(::Array<UnityEngine::Rect>* value);
    // Get instance field: private System.Single sceneResolutionScale
    float _get_sceneResolutionScale();
    // Set instance field: private System.Single sceneResolutionScale
    void _set_sceneResolutionScale(float value);
    // public System.Void ReadConfig()
    // Offset: 0x114BDF8
    void ReadConfig();
    // private System.Void OnChanged(System.Object source, System.IO.FileSystemEventArgs e)
    // Offset: 0x114C700
    void OnChanged(::Il2CppObject* source, System::IO::FileSystemEventArgs* e);
    // public System.Void AttachToCamera(SteamVR_Camera vrcam)
    // Offset: 0x114C704
    void AttachToCamera(GlobalNamespace::SteamVR_Camera* vrcam);
    // public System.Single GetTargetDistance()
    // Offset: 0x114CCB4
    float GetTargetDistance();
    // public System.Void RenderNear()
    // Offset: 0x114CF60
    void RenderNear();
    // public System.Void RenderFar()
    // Offset: 0x114D6B8
    void RenderFar();
    // private System.Void OnGUI()
    // Offset: 0x114D7D8
    void OnGUI();
    // private System.Void OnEnable()
    // Offset: 0x114D7DC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x114DA2C
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x114DB68
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_ExternalCamera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_ExternalCamera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_ExternalCamera*, creationType>()));
    }
  }; // SteamVR_ExternalCamera
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_ExternalCamera), 184 + sizeof(float)> __GlobalNamespace_SteamVR_ExternalCameraSizeCheck;
  static_assert(sizeof(SteamVR_ExternalCamera) == 0xBC);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_ExternalCamera*, "", "SteamVR_ExternalCamera");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_ExternalCamera::Config, "", "SteamVR_ExternalCamera/Config");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::ReadConfig
// Il2CppName: ReadConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::ReadConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "ReadConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::OnChanged
// Il2CppName: OnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)(::Il2CppObject*, System::IO::FileSystemEventArgs*)>(&GlobalNamespace::SteamVR_ExternalCamera::OnChanged)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System.IO", "FileSystemEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "OnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera
// Il2CppName: AttachToCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)(GlobalNamespace::SteamVR_Camera*)>(&GlobalNamespace::SteamVR_ExternalCamera::AttachToCamera)> {
  static const MethodInfo* get() {
    static auto* vrcam = &::il2cpp_utils::GetClassFromName("", "SteamVR_Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "AttachToCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vrcam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance
// Il2CppName: GetTargetDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::GetTargetDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "GetTargetDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::RenderNear
// Il2CppName: RenderNear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::RenderNear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "RenderNear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::RenderFar
// Il2CppName: RenderFar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::RenderFar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "RenderFar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR_ExternalCamera::*)()>(&GlobalNamespace::SteamVR_ExternalCamera::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR_ExternalCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR_ExternalCamera::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
