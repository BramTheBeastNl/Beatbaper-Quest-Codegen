// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRGrabber
  class OVRGrabber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: OVRGrabbable
  class OVRGrabbable : public UnityEngine::MonoBehaviour {
    public:
    // protected System.Boolean m_allowOffhandGrab
    // Size: 0x1
    // Offset: 0x18
    bool m_allowOffhandGrab;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_snapPosition
    // Size: 0x1
    // Offset: 0x19
    bool m_snapPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_snapOrientation
    // Size: 0x1
    // Offset: 0x1A
    bool m_snapOrientation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_snapOrientation and: m_snapOffset
    char __padding2[0x5] = {};
    // protected UnityEngine.Transform m_snapOffset
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* m_snapOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.Collider[] m_grabPoints
    // Size: 0x8
    // Offset: 0x28
    ::Array<UnityEngine::Collider*>* m_grabPoints;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Collider*>*) == 0x8);
    // protected System.Boolean m_grabbedKinematic
    // Size: 0x1
    // Offset: 0x30
    bool m_grabbedKinematic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_grabbedKinematic and: m_grabbedCollider
    char __padding5[0x7] = {};
    // protected UnityEngine.Collider m_grabbedCollider
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Collider* m_grabbedCollider;
    // Field size check
    static_assert(sizeof(UnityEngine::Collider*) == 0x8);
    // protected OVRGrabber m_grabbedBy
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::OVRGrabber* m_grabbedBy;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRGrabber*) == 0x8);
    // Creating value type constructor for type: OVRGrabbable
    OVRGrabbable(bool m_allowOffhandGrab_ = {}, bool m_snapPosition_ = {}, bool m_snapOrientation_ = {}, UnityEngine::Transform* m_snapOffset_ = {}, ::Array<UnityEngine::Collider*>* m_grabPoints_ = {}, bool m_grabbedKinematic_ = {}, UnityEngine::Collider* m_grabbedCollider_ = {}, GlobalNamespace::OVRGrabber* m_grabbedBy_ = {}) noexcept : m_allowOffhandGrab{m_allowOffhandGrab_}, m_snapPosition{m_snapPosition_}, m_snapOrientation{m_snapOrientation_}, m_snapOffset{m_snapOffset_}, m_grabPoints{m_grabPoints_}, m_grabbedKinematic{m_grabbedKinematic_}, m_grabbedCollider{m_grabbedCollider_}, m_grabbedBy{m_grabbedBy_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Boolean get_allowOffhandGrab()
    // Offset: 0x150D188
    bool get_allowOffhandGrab();
    // public System.Boolean get_isGrabbed()
    // Offset: 0x150D190
    bool get_isGrabbed();
    // public System.Boolean get_snapPosition()
    // Offset: 0x150D200
    bool get_snapPosition();
    // public System.Boolean get_snapOrientation()
    // Offset: 0x150D208
    bool get_snapOrientation();
    // public UnityEngine.Transform get_snapOffset()
    // Offset: 0x150D210
    UnityEngine::Transform* get_snapOffset();
    // public OVRGrabber get_grabbedBy()
    // Offset: 0x150D218
    GlobalNamespace::OVRGrabber* get_grabbedBy();
    // public UnityEngine.Transform get_grabbedTransform()
    // Offset: 0x150D220
    UnityEngine::Transform* get_grabbedTransform();
    // public UnityEngine.Rigidbody get_grabbedRigidbody()
    // Offset: 0x150D23C
    UnityEngine::Rigidbody* get_grabbedRigidbody();
    // public UnityEngine.Collider[] get_grabPoints()
    // Offset: 0x150D258
    ::Array<UnityEngine::Collider*>* get_grabPoints();
    // public System.Void GrabBegin(OVRGrabber hand, UnityEngine.Collider grabPoint)
    // Offset: 0x150D260
    void GrabBegin(GlobalNamespace::OVRGrabber* hand, UnityEngine::Collider* grabPoint);
    // public System.Void GrabEnd(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
    // Offset: 0x150D2E4
    void GrabEnd(UnityEngine::Vector3 linearVelocity, UnityEngine::Vector3 angularVelocity);
    // private System.Void Awake()
    // Offset: 0x150D3C0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x150D504
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x150D570
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x150D6CC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRGrabbable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRGrabbable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRGrabbable*, creationType>()));
    }
  }; // OVRGrabbable
  #pragma pack(pop)
  static check_size<sizeof(OVRGrabbable), 64 + sizeof(GlobalNamespace::OVRGrabber*)> __GlobalNamespace_OVRGrabbableSizeCheck;
  static_assert(sizeof(OVRGrabbable) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRGrabbable*, "", "OVRGrabbable");
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_allowOffhandGrab
// Il2CppName: get_allowOffhandGrab
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_isGrabbed
// Il2CppName: get_isGrabbed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_snapPosition
// Il2CppName: get_snapPosition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_snapOrientation
// Il2CppName: get_snapOrientation
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_snapOffset
// Il2CppName: get_snapOffset
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_grabbedBy
// Il2CppName: get_grabbedBy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_grabbedTransform
// Il2CppName: get_grabbedTransform
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_grabbedRigidbody
// Il2CppName: get_grabbedRigidbody
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::get_grabPoints
// Il2CppName: get_grabPoints
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::GrabBegin
// Il2CppName: GrabBegin
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::GrabEnd
// Il2CppName: GrabEnd
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::Awake
// Il2CppName: Awake
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::Start
// Il2CppName: Start
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::OnDestroy
// Il2CppName: OnDestroy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::OVRGrabbable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
