// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AutomaticSFXVolume
#include "GlobalNamespace/AutomaticSFXVolume.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: AutomaticSFXVolume/InitData
  class AutomaticSFXVolume::InitData : public ::Il2CppObject {
    public:
    // public readonly System.Single volumeOffset
    // Size: 0x4
    // Offset: 0x10
    float volumeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single maxVolume
    // Size: 0x4
    // Offset: 0x14
    float maxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Boolean adaptiveSfx
    // Size: 0x1
    // Offset: 0x18
    bool adaptiveSfx;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: InitData
    InitData(float volumeOffset_ = {}, float maxVolume_ = {}, bool adaptiveSfx_ = {}) noexcept : volumeOffset{volumeOffset_}, maxVolume{maxVolume_}, adaptiveSfx{adaptiveSfx_} {}
    // public System.Void .ctor(System.Single volumeOffset, System.Boolean adaptiveSfx, System.Single maxVolume)
    // Offset: 0x113384C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AutomaticSFXVolume::InitData* New_ctor(float volumeOffset, bool adaptiveSfx, float maxVolume) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::InitData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AutomaticSFXVolume::InitData*, creationType>(volumeOffset, adaptiveSfx, maxVolume)));
    }
  }; // AutomaticSFXVolume/InitData
  #pragma pack(pop)
  static check_size<sizeof(AutomaticSFXVolume::InitData), 24 + sizeof(bool)> __GlobalNamespace_AutomaticSFXVolume_InitDataSizeCheck;
  static_assert(sizeof(AutomaticSFXVolume::InitData) == 0x19);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AutomaticSFXVolume::InitData*, "", "AutomaticSFXVolume/InitData");
// Writing MetadataGetter for method: AutomaticSFXVolume::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::InitData::*)(float, bool, float)>(&AutomaticSFXVolume::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::InitData::*)(float, bool, float)>(&AutomaticSFXVolume::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
