// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: IReadonlyBeatmapData
  class IReadonlyBeatmapData;
  // Forward declaring type: IBeatmapObjectSpawnController
  class IBeatmapObjectSpawnController;
  // Forward declaring type: PlayerTransforms
  class PlayerTransforms;
  // Forward declaring type: BeatmapObjectAvoidanceYOffsetEvaluator
  class BeatmapObjectAvoidanceYOffsetEvaluator;
  // Forward declaring type: BeatmapObjectAvoidancePathEvaluator
  class BeatmapObjectAvoidancePathEvaluator;
  // Forward declaring type: BeatmapObjectAvoidanceTiltEvaluator
  class BeatmapObjectAvoidanceTiltEvaluator;
  // Forward declaring type: BezierSplineEvaluator
  class BezierSplineEvaluator;
  // Forward declaring type: OffsetDirection
  struct OffsetDirection;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectsAvoidance
  class BeatmapObjectsAvoidance : public UnityEngine::MonoBehaviour {
    public:
    // [HeaderAttribute] Offset: 0xE12FFC
    // private System.Single _zOffset
    // Size: 0x4
    // Offset: 0x18
    float zOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _yOffset
    // Size: 0x4
    // Offset: 0x1C
    float yOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xE13058
    // private UnityEngine.Vector2 _gravity
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Vector2 gravity;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [HeaderAttribute] Offset: 0xE130A4
    // private UnityEngine.Transform _towardsPlayerWrapperTransform
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* towardsPlayerWrapperTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [InjectAttribute] Offset: 0xE130F0
    // private readonly IAudioTimeSource _audioTimeSource
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::IAudioTimeSource* audioTimeSource;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAudioTimeSource*) == 0x8);
    // [InjectAttribute] Offset: 0xE13100
    // private readonly IReadonlyBeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::IReadonlyBeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IReadonlyBeatmapData*) == 0x8);
    // [InjectAttribute] Offset: 0xE13110
    // private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::IBeatmapObjectSpawnController* beatmapObjectSpawnController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapObjectSpawnController*) == 0x8);
    // [InjectAttribute] Offset: 0xE13120
    // private readonly PlayerTransforms _playerTransforms
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::PlayerTransforms* playerTransforms;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerTransforms*) == 0x8);
    // private BeatmapObjectAvoidanceYOffsetEvaluator _avoidanceYOffsetEvaluatorProvider
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator* avoidanceYOffsetEvaluatorProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator*) == 0x8);
    // private BeatmapObjectAvoidancePathEvaluator _pathEvaluator
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::BeatmapObjectAvoidancePathEvaluator* pathEvaluator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectAvoidancePathEvaluator*) == 0x8);
    // private BeatmapObjectAvoidanceTiltEvaluator _tiltEvaluator
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator* tiltEvaluator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator*) == 0x8);
    // private BezierSplineEvaluator _pathBezierSplineEvaluator
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::BezierSplineEvaluator* pathBezierSplineEvaluator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BezierSplineEvaluator*) == 0x8);
    // private BezierSplineEvaluator _accelerationBezierSplineEvaluator
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::BezierSplineEvaluator* accelerationBezierSplineEvaluator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BezierSplineEvaluator*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: BeatmapObjectsAvoidance
    BeatmapObjectsAvoidance(float zOffset_ = {}, float yOffset_ = {}, UnityEngine::Vector2 gravity_ = {}, UnityEngine::Transform* towardsPlayerWrapperTransform_ = {}, GlobalNamespace::IAudioTimeSource* audioTimeSource_ = {}, GlobalNamespace::IReadonlyBeatmapData* beatmapData_ = {}, GlobalNamespace::IBeatmapObjectSpawnController* beatmapObjectSpawnController_ = {}, GlobalNamespace::PlayerTransforms* playerTransforms_ = {}, GlobalNamespace::BeatmapObjectAvoidanceYOffsetEvaluator* avoidanceYOffsetEvaluatorProvider_ = {}, GlobalNamespace::BeatmapObjectAvoidancePathEvaluator* pathEvaluator_ = {}, GlobalNamespace::BeatmapObjectAvoidanceTiltEvaluator* tiltEvaluator_ = {}, GlobalNamespace::BezierSplineEvaluator* pathBezierSplineEvaluator_ = {}, GlobalNamespace::BezierSplineEvaluator* accelerationBezierSplineEvaluator_ = {}, UnityEngine::Transform* transform_ = {}) noexcept : zOffset{zOffset_}, yOffset{yOffset_}, gravity{gravity_}, towardsPlayerWrapperTransform{towardsPlayerWrapperTransform_}, audioTimeSource{audioTimeSource_}, beatmapData{beatmapData_}, beatmapObjectSpawnController{beatmapObjectSpawnController_}, playerTransforms{playerTransforms_}, avoidanceYOffsetEvaluatorProvider{avoidanceYOffsetEvaluatorProvider_}, pathEvaluator{pathEvaluator_}, tiltEvaluator{tiltEvaluator_}, pathBezierSplineEvaluator{pathBezierSplineEvaluator_}, accelerationBezierSplineEvaluator{accelerationBezierSplineEvaluator_}, transform{transform_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x110BE30
    void Awake();
    // protected System.Void Start()
    // Offset: 0x110BE58
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x110C35C
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x110C454
    void Update();
    // private System.Void SetupAndRun()
    // Offset: 0x110BFD8
    void SetupAndRun();
    // private System.Boolean BuildAnimationCurvePath()
    // Offset: 0x110C628
    bool BuildAnimationCurvePath();
    // private System.Void AdjustPositionWithOffsetDirection(ref UnityEngine.Vector2 position, System.Int32 lineIndex, OffsetDirection offsetDirection)
    // Offset: 0x110CBF8
    void AdjustPositionWithOffsetDirection(UnityEngine::Vector2& position, int lineIndex, GlobalNamespace::OffsetDirection offsetDirection);
    // private System.Void HandleBeatmapObjectSpawnControllerDidInit()
    // Offset: 0x110D6F8
    void HandleBeatmapObjectSpawnControllerDidInit();
    // public System.Void .ctor()
    // Offset: 0x110D6FC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectsAvoidance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsAvoidance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectsAvoidance*, creationType>()));
    }
  }; // BeatmapObjectsAvoidance
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectsAvoidance), 120 + sizeof(UnityEngine::Transform*)> __GlobalNamespace_BeatmapObjectsAvoidanceSizeCheck;
  static_assert(sizeof(BeatmapObjectsAvoidance) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectsAvoidance*, "", "BeatmapObjectsAvoidance");
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::Awake
// Il2CppName: Awake
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::Start
// Il2CppName: Start
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::OnDestroy
// Il2CppName: OnDestroy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::Update
// Il2CppName: Update
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::SetupAndRun
// Il2CppName: SetupAndRun
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::BuildAnimationCurvePath
// Il2CppName: BuildAnimationCurvePath
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::AdjustPositionWithOffsetDirection
// Il2CppName: AdjustPositionWithOffsetDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::HandleBeatmapObjectSpawnControllerDidInit
// Il2CppName: HandleBeatmapObjectSpawnControllerDidInit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsAvoidance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
