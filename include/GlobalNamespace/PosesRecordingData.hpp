// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PosesRecordingData
  // [TokenAttribute] Offset: FFFFFFFF
  class PosesRecordingData : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::PosesRecordingData::Pose
    struct Pose;
    // Nested type: GlobalNamespace::PosesRecordingData::TransformsKeyframe
    class TransformsKeyframe;
    // public readonly System.String[] objectIds
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppString*>* objectIds;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // public readonly System.Collections.Generic.List`1<PosesRecordingData/TransformsKeyframe> keyframes
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<GlobalNamespace::PosesRecordingData::TransformsKeyframe*>* keyframes;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::PosesRecordingData::TransformsKeyframe*>*) == 0x8);
    // Creating value type constructor for type: PosesRecordingData
    PosesRecordingData(::Array<::Il2CppString*>* objectIds_ = {}, System::Collections::Generic::List_1<GlobalNamespace::PosesRecordingData::TransformsKeyframe*>* keyframes_ = {}) noexcept : objectIds{objectIds_}, keyframes{keyframes_} {}
    // Get instance field reference: public readonly System.String[] objectIds
    ::Array<::Il2CppString*>*& dyn_objectIds();
    // Get instance field reference: public readonly System.Collections.Generic.List`1<PosesRecordingData/TransformsKeyframe> keyframes
    System::Collections::Generic::List_1<GlobalNamespace::PosesRecordingData::TransformsKeyframe*>*& dyn_keyframes();
    // public System.Void .ctor(System.String[] objectIds)
    // Offset: 0x11AE11C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PosesRecordingData* New_ctor(::Array<::Il2CppString*>* objectIds) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosesRecordingData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PosesRecordingData*, creationType>(objectIds)));
    }
    // public System.Void .ctor(System.String[] objectIds, System.Collections.Generic.List`1<PosesRecordingData/TransformsKeyframe> keyframes)
    // Offset: 0x11AE464
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PosesRecordingData* New_ctor(::Array<::Il2CppString*>* objectIds, System::Collections::Generic::List_1<GlobalNamespace::PosesRecordingData::TransformsKeyframe*>* keyframes) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosesRecordingData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PosesRecordingData*, creationType>(objectIds, keyframes)));
    }
    // public System.Void AddKeyframe(PosesRecordingData/TransformsKeyframe keyframe)
    // Offset: 0x11AE350
    void AddKeyframe(GlobalNamespace::PosesRecordingData::TransformsKeyframe* keyframe);
  }; // PosesRecordingData
  #pragma pack(pop)
  static check_size<sizeof(PosesRecordingData), 24 + sizeof(System::Collections::Generic::List_1<GlobalNamespace::PosesRecordingData::TransformsKeyframe*>*)> __GlobalNamespace_PosesRecordingDataSizeCheck;
  static_assert(sizeof(PosesRecordingData) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PosesRecordingData*, "", "PosesRecordingData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingData::AddKeyframe
// Il2CppName: AddKeyframe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PosesRecordingData::*)(GlobalNamespace::PosesRecordingData::TransformsKeyframe*)>(&GlobalNamespace::PosesRecordingData::AddKeyframe)> {
  static const MethodInfo* get() {
    static auto* keyframe = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/TransformsKeyframe")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingData*), "AddKeyframe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyframe});
  }
};
