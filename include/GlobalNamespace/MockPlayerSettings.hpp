// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayerMovementType
#include "GlobalNamespace/MockPlayerMovementType.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayerSettings
  class MockPlayerSettings : public ::Il2CppObject {
    public:
    // private System.String _userName
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _userId
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _sortIndex
    // Size: 0x4
    // Offset: 0x20
    int sortIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _latency
    // Size: 0x4
    // Offset: 0x24
    float latency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _autoConnect
    // Size: 0x1
    // Offset: 0x28
    bool autoConnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _inactiveByDefault
    // Size: 0x1
    // Offset: 0x29
    bool inactiveByDefault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inactiveByDefault and: movementType
    char __padding5[0x2] = {};
    // private MockPlayerMovementType _movementType
    // Size: 0x4
    // Offset: 0x2C
    GlobalNamespace::MockPlayerMovementType movementType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockPlayerMovementType) == 0x4);
    // private System.String _recodingFile
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* recodingFile;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Single _aiCubeHitChance
    // Size: 0x4
    // Offset: 0x38
    float aiCubeHitChance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0xE1DA40
    // private System.Boolean _leftHanded
    // Size: 0x1
    // Offset: 0x3C
    bool leftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftHanded and: saberAColor
    char __padding9[0x3] = {};
    // private UnityEngine.Color _saberAColor
    // Size: 0x10
    // Offset: 0x40
    UnityEngine::Color saberAColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _saberBColor
    // Size: 0x10
    // Offset: 0x50
    UnityEngine::Color saberBColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _obstaclesColor
    // Size: 0x10
    // Offset: 0x60
    UnityEngine::Color obstaclesColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Creating value type constructor for type: MockPlayerSettings
    MockPlayerSettings(::Il2CppString* userName_ = {}, ::Il2CppString* userId_ = {}, int sortIndex_ = {}, float latency_ = {}, bool autoConnect_ = {}, bool inactiveByDefault_ = {}, GlobalNamespace::MockPlayerMovementType movementType_ = {}, ::Il2CppString* recodingFile_ = {}, float aiCubeHitChance_ = {}, bool leftHanded_ = {}, UnityEngine::Color saberAColor_ = {}, UnityEngine::Color saberBColor_ = {}, UnityEngine::Color obstaclesColor_ = {}) noexcept : userName{userName_}, userId{userId_}, sortIndex{sortIndex_}, latency{latency_}, autoConnect{autoConnect_}, inactiveByDefault{inactiveByDefault_}, movementType{movementType_}, recodingFile{recodingFile_}, aiCubeHitChance{aiCubeHitChance_}, leftHanded{leftHanded_}, saberAColor{saberAColor_}, saberBColor{saberBColor_}, obstaclesColor{obstaclesColor_} {}
    // public System.String get_userName()
    // Offset: 0x113C730
    ::Il2CppString* get_userName();
    // public System.Void set_userName(System.String value)
    // Offset: 0x113C738
    void set_userName(::Il2CppString* value);
    // public System.String get_userId()
    // Offset: 0x113C740
    ::Il2CppString* get_userId();
    // public System.Void set_userId(System.String value)
    // Offset: 0x113C748
    void set_userId(::Il2CppString* value);
    // public System.Int32 get_sortIndex()
    // Offset: 0x113C750
    int get_sortIndex();
    // public System.Void set_sortIndex(System.Int32 value)
    // Offset: 0x113C758
    void set_sortIndex(int value);
    // public System.Single get_latency()
    // Offset: 0x113C760
    float get_latency();
    // public System.Void set_latency(System.Single value)
    // Offset: 0x113C768
    void set_latency(float value);
    // public System.Boolean get_autoConnect()
    // Offset: 0x113C770
    bool get_autoConnect();
    // public System.Void set_autoConnect(System.Boolean value)
    // Offset: 0x113C778
    void set_autoConnect(bool value);
    // public System.Boolean get_inactiveByDefault()
    // Offset: 0x113C784
    bool get_inactiveByDefault();
    // public System.Void set_inactiveByDefault(System.Boolean value)
    // Offset: 0x113C78C
    void set_inactiveByDefault(bool value);
    // public MockPlayerMovementType get_movementType()
    // Offset: 0x113C798
    GlobalNamespace::MockPlayerMovementType get_movementType();
    // public System.Void set_movementType(MockPlayerMovementType value)
    // Offset: 0x113C7A0
    void set_movementType(GlobalNamespace::MockPlayerMovementType value);
    // public System.String get_recodingFile()
    // Offset: 0x113C7A8
    ::Il2CppString* get_recodingFile();
    // public System.Void set_recodingFile(System.String value)
    // Offset: 0x113C7B0
    void set_recodingFile(::Il2CppString* value);
    // public System.Single get_aiCubeHitChance()
    // Offset: 0x113C7B8
    float get_aiCubeHitChance();
    // public System.Void set_aiCubeHitChance(System.Single value)
    // Offset: 0x113C7C0
    void set_aiCubeHitChance(float value);
    // public System.Boolean get_leftHanded()
    // Offset: 0x113C7C8
    bool get_leftHanded();
    // public System.Void set_leftHanded(System.Boolean value)
    // Offset: 0x113C7D0
    void set_leftHanded(bool value);
    // public UnityEngine.Color get_saberAColor()
    // Offset: 0x113C7DC
    UnityEngine::Color get_saberAColor();
    // public System.Void set_saberAColor(UnityEngine.Color value)
    // Offset: 0x113C7E8
    void set_saberAColor(UnityEngine::Color value);
    // public UnityEngine.Color get_saberBColor()
    // Offset: 0x113C7F4
    UnityEngine::Color get_saberBColor();
    // public System.Void set_saberBColor(UnityEngine.Color value)
    // Offset: 0x113C800
    void set_saberBColor(UnityEngine::Color value);
    // public UnityEngine.Color get_obstaclesColor()
    // Offset: 0x113C80C
    UnityEngine::Color get_obstaclesColor();
    // public System.Void set_obstaclesColor(UnityEngine.Color value)
    // Offset: 0x113C818
    void set_obstaclesColor(UnityEngine::Color value);
    // public System.Void .ctor()
    // Offset: 0x113C824
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayerSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayerSettings*, creationType>()));
    }
  }; // MockPlayerSettings
  #pragma pack(pop)
  static check_size<sizeof(MockPlayerSettings), 96 + sizeof(UnityEngine::Color)> __GlobalNamespace_MockPlayerSettingsSizeCheck;
  static_assert(sizeof(MockPlayerSettings) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockPlayerSettings*, "", "MockPlayerSettings");
