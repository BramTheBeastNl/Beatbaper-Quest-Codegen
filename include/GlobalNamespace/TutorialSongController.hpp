// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: Signal
  class Signal;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: BeatmapObjectCallbackController
  class BeatmapObjectCallbackController;
  // Forward declaring type: BeatmapData
  class BeatmapData;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: TutorialSongController
  class TutorialSongController : public GlobalNamespace::SongController {
    public:
    // Nested type: GlobalNamespace::TutorialSongController::InitData
    class InitData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialObjectSpawnData
    class TutorialObjectSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialJumpingNoteSpawnData
    class TutorialJumpingNoteSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData
    class TutorialBasicNoteSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData
    class TutorialBombNoteSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData
    class TutorialObstacleSpawnData;
    // private AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x20
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Int32 _startWaitTimeInBeats
    // Offset: 0x28
    int startWaitTimeInBeats;
    // private System.Int32 _numberOfBeatsToSnap
    // Offset: 0x2C
    int numberOfBeatsToSnap;
    // private System.Int32 _obstacleDurationInBeats
    // Offset: 0x30
    int obstacleDurationInBeats;
    // private Signal _noteCuttingTutorialPartDidStartSignal
    // Offset: 0x38
    GlobalNamespace::Signal* noteCuttingTutorialPartDidStartSignal;
    // private Signal _noteCuttingInAnyDirectionDidStartSignal
    // Offset: 0x40
    GlobalNamespace::Signal* noteCuttingInAnyDirectionDidStartSignal;
    // private Signal _bombCuttingTutorialPartDidStartSignal
    // Offset: 0x48
    GlobalNamespace::Signal* bombCuttingTutorialPartDidStartSignal;
    // private Signal _leftObstacleTutorialPartDidStartSignal
    // Offset: 0x50
    GlobalNamespace::Signal* leftObstacleTutorialPartDidStartSignal;
    // private Signal _rightObstacleTutorialPartDidStartSignal
    // Offset: 0x58
    GlobalNamespace::Signal* rightObstacleTutorialPartDidStartSignal;
    // private Signal _topObstacleTutorialPartDidStartSignal
    // Offset: 0x60
    GlobalNamespace::Signal* topObstacleTutorialPartDidStartSignal;
    // private Signal _noteWasCutOKSignal
    // Offset: 0x68
    GlobalNamespace::Signal* noteWasCutOKSignal;
    // private Signal _noteWasCutTooSoonSignal
    // Offset: 0x70
    GlobalNamespace::Signal* noteWasCutTooSoonSignal;
    // private Signal _noteWasCutWithWrongColorSignal
    // Offset: 0x78
    GlobalNamespace::Signal* noteWasCutWithWrongColorSignal;
    // private Signal _noteWasCutFromDifferentDirectionSignal
    // Offset: 0x80
    GlobalNamespace::Signal* noteWasCutFromDifferentDirectionSignal;
    // private Signal _noteWasCutWithSlowSpeedSignal
    // Offset: 0x88
    GlobalNamespace::Signal* noteWasCutWithSlowSpeedSignal;
    // private Signal _bombWasCutSignal
    // Offset: 0x90
    GlobalNamespace::Signal* bombWasCutSignal;
    // private readonly TutorialSongController/InitData _initData
    // Offset: 0x98
    GlobalNamespace::TutorialSongController::InitData* initData;
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Offset: 0xA0
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Offset: 0xA8
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // private System.Int32 _tutorialBeatmapObjectIndex
    // Offset: 0xB0
    int tutorialBeatmapObjectIndex;
    // private System.Int32 _prevSpawnedBeatmapObjectIndex
    // Offset: 0xB4
    int prevSpawnedBeatmapObjectIndex;
    // private System.Single _songBpm
    // Offset: 0xB8
    float songBpm;
    // private BeatmapData _beatmapData
    // Offset: 0xC0
    GlobalNamespace::BeatmapData* beatmapData;
    // private TutorialSongController/TutorialObjectSpawnData[] _normalModeTutorialObjectsSpawnData
    // Offset: 0xC8
    ::Array<GlobalNamespace::TutorialSongController::TutorialObjectSpawnData*>* normalModeTutorialObjectsSpawnData;
    // protected System.Void Awake()
    // Offset: 0x1FA14AC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1FA1C24
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1FA1DA4
    void OnDestroy();
    // public System.Void StartSong(System.Single startTimeOffset)
    // Offset: 0x1F9F7AC
    void StartSong(float startTimeOffset);
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0x1FA2180
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0x1FA2260
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleObstacleDidPassThreeQuartersOfMove2(ObstacleController obstacleController)
    // Offset: 0x1FA22C8
    void HandleObstacleDidPassThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void UpdateBeatmapData(System.Single noteTime)
    // Offset: 0x1FA1ED0
    void UpdateBeatmapData(float noteTime);
    // private System.Single GetNextBeatmapObjectTime(System.Int32 beatOffset)
    // Offset: 0x1FA22DC
    float GetNextBeatmapObjectTime(int beatOffset);
    // private ObstacleData CreateObstacleData(System.Single time, TutorialSongController/TutorialObstacleSpawnData tutorialObstacleSpawnData)
    // Offset: 0x1FA2374
    GlobalNamespace::ObstacleData* CreateObstacleData(float time, GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData* tutorialObstacleSpawnData);
    // private NoteData CreateBasicNoteData(System.Single time, TutorialSongController/TutorialBasicNoteSpawnData tutorialBasicNoteSpawnData)
    // Offset: 0x1FA2334
    GlobalNamespace::NoteData* CreateBasicNoteData(float time, GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData* tutorialBasicNoteSpawnData);
    // private NoteData CreateBombNoteData(System.Single time, TutorialSongController/TutorialBombNoteSpawnData tutorialBombNoteSpawnData)
    // Offset: 0x1FA2358
    GlobalNamespace::NoteData* CreateBombNoteData(float time, GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData* tutorialBombNoteSpawnData);
    // public override System.Void StopSong()
    // Offset: 0x1FA20FC
    // Implemented from: SongController
    // Base method: System.Void SongController::StopSong()
    void StopSong();
    // public override System.Void PauseSong()
    // Offset: 0x1FA2130
    // Implemented from: SongController
    // Base method: System.Void SongController::PauseSong()
    void PauseSong();
    // public override System.Void ResumeSong()
    // Offset: 0x1FA2164
    // Implemented from: SongController
    // Base method: System.Void SongController::ResumeSong()
    void ResumeSong();
    // public System.Void .ctor()
    // Offset: 0x1FA2430
    // Implemented from: SongController
    // Base method: System.Void SongController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static TutorialSongController* New_ctor();
  }; // TutorialSongController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TutorialSongController*, "", "TutorialSongController");
#pragma pack(pop)
