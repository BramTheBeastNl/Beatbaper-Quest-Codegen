// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: SelectLevelCategoryViewController
#include "GlobalNamespace/SelectLevelCategoryViewController.hpp"
// Including type: StandardLevelDetailViewController
#include "GlobalNamespace/StandardLevelDetailViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: LevelSelectionNavigationController
  class LevelSelectionNavigationController;
  // Forward declaring type: SearchFilterParamsViewController
  class SearchFilterParamsViewController;
  // Forward declaring type: LevelSearchViewController
  class LevelSearchViewController;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: LevelFilterParams
  class LevelFilterParams;
  // Forward declaring type: SongPackMask
  struct SongPackMask;
  // Skipping declaration: BeatmapDifficultyMask because it is already included!
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: LevelSelectionFlowCoordinator
  class LevelSelectionFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::LevelSelectionFlowCoordinator::State
    class State;
    // [InjectAttribute] Offset: 0xE22810
    // protected readonly PlayerDataModel playerDataModel
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE22820
    // protected readonly LevelSelectionNavigationController levelSelectionNavigationController
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::LevelSelectionNavigationController* levelSelectionNavigationController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelSelectionNavigationController*) == 0x8);
    // [InjectAttribute] Offset: 0xE22830
    // private readonly SearchFilterParamsViewController _searchFilterParamsViewController
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::SearchFilterParamsViewController* searchFilterParamsViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SearchFilterParamsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE22840
    // private readonly LevelSearchViewController _levelSearchViewController
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::LevelSearchViewController* levelSearchViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelSearchViewController*) == 0x8);
    // private LevelSelectionFlowCoordinator/State _startState
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::LevelSelectionFlowCoordinator::State* startState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelSelectionFlowCoordinator::State*) == 0x8);
    // Creating value type constructor for type: LevelSelectionFlowCoordinator
    LevelSelectionFlowCoordinator(GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::LevelSelectionNavigationController* levelSelectionNavigationController_ = {}, GlobalNamespace::SearchFilterParamsViewController* searchFilterParamsViewController_ = {}, GlobalNamespace::LevelSearchViewController* levelSearchViewController_ = {}, GlobalNamespace::LevelSelectionFlowCoordinator::State* startState_ = {}) noexcept : playerDataModel{playerDataModel_}, levelSelectionNavigationController{levelSelectionNavigationController_}, searchFilterParamsViewController{searchFilterParamsViewController_}, levelSearchViewController{levelSearchViewController_}, startState{startState_} {}
    // protected System.Boolean get_isInRootViewController()
    // Offset: 0x11FF89C
    bool get_isInRootViewController();
    // protected SelectLevelCategoryViewController/LevelCategory get_selectedLevelCategory()
    // Offset: 0x11FF920
    GlobalNamespace::SelectLevelCategoryViewController::LevelCategory get_selectedLevelCategory();
    // protected IBeatmapLevelPack get_selectedBeatmapLevelPack()
    // Offset: 0x11FF960
    GlobalNamespace::IBeatmapLevelPack* get_selectedBeatmapLevelPack();
    // protected IDifficultyBeatmap get_selectedDifficultyBeatmap()
    // Offset: 0x11FF99C
    GlobalNamespace::IDifficultyBeatmap* get_selectedDifficultyBeatmap();
    // protected IPreviewBeatmapLevel get_selectedBeatmapLevel()
    // Offset: 0x11FF9E0
    GlobalNamespace::IPreviewBeatmapLevel* get_selectedBeatmapLevel();
    // protected HMUI.ViewController get_initialTopScreenViewController()
    // Offset: 0x11FFA24
    HMUI::ViewController* get_initialTopScreenViewController();
    // protected HMUI.ViewController get_initialLeftScreenViewController()
    // Offset: 0x11FFA2C
    HMUI::ViewController* get_initialLeftScreenViewController();
    // protected HMUI.ViewController get_initialRightScreenViewController()
    // Offset: 0x11FFA34
    HMUI::ViewController* get_initialRightScreenViewController();
    // protected System.Boolean get_showBackButtonForMainViewController()
    // Offset: 0x11FFA3C
    bool get_showBackButtonForMainViewController();
    // protected System.Boolean get_hidePacksIfOneOrNone()
    // Offset: 0x11FFA44
    bool get_hidePacksIfOneOrNone();
    // protected System.Boolean get_hidePracticeButton()
    // Offset: 0x11FFA4C
    bool get_hidePracticeButton();
    // protected System.Boolean get_showPlayerStatsInDetailView()
    // Offset: 0x11FFA54
    bool get_showPlayerStatsInDetailView();
    // protected System.String get_actionButtonText()
    // Offset: 0x11FFA5C
    ::Il2CppString* get_actionButtonText();
    // protected System.String get_mainTitle()
    // Offset: 0x11FFAA8
    ::Il2CppString* get_mainTitle();
    // protected System.Boolean get_enableCustomLevels()
    // Offset: 0x11FFAB0
    bool get_enableCustomLevels();
    // protected SongPackMask get_songPackMask()
    // Offset: 0x11FFAB8
    GlobalNamespace::SongPackMask get_songPackMask();
    // protected BeatmapDifficultyMask get_allowedBeatmapDifficultyMask()
    // Offset: 0x11FFAC0
    GlobalNamespace::BeatmapDifficultyMask get_allowedBeatmapDifficultyMask();
    // protected BeatmapCharacteristicSO[] get_notAllowedCharacteristics()
    // Offset: 0x11FFAC8
    ::Array<GlobalNamespace::BeatmapCharacteristicSO*>* get_notAllowedCharacteristics();
    // protected System.Void LevelSelectionFlowCoordinatorDidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy)
    // Offset: 0x11FFB14
    void LevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy);
    // protected System.Void LevelSelectionFlowCoordinatorDidDeactivate(System.Boolean removedFromHierarchy)
    // Offset: 0x11FFB18
    void LevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy);
    // protected System.Void LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x11FFB1C
    void LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected System.Void ActionButtonWasPressed()
    // Offset: 0x11FFC1C
    void ActionButtonWasPressed();
    // protected System.Void PracticeButtonWasPressed()
    // Offset: 0x11FFC20
    void PracticeButtonWasPressed();
    // protected System.Void SelectionDidChange(IBeatmapLevelPack pack, IDifficultyBeatmap beatmap)
    // Offset: 0x11FFC24
    void SelectionDidChange(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IDifficultyBeatmap* beatmap);
    // public System.Void Setup(LevelSelectionFlowCoordinator/State state)
    // Offset: 0x11FFC28
    void Setup(GlobalNamespace::LevelSelectionFlowCoordinator::State* state);
    // private System.Void HandleLevelSelectionNavigationControllerDidSelectPack(LevelSelectionNavigationController viewController, IBeatmapLevelPack pack)
    // Offset: 0x12009D8
    void HandleLevelSelectionNavigationControllerDidSelectPack(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevelPack* pack);
    // private System.Void HandleSearchFilterParamsViewControllerDidFinish(SearchFilterParamsViewController viewController, LevelFilterParams levelFilterParams)
    // Offset: 0x12009F0
    void HandleSearchFilterParamsViewControllerDidFinish(GlobalNamespace::SearchFilterParamsViewController* viewController, GlobalNamespace::LevelFilterParams* levelFilterParams);
    // private System.Void HandleLevelSearchViewControllerDidPressSearchButton(LevelSearchViewController viewController, LevelFilterParams levelFilterParams)
    // Offset: 0x1200A38
    void HandleLevelSearchViewControllerDidPressSearchButton(GlobalNamespace::LevelSearchViewController* viewController, GlobalNamespace::LevelFilterParams* levelFilterParams);
    // private System.Void HandleLevelSelectionNavigationControllerDidPressActionButton(LevelSelectionNavigationController viewController)
    // Offset: 0x1200A84
    void HandleLevelSelectionNavigationControllerDidPressActionButton(GlobalNamespace::LevelSelectionNavigationController* viewController);
    // protected System.Void HandleLevelSelectionNavigationControllerDidPressPracticeButton(LevelSelectionNavigationController viewController, IBeatmapLevel level)
    // Offset: 0x1200A94
    void HandleLevelSelectionNavigationControllerDidPressPracticeButton(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevel* level);
    // protected System.Void HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap(LevelSelectionNavigationController viewController, IDifficultyBeatmap beatmap)
    // Offset: 0x1200AA4
    void HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IDifficultyBeatmap* beatmap);
    // protected System.Void HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent(LevelSelectionNavigationController viewController, StandardLevelDetailViewController/ContentType contentType)
    // Offset: 0x1200AB8
    void HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::StandardLevelDetailViewController::ContentType contentType);
    // protected System.Void Refresh()
    // Offset: 0x1200B10
    void Refresh();
    // protected System.Boolean IsMainViewController(HMUI.ViewController viewController)
    // Offset: 0x1200B54
    bool IsMainViewController(HMUI::ViewController* viewController);
    // protected System.Void PresentMainViewController(System.Action finishedCallback, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x1200BD0
    void PresentMainViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x11FFC30
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1200438
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x12009C8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected System.Void .ctor()
    // Offset: 0x1200BEC
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelSelectionFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelSelectionFlowCoordinator*, creationType>()));
    }
  }; // LevelSelectionFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(LevelSelectionFlowCoordinator), 200 + sizeof(GlobalNamespace::LevelSelectionFlowCoordinator::State*)> __GlobalNamespace_LevelSelectionFlowCoordinatorSizeCheck;
  static_assert(sizeof(LevelSelectionFlowCoordinator) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LevelSelectionFlowCoordinator*, "", "LevelSelectionFlowCoordinator");
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_isInRootViewController
// Il2CppName: get_isInRootViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedLevelCategory
// Il2CppName: get_selectedLevelCategory
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevelPack
// Il2CppName: get_selectedBeatmapLevelPack
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedDifficultyBeatmap
// Il2CppName: get_selectedDifficultyBeatmap
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevel
// Il2CppName: get_selectedBeatmapLevel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_initialTopScreenViewController
// Il2CppName: get_initialTopScreenViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_initialLeftScreenViewController
// Il2CppName: get_initialLeftScreenViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_initialRightScreenViewController
// Il2CppName: get_initialRightScreenViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_showBackButtonForMainViewController
// Il2CppName: get_showBackButtonForMainViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone
// Il2CppName: get_hidePacksIfOneOrNone
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePracticeButton
// Il2CppName: get_hidePracticeButton
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_actionButtonText
// Il2CppName: get_actionButtonText
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_mainTitle
// Il2CppName: get_mainTitle
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_enableCustomLevels
// Il2CppName: get_enableCustomLevels
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_songPackMask
// Il2CppName: get_songPackMask
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask
// Il2CppName: get_allowedBeatmapDifficultyMask
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::get_notAllowedCharacteristics
// Il2CppName: get_notAllowedCharacteristics
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate
// Il2CppName: LevelSelectionFlowCoordinatorDidActivate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: LevelSelectionFlowCoordinatorDidDeactivate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange
// Il2CppName: LevelSelectionFlowCoordinatorTopViewControllerWillChange
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::ActionButtonWasPressed
// Il2CppName: ActionButtonWasPressed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::PracticeButtonWasPressed
// Il2CppName: PracticeButtonWasPressed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::SelectionDidChange
// Il2CppName: SelectionDidChange
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::Setup
// Il2CppName: Setup
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidSelectPack
// Il2CppName: HandleLevelSelectionNavigationControllerDidSelectPack
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleSearchFilterParamsViewControllerDidFinish
// Il2CppName: HandleSearchFilterParamsViewControllerDidFinish
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSearchViewControllerDidPressSearchButton
// Il2CppName: HandleLevelSearchViewControllerDidPressSearchButton
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressActionButton
// Il2CppName: HandleLevelSelectionNavigationControllerDidPressActionButton
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressPracticeButton
// Il2CppName: HandleLevelSelectionNavigationControllerDidPressPracticeButton
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap
// Il2CppName: HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent
// Il2CppName: HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::Refresh
// Il2CppName: Refresh
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::IsMainViewController
// Il2CppName: IsMainViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::PresentMainViewController
// Il2CppName: PresentMainViewController
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::DidActivate
// Il2CppName: DidActivate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::LevelSelectionFlowCoordinator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
