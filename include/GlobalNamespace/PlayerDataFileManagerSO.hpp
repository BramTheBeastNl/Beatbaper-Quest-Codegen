// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicCollectionSO
  class BeatmapCharacteristicCollectionSO;
  // Forward declaring type: ColorSchemesListSO
  class ColorSchemesListSO;
  // Forward declaring type: EnvironmentsListSO
  class EnvironmentsListSO;
  // Forward declaring type: EnvironmentTypeSO
  class EnvironmentTypeSO;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: PlayerData
  class PlayerData;
  // Forward declaring type: PlayerSaveData
  class PlayerSaveData;
  // Forward declaring type: PlayerSaveDataV1_0_1
  class PlayerSaveDataV1_0_1;
  // Forward declaring type: OverrideEnvironmentSettings
  class OverrideEnvironmentSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerDataFileManagerSO
  class PlayerDataFileManagerSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::PlayerDataFileManagerSO);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerDataFileManagerSO*, "", "PlayerDataFileManagerSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PlayerDataFileManagerSO
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerDataFileManagerSO : public GlobalNamespace::PersistentScriptableObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCharacteristicCollectionSO*) == 0x8);
    // private ColorSchemesListSO _defaultColorSchemes
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ColorSchemesListSO* defaultColorSchemes;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSchemesListSO*) == 0x8);
    // private EnvironmentsListSO _allEnvironmentInfos
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::EnvironmentsListSO* allEnvironmentInfos;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentsListSO*) == 0x8);
    // private EnvironmentTypeSO _normalEnvironmentType
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::EnvironmentTypeSO* normalEnvironmentType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentTypeSO*) == 0x8);
    // private EnvironmentTypeSO _a360DegreesEnvironmentType
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::EnvironmentTypeSO* a360DegreesEnvironmentType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentTypeSO*) == 0x8);
    // private BeatmapCharacteristicSO _defaultLastSelectedBeatmapCharacteristic
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::BeatmapCharacteristicSO* defaultLastSelectedBeatmapCharacteristic;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCharacteristicSO*) == 0x8);
    // private System.String _buildInSongPackSerializedName
    // Size: 0x8
    // Offset: 0x48
    ::StringW buildInSongPackSerializedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _allSongPackSerializedName
    // Size: 0x8
    // Offset: 0x50
    ::StringW allSongPackSerializedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Version _eulaUpdateVersion
    // Size: 0x8
    // Offset: 0x58
    System::Version* eulaUpdateVersion;
    // Field size check
    static_assert(sizeof(System::Version*) == 0x8);
    public:
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String kPlayerDataFileName
    static constexpr const char* kPlayerDataFileName = "PlayerData.dat";
    // Get static field: static private System.String kPlayerDataFileName
    static ::StringW _get_kPlayerDataFileName();
    // Set static field: static private System.String kPlayerDataFileName
    static void _set_kPlayerDataFileName(::StringW value);
    // static field const value: static private System.String kTempFileName
    static constexpr const char* kTempFileName = "PlayerData.dat.tmp";
    // Get static field: static private System.String kTempFileName
    static ::StringW _get_kTempFileName();
    // Set static field: static private System.String kTempFileName
    static void _set_kTempFileName(::StringW value);
    // static field const value: static private System.String kBackupFileName
    static constexpr const char* kBackupFileName = "PlayerData.dat.bak";
    // Get static field: static private System.String kBackupFileName
    static ::StringW _get_kBackupFileName();
    // Set static field: static private System.String kBackupFileName
    static void _set_kBackupFileName(::StringW value);
    // Get instance field reference: private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    GlobalNamespace::BeatmapCharacteristicCollectionSO*& dyn__beatmapCharacteristicCollection();
    // Get instance field reference: private ColorSchemesListSO _defaultColorSchemes
    GlobalNamespace::ColorSchemesListSO*& dyn__defaultColorSchemes();
    // Get instance field reference: private EnvironmentsListSO _allEnvironmentInfos
    GlobalNamespace::EnvironmentsListSO*& dyn__allEnvironmentInfos();
    // Get instance field reference: private EnvironmentTypeSO _normalEnvironmentType
    GlobalNamespace::EnvironmentTypeSO*& dyn__normalEnvironmentType();
    // Get instance field reference: private EnvironmentTypeSO _a360DegreesEnvironmentType
    GlobalNamespace::EnvironmentTypeSO*& dyn__a360DegreesEnvironmentType();
    // Get instance field reference: private BeatmapCharacteristicSO _defaultLastSelectedBeatmapCharacteristic
    GlobalNamespace::BeatmapCharacteristicSO*& dyn__defaultLastSelectedBeatmapCharacteristic();
    // Get instance field reference: private System.String _buildInSongPackSerializedName
    ::StringW& dyn__buildInSongPackSerializedName();
    // Get instance field reference: private System.String _allSongPackSerializedName
    ::StringW& dyn__allSongPackSerializedName();
    // Get instance field reference: private readonly System.Version _eulaUpdateVersion
    System::Version*& dyn__eulaUpdateVersion();
    // public System.Void Save(PlayerData playerData)
    // Offset: 0x11535AC
    void Save(GlobalNamespace::PlayerData* playerData);
    // public PlayerData Load()
    // Offset: 0x1154240
    GlobalNamespace::PlayerData* Load();
    // private PlayerData LoadFromJSONString(System.String jsonString)
    // Offset: 0x115431C
    GlobalNamespace::PlayerData* LoadFromJSONString(::StringW jsonString);
    // private PlayerData LoadFromCurrentVersion(PlayerSaveData playerSaveData)
    // Offset: 0x1154D84
    GlobalNamespace::PlayerData* LoadFromCurrentVersion(GlobalNamespace::PlayerSaveData* playerSaveData);
    // private PlayerData LoadFromVersionV1_0_1(PlayerSaveDataV1_0_1 playerDataModelSaveData)
    // Offset: 0x1154584
    GlobalNamespace::PlayerData* LoadFromVersionV1_0_1(GlobalNamespace::PlayerSaveDataV1_0_1* playerDataModelSaveData);
    // public PlayerData CreateDefaultPlayerData()
    // Offset: 0x11544B8
    GlobalNamespace::PlayerData* CreateDefaultPlayerData();
    // static public System.String GetLevelIdFromV_1_0_1LevelId(System.String oldLevelId, BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0x1155B74
    static ::StringW GetLevelIdFromV_1_0_1LevelId(::StringW oldLevelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
    // static public BeatmapCharacteristicSO GetBeatmapCharacteristicFromV_1_0_1LevelId(BeatmapCharacteristicCollectionSO beatmapCharacteristicCollection, System.String levelId)
    // Offset: 0x1155A40
    static GlobalNamespace::BeatmapCharacteristicSO* GetBeatmapCharacteristicFromV_1_0_1LevelId(GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection, ::StringW levelId);
    // private OverrideEnvironmentSettings CreateDefaultOverrideEnvironmentSettings()
    // Offset: 0x1155BE0
    GlobalNamespace::OverrideEnvironmentSettings* CreateDefaultOverrideEnvironmentSettings();
    // private System.String LoadCorrectedSongPackMask(System.Byte[] songMaskPackBytes)
    // Offset: 0x11559C4
    ::StringW LoadCorrectedSongPackMask(::ArrayW<uint8_t> songMaskPackBytes);
    // public System.Void .ctor()
    // Offset: 0x1155CA0
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerDataFileManagerSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerDataFileManagerSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerDataFileManagerSO*, creationType>()));
    }
  }; // PlayerDataFileManagerSO
  #pragma pack(pop)
  static check_size<sizeof(PlayerDataFileManagerSO), 88 + sizeof(System::Version*)> __GlobalNamespace_PlayerDataFileManagerSOSizeCheck;
  static_assert(sizeof(PlayerDataFileManagerSO) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerDataFileManagerSO::*)(GlobalNamespace::PlayerData*)>(&GlobalNamespace::PlayerDataFileManagerSO::Save)> {
  static const MethodInfo* get() {
    static auto* playerData = &::il2cpp_utils::GetClassFromName("", "PlayerData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerData* (GlobalNamespace::PlayerDataFileManagerSO::*)()>(&GlobalNamespace::PlayerDataFileManagerSO::Load)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::LoadFromJSONString
// Il2CppName: LoadFromJSONString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerData* (GlobalNamespace::PlayerDataFileManagerSO::*)(::StringW)>(&GlobalNamespace::PlayerDataFileManagerSO::LoadFromJSONString)> {
  static const MethodInfo* get() {
    static auto* jsonString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "LoadFromJSONString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jsonString});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::LoadFromCurrentVersion
// Il2CppName: LoadFromCurrentVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerData* (GlobalNamespace::PlayerDataFileManagerSO::*)(GlobalNamespace::PlayerSaveData*)>(&GlobalNamespace::PlayerDataFileManagerSO::LoadFromCurrentVersion)> {
  static const MethodInfo* get() {
    static auto* playerSaveData = &::il2cpp_utils::GetClassFromName("", "PlayerSaveData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "LoadFromCurrentVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerSaveData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::LoadFromVersionV1_0_1
// Il2CppName: LoadFromVersionV1_0_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerData* (GlobalNamespace::PlayerDataFileManagerSO::*)(GlobalNamespace::PlayerSaveDataV1_0_1*)>(&GlobalNamespace::PlayerDataFileManagerSO::LoadFromVersionV1_0_1)> {
  static const MethodInfo* get() {
    static auto* playerDataModelSaveData = &::il2cpp_utils::GetClassFromName("", "PlayerSaveDataV1_0_1")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "LoadFromVersionV1_0_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerDataModelSaveData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::CreateDefaultPlayerData
// Il2CppName: CreateDefaultPlayerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerData* (GlobalNamespace::PlayerDataFileManagerSO::*)()>(&GlobalNamespace::PlayerDataFileManagerSO::CreateDefaultPlayerData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "CreateDefaultPlayerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::GetLevelIdFromV_1_0_1LevelId
// Il2CppName: GetLevelIdFromV_1_0_1LevelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::PlayerDataFileManagerSO::GetLevelIdFromV_1_0_1LevelId)> {
  static const MethodInfo* get() {
    static auto* oldLevelId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* beatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "GetLevelIdFromV_1_0_1LevelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldLevelId, beatmapCharacteristic});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::GetBeatmapCharacteristicFromV_1_0_1LevelId
// Il2CppName: GetBeatmapCharacteristicFromV_1_0_1LevelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (*)(GlobalNamespace::BeatmapCharacteristicCollectionSO*, ::StringW)>(&GlobalNamespace::PlayerDataFileManagerSO::GetBeatmapCharacteristicFromV_1_0_1LevelId)> {
  static const MethodInfo* get() {
    static auto* beatmapCharacteristicCollection = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicCollectionSO")->byval_arg;
    static auto* levelId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "GetBeatmapCharacteristicFromV_1_0_1LevelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapCharacteristicCollection, levelId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::CreateDefaultOverrideEnvironmentSettings
// Il2CppName: CreateDefaultOverrideEnvironmentSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OverrideEnvironmentSettings* (GlobalNamespace::PlayerDataFileManagerSO::*)()>(&GlobalNamespace::PlayerDataFileManagerSO::CreateDefaultOverrideEnvironmentSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "CreateDefaultOverrideEnvironmentSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::LoadCorrectedSongPackMask
// Il2CppName: LoadCorrectedSongPackMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PlayerDataFileManagerSO::*)(::ArrayW<uint8_t>)>(&GlobalNamespace::PlayerDataFileManagerSO::LoadCorrectedSongPackMask)> {
  static const MethodInfo* get() {
    static auto* songMaskPackBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerDataFileManagerSO*), "LoadCorrectedSongPackMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{songMaskPackBytes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerDataFileManagerSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
