// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightGroupSO
  class LightGroupSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightGroupSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightGroupSO*, "", "LightGroupSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: LightGroupSO
  // [TokenAttribute] Offset: FFFFFFFF
  class LightGroupSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    public:
    // [TooltipAttribute] Offset: 0x10E5E08
    // private System.String _groupName
    // Size: 0x8
    // Offset: 0x18
    ::StringW groupName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TextAreaAttribute] Offset: 0x10E5E54
    // [TooltipAttribute] Offset: 0x10E5E54
    // private System.String _groupDescription
    // Size: 0x8
    // Offset: 0x20
    ::StringW groupDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [MinAttribute] Offset: 0x10E5EB0
    // private System.Int32 _groupId
    // Size: 0x4
    // Offset: 0x28
    int groupId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [MinAttribute] Offset: 0x10E5EEC
    // private System.Int32 _startLightId
    // Size: 0x4
    // Offset: 0x2C
    int startLightId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [MinAttribute] Offset: 0x10E5F28
    // private System.Int32 _numberOfElements
    // Size: 0x4
    // Offset: 0x30
    int numberOfElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [MinAttribute] Offset: 0x10E5F64
    // private System.Int32 _sameIdElements
    // Size: 0x4
    // Offset: 0x34
    int sameIdElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _ignoreLightGroupEffectManager
    // Size: 0x1
    // Offset: 0x38
    bool ignoreLightGroupEffectManager;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String _groupName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__groupName();
    // Get instance field reference: private System.String _groupDescription
    [[deprecated("Use field access instead!")]] ::StringW& dyn__groupDescription();
    // Get instance field reference: private System.Int32 _groupId
    [[deprecated("Use field access instead!")]] int& dyn__groupId();
    // Get instance field reference: private System.Int32 _startLightId
    [[deprecated("Use field access instead!")]] int& dyn__startLightId();
    // Get instance field reference: private System.Int32 _numberOfElements
    [[deprecated("Use field access instead!")]] int& dyn__numberOfElements();
    // Get instance field reference: private System.Int32 _sameIdElements
    [[deprecated("Use field access instead!")]] int& dyn__sameIdElements();
    // Get instance field reference: private System.Boolean _ignoreLightGroupEffectManager
    [[deprecated("Use field access instead!")]] bool& dyn__ignoreLightGroupEffectManager();
    // public System.String get_groupName()
    // Offset: 0x1D010F8
    ::StringW get_groupName();
    // public System.Int32 get_groupId()
    // Offset: 0x1D01100
    int get_groupId();
    // public System.Int32 get_startLightId()
    // Offset: 0x1D01108
    int get_startLightId();
    // public System.Int32 get_numberOfElements()
    // Offset: 0x1D01110
    int get_numberOfElements();
    // public System.Int32 get_sameIdElements()
    // Offset: 0x1D01118
    int get_sameIdElements();
    // public System.Boolean get_ignoreLightGroupEffectManager()
    // Offset: 0x1D01120
    bool get_ignoreLightGroupEffectManager();
    // public System.Void .ctor()
    // Offset: 0x1D01128
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightGroupSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightGroupSO*, creationType>()));
    }
  }; // LightGroupSO
  #pragma pack(pop)
  static check_size<sizeof(LightGroupSO), 56 + sizeof(bool)> __GlobalNamespace_LightGroupSOSizeCheck;
  static_assert(sizeof(LightGroupSO) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::get_groupName
// Il2CppName: get_groupName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LightGroupSO::*)()>(&GlobalNamespace::LightGroupSO::get_groupName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroupSO*), "get_groupName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::get_groupId
// Il2CppName: get_groupId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightGroupSO::*)()>(&GlobalNamespace::LightGroupSO::get_groupId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroupSO*), "get_groupId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::get_startLightId
// Il2CppName: get_startLightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightGroupSO::*)()>(&GlobalNamespace::LightGroupSO::get_startLightId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroupSO*), "get_startLightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::get_numberOfElements
// Il2CppName: get_numberOfElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightGroupSO::*)()>(&GlobalNamespace::LightGroupSO::get_numberOfElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroupSO*), "get_numberOfElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::get_sameIdElements
// Il2CppName: get_sameIdElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightGroupSO::*)()>(&GlobalNamespace::LightGroupSO::get_sameIdElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroupSO*), "get_sameIdElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::get_ignoreLightGroupEffectManager
// Il2CppName: get_ignoreLightGroupEffectManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LightGroupSO::*)()>(&GlobalNamespace::LightGroupSO::get_ignoreLightGroupEffectManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroupSO*), "get_ignoreLightGroupEffectManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroupSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
