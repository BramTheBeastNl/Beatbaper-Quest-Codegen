// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: ISaberMovementDataProcessor
#include "GlobalNamespace/ISaberMovementDataProcessor.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberMovementData
  class SaberMovementData;
  // Forward declaring type: LazyCopyHashSet`1<T>
  template<typename T>
  class LazyCopyHashSet_1;
  // Forward declaring type: ISaberSwingRatingCounterDidChangeReceiver
  class ISaberSwingRatingCounterDidChangeReceiver;
  // Forward declaring type: ISaberSwingRatingCounterDidFinishReceiver
  class ISaberSwingRatingCounterDidFinishReceiver;
  // Forward declaring type: BladeMovementDataElement
  struct BladeMovementDataElement;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC1
  #pragma pack(push, 1)
  // Autogenerated type: SaberSwingRatingCounter
  // [] Offset: FFFFFFFF
  class SaberSwingRatingCounter : public ::Il2CppObject/*, public GlobalNamespace::ISaberSwingRatingCounter, public GlobalNamespace::ISaberMovementDataProcessor*/ {
    public:
    // Nested type: GlobalNamespace::SaberSwingRatingCounter::Pool
    class Pool;
    // private SaberMovementData _saberMovementData
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::SaberMovementData* saberMovementData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberMovementData*) == 0x8);
    // private UnityEngine.Vector3 _cutPlaneNormal
    // Size: 0xC
    // Offset: 0x18
    UnityEngine::Vector3 cutPlaneNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Single _cutTime
    // Size: 0x4
    // Offset: 0x24
    float cutTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _afterCutRating
    // Size: 0x4
    // Offset: 0x28
    float afterCutRating;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _beforeCutRating
    // Size: 0x4
    // Offset: 0x2C
    float beforeCutRating;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Plane _notePlane
    // Size: 0x10
    // Offset: 0x30
    UnityEngine::Plane notePlane;
    // Field size check
    static_assert(sizeof(UnityEngine::Plane) == 0x10);
    // private System.Boolean _notePlaneWasCut
    // Size: 0x1
    // Offset: 0x40
    bool notePlaneWasCut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: notePlaneWasCut and: noteForward
    char __padding6[0x3] = {};
    // private UnityEngine.Vector3 _noteForward
    // Size: 0xC
    // Offset: 0x44
    UnityEngine::Vector3 noteForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private readonly LazyCopyHashSet`1<ISaberSwingRatingCounterDidChangeReceiver> _didChangeReceivers
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver*>* didChangeReceivers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<ISaberSwingRatingCounterDidFinishReceiver> _didFinishReceivers
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver*>* didFinishReceivers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver*>*) == 0x8);
    // private UnityEngine.Vector3 _notePlaneCenter
    // Size: 0xC
    // Offset: 0x60
    UnityEngine::Vector3 notePlaneCenter;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _beforeCutTopPos
    // Size: 0xC
    // Offset: 0x6C
    UnityEngine::Vector3 beforeCutTopPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _beforeCutBottomPos
    // Size: 0xC
    // Offset: 0x78
    UnityEngine::Vector3 beforeCutBottomPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _afterCutTopPos
    // Size: 0xC
    // Offset: 0x84
    UnityEngine::Vector3 afterCutTopPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _afterCutBottomPos
    // Size: 0xC
    // Offset: 0x90
    UnityEngine::Vector3 afterCutBottomPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _newPlaneNormal
    // Size: 0xC
    // Offset: 0x9C
    UnityEngine::Vector3 newPlaneNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cutTopPos
    // Size: 0xC
    // Offset: 0xA8
    UnityEngine::Vector3 cutTopPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cutBottomPos
    // Size: 0xC
    // Offset: 0xB4
    UnityEngine::Vector3 cutBottomPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Boolean _finished
    // Size: 0x1
    // Offset: 0xC0
    bool finished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SaberSwingRatingCounter
    SaberSwingRatingCounter(GlobalNamespace::SaberMovementData* saberMovementData_ = {}, UnityEngine::Vector3 cutPlaneNormal_ = {}, float cutTime_ = {}, float afterCutRating_ = {}, float beforeCutRating_ = {}, UnityEngine::Plane notePlane_ = {}, bool notePlaneWasCut_ = {}, UnityEngine::Vector3 noteForward_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver*>* didChangeReceivers_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver*>* didFinishReceivers_ = {}, UnityEngine::Vector3 notePlaneCenter_ = {}, UnityEngine::Vector3 beforeCutTopPos_ = {}, UnityEngine::Vector3 beforeCutBottomPos_ = {}, UnityEngine::Vector3 afterCutTopPos_ = {}, UnityEngine::Vector3 afterCutBottomPos_ = {}, UnityEngine::Vector3 newPlaneNormal_ = {}, UnityEngine::Vector3 cutTopPos_ = {}, UnityEngine::Vector3 cutBottomPos_ = {}, bool finished_ = {}) noexcept : saberMovementData{saberMovementData_}, cutPlaneNormal{cutPlaneNormal_}, cutTime{cutTime_}, afterCutRating{afterCutRating_}, beforeCutRating{beforeCutRating_}, notePlane{notePlane_}, notePlaneWasCut{notePlaneWasCut_}, noteForward{noteForward_}, didChangeReceivers{didChangeReceivers_}, didFinishReceivers{didFinishReceivers_}, notePlaneCenter{notePlaneCenter_}, beforeCutTopPos{beforeCutTopPos_}, beforeCutBottomPos{beforeCutBottomPos_}, afterCutTopPos{afterCutTopPos_}, afterCutBottomPos{afterCutBottomPos_}, newPlaneNormal{newPlaneNormal_}, cutTopPos{cutTopPos_}, cutBottomPos{cutBottomPos_}, finished{finished_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ISaberSwingRatingCounter
    operator GlobalNamespace::ISaberSwingRatingCounter() noexcept {
      return *reinterpret_cast<GlobalNamespace::ISaberSwingRatingCounter*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ISaberMovementDataProcessor
    operator GlobalNamespace::ISaberMovementDataProcessor() noexcept {
      return *reinterpret_cast<GlobalNamespace::ISaberMovementDataProcessor*>(this);
    }
    // public System.Single get_beforeCutRating()
    // Offset: 0xF67DA0
    float get_beforeCutRating_NEW();
    // public System.Single get_afterCutRating()
    // Offset: 0xF67DA8
    float get_afterCutRating_NEW();
    // public System.Void RegisterDidChangeReceiver(ISaberSwingRatingCounterDidChangeReceiver receiver)
    // Offset: 0xF67DB0
    void RegisterDidChangeReceiver_NEW(GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver* receiver);
    // public System.Void RegisterDidFinishReceiver(ISaberSwingRatingCounterDidFinishReceiver receiver)
    // Offset: 0xF67E18
    void RegisterDidFinishReceiver_NEW(GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver* receiver);
    // public System.Void UnregisterDidChangeReceiver(ISaberSwingRatingCounterDidChangeReceiver receiver)
    // Offset: 0xF67E80
    void UnregisterDidChangeReceiver_NEW(GlobalNamespace::ISaberSwingRatingCounterDidChangeReceiver* receiver);
    // public System.Void UnregisterDidFinishReceiver(ISaberSwingRatingCounterDidFinishReceiver receiver)
    // Offset: 0xF67EE8
    void UnregisterDidFinishReceiver_NEW(GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver* receiver);
    // public System.Void Init(SaberMovementData saberMovementData, UnityEngine.Transform noteTransform)
    // Offset: 0xF67F50
    void Init(GlobalNamespace::SaberMovementData* saberMovementData, UnityEngine::Transform* noteTransform);
    // public System.Void ProcessNewData(BladeMovementDataElement newData, BladeMovementDataElement prevData, System.Boolean prevDataAreValid)
    // Offset: 0xF6807C
    void ProcessNewData_NEW(GlobalNamespace::BladeMovementDataElement newData, GlobalNamespace::BladeMovementDataElement prevData, bool prevDataAreValid);
    // private System.Void Finish()
    // Offset: 0xF68578
    void Finish();
    // public System.Void DrawGizmos()
    // Offset: 0xF686C0
    void DrawGizmos();
    // public System.Void .ctor()
    // Offset: 0xF689A4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberSwingRatingCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberSwingRatingCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberSwingRatingCounter*, creationType>()));
    }
  }; // SaberSwingRatingCounter
  #pragma pack(pop)
  static check_size<sizeof(SaberSwingRatingCounter), 192 + sizeof(bool)> __GlobalNamespace_SaberSwingRatingCounterSizeCheck;
  static_assert(sizeof(SaberSwingRatingCounter) == 0xC1);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberSwingRatingCounter*, "", "SaberSwingRatingCounter");
