// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockNoteData
  class MockNoteData;
  // Forward declaring type: MockObstacleData
  class MockObstacleData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MockBeatmapData
  class MockBeatmapData : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDFD1E8
    // private System.Int32 <numberOfLines>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int numberOfLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDFD1F8
    // private System.Single <songEndTime>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    float songEndTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDFD208
    // private MockNoteData[] <leftNotes>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::MockNoteData*>* leftNotes;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MockNoteData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDFD218
    // private MockNoteData[] <rightNotes>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Array<GlobalNamespace::MockNoteData*>* rightNotes;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MockNoteData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDFD228
    // private MockNoteData[] <bombNotes>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Array<GlobalNamespace::MockNoteData*>* bombNotes;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MockNoteData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDFD238
    // private MockObstacleData[] <obstacles>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Array<GlobalNamespace::MockObstacleData*>* obstacles;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MockObstacleData*>*) == 0x8);
    // Creating value type constructor for type: MockBeatmapData
    MockBeatmapData(int numberOfLines_ = {}, float songEndTime_ = {}, ::Array<GlobalNamespace::MockNoteData*>* leftNotes_ = {}, ::Array<GlobalNamespace::MockNoteData*>* rightNotes_ = {}, ::Array<GlobalNamespace::MockNoteData*>* bombNotes_ = {}, ::Array<GlobalNamespace::MockObstacleData*>* obstacles_ = {}) noexcept : numberOfLines{numberOfLines_}, songEndTime{songEndTime_}, leftNotes{leftNotes_}, rightNotes{rightNotes_}, bombNotes{bombNotes_}, obstacles{obstacles_} {}
    // public System.Int32 get_numberOfLines()
    // Offset: 0x239970C
    int get_numberOfLines();
    // public System.Void set_numberOfLines(System.Int32 value)
    // Offset: 0x2399714
    void set_numberOfLines(int value);
    // public System.Single get_songEndTime()
    // Offset: 0x239971C
    float get_songEndTime();
    // public System.Void set_songEndTime(System.Single value)
    // Offset: 0x2399724
    void set_songEndTime(float value);
    // public MockNoteData[] get_leftNotes()
    // Offset: 0x239972C
    ::Array<GlobalNamespace::MockNoteData*>* get_leftNotes();
    // public System.Void set_leftNotes(MockNoteData[] value)
    // Offset: 0x2399734
    void set_leftNotes(::Array<GlobalNamespace::MockNoteData*>* value);
    // public MockNoteData[] get_rightNotes()
    // Offset: 0x239973C
    ::Array<GlobalNamespace::MockNoteData*>* get_rightNotes();
    // public System.Void set_rightNotes(MockNoteData[] value)
    // Offset: 0x2399744
    void set_rightNotes(::Array<GlobalNamespace::MockNoteData*>* value);
    // public MockNoteData[] get_bombNotes()
    // Offset: 0x239974C
    ::Array<GlobalNamespace::MockNoteData*>* get_bombNotes();
    // public System.Void set_bombNotes(MockNoteData[] value)
    // Offset: 0x2399754
    void set_bombNotes(::Array<GlobalNamespace::MockNoteData*>* value);
    // public MockObstacleData[] get_obstacles()
    // Offset: 0x239975C
    ::Array<GlobalNamespace::MockObstacleData*>* get_obstacles();
    // public System.Void set_obstacles(MockObstacleData[] value)
    // Offset: 0x2399764
    void set_obstacles(::Array<GlobalNamespace::MockObstacleData*>* value);
    // public System.Void .ctor()
    // Offset: 0x239976C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockBeatmapData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockBeatmapData*, creationType>()));
    }
  }; // MockBeatmapData
  #pragma pack(pop)
  static check_size<sizeof(MockBeatmapData), 48 + sizeof(::Array<GlobalNamespace::MockObstacleData*>*)> __GlobalNamespace_MockBeatmapDataSizeCheck;
  static_assert(sizeof(MockBeatmapData) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockBeatmapData*, "", "MockBeatmapData");
