// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ILightWithId
#include "GlobalNamespace/ILightWithId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightWithIdManager
  class LightWithIdManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: LightWithIdMonoBehaviour
  // [] Offset: FFFFFFFF
  class LightWithIdMonoBehaviour : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::ILightWithId*/ {
    public:
    // private System.Int32 _ID
    // Size: 0x4
    // Offset: 0x18
    int ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ID and: lightManager
    char __padding0[0x4] = {};
    // [InjectAttribute] Offset: 0xD009DC
    // private readonly LightWithIdManager _lightManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::LightWithIdManager* lightManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LightWithIdManager*) == 0x8);
    // private System.Boolean _isRegistered
    // Size: 0x1
    // Offset: 0x28
    bool isRegistered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LightWithIdMonoBehaviour
    LightWithIdMonoBehaviour(int ID_ = {}, GlobalNamespace::LightWithIdManager* lightManager_ = {}, bool isRegistered_ = {}) noexcept : ID{ID_}, lightManager{lightManager_}, isRegistered{isRegistered_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ILightWithId
    operator GlobalNamespace::ILightWithId() noexcept {
      return *reinterpret_cast<GlobalNamespace::ILightWithId*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Int32 get_lightId()
    // Offset: 0x1CE0AFC
    int get_lightId_NEW();
    // public System.Boolean get_isRegistered()
    // Offset: 0x1CE0B04
    bool get_isRegistered_NEW();
    // public System.Void __SetIsRegistered()
    // Offset: 0x1CE0B0C
    void __SetIsRegistered_NEW();
    // public System.Void __SetIsUnRegistered()
    // Offset: 0x1CE0B18
    void __SetIsUnRegistered_NEW();
    // public System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0xFFFFFFFF
    void ColorWasSet(UnityEngine::Color color);
    // protected System.Void OnEnable()
    // Offset: 0x1CE0B20
    void OnEnable_NEW();
    // protected System.Void Start()
    // Offset: 0x1CE0BB8
    void Start_NEW();
    // protected System.Void OnDisable()
    // Offset: 0x1CE0BBC
    void OnDisable_NEW();
    // private System.Void RegisterLight()
    // Offset: 0x1CE0B24
    void RegisterLight();
    // protected System.Void .ctor()
    // Offset: 0x1CD98F8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightWithIdMonoBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdMonoBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightWithIdMonoBehaviour*, creationType>()));
    }
  }; // LightWithIdMonoBehaviour
  #pragma pack(pop)
  static check_size<sizeof(LightWithIdMonoBehaviour), 40 + sizeof(bool)> __GlobalNamespace_LightWithIdMonoBehaviourSizeCheck;
  static_assert(sizeof(LightWithIdMonoBehaviour) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightWithIdMonoBehaviour*, "", "LightWithIdMonoBehaviour");
