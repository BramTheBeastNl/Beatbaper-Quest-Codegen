// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OculusNetworkPlayerModel
  class OculusNetworkPlayerModel;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
  // Forward declaring type: SendPolicy
  struct SendPolicy;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: NetworkingPeer
  class NetworkingPeer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: OculusConnectionManager
  class OculusConnectionManager : public ::Il2CppObject, public GlobalNamespace::IConnectionManager {
    public:
    // Nested type: GlobalNamespace::OculusConnectionManager::NetworkMode
    struct NetworkMode;
    // Nested type: GlobalNamespace::OculusConnectionManager::OculusConnection
    class OculusConnection;
    // Nested type: GlobalNamespace::OculusConnectionManager::StartServerParams
    class StartServerParams;
    // Nested type: GlobalNamespace::OculusConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: GlobalNamespace::OculusConnectionManager::$HandlePeerConnectionRequest$d__58
    struct $HandlePeerConnectionRequest$d__58;
    // Autogenerated type: OculusConnectionManager/NetworkMode
    struct NetworkMode : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: NetworkMode
      constexpr NetworkMode(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OculusConnectionManager/NetworkMode None
      static constexpr const int None = 0;
      // Get static field: static public OculusConnectionManager/NetworkMode None
      static GlobalNamespace::OculusConnectionManager::NetworkMode _get_None();
      // Set static field: static public OculusConnectionManager/NetworkMode None
      static void _set_None(GlobalNamespace::OculusConnectionManager::NetworkMode value);
      // static field const value: static public OculusConnectionManager/NetworkMode Client
      static constexpr const int Client = 1;
      // Get static field: static public OculusConnectionManager/NetworkMode Client
      static GlobalNamespace::OculusConnectionManager::NetworkMode _get_Client();
      // Set static field: static public OculusConnectionManager/NetworkMode Client
      static void _set_Client(GlobalNamespace::OculusConnectionManager::NetworkMode value);
      // static field const value: static public OculusConnectionManager/NetworkMode Server
      static constexpr const int Server = 2;
      // Get static field: static public OculusConnectionManager/NetworkMode Server
      static GlobalNamespace::OculusConnectionManager::NetworkMode _get_Server();
      // Set static field: static public OculusConnectionManager/NetworkMode Server
      static void _set_Server(GlobalNamespace::OculusConnectionManager::NetworkMode value);
    }; // OculusConnectionManager/NetworkMode
    // private readonly System.Collections.Generic.List`1<OculusConnectionManager/OculusConnection> _connections
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>* connections;
    // private readonly LiteNetLib.Utils.NetDataReader _dataReader
    // Offset: 0x18
    LiteNetLib::Utils::NetDataReader* dataReader;
    // private OculusNetworkPlayerModel _oculusNetworkPlayerModel
    // Offset: 0x20
    GlobalNamespace::OculusNetworkPlayerModel* oculusNetworkPlayerModel;
    // private OculusConnectionManager/NetworkMode _mode
    // Offset: 0x28
    GlobalNamespace::OculusConnectionManager::NetworkMode mode;
    // private System.Single _lastPingTime
    // Offset: 0x2C
    float lastPingTime;
    // private System.Boolean _connectionEstablished
    // Offset: 0x30
    bool connectionEstablished;
    // private System.Action onConnectedEvent
    // Offset: 0x38
    System::Action* onConnectedEvent;
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Offset: 0x40
    System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Offset: 0x48
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Offset: 0x50
    System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // private System.Action`1<IConnection> onConnectionDisconnectedEvent
    // Offset: 0x58
    System::Action_1<GlobalNamespace::IConnection*>* onConnectionDisconnectedEvent;
    // private System.Action`2<IConnection,System.Single> onLatencyUpdatedEvent
    // Offset: 0x60
    System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent;
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    // Offset: 0x68
    System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent;
    // private System.Byte[] _buffer
    // Offset: 0x70
    ::Array<uint8_t>* buffer;
    // static field const value: static private System.Single kPingFrequency
    static constexpr const float kPingFrequency = 15;
    // Get static field: static private System.Single kPingFrequency
    static float _get_kPingFrequency();
    // Set static field: static private System.Single kPingFrequency
    static void _set_kPingFrequency(float value);
    // public System.Boolean get_isServer()
    // Offset: 0x10B9264
    bool get_isServer();
    // public System.Boolean get_isClient()
    // Offset: 0x10B9274
    bool get_isClient();
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x10B9A08
    void DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Void HandlePeerConnectionRequest(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> message)
    // Offset: 0x10B9CC4
    void HandlePeerConnectionRequest(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message);
    // private System.Void HandleConnectionStateChanged(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> message)
    // Offset: 0x10B9DC0
    void HandleConnectionStateChanged(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message);
    // private OculusConnectionManager/OculusConnection GetConnection(System.UInt64 user)
    // Offset: 0x10B9714
    GlobalNamespace::OculusConnectionManager::OculusConnection* GetConnection(uint64_t user);
    // private System.Void RemoveConnection(System.UInt64 id)
    // Offset: 0x10B9EA8
    void RemoveConnection(uint64_t id);
    // private System.Byte[] AcquireBuffer(System.Int32 size)
    // Offset: 0x10B986C
    ::Array<uint8_t>* AcquireBuffer(int size);
    // private System.Void ReleaseBuffer(System.Byte[] buffer)
    // Offset: 0x10B990C
    void ReleaseBuffer(::Array<uint8_t>* buffer);
    // static private Oculus.Platform.SendPolicy DeliveryMethodToSendPolicy(LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x10BA098
    static Oculus::Platform::SendPolicy DeliveryMethodToSendPolicy(LiteNetLib::DeliveryMethod deliveryMethod);
    // static private LiteNetLib.DeliveryMethod SendPolicyToDeliveryMethod(Oculus.Platform.SendPolicy sendPolicy)
    // Offset: 0x10B98F8
    static LiteNetLib::DeliveryMethod SendPolicyToDeliveryMethod(Oculus::Platform::SendPolicy sendPolicy);
    // static private System.Void VoidHandler(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> message)
    // Offset: 0x10BA0A8
    static void VoidHandler(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message);
    // private System.Void <PollUpdate>b__52_0(OculusConnectionManager/OculusConnection connection, System.Single latency)
    // Offset: 0x10BA180
    void $PollUpdate$b__52_0(GlobalNamespace::OculusConnectionManager::OculusConnection* connection, float latency);
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x10B8760
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectedEvent(System.Action value)
    void add_onConnectedEvent(System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x10B8804
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectedEvent(System.Action value)
    void remove_onConnectedEvent(System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x10B88A8
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    void add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x10B894C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    void remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x10B89F0
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x10B8A94
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x10B8B38
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    void add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x10B8BDC
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    void remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x10B8C80
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionDisconnectedEvent(System.Action`1<IConnection> value)
    void add_onConnectionDisconnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x10B8D24
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionDisconnectedEvent(System.Action`1<IConnection> value)
    void remove_onConnectionDisconnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x10B8DC8
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    void add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x10B8E6C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    void remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x10B8F10
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    void add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x10B8FB4
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    void remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.String get_userId()
    // Offset: 0x10B9058
    // Implemented from: IConnectionManager
    // Base method: System.String IConnectionManager::get_userId()
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x10B9120
    // Implemented from: IConnectionManager
    // Base method: System.String IConnectionManager::get_userName()
    ::Il2CppString* get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x10B91EC
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnected()
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x10B9220
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnecting()
    bool get_isConnecting();
    // public System.Boolean get_isDisposed()
    // Offset: 0x10B9244
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isDisposed()
    bool get_isDisposed();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x10B9254
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnectionOwner()
    bool get_isConnectionOwner();
    // public System.Int32 get_connectionCount()
    // Offset: 0x10B9284
    // Implemented from: IConnectionManager
    // Base method: System.Int32 IConnectionManager::get_connectionCount()
    int get_connectionCount();
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x10B92D4
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x10B92DC
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection);
    // public System.Void PollUpdate()
    // Offset: 0x10B9528
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::PollUpdate()
    void PollUpdate();
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::Init(IConnectionInitParams`1<T> initParams)
    template<class T>
    bool Init(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "Init", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, initParams)));
    }
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x10B9A00
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::Disconnect(DisconnectedReason disconnectedReason)
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void Dispose()
    // Offset: 0x10B9C40
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x10B9C4C
    // Implemented from: IConnectionManager
    // Base method: IConnection IConnectionManager::GetConnection(System.Int32 index)
    GlobalNamespace::IConnection* GetConnection(int index);
    // public System.Void .ctor()
    // Offset: 0x10BA0AC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static OculusConnectionManager* New_ctor();
  }; // OculusConnectionManager
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusConnectionManager*, "", "OculusConnectionManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusConnectionManager::NetworkMode, "", "OculusConnectionManager/NetworkMode");
#pragma pack(pop)
