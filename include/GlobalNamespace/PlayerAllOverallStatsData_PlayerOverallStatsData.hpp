// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayerAllOverallStatsData
#include "GlobalNamespace/PlayerAllOverallStatsData.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PlayerAllOverallStatsData/PlayerOverallStatsData
  class PlayerAllOverallStatsData::PlayerOverallStatsData : public ::Il2CppObject {
    public:
    // private System.Int32 <goodCutsCount>k__BackingField
    // Offset: 0x10
    int goodCutsCount;
    // private System.Int32 <badCutsCount>k__BackingField
    // Offset: 0x14
    int badCutsCount;
    // private System.Int32 <missedCutsCount>k__BackingField
    // Offset: 0x18
    int missedCutsCount;
    // private System.Int64 <totalScore>k__BackingField
    // Offset: 0x20
    int64_t totalScore;
    // private System.Int32 <playedLevelsCount>k__BackingField
    // Offset: 0x28
    int playedLevelsCount;
    // private System.Int32 <cleardLevelsCount>k__BackingField
    // Offset: 0x2C
    int cleardLevelsCount;
    // private System.Int32 <failedLevelsCount>k__BackingField
    // Offset: 0x30
    int failedLevelsCount;
    // private System.Int32 <fullComboCount>k__BackingField
    // Offset: 0x34
    int fullComboCount;
    // private System.Single <timePlayed>k__BackingField
    // Offset: 0x38
    float timePlayed;
    // private System.Int32 <handDistanceTravelled>k__BackingField
    // Offset: 0x3C
    int handDistanceTravelled;
    // private System.Int64 <cummulativeCutScoreWithoutMultiplier>k__BackingField
    // Offset: 0x40
    int64_t cummulativeCutScoreWithoutMultiplier;
    // public System.Int32 get_goodCutsCount()
    // Offset: 0x191E7C4
    int get_goodCutsCount();
    // private System.Void set_goodCutsCount(System.Int32 value)
    // Offset: 0x191E7CC
    void set_goodCutsCount(int value);
    // public System.Int32 get_badCutsCount()
    // Offset: 0x191E7D4
    int get_badCutsCount();
    // private System.Void set_badCutsCount(System.Int32 value)
    // Offset: 0x191E7DC
    void set_badCutsCount(int value);
    // public System.Int32 get_missedCutsCount()
    // Offset: 0x191E7E4
    int get_missedCutsCount();
    // private System.Void set_missedCutsCount(System.Int32 value)
    // Offset: 0x191E7EC
    void set_missedCutsCount(int value);
    // public System.Int64 get_totalScore()
    // Offset: 0x191E7F4
    int64_t get_totalScore();
    // private System.Void set_totalScore(System.Int64 value)
    // Offset: 0x191E7FC
    void set_totalScore(int64_t value);
    // public System.Int32 get_playedLevelsCount()
    // Offset: 0x191E804
    int get_playedLevelsCount();
    // private System.Void set_playedLevelsCount(System.Int32 value)
    // Offset: 0x191E80C
    void set_playedLevelsCount(int value);
    // public System.Int32 get_cleardLevelsCount()
    // Offset: 0x191E814
    int get_cleardLevelsCount();
    // private System.Void set_cleardLevelsCount(System.Int32 value)
    // Offset: 0x191E81C
    void set_cleardLevelsCount(int value);
    // public System.Int32 get_failedLevelsCount()
    // Offset: 0x191E824
    int get_failedLevelsCount();
    // private System.Void set_failedLevelsCount(System.Int32 value)
    // Offset: 0x191E82C
    void set_failedLevelsCount(int value);
    // public System.Int32 get_fullComboCount()
    // Offset: 0x191E834
    int get_fullComboCount();
    // private System.Void set_fullComboCount(System.Int32 value)
    // Offset: 0x191E83C
    void set_fullComboCount(int value);
    // public System.Single get_timePlayed()
    // Offset: 0x191E844
    float get_timePlayed();
    // private System.Void set_timePlayed(System.Single value)
    // Offset: 0x191E84C
    void set_timePlayed(float value);
    // public System.Int32 get_handDistanceTravelled()
    // Offset: 0x191E854
    int get_handDistanceTravelled();
    // private System.Void set_handDistanceTravelled(System.Int32 value)
    // Offset: 0x191E85C
    void set_handDistanceTravelled(int value);
    // public System.Int64 get_cummulativeCutScoreWithoutMultiplier()
    // Offset: 0x191E864
    int64_t get_cummulativeCutScoreWithoutMultiplier();
    // private System.Void set_cummulativeCutScoreWithoutMultiplier(System.Int64 value)
    // Offset: 0x191E86C
    void set_cummulativeCutScoreWithoutMultiplier(int64_t value);
    // public System.Int32 get_averageCutScore()
    // Offset: 0x191E874
    int get_averageCutScore();
    // public System.Void .ctor(System.Int32 goodCutsCount, System.Int32 badCutsCount, System.Int32 missedCutsCount, System.Int64 totalScore, System.Int32 playedLevelsCount, System.Int32 cleardLevelsCount, System.Int32 failedLevelsCount, System.Int32 fullComboCount, System.Single timePlayed, System.Int32 handDistanceTravelled, System.Int64 cummulativeCutScoreWithoutMultiplier)
    // Offset: 0x191E894
    static PlayerAllOverallStatsData::PlayerOverallStatsData* New_ctor(int goodCutsCount, int badCutsCount, int missedCutsCount, int64_t totalScore, int playedLevelsCount, int cleardLevelsCount, int failedLevelsCount, int fullComboCount, float timePlayed, int handDistanceTravelled, int64_t cummulativeCutScoreWithoutMultiplier);
    // public System.Void UpdateWithLevelCompletionResults(LevelCompletionResults levelCompletionResults)
    // Offset: 0x191E620
    void UpdateWithLevelCompletionResults(GlobalNamespace::LevelCompletionResults* levelCompletionResults);
    // public System.Void .ctor()
    // Offset: 0x191E524
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static PlayerAllOverallStatsData::PlayerOverallStatsData* New_ctor();
  }; // PlayerAllOverallStatsData/PlayerOverallStatsData
  // static public PlayerAllOverallStatsData/PlayerOverallStatsData op_Addition(PlayerAllOverallStatsData/PlayerOverallStatsData a, PlayerAllOverallStatsData/PlayerOverallStatsData b)
  // Offset: 0x191DF2C
  GlobalNamespace::PlayerAllOverallStatsData::PlayerOverallStatsData* operator+(GlobalNamespace::PlayerAllOverallStatsData::PlayerOverallStatsData* a, GlobalNamespace::PlayerAllOverallStatsData::PlayerOverallStatsData& b);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerAllOverallStatsData::PlayerOverallStatsData*, "", "PlayerAllOverallStatsData/PlayerOverallStatsData");
#pragma pack(pop)
