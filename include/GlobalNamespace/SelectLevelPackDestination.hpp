// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MenuDestination
#include "GlobalNamespace/MenuDestination.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: SelectLevelPackDestination
  class SelectLevelPackDestination : public GlobalNamespace::MenuDestination {
    public:
    // public readonly IBeatmapLevelPack beatmapLevelPack
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevelPack*) == 0x8);
    // Creating value type constructor for type: SelectLevelPackDestination
    SelectLevelPackDestination(GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack_ = {}) noexcept : beatmapLevelPack{beatmapLevelPack_} {}
    // Creating conversion operator: operator GlobalNamespace::IBeatmapLevelPack*
    constexpr operator GlobalNamespace::IBeatmapLevelPack*() const noexcept {
      return beatmapLevelPack;
    }
    // public System.Void .ctor(IBeatmapLevelPack beatmapLevelPack)
    // Offset: 0x10DA3CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectLevelPackDestination* New_ctor(GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SelectLevelPackDestination::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectLevelPackDestination*, creationType>(beatmapLevelPack)));
    }
  }; // SelectLevelPackDestination
  #pragma pack(pop)
  static check_size<sizeof(SelectLevelPackDestination), 16 + sizeof(GlobalNamespace::IBeatmapLevelPack*)> __GlobalNamespace_SelectLevelPackDestinationSizeCheck;
  static_assert(sizeof(SelectLevelPackDestination) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SelectLevelPackDestination*, "", "SelectLevelPackDestination");
// Writing MetadataGetter for method: SelectLevelPackDestination::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectLevelPackDestination::*)(GlobalNamespace::IBeatmapLevelPack*)>(&SelectLevelPackDestination::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectLevelPackDestination*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectLevelPackDestination::*)(GlobalNamespace::IBeatmapLevelPack*)>(&SelectLevelPackDestination::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectLevelPackDestination*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
