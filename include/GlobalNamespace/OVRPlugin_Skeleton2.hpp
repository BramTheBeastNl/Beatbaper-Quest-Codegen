// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/Skeleton2
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPlugin::Skeleton2/*, public System::ValueType*/ {
    public:
    // public OVRPlugin/SkeletonType Type
    // Size: 0x4
    // Offset: 0x0
    GlobalNamespace::OVRPlugin::SkeletonType Type;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::SkeletonType) == 0x4);
    // public System.UInt32 NumBones
    // Size: 0x4
    // Offset: 0x4
    uint NumBones;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 NumBoneCapsules
    // Size: 0x4
    // Offset: 0x8
    uint NumBoneCapsules;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: NumBoneCapsules and: Bones
    char __padding2[0x4] = {};
    // public OVRPlugin/Bone[] Bones
    // Size: 0x8
    // Offset: 0x10
    ::Array<GlobalNamespace::OVRPlugin::Bone>* Bones;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::OVRPlugin::Bone>*) == 0x8);
    // public OVRPlugin/BoneCapsule[] BoneCapsules
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::OVRPlugin::BoneCapsule>* BoneCapsules;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::OVRPlugin::BoneCapsule>*) == 0x8);
    // Creating value type constructor for type: Skeleton2
    constexpr Skeleton2(GlobalNamespace::OVRPlugin::SkeletonType Type_ = {}, uint NumBones_ = {}, uint NumBoneCapsules_ = {}, ::Array<GlobalNamespace::OVRPlugin::Bone>* Bones_ = {}, ::Array<GlobalNamespace::OVRPlugin::BoneCapsule>* BoneCapsules_ = {}) noexcept : Type{Type_}, NumBones{NumBones_}, NumBoneCapsules{NumBoneCapsules_}, Bones{Bones_}, BoneCapsules{BoneCapsules_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public OVRPlugin/SkeletonType Type
    GlobalNamespace::OVRPlugin::SkeletonType _get_Type();
    // Set instance field: public OVRPlugin/SkeletonType Type
    void _set_Type(GlobalNamespace::OVRPlugin::SkeletonType value);
    // Get instance field: public System.UInt32 NumBones
    uint _get_NumBones();
    // Set instance field: public System.UInt32 NumBones
    void _set_NumBones(uint value);
    // Get instance field: public System.UInt32 NumBoneCapsules
    uint _get_NumBoneCapsules();
    // Set instance field: public System.UInt32 NumBoneCapsules
    void _set_NumBoneCapsules(uint value);
    // Get instance field: public OVRPlugin/Bone[] Bones
    ::Array<GlobalNamespace::OVRPlugin::Bone>* _get_Bones();
    // Set instance field: public OVRPlugin/Bone[] Bones
    void _set_Bones(::Array<GlobalNamespace::OVRPlugin::Bone>* value);
    // Get instance field: public OVRPlugin/BoneCapsule[] BoneCapsules
    ::Array<GlobalNamespace::OVRPlugin::BoneCapsule>* _get_BoneCapsules();
    // Set instance field: public OVRPlugin/BoneCapsule[] BoneCapsules
    void _set_BoneCapsules(::Array<GlobalNamespace::OVRPlugin::BoneCapsule>* value);
  }; // OVRPlugin/Skeleton2
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::Skeleton2), 24 + sizeof(::Array<GlobalNamespace::OVRPlugin::BoneCapsule>*)> __GlobalNamespace_OVRPlugin_Skeleton2SizeCheck;
  static_assert(sizeof(OVRPlugin::Skeleton2) == 0x20);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Skeleton2, "", "OVRPlugin/Skeleton2");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
