// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GameplayModifiers/EnergyType
#include "GlobalNamespace/GameplayModifiers.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberClashChecker
  class SaberClashChecker;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: PlayerHeadAndObstacleInteraction
  class PlayerHeadAndObstacleInteraction;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: GameEnergyCounter
  class GameEnergyCounter : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::GameEnergyCounter::InitData
    class InitData;
    // private System.Single _badNoteEnergyDrain
    // Offset: 0x18
    float badNoteEnergyDrain;
    // private System.Single _missNoteEnergyDrain
    // Offset: 0x1C
    float missNoteEnergyDrain;
    // private System.Single _hitBombEnergyDrain
    // Offset: 0x20
    float hitBombEnergyDrain;
    // private System.Single _goodNoteEnergyCharge
    // Offset: 0x24
    float goodNoteEnergyCharge;
    // private System.Single _obstacleEnergyDrainPerSecond
    // Offset: 0x28
    float obstacleEnergyDrainPerSecond;
    // private System.Int32 _batteryLives
    // Offset: 0x2C
    int batteryLives;
    // private readonly GameEnergyCounter/InitData _initData
    // Offset: 0x30
    GlobalNamespace::GameEnergyCounter::InitData* initData;
    // private readonly SaberClashChecker _saberClashChecker
    // Offset: 0x38
    GlobalNamespace::SaberClashChecker* saberClashChecker;
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Offset: 0x40
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
    // Offset: 0x48
    GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction;
    // private System.Action gameEnergyDidReach0Event
    // Offset: 0x50
    System::Action* gameEnergyDidReach0Event;
    // private System.Action`1<System.Single> gameEnergyDidChangeEvent
    // Offset: 0x58
    System::Action_1<float>* gameEnergyDidChangeEvent;
    // private System.Single <energy>k__BackingField
    // Offset: 0x60
    float energy;
    // private GameplayModifiers/EnergyType <energyType>k__BackingField
    // Offset: 0x64
    GlobalNamespace::GameplayModifiers::EnergyType energyType;
    // private System.Boolean <noFail>k__BackingField
    // Offset: 0x68
    bool noFail;
    // private System.Boolean <instaFail>k__BackingField
    // Offset: 0x69
    bool instaFail;
    // private System.Boolean <failOnSaberClash>k__BackingField
    // Offset: 0x6A
    bool failOnSaberClash;
    // private System.Single _nextFrameEnergyChange
    // Offset: 0x6C
    float nextFrameEnergyChange;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_gameEnergyDidReach0Event(System.Action value)
    // Offset: 0xEBF334
    void add_gameEnergyDidReach0Event(System::Action* value);
    // public System.Void remove_gameEnergyDidReach0Event(System.Action value)
    // Offset: 0xEBF3D8
    void remove_gameEnergyDidReach0Event(System::Action* value);
    // public System.Void add_gameEnergyDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0xEBF47C
    void add_gameEnergyDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_gameEnergyDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0xEBF520
    void remove_gameEnergyDidChangeEvent(System::Action_1<float>* value);
    // public System.Single get_energy()
    // Offset: 0xEBF5C4
    float get_energy();
    // private System.Void set_energy(System.Single value)
    // Offset: 0xEBF5CC
    void set_energy(float value);
    // public System.Int32 get_batteryEnergy()
    // Offset: 0xEBF5D4
    int get_batteryEnergy();
    // public System.Int32 get_batteryLives()
    // Offset: 0xEBF658
    int get_batteryLives();
    // public GameplayModifiers/EnergyType get_energyType()
    // Offset: 0xEBF660
    GlobalNamespace::GameplayModifiers::EnergyType get_energyType();
    // private System.Void set_energyType(GameplayModifiers/EnergyType value)
    // Offset: 0xEBF668
    void set_energyType(GlobalNamespace::GameplayModifiers::EnergyType value);
    // public System.Boolean get_noFail()
    // Offset: 0xEBF670
    bool get_noFail();
    // private System.Void set_noFail(System.Boolean value)
    // Offset: 0xEBF678
    void set_noFail(bool value);
    // public System.Boolean get_instaFail()
    // Offset: 0xEBF684
    bool get_instaFail();
    // private System.Void set_instaFail(System.Boolean value)
    // Offset: 0xEBF68C
    void set_instaFail(bool value);
    // public System.Boolean get_failOnSaberClash()
    // Offset: 0xEBF698
    bool get_failOnSaberClash();
    // private System.Void set_failOnSaberClash(System.Boolean value)
    // Offset: 0xEBF6A0
    void set_failOnSaberClash(bool value);
    // protected System.Void Start()
    // Offset: 0xEBF6AC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xEBF7FC
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0xEBF8EC
    void LateUpdate();
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xEBFB1C
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0xEBFB98
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void AddEnergy(System.Single value)
    // Offset: 0xEBF9F8
    void AddEnergy(float value);
    // public System.Void .ctor()
    // Offset: 0xEBFBD4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static GameEnergyCounter* New_ctor();
  }; // GameEnergyCounter
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameEnergyCounter*, "", "GameEnergyCounter");
#pragma pack(pop)
