// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GameplayModifiers/EnergyType
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberClashChecker
  class SaberClashChecker;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: PlayerHeadAndObstacleInteraction
  class PlayerHeadAndObstacleInteraction;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  // Autogenerated type: GameEnergyCounter
  // [] Offset: FFFFFFFF
  class GameEnergyCounter : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::GameEnergyCounter::InitData
    class InitData;
    // private System.Single _badNoteEnergyDrain
    // Size: 0x4
    // Offset: 0x18
    float badNoteEnergyDrain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _missNoteEnergyDrain
    // Size: 0x4
    // Offset: 0x1C
    float missNoteEnergyDrain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hitBombEnergyDrain
    // Size: 0x4
    // Offset: 0x20
    float hitBombEnergyDrain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _goodNoteEnergyCharge
    // Size: 0x4
    // Offset: 0x24
    float goodNoteEnergyCharge;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _obstacleEnergyDrainPerSecond
    // Size: 0x4
    // Offset: 0x28
    float obstacleEnergyDrainPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _batteryLives
    // Size: 0x4
    // Offset: 0x2C
    int batteryLives;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [InjectAttribute] Offset: 0xDCA8FC
    // private readonly GameEnergyCounter/InitData _initData
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::GameEnergyCounter::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameEnergyCounter::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0xDCA90C
    // private readonly SaberClashChecker _saberClashChecker
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::SaberClashChecker* saberClashChecker;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberClashChecker*) == 0x8);
    // [InjectAttribute] Offset: 0xDCA91C
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xDCA92C
    // private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeadAndObstacleInteraction*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCA93C
    // private System.Action gameEnergyDidReach0Event
    // Size: 0x8
    // Offset: 0x50
    System::Action* gameEnergyDidReach0Event;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCA94C
    // private System.Action`1<System.Single> gameEnergyDidChangeEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<float>* gameEnergyDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCA95C
    // private System.Single <energy>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    float energy;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCA96C
    // private GameplayModifiers/EnergyType <energyType>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    GlobalNamespace::GameplayModifiers::EnergyType energyType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers::EnergyType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCA97C
    // private System.Boolean <noFail>k__BackingField
    // Size: 0x1
    // Offset: 0x68
    bool noFail;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xDCA98C
    // private System.Boolean <instaFail>k__BackingField
    // Size: 0x1
    // Offset: 0x69
    bool instaFail;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xDCA99C
    // private System.Boolean <failOnSaberClash>k__BackingField
    // Size: 0x1
    // Offset: 0x6A
    bool failOnSaberClash;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: failOnSaberClash and: nextFrameEnergyChange
    char __padding16[0x1] = {};
    // private System.Single _nextFrameEnergyChange
    // Size: 0x4
    // Offset: 0x6C
    float nextFrameEnergyChange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: GameEnergyCounter
    GameEnergyCounter(float badNoteEnergyDrain_ = {}, float missNoteEnergyDrain_ = {}, float hitBombEnergyDrain_ = {}, float goodNoteEnergyCharge_ = {}, float obstacleEnergyDrainPerSecond_ = {}, int batteryLives_ = {}, GlobalNamespace::GameEnergyCounter::InitData* initData_ = {}, GlobalNamespace::SaberClashChecker* saberClashChecker_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction_ = {}, System::Action* gameEnergyDidReach0Event_ = {}, System::Action_1<float>* gameEnergyDidChangeEvent_ = {}, float energy_ = {}, GlobalNamespace::GameplayModifiers::EnergyType energyType_ = {}, bool noFail_ = {}, bool instaFail_ = {}, bool failOnSaberClash_ = {}, float nextFrameEnergyChange_ = {}) noexcept : badNoteEnergyDrain{badNoteEnergyDrain_}, missNoteEnergyDrain{missNoteEnergyDrain_}, hitBombEnergyDrain{hitBombEnergyDrain_}, goodNoteEnergyCharge{goodNoteEnergyCharge_}, obstacleEnergyDrainPerSecond{obstacleEnergyDrainPerSecond_}, batteryLives{batteryLives_}, initData{initData_}, saberClashChecker{saberClashChecker_}, beatmapObjectManager{beatmapObjectManager_}, playerHeadAndObstacleInteraction{playerHeadAndObstacleInteraction_}, gameEnergyDidReach0Event{gameEnergyDidReach0Event_}, gameEnergyDidChangeEvent{gameEnergyDidChangeEvent_}, energy{energy_}, energyType{energyType_}, noFail{noFail_}, instaFail{instaFail_}, failOnSaberClash{failOnSaberClash_}, nextFrameEnergyChange{nextFrameEnergyChange_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_gameEnergyDidReach0Event(System.Action value)
    // Offset: 0x1A185EC
    void add_gameEnergyDidReach0Event(System::Action* value);
    // public System.Void remove_gameEnergyDidReach0Event(System.Action value)
    // Offset: 0x1A18690
    void remove_gameEnergyDidReach0Event(System::Action* value);
    // public System.Void add_gameEnergyDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x1A18734
    void add_gameEnergyDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_gameEnergyDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x1A187D8
    void remove_gameEnergyDidChangeEvent(System::Action_1<float>* value);
    // public System.Single get_energy()
    // Offset: 0x1A1887C
    float get_energy();
    // private System.Void set_energy(System.Single value)
    // Offset: 0x1A18884
    void set_energy(float value);
    // public System.Int32 get_batteryEnergy()
    // Offset: 0x1A1888C
    int get_batteryEnergy();
    // public System.Int32 get_batteryLives()
    // Offset: 0x1A18910
    int get_batteryLives();
    // public GameplayModifiers/EnergyType get_energyType()
    // Offset: 0x1A18918
    GlobalNamespace::GameplayModifiers::EnergyType get_energyType();
    // private System.Void set_energyType(GameplayModifiers/EnergyType value)
    // Offset: 0x1A18920
    void set_energyType(GlobalNamespace::GameplayModifiers::EnergyType value);
    // public System.Boolean get_noFail()
    // Offset: 0x1A18928
    bool get_noFail();
    // private System.Void set_noFail(System.Boolean value)
    // Offset: 0x1A18930
    void set_noFail(bool value);
    // public System.Boolean get_instaFail()
    // Offset: 0x1A1893C
    bool get_instaFail();
    // private System.Void set_instaFail(System.Boolean value)
    // Offset: 0x1A18944
    void set_instaFail(bool value);
    // public System.Boolean get_failOnSaberClash()
    // Offset: 0x1A18950
    bool get_failOnSaberClash();
    // private System.Void set_failOnSaberClash(System.Boolean value)
    // Offset: 0x1A18958
    void set_failOnSaberClash(bool value);
    // protected System.Void Start()
    // Offset: 0x1A18964
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1A18AB4
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0x1A18BA4
    void LateUpdate();
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0x1A18DD4
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0x1A18E50
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void AddEnergy(System.Single value)
    // Offset: 0x1A18CB0
    void AddEnergy(float value);
    // public System.Void .ctor()
    // Offset: 0x1A18E8C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameEnergyCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameEnergyCounter*, creationType>()));
    }
  }; // GameEnergyCounter
  static check_size<sizeof(GameEnergyCounter), 108 + sizeof(float)> __GlobalNamespace_GameEnergyCounterSizeCheck;
  static_assert(sizeof(GameEnergyCounter) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameEnergyCounter*, "", "GameEnergyCounter");
#pragma pack(pop)
