// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: StandardLevelInfoSaveData
  class StandardLevelInfoSaveData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: StandardLevelInfoSaveData_V100
  class StandardLevelInfoSaveData_V100 : public ::CsObject {
    public:
    // Nested type: GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap
    class DifficultyBeatmap;
    // Nested type: GlobalNamespace::StandardLevelInfoSaveData_V100::VersionCheck
    class VersionCheck;
    // static field const value: static public System.String kCurrentVersion
    static constexpr const char* kCurrentVersion = "1.0.0";
    // Get static field: static public System.String kCurrentVersion
    static ::CsString* _get_kCurrentVersion();
    // Set static field: static public System.String kCurrentVersion
    static void _set_kCurrentVersion(::CsString* value);
    // private System.String _version
    // Offset: 0x10
    ::CsString* version;
    // private System.String _songName
    // Offset: 0x18
    ::CsString* songName;
    // private System.String _songSubName
    // Offset: 0x20
    ::CsString* songSubName;
    // private System.String _songAuthorName
    // Offset: 0x28
    ::CsString* songAuthorName;
    // private System.String _levelAuthorName
    // Offset: 0x30
    ::CsString* levelAuthorName;
    // private System.Single _beatsPerMinute
    // Offset: 0x38
    float beatsPerMinute;
    // private System.Single _songTimeOffset
    // Offset: 0x3C
    float songTimeOffset;
    // private System.Single _shuffle
    // Offset: 0x40
    float shuffle;
    // private System.Single _shufflePeriod
    // Offset: 0x44
    float shufflePeriod;
    // private System.Single _previewStartTime
    // Offset: 0x48
    float previewStartTime;
    // private System.Single _previewDuration
    // Offset: 0x4C
    float previewDuration;
    // private System.String _songFilename
    // Offset: 0x50
    ::CsString* songFilename;
    // private System.String _coverImageFilename
    // Offset: 0x58
    ::CsString* coverImageFilename;
    // private System.String _environmentName
    // Offset: 0x60
    ::CsString* environmentName;
    // private StandardLevelInfoSaveData_V100/DifficultyBeatmap[] _difficultyBeatmaps
    // Offset: 0x68
    ::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>* difficultyBeatmaps;
    // public System.String get_version()
    // Offset: 0xBA15D0
    ::CsString* get_version();
    // public System.String get_songName()
    // Offset: 0xBA15D8
    ::CsString* get_songName();
    // public System.String get_songSubName()
    // Offset: 0xBA15E0
    ::CsString* get_songSubName();
    // public System.String get_songAuthorName()
    // Offset: 0xBA15E8
    ::CsString* get_songAuthorName();
    // public System.String get_levelAuthorName()
    // Offset: 0xBA15F0
    ::CsString* get_levelAuthorName();
    // public System.Single get_beatsPerMinute()
    // Offset: 0xBA15F8
    float get_beatsPerMinute();
    // public System.Single get_songTimeOffset()
    // Offset: 0xBA1600
    float get_songTimeOffset();
    // public System.Single get_shuffle()
    // Offset: 0xBA1608
    float get_shuffle();
    // public System.Single get_shufflePeriod()
    // Offset: 0xBA1610
    float get_shufflePeriod();
    // public System.Single get_previewStartTime()
    // Offset: 0xBA1618
    float get_previewStartTime();
    // public System.Single get_previewDuration()
    // Offset: 0xBA1620
    float get_previewDuration();
    // public System.String get_songFilename()
    // Offset: 0xBA1628
    ::CsString* get_songFilename();
    // public System.String get_coverImageFilename()
    // Offset: 0xBA1630
    ::CsString* get_coverImageFilename();
    // public System.String get_environmentName()
    // Offset: 0xBA1638
    ::CsString* get_environmentName();
    // public StandardLevelInfoSaveData_V100/DifficultyBeatmap[] get_difficultyBeatmaps()
    // Offset: 0xBA1640
    ::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>* get_difficultyBeatmaps();
    // public System.Void .ctor(System.String songName, System.String songSubName, System.String songAuthorName, System.String levelAuthorName, System.Single beatsPerMinute, System.Single songTimeOffset, System.Single shuffle, System.Single shufflePeriod, System.Single previewStartTime, System.Single previewDuration, System.String songFilename, System.String coverImageFilename, System.String environmentName, StandardLevelInfoSaveData_V100/DifficultyBeatmap[] difficultyBeatmaps)
    // Offset: 0xBA1648
    static StandardLevelInfoSaveData_V100* New_ctor(::CsString* songName, ::CsString* songSubName, ::CsString* songAuthorName, ::CsString* levelAuthorName, float beatsPerMinute, float songTimeOffset, float shuffle, float shufflePeriod, float previewStartTime, float previewDuration, ::CsString* songFilename, ::CsString* coverImageFilename, ::CsString* environmentName, ::Array<GlobalNamespace::StandardLevelInfoSaveData_V100::DifficultyBeatmap*>* difficultyBeatmaps);
    // public System.Boolean get_hasAllData()
    // Offset: 0xBA17A4
    bool get_hasAllData();
    // public System.Void SetSongFilename(System.String songFilename)
    // Offset: 0xBA1808
    void SetSongFilename(::CsString* songFilename);
    // public System.String SerializeToJSONString()
    // Offset: 0xBA1810
    ::CsString* SerializeToJSONString();
    // static public StandardLevelInfoSaveData DeserializeFromJSONString(System.String stringData)
    // Offset: 0xBA1818
    static GlobalNamespace::StandardLevelInfoSaveData* DeserializeFromJSONString(::CsString* stringData);
  }; // StandardLevelInfoSaveData_V100
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardLevelInfoSaveData_V100*, "", "StandardLevelInfoSaveData_V100");
#pragma pack(pop)
