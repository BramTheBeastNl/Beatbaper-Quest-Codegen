// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayModifiersModelSO
  class GameplayModifiersModelSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: GameplayModifierToggle
  class GameplayModifierToggle;
  // Forward declaring type: GameplayModifierParamsSO
  class GameplayModifierParamsSO;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ToggleBinder
  class ToggleBinder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: GameplayModifiersPanelController
  // [] Offset: FFFFFFFF
  class GameplayModifiersPanelController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IRefreshable*/ {
    public:
    // Nested type: GlobalNamespace::GameplayModifiersPanelController::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    // private GameplayModifiersModelSO _gameplayModifiersModel
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiersModelSO*) == 0x8);
    // private TMPro.TextMeshProUGUI _totalMultiplierValueText
    // Size: 0x8
    // Offset: 0x20
    TMPro::TextMeshProUGUI* totalMultiplierValueText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _maxRankValueText
    // Size: 0x8
    // Offset: 0x28
    TMPro::TextMeshProUGUI* maxRankValueText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // [SpaceAttribute] Offset: 0xD2DE18
    // private UnityEngine.Color _positiveColor
    // Size: 0x10
    // Offset: 0x30
    UnityEngine::Color positiveColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _negativeColor
    // Size: 0x10
    // Offset: 0x40
    UnityEngine::Color negativeColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xD2DE60
    // private System.Action didChangeGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action* didChangeGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers*) == 0x8);
    // private HMUI.ToggleBinder _toggleBinder
    // Size: 0x8
    // Offset: 0x60
    HMUI::ToggleBinder* toggleBinder;
    // Field size check
    static_assert(sizeof(HMUI::ToggleBinder*) == 0x8);
    // private GameplayModifierToggle[] _gameplayModifierToggles
    // Size: 0x8
    // Offset: 0x68
    ::Array<GlobalNamespace::GameplayModifierToggle*>* gameplayModifierToggles;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::GameplayModifierToggle*>*) == 0x8);
    // private System.Boolean _changingGameplayModifierToggles
    // Size: 0x1
    // Offset: 0x70
    bool changingGameplayModifierToggles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: changingGameplayModifierToggles and: toggleForGameplayModifierParam
    char __padding9[0x7] = {};
    // private readonly System.Collections.Generic.Dictionary`2<GameplayModifierParamsSO,UnityEngine.UI.Toggle> _toggleForGameplayModifierParam
    // Size: 0x8
    // Offset: 0x78
    System::Collections::Generic::Dictionary_2<GlobalNamespace::GameplayModifierParamsSO*, UnityEngine::UI::Toggle*>* toggleForGameplayModifierParam;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<GlobalNamespace::GameplayModifierParamsSO*, UnityEngine::UI::Toggle*>*) == 0x8);
    // Creating value type constructor for type: GameplayModifiersPanelController
    GameplayModifiersPanelController(GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel_ = {}, TMPro::TextMeshProUGUI* totalMultiplierValueText_ = {}, TMPro::TextMeshProUGUI* maxRankValueText_ = {}, UnityEngine::Color positiveColor_ = {}, UnityEngine::Color negativeColor_ = {}, System::Action* didChangeGameplayModifiersEvent_ = {}, GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, HMUI::ToggleBinder* toggleBinder_ = {}, ::Array<GlobalNamespace::GameplayModifierToggle*>* gameplayModifierToggles_ = {}, bool changingGameplayModifierToggles_ = {}, System::Collections::Generic::Dictionary_2<GlobalNamespace::GameplayModifierParamsSO*, UnityEngine::UI::Toggle*>* toggleForGameplayModifierParam_ = {}) noexcept : gameplayModifiersModel{gameplayModifiersModel_}, totalMultiplierValueText{totalMultiplierValueText_}, maxRankValueText{maxRankValueText_}, positiveColor{positiveColor_}, negativeColor{negativeColor_}, didChangeGameplayModifiersEvent{didChangeGameplayModifiersEvent_}, gameplayModifiers{gameplayModifiers_}, toggleBinder{toggleBinder_}, gameplayModifierToggles{gameplayModifierToggles_}, changingGameplayModifierToggles{changingGameplayModifierToggles_}, toggleForGameplayModifierParam{toggleForGameplayModifierParam_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IRefreshable
    operator GlobalNamespace::IRefreshable() noexcept {
      return *reinterpret_cast<GlobalNamespace::IRefreshable*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didChangeGameplayModifiersEvent(System.Action value)
    // Offset: 0xFE81F8
    void add_didChangeGameplayModifiersEvent(System::Action* value);
    // public System.Void remove_didChangeGameplayModifiersEvent(System.Action value)
    // Offset: 0xFE829C
    void remove_didChangeGameplayModifiersEvent(System::Action* value);
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0xFE8340
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // public System.Void SetData(GameplayModifiers newGameplayModifiers)
    // Offset: 0xFE8348
    void SetData(GlobalNamespace::GameplayModifiers* newGameplayModifiers);
    // protected System.Void Awake()
    // Offset: 0xFE8350
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0xFE84BC
    void OnDestroy();
    // private System.Void SetToggleValueWithGameplayModifierParams(GameplayModifierParamsSO gameplayModifierParams, System.Boolean value)
    // Offset: 0xFE84D0
    void SetToggleValueWithGameplayModifierParams(GlobalNamespace::GameplayModifierParamsSO* gameplayModifierParams, bool value);
    // private System.Boolean GetToggleValueWithGameplayModifierParams(GameplayModifierParamsSO gameplayModifierParams)
    // Offset: 0xFE8568
    bool GetToggleValueWithGameplayModifierParams(GlobalNamespace::GameplayModifierParamsSO* gameplayModifierParams);
    // private System.Void RefreshTotalMultiplierAndRankUI()
    // Offset: 0xFE85FC
    void RefreshTotalMultiplierAndRankUI();
    // private System.Void IRefreshable.Refresh()
    // Offset: 0xFE879C
    void IRefreshable_Refresh_NEW();
    // public System.Void .ctor()
    // Offset: 0xFE88A4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplayModifiersPanelController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersPanelController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplayModifiersPanelController*, creationType>()));
    }
  }; // GameplayModifiersPanelController
  #pragma pack(pop)
  static check_size<sizeof(GameplayModifiersPanelController), 120 + sizeof(System::Collections::Generic::Dictionary_2<GlobalNamespace::GameplayModifierParamsSO*, UnityEngine::UI::Toggle*>*)> __GlobalNamespace_GameplayModifiersPanelControllerSizeCheck;
  static_assert(sizeof(GameplayModifiersPanelController) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiersPanelController*, "", "GameplayModifiersPanelController");
