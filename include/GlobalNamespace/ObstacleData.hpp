// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: ObstacleType
#include "GlobalNamespace/ObstacleType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectType
  struct BeatmapObjectType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: ObstacleData
  class ObstacleData : public GlobalNamespace::BeatmapObjectData {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDCBFAC
    // private ObstacleType <obstacleType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::ObstacleType obstacleType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ObstacleType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBFBC
    // private System.Single <duration>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDCBFCC
    // private System.Int32 <width>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ObstacleData
    ObstacleData(GlobalNamespace::ObstacleType obstacleType_ = {}, float duration_ = {}, int width_ = {}) noexcept : obstacleType{obstacleType_}, duration{duration_}, width{width_} {}
    // public ObstacleType get_obstacleType()
    // Offset: 0x23E0B5C
    GlobalNamespace::ObstacleType get_obstacleType();
    // private System.Void set_obstacleType(ObstacleType value)
    // Offset: 0x23E0B64
    void set_obstacleType(GlobalNamespace::ObstacleType value);
    // public System.Single get_duration()
    // Offset: 0x23E0B6C
    float get_duration();
    // private System.Void set_duration(System.Single value)
    // Offset: 0x23E0B74
    void set_duration(float value);
    // public System.Int32 get_width()
    // Offset: 0x23E0B7C
    int get_width();
    // private System.Void set_width(System.Int32 value)
    // Offset: 0x23E0B84
    void set_width(int value);
    // public System.Void .ctor(System.Single time, System.Int32 lineIndex, ObstacleType obstacleType, System.Single duration, System.Int32 width)
    // Offset: 0x23E0B8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObstacleData* New_ctor(float time, int lineIndex, GlobalNamespace::ObstacleType obstacleType, float duration, int width) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObstacleData*, creationType>(time, lineIndex, obstacleType, duration, width)));
    }
    // public System.Void UpdateDuration(System.Single duration)
    // Offset: 0x23E0BE4
    void UpdateDuration(float duration);
    // public override BeatmapObjectType get_beatmapObjectType()
    // Offset: 0x23E0B54
    // Implemented from: BeatmapObjectData
    // Base method: BeatmapObjectType BeatmapObjectData::get_beatmapObjectType()
    GlobalNamespace::BeatmapObjectType get_beatmapObjectType();
    // public override BeatmapObjectData GetCopy()
    // Offset: 0x23E0BEC
    // Implemented from: BeatmapObjectData
    // Base method: BeatmapObjectData BeatmapObjectData::GetCopy()
    GlobalNamespace::BeatmapObjectData* GetCopy();
    // public override System.Void MirrorLineIndex(System.Int32 lineCount)
    // Offset: 0x23E0C6C
    // Implemented from: BeatmapObjectData
    // Base method: System.Void BeatmapObjectData::MirrorLineIndex(System.Int32 lineCount)
    void MirrorLineIndex(int lineCount);
  }; // ObstacleData
  #pragma pack(pop)
  static check_size<sizeof(ObstacleData), 32 + sizeof(int)> __GlobalNamespace_ObstacleDataSizeCheck;
  static_assert(sizeof(ObstacleData) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ObstacleData*, "", "ObstacleData");
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::get_obstacleType
// Il2CppName: get_obstacleType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::set_obstacleType
// Il2CppName: set_obstacleType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::get_duration
// Il2CppName: get_duration
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::set_duration
// Il2CppName: set_duration
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::get_width
// Il2CppName: get_width
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::set_width
// Il2CppName: set_width
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::UpdateDuration
// Il2CppName: UpdateDuration
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::GetCopy
// Il2CppName: GetCopy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ObstacleData::MirrorLineIndex
// Il2CppName: MirrorLineIndex
// Cannot perform method pointer template specialization from operators!
