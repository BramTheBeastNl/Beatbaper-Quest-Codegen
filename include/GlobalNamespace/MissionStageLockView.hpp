// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: MissionStageLockView
  class MissionStageLockView : public UnityEngine::MonoBehaviour {
    public:
    // private TMPro.TMP_Text _text
    // Size: 0x8
    // Offset: 0x18
    TMPro::TMP_Text* text;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Text*) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private System.Single _dstPosY
    // Size: 0x4
    // Offset: 0x28
    float dstPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _animationDuration
    // Size: 0x4
    // Offset: 0x2C
    float animationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startAnimationTime
    // Size: 0x4
    // Offset: 0x30
    float startAnimationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MissionStageLockView
    MissionStageLockView(TMPro::TMP_Text* text_ = {}, UnityEngine::RectTransform* rectTransform_ = {}, float dstPosY_ = {}, float animationDuration_ = {}, float startAnimationTime_ = {}) noexcept : text{text_}, rectTransform{rectTransform_}, dstPosY{dstPosY_}, animationDuration{animationDuration_}, startAnimationTime{startAnimationTime_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void UpdateLocalPositionY(System.Single dstPosY, System.Boolean animated, System.Single animationDuration)
    // Offset: 0x109CFF0
    void UpdateLocalPositionY(float dstPosY, bool animated, float animationDuration);
    // protected System.Void Update()
    // Offset: 0x109D094
    void Update();
    // public System.Void UpdateStageLockText(System.String text)
    // Offset: 0x109D1E8
    void UpdateStageLockText(::Il2CppString* text);
    // public System.Void .ctor()
    // Offset: 0x109D204
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MissionStageLockView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStageLockView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MissionStageLockView*, creationType>()));
    }
  }; // MissionStageLockView
  #pragma pack(pop)
  static check_size<sizeof(MissionStageLockView), 48 + sizeof(float)> __GlobalNamespace_MissionStageLockViewSizeCheck;
  static_assert(sizeof(MissionStageLockView) == 0x34);
  // Writing MetadataGetter for method: MissionStageLockView::UpdateLocalPositionY
  // Il2CppName: UpdateLocalPositionY
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)(float, bool, float)>(&MissionStageLockView::UpdateLocalPositionY)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), "UpdateLocalPositionY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: MissionStageLockView::Update
  // Il2CppName: Update
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)()>(&MissionStageLockView::Update)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MissionStageLockView::UpdateStageLockText
  // Il2CppName: UpdateStageLockText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)(::Il2CppString*)>(&MissionStageLockView::UpdateStageLockText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), "UpdateStageLockText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: MissionStageLockView::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)()>(&MissionStageLockView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)()>(&MissionStageLockView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MissionStageLockView*, "", "MissionStageLockView");
