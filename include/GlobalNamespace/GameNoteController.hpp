// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: IGameNoteControllerInitializable`1
#include "GlobalNamespace/IGameNoteControllerInitializable_1.hpp"
// Including type: IGameNoteTypeProvider
#include "GlobalNamespace/IGameNoteTypeProvider.hpp"
// Including type: ISaberSwingRatingCounterDidFinishReceiver
#include "GlobalNamespace/ISaberSwingRatingCounterDidFinishReceiver.hpp"
// Including type: SaberSwingRatingCounter
#include "GlobalNamespace/SaberSwingRatingCounter.hpp"
// Including type: GameNoteController/GameNoteType
#include "GlobalNamespace/GameNoteController_GameNoteType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoxCuttableBySaber
  class BoxCuttableBySaber;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: Saber
  class Saber;
  // Skipping declaration: ISaberSwingRatingCounter because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB4
  #pragma pack(push, 1)
  // Autogenerated type: GameNoteController
  // [] Offset: FFFFFFFF
  class GameNoteController : public GlobalNamespace::NoteController/*, public GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>, public GlobalNamespace::IGameNoteTypeProvider, public GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver*/ {
    public:
    // Nested type: GlobalNamespace::GameNoteController::Pool
    class Pool;
    // private BoxCuttableBySaber[] _bigCuttableBySaberList
    // Size: 0x8
    // Offset: 0x78
    ::Array<GlobalNamespace::BoxCuttableBySaber*>* bigCuttableBySaberList;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::BoxCuttableBySaber*>*) == 0x8);
    // private BoxCuttableBySaber[] _smallCuttableBySaberList
    // Size: 0x8
    // Offset: 0x80
    ::Array<GlobalNamespace::BoxCuttableBySaber*>* smallCuttableBySaberList;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::BoxCuttableBySaber*>*) == 0x8);
    // private UnityEngine.GameObject _wrapperGO
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::GameObject* wrapperGO;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [InjectAttribute] Offset: 0xD2319C
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xD231AC
    // private readonly SaberSwingRatingCounter/Pool _saberSwingRatingCounterPool
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::SaberSwingRatingCounter::Pool* saberSwingRatingCounterPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberSwingRatingCounter::Pool*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD231BC
    // private System.Action`1<GameNoteController> gameNoteControllerDidInitEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action_1<GlobalNamespace::GameNoteController*>* gameNoteControllerDidInitEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::GameNoteController*>*) == 0x8);
    // private GameNoteController/GameNoteType _gameNoteType
    // Size: 0x4
    // Offset: 0xA8
    GlobalNamespace::GameNoteController_GameNoteType gameNoteType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameNoteController_GameNoteType) == 0x4);
    // private System.Boolean _hidden
    // Size: 0x1
    // Offset: 0xAC
    bool hidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hidden and: cutAngleTolerance
    char __padding7[0x3] = {};
    // private System.Single _cutAngleTolerance
    // Size: 0x4
    // Offset: 0xB0
    float cutAngleTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: GameNoteController
    GameNoteController(::Array<GlobalNamespace::BoxCuttableBySaber*>* bigCuttableBySaberList_ = {}, ::Array<GlobalNamespace::BoxCuttableBySaber*>* smallCuttableBySaberList_ = {}, UnityEngine::GameObject* wrapperGO_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, GlobalNamespace::SaberSwingRatingCounter::Pool* saberSwingRatingCounterPool_ = {}, System::Action_1<GlobalNamespace::GameNoteController*>* gameNoteControllerDidInitEvent_ = {}, GlobalNamespace::GameNoteController_GameNoteType gameNoteType_ = {}, bool hidden_ = {}, float cutAngleTolerance_ = {}) noexcept : bigCuttableBySaberList{bigCuttableBySaberList_}, smallCuttableBySaberList{smallCuttableBySaberList_}, wrapperGO{wrapperGO_}, audioTimeSyncController{audioTimeSyncController_}, saberSwingRatingCounterPool{saberSwingRatingCounterPool_}, gameNoteControllerDidInitEvent{gameNoteControllerDidInitEvent_}, gameNoteType{gameNoteType_}, hidden{hidden_}, cutAngleTolerance{cutAngleTolerance_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>
    operator GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>() noexcept {
      return *reinterpret_cast<GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IGameNoteTypeProvider
    operator GlobalNamespace::IGameNoteTypeProvider() noexcept {
      return *reinterpret_cast<GlobalNamespace::IGameNoteTypeProvider*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver
    operator GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver() noexcept {
      return *reinterpret_cast<GlobalNamespace::ISaberSwingRatingCounterDidFinishReceiver*>(this);
    }
    // public System.Void add_gameNoteControllerDidInitEvent(System.Action`1<GameNoteController> value)
    // Offset: 0xF21360
    void add_gameNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::GameNoteController*>* value);
    // public System.Void remove_gameNoteControllerDidInitEvent(System.Action`1<GameNoteController> value)
    // Offset: 0xF21404
    void remove_gameNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::GameNoteController*>* value);
    // public GameNoteController/GameNoteType get_gameNoteType()
    // Offset: 0xF214A8
    GlobalNamespace::GameNoteController_GameNoteType get_gameNoteType();
    // public System.Void Init(NoteData noteData, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, GameNoteController/GameNoteType gameNoteType, System.Single cutDirectionAngleOffset, System.Single cutAngleTolerance, System.Single uniformScale)
    // Offset: 0xF2150C
    void Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, GlobalNamespace::GameNoteController_GameNoteType gameNoteType, float cutDirectionAngleOffset, float cutAngleTolerance, float uniformScale);
    // private System.Void HandleBigWasCutBySaber(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0xF21CA8
    void HandleBigWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // private System.Void HandleSmallWasCutBySaber(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0xF220D4
    void HandleSmallWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // private System.Void HandleCut(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec, System.Boolean allowBadCut)
    // Offset: 0xF21CC0
    void HandleCut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec, bool allowBadCut);
    // public System.Void HandleSaberSwingRatingCounterDidFinish(ISaberSwingRatingCounter saberSwingRatingCounter)
    // Offset: 0xF220EC
    void HandleSaberSwingRatingCounterDidFinish(GlobalNamespace::ISaberSwingRatingCounter* saberSwingRatingCounter);
    // public override System.Void set_hide(System.Boolean value)
    // Offset: 0xF214B0
    // Implemented from: NoteController
    // Base method: System.Void NoteController::set_hide(System.Boolean value)
    void set_hide(bool value);
    // public override System.Boolean get_hide()
    // Offset: 0xF214F4
    // Implemented from: NoteController
    // Base method: System.Boolean NoteController::get_hide()
    bool get_hide();
    // public override System.Void set_pause(System.Boolean value)
    // Offset: 0xF214FC
    // Implemented from: NoteController
    // Base method: System.Void NoteController::set_pause(System.Boolean value)
    void set_pause(bool value);
    // protected override System.Void Awake()
    // Offset: 0xF217C8
    // Implemented from: NoteController
    // Base method: System.Void NoteController::Awake()
    void Awake();
    // protected override System.Void OnDestroy()
    // Offset: 0xF2192C
    // Implemented from: NoteController
    // Base method: System.Void NoteController::OnDestroy()
    void OnDestroy();
    // protected override System.Void NoteDidPassMissedMarker()
    // Offset: 0xF21B08
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidPassMissedMarker()
    void NoteDidPassMissedMarker();
    // protected override System.Void NoteDidStartDissolving()
    // Offset: 0xF21BDC
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidStartDissolving()
    void NoteDidStartDissolving();
    // protected override System.Void NoteDidStartJump()
    // Offset: 0xF2221C
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidStartJump()
    void NoteDidStartJump();
    // public System.Void .ctor()
    // Offset: 0xF222E8
    // Implemented from: NoteController
    // Base method: System.Void NoteController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameNoteController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameNoteController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameNoteController*, creationType>()));
    }
  }; // GameNoteController
  #pragma pack(pop)
  static check_size<sizeof(GameNoteController), 176 + sizeof(float)> __GlobalNamespace_GameNoteControllerSizeCheck;
  static_assert(sizeof(GameNoteController) == 0xB4);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameNoteController*, "", "GameNoteController");
