// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockBeatmapDataConverter
#include "GlobalNamespace/MockBeatmapDataConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: MockNoteData
  class MockNoteData;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: MockObstacleData
  class MockObstacleData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: MockBeatmapDataConverter/<>c
  // [CompilerGeneratedAttribute] Offset: E121B8
  class MockBeatmapDataConverter::$$c : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: $$c
    $$c() noexcept {}
    // Get static field: static public readonly MockBeatmapDataConverter/<>c <>9
    static GlobalNamespace::MockBeatmapDataConverter::$$c* _get_$$9();
    // Set static field: static public readonly MockBeatmapDataConverter/<>c <>9
    static void _set_$$9(GlobalNamespace::MockBeatmapDataConverter::$$c* value);
    // Get static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_0
    static System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* _get_$$9__0_0();
    // Set static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_0
    static void _set_$$9__0_0(System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* value);
    // Get static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_1
    static System::Func_2<GlobalNamespace::NoteData*, bool>* _get_$$9__0_1();
    // Set static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_1
    static void _set_$$9__0_1(System::Func_2<GlobalNamespace::NoteData*, bool>* value);
    // Get static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_2
    static System::Func_2<GlobalNamespace::NoteData*, GlobalNamespace::MockNoteData*>* _get_$$9__0_2();
    // Set static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_2
    static void _set_$$9__0_2(System::Func_2<GlobalNamespace::NoteData*, GlobalNamespace::MockNoteData*>* value);
    // Get static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_3
    static System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* _get_$$9__0_3();
    // Set static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_3
    static void _set_$$9__0_3(System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* value);
    // Get static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_4
    static System::Func_2<GlobalNamespace::NoteData*, bool>* _get_$$9__0_4();
    // Set static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_4
    static void _set_$$9__0_4(System::Func_2<GlobalNamespace::NoteData*, bool>* value);
    // Get static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_5
    static System::Func_2<GlobalNamespace::NoteData*, GlobalNamespace::MockNoteData*>* _get_$$9__0_5();
    // Set static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_5
    static void _set_$$9__0_5(System::Func_2<GlobalNamespace::NoteData*, GlobalNamespace::MockNoteData*>* value);
    // Get static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_6
    static System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* _get_$$9__0_6();
    // Set static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_6
    static void _set_$$9__0_6(System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* value);
    // Get static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_7
    static System::Func_2<GlobalNamespace::NoteData*, bool>* _get_$$9__0_7();
    // Set static field: static public System.Func`2<NoteData,System.Boolean> <>9__0_7
    static void _set_$$9__0_7(System::Func_2<GlobalNamespace::NoteData*, bool>* value);
    // Get static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_8
    static System::Func_2<GlobalNamespace::NoteData*, GlobalNamespace::MockNoteData*>* _get_$$9__0_8();
    // Set static field: static public System.Func`2<NoteData,MockNoteData> <>9__0_8
    static void _set_$$9__0_8(System::Func_2<GlobalNamespace::NoteData*, GlobalNamespace::MockNoteData*>* value);
    // Get static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_9
    static System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* _get_$$9__0_9();
    // Set static field: static public System.Func`2<BeatmapObjectData,System.Boolean> <>9__0_9
    static void _set_$$9__0_9(System::Func_2<GlobalNamespace::BeatmapObjectData*, bool>* value);
    // Get static field: static public System.Func`2<ObstacleData,MockObstacleData> <>9__0_10
    static System::Func_2<GlobalNamespace::ObstacleData*, GlobalNamespace::MockObstacleData*>* _get_$$9__0_10();
    // Set static field: static public System.Func`2<ObstacleData,MockObstacleData> <>9__0_10
    static void _set_$$9__0_10(System::Func_2<GlobalNamespace::ObstacleData*, GlobalNamespace::MockObstacleData*>* value);
    // static private System.Void .cctor()
    // Offset: 0x109E3C0
    static void _cctor();
    // System.Boolean <ToMockBeatmapData>b__0_0(BeatmapObjectData bod)
    // Offset: 0x109E42C
    bool $ToMockBeatmapData$b__0_0(GlobalNamespace::BeatmapObjectData* bod);
    // System.Boolean <ToMockBeatmapData>b__0_1(NoteData nd)
    // Offset: 0x109E45C
    bool $ToMockBeatmapData$b__0_1(GlobalNamespace::NoteData* nd);
    // MockNoteData <ToMockBeatmapData>b__0_2(NoteData nd)
    // Offset: 0x109E47C
    GlobalNamespace::MockNoteData* $ToMockBeatmapData$b__0_2(GlobalNamespace::NoteData* nd);
    // System.Boolean <ToMockBeatmapData>b__0_3(BeatmapObjectData bod)
    // Offset: 0x109E484
    bool $ToMockBeatmapData$b__0_3(GlobalNamespace::BeatmapObjectData* bod);
    // System.Boolean <ToMockBeatmapData>b__0_4(NoteData nd)
    // Offset: 0x109E4B4
    bool $ToMockBeatmapData$b__0_4(GlobalNamespace::NoteData* nd);
    // MockNoteData <ToMockBeatmapData>b__0_5(NoteData nd)
    // Offset: 0x109E4D4
    GlobalNamespace::MockNoteData* $ToMockBeatmapData$b__0_5(GlobalNamespace::NoteData* nd);
    // System.Boolean <ToMockBeatmapData>b__0_6(BeatmapObjectData bod)
    // Offset: 0x109E4DC
    bool $ToMockBeatmapData$b__0_6(GlobalNamespace::BeatmapObjectData* bod);
    // System.Boolean <ToMockBeatmapData>b__0_7(NoteData nd)
    // Offset: 0x109E50C
    bool $ToMockBeatmapData$b__0_7(GlobalNamespace::NoteData* nd);
    // MockNoteData <ToMockBeatmapData>b__0_8(NoteData nd)
    // Offset: 0x109E52C
    GlobalNamespace::MockNoteData* $ToMockBeatmapData$b__0_8(GlobalNamespace::NoteData* nd);
    // System.Boolean <ToMockBeatmapData>b__0_9(BeatmapObjectData bod)
    // Offset: 0x109E534
    bool $ToMockBeatmapData$b__0_9(GlobalNamespace::BeatmapObjectData* bod);
    // MockObstacleData <ToMockBeatmapData>b__0_10(ObstacleData od)
    // Offset: 0x109E564
    GlobalNamespace::MockObstacleData* $ToMockBeatmapData$b__0_10(GlobalNamespace::ObstacleData* od);
    // public System.Void .ctor()
    // Offset: 0x109E424
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockBeatmapDataConverter::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapDataConverter::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockBeatmapDataConverter::$$c*, creationType>()));
    }
  }; // MockBeatmapDataConverter/<>c
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockBeatmapDataConverter::$$c*, "", "MockBeatmapDataConverter/<>c");
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::MockBeatmapDataConverter::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_0
// Il2CppName: <ToMockBeatmapData>b__0_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_1
// Il2CppName: <ToMockBeatmapData>b__0_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_2
// Il2CppName: <ToMockBeatmapData>b__0_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MockNoteData* (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_3
// Il2CppName: <ToMockBeatmapData>b__0_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_4
// Il2CppName: <ToMockBeatmapData>b__0_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_5
// Il2CppName: <ToMockBeatmapData>b__0_5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MockNoteData* (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_5)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_6
// Il2CppName: <ToMockBeatmapData>b__0_6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_6)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_7
// Il2CppName: <ToMockBeatmapData>b__0_7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_7)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_8
// Il2CppName: <ToMockBeatmapData>b__0_8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MockNoteData* (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_8)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_9
// Il2CppName: <ToMockBeatmapData>b__0_9
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_9)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_9", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_10
// Il2CppName: <ToMockBeatmapData>b__0_10
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MockObstacleData* (GlobalNamespace::MockBeatmapDataConverter::$$c::*)(GlobalNamespace::ObstacleData*)>(&GlobalNamespace::MockBeatmapDataConverter::$$c::$ToMockBeatmapData$b__0_10)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), "<ToMockBeatmapData>b__0_10", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ObstacleData*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapDataConverter::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockBeatmapDataConverter::$$c::*)()>(&GlobalNamespace::MockBeatmapDataConverter::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockBeatmapDataConverter::$$c::*)()>(&GlobalNamespace::MockBeatmapDataConverter::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapDataConverter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
