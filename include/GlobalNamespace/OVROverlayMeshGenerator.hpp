// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: OVROverlay/OverlayShape
#include "GlobalNamespace/OVROverlay.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVROverlay because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshCollider
  class MeshCollider;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD1
  #pragma pack(push, 1)
  // Autogenerated type: OVROverlayMeshGenerator
  // [RequireComponent] Offset: DCDBC0
  // [RequireComponent] Offset: DCDBC0
  // [ExecuteInEditMode] Offset: DCDBC0
  class OVROverlayMeshGenerator : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::OVROverlayMeshGenerator::CubeFace
    struct CubeFace;
    // private UnityEngine.Mesh _Mesh
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Mesh* Mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector3> _Verts
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<UnityEngine::Vector3>* Verts;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Vector3>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Vector2> _UV
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::List_1<UnityEngine::Vector2>* UV;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Vector2>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> _Tris
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::List_1<int>* Tris;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<int>*) == 0x8);
    // private OVROverlay _Overlay
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::OVROverlay* Overlay;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVROverlay*) == 0x8);
    // private UnityEngine.MeshFilter _MeshFilter
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::MeshFilter* MeshFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.MeshCollider _MeshCollider
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::MeshCollider* MeshCollider;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshCollider*) == 0x8);
    // private UnityEngine.MeshRenderer _MeshRenderer
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::MeshRenderer* MeshRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Transform _CameraRoot
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Transform* CameraRoot;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _Transform
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Transform* Transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private OVROverlay/OverlayShape _LastShape
    // Size: 0x4
    // Offset: 0x68
    GlobalNamespace::OVROverlay::OverlayShape LastShape;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVROverlay::OverlayShape) == 0x4);
    // private UnityEngine.Vector3 _LastPosition
    // Size: 0xC
    // Offset: 0x6C
    UnityEngine::Vector3 LastPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _LastRotation
    // Size: 0x10
    // Offset: 0x78
    UnityEngine::Quaternion LastRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _LastScale
    // Size: 0xC
    // Offset: 0x88
    UnityEngine::Vector3 LastScale;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Rect _LastDestRectLeft
    // Size: 0x10
    // Offset: 0x94
    UnityEngine::Rect LastDestRectLeft;
    // Field size check
    static_assert(sizeof(UnityEngine::Rect) == 0x10);
    // private UnityEngine.Rect _LastDestRectRight
    // Size: 0x10
    // Offset: 0xA4
    UnityEngine::Rect LastDestRectRight;
    // Field size check
    static_assert(sizeof(UnityEngine::Rect) == 0x10);
    // private UnityEngine.Rect _LastSrcRectLeft
    // Size: 0x10
    // Offset: 0xB4
    UnityEngine::Rect LastSrcRectLeft;
    // Field size check
    static_assert(sizeof(UnityEngine::Rect) == 0x10);
    // Padding between fields: LastSrcRectLeft and: LastTexture
    char __padding16[0x4] = {};
    // private UnityEngine.Texture _LastTexture
    // Size: 0x8
    // Offset: 0xC8
    UnityEngine::Texture* LastTexture;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // private System.Boolean _Awake
    // Size: 0x1
    // Offset: 0xD0
    bool Awake_;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OVROverlayMeshGenerator
    OVROverlayMeshGenerator(UnityEngine::Mesh* Mesh_ = {}, System::Collections::Generic::List_1<UnityEngine::Vector3>* Verts_ = {}, System::Collections::Generic::List_1<UnityEngine::Vector2>* UV_ = {}, System::Collections::Generic::List_1<int>* Tris_ = {}, GlobalNamespace::OVROverlay* Overlay_ = {}, UnityEngine::MeshFilter* MeshFilter_ = {}, UnityEngine::MeshCollider* MeshCollider_ = {}, UnityEngine::MeshRenderer* MeshRenderer_ = {}, UnityEngine::Transform* CameraRoot_ = {}, UnityEngine::Transform* Transform_ = {}, GlobalNamespace::OVROverlay::OverlayShape LastShape_ = {}, UnityEngine::Vector3 LastPosition_ = {}, UnityEngine::Quaternion LastRotation_ = {}, UnityEngine::Vector3 LastScale_ = {}, UnityEngine::Rect LastDestRectLeft_ = {}, UnityEngine::Rect LastDestRectRight_ = {}, UnityEngine::Rect LastSrcRectLeft_ = {}, UnityEngine::Texture* LastTexture_ = {}, bool Awake__ = {}) noexcept : Mesh{Mesh_}, Verts{Verts_}, UV{UV_}, Tris{Tris_}, Overlay{Overlay_}, MeshFilter{MeshFilter_}, MeshCollider{MeshCollider_}, MeshRenderer{MeshRenderer_}, CameraRoot{CameraRoot_}, Transform{Transform_}, LastShape{LastShape_}, LastPosition{LastPosition_}, LastRotation{LastRotation_}, LastScale{LastScale_}, LastDestRectLeft{LastDestRectLeft_}, LastDestRectRight{LastDestRectRight_}, LastSrcRectLeft{LastSrcRectLeft_}, LastTexture{LastTexture_}, Awake_{Awake__} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly UnityEngine.Vector3[] BottomLeft
    static ::Array<UnityEngine::Vector3>* _get_BottomLeft();
    // Set static field: static private readonly UnityEngine.Vector3[] BottomLeft
    static void _set_BottomLeft(::Array<UnityEngine::Vector3>* value);
    // Get static field: static private readonly UnityEngine.Vector3[] RightVector
    static ::Array<UnityEngine::Vector3>* _get_RightVector();
    // Set static field: static private readonly UnityEngine.Vector3[] RightVector
    static void _set_RightVector(::Array<UnityEngine::Vector3>* value);
    // Get static field: static private readonly UnityEngine.Vector3[] UpVector
    static ::Array<UnityEngine::Vector3>* _get_UpVector();
    // Set static field: static private readonly UnityEngine.Vector3[] UpVector
    static void _set_UpVector(::Array<UnityEngine::Vector3>* value);
    // protected System.Void Awake()
    // Offset: 0x12DE7A8
    void Awake();
    // public System.Void SetOverlay(OVROverlay overlay)
    // Offset: 0x12DE908
    void SetOverlay(GlobalNamespace::OVROverlay* overlay);
    // private UnityEngine.Rect GetBoundingRect(UnityEngine.Rect a, UnityEngine.Rect b)
    // Offset: 0x12DE910
    UnityEngine::Rect GetBoundingRect(UnityEngine::Rect a, UnityEngine::Rect b);
    // protected System.Void OnEnable()
    // Offset: 0x12DEACC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x12DEAD0
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x12DEAD4
    void Update();
    // private System.Void UpdateMesh(OVROverlay/OverlayShape shape, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale, UnityEngine.Rect rect)
    // Offset: 0x12DF1C4
    void UpdateMesh(GlobalNamespace::OVROverlay::OverlayShape shape, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Vector3 scale, UnityEngine::Rect rect);
    // static public System.Void GenerateMesh(System.Collections.Generic.List`1<UnityEngine.Vector3> verts, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Collections.Generic.List`1<System.Int32> tris, OVROverlay/OverlayShape shape, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale, UnityEngine.Rect rect)
    // Offset: 0x12DF498
    static void GenerateMesh(System::Collections::Generic::List_1<UnityEngine::Vector3>* verts, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs, System::Collections::Generic::List_1<int>* tris, GlobalNamespace::OVROverlay::OverlayShape shape, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Vector3 scale, UnityEngine::Rect rect);
    // static private UnityEngine.Vector2 GetSphereUV(System.Single theta, System.Single phi, System.Single expand_coef)
    // Offset: 0x12E06F4
    static UnityEngine::Vector2 GetSphereUV(float theta, float phi, float expand_coef);
    // static private UnityEngine.Vector3 GetSphereVert(System.Single theta, System.Single phi)
    // Offset: 0x12E0754
    static UnityEngine::Vector3 GetSphereVert(float theta, float phi);
    // static public System.Void BuildSphere(System.Collections.Generic.List`1<UnityEngine.Vector3> verts, System.Collections.Generic.List`1<UnityEngine.Vector2> uv, System.Collections.Generic.List`1<System.Int32> triangles, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale, UnityEngine.Rect rect, System.Single worldScale, System.Int32 latitudes, System.Int32 longitudes, System.Single expand_coef)
    // Offset: 0x12DF818
    static void BuildSphere(System::Collections::Generic::List_1<UnityEngine::Vector3>* verts, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv, System::Collections::Generic::List_1<int>* triangles, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Vector3 scale, UnityEngine::Rect rect, float worldScale, int latitudes, int longitudes, float expand_coef);
    // static private UnityEngine.Vector2 GetCubeUV(OVROverlayMeshGenerator/CubeFace face, UnityEngine.Vector2 sideUV, System.Single expand_coef)
    // Offset: 0x12E083C
    static UnityEngine::Vector2 GetCubeUV(GlobalNamespace::OVROverlayMeshGenerator::CubeFace face, UnityEngine::Vector2 sideUV, float expand_coef);
    // static private UnityEngine.Vector3 GetCubeVert(OVROverlayMeshGenerator/CubeFace face, UnityEngine.Vector2 sideUV, System.Single expand_coef)
    // Offset: 0x12E0A28
    static UnityEngine::Vector3 GetCubeVert(GlobalNamespace::OVROverlayMeshGenerator::CubeFace face, UnityEngine::Vector2 sideUV, float expand_coef);
    // static public System.Void BuildCube(System.Collections.Generic.List`1<UnityEngine.Vector3> verts, System.Collections.Generic.List`1<UnityEngine.Vector2> uv, System.Collections.Generic.List`1<System.Int32> triangles, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale, System.Single worldScale, System.Int32 subQuads, System.Single expand_coef)
    // Offset: 0x12DFCD0
    static void BuildCube(System::Collections::Generic::List_1<UnityEngine::Vector3>* verts, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv, System::Collections::Generic::List_1<int>* triangles, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Vector3 scale, float worldScale, int subQuads, float expand_coef);
    // static public System.Void BuildQuad(System.Collections.Generic.List`1<UnityEngine.Vector3> verts, System.Collections.Generic.List`1<UnityEngine.Vector2> uv, System.Collections.Generic.List`1<System.Int32> triangles, UnityEngine.Rect rect)
    // Offset: 0x12DFFF8
    static void BuildQuad(System::Collections::Generic::List_1<UnityEngine::Vector3>* verts, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv, System::Collections::Generic::List_1<int>* triangles, UnityEngine::Rect rect);
    // static public System.Void BuildHemicylinder(System.Collections.Generic.List`1<UnityEngine.Vector3> verts, System.Collections.Generic.List`1<UnityEngine.Vector2> uv, System.Collections.Generic.List`1<System.Int32> triangles, UnityEngine.Vector3 scale, UnityEngine.Rect rect, System.Int32 longitudes)
    // Offset: 0x12E0350
    static void BuildHemicylinder(System::Collections::Generic::List_1<UnityEngine::Vector3>* verts, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv, System::Collections::Generic::List_1<int>* triangles, UnityEngine::Vector3 scale, UnityEngine::Rect rect, int longitudes);
    // public System.Void .ctor()
    // Offset: 0x12E0BDC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVROverlayMeshGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVROverlayMeshGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVROverlayMeshGenerator*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x12E0C9C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // OVROverlayMeshGenerator
  #pragma pack(pop)
  static check_size<sizeof(OVROverlayMeshGenerator), 208 + sizeof(bool)> __GlobalNamespace_OVROverlayMeshGeneratorSizeCheck;
  static_assert(sizeof(OVROverlayMeshGenerator) == 0xD1);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVROverlayMeshGenerator*, "", "OVROverlayMeshGenerator");
