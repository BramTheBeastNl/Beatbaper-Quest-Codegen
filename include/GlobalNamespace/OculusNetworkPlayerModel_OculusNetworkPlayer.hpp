// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusNetworkPlayerModel
#include "GlobalNamespace/OculusNetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: Room
  class Room;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDifficultyMask
  struct BeatmapDifficultyMask;
  // Forward declaring type: GameplayModifierMask
  struct GameplayModifierMask;
  // Forward declaring type: SongPackMask
  struct SongPackMask;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4E
  #pragma pack(push, 1)
  // Autogenerated type: OculusNetworkPlayerModel/OculusNetworkPlayer
  // [] Offset: FFFFFFFF
  class OculusNetworkPlayerModel::OculusNetworkPlayer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly OculusNetworkPlayerModel _playerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::OculusNetworkPlayerModel* playerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OculusNetworkPlayerModel*) == 0x8);
    // private readonly System.UInt64 _id
    // Size: 0x8
    // Offset: 0x18
    uint64_t id;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Boolean _isMe
    // Size: 0x1
    // Offset: 0x30
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean removed
    // Size: 0x1
    // Offset: 0x31
    bool removed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: removed and: inviteToken
    char __padding5[0x6] = {};
    // public System.String inviteToken
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* inviteToken;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public Oculus.Platform.Models.Room room
    // Size: 0x8
    // Offset: 0x40
    Oculus::Platform::Models::Room* room;
    // Field size check
    static_assert(sizeof(Oculus::Platform::Models::Room*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3241C
    // private System.Boolean <isPlayer>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool isPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD3242C
    // private System.Boolean <isSpectating>k__BackingField
    // Size: 0x1
    // Offset: 0x49
    bool isSpectating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD3243C
    // private System.Boolean <isDedicatedServer>k__BackingField
    // Size: 0x1
    // Offset: 0x4A
    bool isDedicatedServer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD3244C
    // private System.Boolean <isConnected>k__BackingField
    // Size: 0x1
    // Offset: 0x4B
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD3245C
    // private System.Boolean <isWaitingOnJoin>k__BackingField
    // Size: 0x1
    // Offset: 0x4C
    bool isWaitingOnJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD3246C
    // private System.Boolean <isWaitingOnInvite>k__BackingField
    // Size: 0x1
    // Offset: 0x4D
    bool isWaitingOnInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OculusNetworkPlayer
    OculusNetworkPlayer(GlobalNamespace::OculusNetworkPlayerModel* playerModel_ = {}, uint64_t id_ = {}, ::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, bool isMe_ = {}, bool removed_ = {}, ::Il2CppString* inviteToken_ = {}, Oculus::Platform::Models::Room* room_ = {}, bool isPlayer_ = {}, bool isSpectating_ = {}, bool isDedicatedServer_ = {}, bool isConnected_ = {}, bool isWaitingOnJoin_ = {}, bool isWaitingOnInvite_ = {}) noexcept : playerModel{playerModel_}, id{id_}, userId{userId_}, userName{userName_}, isMe{isMe_}, removed{removed_}, inviteToken{inviteToken_}, room{room_}, isPlayer{isPlayer_}, isSpectating{isSpectating_}, isDedicatedServer{isDedicatedServer_}, isConnected{isConnected_}, isWaitingOnJoin{isWaitingOnJoin_}, isWaitingOnInvite{isWaitingOnInvite_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // public System.UInt64 get_id()
    // Offset: 0x10D64B0
    uint64_t get_id();
    // public System.String get_userId()
    // Offset: 0x10D64B8
    ::Il2CppString* get_userId_NEW();
    // public System.String get_userName()
    // Offset: 0x10D64C0
    ::Il2CppString* get_userName_NEW();
    // public System.Boolean get_isMe()
    // Offset: 0x10D64C8
    bool get_isMe_NEW();
    // public System.Boolean get_isPartyOwner()
    // Offset: 0x10D3650
    bool get_isPartyOwner();
    // public System.Boolean get_isRoomOwner()
    // Offset: 0x10D64D0
    bool get_isRoomOwner();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x10D656C
    int get_currentPartySize_NEW();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x10D6638
    int get_maxPartySize_NEW();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x10D66F0
    GlobalNamespace::BeatmapDifficultyMask get_difficulties_NEW();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x10D6794
    GlobalNamespace::GameplayModifierMask get_modifiers_NEW();
    // public SongPackMask get_songPacks()
    // Offset: 0x10D6838
    GlobalNamespace::SongPackMask get_songPacks_NEW();
    // public System.Void .ctor(OculusNetworkPlayerModel playerModel, System.UInt64 id, System.String userName, System.Boolean isMe)
    // Offset: 0x10D4944
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusNetworkPlayerModel::OculusNetworkPlayer* New_ctor(GlobalNamespace::OculusNetworkPlayerModel* playerModel, uint64_t id, ::Il2CppString* userName, bool isMe) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusNetworkPlayerModel::OculusNetworkPlayer*, creationType>(playerModel, id, userName, isMe)));
    }
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x10D68E0
    bool get_isMyPartyOwner_NEW();
    // public System.Boolean get_isOpenParty()
    // Offset: 0x10D695C
    bool get_isOpenParty_NEW();
    // public System.Boolean get_isPlayer()
    // Offset: 0x10D697C
    bool get_isPlayer_NEW();
    // public System.Void set_isPlayer(System.Boolean value)
    // Offset: 0x10D6984
    void set_isPlayer(bool value);
    // public System.Boolean get_isSpectating()
    // Offset: 0x10D6990
    bool get_isSpectating_NEW();
    // public System.Void set_isSpectating(System.Boolean value)
    // Offset: 0x10D6998
    void set_isSpectating(bool value);
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x10D69A4
    bool get_isDedicatedServer_NEW();
    // public System.Void set_isDedicatedServer(System.Boolean value)
    // Offset: 0x10D69AC
    void set_isDedicatedServer(bool value);
    // public System.Boolean get_isConnected()
    // Offset: 0x10D69B8
    bool get_isConnected_NEW();
    // public System.Void set_isConnected(System.Boolean value)
    // Offset: 0x10D69C0
    void set_isConnected(bool value);
    // public System.Boolean get_canJoin()
    // Offset: 0x10D69CC
    bool get_canJoin_NEW();
    // public System.Void Join()
    // Offset: 0x10D69EC
    void Join_NEW();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x10D6AD0
    bool get_requiresPassword_NEW();
    // public System.Void Join(System.String password)
    // Offset: 0x10D6AD8
    void Join_NEW(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x10D6ADC
    bool get_isWaitingOnJoin_NEW();
    // private System.Void set_isWaitingOnJoin(System.Boolean value)
    // Offset: 0x10D6AE4
    void set_isWaitingOnJoin(bool value);
    // public System.Boolean get_canInvite()
    // Offset: 0x10D6AF0
    bool get_canInvite_NEW();
    // public System.Void Invite()
    // Offset: 0x10D6B70
    void Invite_NEW();
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x10D6BDC
    bool get_isWaitingOnInvite_NEW();
    // public System.Void set_isWaitingOnInvite(System.Boolean value)
    // Offset: 0x10D6BE4
    void set_isWaitingOnInvite(bool value);
    // public System.Boolean get_canKick()
    // Offset: 0x10D6BF0
    bool get_canKick_NEW();
    // public System.Void Kick()
    // Offset: 0x10D6C6C
    void Kick_NEW();
    // public System.Boolean get_canLeave()
    // Offset: 0x10D6D88
    bool get_canLeave_NEW();
    // public System.Void Leave()
    // Offset: 0x10D6E24
    void Leave_NEW();
    // public System.Boolean get_canBlock()
    // Offset: 0x10D6E48
    bool get_canBlock_NEW();
    // public System.Void Block()
    // Offset: 0x10D6E50
    void Block_NEW();
    // public System.Boolean get_canUnblock()
    // Offset: 0x10D6E54
    bool get_canUnblock_NEW();
    // public System.Void Unblock()
    // Offset: 0x10D6E5C
    void Unblock_NEW();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x10D6E60
    void SendJoinResponse_NEW(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x10D6EC0
    void SendInviteResponse_NEW(bool accept);
    // public System.Boolean SameRoomAs(OculusNetworkPlayerModel/OculusNetworkPlayer other)
    // Offset: 0x10D50F4
    bool SameRoomAs(GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* other);
    // private System.Void <Join>b__53_0(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> result)
    // Offset: 0x10D6ECC
    void $Join$b__53_0(Oculus::Platform::Message_1<Oculus::Platform::Models::Room*>* result);
  }; // OculusNetworkPlayerModel/OculusNetworkPlayer
  #pragma pack(pop)
  static check_size<sizeof(OculusNetworkPlayerModel::OculusNetworkPlayer), 77 + sizeof(bool)> __GlobalNamespace_OculusNetworkPlayerModel_OculusNetworkPlayerSizeCheck;
  static_assert(sizeof(OculusNetworkPlayerModel::OculusNetworkPlayer) == 0x4E);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*, "", "OculusNetworkPlayerModel/OculusNetworkPlayer");
