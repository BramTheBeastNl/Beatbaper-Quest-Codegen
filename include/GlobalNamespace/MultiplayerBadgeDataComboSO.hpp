// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerBadgeDataMinMaxIntSO
#include "GlobalNamespace/MultiplayerBadgeDataMinMaxIntSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerPlayerResultsData
  class MultiplayerPlayerResultsData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerBadgeDataComboSO
  class MultiplayerBadgeDataComboSO : public GlobalNamespace::MultiplayerBadgeDataMinMaxIntSO {
    public:
    // Creating value type constructor for type: MultiplayerBadgeDataComboSO
    MultiplayerBadgeDataComboSO() noexcept {}
    // protected override System.Int32 GetValue(MultiplayerPlayerResultsData result)
    // Offset: 0x1145E64
    // Implemented from: MultiplayerBadgeDataMinMaxIntSO
    // Base method: System.Int32 MultiplayerBadgeDataMinMaxIntSO::GetValue(MultiplayerPlayerResultsData result)
    int GetValue(GlobalNamespace::MultiplayerPlayerResultsData* result);
    // public System.Void .ctor()
    // Offset: 0x1145E90
    // Implemented from: MultiplayerBadgeDataMinMaxIntSO
    // Base method: System.Void MultiplayerBadgeDataMinMaxIntSO::.ctor()
    // Base method: System.Void MultiplayerBadgeDataSO::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerBadgeDataComboSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBadgeDataComboSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerBadgeDataComboSO*, creationType>()));
    }
  }; // MultiplayerBadgeDataComboSO
  #pragma pack(pop)
  // Writing MetadataGetter for method: MultiplayerBadgeDataComboSO::GetValue
  // Il2CppName: GetValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerBadgeDataComboSO::*)(GlobalNamespace::MultiplayerPlayerResultsData*)>(&MultiplayerBadgeDataComboSO::GetValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerBadgeDataComboSO*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerPlayerResultsData*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerBadgeDataComboSO::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerBadgeDataComboSO::*)()>(&MultiplayerBadgeDataComboSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerBadgeDataComboSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerBadgeDataComboSO::*)()>(&MultiplayerBadgeDataComboSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerBadgeDataComboSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerBadgeDataComboSO*, "", "MultiplayerBadgeDataComboSO");
