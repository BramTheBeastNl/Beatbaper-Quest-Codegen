// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ConnectedPlayerManager
#include "GlobalNamespace/ConnectedPlayerManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: PlayerStateHash
#include "GlobalNamespace/PlayerStateHash.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: RollingAverage
  class RollingAverage;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: ConnectedPlayerManager/ConnectedPlayer
  class ConnectedPlayerManager::ConnectedPlayer : public ::Il2CppObject/*, public GlobalNamespace::IConnectedPlayer*/ {
    public:
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Boolean _isMe
    // Size: 0x1
    // Offset: 0x20
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean _isConnectionOwner
    // Size: 0x1
    // Offset: 0x21
    bool isConnectionOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnectionOwner and: manager
    char __padding3[0x6] = {};
    // private readonly ConnectedPlayerManager _manager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ConnectedPlayerManager* manager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ConnectedPlayerManager*) == 0x8);
    // private readonly IConnection _connection
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::IConnection* connection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnection*) == 0x8);
    // private readonly ConnectedPlayerManager/ConnectedPlayer _parent
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* parent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*) == 0x8);
    // private readonly System.Byte _connectionId
    // Size: 0x1
    // Offset: 0x40
    uint8_t connectionId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private readonly System.Byte _remoteConnectionId
    // Size: 0x1
    // Offset: 0x41
    uint8_t remoteConnectionId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: remoteConnectionId and: sortIndex
    char __padding8[0x2] = {};
    // private System.Int32 _sortIndex
    // Size: 0x4
    // Offset: 0x44
    int sortIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isConnected
    // Size: 0x1
    // Offset: 0x48
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnected and: disconnectedReason
    char __padding10[0x3] = {};
    // private DisconnectedReason _disconnectedReason
    // Size: 0x4
    // Offset: 0x4C
    GlobalNamespace::DisconnectedReason disconnectedReason;
    // Field size check
    static_assert(sizeof(GlobalNamespace::DisconnectedReason) == 0x4);
    // private System.Boolean _isKicked
    // Size: 0x1
    // Offset: 0x50
    bool isKicked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isKicked and: playerState
    char __padding12[0x7] = {};
    // private PlayerStateHash _playerState
    // Size: 0x10
    // Offset: 0x58
    GlobalNamespace::PlayerStateHash playerState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerStateHash) == 0x10);
    // private MultiplayerAvatarData _playerAvatar
    // Size: 0x70
    // Offset: 0x68
    GlobalNamespace::MultiplayerAvatarData playerAvatar;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerAvatarData) == 0x70);
    // private readonly RollingAverage _latency
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::RollingAverage* latency;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RollingAverage*) == 0x8);
    // Creating value type constructor for type: ConnectedPlayer
    ConnectedPlayer(::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, bool isMe_ = {}, bool isConnectionOwner_ = {}, GlobalNamespace::ConnectedPlayerManager* manager_ = {}, GlobalNamespace::IConnection* connection_ = {}, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* parent_ = {}, uint8_t connectionId_ = {}, uint8_t remoteConnectionId_ = {}, int sortIndex_ = {}, bool isConnected_ = {}, GlobalNamespace::DisconnectedReason disconnectedReason_ = {}, bool isKicked_ = {}, GlobalNamespace::PlayerStateHash playerState_ = {}, GlobalNamespace::MultiplayerAvatarData playerAvatar_ = {}, GlobalNamespace::RollingAverage* latency_ = {}) noexcept : userId{userId_}, userName{userName_}, isMe{isMe_}, isConnectionOwner{isConnectionOwner_}, manager{manager_}, connection{connection_}, parent{parent_}, connectionId{connectionId_}, remoteConnectionId{remoteConnectionId_}, sortIndex{sortIndex_}, isConnected{isConnected_}, disconnectedReason{disconnectedReason_}, isKicked{isKicked_}, playerState{playerState_}, playerAvatar{playerAvatar_}, latency{latency_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectedPlayer
    operator GlobalNamespace::IConnectedPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectedPlayer*>(this);
    }
    // static field const value: static private System.Single kFixedOffset
    static constexpr const float kFixedOffset = 0.06;
    // Get static field: static private System.Single kFixedOffset
    static float _get_kFixedOffset();
    // Set static field: static private System.Single kFixedOffset
    static void _set_kFixedOffset(float value);
    // public IConnection get_connection()
    // Offset: 0x1327E80
    GlobalNamespace::IConnection* get_connection();
    // public System.Byte get_connectionId()
    // Offset: 0x1327E88
    uint8_t get_connectionId();
    // public System.Byte get_remoteConnectionId()
    // Offset: 0x1327E90
    uint8_t get_remoteConnectionId();
    // public System.Boolean get_isConnected()
    // Offset: 0x1327E98
    bool get_isConnected();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x1327EA0
    bool get_isConnectionOwner();
    // public System.Boolean get_isKicked()
    // Offset: 0x1327EA8
    bool get_isKicked();
    // public DisconnectedReason get_disconnectedReason()
    // Offset: 0x1327EB0
    GlobalNamespace::DisconnectedReason get_disconnectedReason();
    // public System.Int32 get_sortIndex()
    // Offset: 0x1327EB8
    int get_sortIndex();
    // public System.String get_userId()
    // Offset: 0x1327EC0
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x1327EC8
    ::Il2CppString* get_userName();
    // public System.Boolean get_isMe()
    // Offset: 0x1327ED0
    bool get_isMe();
    // public System.Single get_currentLatency()
    // Offset: 0x13269DC
    float get_currentLatency();
    // public System.Single get_offsetSyncTime()
    // Offset: 0x1327ED8
    float get_offsetSyncTime();
    // public MultiplayerAvatarData get_multiplayerAvatarData()
    // Offset: 0x1327FAC
    GlobalNamespace::MultiplayerAvatarData get_multiplayerAvatarData();
    // public System.Boolean get_isDirectConnection()
    // Offset: 0x132303C
    bool get_isDirectConnection();
    // private System.Void .ctor(ConnectedPlayerManager manager, System.Byte connectionId, System.Byte remoteConnectionId, IConnection connection, ConnectedPlayerManager/ConnectedPlayer parent, System.String userId, System.String userName, System.Boolean isConnectionOwner, System.Boolean isMe)
    // Offset: 0x1327FBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectedPlayerManager::ConnectedPlayer* New_ctor(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, uint8_t remoteConnectionId, GlobalNamespace::IConnection* connection, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* parent, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner, bool isMe) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectedPlayerManager::ConnectedPlayer*, creationType>(manager, connectionId, remoteConnectionId, connection, parent, userId, userName, isConnectionOwner, isMe)));
    }
    // static public ConnectedPlayerManager/ConnectedPlayer CreateLocalPlayer(ConnectedPlayerManager manager, System.String userId, System.String userName, System.Boolean isConnectionOwner)
    // Offset: 0x13256D4
    static GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* CreateLocalPlayer(GlobalNamespace::ConnectedPlayerManager* manager, ::Il2CppString* userId, ::Il2CppString* userName, bool isConnectionOwner);
    // static public ConnectedPlayerManager/ConnectedPlayer CreateDirectlyConnectedPlayer(ConnectedPlayerManager manager, System.Byte connectionId, IConnection connection)
    // Offset: 0x13266F4
    static GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* CreateDirectlyConnectedPlayer(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, GlobalNamespace::IConnection* connection);
    // static public ConnectedPlayerManager/ConnectedPlayer CreateRemoteConnectedPlayer(ConnectedPlayerManager manager, System.Byte connectionId, ConnectedPlayerManager/PlayerConnectedPacket packet, ConnectedPlayerManager/ConnectedPlayer parent)
    // Offset: 0x13272C0
    static GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* CreateRemoteConnectedPlayer(GlobalNamespace::ConnectedPlayerManager* manager, uint8_t connectionId, GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* parent);
    // public ConnectedPlayerManager/PlayerConnectedPacket GetPlayerConnectedPacket()
    // Offset: 0x1322EB8
    GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* GetPlayerConnectedPacket();
    // public ConnectedPlayerManager/PlayerIdentityPacket GetPlayerIdentityPacket()
    // Offset: 0x13231AC
    GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* GetPlayerIdentityPacket();
    // public ConnectedPlayerManager/PlayerStatePacket GetPlayerStatePacket()
    // Offset: 0x1326334
    GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* GetPlayerStatePacket();
    // public ConnectedPlayerManager/PlayerAvatarPacket GetPlayerAvatarPacket()
    // Offset: 0x1326448
    GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* GetPlayerAvatarPacket();
    // public ConnectedPlayerManager/PlayerSortOrderPacket GetPlayerSortOrderPacket()
    // Offset: 0x132313C
    GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* GetPlayerSortOrderPacket();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x1322828
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void UpdateLatency(System.Single latency)
    // Offset: 0x13269C0
    void UpdateLatency(float latency);
    // public System.Boolean UpdateSortIndex(System.Int32 index)
    // Offset: 0x13265CC
    bool UpdateSortIndex(int index);
    // public System.Void SetKicked()
    // Offset: 0x132624C
    void SetKicked();
    // public System.Void UpdateIdentity(ConnectedPlayerManager/PlayerIdentityPacket packet)
    // Offset: 0x13274F4
    void UpdateIdentity(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* packet);
    // public System.Void UpdateState(ConnectedPlayerManager/PlayerStatePacket packet)
    // Offset: 0x13275EC
    void UpdateState(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet);
    // public System.Void UpdateAvatar(ConnectedPlayerManager/PlayerAvatarPacket packet)
    // Offset: 0x13276D8
    void UpdateAvatar(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* packet);
    // public System.Boolean HasState(System.String state)
    // Offset: 0x1328138
    bool HasState(::Il2CppString* state);
    // public System.Void SetPlayerState(PlayerStateHash playerState)
    // Offset: 0x1328144
    void SetPlayerState(GlobalNamespace::PlayerStateHash playerState);
    // public System.Void SetPlayerAvatar(MultiplayerAvatarData avatarData)
    // Offset: 0x132814C
    void SetPlayerAvatar(GlobalNamespace::MultiplayerAvatarData avatarData);
    // public override System.String ToString()
    // Offset: 0x1328168
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // ConnectedPlayerManager/ConnectedPlayer
  #pragma pack(pop)
  static check_size<sizeof(ConnectedPlayerManager::ConnectedPlayer), 216 + sizeof(GlobalNamespace::RollingAverage*)> __GlobalNamespace_ConnectedPlayerManager_ConnectedPlayerSizeCheck;
  static_assert(sizeof(ConnectedPlayerManager::ConnectedPlayer) == 0xE0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, "", "ConnectedPlayerManager/ConnectedPlayer");
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connection
// Il2CppName: get_connection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_connectionId
// Il2CppName: get_connectionId
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_remoteConnectionId
// Il2CppName: get_remoteConnectionId
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnected
// Il2CppName: get_isConnected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isKicked
// Il2CppName: get_isKicked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_disconnectedReason
// Il2CppName: get_disconnectedReason
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_sortIndex
// Il2CppName: get_sortIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userId
// Il2CppName: get_userId
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_userName
// Il2CppName: get_userName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isMe
// Il2CppName: get_isMe
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_currentLatency
// Il2CppName: get_currentLatency
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_multiplayerAvatarData
// Il2CppName: get_multiplayerAvatarData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::get_isDirectConnection
// Il2CppName: get_isDirectConnection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateLocalPlayer
// Il2CppName: CreateLocalPlayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateDirectlyConnectedPlayer
// Il2CppName: CreateDirectlyConnectedPlayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::CreateRemoteConnectedPlayer
// Il2CppName: CreateRemoteConnectedPlayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerConnectedPacket
// Il2CppName: GetPlayerConnectedPacket
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerIdentityPacket
// Il2CppName: GetPlayerIdentityPacket
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerStatePacket
// Il2CppName: GetPlayerStatePacket
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerAvatarPacket
// Il2CppName: GetPlayerAvatarPacket
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::GetPlayerSortOrderPacket
// Il2CppName: GetPlayerSortOrderPacket
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::Disconnect
// Il2CppName: Disconnect
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateLatency
// Il2CppName: UpdateLatency
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateSortIndex
// Il2CppName: UpdateSortIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetKicked
// Il2CppName: SetKicked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateIdentity
// Il2CppName: UpdateIdentity
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateState
// Il2CppName: UpdateState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::UpdateAvatar
// Il2CppName: UpdateAvatar
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::HasState
// Il2CppName: HasState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerState
// Il2CppName: SetPlayerState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::SetPlayerAvatar
// Il2CppName: SetPlayerAvatar
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer::ToString
// Il2CppName: ToString
// Cannot perform method pointer template specialization from operators!
