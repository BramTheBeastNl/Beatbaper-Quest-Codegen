// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSO
  class ColorSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: GradientTransitionSO
  class GradientTransitionSO : public GlobalNamespace::BaseTransitionSO {
    public:
    // private ColorSO _normalColor1
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ColorSO* normalColor1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _normalColor2
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ColorSO* normalColor2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _highlightColor1
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::ColorSO* highlightColor1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _highlightColor2
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::ColorSO* highlightColor2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _pressedColor1
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::ColorSO* pressedColor1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _pressedColor2
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::ColorSO* pressedColor2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _disabledColor1
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::ColorSO* disabledColor1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _disabledColor2
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::ColorSO* disabledColor2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _selectedColor1
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::ColorSO* selectedColor1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _selectedColor2
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::ColorSO* selectedColor2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _selectedAndHighlightedColor1
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::ColorSO* selectedAndHighlightedColor1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private ColorSO _selectedAndHighlightedColor2
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::ColorSO* selectedAndHighlightedColor2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // Creating value type constructor for type: GradientTransitionSO
    GradientTransitionSO(GlobalNamespace::ColorSO* normalColor1_ = {}, GlobalNamespace::ColorSO* normalColor2_ = {}, GlobalNamespace::ColorSO* highlightColor1_ = {}, GlobalNamespace::ColorSO* highlightColor2_ = {}, GlobalNamespace::ColorSO* pressedColor1_ = {}, GlobalNamespace::ColorSO* pressedColor2_ = {}, GlobalNamespace::ColorSO* disabledColor1_ = {}, GlobalNamespace::ColorSO* disabledColor2_ = {}, GlobalNamespace::ColorSO* selectedColor1_ = {}, GlobalNamespace::ColorSO* selectedColor2_ = {}, GlobalNamespace::ColorSO* selectedAndHighlightedColor1_ = {}, GlobalNamespace::ColorSO* selectedAndHighlightedColor2_ = {}) noexcept : normalColor1{normalColor1_}, normalColor2{normalColor2_}, highlightColor1{highlightColor1_}, highlightColor2{highlightColor2_}, pressedColor1{pressedColor1_}, pressedColor2{pressedColor2_}, disabledColor1{disabledColor1_}, disabledColor2{disabledColor2_}, selectedColor1{selectedColor1_}, selectedColor2{selectedColor2_}, selectedAndHighlightedColor1{selectedAndHighlightedColor1_}, selectedAndHighlightedColor2{selectedAndHighlightedColor2_} {}
    // public UnityEngine.Color get_normalColor1()
    // Offset: 0x104A248
    UnityEngine::Color get_normalColor1();
    // public UnityEngine.Color get_normalColor2()
    // Offset: 0x104A254
    UnityEngine::Color get_normalColor2();
    // public UnityEngine.Color get_highlightColor1()
    // Offset: 0x104A4B4
    UnityEngine::Color get_highlightColor1();
    // public UnityEngine.Color get_highlightColor2()
    // Offset: 0x104A4C0
    UnityEngine::Color get_highlightColor2();
    // public UnityEngine.Color get_pressedColor1()
    // Offset: 0x104A558
    UnityEngine::Color get_pressedColor1();
    // public UnityEngine.Color get_pressedColor2()
    // Offset: 0x104A564
    UnityEngine::Color get_pressedColor2();
    // public UnityEngine.Color get_disabledColor1()
    // Offset: 0x104A5FC
    UnityEngine::Color get_disabledColor1();
    // public UnityEngine.Color get_disabledColor2()
    // Offset: 0x104A608
    UnityEngine::Color get_disabledColor2();
    // public UnityEngine.Color get_selectedColor1()
    // Offset: 0x104A6A0
    UnityEngine::Color get_selectedColor1();
    // public UnityEngine.Color get_selectedColor2()
    // Offset: 0x104A6AC
    UnityEngine::Color get_selectedColor2();
    // public UnityEngine.Color get_selectedAndHighlightedColor1()
    // Offset: 0x104A744
    UnityEngine::Color get_selectedAndHighlightedColor1();
    // public UnityEngine.Color get_selectedAndHighlightedColor2()
    // Offset: 0x104A750
    UnityEngine::Color get_selectedAndHighlightedColor2();
    // public System.Void .ctor()
    // Offset: 0x104AE88
    // Implemented from: BaseTransitionSO
    // Base method: System.Void BaseTransitionSO::.ctor()
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GradientTransitionSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientTransitionSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GradientTransitionSO*, creationType>()));
    }
  }; // GradientTransitionSO
  #pragma pack(pop)
  static check_size<sizeof(GradientTransitionSO), 120 + sizeof(GlobalNamespace::ColorSO*)> __GlobalNamespace_GradientTransitionSOSizeCheck;
  static_assert(sizeof(GradientTransitionSO) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GradientTransitionSO*, "", "GradientTransitionSO");
