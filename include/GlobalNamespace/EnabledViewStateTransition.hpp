// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseStateTransition`1
#include "GlobalNamespace/BaseStateTransition_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Behaviour because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EnabledTransitionSO
  class EnabledTransitionSO;
  // Forward declaring type: BaseTransitionSO
  class BaseTransitionSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: EnabledViewStateTransition
  class EnabledViewStateTransition : public GlobalNamespace::BaseStateTransition_1<UnityEngine::Behaviour*> {
    public:
    // [SpaceAttribute] Offset: 0xE21E10
    // private EnabledTransitionSO _transition
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::EnabledTransitionSO* transition;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnabledTransitionSO*) == 0x8);
    // Creating value type constructor for type: EnabledViewStateTransition
    EnabledViewStateTransition(GlobalNamespace::EnabledTransitionSO* transition_ = {}) noexcept : transition{transition_} {}
    // protected override BaseTransitionSO get_transition()
    // Offset: 0x103C4F0
    // Implemented from: BaseStateTransition
    // Base method: BaseTransitionSO BaseStateTransition::get_transition()
    GlobalNamespace::BaseTransitionSO* get_transition();
    // protected override System.Void TransitionToNormalState()
    // Offset: 0x103C4F8
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToNormalState()
    void TransitionToNormalState();
    // protected override System.Void TransitionToHighlightedState()
    // Offset: 0x103C504
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToHighlightedState()
    void TransitionToHighlightedState();
    // protected override System.Void TransitionToPressedState()
    // Offset: 0x103C510
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToPressedState()
    void TransitionToPressedState();
    // protected override System.Void TransitionToDisabledState()
    // Offset: 0x103C520
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToDisabledState()
    void TransitionToDisabledState();
    // protected override System.Void TransitionToSelectedState()
    // Offset: 0x103C530
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToSelectedState()
    void TransitionToSelectedState();
    // protected override System.Void TransitionToSelectedAndHighlightedState()
    // Offset: 0x103C540
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToSelectedAndHighlightedState()
    void TransitionToSelectedAndHighlightedState();
    // protected override System.Void SetNormalState()
    // Offset: 0x103C550
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetNormalState()
    void SetNormalState();
    // protected override System.Void SetHighlightedState()
    // Offset: 0x103C57C
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetHighlightedState()
    void SetHighlightedState();
    // protected override System.Void SetPressedState()
    // Offset: 0x103C5A8
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetPressedState()
    void SetPressedState();
    // protected override System.Void SetDisabledState()
    // Offset: 0x103C5D4
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetDisabledState()
    void SetDisabledState();
    // protected override System.Void SetSelectedState()
    // Offset: 0x103C600
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetSelectedState()
    void SetSelectedState();
    // protected override System.Void SetSelectedAndHighlightedState()
    // Offset: 0x103C62C
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetSelectedAndHighlightedState()
    void SetSelectedAndHighlightedState();
    // public System.Void .ctor()
    // Offset: 0x103C658
    // Implemented from: BaseStateTransition`1
    // Base method: System.Void BaseStateTransition_1::.ctor()
    // Base method: System.Void BaseStateTransition::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnabledViewStateTransition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnabledViewStateTransition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnabledViewStateTransition*, creationType>()));
    }
  }; // EnabledViewStateTransition
  // WARNING Not writing size check since size may be invalid!
  // Writing MetadataGetter for method: EnabledViewStateTransition::get_transition
  // Il2CppName: get_transition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BaseTransitionSO* (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::get_transition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToNormalState
  // Il2CppName: TransitionToNormalState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToNormalState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToHighlightedState
  // Il2CppName: TransitionToHighlightedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToHighlightedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToPressedState
  // Il2CppName: TransitionToPressedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToPressedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToDisabledState
  // Il2CppName: TransitionToDisabledState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToDisabledState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToSelectedState
  // Il2CppName: TransitionToSelectedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToSelectedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::TransitionToSelectedAndHighlightedState
  // Il2CppName: TransitionToSelectedAndHighlightedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::TransitionToSelectedAndHighlightedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "TransitionToSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::SetNormalState
  // Il2CppName: SetNormalState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetNormalState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetNormalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::SetHighlightedState
  // Il2CppName: SetHighlightedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetHighlightedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::SetPressedState
  // Il2CppName: SetPressedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetPressedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetPressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::SetDisabledState
  // Il2CppName: SetDisabledState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetDisabledState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::SetSelectedState
  // Il2CppName: SetSelectedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetSelectedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetSelectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::SetSelectedAndHighlightedState
  // Il2CppName: SetSelectedAndHighlightedState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::SetSelectedAndHighlightedState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), "SetSelectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: EnabledViewStateTransition::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnabledViewStateTransition::*)()>(&EnabledViewStateTransition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(EnabledViewStateTransition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::EnabledViewStateTransition*, "", "EnabledViewStateTransition");
