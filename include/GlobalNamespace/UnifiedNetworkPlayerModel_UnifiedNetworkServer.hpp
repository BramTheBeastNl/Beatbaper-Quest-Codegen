// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnifiedNetworkPlayerModel
#include "GlobalNamespace/UnifiedNetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayServerConfiguration
  struct GameplayServerConfiguration;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: UnifiedNetworkPlayerModel/UnifiedNetworkServer
  // [] Offset: FFFFFFFF
  class UnifiedNetworkPlayerModel::UnifiedNetworkServer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly UnifiedNetworkPlayerModel _playerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::UnifiedNetworkPlayerModel* playerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::UnifiedNetworkPlayerModel*) == 0x8);
    // private readonly System.String _code
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* code;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _serverName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* serverName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean _hasPassword
    // Size: 0x1
    // Offset: 0x28
    bool hasPassword;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasPassword and: currentPlayerCount
    char __padding3[0x3] = {};
    // private System.Int32 _currentPlayerCount
    // Size: 0x4
    // Offset: 0x2C
    int currentPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxPlayerCount
    // Size: 0x4
    // Offset: 0x30
    int maxPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private BeatmapDifficultyMask _difficulties
    // Size: 0x1
    // Offset: 0x34
    GlobalNamespace::BeatmapDifficultyMask difficulties;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficultyMask) == 0x1);
    // Padding between fields: difficulties and: modifiers
    char __padding6[0x1] = {};
    // private GameplayModifierMask _modifiers
    // Size: 0x2
    // Offset: 0x36
    GlobalNamespace::GameplayModifierMask modifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifierMask) == 0x2);
    // private SongPackMask _songPacks
    // Size: 0x10
    // Offset: 0x38
    GlobalNamespace::SongPackMask songPacks;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPackMask) == 0x10);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x48
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: UnifiedNetworkServer
    UnifiedNetworkServer(GlobalNamespace::UnifiedNetworkPlayerModel* playerModel_ = {}, ::Il2CppString* code_ = {}, ::Il2CppString* serverName_ = {}, bool hasPassword_ = {}, int currentPlayerCount_ = {}, int maxPlayerCount_ = {}, GlobalNamespace::BeatmapDifficultyMask difficulties_ = {}, GlobalNamespace::GameplayModifierMask modifiers_ = {}, GlobalNamespace::SongPackMask songPacks_ = {}, float lastUpdateTime_ = {}) noexcept : playerModel{playerModel_}, code{code_}, serverName{serverName_}, hasPassword{hasPassword_}, currentPlayerCount{currentPlayerCount_}, maxPlayerCount{maxPlayerCount_}, difficulties{difficulties_}, modifiers{modifiers_}, songPacks{songPacks_}, lastUpdateTime{lastUpdateTime_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // public System.Void .ctor(UnifiedNetworkPlayerModel playerModel, System.String code)
    // Offset: 0x1084F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnifiedNetworkPlayerModel::UnifiedNetworkServer* New_ctor(GlobalNamespace::UnifiedNetworkPlayerModel* playerModel, ::Il2CppString* code) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnifiedNetworkPlayerModel::UnifiedNetworkServer*, creationType>(playerModel, code)));
    }
    // public System.Void Update(System.String serverName, System.Boolean hasPassword, System.Int32 currentPlayerCount, System.Int32 maxPlayerCount, GameplayServerConfiguration configuration)
    // Offset: 0x1084F40
    void Update(::Il2CppString* serverName, bool hasPassword, int currentPlayerCount, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration);
    // private System.String INetworkPlayer.get_userId()
    // Offset: 0x1086EF4
    ::Il2CppString* INetworkPlayer_get_userId_NEW();
    // public System.String get_code()
    // Offset: 0x1086EFC
    ::Il2CppString* get_code();
    // private System.String INetworkPlayer.get_userName()
    // Offset: 0x1086F04
    ::Il2CppString* INetworkPlayer_get_userName_NEW();
    // public System.String get_serverName()
    // Offset: 0x1086F0C
    ::Il2CppString* get_serverName();
    // public System.Boolean get_isMe()
    // Offset: 0x1086F14
    bool get_isMe_NEW();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x1086F1C
    int get_currentPartySize_NEW();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x1086F24
    int get_maxPartySize_NEW();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x1086F2C
    GlobalNamespace::BeatmapDifficultyMask get_difficulties_NEW();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x1086F34
    GlobalNamespace::GameplayModifierMask get_modifiers_NEW();
    // public SongPackMask get_songPacks()
    // Offset: 0x1086F3C
    GlobalNamespace::SongPackMask get_songPacks_NEW();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x1086F48
    bool get_isMyPartyOwner_NEW();
    // public System.Boolean get_isOpenParty()
    // Offset: 0x1086F50
    bool get_isOpenParty_NEW();
    // public System.Boolean get_isConnected()
    // Offset: 0x1086F60
    bool get_isConnected_NEW();
    // public System.Boolean get_hasTimedOut()
    // Offset: 0x1082A5C
    bool get_hasTimedOut();
    // public System.Boolean get_isPlayer()
    // Offset: 0x1086F68
    bool get_isPlayer_NEW();
    // public System.Boolean get_isSpectating()
    // Offset: 0x1086F70
    bool get_isSpectating_NEW();
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x1086F78
    bool get_isDedicatedServer_NEW();
    // public System.Boolean get_canJoin()
    // Offset: 0x1086F80
    bool get_canJoin_NEW();
    // public System.Void Join()
    // Offset: 0x1086F88
    void Join_NEW();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x1086FAC
    bool get_requiresPassword_NEW();
    // public System.Void Join(System.String password)
    // Offset: 0x1086FB4
    void Join_NEW(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x1086FD8
    bool get_isWaitingOnJoin_NEW();
    // public System.Boolean get_canInvite()
    // Offset: 0x1086FE0
    bool get_canInvite_NEW();
    // public System.Void Invite()
    // Offset: 0x1086FE8
    void Invite_NEW();
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x1086FEC
    bool get_isWaitingOnInvite_NEW();
    // public System.Boolean get_canKick()
    // Offset: 0x1086FF4
    bool get_canKick_NEW();
    // public System.Void Kick()
    // Offset: 0x1086FFC
    void Kick_NEW();
    // public System.Boolean get_canLeave()
    // Offset: 0x1087000
    bool get_canLeave_NEW();
    // public System.Void Leave()
    // Offset: 0x1087008
    void Leave_NEW();
    // public System.Boolean get_canBlock()
    // Offset: 0x108700C
    bool get_canBlock_NEW();
    // public System.Void Block()
    // Offset: 0x1087014
    void Block_NEW();
    // public System.Boolean get_canUnblock()
    // Offset: 0x1087018
    bool get_canUnblock_NEW();
    // public System.Void Unblock()
    // Offset: 0x1087020
    void Unblock_NEW();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x1087024
    void SendJoinResponse_NEW(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x1087028
    void SendInviteResponse_NEW(bool accept);
  }; // UnifiedNetworkPlayerModel/UnifiedNetworkServer
  #pragma pack(pop)
  static check_size<sizeof(UnifiedNetworkPlayerModel::UnifiedNetworkServer), 72 + sizeof(float)> __GlobalNamespace_UnifiedNetworkPlayerModel_UnifiedNetworkServerSizeCheck;
  static_assert(sizeof(UnifiedNetworkPlayerModel::UnifiedNetworkServer) == 0x4C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer*, "", "UnifiedNetworkPlayerModel/UnifiedNetworkServer");
