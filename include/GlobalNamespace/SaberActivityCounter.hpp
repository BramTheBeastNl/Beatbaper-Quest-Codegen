// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: Saber
  class Saber;
  // Forward declaring type: MovementHistoryRecorder
  class MovementHistoryRecorder;
  // Forward declaring type: AveragingValueRecorder
  class AveragingValueRecorder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: SaberActivityCounter
  // [TokenAttribute] Offset: FFFFFFFF
  class SaberActivityCounter : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _averageWindowDuration
    // Size: 0x4
    // Offset: 0x18
    float averageWindowDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _valuesPerSecond
    // Size: 0x4
    // Offset: 0x1C
    float valuesPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _increaseSpeed
    // Size: 0x4
    // Offset: 0x20
    float increaseSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _deceraseSpeed
    // Size: 0x4
    // Offset: 0x24
    float deceraseSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _movementSensitivityThreshold
    // Size: 0x4
    // Offset: 0x28
    float movementSensitivityThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: movementSensitivityThreshold and: saberManager
    char __padding4[0x4] = {};
    // [InjectAttribute] Offset: 0xE0974C
    // private readonly SaberManager _saberManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::SaberManager* saberManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberManager*) == 0x8);
    // private System.Action`1<System.Single> totalDistanceDidChangeEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<float>* totalDistanceDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // private Saber _leftSaber
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::Saber* leftSaber;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Saber*) == 0x8);
    // private Saber _rightSaber
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::Saber* rightSaber;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Saber*) == 0x8);
    // private UnityEngine.Vector3 _prevLeftSaberTipPos
    // Size: 0xC
    // Offset: 0x50
    UnityEngine::Vector3 prevLeftSaberTipPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _prevRightSaberTipPos
    // Size: 0xC
    // Offset: 0x5C
    UnityEngine::Vector3 prevRightSaberTipPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _prevLeftHandPos
    // Size: 0xC
    // Offset: 0x68
    UnityEngine::Vector3 prevLeftHandPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _prevRightHandPos
    // Size: 0xC
    // Offset: 0x74
    UnityEngine::Vector3 prevRightHandPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Boolean _hasPrevPos
    // Size: 0x1
    // Offset: 0x80
    bool hasPrevPos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasPrevPos and: leftSaberMovementDistance
    char __padding13[0x3] = {};
    // private System.Single _leftSaberMovementDistance
    // Size: 0x4
    // Offset: 0x84
    float leftSaberMovementDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rightSaberMovementDistance
    // Size: 0x4
    // Offset: 0x88
    float rightSaberMovementDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _leftHandMovementDistance
    // Size: 0x4
    // Offset: 0x8C
    float leftHandMovementDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rightHandMovementDistance
    // Size: 0x4
    // Offset: 0x90
    float rightHandMovementDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: rightHandMovementDistance and: saberMovementHistoryRecorder
    char __padding17[0x4] = {};
    // private MovementHistoryRecorder _saberMovementHistoryRecorder
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::MovementHistoryRecorder* saberMovementHistoryRecorder;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MovementHistoryRecorder*) == 0x8);
    // private MovementHistoryRecorder _handMovementHistoryRecorder
    // Size: 0x8
    // Offset: 0xA0
    GlobalNamespace::MovementHistoryRecorder* handMovementHistoryRecorder;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MovementHistoryRecorder*) == 0x8);
    // Creating value type constructor for type: SaberActivityCounter
    SaberActivityCounter(float averageWindowDuration_ = {}, float valuesPerSecond_ = {}, float increaseSpeed_ = {}, float deceraseSpeed_ = {}, float movementSensitivityThreshold_ = {}, GlobalNamespace::SaberManager* saberManager_ = {}, System::Action_1<float>* totalDistanceDidChangeEvent_ = {}, GlobalNamespace::Saber* leftSaber_ = {}, GlobalNamespace::Saber* rightSaber_ = {}, UnityEngine::Vector3 prevLeftSaberTipPos_ = {}, UnityEngine::Vector3 prevRightSaberTipPos_ = {}, UnityEngine::Vector3 prevLeftHandPos_ = {}, UnityEngine::Vector3 prevRightHandPos_ = {}, bool hasPrevPos_ = {}, float leftSaberMovementDistance_ = {}, float rightSaberMovementDistance_ = {}, float leftHandMovementDistance_ = {}, float rightHandMovementDistance_ = {}, GlobalNamespace::MovementHistoryRecorder* saberMovementHistoryRecorder_ = {}, GlobalNamespace::MovementHistoryRecorder* handMovementHistoryRecorder_ = {}) noexcept : averageWindowDuration{averageWindowDuration_}, valuesPerSecond{valuesPerSecond_}, increaseSpeed{increaseSpeed_}, deceraseSpeed{deceraseSpeed_}, movementSensitivityThreshold{movementSensitivityThreshold_}, saberManager{saberManager_}, totalDistanceDidChangeEvent{totalDistanceDidChangeEvent_}, leftSaber{leftSaber_}, rightSaber{rightSaber_}, prevLeftSaberTipPos{prevLeftSaberTipPos_}, prevRightSaberTipPos{prevRightSaberTipPos_}, prevLeftHandPos{prevLeftHandPos_}, prevRightHandPos{prevRightHandPos_}, hasPrevPos{hasPrevPos_}, leftSaberMovementDistance{leftSaberMovementDistance_}, rightSaberMovementDistance{rightSaberMovementDistance_}, leftHandMovementDistance{leftHandMovementDistance_}, rightHandMovementDistance{rightHandMovementDistance_}, saberMovementHistoryRecorder{saberMovementHistoryRecorder_}, handMovementHistoryRecorder{handMovementHistoryRecorder_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field: private System.Single _averageWindowDuration
    float _get__averageWindowDuration();
    // Set instance field: private System.Single _averageWindowDuration
    void _set__averageWindowDuration(float value);
    // Get instance field: private System.Single _valuesPerSecond
    float _get__valuesPerSecond();
    // Set instance field: private System.Single _valuesPerSecond
    void _set__valuesPerSecond(float value);
    // Get instance field: private System.Single _increaseSpeed
    float _get__increaseSpeed();
    // Set instance field: private System.Single _increaseSpeed
    void _set__increaseSpeed(float value);
    // Get instance field: private System.Single _deceraseSpeed
    float _get__deceraseSpeed();
    // Set instance field: private System.Single _deceraseSpeed
    void _set__deceraseSpeed(float value);
    // Get instance field: private System.Single _movementSensitivityThreshold
    float _get__movementSensitivityThreshold();
    // Set instance field: private System.Single _movementSensitivityThreshold
    void _set__movementSensitivityThreshold(float value);
    // Get instance field: private readonly SaberManager _saberManager
    GlobalNamespace::SaberManager* _get__saberManager();
    // Set instance field: private readonly SaberManager _saberManager
    void _set__saberManager(GlobalNamespace::SaberManager* value);
    // Get instance field: private System.Action`1<System.Single> totalDistanceDidChangeEvent
    System::Action_1<float>* _get_totalDistanceDidChangeEvent();
    // Set instance field: private System.Action`1<System.Single> totalDistanceDidChangeEvent
    void _set_totalDistanceDidChangeEvent(System::Action_1<float>* value);
    // Get instance field: private Saber _leftSaber
    GlobalNamespace::Saber* _get__leftSaber();
    // Set instance field: private Saber _leftSaber
    void _set__leftSaber(GlobalNamespace::Saber* value);
    // Get instance field: private Saber _rightSaber
    GlobalNamespace::Saber* _get__rightSaber();
    // Set instance field: private Saber _rightSaber
    void _set__rightSaber(GlobalNamespace::Saber* value);
    // Get instance field: private UnityEngine.Vector3 _prevLeftSaberTipPos
    UnityEngine::Vector3 _get__prevLeftSaberTipPos();
    // Set instance field: private UnityEngine.Vector3 _prevLeftSaberTipPos
    void _set__prevLeftSaberTipPos(UnityEngine::Vector3 value);
    // Get instance field: private UnityEngine.Vector3 _prevRightSaberTipPos
    UnityEngine::Vector3 _get__prevRightSaberTipPos();
    // Set instance field: private UnityEngine.Vector3 _prevRightSaberTipPos
    void _set__prevRightSaberTipPos(UnityEngine::Vector3 value);
    // Get instance field: private UnityEngine.Vector3 _prevLeftHandPos
    UnityEngine::Vector3 _get__prevLeftHandPos();
    // Set instance field: private UnityEngine.Vector3 _prevLeftHandPos
    void _set__prevLeftHandPos(UnityEngine::Vector3 value);
    // Get instance field: private UnityEngine.Vector3 _prevRightHandPos
    UnityEngine::Vector3 _get__prevRightHandPos();
    // Set instance field: private UnityEngine.Vector3 _prevRightHandPos
    void _set__prevRightHandPos(UnityEngine::Vector3 value);
    // Get instance field: private System.Boolean _hasPrevPos
    bool _get__hasPrevPos();
    // Set instance field: private System.Boolean _hasPrevPos
    void _set__hasPrevPos(bool value);
    // Get instance field: private System.Single _leftSaberMovementDistance
    float _get__leftSaberMovementDistance();
    // Set instance field: private System.Single _leftSaberMovementDistance
    void _set__leftSaberMovementDistance(float value);
    // Get instance field: private System.Single _rightSaberMovementDistance
    float _get__rightSaberMovementDistance();
    // Set instance field: private System.Single _rightSaberMovementDistance
    void _set__rightSaberMovementDistance(float value);
    // Get instance field: private System.Single _leftHandMovementDistance
    float _get__leftHandMovementDistance();
    // Set instance field: private System.Single _leftHandMovementDistance
    void _set__leftHandMovementDistance(float value);
    // Get instance field: private System.Single _rightHandMovementDistance
    float _get__rightHandMovementDistance();
    // Set instance field: private System.Single _rightHandMovementDistance
    void _set__rightHandMovementDistance(float value);
    // Get instance field: private MovementHistoryRecorder _saberMovementHistoryRecorder
    GlobalNamespace::MovementHistoryRecorder* _get__saberMovementHistoryRecorder();
    // Set instance field: private MovementHistoryRecorder _saberMovementHistoryRecorder
    void _set__saberMovementHistoryRecorder(GlobalNamespace::MovementHistoryRecorder* value);
    // Get instance field: private MovementHistoryRecorder _handMovementHistoryRecorder
    GlobalNamespace::MovementHistoryRecorder* _get__handMovementHistoryRecorder();
    // Set instance field: private MovementHistoryRecorder _handMovementHistoryRecorder
    void _set__handMovementHistoryRecorder(GlobalNamespace::MovementHistoryRecorder* value);
    // public System.Single get_leftSaberMovementDistance()
    // Offset: 0x1147FB8
    float get_leftSaberMovementDistance();
    // public System.Single get_rightSaberMovementDistance()
    // Offset: 0x1147FC0
    float get_rightSaberMovementDistance();
    // public System.Single get_leftHandMovementDistance()
    // Offset: 0x1147FC8
    float get_leftHandMovementDistance();
    // public System.Single get_rightHandMovementDistance()
    // Offset: 0x1147FD0
    float get_rightHandMovementDistance();
    // public AveragingValueRecorder get_saberMovementAveragingValueRecorder()
    // Offset: 0x1147FD8
    GlobalNamespace::AveragingValueRecorder* get_saberMovementAveragingValueRecorder();
    // public AveragingValueRecorder get_handMovementAveragingValueRecorder()
    // Offset: 0x1147FF4
    GlobalNamespace::AveragingValueRecorder* get_handMovementAveragingValueRecorder();
    // public System.Void add_totalDistanceDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x1147E70
    void add_totalDistanceDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_totalDistanceDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x1147F14
    void remove_totalDistanceDidChangeEvent(System::Action_1<float>* value);
    // protected System.Void Awake()
    // Offset: 0x1148010
    void Awake();
    // protected System.Void Start()
    // Offset: 0x11480D0
    void Start();
    // protected System.Void Update()
    // Offset: 0x11480F8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x11484A8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberActivityCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberActivityCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberActivityCounter*, creationType>()));
    }
  }; // SaberActivityCounter
  #pragma pack(pop)
  static check_size<sizeof(SaberActivityCounter), 160 + sizeof(GlobalNamespace::MovementHistoryRecorder*)> __GlobalNamespace_SaberActivityCounterSizeCheck;
  static_assert(sizeof(SaberActivityCounter) == 0xA8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberActivityCounter*, "", "SaberActivityCounter");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::get_leftSaberMovementDistance
// Il2CppName: get_leftSaberMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::get_leftSaberMovementDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "get_leftSaberMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::get_rightSaberMovementDistance
// Il2CppName: get_rightSaberMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::get_rightSaberMovementDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "get_rightSaberMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::get_leftHandMovementDistance
// Il2CppName: get_leftHandMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::get_leftHandMovementDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "get_leftHandMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::get_rightHandMovementDistance
// Il2CppName: get_rightHandMovementDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::get_rightHandMovementDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "get_rightHandMovementDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::get_saberMovementAveragingValueRecorder
// Il2CppName: get_saberMovementAveragingValueRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AveragingValueRecorder* (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::get_saberMovementAveragingValueRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "get_saberMovementAveragingValueRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::get_handMovementAveragingValueRecorder
// Il2CppName: get_handMovementAveragingValueRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AveragingValueRecorder* (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::get_handMovementAveragingValueRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "get_handMovementAveragingValueRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::add_totalDistanceDidChangeEvent
// Il2CppName: add_totalDistanceDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberActivityCounter::*)(System::Action_1<float>*)>(&GlobalNamespace::SaberActivityCounter::add_totalDistanceDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "add_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::remove_totalDistanceDidChangeEvent
// Il2CppName: remove_totalDistanceDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberActivityCounter::*)(System::Action_1<float>*)>(&GlobalNamespace::SaberActivityCounter::remove_totalDistanceDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "remove_totalDistanceDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SaberActivityCounter::*)()>(&GlobalNamespace::SaberActivityCounter::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SaberActivityCounter*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SaberActivityCounter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
