// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LazyCopyHashSet`1<T>
  template<typename T>
  class LazyCopyHashSet_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SimpleMemoryPool`1<T>
  template<typename T>
  class SimpleMemoryPool_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::SimpleMemoryPool_1, "", "SimpleMemoryPool`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: SimpleMemoryPool`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class SimpleMemoryPool_1 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly LazyCopyHashSet`1<T> _activeElements
    // Size: 0x8
    // Offset: 0x0
    GlobalNamespace::LazyCopyHashSet_1<T>* activeElements;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<T>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<T> _inactiveElements
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::List_1<T>* inactiveElements;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<T>*) == 0x8);
    // private readonly System.Func`1<T> _createNewItemFunc
    // Size: 0x8
    // Offset: 0x0
    System::Func_1<T>* createNewItemFunc;
    // Field size check
    static_assert(sizeof(System::Func_1<T>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly LazyCopyHashSet`1<T> _activeElements
    GlobalNamespace::LazyCopyHashSet_1<T>*& dyn__activeElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::dyn__activeElements");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_activeElements"))->offset;
      return *reinterpret_cast<GlobalNamespace::LazyCopyHashSet_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<T> _inactiveElements
    System::Collections::Generic::List_1<T>*& dyn__inactiveElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::dyn__inactiveElements");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inactiveElements"))->offset;
      return *reinterpret_cast<System::Collections::Generic::List_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Func`1<T> _createNewItemFunc
    System::Func_1<T>*& dyn__createNewItemFunc() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::dyn__createNewItemFunc");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_createNewItemFunc"))->offset;
      return *reinterpret_cast<System::Func_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Collections.Generic.List`1<T> get_items()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::List_1<T>* get_items() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::get_items");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_items", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<System::Collections::Generic::List_1<T>*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Int32 startCapacity, System.Func`1<T> createNewItemFunc)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleMemoryPool_1<T>* New_ctor(int startCapacity, System::Func_1<T>* createNewItemFunc) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleMemoryPool_1<T>*, creationType>(startCapacity, createNewItemFunc)));
    }
    // public T Spawn()
    // Offset: 0xFFFFFFFF
    T Spawn() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::Spawn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Spawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Despawn(T item)
    // Offset: 0xFFFFFFFF
    void Despawn(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleMemoryPool_1::Despawn");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, item);
    }
  }; // SimpleMemoryPool`1
  // Could not write size check! Type: SimpleMemoryPool`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
