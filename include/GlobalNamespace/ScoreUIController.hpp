// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IScoreController
  class IScoreController;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ScoreUIController
  class ScoreUIController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::ScoreUIController::InitData
    class InitData;
    // Nested type: GlobalNamespace::ScoreUIController::ScoreDisplayType
    struct ScoreDisplayType;
    // private TMPro.TextMeshProUGUI _scoreText
    // Size: 0x8
    // Offset: 0x18
    TMPro::TextMeshProUGUI* scoreText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // [InjectOptionalAttribute] Offset: 0xE1BCAC
    // private ScoreUIController/InitData _initData
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ScoreUIController::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ScoreUIController::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0xE1BCBC
    // private readonly IScoreController _scoreController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::IScoreController* scoreController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IScoreController*) == 0x8);
    // private System.Text.StringBuilder _stringBuilder
    // Size: 0x8
    // Offset: 0x30
    System::Text::StringBuilder* stringBuilder;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // Creating value type constructor for type: ScoreUIController
    ScoreUIController(TMPro::TextMeshProUGUI* scoreText_ = {}, GlobalNamespace::ScoreUIController::InitData* initData_ = {}, GlobalNamespace::IScoreController* scoreController_ = {}, System::Text::StringBuilder* stringBuilder_ = {}) noexcept : scoreText{scoreText_}, initData{initData_}, scoreController{scoreController_}, stringBuilder{stringBuilder_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kMaxNumberOfDigits
    static constexpr const int kMaxNumberOfDigits = 9;
    // Get static field: static private System.Int32 kMaxNumberOfDigits
    static int _get_kMaxNumberOfDigits();
    // Set static field: static private System.Int32 kMaxNumberOfDigits
    static void _set_kMaxNumberOfDigits(int value);
    // protected System.Void Start()
    // Offset: 0x10D87E4
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x10D8C0C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x10D8C10
    void OnDisable();
    // private System.Void RegisterForEvents()
    // Offset: 0x10D885C
    void RegisterForEvents();
    // private System.Void UnregisterFromEvents()
    // Offset: 0x10D8C14
    void UnregisterFromEvents();
    // private System.Void HandleScoreDidChangeRealtime(System.Int32 rawScore, System.Int32 modifiedScore)
    // Offset: 0x10D8D14
    void HandleScoreDidChangeRealtime(int rawScore, int modifiedScore);
    // protected System.Void UpdateScore(System.Int32 rawScore, System.Int32 modifiedScore)
    // Offset: 0x10D8A04
    void UpdateScore(int rawScore, int modifiedScore);
    // static private System.Void Append000Number(System.Text.StringBuilder stringBuilder, System.Int32 number)
    // Offset: 0x10D8D18
    static void Append000Number(System::Text::StringBuilder* stringBuilder, int number);
    // public System.Void .ctor()
    // Offset: 0x10D8DC8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScoreUIController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScoreUIController*, creationType>()));
    }
  }; // ScoreUIController
  #pragma pack(pop)
  static check_size<sizeof(ScoreUIController), 48 + sizeof(System::Text::StringBuilder*)> __GlobalNamespace_ScoreUIControllerSizeCheck;
  static_assert(sizeof(ScoreUIController) == 0x38);
  // Writing MetadataGetter for method: ScoreUIController::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::OnEnable
  // Il2CppName: OnEnable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::OnEnable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::OnDisable
  // Il2CppName: OnDisable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::OnDisable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::RegisterForEvents
  // Il2CppName: RegisterForEvents
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::RegisterForEvents)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "RegisterForEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::UnregisterFromEvents
  // Il2CppName: UnregisterFromEvents
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::UnregisterFromEvents)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "UnregisterFromEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::HandleScoreDidChangeRealtime
  // Il2CppName: HandleScoreDidChangeRealtime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)(int, int)>(&ScoreUIController::HandleScoreDidChangeRealtime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "HandleScoreDidChangeRealtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::UpdateScore
  // Il2CppName: UpdateScore
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)(int, int)>(&ScoreUIController::UpdateScore)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "UpdateScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::Append000Number
  // Il2CppName: Append000Number
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, int)>(&ScoreUIController::Append000Number)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "Append000Number", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ScoreUIController::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ScoreUIController*, "", "ScoreUIController");
