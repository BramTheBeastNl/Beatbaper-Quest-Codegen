// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IDifficultyBeatmapSet
  class IDifficultyBeatmapSet;
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
  // Forward declaring type: PreviewDifficultyBeatmapSet
  class PreviewDifficultyBeatmapSet;
  // Forward declaring type: IBeatmapLevelData
  class IBeatmapLevelData;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelSO : public GlobalNamespace::PersistentScriptableObject/*, public GlobalNamespace::IBeatmapLevel*/ {
    public:
    // Nested type: GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet
    class DifficultyBeatmapSet;
    // Nested type: GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap
    class DifficultyBeatmap;
    // Nested type: GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult
    struct GetBeatmapLevelDataResult;
    // Nested type: GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__64
    struct $GetPreviewAudioClipAsync$d__64;
    // Nested type: GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__65
    struct $GetCoverImageAsync$d__65;
    // Nested type: GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__68
    struct $GetBeatmapLevelDataAsync$d__68;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BeatmapLevelSO/GetBeatmapLevelDataResult
    // [TokenAttribute] Offset: FFFFFFFF
    struct GetBeatmapLevelDataResult/*, public System::ValueType*/ {
      public:
      // Nested type: GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result
      struct Result;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: BeatmapLevelSO/GetBeatmapLevelDataResult/Result
      // [TokenAttribute] Offset: FFFFFFFF
      struct Result/*, public System::Enum*/ {
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // Creating value type constructor for type: Result
        constexpr Result(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator System::Enum
        operator System::Enum() noexcept {
          return *reinterpret_cast<System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
        static constexpr const int OK = 0;
        // Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
        static GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_OK();
        // Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
        static void _set_OK(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
        // static field const value: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
        static constexpr const int NotOwned = 1;
        // Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
        static GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_NotOwned();
        // Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
        static void _set_NotOwned(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
        // static field const value: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
        static constexpr const int Fail = 2;
        // Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
        static GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_Fail();
        // Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
        static void _set_Fail(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
        // Get instance field: public System.Int32 value__
        int _get_value__();
        // Set instance field: public System.Int32 value__
        void _set_value__(int value);
      }; // BeatmapLevelSO/GetBeatmapLevelDataResult/Result
      #pragma pack(pop)
      static check_size<sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult::Result), 0 + sizeof(int)> __GlobalNamespace_BeatmapLevelSO_GetBeatmapLevelDataResult_ResultSizeCheck;
      static_assert(sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult::Result) == 0x4);
      // public readonly BeatmapLevelSO/GetBeatmapLevelDataResult/Result result
      // Size: 0x4
      // Offset: 0x0
      GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result;
      // Field size check
      static_assert(sizeof(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result) == 0x4);
      // Padding between fields: result and: beatmapLevelData
      char __padding0[0x4] = {};
      // public readonly IBeatmapLevelData beatmapLevelData
      // Size: 0x8
      // Offset: 0x8
      GlobalNamespace::IBeatmapLevelData* beatmapLevelData;
      // Field size check
      static_assert(sizeof(GlobalNamespace::IBeatmapLevelData*) == 0x8);
      // Creating value type constructor for type: GetBeatmapLevelDataResult
      constexpr GetBeatmapLevelDataResult(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result_ = {}, GlobalNamespace::IBeatmapLevelData* beatmapLevelData_ = {}) noexcept : result{result_}, beatmapLevelData{beatmapLevelData_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field: public readonly BeatmapLevelSO/GetBeatmapLevelDataResult/Result result
      GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_result();
      // Set instance field: public readonly BeatmapLevelSO/GetBeatmapLevelDataResult/Result result
      void _set_result(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
      // Get instance field: public readonly IBeatmapLevelData beatmapLevelData
      GlobalNamespace::IBeatmapLevelData* _get_beatmapLevelData();
      // Set instance field: public readonly IBeatmapLevelData beatmapLevelData
      void _set_beatmapLevelData(GlobalNamespace::IBeatmapLevelData* value);
      // public System.Void .ctor(BeatmapLevelSO/GetBeatmapLevelDataResult/Result result, IBeatmapLevelData beatmapLevelData)
      // Offset: 0xED0074
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  GetBeatmapLevelDataResult(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result, GlobalNamespace::IBeatmapLevelData* beatmapLevelData)
    }; // BeatmapLevelSO/GetBeatmapLevelDataResult
    #pragma pack(pop)
    static check_size<sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult), 8 + sizeof(GlobalNamespace::IBeatmapLevelData*)> __GlobalNamespace_BeatmapLevelSO_GetBeatmapLevelDataResultSizeCheck;
    static_assert(sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult) == 0x10);
    // private System.String _levelID
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* levelID;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _songName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* songName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _songSubName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* songSubName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _songAuthorName
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* songAuthorName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _levelAuthorName
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* levelAuthorName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private System.Single _beatsPerMinute
    // Size: 0x4
    // Offset: 0x48
    float beatsPerMinute;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _songTimeOffset
    // Size: 0x4
    // Offset: 0x4C
    float songTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shuffle
    // Size: 0x4
    // Offset: 0x50
    float shuffle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shufflePeriod
    // Size: 0x4
    // Offset: 0x54
    float shufflePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previewStartTime
    // Size: 0x4
    // Offset: 0x58
    float previewStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previewDuration
    // Size: 0x4
    // Offset: 0x5C
    float previewDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Sprite _coverImage
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Sprite* coverImage;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // private EnvironmentInfoSO _environmentInfo
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::EnvironmentInfoSO* environmentInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private BeatmapLevelSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x78
    ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* difficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*) == 0x8);
    // public System.Boolean _ignore360MovementBeatmaps
    // Size: 0x1
    // Offset: 0x80
    bool ignore360MovementBeatmaps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignore360MovementBeatmaps and: no360MovementDifficultyBeatmapSets
    char __padding16[0x7] = {};
    // private BeatmapLevelSO/DifficultyBeatmapSet[] _no360MovementDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x88
    ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* no360MovementDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*) == 0x8);
    // private PreviewDifficultyBeatmapSet[] _previewDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x90
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* previewDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*) == 0x8);
    // private PreviewDifficultyBeatmapSet[] _no360MovementPreviewDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x98
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* no360MovementPreviewDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*) == 0x8);
    // private IBeatmapLevelData _beatmapLevelData
    // Size: 0x8
    // Offset: 0xA0
    GlobalNamespace::IBeatmapLevelData* beatmapLevelData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevelData*) == 0x8);
    // private BeatmapLevelSO/GetBeatmapLevelDataResult _getBeatmapLevelDataResult
    // Size: 0x10
    // Offset: 0xA8
    GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult getBeatmapLevelDataResult;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult) == 0x10);
    // Creating value type constructor for type: BeatmapLevelSO
    BeatmapLevelSO(::Il2CppString* levelID_ = {}, ::Il2CppString* songName_ = {}, ::Il2CppString* songSubName_ = {}, ::Il2CppString* songAuthorName_ = {}, ::Il2CppString* levelAuthorName_ = {}, UnityEngine::AudioClip* audioClip_ = {}, float beatsPerMinute_ = {}, float songTimeOffset_ = {}, float shuffle_ = {}, float shufflePeriod_ = {}, float previewStartTime_ = {}, float previewDuration_ = {}, UnityEngine::Sprite* coverImage_ = {}, GlobalNamespace::EnvironmentInfoSO* environmentInfo_ = {}, GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo_ = {}, ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* difficultyBeatmapSets_ = {}, bool ignore360MovementBeatmaps_ = {}, ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* no360MovementDifficultyBeatmapSets_ = {}, ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* previewDifficultyBeatmapSets_ = {}, ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* no360MovementPreviewDifficultyBeatmapSets_ = {}, GlobalNamespace::IBeatmapLevelData* beatmapLevelData_ = {}, GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult getBeatmapLevelDataResult_ = {}) noexcept : levelID{levelID_}, songName{songName_}, songSubName{songSubName_}, songAuthorName{songAuthorName_}, levelAuthorName{levelAuthorName_}, audioClip{audioClip_}, beatsPerMinute{beatsPerMinute_}, songTimeOffset{songTimeOffset_}, shuffle{shuffle_}, shufflePeriod{shufflePeriod_}, previewStartTime{previewStartTime_}, previewDuration{previewDuration_}, coverImage{coverImage_}, environmentInfo{environmentInfo_}, allDirectionsEnvironmentInfo{allDirectionsEnvironmentInfo_}, difficultyBeatmapSets{difficultyBeatmapSets_}, ignore360MovementBeatmaps{ignore360MovementBeatmaps_}, no360MovementDifficultyBeatmapSets{no360MovementDifficultyBeatmapSets_}, previewDifficultyBeatmapSets{previewDifficultyBeatmapSets_}, no360MovementPreviewDifficultyBeatmapSets{no360MovementPreviewDifficultyBeatmapSets_}, beatmapLevelData{beatmapLevelData_}, getBeatmapLevelDataResult{getBeatmapLevelDataResult_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBeatmapLevel
    operator GlobalNamespace::IBeatmapLevel() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBeatmapLevel*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field: private System.String _levelID
    ::Il2CppString* _get__levelID();
    // Set instance field: private System.String _levelID
    void _set__levelID(::Il2CppString* value);
    // Get instance field: private System.String _songName
    ::Il2CppString* _get__songName();
    // Set instance field: private System.String _songName
    void _set__songName(::Il2CppString* value);
    // Get instance field: private System.String _songSubName
    ::Il2CppString* _get__songSubName();
    // Set instance field: private System.String _songSubName
    void _set__songSubName(::Il2CppString* value);
    // Get instance field: private System.String _songAuthorName
    ::Il2CppString* _get__songAuthorName();
    // Set instance field: private System.String _songAuthorName
    void _set__songAuthorName(::Il2CppString* value);
    // Get instance field: private System.String _levelAuthorName
    ::Il2CppString* _get__levelAuthorName();
    // Set instance field: private System.String _levelAuthorName
    void _set__levelAuthorName(::Il2CppString* value);
    // Get instance field: private UnityEngine.AudioClip _audioClip
    UnityEngine::AudioClip* _get__audioClip();
    // Set instance field: private UnityEngine.AudioClip _audioClip
    void _set__audioClip(UnityEngine::AudioClip* value);
    // Get instance field: private System.Single _beatsPerMinute
    float _get__beatsPerMinute();
    // Set instance field: private System.Single _beatsPerMinute
    void _set__beatsPerMinute(float value);
    // Get instance field: private System.Single _songTimeOffset
    float _get__songTimeOffset();
    // Set instance field: private System.Single _songTimeOffset
    void _set__songTimeOffset(float value);
    // Get instance field: private System.Single _shuffle
    float _get__shuffle();
    // Set instance field: private System.Single _shuffle
    void _set__shuffle(float value);
    // Get instance field: private System.Single _shufflePeriod
    float _get__shufflePeriod();
    // Set instance field: private System.Single _shufflePeriod
    void _set__shufflePeriod(float value);
    // Get instance field: private System.Single _previewStartTime
    float _get__previewStartTime();
    // Set instance field: private System.Single _previewStartTime
    void _set__previewStartTime(float value);
    // Get instance field: private System.Single _previewDuration
    float _get__previewDuration();
    // Set instance field: private System.Single _previewDuration
    void _set__previewDuration(float value);
    // Get instance field: private UnityEngine.Sprite _coverImage
    UnityEngine::Sprite* _get__coverImage();
    // Set instance field: private UnityEngine.Sprite _coverImage
    void _set__coverImage(UnityEngine::Sprite* value);
    // Get instance field: private EnvironmentInfoSO _environmentInfo
    GlobalNamespace::EnvironmentInfoSO* _get__environmentInfo();
    // Set instance field: private EnvironmentInfoSO _environmentInfo
    void _set__environmentInfo(GlobalNamespace::EnvironmentInfoSO* value);
    // Get instance field: private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    GlobalNamespace::EnvironmentInfoSO* _get__allDirectionsEnvironmentInfo();
    // Set instance field: private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    void _set__allDirectionsEnvironmentInfo(GlobalNamespace::EnvironmentInfoSO* value);
    // Get instance field: private BeatmapLevelSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* _get__difficultyBeatmapSets();
    // Set instance field: private BeatmapLevelSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    void _set__difficultyBeatmapSets(::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* value);
    // Get instance field: public System.Boolean _ignore360MovementBeatmaps
    bool _get__ignore360MovementBeatmaps();
    // Set instance field: public System.Boolean _ignore360MovementBeatmaps
    void _set__ignore360MovementBeatmaps(bool value);
    // Get instance field: private BeatmapLevelSO/DifficultyBeatmapSet[] _no360MovementDifficultyBeatmapSets
    ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* _get__no360MovementDifficultyBeatmapSets();
    // Set instance field: private BeatmapLevelSO/DifficultyBeatmapSet[] _no360MovementDifficultyBeatmapSets
    void _set__no360MovementDifficultyBeatmapSets(::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* value);
    // Get instance field: private PreviewDifficultyBeatmapSet[] _previewDifficultyBeatmapSets
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* _get__previewDifficultyBeatmapSets();
    // Set instance field: private PreviewDifficultyBeatmapSet[] _previewDifficultyBeatmapSets
    void _set__previewDifficultyBeatmapSets(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* value);
    // Get instance field: private PreviewDifficultyBeatmapSet[] _no360MovementPreviewDifficultyBeatmapSets
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* _get__no360MovementPreviewDifficultyBeatmapSets();
    // Set instance field: private PreviewDifficultyBeatmapSet[] _no360MovementPreviewDifficultyBeatmapSets
    void _set__no360MovementPreviewDifficultyBeatmapSets(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* value);
    // Get instance field: private IBeatmapLevelData _beatmapLevelData
    GlobalNamespace::IBeatmapLevelData* _get__beatmapLevelData();
    // Set instance field: private IBeatmapLevelData _beatmapLevelData
    void _set__beatmapLevelData(GlobalNamespace::IBeatmapLevelData* value);
    // Get instance field: private BeatmapLevelSO/GetBeatmapLevelDataResult _getBeatmapLevelDataResult
    GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult _get__getBeatmapLevelDataResult();
    // Set instance field: private BeatmapLevelSO/GetBeatmapLevelDataResult _getBeatmapLevelDataResult
    void _set__getBeatmapLevelDataResult(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult value);
    // public System.String get_levelID()
    // Offset: 0x108D928
    ::Il2CppString* get_levelID();
    // public System.String get_songName()
    // Offset: 0x108D930
    ::Il2CppString* get_songName();
    // public System.String get_songSubName()
    // Offset: 0x108D938
    ::Il2CppString* get_songSubName();
    // public System.String get_songAuthorName()
    // Offset: 0x108D940
    ::Il2CppString* get_songAuthorName();
    // public System.String get_levelAuthorName()
    // Offset: 0x108D948
    ::Il2CppString* get_levelAuthorName();
    // public System.Single get_beatsPerMinute()
    // Offset: 0x108D950
    float get_beatsPerMinute();
    // public System.Single get_songTimeOffset()
    // Offset: 0x108D958
    float get_songTimeOffset();
    // public System.Single get_shuffle()
    // Offset: 0x108D960
    float get_shuffle();
    // public System.Single get_shufflePeriod()
    // Offset: 0x108D968
    float get_shufflePeriod();
    // public UnityEngine.AudioClip get_previewAudioClip()
    // Offset: 0x108D970
    UnityEngine::AudioClip* get_previewAudioClip();
    // public System.Single get_previewStartTime()
    // Offset: 0x108D978
    float get_previewStartTime();
    // public System.Single get_previewDuration()
    // Offset: 0x108D980
    float get_previewDuration();
    // public UnityEngine.Sprite get_coverImage()
    // Offset: 0x108D988
    UnityEngine::Sprite* get_coverImage();
    // public EnvironmentInfoSO get_environmentInfo()
    // Offset: 0x108D990
    GlobalNamespace::EnvironmentInfoSO* get_environmentInfo();
    // public EnvironmentInfoSO get_allDirectionsEnvironmentInfo()
    // Offset: 0x108D998
    GlobalNamespace::EnvironmentInfoSO* get_allDirectionsEnvironmentInfo();
    // public IDifficultyBeatmapSet[] get_difficultyBeatmapSets()
    // Offset: 0x108D9A0
    ::Array<GlobalNamespace::IDifficultyBeatmapSet*>* get_difficultyBeatmapSets();
    // public System.Single get_songDuration()
    // Offset: 0x108D9BC
    float get_songDuration();
    // public PreviewDifficultyBeatmapSet[] get_previewDifficultyBeatmapSets()
    // Offset: 0x108D9D8
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* get_previewDifficultyBeatmapSets();
    // public IBeatmapLevelData get_beatmapLevelData()
    // Offset: 0x108DE3C
    GlobalNamespace::IBeatmapLevelData* get_beatmapLevelData();
    // public System.Void InitFull(System.String levelID, System.String songName, System.String songSubName, System.String songAuthorName, System.String levelAuthorName, UnityEngine.AudioClip audioClip, System.Single beatsPerMinute, System.Single songTimeOffset, System.Single shuffle, System.Single shufflePeriod, System.Single previewStartTime, System.Single previewDuration, UnityEngine.Sprite coverImage, EnvironmentInfoSO environmentInfo, EnvironmentInfoSO allDirectionsEnvironmentInfo, BeatmapLevelSO/DifficultyBeatmapSet[] difficultyBeatmapSets)
    // Offset: 0x108DB44
    void InitFull(::Il2CppString* levelID, ::Il2CppString* songName, ::Il2CppString* songSubName, ::Il2CppString* songAuthorName, ::Il2CppString* levelAuthorName, UnityEngine::AudioClip* audioClip, float beatsPerMinute, float songTimeOffset, float shuffle, float shufflePeriod, float previewStartTime, float previewDuration, UnityEngine::Sprite* coverImage, GlobalNamespace::EnvironmentInfoSO* environmentInfo, GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo, ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* difficultyBeatmapSets);
    // private System.Void InitData()
    // Offset: 0x108DA1C
    void InitData();
    // public System.Threading.Tasks.Task`1<UnityEngine.AudioClip> GetPreviewAudioClipAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x108DBF4
    System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* GetPreviewAudioClipAsync(System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<UnityEngine.Sprite> GetCoverImageAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x108DD18
    System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* GetCoverImageAsync(System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<BeatmapLevelSO/GetBeatmapLevelDataResult> GetBeatmapLevelDataAsync(System.Threading.CancellationToken token)
    // Offset: 0x108DEC0
    System::Threading::Tasks::Task_1<GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>* GetBeatmapLevelDataAsync(System::Threading::CancellationToken token);
    // public IDifficultyBeatmap GetDifficultyBeatmap(BeatmapCharacteristicSO characteristic, BeatmapDifficulty difficulty)
    // Offset: 0x108DFC0
    GlobalNamespace::IDifficultyBeatmap* GetDifficultyBeatmap(GlobalNamespace::BeatmapCharacteristicSO* characteristic, GlobalNamespace::BeatmapDifficulty difficulty);
    // public System.Void .ctor()
    // Offset: 0x108E244
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelSO*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x108D9F4
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::OnEnable()
    void OnEnable();
  }; // BeatmapLevelSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelSO), 168 + sizeof(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult)> __GlobalNamespace_BeatmapLevelSOSizeCheck;
  static_assert(sizeof(BeatmapLevelSO) == 0xB8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelSO*, "", "BeatmapLevelSO");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult, "", "BeatmapLevelSO/GetBeatmapLevelDataResult");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result, "", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_levelID
// Il2CppName: get_levelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_levelID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_levelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songSubName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songAuthorName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_levelAuthorName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_beatsPerMinute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_shuffle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_shufflePeriod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewAudioClip
// Il2CppName: get_previewAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewAudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_coverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_environmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_allDirectionsEnvironmentInfo
// Il2CppName: get_allDirectionsEnvironmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_allDirectionsEnvironmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_difficultyBeatmapSets
// Il2CppName: get_difficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::IDifficultyBeatmapSet*>* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_difficultyBeatmapSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_difficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songDuration
// Il2CppName: get_songDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewDifficultyBeatmapSets
// Il2CppName: get_previewDifficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewDifficultyBeatmapSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_beatmapLevelData
// Il2CppName: get_beatmapLevelData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelData* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_beatmapLevelData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_beatmapLevelData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::InitFull
// Il2CppName: InitFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapLevelSO::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, UnityEngine::AudioClip*, float, float, float, float, float, float, UnityEngine::Sprite*, GlobalNamespace::EnvironmentInfoSO*, GlobalNamespace::EnvironmentInfoSO*, ::Array<GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*)>(&GlobalNamespace::BeatmapLevelSO::InitFull)> {
  static const MethodInfo* get() {
    static auto* levelID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songSubName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songAuthorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelAuthorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* beatsPerMinute = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* songTimeOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shuffle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shufflePeriod = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* previewStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* previewDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coverImage = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* environmentInfo = &::il2cpp_utils::GetClassFromName("", "EnvironmentInfoSO")->byval_arg;
    static auto* allDirectionsEnvironmentInfo = &::il2cpp_utils::GetClassFromName("", "EnvironmentInfoSO")->byval_arg;
    static auto* difficultyBeatmapSets = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "BeatmapLevelSO/DifficultyBeatmapSet"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "InitFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelID, songName, songSubName, songAuthorName, levelAuthorName, audioClip, beatsPerMinute, songTimeOffset, shuffle, shufflePeriod, previewStartTime, previewDuration, coverImage, environmentInfo, allDirectionsEnvironmentInfo, difficultyBeatmapSets});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::InitData
// Il2CppName: InitData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::InitData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "InitData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetPreviewAudioClipAsync
// Il2CppName: GetPreviewAudioClipAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* (GlobalNamespace::BeatmapLevelSO::*)(System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelSO::GetPreviewAudioClipAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetCoverImageAsync
// Il2CppName: GetCoverImageAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* (GlobalNamespace::BeatmapLevelSO::*)(System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelSO::GetCoverImageAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetCoverImageAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataAsync
// Il2CppName: GetBeatmapLevelDataAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>* (GlobalNamespace::BeatmapLevelSO::*)(System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataAsync)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetBeatmapLevelDataAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetDifficultyBeatmap
// Il2CppName: GetDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (GlobalNamespace::BeatmapLevelSO::*)(GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::BeatmapLevelSO::GetDifficultyBeatmap)> {
  static const MethodInfo* get() {
    static auto* characteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    static auto* difficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characteristic, difficulty});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
