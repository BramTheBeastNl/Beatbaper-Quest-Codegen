// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DataItemConvertor`1<TOut>
  template<typename TOut>
  class DataItemConvertor_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DataConvertor`1<T>
  template<typename T>
  class DataConvertor_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::DataConvertor_1, "", "DataConvertor`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: DataConvertor`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class DataConvertor_1 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,DataItemConvertor`1<T>> _convertors
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::GlobalNamespace::DataItemConvertor_1<T>*>* convertors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::GlobalNamespace::DataItemConvertor_1<T>*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::System::Type*, ::GlobalNamespace::DataItemConvertor_1<T>*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::System::Type*, ::GlobalNamespace::DataItemConvertor_1<T>*>*() const noexcept {
      return convertors;
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Dictionary`2<System.Type,DataItemConvertor`1<T>> _convertors
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::GlobalNamespace::DataItemConvertor_1<T>*>*& dyn__convertors() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DataConvertor_1::dyn__convertors");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_convertors"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::System::Type*, ::GlobalNamespace::DataItemConvertor_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T ProcessItem(System.Object item)
    // Offset: 0xFFFFFFFF
    T ProcessItem(::Il2CppObject* item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DataConvertor_1::ProcessItem");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, item);
    }
    // public System.Void AddConvertor(DataItemConvertor`1<T> dataItemConvertor)
    // Offset: 0xFFFFFFFF
    void AddConvertor(::GlobalNamespace::DataItemConvertor_1<T>* dataItemConvertor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DataConvertor_1::AddConvertor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddConvertor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataItemConvertor)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, dataItemConvertor);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataConvertor_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DataConvertor_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataConvertor_1<T>*, creationType>()));
    }
  }; // DataConvertor`1
  // Could not write size check! Type: DataConvertor`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
