// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IExperimentData
  class IExperimentData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: IExperimentModel
  class IExperimentModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::IExperimentModel);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::IExperimentModel*, "", "IExperimentModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: IExperimentModel
  // [TokenAttribute] Offset: FFFFFFFF
  class IExperimentModel {
    public:
    // public System.Threading.Tasks.Task`1<System.Boolean> IsEmployee()
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task_1<bool>* IsEmployee();
    // public System.Threading.Tasks.Task`1<System.Boolean> IsInTest(IExperimentData data)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task_1<bool>* IsInTest(GlobalNamespace::IExperimentData* data);
  }; // IExperimentModel
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IExperimentModel::IsEmployee
// Il2CppName: IsEmployee
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (GlobalNamespace::IExperimentModel::*)()>(&GlobalNamespace::IExperimentModel::IsEmployee)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IExperimentModel*), "IsEmployee", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IExperimentModel::IsInTest
// Il2CppName: IsInTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<bool>* (GlobalNamespace::IExperimentModel::*)(GlobalNamespace::IExperimentData*)>(&GlobalNamespace::IExperimentModel::IsInTest)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("", "IExperimentData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IExperimentModel*), "IsInTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
