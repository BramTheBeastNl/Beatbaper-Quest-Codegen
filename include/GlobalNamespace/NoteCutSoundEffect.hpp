// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Saber
  class Saber;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: RandomObjectPicker`1<T>
  template<typename T>
  class RandomObjectPicker_1;
  // Forward declaring type: LazyCopyHashSet`1<T>
  template<typename T>
  class LazyCopyHashSet_1;
  // Forward declaring type: INoteCutSoundEffectDidFinishEvent
  class INoteCutSoundEffectDidFinishEvent;
  // Forward declaring type: ILazyCopyHashSet`1<T>
  template<typename T>
  class ILazyCopyHashSet_1;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: NoteCutSoundEffect
  // [] Offset: FFFFFFFF
  class NoteCutSoundEffect : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NoteCutSoundEffect::Pool
    class Pool;
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AnimationCurve _speedToVolumeCurve
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AnimationCurve* speedToVolumeCurve;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AudioClip[] _badCutSoundEffectAudioClips
    // Size: 0x8
    // Offset: 0x28
    ::Array<UnityEngine::AudioClip*>* badCutSoundEffectAudioClips;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::AudioClip*>*) == 0x8);
    // private System.Single _badCutVolume
    // Size: 0x4
    // Offset: 0x30
    float badCutVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _goodCutVolume
    // Size: 0x4
    // Offset: 0x34
    float goodCutVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Saber _saber
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::Saber* saber;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Saber*) == 0x8);
    // private NoteController _noteController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::NoteController* noteController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteController*) == 0x8);
    // private System.Boolean _isPlaying
    // Size: 0x1
    // Offset: 0x48
    bool isPlaying;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPlaying and: volumeMultiplier
    char __padding7[0x3] = {};
    // private System.Single _volumeMultiplier
    // Size: 0x4
    // Offset: 0x4C
    float volumeMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _noteWasCut
    // Size: 0x1
    // Offset: 0x50
    bool noteWasCut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: noteWasCut and: aheadTime
    char __padding9[0x3] = {};
    // private System.Single _aheadTime
    // Size: 0x4
    // Offset: 0x54
    float aheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _timeToNextNote
    // Size: 0x4
    // Offset: 0x58
    float timeToNextNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _timeToPrevNote
    // Size: 0x4
    // Offset: 0x5C
    float timeToPrevNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Double _startDSPTime
    // Size: 0x8
    // Offset: 0x60
    double startDSPTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _endDSPtime
    // Size: 0x8
    // Offset: 0x68
    double endDSPtime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double _fadeOutStartDSPtime
    // Size: 0x8
    // Offset: 0x70
    double fadeOutStartDSPtime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single _noteMissedTimeOffset
    // Size: 0x4
    // Offset: 0x78
    float noteMissedTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _beforeCutVolume
    // Size: 0x4
    // Offset: 0x7C
    float beforeCutVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _goodCut
    // Size: 0x1
    // Offset: 0x80
    bool goodCut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: goodCut and: badCutRandomSoundPicker
    char __padding18[0x7] = {};
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _badCutRandomSoundPicker
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* badCutRandomSoundPicker;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>*) == 0x8);
    // private System.Boolean _handleWrongSaberTypeAsGood
    // Size: 0x1
    // Offset: 0x90
    bool handleWrongSaberTypeAsGood;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _ignoreSaberSpeed
    // Size: 0x1
    // Offset: 0x91
    bool ignoreSaberSpeed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _ignoreBadCuts
    // Size: 0x1
    // Offset: 0x92
    bool ignoreBadCuts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignoreBadCuts and: didFinishEvent
    char __padding22[0x5] = {};
    // private readonly LazyCopyHashSet`1<INoteCutSoundEffectDidFinishEvent> _didFinishEvent
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>* didFinishEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>*) == 0x8);
    // Creating value type constructor for type: NoteCutSoundEffect
    NoteCutSoundEffect(UnityEngine::AudioSource* audioSource_ = {}, UnityEngine::AnimationCurve* speedToVolumeCurve_ = {}, ::Array<UnityEngine::AudioClip*>* badCutSoundEffectAudioClips_ = {}, float badCutVolume_ = {}, float goodCutVolume_ = {}, GlobalNamespace::Saber* saber_ = {}, GlobalNamespace::NoteController* noteController_ = {}, bool isPlaying_ = {}, float volumeMultiplier_ = {}, bool noteWasCut_ = {}, float aheadTime_ = {}, float timeToNextNote_ = {}, float timeToPrevNote_ = {}, double startDSPTime_ = {}, double endDSPtime_ = {}, double fadeOutStartDSPtime_ = {}, float noteMissedTimeOffset_ = {}, float beforeCutVolume_ = {}, bool goodCut_ = {}, GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* badCutRandomSoundPicker_ = {}, bool handleWrongSaberTypeAsGood_ = {}, bool ignoreSaberSpeed_ = {}, bool ignoreBadCuts_ = {}, GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>* didFinishEvent_ = {}) noexcept : audioSource{audioSource_}, speedToVolumeCurve{speedToVolumeCurve_}, badCutSoundEffectAudioClips{badCutSoundEffectAudioClips_}, badCutVolume{badCutVolume_}, goodCutVolume{goodCutVolume_}, saber{saber_}, noteController{noteController_}, isPlaying{isPlaying_}, volumeMultiplier{volumeMultiplier_}, noteWasCut{noteWasCut_}, aheadTime{aheadTime_}, timeToNextNote{timeToNextNote_}, timeToPrevNote{timeToPrevNote_}, startDSPTime{startDSPTime_}, endDSPtime{endDSPtime_}, fadeOutStartDSPtime{fadeOutStartDSPtime_}, noteMissedTimeOffset{noteMissedTimeOffset_}, beforeCutVolume{beforeCutVolume_}, goodCut{goodCut_}, badCutRandomSoundPicker{badCutRandomSoundPicker_}, handleWrongSaberTypeAsGood{handleWrongSaberTypeAsGood_}, ignoreSaberSpeed{ignoreSaberSpeed_}, ignoreBadCuts{ignoreBadCuts_}, didFinishEvent{didFinishEvent_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kEndOverlap
    static constexpr const float kEndOverlap = 100.01;
    // Get static field: static private System.Single kEndOverlap
    static float _get_kEndOverlap();
    // Set static field: static private System.Single kEndOverlap
    static void _set_kEndOverlap(float value);
    // static field const value: static private System.Single kEndFadeLength
    static constexpr const float kEndFadeLength = 0.01;
    // Get static field: static private System.Single kEndFadeLength
    static float _get_kEndFadeLength();
    // Set static field: static private System.Single kEndFadeLength
    static void _set_kEndFadeLength(float value);
    // public ILazyCopyHashSet`1<INoteCutSoundEffectDidFinishEvent> get_didFinishEvent()
    // Offset: 0x10C21E0
    GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>* get_didFinishEvent();
    // public System.Void set_volumeMultiplier(System.Single value)
    // Offset: 0x10C21E8
    void set_volumeMultiplier(float value);
    // public System.Single get_volumeMultiplier()
    // Offset: 0x10C21F0
    float get_volumeMultiplier();
    // public System.Single get_time()
    // Offset: 0x10C21F8
    float get_time();
    // protected System.Void Awake()
    // Offset: 0x10C2220
    void Awake();
    // protected System.Void Start()
    // Offset: 0x10C22A0
    void Start();
    // public System.Void Init(UnityEngine.AudioClip audioClip, NoteController noteController, System.Double noteDSPTime, System.Single aheadTime, System.Single missedTimeOffset, System.Single timeToPrevNote, System.Single timeToNextNote, Saber saber, System.Boolean handleWrongSaberTypeAsGood, System.Single volumeMultiplier, System.Boolean ignoreSaberSpeed, System.Boolean ignoreBadCuts)
    // Offset: 0x10C22C0
    void Init(UnityEngine::AudioClip* audioClip, GlobalNamespace::NoteController* noteController, double noteDSPTime, float aheadTime, float missedTimeOffset, float timeToPrevNote, float timeToNextNote, GlobalNamespace::Saber* saber, bool handleWrongSaberTypeAsGood, float volumeMultiplier, bool ignoreSaberSpeed, bool ignoreBadCuts);
    // private System.Void ComputeDSPTimes(System.Double noteDSPTime, System.Single aheadTime, System.Single timeToPrevNote, System.Single timeToNextNote)
    // Offset: 0x10C2444
    void ComputeDSPTimes(double noteDSPTime, float aheadTime, float timeToPrevNote, float timeToNextNote);
    // protected System.Void LateUpdate()
    // Offset: 0x10C2534
    void LateUpdate();
    // public System.Void StopPlayingAndFinish()
    // Offset: 0x10C2760
    void StopPlayingAndFinish();
    // public System.Void NoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x10C28FC
    void NoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo);
    // public System.Void .ctor()
    // Offset: 0x10C2B30
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteCutSoundEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteCutSoundEffect*, creationType>()));
    }
  }; // NoteCutSoundEffect
  #pragma pack(pop)
  static check_size<sizeof(NoteCutSoundEffect), 152 + sizeof(GlobalNamespace::LazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>*)> __GlobalNamespace_NoteCutSoundEffectSizeCheck;
  static_assert(sizeof(NoteCutSoundEffect) == 0xA0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteCutSoundEffect*, "", "NoteCutSoundEffect");
