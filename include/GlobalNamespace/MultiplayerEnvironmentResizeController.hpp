// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerCenterResizeController
  class MultiplayerCenterResizeController;
  // Forward declaring type: BeatmapObjectSpawnCenter
  class BeatmapObjectSpawnCenter;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x43
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerEnvironmentResizeController
  class MultiplayerEnvironmentResizeController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeType
    struct ResizeType;
    // Nested type: GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData
    class ResizeData;
    // private UnityEngine.Transform _platformEnd
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* platformEnd;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private MultiplayerEnvironmentResizeController/ResizeData[] _resizeData
    // Size: 0x8
    // Offset: 0x20
    ::Array<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData*>* resizeData;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData*>*) == 0x8);
    // [InjectAttribute] Offset: 0xE1DE84
    // private readonly MultiplayerCenterResizeController _centerResizeController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerCenterResizeController* centerResizeController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerCenterResizeController*) == 0x8);
    // [InjectAttribute] Offset: 0xE1DE94
    // private readonly BeatmapObjectSpawnCenter _beatmapObjectSpawnCenter
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectSpawnCenter* beatmapObjectSpawnCenter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnCenter*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1DEA4
    // private System.Action resizingDidFinishEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* resizingDidFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Boolean _isResizingFinished
    // Size: 0x1
    // Offset: 0x40
    bool isResizingFinished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _edgeDistanceFromCenterFound
    // Size: 0x1
    // Offset: 0x41
    bool edgeDistanceFromCenterFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _spawnCenterDistanceFound
    // Size: 0x1
    // Offset: 0x42
    bool spawnCenterDistanceFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MultiplayerEnvironmentResizeController
    MultiplayerEnvironmentResizeController(UnityEngine::Transform* platformEnd_ = {}, ::Array<GlobalNamespace::MultiplayerEnvironmentResizeController::ResizeData*>* resizeData_ = {}, GlobalNamespace::MultiplayerCenterResizeController* centerResizeController_ = {}, GlobalNamespace::BeatmapObjectSpawnCenter* beatmapObjectSpawnCenter_ = {}, System::Action* resizingDidFinishEvent_ = {}, bool isResizingFinished_ = {}, bool edgeDistanceFromCenterFound_ = {}, bool spawnCenterDistanceFound_ = {}) noexcept : platformEnd{platformEnd_}, resizeData{resizeData_}, centerResizeController{centerResizeController_}, beatmapObjectSpawnCenter{beatmapObjectSpawnCenter_}, resizingDidFinishEvent{resizingDidFinishEvent_}, isResizingFinished{isResizingFinished_}, edgeDistanceFromCenterFound{edgeDistanceFromCenterFound_}, spawnCenterDistanceFound{spawnCenterDistanceFound_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Boolean get_isResizingFinished()
    // Offset: 0x11541DC
    bool get_isResizingFinished();
    // public System.Void add_resizingDidFinishEvent(System.Action value)
    // Offset: 0x11541E4
    void add_resizingDidFinishEvent(System::Action* value);
    // public System.Void remove_resizingDidFinishEvent(System.Action value)
    // Offset: 0x1154288
    void remove_resizingDidFinishEvent(System::Action* value);
    // protected System.Void Start()
    // Offset: 0x115432C
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1154498
    void OnDestroy();
    // private System.Void HandleEdgeDistanceFromCenterWasCalculated(System.Single edgeDistanceFromCenter)
    // Offset: 0x1154468
    void HandleEdgeDistanceFromCenterWasCalculated(float edgeDistanceFromCenter);
    // private System.Void HandleSpawnCenterDistanceWasFound(System.Single distance)
    // Offset: 0x1154480
    void HandleSpawnCenterDistanceWasFound(float distance);
    // private System.Void TryResize()
    // Offset: 0x11545EC
    void TryResize();
    // private System.Void Resize()
    // Offset: 0x1154604
    void Resize();
    // public System.Void .ctor()
    // Offset: 0x11548FC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerEnvironmentResizeController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerEnvironmentResizeController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerEnvironmentResizeController*, creationType>()));
    }
  }; // MultiplayerEnvironmentResizeController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerEnvironmentResizeController), 66 + sizeof(bool)> __GlobalNamespace_MultiplayerEnvironmentResizeControllerSizeCheck;
  static_assert(sizeof(MultiplayerEnvironmentResizeController) == 0x43);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerEnvironmentResizeController*, "", "MultiplayerEnvironmentResizeController");
// Writing includes for template specializations
#include "System/Action.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::get_isResizingFinished
// Il2CppName: get_isResizingFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerEnvironmentResizeController::*)()>(&GlobalNamespace::MultiplayerEnvironmentResizeController::get_isResizingFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "get_isResizingFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::add_resizingDidFinishEvent
// Il2CppName: add_resizingDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)(System::Action*)>(&GlobalNamespace::MultiplayerEnvironmentResizeController::add_resizingDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "add_resizingDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::remove_resizingDidFinishEvent
// Il2CppName: remove_resizingDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)(System::Action*)>(&GlobalNamespace::MultiplayerEnvironmentResizeController::remove_resizingDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "remove_resizingDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)()>(&GlobalNamespace::MultiplayerEnvironmentResizeController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)()>(&GlobalNamespace::MultiplayerEnvironmentResizeController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::HandleEdgeDistanceFromCenterWasCalculated
// Il2CppName: HandleEdgeDistanceFromCenterWasCalculated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)(float)>(&GlobalNamespace::MultiplayerEnvironmentResizeController::HandleEdgeDistanceFromCenterWasCalculated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "HandleEdgeDistanceFromCenterWasCalculated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::HandleSpawnCenterDistanceWasFound
// Il2CppName: HandleSpawnCenterDistanceWasFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)(float)>(&GlobalNamespace::MultiplayerEnvironmentResizeController::HandleSpawnCenterDistanceWasFound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "HandleSpawnCenterDistanceWasFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::TryResize
// Il2CppName: TryResize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)()>(&GlobalNamespace::MultiplayerEnvironmentResizeController::TryResize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "TryResize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerEnvironmentResizeController::*)()>(&GlobalNamespace::MultiplayerEnvironmentResizeController::Resize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerEnvironmentResizeController*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerEnvironmentResizeController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
