// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GetActiveRT
  class GetActiveRT;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: SetActiveRT
  class SetActiveRT : public UnityEngine::MonoBehaviour {
    public:
    // private GetActiveRT _getActiveRT
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::GetActiveRT* getActiveRT;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GetActiveRT*) == 0x8);
    // Creating value type constructor for type: SetActiveRT
    SetActiveRT(GlobalNamespace::GetActiveRT* getActiveRT_ = {}) noexcept : getActiveRT{getActiveRT_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void OnPreRender()
    // Offset: 0x10DC060
    void OnPreRender();
    // public System.Void .ctor()
    // Offset: 0x10DC0F0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetActiveRT* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetActiveRT::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetActiveRT*, creationType>()));
    }
  }; // SetActiveRT
  #pragma pack(pop)
  static check_size<sizeof(SetActiveRT), 24 + sizeof(GlobalNamespace::GetActiveRT*)> __GlobalNamespace_SetActiveRTSizeCheck;
  static_assert(sizeof(SetActiveRT) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SetActiveRT*, "", "SetActiveRT");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SetActiveRT::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SetActiveRT::*)()>(&GlobalNamespace::SetActiveRT::OnPreRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetActiveRT*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SetActiveRT::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
