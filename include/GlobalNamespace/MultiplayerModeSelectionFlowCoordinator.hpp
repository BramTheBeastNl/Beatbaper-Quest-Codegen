// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: MultiplayerLobbyConnectionController
#include "GlobalNamespace/MultiplayerLobbyConnectionController.hpp"
// Including type: MultiplayerModeSelectionViewController
#include "GlobalNamespace/MultiplayerModeSelectionViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SongPackMaskModelSO
  class SongPackMaskModelSO;
  // Forward declaring type: GameServerBrowserFlowCoordinator
  class GameServerBrowserFlowCoordinator;
  // Forward declaring type: HostGameServerLobbyFlowCoordinator
  class HostGameServerLobbyFlowCoordinator;
  // Forward declaring type: ClientGameServerLobbyFlowCoordinator
  class ClientGameServerLobbyFlowCoordinator;
  // Forward declaring type: QuickPlayLobbyFlowCoordinator
  class QuickPlayLobbyFlowCoordinator;
  // Skipping declaration: INetworkPlayerModel because it is already included!
  // Forward declaring type: CreateServerViewController
  class CreateServerViewController;
  // Forward declaring type: JoinQuickPlayViewController
  class JoinQuickPlayViewController;
  // Forward declaring type: ServerCodeEntryViewController
  class ServerCodeEntryViewController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: JoiningLobbyViewController
  class JoiningLobbyViewController;
  // Skipping declaration: IUnifiedNetworkPlayerModel because it is already included!
  // Forward declaring type: AvatarDataModel
  class AvatarDataModel;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: LobbyDataModelsManager
  class LobbyDataModelsManager;
  // Skipping declaration: ConnectionFailedReason because it is already included!
  // Forward declaring type: IMasterServerAvailabilityModel
  class IMasterServerAvailabilityModel;
  // Forward declaring type: IMasterServerQuickPlaySetupModel
  class IMasterServerQuickPlaySetupModel;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: SongPreviewPlayer
  class SongPreviewPlayer;
  // Forward declaring type: IAnalyticsModel
  class IAnalyticsModel;
  // Forward declaring type: MasterServerQuickPlaySetupData
  class MasterServerQuickPlaySetupData;
  // Forward declaring type: SelectMultiplayerLobbyDestination
  class SelectMultiplayerLobbyDestination;
  // Forward declaring type: MultiplayerUnavailableReason
  struct MultiplayerUnavailableReason;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x188
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerModeSelectionFlowCoordinator
  // [] Offset: FFFFFFFF
  class MultiplayerModeSelectionFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53
    struct $TryShowModeSelection$d__53;
    // private UnityEngine.AudioClip _ambienceAudioClip
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::AudioClip* ambienceAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private SongPackMaskModelSO _songPackMaskModel
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::SongPackMaskModelSO* songPackMaskModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPackMaskModelSO*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C084
    // private readonly GameServerBrowserFlowCoordinator _gameServerBrowserFlowCoordinator
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::GameServerBrowserFlowCoordinator* gameServerBrowserFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameServerBrowserFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C094
    // private readonly HostGameServerLobbyFlowCoordinator _hostGameServerLobbyFlowCoordinator
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::HostGameServerLobbyFlowCoordinator* hostGameServerLobbyFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HostGameServerLobbyFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C0A4
    // private readonly ClientGameServerLobbyFlowCoordinator _clientGameServerLobbyFlowCoordinator
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::ClientGameServerLobbyFlowCoordinator* clientGameServerLobbyFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ClientGameServerLobbyFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C0B4
    // private readonly QuickPlayLobbyFlowCoordinator _quickPlayLobbyFlowCoordinator
    // Size: 0x8
    // Offset: 0xD0
    GlobalNamespace::QuickPlayLobbyFlowCoordinator* quickPlayLobbyFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::QuickPlayLobbyFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C0C4
    // private readonly MultiplayerModeSelectionViewController _multiplayerModeSelectionViewController
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::MultiplayerModeSelectionViewController* multiplayerModeSelectionViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerModeSelectionViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C0D4
    // private readonly CreateServerViewController _createServerViewController
    // Size: 0x8
    // Offset: 0xE0
    GlobalNamespace::CreateServerViewController* createServerViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CreateServerViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C0E4
    // private readonly JoinQuickPlayViewController _joinQuickPlayViewController
    // Size: 0x8
    // Offset: 0xE8
    GlobalNamespace::JoinQuickPlayViewController* joinQuickPlayViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::JoinQuickPlayViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C0F4
    // private readonly ServerCodeEntryViewController _serverCodeEntryViewController
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::ServerCodeEntryViewController* serverCodeEntryViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ServerCodeEntryViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C104
    // private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Size: 0x8
    // Offset: 0xF8
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SimpleDialogPromptViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C114
    // private readonly JoiningLobbyViewController _joiningLobbyViewController
    // Size: 0x8
    // Offset: 0x100
    GlobalNamespace::JoiningLobbyViewController* joiningLobbyViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::JoiningLobbyViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C124
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Size: 0x8
    // Offset: 0x108
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnifiedNetworkPlayerModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C134
    // private readonly AvatarDataModel _avatarDataModel
    // Size: 0x8
    // Offset: 0x110
    GlobalNamespace::AvatarDataModel* avatarDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C144
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x118
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C154
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x120
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C164
    // private readonly LobbyDataModelsManager _lobbyDataModelsManager
    // Size: 0x8
    // Offset: 0x128
    GlobalNamespace::LobbyDataModelsManager* lobbyDataModelsManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyDataModelsManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C174
    // private readonly MultiplayerLobbyConnectionController _multiplayerLobbyConnectionController
    // Size: 0x8
    // Offset: 0x130
    GlobalNamespace::MultiplayerLobbyConnectionController* multiplayerLobbyConnectionController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyConnectionController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C184
    // private readonly IMasterServerAvailabilityModel _masterServerAvailabilityModel
    // Size: 0x8
    // Offset: 0x138
    GlobalNamespace::IMasterServerAvailabilityModel* masterServerAvailabilityModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMasterServerAvailabilityModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C194
    // private readonly IMasterServerQuickPlaySetupModel _masterServerQuickPlaySetupModel
    // Size: 0x8
    // Offset: 0x140
    GlobalNamespace::IMasterServerQuickPlaySetupModel* masterServerQuickPlaySetupModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMasterServerQuickPlaySetupModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C1A4
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x148
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C1B4
    // private readonly SongPreviewPlayer _songPreviewPlayer
    // Size: 0x8
    // Offset: 0x150
    GlobalNamespace::SongPreviewPlayer* songPreviewPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPreviewPlayer*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C1C4
    // private readonly IAnalyticsModel _analyticsModel
    // Size: 0x8
    // Offset: 0x158
    GlobalNamespace::IAnalyticsModel* analyticsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAnalyticsModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2C1D4
    // private System.Action`1<MultiplayerModeSelectionFlowCoordinator> didFinishEvent
    // Size: 0x8
    // Offset: 0x160
    System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* didFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*) == 0x8);
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Size: 0x8
    // Offset: 0x168
    System::Threading::CancellationTokenSource* cancellationTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> _transitionFinishedTaskSource
    // Size: 0x8
    // Offset: 0x170
    System::Threading::Tasks::TaskCompletionSource_1<bool>* transitionFinishedTaskSource;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<bool>*) == 0x8);
    // private MasterServerQuickPlaySetupData _masterServerQuickPlaySetupData
    // Size: 0x8
    // Offset: 0x178
    GlobalNamespace::MasterServerQuickPlaySetupData* masterServerQuickPlaySetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MasterServerQuickPlaySetupData*) == 0x8);
    // private SelectMultiplayerLobbyDestination _lobbyDestination
    // Size: 0x8
    // Offset: 0x180
    GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SelectMultiplayerLobbyDestination*) == 0x8);
    // Creating value type constructor for type: MultiplayerModeSelectionFlowCoordinator
    MultiplayerModeSelectionFlowCoordinator(UnityEngine::AudioClip* ambienceAudioClip_ = {}, GlobalNamespace::SongPackMaskModelSO* songPackMaskModel_ = {}, GlobalNamespace::GameServerBrowserFlowCoordinator* gameServerBrowserFlowCoordinator_ = {}, GlobalNamespace::HostGameServerLobbyFlowCoordinator* hostGameServerLobbyFlowCoordinator_ = {}, GlobalNamespace::ClientGameServerLobbyFlowCoordinator* clientGameServerLobbyFlowCoordinator_ = {}, GlobalNamespace::QuickPlayLobbyFlowCoordinator* quickPlayLobbyFlowCoordinator_ = {}, GlobalNamespace::MultiplayerModeSelectionViewController* multiplayerModeSelectionViewController_ = {}, GlobalNamespace::CreateServerViewController* createServerViewController_ = {}, GlobalNamespace::JoinQuickPlayViewController* joinQuickPlayViewController_ = {}, GlobalNamespace::ServerCodeEntryViewController* serverCodeEntryViewController_ = {}, GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController_ = {}, GlobalNamespace::JoiningLobbyViewController* joiningLobbyViewController_ = {}, GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel_ = {}, GlobalNamespace::AvatarDataModel* avatarDataModel_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, GlobalNamespace::LobbyDataModelsManager* lobbyDataModelsManager_ = {}, GlobalNamespace::MultiplayerLobbyConnectionController* multiplayerLobbyConnectionController_ = {}, GlobalNamespace::IMasterServerAvailabilityModel* masterServerAvailabilityModel_ = {}, GlobalNamespace::IMasterServerQuickPlaySetupModel* masterServerQuickPlaySetupModel_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::SongPreviewPlayer* songPreviewPlayer_ = {}, GlobalNamespace::IAnalyticsModel* analyticsModel_ = {}, System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* didFinishEvent_ = {}, System::Threading::CancellationTokenSource* cancellationTokenSource_ = {}, System::Threading::Tasks::TaskCompletionSource_1<bool>* transitionFinishedTaskSource_ = {}, GlobalNamespace::MasterServerQuickPlaySetupData* masterServerQuickPlaySetupData_ = {}, GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination_ = {}) noexcept : ambienceAudioClip{ambienceAudioClip_}, songPackMaskModel{songPackMaskModel_}, gameServerBrowserFlowCoordinator{gameServerBrowserFlowCoordinator_}, hostGameServerLobbyFlowCoordinator{hostGameServerLobbyFlowCoordinator_}, clientGameServerLobbyFlowCoordinator{clientGameServerLobbyFlowCoordinator_}, quickPlayLobbyFlowCoordinator{quickPlayLobbyFlowCoordinator_}, multiplayerModeSelectionViewController{multiplayerModeSelectionViewController_}, createServerViewController{createServerViewController_}, joinQuickPlayViewController{joinQuickPlayViewController_}, serverCodeEntryViewController{serverCodeEntryViewController_}, simpleDialogPromptViewController{simpleDialogPromptViewController_}, joiningLobbyViewController{joiningLobbyViewController_}, unifiedNetworkPlayerModel{unifiedNetworkPlayerModel_}, avatarDataModel{avatarDataModel_}, multiplayerSessionManager{multiplayerSessionManager_}, fadeInOutController{fadeInOutController_}, lobbyDataModelsManager{lobbyDataModelsManager_}, multiplayerLobbyConnectionController{multiplayerLobbyConnectionController_}, masterServerAvailabilityModel{masterServerAvailabilityModel_}, masterServerQuickPlaySetupModel{masterServerQuickPlaySetupModel_}, playerDataModel{playerDataModel_}, songPreviewPlayer{songPreviewPlayer_}, analyticsModel{analyticsModel_}, didFinishEvent{didFinishEvent_}, cancellationTokenSource{cancellationTokenSource_}, transitionFinishedTaskSource{transitionFinishedTaskSource_}, masterServerQuickPlaySetupData{masterServerQuickPlaySetupData_}, lobbyDestination{lobbyDestination_} {}
    // public System.Void add_didFinishEvent(System.Action`1<MultiplayerModeSelectionFlowCoordinator> value)
    // Offset: 0xF53398
    void add_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<MultiplayerModeSelectionFlowCoordinator> value)
    // Offset: 0xF53440
    void remove_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value);
    // public System.Void Setup(SelectMultiplayerLobbyDestination lobbyDestination)
    // Offset: 0xF534E8
    void Setup(GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination);
    // private System.Void HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel()
    // Offset: 0xF54720
    void HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel();
    // private System.Void HandleMultiplayerLobbyConnectionControllerConnectionSuccess()
    // Offset: 0xF5473C
    void HandleMultiplayerLobbyConnectionControllerConnectionSuccess();
    // private System.Void HandleMultiplayerLobbyConnectionControllerConnectionFailed(MultiplayerLobbyConnectionController/LobbyConnectionType connectionType, ConnectionFailedReason reason)
    // Offset: 0xF54740
    void HandleMultiplayerLobbyConnectionControllerConnectionFailed(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType connectionType, GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void HandleMultiplayerLobbyControllerDidFinish(MultiplayerModeSelectionViewController viewController, MultiplayerModeSelectionViewController/MenuButton menuButton)
    // Offset: 0xF54814
    void HandleMultiplayerLobbyControllerDidFinish(GlobalNamespace::MultiplayerModeSelectionViewController* viewController, GlobalNamespace::MultiplayerModeSelectionViewController::MenuButton menuButton);
    // private System.Void HandleGameServerBrowserFlowCoordinatorDidFinish(GameServerBrowserFlowCoordinator flowCoordinator)
    // Offset: 0xF548FC
    void HandleGameServerBrowserFlowCoordinatorDidFinish(GlobalNamespace::GameServerBrowserFlowCoordinator* flowCoordinator);
    // private System.Void HandleJoiningLobbyViewControllerDidFinish()
    // Offset: 0xF54910
    void HandleJoiningLobbyViewControllerDidFinish();
    // private System.Void HandleJoinQuickPlayViewControllerDidFinish(System.Boolean success)
    // Offset: 0xF549D4
    void HandleJoinQuickPlayViewControllerDidFinish(bool success);
    // private System.Void HandleServerCodeEntryViewControllerDidFinish(System.Boolean success, System.String code)
    // Offset: 0xF54B0C
    void HandleServerCodeEntryViewControllerDidFinish(bool success, ::Il2CppString* code);
    // private System.Void HandleCreateServerViewControllerDidFinish(System.Boolean success, UnifiedNetworkPlayerModel/CreatePartyConfig createPartyConfig)
    // Offset: 0xF54BF4
    void HandleCreateServerViewControllerDidFinish(bool success, GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig* createPartyConfig);
    // private System.Void HandleClientGameServerLobbyFlowCoordinatorDidFinish(ClientGameServerLobbyFlowCoordinator obj)
    // Offset: 0xF54CFC
    void HandleClientGameServerLobbyFlowCoordinatorDidFinish(GlobalNamespace::ClientGameServerLobbyFlowCoordinator* obj);
    // private System.Void HandleClientGameServerLobbyFlowCoordinatorWillFinish(ClientGameServerLobbyFlowCoordinator obj)
    // Offset: 0xF54E4C
    void HandleClientGameServerLobbyFlowCoordinatorWillFinish(GlobalNamespace::ClientGameServerLobbyFlowCoordinator* obj);
    // private System.Void HandleQuickPlayLobbyFlowCoordinatorDidFinish()
    // Offset: 0xF54EF0
    void HandleQuickPlayLobbyFlowCoordinatorDidFinish();
    // private System.Void HandleQuickPlayLobbyFlowCoordinatorWillFinish()
    // Offset: 0xF55038
    void HandleQuickPlayLobbyFlowCoordinatorWillFinish();
    // private System.Void HandleHostGameServerLobbyFlowCoordinatorDidFinish(HostGameServerLobbyFlowCoordinator flowCoordinator)
    // Offset: 0xF550D4
    void HandleHostGameServerLobbyFlowCoordinatorDidFinish(GlobalNamespace::HostGameServerLobbyFlowCoordinator* flowCoordinator);
    // private System.Void HandleHostGameServerLobbyFlowCoordinatorWillFinish(HostGameServerLobbyFlowCoordinator flowCoordinator)
    // Offset: 0xF551B4
    void HandleHostGameServerLobbyFlowCoordinatorWillFinish(GlobalNamespace::HostGameServerLobbyFlowCoordinator* flowCoordinator);
    // private System.Void HandleConnectedPlayerManagerCreated(INetworkPlayerModel networkPlayerModel)
    // Offset: 0xF55258
    void HandleConnectedPlayerManagerCreated(GlobalNamespace::INetworkPlayerModel* networkPlayerModel);
    // private System.Void TryShowModeSelection(System.Boolean shouldProvideInitialViewControllers)
    // Offset: 0xF537F0
    void TryShowModeSelection(bool shouldProvideInitialViewControllers);
    // private System.Void ResolveAndPresentNextFlowCoordinator()
    // Offset: 0xF5429C
    void ResolveAndPresentNextFlowCoordinator();
    // private System.Void PresentConnectionErrorDialog(MultiplayerLobbyConnectionController/LobbyConnectionType connectionType, ConnectionFailedReason reason)
    // Offset: 0xF54338
    void PresentConnectionErrorDialog(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType connectionType, GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void PresentMasterServerUnavailableErrorDialog(MultiplayerUnavailableReason reason, System.Exception exception, System.Nullable`1<System.Int64> maintenanceWindowEndTime, System.String remoteLocalizedMessage)
    // Offset: 0xF55448
    void PresentMasterServerUnavailableErrorDialog(GlobalNamespace::MultiplayerUnavailableReason reason, System::Exception* exception, System::Nullable_1<int64_t> maintenanceWindowEndTime, ::Il2CppString* remoteLocalizedMessage);
    // private System.Void ProcessDeeplinkingToLobby()
    // Offset: 0xF557E0
    void ProcessDeeplinkingToLobby();
    // private System.Void JoinLobbyWithSecret(System.String serverName, System.String secret)
    // Offset: 0xF55858
    void JoinLobbyWithSecret(::Il2CppString* serverName, ::Il2CppString* secret);
    // private System.Void JoinLobbyWithCode(System.String code)
    // Offset: 0xF55980
    void JoinLobbyWithCode(::Il2CppString* code);
    // private System.Void <ResolveAndPresentNextFlowCoordinator>b__54_0()
    // Offset: 0xF55A2C
    void $ResolveAndPresentNextFlowCoordinator$b__54_0();
    // private System.Void <PresentConnectionErrorDialog>b__55_0(System.Int32 btnId)
    // Offset: 0xF55DB8
    void $PresentConnectionErrorDialog$b__55_0(int btnId);
    // private System.Void <PresentConnectionErrorDialog>b__55_1(System.Int32 btnId)
    // Offset: 0xF55DD0
    void $PresentConnectionErrorDialog$b__55_1(int btnId);
    // private System.Void <PresentMasterServerUnavailableErrorDialog>b__56_0(System.Int32 btnId)
    // Offset: 0xF55DE8
    void $PresentMasterServerUnavailableErrorDialog$b__56_0(int btnId);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF534F0
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate_NEW(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0xF538A8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate_NEW(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xF53BFC
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed_NEW(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0xF53CE8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange_NEW(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void TransitionDidStart()
    // Offset: 0xF53F24
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidStart_NEW()
    void TransitionDidStart();
    // protected override System.Void TransitionDidFinish()
    // Offset: 0xF5405C
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidFinish_NEW()
    void TransitionDidFinish();
    // public System.Void .ctor()
    // Offset: 0xF55A24
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerModeSelectionFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerModeSelectionFlowCoordinator*, creationType>()));
    }
  }; // MultiplayerModeSelectionFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerModeSelectionFlowCoordinator), 384 + sizeof(GlobalNamespace::SelectMultiplayerLobbyDestination*)> __GlobalNamespace_MultiplayerModeSelectionFlowCoordinatorSizeCheck;
  static_assert(sizeof(MultiplayerModeSelectionFlowCoordinator) == 0x188);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*, "", "MultiplayerModeSelectionFlowCoordinator");
