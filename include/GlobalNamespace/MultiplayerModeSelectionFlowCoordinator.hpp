// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: MultiplayerLobbyConnectionController
#include "GlobalNamespace/MultiplayerLobbyConnectionController.hpp"
// Including type: MultiplayerModeSelectionViewController
#include "GlobalNamespace/MultiplayerModeSelectionViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SongPackMaskModelSO
  class SongPackMaskModelSO;
  // Forward declaring type: GameServerBrowserFlowCoordinator
  class GameServerBrowserFlowCoordinator;
  // Forward declaring type: GameServerLobbyFlowCoordinator
  class GameServerLobbyFlowCoordinator;
  // Forward declaring type: CreateServerFormData
  struct CreateServerFormData;
  // Forward declaring type: CreateServerViewController
  class CreateServerViewController;
  // Forward declaring type: JoinQuickPlayViewController
  class JoinQuickPlayViewController;
  // Forward declaring type: ServerCodeEntryViewController
  class ServerCodeEntryViewController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: JoiningLobbyViewController
  class JoiningLobbyViewController;
  // Skipping declaration: IUnifiedNetworkPlayerModel because it is already included!
  // Forward declaring type: AvatarDataModel
  class AvatarDataModel;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: LobbyDataModelsManager
  class LobbyDataModelsManager;
  // Skipping declaration: ConnectionFailedReason because it is already included!
  // Forward declaring type: IMasterServerAvailabilityModel
  class IMasterServerAvailabilityModel;
  // Forward declaring type: IMasterServerQuickPlaySetupModel
  class IMasterServerQuickPlaySetupModel;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: SongPreviewPlayer
  class SongPreviewPlayer;
  // Forward declaring type: IAnalyticsModel
  class IAnalyticsModel;
  // Forward declaring type: ILobbyGameStateController
  class ILobbyGameStateController;
  // Forward declaring type: MasterServerQuickPlaySetupData
  class MasterServerQuickPlaySetupData;
  // Forward declaring type: SelectMultiplayerLobbyDestination
  class SelectMultiplayerLobbyDestination;
  // Skipping declaration: INetworkPlayerModel because it is already included!
  // Forward declaring type: MultiplayerUnavailableReason
  struct MultiplayerUnavailableReason;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x188
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerModeSelectionFlowCoordinator
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerModeSelectionFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__49
    struct $TryShowModeSelection$d__49;
    // Nested type: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$ResolveAndPresentNextFlowCoordinator$d__50
    struct $ResolveAndPresentNextFlowCoordinator$d__50;
    // private UnityEngine.AudioClip _ambienceAudioClip
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::AudioClip* ambienceAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private SongPackMaskModelSO _songPackMaskModel
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::SongPackMaskModelSO* songPackMaskModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPackMaskModelSO*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE2C
    // private readonly GameServerBrowserFlowCoordinator _gameServerBrowserFlowCoordinator
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::GameServerBrowserFlowCoordinator* gameServerBrowserFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameServerBrowserFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE3C
    // private readonly GameServerLobbyFlowCoordinator _gameServerLobbyFlowCoordinator
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::GameServerLobbyFlowCoordinator* gameServerLobbyFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameServerLobbyFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE4C
    // private readonly MultiplayerModeSelectionViewController _multiplayerModeSelectionViewController
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::MultiplayerModeSelectionViewController* multiplayerModeSelectionViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerModeSelectionViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE5C
    // private readonly CreateServerViewController _createServerViewController
    // Size: 0x8
    // Offset: 0xD0
    GlobalNamespace::CreateServerViewController* createServerViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CreateServerViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE6C
    // private readonly JoinQuickPlayViewController _joinQuickPlayViewController
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::JoinQuickPlayViewController* joinQuickPlayViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::JoinQuickPlayViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE7C
    // private readonly ServerCodeEntryViewController _serverCodeEntryViewController
    // Size: 0x8
    // Offset: 0xE0
    GlobalNamespace::ServerCodeEntryViewController* serverCodeEntryViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ServerCodeEntryViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE8C
    // private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Size: 0x8
    // Offset: 0xE8
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SimpleDialogPromptViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CE9C
    // private readonly JoiningLobbyViewController _joiningLobbyViewController
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::JoiningLobbyViewController* joiningLobbyViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::JoiningLobbyViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CEAC
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Size: 0x8
    // Offset: 0xF8
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnifiedNetworkPlayerModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CEBC
    // private readonly AvatarDataModel _avatarDataModel
    // Size: 0x8
    // Offset: 0x100
    GlobalNamespace::AvatarDataModel* avatarDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CECC
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x108
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CEDC
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x110
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CEEC
    // private readonly LobbyDataModelsManager _lobbyDataModelsManager
    // Size: 0x8
    // Offset: 0x118
    GlobalNamespace::LobbyDataModelsManager* lobbyDataModelsManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyDataModelsManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CEFC
    // private readonly MultiplayerLobbyConnectionController _multiplayerLobbyConnectionController
    // Size: 0x8
    // Offset: 0x120
    GlobalNamespace::MultiplayerLobbyConnectionController* multiplayerLobbyConnectionController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyConnectionController*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CF0C
    // private readonly IMasterServerAvailabilityModel _masterServerAvailabilityModel
    // Size: 0x8
    // Offset: 0x128
    GlobalNamespace::IMasterServerAvailabilityModel* masterServerAvailabilityModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMasterServerAvailabilityModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CF1C
    // private readonly IMasterServerQuickPlaySetupModel _masterServerQuickPlaySetupModel
    // Size: 0x8
    // Offset: 0x130
    GlobalNamespace::IMasterServerQuickPlaySetupModel* masterServerQuickPlaySetupModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMasterServerQuickPlaySetupModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CF2C
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x138
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CF3C
    // private readonly SongPreviewPlayer _songPreviewPlayer
    // Size: 0x8
    // Offset: 0x140
    GlobalNamespace::SongPreviewPlayer* songPreviewPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPreviewPlayer*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CF4C
    // private readonly IAnalyticsModel _analyticsModel
    // Size: 0x8
    // Offset: 0x148
    GlobalNamespace::IAnalyticsModel* analyticsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAnalyticsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE0CF5C
    // private readonly ILobbyGameStateController _lobbyGameStateController
    // Size: 0x8
    // Offset: 0x150
    GlobalNamespace::ILobbyGameStateController* lobbyGameStateController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyGameStateController*) == 0x8);
    // private System.Action`1<MultiplayerModeSelectionFlowCoordinator> didFinishEvent
    // Size: 0x8
    // Offset: 0x158
    System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* didFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*) == 0x8);
    // private System.Threading.CancellationTokenSource _joiningLobbyCancellationTokenSource
    // Size: 0x8
    // Offset: 0x160
    System::Threading::CancellationTokenSource* joiningLobbyCancellationTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Size: 0x8
    // Offset: 0x168
    System::Threading::CancellationTokenSource* cancellationTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> _transitionFinishedTaskSource
    // Size: 0x8
    // Offset: 0x170
    System::Threading::Tasks::TaskCompletionSource_1<bool>* transitionFinishedTaskSource;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<bool>*) == 0x8);
    // private MasterServerQuickPlaySetupData _masterServerQuickPlaySetupData
    // Size: 0x8
    // Offset: 0x178
    GlobalNamespace::MasterServerQuickPlaySetupData* masterServerQuickPlaySetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MasterServerQuickPlaySetupData*) == 0x8);
    // private SelectMultiplayerLobbyDestination _lobbyDestination
    // Size: 0x8
    // Offset: 0x180
    GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SelectMultiplayerLobbyDestination*) == 0x8);
    // Creating value type constructor for type: MultiplayerModeSelectionFlowCoordinator
    MultiplayerModeSelectionFlowCoordinator(UnityEngine::AudioClip* ambienceAudioClip_ = {}, GlobalNamespace::SongPackMaskModelSO* songPackMaskModel_ = {}, GlobalNamespace::GameServerBrowserFlowCoordinator* gameServerBrowserFlowCoordinator_ = {}, GlobalNamespace::GameServerLobbyFlowCoordinator* gameServerLobbyFlowCoordinator_ = {}, GlobalNamespace::MultiplayerModeSelectionViewController* multiplayerModeSelectionViewController_ = {}, GlobalNamespace::CreateServerViewController* createServerViewController_ = {}, GlobalNamespace::JoinQuickPlayViewController* joinQuickPlayViewController_ = {}, GlobalNamespace::ServerCodeEntryViewController* serverCodeEntryViewController_ = {}, GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController_ = {}, GlobalNamespace::JoiningLobbyViewController* joiningLobbyViewController_ = {}, GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel_ = {}, GlobalNamespace::AvatarDataModel* avatarDataModel_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, GlobalNamespace::LobbyDataModelsManager* lobbyDataModelsManager_ = {}, GlobalNamespace::MultiplayerLobbyConnectionController* multiplayerLobbyConnectionController_ = {}, GlobalNamespace::IMasterServerAvailabilityModel* masterServerAvailabilityModel_ = {}, GlobalNamespace::IMasterServerQuickPlaySetupModel* masterServerQuickPlaySetupModel_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::SongPreviewPlayer* songPreviewPlayer_ = {}, GlobalNamespace::IAnalyticsModel* analyticsModel_ = {}, GlobalNamespace::ILobbyGameStateController* lobbyGameStateController_ = {}, System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* didFinishEvent_ = {}, System::Threading::CancellationTokenSource* joiningLobbyCancellationTokenSource_ = {}, System::Threading::CancellationTokenSource* cancellationTokenSource_ = {}, System::Threading::Tasks::TaskCompletionSource_1<bool>* transitionFinishedTaskSource_ = {}, GlobalNamespace::MasterServerQuickPlaySetupData* masterServerQuickPlaySetupData_ = {}, GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination_ = {}) noexcept : ambienceAudioClip{ambienceAudioClip_}, songPackMaskModel{songPackMaskModel_}, gameServerBrowserFlowCoordinator{gameServerBrowserFlowCoordinator_}, gameServerLobbyFlowCoordinator{gameServerLobbyFlowCoordinator_}, multiplayerModeSelectionViewController{multiplayerModeSelectionViewController_}, createServerViewController{createServerViewController_}, joinQuickPlayViewController{joinQuickPlayViewController_}, serverCodeEntryViewController{serverCodeEntryViewController_}, simpleDialogPromptViewController{simpleDialogPromptViewController_}, joiningLobbyViewController{joiningLobbyViewController_}, unifiedNetworkPlayerModel{unifiedNetworkPlayerModel_}, avatarDataModel{avatarDataModel_}, multiplayerSessionManager{multiplayerSessionManager_}, fadeInOutController{fadeInOutController_}, lobbyDataModelsManager{lobbyDataModelsManager_}, multiplayerLobbyConnectionController{multiplayerLobbyConnectionController_}, masterServerAvailabilityModel{masterServerAvailabilityModel_}, masterServerQuickPlaySetupModel{masterServerQuickPlaySetupModel_}, playerDataModel{playerDataModel_}, songPreviewPlayer{songPreviewPlayer_}, analyticsModel{analyticsModel_}, lobbyGameStateController{lobbyGameStateController_}, didFinishEvent{didFinishEvent_}, joiningLobbyCancellationTokenSource{joiningLobbyCancellationTokenSource_}, cancellationTokenSource{cancellationTokenSource_}, transitionFinishedTaskSource{transitionFinishedTaskSource_}, masterServerQuickPlaySetupData{masterServerQuickPlaySetupData_}, lobbyDestination{lobbyDestination_} {}
    // Get instance field: private UnityEngine.AudioClip _ambienceAudioClip
    UnityEngine::AudioClip* _get__ambienceAudioClip();
    // Set instance field: private UnityEngine.AudioClip _ambienceAudioClip
    void _set__ambienceAudioClip(UnityEngine::AudioClip* value);
    // Get instance field: private SongPackMaskModelSO _songPackMaskModel
    GlobalNamespace::SongPackMaskModelSO* _get__songPackMaskModel();
    // Set instance field: private SongPackMaskModelSO _songPackMaskModel
    void _set__songPackMaskModel(GlobalNamespace::SongPackMaskModelSO* value);
    // Get instance field: private readonly GameServerBrowserFlowCoordinator _gameServerBrowserFlowCoordinator
    GlobalNamespace::GameServerBrowserFlowCoordinator* _get__gameServerBrowserFlowCoordinator();
    // Set instance field: private readonly GameServerBrowserFlowCoordinator _gameServerBrowserFlowCoordinator
    void _set__gameServerBrowserFlowCoordinator(GlobalNamespace::GameServerBrowserFlowCoordinator* value);
    // Get instance field: private readonly GameServerLobbyFlowCoordinator _gameServerLobbyFlowCoordinator
    GlobalNamespace::GameServerLobbyFlowCoordinator* _get__gameServerLobbyFlowCoordinator();
    // Set instance field: private readonly GameServerLobbyFlowCoordinator _gameServerLobbyFlowCoordinator
    void _set__gameServerLobbyFlowCoordinator(GlobalNamespace::GameServerLobbyFlowCoordinator* value);
    // Get instance field: private readonly MultiplayerModeSelectionViewController _multiplayerModeSelectionViewController
    GlobalNamespace::MultiplayerModeSelectionViewController* _get__multiplayerModeSelectionViewController();
    // Set instance field: private readonly MultiplayerModeSelectionViewController _multiplayerModeSelectionViewController
    void _set__multiplayerModeSelectionViewController(GlobalNamespace::MultiplayerModeSelectionViewController* value);
    // Get instance field: private readonly CreateServerViewController _createServerViewController
    GlobalNamespace::CreateServerViewController* _get__createServerViewController();
    // Set instance field: private readonly CreateServerViewController _createServerViewController
    void _set__createServerViewController(GlobalNamespace::CreateServerViewController* value);
    // Get instance field: private readonly JoinQuickPlayViewController _joinQuickPlayViewController
    GlobalNamespace::JoinQuickPlayViewController* _get__joinQuickPlayViewController();
    // Set instance field: private readonly JoinQuickPlayViewController _joinQuickPlayViewController
    void _set__joinQuickPlayViewController(GlobalNamespace::JoinQuickPlayViewController* value);
    // Get instance field: private readonly ServerCodeEntryViewController _serverCodeEntryViewController
    GlobalNamespace::ServerCodeEntryViewController* _get__serverCodeEntryViewController();
    // Set instance field: private readonly ServerCodeEntryViewController _serverCodeEntryViewController
    void _set__serverCodeEntryViewController(GlobalNamespace::ServerCodeEntryViewController* value);
    // Get instance field: private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    GlobalNamespace::SimpleDialogPromptViewController* _get__simpleDialogPromptViewController();
    // Set instance field: private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    void _set__simpleDialogPromptViewController(GlobalNamespace::SimpleDialogPromptViewController* value);
    // Get instance field: private readonly JoiningLobbyViewController _joiningLobbyViewController
    GlobalNamespace::JoiningLobbyViewController* _get__joiningLobbyViewController();
    // Set instance field: private readonly JoiningLobbyViewController _joiningLobbyViewController
    void _set__joiningLobbyViewController(GlobalNamespace::JoiningLobbyViewController* value);
    // Get instance field: private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    GlobalNamespace::IUnifiedNetworkPlayerModel* _get__unifiedNetworkPlayerModel();
    // Set instance field: private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    void _set__unifiedNetworkPlayerModel(GlobalNamespace::IUnifiedNetworkPlayerModel* value);
    // Get instance field: private readonly AvatarDataModel _avatarDataModel
    GlobalNamespace::AvatarDataModel* _get__avatarDataModel();
    // Set instance field: private readonly AvatarDataModel _avatarDataModel
    void _set__avatarDataModel(GlobalNamespace::AvatarDataModel* value);
    // Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    GlobalNamespace::IMultiplayerSessionManager* _get__multiplayerSessionManager();
    // Set instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    void _set__multiplayerSessionManager(GlobalNamespace::IMultiplayerSessionManager* value);
    // Get instance field: private readonly FadeInOutController _fadeInOutController
    GlobalNamespace::FadeInOutController* _get__fadeInOutController();
    // Set instance field: private readonly FadeInOutController _fadeInOutController
    void _set__fadeInOutController(GlobalNamespace::FadeInOutController* value);
    // Get instance field: private readonly LobbyDataModelsManager _lobbyDataModelsManager
    GlobalNamespace::LobbyDataModelsManager* _get__lobbyDataModelsManager();
    // Set instance field: private readonly LobbyDataModelsManager _lobbyDataModelsManager
    void _set__lobbyDataModelsManager(GlobalNamespace::LobbyDataModelsManager* value);
    // Get instance field: private readonly MultiplayerLobbyConnectionController _multiplayerLobbyConnectionController
    GlobalNamespace::MultiplayerLobbyConnectionController* _get__multiplayerLobbyConnectionController();
    // Set instance field: private readonly MultiplayerLobbyConnectionController _multiplayerLobbyConnectionController
    void _set__multiplayerLobbyConnectionController(GlobalNamespace::MultiplayerLobbyConnectionController* value);
    // Get instance field: private readonly IMasterServerAvailabilityModel _masterServerAvailabilityModel
    GlobalNamespace::IMasterServerAvailabilityModel* _get__masterServerAvailabilityModel();
    // Set instance field: private readonly IMasterServerAvailabilityModel _masterServerAvailabilityModel
    void _set__masterServerAvailabilityModel(GlobalNamespace::IMasterServerAvailabilityModel* value);
    // Get instance field: private readonly IMasterServerQuickPlaySetupModel _masterServerQuickPlaySetupModel
    GlobalNamespace::IMasterServerQuickPlaySetupModel* _get__masterServerQuickPlaySetupModel();
    // Set instance field: private readonly IMasterServerQuickPlaySetupModel _masterServerQuickPlaySetupModel
    void _set__masterServerQuickPlaySetupModel(GlobalNamespace::IMasterServerQuickPlaySetupModel* value);
    // Get instance field: private readonly PlayerDataModel _playerDataModel
    GlobalNamespace::PlayerDataModel* _get__playerDataModel();
    // Set instance field: private readonly PlayerDataModel _playerDataModel
    void _set__playerDataModel(GlobalNamespace::PlayerDataModel* value);
    // Get instance field: private readonly SongPreviewPlayer _songPreviewPlayer
    GlobalNamespace::SongPreviewPlayer* _get__songPreviewPlayer();
    // Set instance field: private readonly SongPreviewPlayer _songPreviewPlayer
    void _set__songPreviewPlayer(GlobalNamespace::SongPreviewPlayer* value);
    // Get instance field: private readonly IAnalyticsModel _analyticsModel
    GlobalNamespace::IAnalyticsModel* _get__analyticsModel();
    // Set instance field: private readonly IAnalyticsModel _analyticsModel
    void _set__analyticsModel(GlobalNamespace::IAnalyticsModel* value);
    // Get instance field: private readonly ILobbyGameStateController _lobbyGameStateController
    GlobalNamespace::ILobbyGameStateController* _get__lobbyGameStateController();
    // Set instance field: private readonly ILobbyGameStateController _lobbyGameStateController
    void _set__lobbyGameStateController(GlobalNamespace::ILobbyGameStateController* value);
    // Get instance field: private System.Action`1<MultiplayerModeSelectionFlowCoordinator> didFinishEvent
    System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* _get_didFinishEvent();
    // Set instance field: private System.Action`1<MultiplayerModeSelectionFlowCoordinator> didFinishEvent
    void _set_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value);
    // Get instance field: private System.Threading.CancellationTokenSource _joiningLobbyCancellationTokenSource
    System::Threading::CancellationTokenSource* _get__joiningLobbyCancellationTokenSource();
    // Set instance field: private System.Threading.CancellationTokenSource _joiningLobbyCancellationTokenSource
    void _set__joiningLobbyCancellationTokenSource(System::Threading::CancellationTokenSource* value);
    // Get instance field: private System.Threading.CancellationTokenSource _cancellationTokenSource
    System::Threading::CancellationTokenSource* _get__cancellationTokenSource();
    // Set instance field: private System.Threading.CancellationTokenSource _cancellationTokenSource
    void _set__cancellationTokenSource(System::Threading::CancellationTokenSource* value);
    // Get instance field: private System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> _transitionFinishedTaskSource
    System::Threading::Tasks::TaskCompletionSource_1<bool>* _get__transitionFinishedTaskSource();
    // Set instance field: private System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> _transitionFinishedTaskSource
    void _set__transitionFinishedTaskSource(System::Threading::Tasks::TaskCompletionSource_1<bool>* value);
    // Get instance field: private MasterServerQuickPlaySetupData _masterServerQuickPlaySetupData
    GlobalNamespace::MasterServerQuickPlaySetupData* _get__masterServerQuickPlaySetupData();
    // Set instance field: private MasterServerQuickPlaySetupData _masterServerQuickPlaySetupData
    void _set__masterServerQuickPlaySetupData(GlobalNamespace::MasterServerQuickPlaySetupData* value);
    // Get instance field: private SelectMultiplayerLobbyDestination _lobbyDestination
    GlobalNamespace::SelectMultiplayerLobbyDestination* _get__lobbyDestination();
    // Set instance field: private SelectMultiplayerLobbyDestination _lobbyDestination
    void _set__lobbyDestination(GlobalNamespace::SelectMultiplayerLobbyDestination* value);
    // public System.Void add_didFinishEvent(System.Action`1<MultiplayerModeSelectionFlowCoordinator> value)
    // Offset: 0x23D94B4
    void add_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<MultiplayerModeSelectionFlowCoordinator> value)
    // Offset: 0x23D955C
    void remove_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value);
    // public System.Void Setup(SelectMultiplayerLobbyDestination lobbyDestination)
    // Offset: 0x23D9604
    void Setup(GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination);
    // private System.Void HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel()
    // Offset: 0x23DA9B4
    void HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel();
    // private System.Void HandleMultiplayerLobbyConnectionControllerConnectionSuccess()
    // Offset: 0x23DA9D0
    void HandleMultiplayerLobbyConnectionControllerConnectionSuccess();
    // private System.Void HandleMultiplayerLobbyConnectionControllerConnectionFailed(MultiplayerLobbyConnectionController/LobbyConnectionType connectionType, ConnectionFailedReason reason)
    // Offset: 0x23DA9D4
    void HandleMultiplayerLobbyConnectionControllerConnectionFailed(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType connectionType, GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void HandleMultiplayerLobbyControllerDidFinish(MultiplayerModeSelectionViewController viewController, MultiplayerModeSelectionViewController/MenuButton menuButton)
    // Offset: 0x23DAAA8
    void HandleMultiplayerLobbyControllerDidFinish(GlobalNamespace::MultiplayerModeSelectionViewController* viewController, GlobalNamespace::MultiplayerModeSelectionViewController::MenuButton menuButton);
    // private System.Void HandleGameServerBrowserFlowCoordinatorDidFinish(GameServerBrowserFlowCoordinator flowCoordinator)
    // Offset: 0x23DAB90
    void HandleGameServerBrowserFlowCoordinatorDidFinish(GlobalNamespace::GameServerBrowserFlowCoordinator* flowCoordinator);
    // private System.Void HandleJoiningLobbyViewControllerDidCancel()
    // Offset: 0x23DABA4
    void HandleJoiningLobbyViewControllerDidCancel();
    // private System.Void HandleJoinQuickPlayViewControllerDidFinish(System.Boolean success)
    // Offset: 0x23DAC78
    void HandleJoinQuickPlayViewControllerDidFinish(bool success);
    // private System.Void HandleServerCodeEntryViewControllerDidFinish(System.Boolean success, System.String code)
    // Offset: 0x23DADF4
    void HandleServerCodeEntryViewControllerDidFinish(bool success, ::Il2CppString* code);
    // private System.Void HandleCreateServerViewControllerDidFinish(System.Boolean success, CreateServerFormData data)
    // Offset: 0x23DAF0C
    void HandleCreateServerViewControllerDidFinish(bool success, GlobalNamespace::CreateServerFormData data);
    // private System.Void HandleGameServerLobbyFlowCoordinatorDidFinish()
    // Offset: 0x23DB074
    void HandleGameServerLobbyFlowCoordinatorDidFinish();
    // private System.Void HandleGameServerLobbyFlowCoordinatorWillFinish()
    // Offset: 0x23DB2AC
    void HandleGameServerLobbyFlowCoordinatorWillFinish();
    // private System.Void HandleConnectedPlayerManagerCreated(INetworkPlayerModel networkPlayerModel)
    // Offset: 0x23DB348
    void HandleConnectedPlayerManagerCreated(GlobalNamespace::INetworkPlayerModel* networkPlayerModel);
    // private System.Void TryShowModeSelection(System.Boolean shouldProvideInitialViewControllers)
    // Offset: 0x23D99AC
    void TryShowModeSelection(bool shouldProvideInitialViewControllers);
    // private System.Void ResolveAndPresentNextFlowCoordinator()
    // Offset: 0x23DA50C
    void ResolveAndPresentNextFlowCoordinator();
    // private System.Void PresentConnectionErrorDialog(MultiplayerLobbyConnectionController/LobbyConnectionType connectionType, ConnectionFailedReason reason)
    // Offset: 0x23DA5CC
    void PresentConnectionErrorDialog(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType connectionType, GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void PresentMasterServerUnavailableErrorDialog(MultiplayerUnavailableReason reason, System.Exception exception, System.Nullable`1<System.Int64> maintenanceWindowEndTime, System.String remoteLocalizedMessage)
    // Offset: 0x23DB538
    void PresentMasterServerUnavailableErrorDialog(GlobalNamespace::MultiplayerUnavailableReason reason, System::Exception* exception, System::Nullable_1<int64_t> maintenanceWindowEndTime, ::Il2CppString* remoteLocalizedMessage);
    // private System.Void ProcessDeeplinkingToLobby()
    // Offset: 0x23DB8D0
    void ProcessDeeplinkingToLobby();
    // private System.Void <ResolveAndPresentNextFlowCoordinator>b__50_0()
    // Offset: 0x23DB9B0
    void $ResolveAndPresentNextFlowCoordinator$b__50_0();
    // private System.Void <PresentConnectionErrorDialog>b__51_0(System.Int32 btnId)
    // Offset: 0x23DBB14
    void $PresentConnectionErrorDialog$b__51_0(int btnId);
    // private System.Void <PresentConnectionErrorDialog>b__51_1(System.Int32 btnId)
    // Offset: 0x23DBB2C
    void $PresentConnectionErrorDialog$b__51_1(int btnId);
    // private System.Void <PresentMasterServerUnavailableErrorDialog>b__52_0(System.Int32 btnId)
    // Offset: 0x23DBB44
    void $PresentMasterServerUnavailableErrorDialog$b__52_0(int btnId);
    // public System.Void .ctor()
    // Offset: 0x23DB9A8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerModeSelectionFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerModeSelectionFlowCoordinator*, creationType>()));
    }
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x23D960C
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x23D9A64
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0x23D9E58
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/HMUI.AnimationType animationType)
    // Offset: 0x23D9F44
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/HMUI.AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void TransitionDidStart()
    // Offset: 0x23DA180
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidStart()
    void TransitionDidStart();
    // protected override System.Void TransitionDidFinish()
    // Offset: 0x23DA2B8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidFinish()
    void TransitionDidFinish();
  }; // MultiplayerModeSelectionFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerModeSelectionFlowCoordinator), 384 + sizeof(GlobalNamespace::SelectMultiplayerLobbyDestination*)> __GlobalNamespace_MultiplayerModeSelectionFlowCoordinatorSizeCheck;
  static_assert(sizeof(MultiplayerModeSelectionFlowCoordinator) == 0x188);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*, "", "MultiplayerModeSelectionFlowCoordinator");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::add_didFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerModeSelectionFlowCoordinator")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::remove_didFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerModeSelectionFlowCoordinator")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::SelectMultiplayerLobbyDestination*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::Setup)> {
  static const MethodInfo* get() {
    static auto* lobbyDestination = &::il2cpp_utils::GetClassFromName("", "SelectMultiplayerLobbyDestination")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lobbyDestination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel
// Il2CppName: HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccess
// Il2CppName: HandleMultiplayerLobbyConnectionControllerConnectionSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyConnectionControllerConnectionSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionFailed
// Il2CppName: HandleMultiplayerLobbyConnectionControllerConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* connectionType = &::il2cpp_utils::GetClassFromName("", "MultiplayerLobbyConnectionController/LobbyConnectionType")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyConnectionControllerConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionType, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyControllerDidFinish
// Il2CppName: HandleMultiplayerLobbyControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerModeSelectionViewController*, GlobalNamespace::MultiplayerModeSelectionViewController::MenuButton)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("", "MultiplayerModeSelectionViewController")->byval_arg;
    static auto* menuButton = &::il2cpp_utils::GetClassFromName("", "MultiplayerModeSelectionViewController/MenuButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, menuButton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerBrowserFlowCoordinatorDidFinish
// Il2CppName: HandleGameServerBrowserFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::GameServerBrowserFlowCoordinator*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerBrowserFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("", "GameServerBrowserFlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleGameServerBrowserFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoiningLobbyViewControllerDidCancel
// Il2CppName: HandleJoiningLobbyViewControllerDidCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoiningLobbyViewControllerDidCancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleJoiningLobbyViewControllerDidCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoinQuickPlayViewControllerDidFinish
// Il2CppName: HandleJoinQuickPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(bool)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoinQuickPlayViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleJoinQuickPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleServerCodeEntryViewControllerDidFinish
// Il2CppName: HandleServerCodeEntryViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(bool, ::Il2CppString*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleServerCodeEntryViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleServerCodeEntryViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, code});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleCreateServerViewControllerDidFinish
// Il2CppName: HandleCreateServerViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(bool, GlobalNamespace::CreateServerFormData)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleCreateServerViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("", "CreateServerFormData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleCreateServerViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, data});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerLobbyFlowCoordinatorDidFinish
// Il2CppName: HandleGameServerLobbyFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerLobbyFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleGameServerLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerLobbyFlowCoordinatorWillFinish
// Il2CppName: HandleGameServerLobbyFlowCoordinatorWillFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerLobbyFlowCoordinatorWillFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleGameServerLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleConnectedPlayerManagerCreated
// Il2CppName: HandleConnectedPlayerManagerCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::INetworkPlayerModel*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleConnectedPlayerManagerCreated)> {
  static const MethodInfo* get() {
    static auto* networkPlayerModel = &::il2cpp_utils::GetClassFromName("", "INetworkPlayerModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "HandleConnectedPlayerManagerCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkPlayerModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TryShowModeSelection
// Il2CppName: TryShowModeSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(bool)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TryShowModeSelection)> {
  static const MethodInfo* get() {
    static auto* shouldProvideInitialViewControllers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "TryShowModeSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldProvideInitialViewControllers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ResolveAndPresentNextFlowCoordinator
// Il2CppName: ResolveAndPresentNextFlowCoordinator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ResolveAndPresentNextFlowCoordinator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "ResolveAndPresentNextFlowCoordinator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentConnectionErrorDialog
// Il2CppName: PresentConnectionErrorDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentConnectionErrorDialog)> {
  static const MethodInfo* get() {
    static auto* connectionType = &::il2cpp_utils::GetClassFromName("", "MultiplayerLobbyConnectionController/LobbyConnectionType")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "PresentConnectionErrorDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionType, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentMasterServerUnavailableErrorDialog
// Il2CppName: PresentMasterServerUnavailableErrorDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerUnavailableReason, System::Exception*, System::Nullable_1<int64_t>, ::Il2CppString*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentMasterServerUnavailableErrorDialog)> {
  static const MethodInfo* get() {
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "MultiplayerUnavailableReason")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* maintenanceWindowEndTime = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int64")})->byval_arg;
    static auto* remoteLocalizedMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "PresentMasterServerUnavailableErrorDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reason, exception, maintenanceWindowEndTime, remoteLocalizedMessage});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ProcessDeeplinkingToLobby
// Il2CppName: ProcessDeeplinkingToLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ProcessDeeplinkingToLobby)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "ProcessDeeplinkingToLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$ResolveAndPresentNextFlowCoordinator$b__50_0
// Il2CppName: <ResolveAndPresentNextFlowCoordinator>b__50_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$ResolveAndPresentNextFlowCoordinator$b__50_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "<ResolveAndPresentNextFlowCoordinator>b__50_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__51_0
// Il2CppName: <PresentConnectionErrorDialog>b__51_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(int)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__51_0)> {
  static const MethodInfo* get() {
    static auto* btnId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "<PresentConnectionErrorDialog>b__51_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btnId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__51_1
// Il2CppName: <PresentConnectionErrorDialog>b__51_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(int)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__51_1)> {
  static const MethodInfo* get() {
    static auto* btnId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "<PresentConnectionErrorDialog>b__51_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btnId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentMasterServerUnavailableErrorDialog$b__52_0
// Il2CppName: <PresentMasterServerUnavailableErrorDialog>b__52_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(int)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentMasterServerUnavailableErrorDialog$b__52_0)> {
  static const MethodInfo* get() {
    static auto* btnId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "<PresentMasterServerUnavailableErrorDialog>b__52_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{btnId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(bool, bool, bool)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(bool, bool)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidDeactivate)> {
  static const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(HMUI::ViewController*)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::BackButtonWasPressed)> {
  static const MethodInfo* get() {
    static auto* topViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topViewController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TopViewControllerWillChange)> {
  static const MethodInfo* get() {
    static auto* oldViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* newViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldViewController, newViewController, animationType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::*)()>(&GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
