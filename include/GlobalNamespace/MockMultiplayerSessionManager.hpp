// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockPlayersModel
  class MockPlayersModel;
  // Forward declaring type: AvatarPartsModel
  class AvatarPartsModel;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: NodePoseSyncStateManager
  class NodePoseSyncStateManager;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: SmallBufferPool
  class SmallBufferPool;
  // Forward declaring type: MockPlayer
  class MockPlayer;
  // Forward declaring type: MockedPlayerMultiplayerSessionManager
  class MockedPlayerMultiplayerSessionManager;
  // Forward declaring type: ConnectedPlayerManager
  class ConnectedPlayerManager;
  // Forward declaring type: INetworkPacketSubSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSubSerializer_1;
  // Forward declaring type: GameplayServerConfiguration
  struct GameplayServerConfiguration;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x95
  #pragma pack(push, 1)
  // Autogenerated type: MockMultiplayerSessionManager
  class MockMultiplayerSessionManager : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IMultiplayerSessionManager*/ {
    public:
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::$$c__DisplayClass76_0
    class $$c__DisplayClass76_0;
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::$$c
    class $$c;
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::$PerformAtSyncTime$d__90
    struct $PerformAtSyncTime$d__90;
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::$SendToOthers$d__94
    struct $SendToOthers$d__94;
    // [InjectAttribute] Offset: 0xE1D690
    // private readonly MockPlayersModel _playersModel
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MockPlayersModel* playersModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockPlayersModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE1D6A0
    // private readonly AvatarPartsModel _avatarPartsModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::AvatarPartsModel* avatarPartsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarPartsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE1D6B0
    // private readonly BeatmapLevelsModel _beatmapLevelsModel
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE1D6C0
    // private readonly NodePoseSyncStateManager _nodePoseSyncStateManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NodePoseSyncStateManager*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D6D0
    // private System.Boolean <isPartyCreated>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool isPartyCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPartyCreated and: syncTimeDelay
    char __padding4[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D6E0
    // private System.Single <syncTimeDelay>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    float syncTimeDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xE1D6F0
    // private System.Action`1<IConnectedPlayer> playerConnectedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D700
    // private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D710
    // private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D720
    // private System.Action`1<IConnectedPlayer> playerAvatarChangedEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerAvatarChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D730
    // private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D740
    // private System.Action`1<DisconnectedReason> disconnectedEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1D750
    // private System.Action connectedEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action* connectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private readonly SmallBufferPool _smallBufferPool
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::SmallBufferPool* smallBufferPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SmallBufferPool*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<MockPlayer,MockedPlayerMultiplayerSessionManager> _playerSessionManagers
    // Size: 0x8
    // Offset: 0x80
    System::Collections::Generic::Dictionary_2<GlobalNamespace::MockPlayer*, GlobalNamespace::MockedPlayerMultiplayerSessionManager*>* playerSessionManagers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<GlobalNamespace::MockPlayer*, GlobalNamespace::MockedPlayerMultiplayerSessionManager*>*) == 0x8);
    // private MockedPlayerMultiplayerSessionManager _localPlayerSessionManager
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::MockedPlayerMultiplayerSessionManager* localPlayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockedPlayerMultiplayerSessionManager*) == 0x8);
    // private System.Int32 _maxPlayerCount
    // Size: 0x4
    // Offset: 0x90
    int maxPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x94
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MockMultiplayerSessionManager
    MockMultiplayerSessionManager(GlobalNamespace::MockPlayersModel* playersModel_ = {}, GlobalNamespace::AvatarPartsModel* avatarPartsModel_ = {}, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel_ = {}, GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager_ = {}, bool isPartyCreated_ = {}, float syncTimeDelay_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerAvatarChangedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent_ = {}, System::Action* connectedEvent_ = {}, GlobalNamespace::SmallBufferPool* smallBufferPool_ = {}, System::Collections::Generic::Dictionary_2<GlobalNamespace::MockPlayer*, GlobalNamespace::MockedPlayerMultiplayerSessionManager*>* playerSessionManagers_ = {}, GlobalNamespace::MockedPlayerMultiplayerSessionManager* localPlayerSessionManager_ = {}, int maxPlayerCount_ = {}, bool disposed_ = {}) noexcept : playersModel{playersModel_}, avatarPartsModel{avatarPartsModel_}, beatmapLevelsModel{beatmapLevelsModel_}, nodePoseSyncStateManager{nodePoseSyncStateManager_}, isPartyCreated{isPartyCreated_}, syncTimeDelay{syncTimeDelay_}, playerConnectedEvent{playerConnectedEvent_}, connectionFailedEvent{connectionFailedEvent_}, playerDisconnectedEvent{playerDisconnectedEvent_}, playerAvatarChangedEvent{playerAvatarChangedEvent_}, playerStateChangedEvent{playerStateChangedEvent_}, disconnectedEvent{disconnectedEvent_}, connectedEvent{connectedEvent_}, smallBufferPool{smallBufferPool_}, playerSessionManagers{playerSessionManagers_}, localPlayerSessionManager{localPlayerSessionManager_}, maxPlayerCount{maxPlayerCount_}, disposed{disposed_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerSessionManager
    operator GlobalNamespace::IMultiplayerSessionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Boolean get_isPartyCreated()
    // Offset: 0x105AE68
    bool get_isPartyCreated();
    // private System.Void set_isPartyCreated(System.Boolean value)
    // Offset: 0x105AE70
    void set_isPartyCreated(bool value);
    // public System.Boolean get_disposed()
    // Offset: 0x105AE7C
    bool get_disposed();
    // public IConnectedPlayer get_localPlayer()
    // Offset: 0x105AE84
    GlobalNamespace::IConnectedPlayer* get_localPlayer();
    // public IConnectedPlayer get_connectionOwner()
    // Offset: 0x105AEA0
    GlobalNamespace::IConnectedPlayer* get_connectionOwner();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x105AED0
    bool get_isConnectionOwner();
    // public System.Single get_syncTime()
    // Offset: 0x105AEF8
    float get_syncTime();
    // public System.Single get_syncTimeDelay()
    // Offset: 0x105AF24
    float get_syncTimeDelay();
    // private System.Void set_syncTimeDelay(System.Single value)
    // Offset: 0x105AF2C
    void set_syncTimeDelay(float value);
    // public System.Boolean get_isSyncTimeInitialized()
    // Offset: 0x105AF34
    bool get_isSyncTimeInitialized();
    // public System.Int32 get_maxPlayerCount()
    // Offset: 0x105AF3C
    int get_maxPlayerCount();
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0x105AF80
    int get_connectedPlayerCount();
    // public System.Boolean get_isConnectingOrConnected()
    // Offset: 0x105AF9C
    bool get_isConnectingOrConnected();
    // public System.Boolean get_isConnected()
    // Offset: 0x105AFA4
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x105AFAC
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x105AFB4
    bool get_isDisconnecting();
    // public System.Boolean get_isSpectating()
    // Offset: 0x105AFBC
    bool get_isSpectating();
    // public System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> get_connectedPlayers()
    // Offset: 0x105AFC4
    System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* get_connectedPlayers();
    // public System.Void add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105AFE0
    void add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B084
    void remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x105B128
    void add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x105B1CC
    void remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B270
    void add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B314
    void remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerAvatarChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B3B8
    void add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerAvatarChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B45C
    void remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B500
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x105B5A4
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x105B648
    void add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x105B6EC
    void remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_connectedEvent(System.Action value)
    // Offset: 0x105B790
    void add_connectedEvent(System::Action* value);
    // public System.Void remove_connectedEvent(System.Action value)
    // Offset: 0x105B834
    void remove_connectedEvent(System::Action* value);
    // private System.Void Init()
    // Offset: 0x105B8D8
    void Init();
    // protected System.Void Awake()
    // Offset: 0x105B9F4
    void Awake();
    // protected System.Void Start()
    // Offset: 0x105BB18
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x105BD88
    void OnDestroy();
    // public System.Void SetMaxPlayerCount(System.Int32 maxPlayerCount)
    // Offset: 0x105BE58
    void SetMaxPlayerCount(int maxPlayerCount);
    // public System.Void StartSession(ConnectedPlayerManager connectedPlayerManager)
    // Offset: 0x105BE60
    void StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager);
    // public System.Void EndSession()
    // Offset: 0x105BE64
    void EndSession();
    // public MockPlayer GetMockPlayer(System.String userId)
    // Offset: 0x105BE68
    GlobalNamespace::MockPlayer* GetMockPlayer(::Il2CppString* userId);
    // public IConnectedPlayer GetPlayerByUserId(System.String userId)
    // Offset: 0x105BFCC
    GlobalNamespace::IConnectedPlayer* GetPlayerByUserId(::Il2CppString* userId);
    // public IConnectedPlayer GetConnectedPlayer(System.Int32 index)
    // Offset: 0x105C1B8
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayer(int index);
    // public IConnectedPlayer GetConnectedPlayerByUserId(System.String userId)
    // Offset: 0x105C038
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayerByUserId(::Il2CppString* userId);
    // public System.Void Disconnect()
    // Offset: 0x105B9F8
    void Disconnect();
    // public System.Void Send(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Send(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::Send");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, message);
    }
    // public System.Void SendUnreliable(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SendUnreliable(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::SendUnreliable");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnreliable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, message);
    }
    // public System.Void RegisterCallback(MultiplayerSessionManager/MessageType serializerType, System.Action`2<T,IConnectedPlayer> callback, System.Func`1<T> constructor)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallback(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, System::Action_2<T, GlobalNamespace::IConnectedPlayer*>* callback, System::Func_1<T>* constructor) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::RegisterCallback");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(constructor)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, serializerType, callback, constructor);
    }
    // public System.Void UnregisterCallback(MultiplayerSessionManager/MessageType serializerType)
    // Offset: 0xFFFFFFFF
    template<class T>
    void UnregisterCallback(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::UnregisterCallback");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, serializerType);
    }
    // public System.Void RegisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x105C34C
    void RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void UnregisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x105C368
    void UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void ReportPlayerStateChanged(MockPlayer player)
    // Offset: 0x105C384
    void ReportPlayerStateChanged(GlobalNamespace::MockPlayer* player);
    // public System.Void ConnectPlayer(MockPlayer connectedPlayer)
    // Offset: 0x105C4A0
    void ConnectPlayer(GlobalNamespace::MockPlayer* connectedPlayer);
    // public System.Void DisconnectPlayer(MockPlayer connectedPlayer)
    // Offset: 0x105C1DC
    void DisconnectPlayer(GlobalNamespace::MockPlayer* connectedPlayer);
    // private System.Void HandleJoinMockServer()
    // Offset: 0x105C6B4
    void HandleJoinMockServer();
    // public System.Void CreateParty(GameplayServerConfiguration configuration, System.Int32 maxPartySize)
    // Offset: 0x105C918
    void CreateParty(GlobalNamespace::GameplayServerConfiguration configuration, int maxPartySize);
    // public System.Void DestroyParty()
    // Offset: 0x105BE50
    void DestroyParty();
    // public System.Void PerformAtSyncTime(System.Single syncTime, System.Action action)
    // Offset: 0x105CAE8
    void PerformAtSyncTime(float syncTime, System::Action* action);
    // public System.Void SetLocalPlayerState(System.String state, System.Boolean hasState)
    // Offset: 0x105C8F8
    void SetLocalPlayerState(::Il2CppString* state, bool hasState);
    // public System.Boolean LocalPlayerHasState(System.String state)
    // Offset: 0x105CBBC
    bool LocalPlayerHasState(::Il2CppString* state);
    // private MockedPlayerMultiplayerSessionManager GetMultiplayerSessionManager(MockPlayer player)
    // Offset: 0x105B90C
    GlobalNamespace::MockedPlayerMultiplayerSessionManager* GetMultiplayerSessionManager(GlobalNamespace::MockPlayer* player);
    // public System.Void SendToOthers(MockPlayer player, LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x105CBD8
    void SendToOthers(GlobalNamespace::MockPlayer* player, LiteNetLib::Utils::NetDataWriter* writer);
    // private System.Void <Start>b__68_0()
    // Offset: 0x105CD3C
    void $Start$b__68_0();
    // private System.Void <Start>b__68_1(IConnectedPlayer p)
    // Offset: 0x105CD50
    void $Start$b__68_1(GlobalNamespace::IConnectedPlayer* p);
    // private System.Void <Start>b__68_2(IConnectedPlayer p)
    // Offset: 0x105CDC4
    void $Start$b__68_2(GlobalNamespace::IConnectedPlayer* p);
    // private System.Void <Start>b__68_3(IConnectedPlayer p)
    // Offset: 0x105CE38
    void $Start$b__68_3(GlobalNamespace::IConnectedPlayer* p);
    // private System.Void <Start>b__68_4(IConnectedPlayer p)
    // Offset: 0x105CEAC
    void $Start$b__68_4(GlobalNamespace::IConnectedPlayer* p);
    // private System.Void <Start>b__68_5(DisconnectedReason dr)
    // Offset: 0x105CF20
    void $Start$b__68_5(GlobalNamespace::DisconnectedReason dr);
    // private System.Void <Start>b__68_6(ConnectionFailedReason dr)
    // Offset: 0x105CF94
    void $Start$b__68_6(GlobalNamespace::ConnectionFailedReason dr);
    // public System.Void .ctor()
    // Offset: 0x105CCA4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockMultiplayerSessionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockMultiplayerSessionManager*, creationType>()));
    }
  }; // MockMultiplayerSessionManager
  #pragma pack(pop)
  static check_size<sizeof(MockMultiplayerSessionManager), 148 + sizeof(bool)> __GlobalNamespace_MockMultiplayerSessionManagerSizeCheck;
  static_assert(sizeof(MockMultiplayerSessionManager) == 0x95);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockMultiplayerSessionManager*, "", "MockMultiplayerSessionManager");
