// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockPlayer
  class MockPlayer;
  // Forward declaring type: MultiplayerMockSettings
  class MultiplayerMockSettings;
  // Forward declaring type: AvatarPartsModel
  class AvatarPartsModel;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: ConnectedPlayerManager
  class ConnectedPlayerManager;
  // Forward declaring type: INetworkPacketSubSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSubSerializer_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: MockMultiplayerSessionManager
  class MockMultiplayerSessionManager : public ::Il2CppObject/*, public GlobalNamespace::IMultiplayerSessionManager, public System::IDisposable*/ {
    public:
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager
    class MockedPlayerMultiplayerSessionManager;
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::$$c__DisplayClass60_0
    class $$c__DisplayClass60_0;
    // Nested type: GlobalNamespace::MockMultiplayerSessionManager::$PerformAtSyncTime$d__74
    struct $PerformAtSyncTime$d__74;
    // private readonly System.Collections.Generic.Dictionary`2<MockPlayer,MockMultiplayerSessionManager/MockedPlayerMultiplayerSessionManager> _playerSessionManagers
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<GlobalNamespace::MockPlayer*, GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager*>* playerSessionManagers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<GlobalNamespace::MockPlayer*, GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager*>*) == 0x8);
    // private MockMultiplayerSessionManager/MockedPlayerMultiplayerSessionManager _localPlayerSessionManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager* localPlayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3D170
    // private readonly MultiplayerMockSettings _settings
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerMockSettings* settings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerMockSettings*) == 0x8);
    // [InjectAttribute] Offset: 0xD3D180
    // private readonly AvatarPartsModel _avatarPartsModel
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::AvatarPartsModel* avatarPartsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarPartsModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D190
    // private System.Single <syncTimeDelay>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    float syncTimeDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: syncTimeDelay and: connectedPlayers
    char __padding4[0x4] = {};
    // private readonly System.Collections.Generic.List`1<IConnectedPlayer> _connectedPlayers
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* connectedPlayers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D1A0
    // private System.Action`1<IConnectedPlayer> playerConnectedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D1B0
    // private System.Action connectedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action* connectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D1C0
    // private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D1D0
    // private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D1E0
    // private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3D1F0
    // private System.Action`1<DisconnectedReason> disconnectedEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // Creating value type constructor for type: MockMultiplayerSessionManager
    MockMultiplayerSessionManager(System::Collections::Generic::Dictionary_2<GlobalNamespace::MockPlayer*, GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager*>* playerSessionManagers_ = {}, GlobalNamespace::MockMultiplayerSessionManager::MockedPlayerMultiplayerSessionManager* localPlayerSessionManager_ = {}, GlobalNamespace::MultiplayerMockSettings* settings_ = {}, GlobalNamespace::AvatarPartsModel* avatarPartsModel_ = {}, float syncTimeDelay_ = {}, System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* connectedPlayers_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent_ = {}, System::Action* connectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent_ = {}) noexcept : playerSessionManagers{playerSessionManagers_}, localPlayerSessionManager{localPlayerSessionManager_}, settings{settings_}, avatarPartsModel{avatarPartsModel_}, syncTimeDelay{syncTimeDelay_}, connectedPlayers{connectedPlayers_}, playerConnectedEvent{playerConnectedEvent_}, connectedEvent{connectedEvent_}, connectionFailedEvent{connectionFailedEvent_}, playerDisconnectedEvent{playerDisconnectedEvent_}, playerStateChangedEvent{playerStateChangedEvent_}, disconnectedEvent{disconnectedEvent_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerSessionManager
    operator GlobalNamespace::IMultiplayerSessionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // private System.Void Init()
    // Offset: 0xFB621C
    void Init();
    // public System.Void Dispose()
    // Offset: 0xFB6964
    void Dispose();
    // public IConnectedPlayer get_localPlayer()
    // Offset: 0xFB6BA4
    GlobalNamespace::IConnectedPlayer* get_localPlayer();
    // public IConnectedPlayer get_connectionOwner()
    // Offset: 0xFB6BC0
    GlobalNamespace::IConnectedPlayer* get_connectionOwner();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0xFB6C18
    bool get_isConnectionOwner();
    // public System.Single get_syncTime()
    // Offset: 0xFB6C44
    float get_syncTime();
    // public System.Single get_syncTimeDelay()
    // Offset: 0xFB6C70
    float get_syncTimeDelay();
    // private System.Void set_syncTimeDelay(System.Single value)
    // Offset: 0xFB6C78
    void set_syncTimeDelay(float value);
    // public System.Boolean get_isSyncTimeInitialized()
    // Offset: 0xFB6C80
    bool get_isSyncTimeInitialized();
    // public System.Int32 get_maxPlayerCount()
    // Offset: 0xFB6C88
    int get_maxPlayerCount();
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0xFB6CB0
    int get_connectedPlayerCount();
    // public System.Boolean get_isConnectingOrConnected()
    // Offset: 0xFB6D08
    bool get_isConnectingOrConnected();
    // public System.Boolean get_isConnected()
    // Offset: 0xFB6D10
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0xFB6D18
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0xFB6D20
    bool get_isDisconnecting();
    // public System.Boolean get_isSpectating()
    // Offset: 0xFB6D28
    bool get_isSpectating();
    // public System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> get_connectedPlayers()
    // Offset: 0xFB6D30
    System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* get_connectedPlayers();
    // public System.Void add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0xFB6D38
    void add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0xFB6DDC
    void remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_connectedEvent(System.Action value)
    // Offset: 0xFB6E80
    void add_connectedEvent(System::Action* value);
    // public System.Void remove_connectedEvent(System.Action value)
    // Offset: 0xFB6F24
    void remove_connectedEvent(System::Action* value);
    // public System.Void add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0xFB6FC8
    void add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0xFB706C
    void remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0xFB7110
    void add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0xFB71B4
    void remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0xFB7258
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0xFB72FC
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0xFB73A0
    void add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0xFB7444
    void remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void SetMaxPlayerCount(System.Int32 maxPlayerCount)
    // Offset: 0xFB74E8
    void SetMaxPlayerCount(int maxPlayerCount);
    // public System.Void StartSession(ConnectedPlayerManager connectedPlayerManager)
    // Offset: 0xFB74EC
    void StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager);
    // public System.Void EndSession()
    // Offset: 0xFB74F0
    void EndSession();
    // public IConnectedPlayer GetPlayerByUserId(System.String userId)
    // Offset: 0xFB74F4
    GlobalNamespace::IConnectedPlayer* GetPlayerByUserId(::Il2CppString* userId);
    // public IConnectedPlayer GetConnectedPlayer(System.Int32 index)
    // Offset: 0xFB762C
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayer(int index);
    // public IConnectedPlayer GetConnectedPlayerByUserId(System.String userId)
    // Offset: 0xFB7560
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayerByUserId(::Il2CppString* userId);
    // public System.Void Disconnect()
    // Offset: 0xFB76B4
    void Disconnect();
    // public System.Void Send(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Send(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::Send");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, message);
    }
    // public System.Void SendUnreliable(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SendUnreliable(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::SendUnreliable");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnreliable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, message);
    }
    // public System.Void RegisterCallback(MultiplayerSessionManager/MessageType serializerType, System.Action`2<T,IConnectedPlayer> callback, System.Func`1<T> constructor)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallback(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, System::Action_2<T, GlobalNamespace::IConnectedPlayer*>* callback, System::Func_1<T>* constructor) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::RegisterCallback");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(constructor)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, serializerType, callback, constructor);
    }
    // public System.Void UnregisterCallback(MultiplayerSessionManager/MessageType serializerType)
    // Offset: 0xFFFFFFFF
    template<class T>
    void UnregisterCallback(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::UnregisterCallback");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializerType)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, serializerType);
    }
    // public System.Void RegisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0xFB77D8
    void RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void UnregisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0xFB7860
    void UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void HandlePlayerStateChanged(MockPlayer player)
    // Offset: 0xFB78E8
    void HandlePlayerStateChanged(GlobalNamespace::MockPlayer* player);
    // public System.Void InvokeConnected()
    // Offset: 0xFB7A9C
    void InvokeConnected();
    // private System.Void HandlePlayerConnected(MockPlayer connectedPlayer)
    // Offset: 0xFB67B8
    void HandlePlayerConnected(GlobalNamespace::MockPlayer* connectedPlayer);
    // private System.Void HandlePlayerDisconnected(MockPlayer connectedPlayer)
    // Offset: 0xFB6628
    void HandlePlayerDisconnected(GlobalNamespace::MockPlayer* connectedPlayer);
    // private System.Void HandleJoinMockServer()
    // Offset: 0xFB7C20
    void HandleJoinMockServer();
    // private System.Void HandlePartyCreated()
    // Offset: 0xFB7E28
    void HandlePartyCreated();
    // public System.Void PerformAtSyncTime(System.Single syncTime, System.Action action)
    // Offset: 0xFB800C
    void PerformAtSyncTime(float syncTime, System::Action* action);
    // public System.Void SetLocalPlayerState(System.String state, System.Boolean hasState)
    // Offset: 0xFB80E0
    void SetLocalPlayerState(::Il2CppString* state, bool hasState);
    // public System.Boolean LocalPlayerHasState(System.String state)
    // Offset: 0xFB818C
    bool LocalPlayerHasState(::Il2CppString* state);
    // public IMultiplayerSessionManager GetMultiplayerSessionManager(MockPlayer player)
    // Offset: 0xFB81C8
    GlobalNamespace::IMultiplayerSessionManager* GetMultiplayerSessionManager(GlobalNamespace::MockPlayer* player);
    // private System.Void SendToOthers(MockPlayer player, LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xFB8350
    void SendToOthers(GlobalNamespace::MockPlayer* player, LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void .ctor()
    // Offset: 0xFB84F4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockMultiplayerSessionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockMultiplayerSessionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockMultiplayerSessionManager*, creationType>()));
    }
  }; // MockMultiplayerSessionManager
  #pragma pack(pop)
  static check_size<sizeof(MockMultiplayerSessionManager), 104 + sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*)> __GlobalNamespace_MockMultiplayerSessionManagerSizeCheck;
  static_assert(sizeof(MockMultiplayerSessionManager) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockMultiplayerSessionManager*, "", "MockMultiplayerSessionManager");
