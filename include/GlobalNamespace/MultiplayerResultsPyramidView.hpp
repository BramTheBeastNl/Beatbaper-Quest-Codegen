// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Tweening.EaseType
#include "Tweening/EaseType.hpp"
// Including type: MultiplayerResultsPyramidViewAvatar
#include "GlobalNamespace/MultiplayerResultsPyramidViewAvatar.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerOffsetPositionByLocalPlayerPosition
  class MultiplayerOffsetPositionByLocalPlayerPosition;
  // Forward declaring type: BloomFogEnvironmentParams
  class BloomFogEnvironmentParams;
  // Forward declaring type: BloomFogParamsAnimator
  class BloomFogParamsAnimator;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: MultiplayerPlayerResultsData
  class MultiplayerPlayerResultsData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: WaitForSeconds
  class WaitForSeconds;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
  // Forward declaring type: Vector3Tween
  class Vector3Tween;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerResultsPyramidView
  class MultiplayerResultsPyramidView : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerResultsPyramidView::$AnimationCoroutine$d__31
    class $AnimationCoroutine$d__31;
    // Nested type: GlobalNamespace::MultiplayerResultsPyramidView::$$c__DisplayClass32_0
    class $$c__DisplayClass32_0;
    // private MultiplayerOffsetPositionByLocalPlayerPosition _multiplayerOffsetByLocalPlayerPosition
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition* multiplayerOffsetByLocalPlayerPosition;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition*) == 0x8);
    // [HeaderAttribute] Offset: 0xD3DFDC
    // private System.Single _fogTransitionDuration
    // Size: 0x4
    // Offset: 0x20
    float fogTransitionDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _delayBeforePlatforms
    // Size: 0x4
    // Offset: 0x24
    float delayBeforePlatforms;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _delayBetweenPlatforms
    // Size: 0x4
    // Offset: 0x28
    float delayBetweenPlatforms;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: delayBetweenPlatforms and: spawnPoints
    char __padding3[0x4] = {};
    // private UnityEngine.Transform[] _spawnPoints
    // Size: 0x8
    // Offset: 0x30
    ::Array<UnityEngine::Transform*>* spawnPoints;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Transform*>*) == 0x8);
    // private UnityEngine.Transform _spawnPointsParent
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Transform* spawnPointsParent;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Single _evenCountOffset
    // Size: 0x4
    // Offset: 0x40
    float evenCountOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: evenCountOffset and: badgeStartPosition
    char __padding6[0x4] = {};
    // [HeaderAttribute] Offset: 0xD3E078
    // private UnityEngine.Transform _badgeStartPosition
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Transform* badgeStartPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _badgeMidPosition
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Transform* badgeMidPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Single _delayBeforeBadges
    // Size: 0x4
    // Offset: 0x58
    float delayBeforeBadges;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _delayBetweenBadges
    // Size: 0x4
    // Offset: 0x5C
    float delayBetweenBadges;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xD3E0F4
    // private UnityEngine.Transform[] _notesTransforms
    // Size: 0x8
    // Offset: 0x60
    ::Array<UnityEngine::Transform*>* notesTransforms;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Transform*>*) == 0x8);
    // private Tweening.EaseType _notesTweenEasing
    // Size: 0x4
    // Offset: 0x68
    Tweening::EaseType notesTweenEasing;
    // Field size check
    static_assert(sizeof(Tweening::EaseType) == 0x4);
    // private System.Single _notesStartY
    // Size: 0x4
    // Offset: 0x6C
    float notesStartY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _notesTweenDuration
    // Size: 0x4
    // Offset: 0x70
    float notesTweenDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _delayBeforeNotes
    // Size: 0x4
    // Offset: 0x74
    float delayBeforeNotes;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _delayBetweenNotes
    // Size: 0x4
    // Offset: 0x78
    float delayBetweenNotes;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xD3E190
    // private System.Single _randomness
    // Size: 0x4
    // Offset: 0x7C
    float randomness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0xD3E1D0
    // private BloomFogEnvironmentParams _resultsBloomFogParams
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::BloomFogEnvironmentParams* resultsBloomFogParams;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BloomFogEnvironmentParams*) == 0x8);
    // [InjectAttribute] Offset: 0xD3E208
    // private readonly MultiplayerResultsPyramidViewAvatar/Factory _avatarsFactory
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Factory* avatarsFactory;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Factory*) == 0x8);
    // [InjectAttribute] Offset: 0xD3E218
    // private readonly Tweening.TweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x90
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3E228
    // private readonly BloomFogParamsAnimator _bloomFogParamsAnimator
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::BloomFogParamsAnimator* bloomFogParamsAnimator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BloomFogParamsAnimator*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerResultsPyramidViewAvatar> _avatarsDictionary
    // Size: 0x8
    // Offset: 0xA0
    System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerResultsPyramidViewAvatar*>* avatarsDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerResultsPyramidViewAvatar*>*) == 0x8);
    // private UnityEngine.WaitForSeconds _avatarWaitFor
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::WaitForSeconds* avatarWaitFor;
    // Field size check
    static_assert(sizeof(UnityEngine::WaitForSeconds*) == 0x8);
    // private UnityEngine.WaitForSeconds _badgeWaitFor
    // Size: 0x8
    // Offset: 0xB0
    UnityEngine::WaitForSeconds* badgeWaitFor;
    // Field size check
    static_assert(sizeof(UnityEngine::WaitForSeconds*) == 0x8);
    // private Tweening.Vector3Tween[] _notesTweens
    // Size: 0x8
    // Offset: 0xB8
    ::Array<Tweening::Vector3Tween*>* notesTweens;
    // Field size check
    static_assert(sizeof(::Array<Tweening::Vector3Tween*>*) == 0x8);
    // Creating value type constructor for type: MultiplayerResultsPyramidView
    MultiplayerResultsPyramidView(GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition* multiplayerOffsetByLocalPlayerPosition_ = {}, float fogTransitionDuration_ = {}, float delayBeforePlatforms_ = {}, float delayBetweenPlatforms_ = {}, ::Array<UnityEngine::Transform*>* spawnPoints_ = {}, UnityEngine::Transform* spawnPointsParent_ = {}, float evenCountOffset_ = {}, UnityEngine::Transform* badgeStartPosition_ = {}, UnityEngine::Transform* badgeMidPosition_ = {}, float delayBeforeBadges_ = {}, float delayBetweenBadges_ = {}, ::Array<UnityEngine::Transform*>* notesTransforms_ = {}, Tweening::EaseType notesTweenEasing_ = {}, float notesStartY_ = {}, float notesTweenDuration_ = {}, float delayBeforeNotes_ = {}, float delayBetweenNotes_ = {}, float randomness_ = {}, GlobalNamespace::BloomFogEnvironmentParams* resultsBloomFogParams_ = {}, GlobalNamespace::MultiplayerResultsPyramidViewAvatar::Factory* avatarsFactory_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, GlobalNamespace::BloomFogParamsAnimator* bloomFogParamsAnimator_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerResultsPyramidViewAvatar*>* avatarsDictionary_ = {}, UnityEngine::WaitForSeconds* avatarWaitFor_ = {}, UnityEngine::WaitForSeconds* badgeWaitFor_ = {}, ::Array<Tweening::Vector3Tween*>* notesTweens_ = {}) noexcept : multiplayerOffsetByLocalPlayerPosition{multiplayerOffsetByLocalPlayerPosition_}, fogTransitionDuration{fogTransitionDuration_}, delayBeforePlatforms{delayBeforePlatforms_}, delayBetweenPlatforms{delayBetweenPlatforms_}, spawnPoints{spawnPoints_}, spawnPointsParent{spawnPointsParent_}, evenCountOffset{evenCountOffset_}, badgeStartPosition{badgeStartPosition_}, badgeMidPosition{badgeMidPosition_}, delayBeforeBadges{delayBeforeBadges_}, delayBetweenBadges{delayBetweenBadges_}, notesTransforms{notesTransforms_}, notesTweenEasing{notesTweenEasing_}, notesStartY{notesStartY_}, notesTweenDuration{notesTweenDuration_}, delayBeforeNotes{delayBeforeNotes_}, delayBetweenNotes{delayBetweenNotes_}, randomness{randomness_}, resultsBloomFogParams{resultsBloomFogParams_}, avatarsFactory{avatarsFactory_}, tweeningManager{tweeningManager_}, bloomFogParamsAnimator{bloomFogParamsAnimator_}, avatarsDictionary{avatarsDictionary_}, avatarWaitFor{avatarWaitFor_}, badgeWaitFor{badgeWaitFor_}, notesTweens{notesTweens_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x100C2FC
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x100C394
    void OnDestroy();
    // public System.Void PrespawnAvatars(System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> activePlayers)
    // Offset: 0x1007D68
    void PrespawnAvatars(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* activePlayers);
    // public System.Single StartAnimation(System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> resultsData)
    // Offset: 0x1008C1C
    float StartAnimation(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData);
    // public System.Void AnimateFog()
    // Offset: 0x1008A7C
    void AnimateFog();
    // private System.Collections.IEnumerator AnimationCoroutine(System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> resultsData)
    // Offset: 0x100C42C
    System::Collections::IEnumerator* AnimationCoroutine(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData);
    // private System.Void AnimateNotes()
    // Offset: 0x100C4A8
    void AnimateNotes();
    // private System.Void OnDrawGizmos()
    // Offset: 0x100C854
    void OnDrawGizmos();
    // public System.Void .ctor()
    // Offset: 0x100C8F8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerResultsPyramidView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsPyramidView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerResultsPyramidView*, creationType>()));
    }
  }; // MultiplayerResultsPyramidView
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerResultsPyramidView), 184 + sizeof(::Array<Tweening::Vector3Tween*>*)> __GlobalNamespace_MultiplayerResultsPyramidViewSizeCheck;
  static_assert(sizeof(MultiplayerResultsPyramidView) == 0xC0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerResultsPyramidView*, "", "MultiplayerResultsPyramidView");
