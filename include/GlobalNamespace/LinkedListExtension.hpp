// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LinkedListExtension
  class LinkedListExtension;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LinkedListExtension);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LinkedListExtension*, "", "LinkedListExtension");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LinkedListExtension
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class LinkedListExtension : public ::Il2CppObject {
    public:
    // static public System.Int32 Index(System.Collections.Generic.LinkedListNode`1<T> searchNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int Index(::System::Collections::Generic::LinkedListNode_1<T>* searchNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LinkedListExtension::Index");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LinkedListExtension", "Index", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchNode)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, searchNode);
    }
  }; // LinkedListExtension
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LinkedListExtension::Index
// Il2CppName: Index
// Cannot write MetadataGetter for generic methods!
