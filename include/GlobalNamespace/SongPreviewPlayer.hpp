// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AudioPlayerBase
#include "GlobalNamespace/AudioPlayerBase.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioManagerSO
  class AudioManagerSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: SongPreviewPlayer
  class SongPreviewPlayer : public GlobalNamespace::AudioPlayerBase {
    public:
    // Nested type: GlobalNamespace::SongPreviewPlayer::InitData
    class InitData;
    // Nested type: GlobalNamespace::SongPreviewPlayer::AudioSourceParams
    class AudioSourceParams;
    // Nested type: GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController
    class AudioSourceVolumeController;
    // Nested type: GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27
    class $CrossFadeAfterDelayCoroutine$d__27;
    // [RangeAttribute] Offset: 0xE1514C
    // private System.Int32 _channelsCount
    // Size: 0x4
    // Offset: 0x18
    int channelsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: channelsCount and: audioSourcePrefab
    char __padding0[0x4] = {};
    // private UnityEngine.AudioSource _audioSourcePrefab
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AudioSource* audioSourcePrefab;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _defaultAudioClip
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::AudioClip* defaultAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private System.Single _volume
    // Size: 0x4
    // Offset: 0x30
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _crossFadeToAnotherSongSpeed
    // Size: 0x4
    // Offset: 0x34
    float crossFadeToAnotherSongSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _crossFadeToDefaultSpeed
    // Size: 0x4
    // Offset: 0x38
    float crossFadeToDefaultSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadeInSpeed
    // Size: 0x4
    // Offset: 0x3C
    float fadeInSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xE151EC
    // private SongPreviewPlayer/AudioSourceParams _defaultAudioSourceParams
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::SongPreviewPlayer::AudioSourceParams* defaultAudioSourceParams;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPreviewPlayer::AudioSourceParams*) == 0x8);
    // [SpaceAttribute] Offset: 0xE15238
    // private SongPreviewPlayer/AudioSourceParams _othersAudioSourceParams
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::SongPreviewPlayer::AudioSourceParams* othersAudioSourceParams;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPreviewPlayer::AudioSourceParams*) == 0x8);
    // [InjectAttribute] Offset: 0xE15270
    // private readonly SongPreviewPlayer/InitData _initData
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::SongPreviewPlayer::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPreviewPlayer::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0xE15280
    // private AudioManagerSO _audioMixer
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::AudioManagerSO* audioMixer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioManagerSO*) == 0x8);
    // private SongPreviewPlayer/AudioSourceVolumeController[] _audioSourceControllers
    // Size: 0x8
    // Offset: 0x60
    ::Array<GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController*>* audioSourceControllers;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController*>*) == 0x8);
    // private System.Int32 _activeChannel
    // Size: 0x4
    // Offset: 0x68
    int activeChannel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _timeToDefaultAudioTransition
    // Size: 0x4
    // Offset: 0x6C
    float timeToDefaultAudioTransition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _transitionAfterDelay
    // Size: 0x1
    // Offset: 0x70
    bool transitionAfterDelay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: transitionAfterDelay and: volumeScale
    char __padding14[0x3] = {};
    // private System.Single _volumeScale
    // Size: 0x4
    // Offset: 0x74
    float volumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadeSpeed
    // Size: 0x4
    // Offset: 0x78
    float fadeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _ambientVolumeScale
    // Size: 0x4
    // Offset: 0x7C
    float ambientVolumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isActiveChannelPaused
    // Size: 0x1
    // Offset: 0x80
    bool isActiveChannelPaused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SongPreviewPlayer
    SongPreviewPlayer(int channelsCount_ = {}, UnityEngine::AudioSource* audioSourcePrefab_ = {}, UnityEngine::AudioClip* defaultAudioClip_ = {}, float volume_ = {}, float crossFadeToAnotherSongSpeed_ = {}, float crossFadeToDefaultSpeed_ = {}, float fadeInSpeed_ = {}, GlobalNamespace::SongPreviewPlayer::AudioSourceParams* defaultAudioSourceParams_ = {}, GlobalNamespace::SongPreviewPlayer::AudioSourceParams* othersAudioSourceParams_ = {}, GlobalNamespace::SongPreviewPlayer::InitData* initData_ = {}, GlobalNamespace::AudioManagerSO* audioMixer_ = {}, ::Array<GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController*>* audioSourceControllers_ = {}, int activeChannel_ = {}, float timeToDefaultAudioTransition_ = {}, bool transitionAfterDelay_ = {}, float volumeScale_ = {}, float fadeSpeed_ = {}, float ambientVolumeScale_ = {}, bool isActiveChannelPaused_ = {}) noexcept : channelsCount{channelsCount_}, audioSourcePrefab{audioSourcePrefab_}, defaultAudioClip{defaultAudioClip_}, volume{volume_}, crossFadeToAnotherSongSpeed{crossFadeToAnotherSongSpeed_}, crossFadeToDefaultSpeed{crossFadeToDefaultSpeed_}, fadeInSpeed{fadeInSpeed_}, defaultAudioSourceParams{defaultAudioSourceParams_}, othersAudioSourceParams{othersAudioSourceParams_}, initData{initData_}, audioMixer{audioMixer_}, audioSourceControllers{audioSourceControllers_}, activeChannel{activeChannel_}, timeToDefaultAudioTransition{timeToDefaultAudioTransition_}, transitionAfterDelay{transitionAfterDelay_}, volumeScale{volumeScale_}, fadeSpeed{fadeSpeed_}, ambientVolumeScale{ambientVolumeScale_}, isActiveChannelPaused{isActiveChannelPaused_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x1172CEC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1172EF4
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x1172F14
    void OnEnable();
    // private System.Collections.IEnumerator CrossFadeAfterDelayCoroutine(System.Single delay)
    // Offset: 0x1173028
    System::Collections::IEnumerator* CrossFadeAfterDelayCoroutine(float delay);
    // protected System.Void OnDisable()
    // Offset: 0x11730D4
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x11731C0
    void Update();
    // public System.Void CrossFadeToDefault()
    // Offset: 0x117364C
    void CrossFadeToDefault();
    // public System.Void CrossfadeToNewDefault(UnityEngine.AudioClip audioClip)
    // Offset: 0x1173708
    void CrossfadeToNewDefault(UnityEngine::AudioClip* audioClip);
    // public System.Void CrossfadeTo(UnityEngine.AudioClip audioClip, System.Single startTime, System.Single duration)
    // Offset: 0x117381C
    void CrossfadeTo(UnityEngine::AudioClip* audioClip, float startTime, float duration);
    // private System.Void CrossfadeTo(UnityEngine.AudioClip audioClip, System.Single startTime, System.Single duration, System.Boolean isDefault)
    // Offset: 0x11733C0
    void CrossfadeTo(UnityEngine::AudioClip* audioClip, float startTime, float duration, bool isDefault);
    // public System.Void CrossfadeToDefault()
    // Offset: 0x117393C
    void CrossfadeToDefault();
    // public override UnityEngine.AudioClip get_activeAudioClip()
    // Offset: 0x1172C8C
    // Implemented from: AudioPlayerBase
    // Base method: UnityEngine.AudioClip AudioPlayerBase::get_activeAudioClip()
    UnityEngine::AudioClip* get_activeAudioClip();
    // public override System.Void PauseCurrentChannel()
    // Offset: 0x1173824
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::PauseCurrentChannel()
    void PauseCurrentChannel();
    // public override System.Void UnPauseCurrentChannel()
    // Offset: 0x11738A4
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::UnPauseCurrentChannel()
    void UnPauseCurrentChannel();
    // public override System.Void FadeOut(System.Single duration)
    // Offset: 0x1173920
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::FadeOut(System.Single duration)
    void FadeOut(float duration);
    // public System.Void .ctor()
    // Offset: 0x1173AA4
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SongPreviewPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SongPreviewPlayer*, creationType>()));
    }
  }; // SongPreviewPlayer
  #pragma pack(pop)
  static check_size<sizeof(SongPreviewPlayer), 128 + sizeof(bool)> __GlobalNamespace_SongPreviewPlayerSizeCheck;
  static_assert(sizeof(SongPreviewPlayer) == 0x81);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SongPreviewPlayer*, "", "SongPreviewPlayer");
