// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAutoincrementedRequestId
#include "GlobalNamespace/HMAutoincrementedRequestId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  // Autogenerated type: HMAsyncRequest
  // [] Offset: FFFFFFFF
  class HMAsyncRequest : public GlobalNamespace::HMAutoincrementedRequestId {
    public:
    // Nested type: GlobalNamespace::HMAsyncRequest::CancelHander
    class CancelHander;
    // private System.Boolean _cancelled
    // Size: 0x1
    // Offset: 0x18
    bool cancelled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cancelled and: cancelHander
    char __padding0[0x7] = {};
    // private HMAsyncRequest/CancelHander _cancelHander
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::HMAsyncRequest::CancelHander* cancelHander;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HMAsyncRequest::CancelHander*) == 0x8);
    // Creating value type constructor for type: HMAsyncRequest
    HMAsyncRequest(bool cancelled_ = {}, GlobalNamespace::HMAsyncRequest::CancelHander* cancelHander_ = {}) noexcept : cancelled{cancelled_}, cancelHander{cancelHander_} {}
    // Deleting conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept = delete;
    // public HMAsyncRequest/CancelHander get_CancelHandler()
    // Offset: 0x1034F40
    GlobalNamespace::HMAsyncRequest::CancelHander* get_CancelHandler();
    // public System.Void set_CancelHandler(HMAsyncRequest/CancelHander value)
    // Offset: 0x1034F48
    void set_CancelHandler(GlobalNamespace::HMAsyncRequest::CancelHander* value);
    // public System.Boolean get_cancelled()
    // Offset: 0x1034F50
    bool get_cancelled();
    // public System.Void Cancel()
    // Offset: 0x1034F58
    void Cancel();
    // public System.Void .ctor()
    // Offset: 0x103532C
    // Implemented from: HMAutoincrementedRequestId
    // Base method: System.Void HMAutoincrementedRequestId::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HMAsyncRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HMAsyncRequest").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HMAsyncRequest*, creationType>()));
    }
  }; // HMAsyncRequest
  static check_size<sizeof(HMAsyncRequest), 32 + sizeof(GlobalNamespace::HMAsyncRequest::CancelHander*)> __GlobalNamespace_HMAsyncRequestSizeCheck;
  static_assert(sizeof(HMAsyncRequest) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HMAsyncRequest*, "", "HMAsyncRequest");
#pragma pack(pop)
