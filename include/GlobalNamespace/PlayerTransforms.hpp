// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: PlayerTransforms
  // [] Offset: FFFFFFFF
  class PlayerTransforms : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.Transform _headTransform
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* headTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Boolean _overrideHeadPos
    // Size: 0x1
    // Offset: 0x20
    bool overrideHeadPos;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideHeadPos and: overriddenHeadPos
    char __padding1[0x3] = {};
    // private UnityEngine.Vector3 _overriddenHeadPos
    // Size: 0xC
    // Offset: 0x24
    UnityEngine::Vector3 overriddenHeadPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _headPos
    // Size: 0xC
    // Offset: 0x30
    UnityEngine::Vector3 headPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _headRot
    // Size: 0x10
    // Offset: 0x3C
    UnityEngine::Quaternion headRot;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _headLocalPos
    // Size: 0xC
    // Offset: 0x4C
    UnityEngine::Vector3 headLocalPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _headLocalRot
    // Size: 0x10
    // Offset: 0x58
    UnityEngine::Quaternion headLocalRot;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // Creating value type constructor for type: PlayerTransforms
    PlayerTransforms(UnityEngine::Transform* headTransform_ = {}, bool overrideHeadPos_ = {}, UnityEngine::Vector3 overriddenHeadPos_ = {}, UnityEngine::Vector3 headPos_ = {}, UnityEngine::Quaternion headRot_ = {}, UnityEngine::Vector3 headLocalPos_ = {}, UnityEngine::Quaternion headLocalRot_ = {}) noexcept : headTransform{headTransform_}, overrideHeadPos{overrideHeadPos_}, overriddenHeadPos{overriddenHeadPos_}, headPos{headPos_}, headRot{headRot_}, headLocalPos{headLocalPos_}, headLocalRot{headLocalRot_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public UnityEngine.Vector3 get_headPos()
    // Offset: 0xF2ABEC
    UnityEngine::Vector3 get_headPos();
    // public UnityEngine.Quaternion get_headRot()
    // Offset: 0xF2ABF8
    UnityEngine::Quaternion get_headRot();
    // public UnityEngine.Vector3 get_headLocalPos()
    // Offset: 0xF2AC04
    UnityEngine::Vector3 get_headLocalPos();
    // public UnityEngine.Quaternion get_headLocalRot()
    // Offset: 0xF2AC10
    UnityEngine::Quaternion get_headLocalRot();
    // public System.Void OverrideHeadPos(UnityEngine.Vector3 pos)
    // Offset: 0xF2AC1C
    void OverrideHeadPos(UnityEngine::Vector3 pos);
    // protected System.Void Update()
    // Offset: 0xF2AC38
    void Update();
    // public System.Single MoveTowardsHead(System.Single start, System.Single end, UnityEngine.Quaternion noteInverseWorldRotation, System.Single t)
    // Offset: 0xF2ACC0
    float MoveTowardsHead(float start, float end, UnityEngine::Quaternion noteInverseWorldRotation, float t);
    // public System.Single GetZPosOffsetByHeadPosAtTime(System.Single start, System.Single end, System.Single t)
    // Offset: 0xF2AE70
    float GetZPosOffsetByHeadPosAtTime(float start, float end, float t);
    // private System.Single GetZPos(System.Single start, System.Single end, System.Single headOffsetZ, System.Single t)
    // Offset: 0xF2ADD0
    float GetZPos(float start, float end, float headOffsetZ, float t);
    // public System.Single HeadOffsetZ(UnityEngine.Quaternion noteInverseWorldRotation)
    // Offset: 0xF2AD10
    float HeadOffsetZ(UnityEngine::Quaternion noteInverseWorldRotation);
    // public System.Void .ctor()
    // Offset: 0xF2AE7C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerTransforms* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerTransforms::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerTransforms*, creationType>()));
    }
  }; // PlayerTransforms
  #pragma pack(pop)
  static check_size<sizeof(PlayerTransforms), 88 + sizeof(UnityEngine::Quaternion)> __GlobalNamespace_PlayerTransformsSizeCheck;
  static_assert(sizeof(PlayerTransforms) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerTransforms*, "", "PlayerTransforms");
