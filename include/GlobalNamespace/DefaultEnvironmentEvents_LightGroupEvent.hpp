// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DefaultEnvironmentEvents
#include "GlobalNamespace/DefaultEnvironmentEvents.hpp"
// Including type: EnvironmentColorType
#include "GlobalNamespace/EnvironmentColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightGroupSO
  class LightGroupSO;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*, "", "DefaultEnvironmentEvents/LightGroupEvent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: DefaultEnvironmentEvents/LightGroupEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class DefaultEnvironmentEvents::LightGroupEvent : public ::Il2CppObject {
    public:
    public:
    // private LightGroupSO _lightGroup
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::LightGroupSO* lightGroup;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightGroupSO*) == 0x8);
    // private EnvironmentColorType _environmentColorType
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::EnvironmentColorType environmentColorType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentColorType) == 0x4);
    // private System.Single _brightness
    // Size: 0x4
    // Offset: 0x1C
    float brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rotationX
    // Size: 0x4
    // Offset: 0x20
    float rotationX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rotationY
    // Size: 0x4
    // Offset: 0x24
    float rotationY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private LightGroupSO _lightGroup
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightGroupSO*& dyn__lightGroup();
    // Get instance field reference: private EnvironmentColorType _environmentColorType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentColorType& dyn__environmentColorType();
    // Get instance field reference: private System.Single _brightness
    [[deprecated("Use field access instead!")]] float& dyn__brightness();
    // Get instance field reference: private System.Single _rotationX
    [[deprecated("Use field access instead!")]] float& dyn__rotationX();
    // Get instance field reference: private System.Single _rotationY
    [[deprecated("Use field access instead!")]] float& dyn__rotationY();
    // public LightGroupSO get_lightGroup()
    // Offset: 0x147E5C0
    ::GlobalNamespace::LightGroupSO* get_lightGroup();
    // public EnvironmentColorType get_environmentColorType()
    // Offset: 0x147E5C8
    ::GlobalNamespace::EnvironmentColorType get_environmentColorType();
    // public System.Single get_brightness()
    // Offset: 0x147E5D0
    float get_brightness();
    // public System.Single get_rotationX()
    // Offset: 0x147E5D8
    float get_rotationX();
    // public System.Single get_rotationY()
    // Offset: 0x147E5E0
    float get_rotationY();
    // public System.Void .ctor()
    // Offset: 0x147E5E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultEnvironmentEvents::LightGroupEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultEnvironmentEvents::LightGroupEvent*, creationType>()));
    }
  }; // DefaultEnvironmentEvents/LightGroupEvent
  #pragma pack(pop)
  static check_size<sizeof(DefaultEnvironmentEvents::LightGroupEvent), 36 + sizeof(float)> __GlobalNamespace_DefaultEnvironmentEvents_LightGroupEventSizeCheck;
  static_assert(sizeof(DefaultEnvironmentEvents::LightGroupEvent) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_lightGroup
// Il2CppName: get_lightGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LightGroupSO* (GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_lightGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*), "get_lightGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_environmentColorType
// Il2CppName: get_environmentColorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::EnvironmentColorType (GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_environmentColorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*), "get_environmentColorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_brightness
// Il2CppName: get_brightness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_brightness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*), "get_brightness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_rotationX
// Il2CppName: get_rotationX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_rotationX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*), "get_rotationX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_rotationY
// Il2CppName: get_rotationY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::get_rotationY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*), "get_rotationY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
