// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Platform because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: UserInfo
  class UserInfo : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::UserInfo::Platform
    struct Platform;
    // Autogenerated type: UserInfo/Platform
    struct Platform : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Platform
      constexpr Platform(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UserInfo/Platform Test
      static constexpr const int Test = 0;
      // Get static field: static public UserInfo/Platform Test
      static GlobalNamespace::UserInfo::Platform _get_Test();
      // Set static field: static public UserInfo/Platform Test
      static void _set_Test(GlobalNamespace::UserInfo::Platform value);
      // static field const value: static public UserInfo/Platform Steam
      static constexpr const int Steam = 1;
      // Get static field: static public UserInfo/Platform Steam
      static GlobalNamespace::UserInfo::Platform _get_Steam();
      // Set static field: static public UserInfo/Platform Steam
      static void _set_Steam(GlobalNamespace::UserInfo::Platform value);
      // static field const value: static public UserInfo/Platform Oculus
      static constexpr const int Oculus = 2;
      // Get static field: static public UserInfo/Platform Oculus
      static GlobalNamespace::UserInfo::Platform _get_Oculus();
      // Set static field: static public UserInfo/Platform Oculus
      static void _set_Oculus(GlobalNamespace::UserInfo::Platform value);
      // static field const value: static public UserInfo/Platform PS4
      static constexpr const int PS4 = 3;
      // Get static field: static public UserInfo/Platform PS4
      static GlobalNamespace::UserInfo::Platform _get_PS4();
      // Set static field: static public UserInfo/Platform PS4
      static void _set_PS4(GlobalNamespace::UserInfo::Platform value);
    }; // UserInfo/Platform
    check_size<sizeof(UserInfo::Platform), 0 + sizeof(int) + ((0 + sizeof(int)) % 8 != 0 ? (8 - (0 + sizeof(int)) % 8) : 0)> __GlobalNamespace_UserInfo_PlatformSizeCheck;
    // public readonly UserInfo/Platform platform
    // Offset: 0x10
    GlobalNamespace::UserInfo::Platform platform;
    // public readonly System.String platformUserId
    // Offset: 0x18
    ::Il2CppString* platformUserId;
    // public readonly System.String userName
    // Offset: 0x20
    ::Il2CppString* userName;
    // public System.Void .ctor(UserInfo/Platform platform, System.String platformUserId, System.String userName)
    // Offset: 0xFEC6AC
    static UserInfo* New_ctor(GlobalNamespace::UserInfo::Platform platform, ::Il2CppString* platformUserId, ::Il2CppString* userName);
  }; // UserInfo
  check_size<sizeof(UserInfo), 32 + sizeof(void*) + ((32 + sizeof(void*)) % 8 != 0 ? (8 - (32 + sizeof(void*)) % 8) : 0)> __GlobalNamespace_UserInfoSizeCheck;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::UserInfo*, "", "UserInfo");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::UserInfo::Platform, "", "UserInfo/Platform");
#pragma pack(pop)
