// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectManager
  class BeatmapObjectManager : public ::Il2CppObject/*, public GlobalNamespace::IBeatmapObjectSpawner, public GlobalNamespace::INoteControllerNoteDidStartJumpEvent, public GlobalNamespace::INoteControllerNoteDidFinishJumpEvent, public GlobalNamespace::INoteControllerNoteWasCutEvent, public GlobalNamespace::INoteControllerNoteWasMissedEvent, public GlobalNamespace::INoteControllerNoteDidDissolveEvent*/ {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate
    class NoteWasCutDelegate;
    // [CompilerGeneratedAttribute] Offset: 0xE18DC0
    // private System.Action`1<NoteController> noteWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x10
    System::Action_1<GlobalNamespace::NoteController*>* noteWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18DD0
    // private System.Action`1<NoteController> noteWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action_1<GlobalNamespace::NoteController*>* noteWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18DE0
    // private System.Action`1<NoteController> noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action_1<GlobalNamespace::NoteController*>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18DF0
    // private BeatmapObjectManager/NoteWasCutDelegate noteWasCutEvent
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E00
    // private System.Action`1<NoteController> noteDidStartJumpEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<GlobalNamespace::NoteController*>* noteDidStartJumpEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E10
    // private System.Action`1<ObstacleController> obstacleWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E20
    // private System.Action`1<ObstacleController> obstacleWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E30
    // private System.Action`1<ObstacleController> obstacleDidPassThreeQuartersOfMove2Event
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassThreeQuartersOfMove2Event;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E40
    // private System.Action`1<ObstacleController> obstacleDidPassAvoidedMarkEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassAvoidedMarkEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E50
    // private System.Action`1<System.Boolean> didHideAllBeatmapObjectsEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<bool>* didHideAllBeatmapObjectsEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<bool>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE18E60
    // private System.Boolean <spawnHidden>k__BackingField
    // Size: 0x1
    // Offset: 0x60
    bool spawnHidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: BeatmapObjectManager
    BeatmapObjectManager(System::Action_1<GlobalNamespace::NoteController*>* noteWasSpawnedEvent_ = {}, System::Action_1<GlobalNamespace::NoteController*>* noteWasDespawnedEvent_ = {}, System::Action_1<GlobalNamespace::NoteController*>* noteWasMissedEvent_ = {}, GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* noteWasCutEvent_ = {}, System::Action_1<GlobalNamespace::NoteController*>* noteDidStartJumpEvent_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasSpawnedEvent_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasDespawnedEvent_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassThreeQuartersOfMove2Event_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassAvoidedMarkEvent_ = {}, System::Action_1<bool>* didHideAllBeatmapObjectsEvent_ = {}, bool spawnHidden_ = {}) noexcept : noteWasSpawnedEvent{noteWasSpawnedEvent_}, noteWasDespawnedEvent{noteWasDespawnedEvent_}, noteWasMissedEvent{noteWasMissedEvent_}, noteWasCutEvent{noteWasCutEvent_}, noteDidStartJumpEvent{noteDidStartJumpEvent_}, obstacleWasSpawnedEvent{obstacleWasSpawnedEvent_}, obstacleWasDespawnedEvent{obstacleWasDespawnedEvent_}, obstacleDidPassThreeQuartersOfMove2Event{obstacleDidPassThreeQuartersOfMove2Event_}, obstacleDidPassAvoidedMarkEvent{obstacleDidPassAvoidedMarkEvent_}, didHideAllBeatmapObjectsEvent{didHideAllBeatmapObjectsEvent_}, spawnHidden{spawnHidden_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBeatmapObjectSpawner
    operator GlobalNamespace::IBeatmapObjectSpawner() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBeatmapObjectSpawner*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteDidStartJumpEvent
    operator GlobalNamespace::INoteControllerNoteDidStartJumpEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteDidFinishJumpEvent
    operator GlobalNamespace::INoteControllerNoteDidFinishJumpEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteWasCutEvent
    operator GlobalNamespace::INoteControllerNoteWasCutEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteWasCutEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteWasMissedEvent
    operator GlobalNamespace::INoteControllerNoteWasMissedEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteWasMissedEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteDidDissolveEvent
    operator GlobalNamespace::INoteControllerNoteDidDissolveEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>(this);
    }
    // public System.Void add_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1107E5C
    void add_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1107F00
    void remove_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasDespawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1107FA4
    void add_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasDespawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1108048
    void remove_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x11080EC
    void add_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1108190
    void remove_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasCutEvent(BeatmapObjectManager/NoteWasCutDelegate value)
    // Offset: 0x1108234
    void add_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value);
    // public System.Void remove_noteWasCutEvent(BeatmapObjectManager/NoteWasCutDelegate value)
    // Offset: 0x11082D8
    void remove_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value);
    // public System.Void add_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x110837C
    void add_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1108420
    void remove_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x11084C4
    void add_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x1108568
    void remove_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleWasDespawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x110860C
    void add_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasDespawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x11086B0
    void remove_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0x1108754
    void add_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0x11087F8
    void remove_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x1106F14
    void add_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x11071A0
    void remove_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_didHideAllBeatmapObjectsEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x110889C
    void add_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value);
    // public System.Void remove_didHideAllBeatmapObjectsEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x1108940
    void remove_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value);
    // public System.Collections.Generic.List`1<ObstacleController> get_activeObstacleControllers()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* get_activeObstacleControllers();
    // protected ObstacleController SpawnObstacleInternal(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::ObstacleController* SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // protected NoteController SpawnBombNoteInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteController* SpawnBombNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // protected NoteController SpawnBasicNoteInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteController* SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset);
    // protected System.Void DespawnInternal(NoteController noteController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::NoteController* noteController);
    // protected System.Void DespawnInternal(ObstacleController obstacleController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::ObstacleController* obstacleController);
    // public System.Boolean get_spawnHidden()
    // Offset: 0x11089E4
    bool get_spawnHidden();
    // public System.Void set_spawnHidden(System.Boolean value)
    // Offset: 0x11089EC
    void set_spawnHidden(bool value);
    // public ObstacleController SpawnObstacle(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0x11089F8
    GlobalNamespace::ObstacleController* SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // public NoteController SpawnBombNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0x1108C74
    GlobalNamespace::NoteController* SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // public NoteController SpawnBasicNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0x1109044
    GlobalNamespace::NoteController* SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset);
    // private System.Void SetNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0x1108DB0
    void SetNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController);
    // private System.Void RemoveNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0x1109150
    void RemoveNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController);
    // private System.Void SetObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0x1108B3C
    void SetObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void RemoveObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0x11093F8
    void RemoveObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void Despawn(NoteController noteController)
    // Offset: 0x1109530
    void Despawn(GlobalNamespace::NoteController* noteController);
    // private System.Void Despawn(ObstacleController obstacleController)
    // Offset: 0x11095C8
    void Despawn(GlobalNamespace::ObstacleController* obstacleController);
    // public System.Void HandleNoteControllerNoteDidStartJump(NoteController noteController)
    // Offset: 0x1109660
    void HandleNoteControllerNoteDidStartJump(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteWasMissed(NoteController noteController)
    // Offset: 0x11096D4
    void HandleNoteControllerNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteDidFinishJump(NoteController noteController)
    // Offset: 0x1109748
    void HandleNoteControllerNoteDidFinishJump(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteDidDissolve(NoteController noteController)
    // Offset: 0x110974C
    void HandleNoteControllerNoteDidDissolve(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x1109750
    void HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo);
    // private System.Void HandleObstaclePassedThreeQuartersOfMove2(ObstacleController obstacleController)
    // Offset: 0x1109B70
    void HandleObstaclePassedThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstaclePassedAvoidedMark(ObstacleController obstacleController)
    // Offset: 0x1109BE4
    void HandleObstaclePassedAvoidedMark(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleFinishedMovement(ObstacleController obstacleController)
    // Offset: 0x1109C58
    void HandleObstacleFinishedMovement(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleDidDissolve(ObstacleController obstacleController)
    // Offset: 0x1109C5C
    void HandleObstacleDidDissolve(GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void InvokeDidHideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0x1109C60
    void InvokeDidHideAllBeatmapObjects(bool hide);
    // public System.Void DissolveAllObjects()
    // Offset: 0xFFFFFFFF
    void DissolveAllObjects();
    // public System.Void HideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0xFFFFFFFF
    void HideAllBeatmapObjects(bool hide);
    // public System.Void PauseAllBeatmapObjects(System.Boolean pause)
    // Offset: 0xFFFFFFFF
    void PauseAllBeatmapObjects(bool pause);
    // private System.Void INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x1109CDC
    void INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo);
    // protected System.Void .ctor()
    // Offset: 0x1109CD4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectManager*, creationType>()));
    }
  }; // BeatmapObjectManager
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectManager), 96 + sizeof(bool)> __GlobalNamespace_BeatmapObjectManagerSizeCheck;
  static_assert(sizeof(BeatmapObjectManager) == 0x61);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectManager*, "", "BeatmapObjectManager");
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent
// Il2CppName: add_noteWasSpawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent
// Il2CppName: remove_noteWasSpawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent
// Il2CppName: add_noteWasDespawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent
// Il2CppName: remove_noteWasDespawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent
// Il2CppName: add_noteDidStartJumpEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent
// Il2CppName: remove_noteDidStartJumpEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent
// Il2CppName: add_obstacleWasSpawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent
// Il2CppName: remove_obstacleWasSpawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent
// Il2CppName: add_obstacleWasDespawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent
// Il2CppName: remove_obstacleWasDespawnedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: add_obstacleDidPassThreeQuartersOfMove2Event
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: remove_obstacleDidPassThreeQuartersOfMove2Event
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent
// Il2CppName: add_obstacleDidPassAvoidedMarkEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent
// Il2CppName: remove_obstacleDidPassAvoidedMarkEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent
// Il2CppName: add_didHideAllBeatmapObjectsEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent
// Il2CppName: remove_didHideAllBeatmapObjectsEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers
// Il2CppName: get_activeObstacleControllers
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal
// Il2CppName: SpawnObstacleInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal
// Il2CppName: SpawnBombNoteInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal
// Il2CppName: SpawnBasicNoteInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::get_spawnHidden
// Il2CppName: get_spawnHidden
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::set_spawnHidden
// Il2CppName: set_spawnHidden
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnObstacle
// Il2CppName: SpawnObstacle
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBombNote
// Il2CppName: SpawnBombNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBasicNote
// Il2CppName: SpawnBasicNote
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks
// Il2CppName: SetNoteControllerEventCallbacks
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks
// Il2CppName: RemoveNoteControllerEventCallbacks
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks
// Il2CppName: SetObstacleEventCallbacks
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks
// Il2CppName: RemoveObstacleEventCallbacks
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump
// Il2CppName: HandleNoteControllerNoteDidStartJump
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed
// Il2CppName: HandleNoteControllerNoteWasMissed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump
// Il2CppName: HandleNoteControllerNoteDidFinishJump
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve
// Il2CppName: HandleNoteControllerNoteDidDissolve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut
// Il2CppName: HandleNoteControllerNoteWasCut
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2
// Il2CppName: HandleObstaclePassedThreeQuartersOfMove2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark
// Il2CppName: HandleObstaclePassedAvoidedMark
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement
// Il2CppName: HandleObstacleFinishedMovement
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve
// Il2CppName: HandleObstacleDidDissolve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects
// Il2CppName: InvokeDidHideAllBeatmapObjects
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DissolveAllObjects
// Il2CppName: DissolveAllObjects
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects
// Il2CppName: HideAllBeatmapObjects
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects
// Il2CppName: PauseAllBeatmapObjects
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut
// Il2CppName: INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
