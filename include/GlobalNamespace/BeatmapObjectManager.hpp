// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: NoteRibbonController
  class NoteRibbonController;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: BeatmapObjectManager
  class BeatmapObjectManager : public ::Il2CppObject, public GlobalNamespace::IBeatmapObjectSpawner {
    public:
    // private System.Action`1<NoteController> noteWasSpawnedEvent
    // Offset: 0x10
    System::Action_1<GlobalNamespace::NoteController*>* noteWasSpawnedEvent;
    // private System.Action`1<NoteController> noteWasMissedEvent
    // Offset: 0x18
    System::Action_1<GlobalNamespace::NoteController*>* noteWasMissedEvent;
    // private System.Action`2<NoteController,NoteCutInfo> noteWasCutEvent
    // Offset: 0x20
    System::Action_2<GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo*>* noteWasCutEvent;
    // private System.Action`1<NoteController> noteDidStartJumpEvent
    // Offset: 0x28
    System::Action_1<GlobalNamespace::NoteController*>* noteDidStartJumpEvent;
    // private System.Action`1<ObstacleController> obstacleWasSpawnedEvent
    // Offset: 0x30
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasSpawnedEvent;
    // private System.Action`1<ObstacleController> obstacleDidPassThreeQuartersOfMove2Event
    // Offset: 0x38
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassThreeQuartersOfMove2Event;
    // private System.Action`1<ObstacleController> obstacleDidPassAvoidedMarkEvent
    // Offset: 0x40
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassAvoidedMarkEvent;
    // private System.Boolean <spawnHidden>k__BackingField
    // Offset: 0x48
    bool spawnHidden;
    // public System.Void add_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0xF14ED8
    void add_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0xF14F7C
    void remove_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0xF15020
    void add_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0xF150C4
    void remove_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasCutEvent(System.Action`2<NoteController,NoteCutInfo> value)
    // Offset: 0xF15168
    void add_noteWasCutEvent(System::Action_2<GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo*>* value);
    // public System.Void remove_noteWasCutEvent(System.Action`2<NoteController,NoteCutInfo> value)
    // Offset: 0xF1520C
    void remove_noteWasCutEvent(System::Action_2<GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo*>* value);
    // public System.Void add_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0xF152B0
    void add_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0xF15354
    void remove_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0xF153F8
    void add_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0xF1549C
    void remove_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0xF15540
    void add_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0xF155E4
    void remove_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0xF15688
    void add_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0xF1572C
    void remove_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Collections.Generic.HashSet`1<ObstacleController> get_activeObstacleControllers()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::HashSet_1<GlobalNamespace::ObstacleController*>* get_activeObstacleControllers();
    // public System.Collections.Generic.HashSet`1<NoteRibbonController> get_activeNoteRibbonControllers()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::HashSet_1<GlobalNamespace::NoteRibbonController*>* get_activeNoteRibbonControllers();
    // protected ObstacleController SpawnObstacleInternal(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::ObstacleController* SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // protected NoteController SpawnBombNoteInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteController* SpawnBombNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // protected NoteController SpawnBasicNoteInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteController* SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset);
    // protected NoteRibbonController SpawnNoteRibbonInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, NoteController parentNoteController, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteRibbonController* SpawnNoteRibbonInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, GlobalNamespace::NoteController* parentNoteController, float rotation, float cutDirectionAngleOffset);
    // protected System.Void DespawnInternal(NoteController noteController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::NoteController* noteController);
    // protected System.Void DespawnInternal(ObstacleController obstacleController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void DespawnInternal(NoteRibbonController noteRibbonController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::NoteRibbonController* noteRibbonController);
    // public System.Boolean get_spawnHidden()
    // Offset: 0xF157D0
    bool get_spawnHidden();
    // public System.Void set_spawnHidden(System.Boolean value)
    // Offset: 0xF157D8
    void set_spawnHidden(bool value);
    // private System.Void SetNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0xF15B94
    void SetNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController);
    // private System.Void RemoveNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0xF15F78
    void RemoveNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController);
    // private System.Void SetNoteRibbonControllerEventCallbacks(NoteRibbonController noteRibbonController)
    // Offset: 0xF15EA8
    void SetNoteRibbonControllerEventCallbacks(GlobalNamespace::NoteRibbonController* noteRibbonController);
    // private System.Void RemoveNoteRibbonControllerEventCallbacks(NoteRibbonController noteRibbonController)
    // Offset: 0xF160F4
    void RemoveNoteRibbonControllerEventCallbacks(GlobalNamespace::NoteRibbonController* noteRibbonController);
    // private System.Void SetObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0xF15924
    void SetObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void RemoveObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0xF161C4
    void RemoveObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void Despawn(NoteController noteController)
    // Offset: 0xF162FC
    void Despawn(GlobalNamespace::NoteController* noteController);
    // private System.Void Despawn(ObstacleController obstacleController)
    // Offset: 0xF16334
    void Despawn(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void Despawn(NoteRibbonController noteRibbonController)
    // Offset: 0xF1636C
    void Despawn(GlobalNamespace::NoteRibbonController* noteRibbonController);
    // private System.Void HandleNoteDidStartJump(NoteController noteController)
    // Offset: 0xF163A4
    void HandleNoteDidStartJump(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0xF16418
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteDidFinishJump(NoteController noteController)
    // Offset: 0xF1648C
    void HandleNoteDidFinishJump(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteDidDissolve(NoteController noteController)
    // Offset: 0xF164C4
    void HandleNoteDidDissolve(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xF164FC
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleNoteRibbonDidFinishMovement(NoteRibbonController noteRibbonController)
    // Offset: 0xF1658C
    void HandleNoteRibbonDidFinishMovement(GlobalNamespace::NoteRibbonController* noteRibbonController);
    // private System.Void HandleNoteRibbonDidDissolve(NoteRibbonController noteRibbonController)
    // Offset: 0xF165C4
    void HandleNoteRibbonDidDissolve(GlobalNamespace::NoteRibbonController* noteRibbonController);
    // private System.Void HandleObstaclePassedThreeQuartersOfMove2(ObstacleController obstacleController)
    // Offset: 0xF165FC
    void HandleObstaclePassedThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstaclePassedAvoidedMark(ObstacleController obstacleController)
    // Offset: 0xF16670
    void HandleObstaclePassedAvoidedMark(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleFinishedMovement(ObstacleController obstacleController)
    // Offset: 0xF166E4
    void HandleObstacleFinishedMovement(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleDidDissolve(ObstacleController obstacleController)
    // Offset: 0xF1671C
    void HandleObstacleDidDissolve(GlobalNamespace::ObstacleController* obstacleController);
    // public System.Void DissolveAllObjects()
    // Offset: 0xFFFFFFFF
    void DissolveAllObjects();
    // public System.Void HideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0xFFFFFFFF
    void HideAllBeatmapObjects(bool hide);
    // public System.Void PauseAllBeatmapObjects(System.Boolean pause)
    // Offset: 0xFFFFFFFF
    void PauseAllBeatmapObjects(bool pause);
    // public ObstacleController SpawnObstacle(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0xF157E4
    // Implemented from: IBeatmapObjectSpawner
    // Base method: ObstacleController IBeatmapObjectSpawner::SpawnObstacle(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    GlobalNamespace::ObstacleController* SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // public NoteController SpawnBombNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0xF15A5C
    // Implemented from: IBeatmapObjectSpawner
    // Base method: NoteController IBeatmapObjectSpawner::SpawnBombNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    GlobalNamespace::NoteController* SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // public NoteController SpawnBasicNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0xF15D10
    // Implemented from: IBeatmapObjectSpawner
    // Base method: NoteController IBeatmapObjectSpawner::SpawnBasicNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    GlobalNamespace::NoteController* SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset);
    // public NoteRibbonController SpawnNoteRibbon(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, NoteController parentNoteController, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0xF15E18
    // Implemented from: IBeatmapObjectSpawner
    // Base method: NoteRibbonController IBeatmapObjectSpawner::SpawnNoteRibbon(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, NoteController parentNoteController, System.Single rotation, System.Single cutDirectionAngleOffset)
    GlobalNamespace::NoteRibbonController* SpawnNoteRibbon(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, GlobalNamespace::NoteController* parentNoteController, float rotation, float cutDirectionAngleOffset);
    // protected System.Void .ctor()
    // Offset: 0xF16754
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static BeatmapObjectManager* New_ctor();
  }; // BeatmapObjectManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectManager*, "", "BeatmapObjectManager");
#pragma pack(pop)
