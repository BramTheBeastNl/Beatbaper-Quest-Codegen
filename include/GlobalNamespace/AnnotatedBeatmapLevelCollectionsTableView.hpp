// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: TableView because it is already included!
  // Forward declaring type: TableCell
  class TableCell;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AnnotatedBeatmapLevelCollectionTableCell
  class AnnotatedBeatmapLevelCollectionTableCell;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
  // Forward declaring type: IAnnotatedBeatmapLevelCollection
  class IAnnotatedBeatmapLevelCollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: AnnotatedBeatmapLevelCollectionsTableView
  class AnnotatedBeatmapLevelCollectionsTableView : public HMUI::TableView::IDataSource, public UnityEngine::MonoBehaviour {
    public:
    // private HMUI.TableView _tableView
    // Offset: 0x18
    HMUI::TableView* tableView;
    // private AnnotatedBeatmapLevelCollectionTableCell _cellPrefab
    // Offset: 0x20
    GlobalNamespace::AnnotatedBeatmapLevelCollectionTableCell* cellPrefab;
    // private System.String _cellReuseIdentifier
    // Offset: 0x28
    ::Il2CppString* cellReuseIdentifier;
    // private System.Single _cellWidth
    // Offset: 0x30
    float cellWidth;
    // private System.String[] _promoPackIDStrings
    // Offset: 0x38
    ::Array<::Il2CppString*>* promoPackIDStrings;
    // private AdditionalContentModel _additionalContentModel
    // Offset: 0x40
    GlobalNamespace::AdditionalContentModel* additionalContentModel;
    // private System.Action`2<AnnotatedBeatmapLevelCollectionsTableView,IAnnotatedBeatmapLevelCollection> didSelectAnnotatedBeatmapLevelCollectionEvent
    // Offset: 0x48
    System::Action_2<GlobalNamespace::AnnotatedBeatmapLevelCollectionsTableView*, GlobalNamespace::IAnnotatedBeatmapLevelCollection*>* didSelectAnnotatedBeatmapLevelCollectionEvent;
    // private System.Collections.Generic.HashSet`1<System.String> _promoPackIDs
    // Offset: 0x50
    System::Collections::Generic::HashSet_1<::Il2CppString*>* promoPackIDs;
    // private IAnnotatedBeatmapLevelCollection[] _annotatedBeatmapLevelCollections
    // Offset: 0x58
    ::Array<GlobalNamespace::IAnnotatedBeatmapLevelCollection*>* annotatedBeatmapLevelCollections;
    // private System.Boolean _isInitialized
    // Offset: 0x60
    bool isInitialized;
    // private System.Int32 _selectedColumn
    // Offset: 0x64
    int selectedColumn;
    // public System.Void add_didSelectAnnotatedBeatmapLevelCollectionEvent(System.Action`2<AnnotatedBeatmapLevelCollectionsTableView,IAnnotatedBeatmapLevelCollection> value)
    // Offset: 0x18ED0B0
    void add_didSelectAnnotatedBeatmapLevelCollectionEvent(System::Action_2<GlobalNamespace::AnnotatedBeatmapLevelCollectionsTableView*, GlobalNamespace::IAnnotatedBeatmapLevelCollection*>* value);
    // public System.Void remove_didSelectAnnotatedBeatmapLevelCollectionEvent(System.Action`2<AnnotatedBeatmapLevelCollectionsTableView,IAnnotatedBeatmapLevelCollection> value)
    // Offset: 0x18ED154
    void remove_didSelectAnnotatedBeatmapLevelCollectionEvent(System::Action_2<GlobalNamespace::AnnotatedBeatmapLevelCollectionsTableView*, GlobalNamespace::IAnnotatedBeatmapLevelCollection*>* value);
    // private System.Void Init()
    // Offset: 0x18ED1F8
    void Init();
    // public System.Void SetData(IAnnotatedBeatmapLevelCollection[] annotatedBeatmapLevelCollections)
    // Offset: 0x18ED364
    void SetData(::Array<GlobalNamespace::IAnnotatedBeatmapLevelCollection*>* annotatedBeatmapLevelCollections);
    // protected System.Void OnEnable()
    // Offset: 0x18ED3D4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x18ED45C
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x18ED4E4
    void OnDestroy();
    // public System.Void Hide()
    // Offset: 0x18ED578
    void Hide();
    // public System.Void Show()
    // Offset: 0x18ED594
    void Show();
    // private System.Void HandleDidSelectColumnEvent(HMUI.TableView tableView, System.Int32 column)
    // Offset: 0x18ED818
    void HandleDidSelectColumnEvent(HMUI::TableView* tableView, int column);
    // private System.Void HandleAdditionalContentModelDidInvalidateData()
    // Offset: 0x18ED8BC
    void HandleAdditionalContentModelDidInvalidateData();
    // public System.Void CancelAsyncOperations()
    // Offset: 0x18ED984
    void CancelAsyncOperations();
    // public System.Void RefreshAvailability()
    // Offset: 0x18EDC38
    void RefreshAvailability();
    // public System.Void SelectAndScrollToCellWithIdx(System.Int32 idx)
    // Offset: 0x18EDEF8
    void SelectAndScrollToCellWithIdx(int idx);
    // public System.Single CellSize()
    // Offset: 0x18ED5B0
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: System.Single IDataSource::CellSize()
    float CellSize();
    // public System.Int32 NumberOfCells()
    // Offset: 0x18ED5B8
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: System.Int32 IDataSource::NumberOfCells()
    int NumberOfCells();
    // public HMUI.TableCell CellForIdx(HMUI.TableView tableView, System.Int32 idx)
    // Offset: 0x18ED5D0
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: HMUI.TableCell IDataSource::CellForIdx(HMUI.TableView tableView, System.Int32 idx)
    HMUI::TableCell* CellForIdx(HMUI::TableView* tableView, int idx);
    // public System.Void .ctor()
    // Offset: 0x18EDF4C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static AnnotatedBeatmapLevelCollectionsTableView* New_ctor();
  }; // AnnotatedBeatmapLevelCollectionsTableView
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AnnotatedBeatmapLevelCollectionsTableView*, "", "AnnotatedBeatmapLevelCollectionsTableView");
#pragma pack(pop)
