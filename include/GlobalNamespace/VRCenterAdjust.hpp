// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Vector3SO
  class Vector3SO;
  // Forward declaring type: FloatSO
  class FloatSO;
  // Forward declaring type: MainSettingsModelSO
  class MainSettingsModelSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: VRCenterAdjust
  class VRCenterAdjust : public UnityEngine::MonoBehaviour {
    public:
    // private Vector3SO _roomCenter
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::Vector3SO* roomCenter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Vector3SO*) == 0x8);
    // private FloatSO _roomRotation
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::FloatSO* roomRotation;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FloatSO*) == 0x8);
    // private MainSettingsModelSO _mainSettingsModel
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MainSettingsModelSO* mainSettingsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MainSettingsModelSO*) == 0x8);
    // Creating value type constructor for type: VRCenterAdjust
    VRCenterAdjust(GlobalNamespace::Vector3SO* roomCenter_ = {}, GlobalNamespace::FloatSO* roomRotation_ = {}, GlobalNamespace::MainSettingsModelSO* mainSettingsModel_ = {}) noexcept : roomCenter{roomCenter_}, roomRotation{roomRotation_}, mainSettingsModel{mainSettingsModel_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x1DA9E5C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1DA9EC0
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x1DAA090
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1DAA168
    void OnDisable();
    // private System.Void HandleRoomCenterDidChange()
    // Offset: 0x1DAA240
    void HandleRoomCenterDidChange();
    // private System.Void HandleRoomRotationDidChange()
    // Offset: 0x1DAA2B8
    void HandleRoomRotationDidChange();
    // protected System.Void Update()
    // Offset: 0x1DAA364
    void Update();
    // public System.Void ResetRoom()
    // Offset: 0x1DA9FE4
    void ResetRoom();
    // public System.Void .ctor()
    // Offset: 0x1DAA3A0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRCenterAdjust* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRCenterAdjust*, creationType>()));
    }
  }; // VRCenterAdjust
  #pragma pack(pop)
  static check_size<sizeof(VRCenterAdjust), 40 + sizeof(GlobalNamespace::MainSettingsModelSO*)> __GlobalNamespace_VRCenterAdjustSizeCheck;
  static_assert(sizeof(VRCenterAdjust) == 0x30);
  // Writing MetadataGetter for method: VRCenterAdjust::Awake
  // Il2CppName: Awake
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::Awake)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::OnEnable
  // Il2CppName: OnEnable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::OnEnable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::OnDisable
  // Il2CppName: OnDisable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::OnDisable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::HandleRoomCenterDidChange
  // Il2CppName: HandleRoomCenterDidChange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::HandleRoomCenterDidChange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "HandleRoomCenterDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::HandleRoomRotationDidChange
  // Il2CppName: HandleRoomRotationDidChange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::HandleRoomRotationDidChange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "HandleRoomRotationDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::Update
  // Il2CppName: Update
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::Update)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::ResetRoom
  // Il2CppName: ResetRoom
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::ResetRoom)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "ResetRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: VRCenterAdjust::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::VRCenterAdjust*, "", "VRCenterAdjust");
