// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: PosesRecordingData
#include "GlobalNamespace/PosesRecordingData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: LayerMask
  struct LayerMask;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlaybackRenderer
  class PlaybackRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::PlaybackRenderer);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlaybackRenderer*, "", "PlaybackRenderer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PlaybackRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 1238300
  class PlaybackRenderer : public UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Action texturesReadyEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action* texturesReadyEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Boolean _isSetup
    // Size: 0x1
    // Offset: 0x20
    bool isSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSetup and: hmd
    char __padding1[0x7] = {};
    // private UnityEngine.Transform _hmd
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* hmd;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(UnityEngine::Camera*) == 0x8);
    // private PosesRecordingData/ExternalCameraCalibration _cameraCalibration
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::PosesRecordingData::ExternalCameraCalibration* cameraCalibration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*) == 0x8);
    // private UnityEngine.GameObject _clipQuad
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::GameObject* clipQuad;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material _clipMaterial
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Material* clipMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.RenderTexture _foregroundTexture
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::RenderTexture* foregroundTexture;
    // Field size check
    static_assert(sizeof(UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture _backgroundTexture
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::RenderTexture* backgroundTexture;
    // Field size check
    static_assert(sizeof(UnityEngine::RenderTexture*) == 0x8);
    public:
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Action texturesReadyEvent
    System::Action*& dyn_texturesReadyEvent();
    // Get instance field reference: private System.Boolean _isSetup
    bool& dyn__isSetup();
    // Get instance field reference: private UnityEngine.Transform _hmd
    UnityEngine::Transform*& dyn__hmd();
    // Get instance field reference: private UnityEngine.Camera _camera
    UnityEngine::Camera*& dyn__camera();
    // Get instance field reference: private PosesRecordingData/ExternalCameraCalibration _cameraCalibration
    GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*& dyn__cameraCalibration();
    // Get instance field reference: private UnityEngine.GameObject _clipQuad
    UnityEngine::GameObject*& dyn__clipQuad();
    // Get instance field reference: private UnityEngine.Material _clipMaterial
    UnityEngine::Material*& dyn__clipMaterial();
    // Get instance field reference: private UnityEngine.RenderTexture _foregroundTexture
    UnityEngine::RenderTexture*& dyn__foregroundTexture();
    // Get instance field reference: private UnityEngine.RenderTexture _backgroundTexture
    UnityEngine::RenderTexture*& dyn__backgroundTexture();
    // public System.Boolean get_haveForegroundTexture()
    // Offset: 0x2AC166C
    bool get_haveForegroundTexture();
    // public UnityEngine.RenderTexture get_foregroundTexture()
    // Offset: 0x2AC16DC
    UnityEngine::RenderTexture* get_foregroundTexture();
    // public UnityEngine.RenderTexture get_backgroundTexture()
    // Offset: 0x2AC16E4
    UnityEngine::RenderTexture* get_backgroundTexture();
    // public System.Void add_texturesReadyEvent(System.Action value)
    // Offset: 0x2AC1524
    void add_texturesReadyEvent(System::Action* value);
    // public System.Void remove_texturesReadyEvent(System.Action value)
    // Offset: 0x2AC15C8
    void remove_texturesReadyEvent(System::Action* value);
    // public System.Void Setup(UnityEngine.Camera hmdCamera, UnityEngine.Camera camera, PosesRecordingData/ExternalCameraCalibration cameraCalibration, UnityEngine.LayerMask layerMask, System.Int32 textureWidth, System.Int32 textureHeight, System.Boolean needForegroundTexture)
    // Offset: 0x2AC16EC
    void Setup(UnityEngine::Camera* hmdCamera, UnityEngine::Camera* camera, GlobalNamespace::PosesRecordingData::ExternalCameraCalibration* cameraCalibration, UnityEngine::LayerMask layerMask, int textureWidth, int textureHeight, bool needForegroundTexture);
    // private System.Void CreateClipQuad()
    // Offset: 0x2AC18CC
    void CreateClipQuad();
    // private System.Void InitCamera(UnityEngine.Camera camera, PosesRecordingData/ExternalCameraCalibration cameraCalibration, UnityEngine.LayerMask layerMask)
    // Offset: 0x2AC1788
    void InitCamera(UnityEngine::Camera* camera, GlobalNamespace::PosesRecordingData::ExternalCameraCalibration* cameraCalibration, UnityEngine::LayerMask layerMask);
    // private System.Void CreateTextures(System.Int32 width, System.Int32 height, System.Boolean needForegroundTexture)
    // Offset: 0x2AC1B0C
    void CreateTextures(int width, int height, bool needForegroundTexture);
    // static private UnityEngine.RenderTexture CreateTexture(System.Int32 width, System.Int32 height)
    // Offset: 0x2AC1B5C
    static UnityEngine::RenderTexture* CreateTexture(int width, int height);
    // private System.Single GetDistanceToHMD()
    // Offset: 0x2AC1C24
    float GetDistanceToHMD();
    // private System.Void OrientClipQuad()
    // Offset: 0x2AC1E48
    void OrientClipQuad();
    // private System.Void RenderNear()
    // Offset: 0x2AC2068
    void RenderNear();
    // private System.Void RenderFar()
    // Offset: 0x2AC21C0
    void RenderFar();
    // protected System.Void LateUpdate()
    // Offset: 0x2AC223C
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x2AC2290
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlaybackRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlaybackRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlaybackRenderer*, creationType>()));
    }
  }; // PlaybackRenderer
  #pragma pack(pop)
  static check_size<sizeof(PlaybackRenderer), 88 + sizeof(UnityEngine::RenderTexture*)> __GlobalNamespace_PlaybackRendererSizeCheck;
  static_assert(sizeof(PlaybackRenderer) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::get_haveForegroundTexture
// Il2CppName: get_haveForegroundTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::get_haveForegroundTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "get_haveForegroundTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::get_foregroundTexture
// Il2CppName: get_foregroundTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::get_foregroundTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "get_foregroundTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::get_backgroundTexture
// Il2CppName: get_backgroundTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::get_backgroundTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "get_backgroundTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::add_texturesReadyEvent
// Il2CppName: add_texturesReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(System::Action*)>(&GlobalNamespace::PlaybackRenderer::add_texturesReadyEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "add_texturesReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::remove_texturesReadyEvent
// Il2CppName: remove_texturesReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(System::Action*)>(&GlobalNamespace::PlaybackRenderer::remove_texturesReadyEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "remove_texturesReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(UnityEngine::Camera*, UnityEngine::Camera*, GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*, UnityEngine::LayerMask, int, int, bool)>(&GlobalNamespace::PlaybackRenderer::Setup)> {
  static const MethodInfo* get() {
    static auto* hmdCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraCalibration = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/ExternalCameraCalibration")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* textureWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textureHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* needForegroundTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmdCamera, camera, cameraCalibration, layerMask, textureWidth, textureHeight, needForegroundTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::CreateClipQuad
// Il2CppName: CreateClipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::CreateClipQuad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "CreateClipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::InitCamera
// Il2CppName: InitCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(UnityEngine::Camera*, GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*, UnityEngine::LayerMask)>(&GlobalNamespace::PlaybackRenderer::InitCamera)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraCalibration = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/ExternalCameraCalibration")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "InitCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cameraCalibration, layerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::CreateTextures
// Il2CppName: CreateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(int, int, bool)>(&GlobalNamespace::PlaybackRenderer::CreateTextures)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* needForegroundTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "CreateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, needForegroundTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::CreateTexture
// Il2CppName: CreateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (*)(int, int)>(&GlobalNamespace::PlaybackRenderer::CreateTexture)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "CreateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::GetDistanceToHMD
// Il2CppName: GetDistanceToHMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::GetDistanceToHMD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "GetDistanceToHMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::OrientClipQuad
// Il2CppName: OrientClipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::OrientClipQuad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "OrientClipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::RenderNear
// Il2CppName: RenderNear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::RenderNear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "RenderNear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::RenderFar
// Il2CppName: RenderFar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::RenderFar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "RenderFar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
