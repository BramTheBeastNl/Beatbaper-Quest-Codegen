// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HMCache`2<K, V>
  template<typename K, typename V>
  class HMCache_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::HMCache_2, "", "HMCache`2");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: HMCache`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename K, typename V>
  class HMCache_2 : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Action`1<V> itemWillBeRemovedFromCacheEvent
    // Size: 0x8
    // Offset: 0x0
    System::Action_1<V>* itemWillBeRemovedFromCacheEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<V>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<K,V> _cache
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<K, V>* cache;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<K, V>*) == 0x8);
    // private System.Collections.Generic.Queue`1<K> _addedElements
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::Queue_1<K>* addedElements;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Queue_1<K>*) == 0x8);
    // private System.Int32 _maxNumberElements
    // Size: 0x4
    // Offset: 0x0
    int maxNumberElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<V> itemWillBeRemovedFromCacheEvent
    System::Action_1<V>*& dyn_itemWillBeRemovedFromCacheEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::dyn_itemWillBeRemovedFromCacheEvent");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "itemWillBeRemovedFromCacheEvent"))->offset;
      return *reinterpret_cast<System::Action_1<V>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Dictionary`2<K,V> _cache
    System::Collections::Generic::Dictionary_2<K, V>*& dyn__cache() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::dyn__cache");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cache"))->offset;
      return *reinterpret_cast<System::Collections::Generic::Dictionary_2<K, V>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Queue`1<K> _addedElements
    System::Collections::Generic::Queue_1<K>*& dyn__addedElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::dyn__addedElements");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_addedElements"))->offset;
      return *reinterpret_cast<System::Collections::Generic::Queue_1<K>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _maxNumberElements
    int& dyn__maxNumberElements() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::dyn__maxNumberElements");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_maxNumberElements"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void add_itemWillBeRemovedFromCacheEvent(System.Action`1<V> value)
    // Offset: 0xFFFFFFFF
    void add_itemWillBeRemovedFromCacheEvent(System::Action_1<V>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::add_itemWillBeRemovedFromCacheEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_itemWillBeRemovedFromCacheEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_itemWillBeRemovedFromCacheEvent(System.Action`1<V> value)
    // Offset: 0xFFFFFFFF
    void remove_itemWillBeRemovedFromCacheEvent(System::Action_1<V>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::remove_itemWillBeRemovedFromCacheEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_itemWillBeRemovedFromCacheEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Int32 maxNumberElements)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HMCache_2<K, V>* New_ctor(int maxNumberElements) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HMCache_2<K, V>*, creationType>(maxNumberElements)));
    }
    // public System.Boolean IsInCache(K key)
    // Offset: 0xFFFFFFFF
    bool IsInCache(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::IsInCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key);
    }
    // public System.Void UpdateOrderInCache(K key)
    // Offset: 0xFFFFFFFF
    void UpdateOrderInCache(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::UpdateOrderInCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateOrderInCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key);
    }
    // public V GetFromCache(K key)
    // Offset: 0xFFFFFFFF
    V GetFromCache(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::GetFromCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFromCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodThrow<V, false>(this, ___internal__method, key);
    }
    // public System.Void PutToCache(K key, V value)
    // Offset: 0xFFFFFFFF
    void PutToCache(K key, V value) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::PutToCache");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PutToCache", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMCache_2::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
  }; // HMCache`2
  // Could not write size check! Type: HMCache`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
