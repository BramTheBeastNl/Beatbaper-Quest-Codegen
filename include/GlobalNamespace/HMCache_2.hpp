// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: HMCache`2
  template<typename K, typename V>
  class HMCache_2 : public ::Il2CppObject {
    public:
    // private System.Collections.Generic.Dictionary`2<K,V> _cache
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<K, V>* cache;
    // private System.Collections.Generic.Queue`1<K> _addedElements
    // Offset: 0x0
    System::Collections::Generic::Queue_1<K>* addedElements;
    // private System.Int32 _maxNumberElements
    // Offset: 0x0
    int maxNumberElements;
    // public System.Void .ctor(System.Int32 maxNumberElements)
    // Offset: 0xFFFFFFFF
    static HMCache_2<K, V>* New_ctor(int maxNumberElements) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HMCache_2").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HMCache_2<K, V>*>(maxNumberElements)));
    }
    // public System.Boolean IsInCache(K key)
    // Offset: 0xFFFFFFFF
    bool IsInCache(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HMCache_2").WithContext("IsInCache");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsInCache", {}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key);
    }
    // public V GetFromCache(K key)
    // Offset: 0xFFFFFFFF
    V GetFromCache(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HMCache_2").WithContext("GetFromCache");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<V>(), "GetFromCache", {}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<V, false>(this, ___internal__method, key);
    }
    // public System.Void PutToCache(K key, V value)
    // Offset: 0xFFFFFFFF
    void PutToCache(K key, V value) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HMCache_2").WithContext("PutToCache");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "PutToCache", {}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("HMCache_2").WithContext("Clear");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Clear", {}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
  }; // HMCache`2
  // Could not write size check! Type: HMCache`2 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::HMCache_2, "", "HMCache`2");
#pragma pack(pop)
