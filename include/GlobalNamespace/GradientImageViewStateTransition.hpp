// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseStateTransition`1
#include "GlobalNamespace/BaseStateTransition_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ImageView
  class ImageView;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GradientTransitionSO
  class GradientTransitionSO;
  // Forward declaring type: BaseTransitionSO
  class BaseTransitionSO;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: ColorTween
  class ColorTween;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: GradientImageViewStateTransition
  // [RequireComponent] Offset: E110D4
  class GradientImageViewStateTransition : public GlobalNamespace::BaseStateTransition_1<HMUI::ImageView*> {
    public:
    // [SpaceAttribute] Offset: 0xE21E6C
    // private GradientTransitionSO _transition
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::GradientTransitionSO* transition;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GradientTransitionSO*) == 0x8);
    // private Tweening.ColorTween _colorTweenA
    // Size: 0x8
    // Offset: 0x30
    Tweening::ColorTween* colorTweenA;
    // Field size check
    static_assert(sizeof(Tweening::ColorTween*) == 0x8);
    // private Tweening.ColorTween _colorTweenB
    // Size: 0x8
    // Offset: 0x38
    Tweening::ColorTween* colorTweenB;
    // Field size check
    static_assert(sizeof(Tweening::ColorTween*) == 0x8);
    // Creating value type constructor for type: GradientImageViewStateTransition
    GradientImageViewStateTransition(GlobalNamespace::GradientTransitionSO* transition_ = {}, Tweening::ColorTween* colorTweenA_ = {}, Tweening::ColorTween* colorTweenB_ = {}) noexcept : transition{transition_}, colorTweenA{colorTweenA_}, colorTweenB{colorTweenB_} {}
    // private System.Void StartTweens(UnityEngine.Color endColor1, UnityEngine.Color endColor2)
    // Offset: 0x104A260
    void StartTweens(UnityEngine::Color endColor1, UnityEngine::Color endColor2);
    // private System.Void StartTween(UnityEngine.Color startColor, UnityEngine.Color endColor, System.Action`1<UnityEngine.Color> tweenAction, System.Action onCompleteAction, ref Tweening.ColorTween colorTween)
    // Offset: 0x104AB10
    void StartTween(UnityEngine::Color startColor, UnityEngine::Color endColor, System::Action_1<UnityEngine::Color>* tweenAction, System::Action* onCompleteAction, Tweening::ColorTween*& colorTween);
    // private System.Void SetColors(UnityEngine.Color startColor, UnityEngine.Color endColor)
    // Offset: 0x104A7E8
    void SetColors(UnityEngine::Color startColor, UnityEngine::Color endColor);
    // private System.Void <StartTweens>g__Color1CompleteAction|17_0()
    // Offset: 0x104AD38
    void $StartTweens$g__Color1CompleteAction_17_0();
    // private System.Void <StartTweens>g__Color2CompleteAction|17_1()
    // Offset: 0x104ADC4
    void $StartTweens$g__Color2CompleteAction_17_1();
    // private System.Void <StartTweens>b__17_2(UnityEngine.Color color)
    // Offset: 0x104AE50
    void $StartTweens$b__17_2(UnityEngine::Color color);
    // private System.Void <StartTweens>b__17_3(UnityEngine.Color color)
    // Offset: 0x104AE6C
    void $StartTweens$b__17_3(UnityEngine::Color color);
    // protected override BaseTransitionSO get_transition()
    // Offset: 0x104A1B4
    // Implemented from: BaseStateTransition
    // Base method: BaseTransitionSO BaseStateTransition::get_transition()
    GlobalNamespace::BaseTransitionSO* get_transition();
    // protected override System.Void TransitionToNormalState()
    // Offset: 0x104A1BC
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToNormalState()
    void TransitionToNormalState();
    // protected override System.Void TransitionToHighlightedState()
    // Offset: 0x104A428
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToHighlightedState()
    void TransitionToHighlightedState();
    // protected override System.Void TransitionToPressedState()
    // Offset: 0x104A4CC
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToPressedState()
    void TransitionToPressedState();
    // protected override System.Void TransitionToDisabledState()
    // Offset: 0x104A570
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToDisabledState()
    void TransitionToDisabledState();
    // protected override System.Void TransitionToSelectedState()
    // Offset: 0x104A614
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToSelectedState()
    void TransitionToSelectedState();
    // protected override System.Void TransitionToSelectedAndHighlightedState()
    // Offset: 0x104A6B8
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::TransitionToSelectedAndHighlightedState()
    void TransitionToSelectedAndHighlightedState();
    // protected override System.Void SetNormalState()
    // Offset: 0x104A75C
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetNormalState()
    void SetNormalState();
    // protected override System.Void SetHighlightedState()
    // Offset: 0x104A854
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetHighlightedState()
    void SetHighlightedState();
    // protected override System.Void SetPressedState()
    // Offset: 0x104A8E0
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetPressedState()
    void SetPressedState();
    // protected override System.Void SetDisabledState()
    // Offset: 0x104A96C
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetDisabledState()
    void SetDisabledState();
    // protected override System.Void SetSelectedState()
    // Offset: 0x104A9F8
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetSelectedState()
    void SetSelectedState();
    // protected override System.Void SetSelectedAndHighlightedState()
    // Offset: 0x104AA84
    // Implemented from: BaseStateTransition
    // Base method: System.Void BaseStateTransition::SetSelectedAndHighlightedState()
    void SetSelectedAndHighlightedState();
    // public System.Void .ctor()
    // Offset: 0x104ACE8
    // Implemented from: BaseStateTransition`1
    // Base method: System.Void BaseStateTransition_1::.ctor()
    // Base method: System.Void BaseStateTransition::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GradientImageViewStateTransition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GradientImageViewStateTransition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GradientImageViewStateTransition*, creationType>()));
    }
  }; // GradientImageViewStateTransition
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GradientImageViewStateTransition*, "", "GradientImageViewStateTransition");
