// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IStateTable`2
#include "GlobalNamespace/IStateTable_2.hpp"
// Including type: PoseSerializable
#include "GlobalNamespace/PoseSerializable.hpp"
// Including type: IEquatableByReference`1
#include "GlobalNamespace/IEquatableByReference_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: NodePose because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NodePoseSyncState
  struct NodePoseSyncState : public System::ValueType, public GlobalNamespace::IStateTable_2<GlobalNamespace::NodePoseSyncState::NodePose, GlobalNamespace::PoseSerializable>, public LiteNetLib::Utils::INetSerializable, public GlobalNamespace::IEquatableByReference_1<GlobalNamespace::NodePoseSyncState> {
    public:
    // Nested type: GlobalNamespace::NodePoseSyncState::NodePose
    struct NodePose;
    // Autogenerated type: NodePoseSyncState/NodePose
    struct NodePose : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: NodePose
      constexpr NodePose(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NodePoseSyncState/NodePose Head
      static constexpr const int Head = 0;
      // Get static field: static public NodePoseSyncState/NodePose Head
      static GlobalNamespace::NodePoseSyncState::NodePose _get_Head();
      // Set static field: static public NodePoseSyncState/NodePose Head
      static void _set_Head(GlobalNamespace::NodePoseSyncState::NodePose value);
      // static field const value: static public NodePoseSyncState/NodePose LeftController
      static constexpr const int LeftController = 1;
      // Get static field: static public NodePoseSyncState/NodePose LeftController
      static GlobalNamespace::NodePoseSyncState::NodePose _get_LeftController();
      // Set static field: static public NodePoseSyncState/NodePose LeftController
      static void _set_LeftController(GlobalNamespace::NodePoseSyncState::NodePose value);
      // static field const value: static public NodePoseSyncState/NodePose RightController
      static constexpr const int RightController = 2;
      // Get static field: static public NodePoseSyncState/NodePose RightController
      static GlobalNamespace::NodePoseSyncState::NodePose _get_RightController();
      // Set static field: static public NodePoseSyncState/NodePose RightController
      static void _set_RightController(GlobalNamespace::NodePoseSyncState::NodePose value);
      // static field const value: static public NodePoseSyncState/NodePose Count
      static constexpr const int Count = 3;
      // Get static field: static public NodePoseSyncState/NodePose Count
      static GlobalNamespace::NodePoseSyncState::NodePose _get_Count();
      // Set static field: static public NodePoseSyncState/NodePose Count
      static void _set_Count(GlobalNamespace::NodePoseSyncState::NodePose value);
    }; // NodePoseSyncState/NodePose
    // private PoseSerializable _head
    // Offset: 0x0
    GlobalNamespace::PoseSerializable head;
    // private PoseSerializable _leftController
    // Offset: 0x1C
    GlobalNamespace::PoseSerializable leftController;
    // private PoseSerializable _rightController
    // Offset: 0x38
    GlobalNamespace::PoseSerializable rightController;
    // Creating value type constructor for type: NodePoseSyncState
    constexpr NodePoseSyncState(GlobalNamespace::PoseSerializable head_ = {}, GlobalNamespace::PoseSerializable leftController_ = {}, GlobalNamespace::PoseSerializable rightController_ = {}) noexcept : head{head_}, leftController{leftController_}, rightController{rightController_} {}
    // static field const value: static private System.Int32 kFloatSize
    static constexpr const int kFloatSize = 4;
    // Get static field: static private System.Int32 kFloatSize
    static int _get_kFloatSize();
    // Set static field: static private System.Int32 kFloatSize
    static void _set_kFloatSize(int value);
    // static field const value: static private System.Int32 kPoseSize
    static constexpr const int kPoseSize = 28;
    // Get static field: static private System.Int32 kPoseSize
    static int _get_kPoseSize();
    // Set static field: static private System.Int32 kPoseSize
    static void _set_kPoseSize(int value);
    // public System.Boolean Equals(ref NodePoseSyncState other)
    // Offset: 0xDA1294
    bool Equals(GlobalNamespace::NodePoseSyncState& other);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xDA11C4
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xDA11CC
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Void SetState(NodePoseSyncState/NodePose nodePose, PoseSerializable pose)
    // Offset: 0xDA11D4
    // Implemented from: IStateTable`2
    // Base method: System.Void IStateTable_2::SetState(NodePoseSyncState/NodePose nodePose, PoseSerializable pose)
    void SetState(GlobalNamespace::NodePoseSyncState::NodePose nodePose, GlobalNamespace::PoseSerializable pose);
    // public PoseSerializable GetState(NodePoseSyncState/NodePose nodePose)
    // Offset: 0xDA1240
    // Implemented from: IStateTable`2
    // Base method: TState IStateTable_2::GetState(NodePoseSyncState/NodePose nodePose)
    GlobalNamespace::PoseSerializable GetState(GlobalNamespace::NodePoseSyncState::NodePose nodePose);
  }; // NodePoseSyncState
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NodePoseSyncState, "", "NodePoseSyncState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NodePoseSyncState::NodePose, "", "NodePoseSyncState/NodePose");
#pragma pack(pop)
