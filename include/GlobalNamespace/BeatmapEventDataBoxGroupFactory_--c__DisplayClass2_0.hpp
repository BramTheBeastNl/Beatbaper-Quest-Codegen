// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapEventDataBoxGroupFactory
#include "GlobalNamespace/BeatmapEventDataBoxGroupFactory.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBoxGroupFactory::$$c__DisplayClass2_0, "", "BeatmapEventDataBoxGroupFactory/<>c__DisplayClass2_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataBoxGroupFactory/<>c__DisplayClass2_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct BeatmapEventDataBoxGroupFactory::$$c__DisplayClass2_0/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 numberOfElements
    // Size: 0x4
    // Offset: 0x0
    int numberOfElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: $$c__DisplayClass2_0
    constexpr $$c__DisplayClass2_0(int numberOfElements_ = {}) noexcept : numberOfElements{numberOfElements_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return numberOfElements;
    }
    // Get instance field reference: public System.Int32 numberOfElements
    [[deprecated("Use field access instead!")]] int& dyn_numberOfElements();
  }; // BeatmapEventDataBoxGroupFactory/<>c__DisplayClass2_0
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventDataBoxGroupFactory::$$c__DisplayClass2_0), 0 + sizeof(int)> __GlobalNamespace_BeatmapEventDataBoxGroupFactory_$$c__DisplayClass2_0SizeCheck;
  static_assert(sizeof(BeatmapEventDataBoxGroupFactory::$$c__DisplayClass2_0) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
