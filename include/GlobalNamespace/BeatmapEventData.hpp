// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventData
  class BeatmapEventData : public ::Il2CppObject {
    public:
    // public readonly BeatmapEventType type
    // Size: 0x4
    // Offset: 0x10
    GlobalNamespace::BeatmapEventType type;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventType) == 0x4);
    // public readonly System.Single time
    // Size: 0x4
    // Offset: 0x14
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Int32 value
    // Size: 0x4
    // Offset: 0x18
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: BeatmapEventData
    BeatmapEventData(GlobalNamespace::BeatmapEventType type_ = {}, float time_ = {}, int value_ = {}) noexcept : type{type_}, time{time_}, value{value_} {}
    // public System.Void .ctor(System.Single time, BeatmapEventType type, System.Int32 value)
    // Offset: 0x23DF878
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventData* New_ctor(float time, GlobalNamespace::BeatmapEventType type, int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventData*, creationType>(time, type, value)));
    }
  }; // BeatmapEventData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventData), 24 + sizeof(int)> __GlobalNamespace_BeatmapEventDataSizeCheck;
  static_assert(sizeof(BeatmapEventData) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapEventData*, "", "BeatmapEventData");
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)(float, GlobalNamespace::BeatmapEventType, int)>(&GlobalNamespace::BeatmapEventData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)(float, GlobalNamespace::BeatmapEventType, int)>(&GlobalNamespace::BeatmapEventData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventType>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
