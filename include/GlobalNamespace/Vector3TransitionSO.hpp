// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Vector3TransitionSO
  class Vector3TransitionSO : public GlobalNamespace::BaseTransitionSO {
    public:
    // private UnityEngine.Vector3 _normalState
    // Size: 0xC
    // Offset: 0x20
    UnityEngine::Vector3 normalState;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _highlightedState
    // Size: 0xC
    // Offset: 0x2C
    UnityEngine::Vector3 highlightedState;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _pressedState
    // Size: 0xC
    // Offset: 0x38
    UnityEngine::Vector3 pressedState;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _disabledState
    // Size: 0xC
    // Offset: 0x44
    UnityEngine::Vector3 disabledState;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _selectedState
    // Size: 0xC
    // Offset: 0x50
    UnityEngine::Vector3 selectedState;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _selectedAndHighlightedState
    // Size: 0xC
    // Offset: 0x5C
    UnityEngine::Vector3 selectedAndHighlightedState;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: Vector3TransitionSO
    Vector3TransitionSO(UnityEngine::Vector3 normalState_ = {}, UnityEngine::Vector3 highlightedState_ = {}, UnityEngine::Vector3 pressedState_ = {}, UnityEngine::Vector3 disabledState_ = {}, UnityEngine::Vector3 selectedState_ = {}, UnityEngine::Vector3 selectedAndHighlightedState_ = {}) noexcept : normalState{normalState_}, highlightedState{highlightedState_}, pressedState{pressedState_}, disabledState{disabledState_}, selectedState{selectedState_}, selectedAndHighlightedState{selectedAndHighlightedState_} {}
    // public UnityEngine.Vector3 get_normalState()
    // Offset: 0x1DB03D8
    UnityEngine::Vector3 get_normalState();
    // public UnityEngine.Vector3 get_highlightedState()
    // Offset: 0x1DB03E4
    UnityEngine::Vector3 get_highlightedState();
    // public UnityEngine.Vector3 get_pressedState()
    // Offset: 0x1DB03F0
    UnityEngine::Vector3 get_pressedState();
    // public UnityEngine.Vector3 get_disabledState()
    // Offset: 0x1DB03FC
    UnityEngine::Vector3 get_disabledState();
    // public UnityEngine.Vector3 get_selectedState()
    // Offset: 0x1DB0408
    UnityEngine::Vector3 get_selectedState();
    // public UnityEngine.Vector3 get_selectedAndHighlightedState()
    // Offset: 0x1DB0414
    UnityEngine::Vector3 get_selectedAndHighlightedState();
    // public System.Void .ctor()
    // Offset: 0x1DB0420
    // Implemented from: BaseTransitionSO
    // Base method: System.Void BaseTransitionSO::.ctor()
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vector3TransitionSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector3TransitionSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vector3TransitionSO*, creationType>()));
    }
  }; // Vector3TransitionSO
  #pragma pack(pop)
  static check_size<sizeof(Vector3TransitionSO), 92 + sizeof(UnityEngine::Vector3)> __GlobalNamespace_Vector3TransitionSOSizeCheck;
  static_assert(sizeof(Vector3TransitionSO) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::Vector3TransitionSO*, "", "Vector3TransitionSO");
// Writing MetadataGetter for method: Vector3TransitionSO::get_normalState
// Il2CppName: get_normalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_normalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_normalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_highlightedState
// Il2CppName: get_highlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_highlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_highlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_pressedState
// Il2CppName: get_pressedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_pressedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_pressedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_disabledState
// Il2CppName: get_disabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_disabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_disabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_selectedState
// Il2CppName: get_selectedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_selectedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_selectedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::get_selectedAndHighlightedState
// Il2CppName: get_selectedAndHighlightedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3TransitionSO::*)()>(&Vector3TransitionSO::get_selectedAndHighlightedState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), "get_selectedAndHighlightedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3TransitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3TransitionSO::*)()>(&Vector3TransitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3TransitionSO::*)()>(&Vector3TransitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3TransitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
