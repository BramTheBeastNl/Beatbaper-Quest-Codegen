// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnControllerPlayerHeightSetter
  class BeatmapObjectSpawnControllerPlayerHeightSetter;
  // Forward declaring type: PlayerHeightDetector
  class PlayerHeightDetector;
  // Forward declaring type: EffectPoolsManualInstaller
  class EffectPoolsManualInstaller;
  // Forward declaring type: TutorialSceneSetupData
  class TutorialSceneSetupData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TutorialInstaller
  class TutorialInstaller;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::TutorialInstaller);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TutorialInstaller*, "", "TutorialInstaller");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: TutorialInstaller
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialInstaller : public Zenject::MonoInstaller {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private System.Single _songBPM
    // Size: 0x4
    // Offset: 0x28
    float songBPM;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: songBPM and: beatmapObjectSpawnControllerPlayerHeightSetterPrefab
    char __padding1[0x4] = {};
    // [SpaceAttribute] Offset: 0xF413B0
    // private BeatmapObjectSpawnControllerPlayerHeightSetter _beatmapObjectSpawnControllerPlayerHeightSetterPrefab
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter* beatmapObjectSpawnControllerPlayerHeightSetterPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter*) == 0x8);
    // private PlayerHeightDetector _playerHeightDetectorPrefab
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::PlayerHeightDetector* playerHeightDetectorPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeightDetector*) == 0x8);
    // private EffectPoolsManualInstaller _effectPoolsManualInstaller
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::EffectPoolsManualInstaller* effectPoolsManualInstaller;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EffectPoolsManualInstaller*) == 0x8);
    // [InjectAttribute] Offset: 0xF41408
    // private readonly TutorialSceneSetupData _sceneSetupData
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::TutorialSceneSetupData* sceneSetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::TutorialSceneSetupData*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.AudioClip _audioClip
    UnityEngine::AudioClip*& dyn__audioClip();
    // Get instance field reference: private System.Single _songBPM
    float& dyn__songBPM();
    // Get instance field reference: private BeatmapObjectSpawnControllerPlayerHeightSetter _beatmapObjectSpawnControllerPlayerHeightSetterPrefab
    GlobalNamespace::BeatmapObjectSpawnControllerPlayerHeightSetter*& dyn__beatmapObjectSpawnControllerPlayerHeightSetterPrefab();
    // Get instance field reference: private PlayerHeightDetector _playerHeightDetectorPrefab
    GlobalNamespace::PlayerHeightDetector*& dyn__playerHeightDetectorPrefab();
    // Get instance field reference: private EffectPoolsManualInstaller _effectPoolsManualInstaller
    GlobalNamespace::EffectPoolsManualInstaller*& dyn__effectPoolsManualInstaller();
    // Get instance field reference: private readonly TutorialSceneSetupData _sceneSetupData
    GlobalNamespace::TutorialSceneSetupData*& dyn__sceneSetupData();
    // public System.Void .ctor()
    // Offset: 0x1208F90
    // Implemented from: Zenject.MonoInstaller
    // Base method: System.Void MonoInstaller::.ctor()
    // Base method: System.Void MonoInstallerBase::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialInstaller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialInstaller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialInstaller*, creationType>()));
    }
    // public override System.Void InstallBindings()
    // Offset: 0x1208688
    // Implemented from: Zenject.MonoInstallerBase
    // Base method: System.Void MonoInstallerBase::InstallBindings()
    void InstallBindings();
  }; // TutorialInstaller
  #pragma pack(pop)
  static check_size<sizeof(TutorialInstaller), 72 + sizeof(GlobalNamespace::TutorialSceneSetupData*)> __GlobalNamespace_TutorialInstallerSizeCheck;
  static_assert(sizeof(TutorialInstaller) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TutorialInstaller::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TutorialInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TutorialInstaller::*)()>(&GlobalNamespace::TutorialInstaller::InstallBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TutorialInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
