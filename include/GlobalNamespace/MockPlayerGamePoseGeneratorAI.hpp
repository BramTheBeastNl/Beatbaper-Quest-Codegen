// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MockPlayerGamePoseGenerator
#include "GlobalNamespace/MockPlayerGamePoseGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMockPlayerScoreCalculator
  class IMockPlayerScoreCalculator;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: NoteCutDirection
  struct NoteCutDirection;
  // Forward declaring type: MockNoteData
  class MockNoteData;
  // Forward declaring type: MockObstacleData
  class MockObstacleData;
  // Forward declaring type: MockBeatmapData
  class MockBeatmapData;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayerGamePoseGeneratorAI
  class MockPlayerGamePoseGeneratorAI : public GlobalNamespace::MockPlayerGamePoseGenerator {
    public:
    // Nested type: GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__3
    struct $SendPoses$d__3;
    // private readonly IMockPlayerScoreCalculator _scoreCalculator
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::IMockPlayerScoreCalculator* scoreCalculator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMockPlayerScoreCalculator*) == 0x8);
    // private System.Int32 _lastKnowScore
    // Size: 0x4
    // Offset: 0x40
    int lastKnowScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: MockPlayerGamePoseGeneratorAI
    MockPlayerGamePoseGeneratorAI(GlobalNamespace::IMockPlayerScoreCalculator* scoreCalculator_ = {}, int lastKnowScore_ = {}) noexcept : scoreCalculator{scoreCalculator_}, lastKnowScore{lastKnowScore_} {}
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager, IGameplayRpcManager gameplayRpcManager, IMockPlayerScoreCalculator scoreCalculator, System.Boolean leftHanded)
    // Offset: 0x23B5810
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayerGamePoseGeneratorAI* New_ctor(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::IGameplayRpcManager* gameplayRpcManager, GlobalNamespace::IMockPlayerScoreCalculator* scoreCalculator, bool leftHanded) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayerGamePoseGeneratorAI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayerGamePoseGeneratorAI*, creationType>(multiplayerSessionManager, gameplayRpcManager, scoreCalculator, leftHanded)));
    }
    // static private UnityEngine.Vector3 GetCutDirection(NoteCutDirection cutDirection)
    // Offset: 0x23B5928
    static UnityEngine::Vector3 GetCutDirection(GlobalNamespace::NoteCutDirection cutDirection);
    // static private UnityEngine.Vector3 GetNotePosition(System.Int32 lineCount, MockNoteData noteData)
    // Offset: 0x23B5B34
    static UnityEngine::Vector3 GetNotePosition(int lineCount, GlobalNamespace::MockNoteData* noteData);
    // static private UnityEngine.Vector3 Blerp(UnityEngine.Vector3 prevStart, UnityEngine.Vector3 prevEnd, UnityEngine.Vector3 currStart, UnityEngine.Vector3 currEnd, System.Single t)
    // Offset: 0x23B5BC4
    static UnityEngine::Vector3 Blerp(UnityEngine::Vector3 prevStart, UnityEngine::Vector3 prevEnd, UnityEngine::Vector3 currStart, UnityEngine::Vector3 currEnd, float t);
    // private UnityEngine.Pose ProcessNotes(MockNoteData[] notes, UnityEngine.Vector3 handDirection, ref System.Int32 noteIndex, ref System.Int32 prevHitScore, ref System.Int32 nextHitScore, MockNoteData[] bombs, ref System.Int32 bombIndex, System.Int32 lineCount, System.Single songTime, out System.Boolean wasHitOrMiss)
    // Offset: 0x23B5D9C
    UnityEngine::Pose ProcessNotes(::Array<GlobalNamespace::MockNoteData*>* notes, UnityEngine::Vector3 handDirection, int& noteIndex, int& prevHitScore, int& nextHitScore, ::Array<GlobalNamespace::MockNoteData*>* bombs, int& bombIndex, int lineCount, float songTime, bool& wasHitOrMiss);
    // private UnityEngine.Pose ProcessObstacles(MockObstacleData[] obstacles, ref System.Int32 obstacleIndex, System.Int32 lineCount, UnityEngine.Pose prevHeadPose, UnityEngine.Pose leftHandPose, UnityEngine.Pose rightHandPose, System.Single songTime)
    // Offset: 0x23B7080
    UnityEngine::Pose ProcessObstacles(::Array<GlobalNamespace::MockObstacleData*>* obstacles, int& obstacleIndex, int lineCount, UnityEngine::Pose prevHeadPose, UnityEngine::Pose leftHandPose, UnityEngine::Pose rightHandPose, float songTime);
    // private System.Void UpdateScore(ref System.Int32 currentScore, ref System.Int32 currentCombo, ref System.Int32 currentMultiplier, System.Int32 hitScore, System.Int32 lineCount, UnityEngine.Pose lastPose, UnityEngine.Pose currentPose, System.Single lastSongTime, System.Single songTime, MockNoteData noteData, MockNoteData nextNoteData)
    // Offset: 0x23B7430
    void UpdateScore(int& currentScore, int& currentCombo, int& currentMultiplier, int hitScore, int lineCount, UnityEngine::Pose lastPose, UnityEngine::Pose currentPose, float lastSongTime, float songTime, GlobalNamespace::MockNoteData* noteData, GlobalNamespace::MockNoteData* nextNoteData);
    // public override System.Void SendPoses(System.Single introStartTime, MockBeatmapData beatmapData, GameplayModifiers gameplayModifiers, System.Threading.CancellationToken cancellationToken, System.Action onSongFinished)
    // Offset: 0x23B583C
    // Implemented from: MockPlayerGamePoseGenerator
    // Base method: System.Void MockPlayerGamePoseGenerator::SendPoses(System.Single introStartTime, MockBeatmapData beatmapData, GameplayModifiers gameplayModifiers, System.Threading.CancellationToken cancellationToken, System.Action onSongFinished)
    void SendPoses(float introStartTime, GlobalNamespace::MockBeatmapData* beatmapData, GlobalNamespace::GameplayModifiers* gameplayModifiers, System::Threading::CancellationToken cancellationToken, System::Action* onSongFinished);
    // public override System.Void SimulateFail()
    // Offset: 0x23B7B7C
    // Implemented from: MockPlayerGamePoseGenerator
    // Base method: System.Void MockPlayerGamePoseGenerator::SimulateFail()
    void SimulateFail();
  }; // MockPlayerGamePoseGeneratorAI
  #pragma pack(pop)
  static check_size<sizeof(MockPlayerGamePoseGeneratorAI), 64 + sizeof(int)> __GlobalNamespace_MockPlayerGamePoseGeneratorAISizeCheck;
  static_assert(sizeof(MockPlayerGamePoseGeneratorAI) == 0x44);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockPlayerGamePoseGeneratorAI*, "", "MockPlayerGamePoseGeneratorAI");
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::GetCutDirection
// Il2CppName: GetCutDirection
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::GetNotePosition
// Il2CppName: GetNotePosition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::Blerp
// Il2CppName: Blerp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::ProcessNotes
// Il2CppName: ProcessNotes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::ProcessObstacles
// Il2CppName: ProcessObstacles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::UpdateScore
// Il2CppName: UpdateScore
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::SendPoses
// Il2CppName: SendPoses
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::SimulateFail
// Il2CppName: SimulateFail
// Cannot perform method pointer template specialization from operators!
