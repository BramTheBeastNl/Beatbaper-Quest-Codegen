// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/Step
#include "GlobalNamespace/OVRPlugin_Step.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OpenVRController because it is already included!
  // Skipping declaration: Controller because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
  // Forward declaring type: ETrackedDeviceProperty
  struct ETrackedDeviceProperty;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRInput
  class OVRInput : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRInput::Button
    struct Button;
    // Nested type: GlobalNamespace::OVRInput::RawButton
    struct RawButton;
    // Nested type: GlobalNamespace::OVRInput::Touch
    struct Touch;
    // Nested type: GlobalNamespace::OVRInput::RawTouch
    struct RawTouch;
    // Nested type: GlobalNamespace::OVRInput::NearTouch
    struct NearTouch;
    // Nested type: GlobalNamespace::OVRInput::RawNearTouch
    struct RawNearTouch;
    // Nested type: GlobalNamespace::OVRInput::Axis1D
    struct Axis1D;
    // Nested type: GlobalNamespace::OVRInput::RawAxis1D
    struct RawAxis1D;
    // Nested type: GlobalNamespace::OVRInput::Axis2D
    struct Axis2D;
    // Nested type: GlobalNamespace::OVRInput::RawAxis2D
    struct RawAxis2D;
    // Nested type: GlobalNamespace::OVRInput::OpenVRButton
    struct OpenVRButton;
    // Nested type: GlobalNamespace::OVRInput::Controller
    struct Controller;
    // Nested type: GlobalNamespace::OVRInput::Handedness
    struct Handedness;
    // Nested type: GlobalNamespace::OVRInput::OpenVRController
    struct OpenVRController;
    // Nested type: GlobalNamespace::OVRInput::OpenVRControllerDetails
    struct OpenVRControllerDetails;
    // Nested type: GlobalNamespace::OVRInput::HapticInfo
    class HapticInfo;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase
    class OVRControllerBase;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerTouch
    class OVRControllerTouch;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerLTouch
    class OVRControllerLTouch;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRTouch
    class OVRControllerRTouch;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerHands
    class OVRControllerHands;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerLHand
    class OVRControllerLHand;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRHand
    class OVRControllerRHand;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRemote
    class OVRControllerRemote;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerGamepadPC
    class OVRControllerGamepadPC;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerGamepadMac
    class OVRControllerGamepadMac;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerGamepadAndroid
    class OVRControllerGamepadAndroid;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRInput/Controller
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Controller/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Controller
      constexpr Controller(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRInput/Controller None
      static constexpr const int None = 0;
      // Get static field: static public OVRInput/Controller None
      static GlobalNamespace::OVRInput::Controller _get_None();
      // Set static field: static public OVRInput/Controller None
      static void _set_None(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller LTouch
      static constexpr const int LTouch = 1;
      // Get static field: static public OVRInput/Controller LTouch
      static GlobalNamespace::OVRInput::Controller _get_LTouch();
      // Set static field: static public OVRInput/Controller LTouch
      static void _set_LTouch(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller RTouch
      static constexpr const int RTouch = 2;
      // Get static field: static public OVRInput/Controller RTouch
      static GlobalNamespace::OVRInput::Controller _get_RTouch();
      // Set static field: static public OVRInput/Controller RTouch
      static void _set_RTouch(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Touch
      static constexpr const int Touch = 3;
      // Get static field: static public OVRInput/Controller Touch
      static GlobalNamespace::OVRInput::Controller _get_Touch();
      // Set static field: static public OVRInput/Controller Touch
      static void _set_Touch(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Remote
      static constexpr const int Remote = 4;
      // Get static field: static public OVRInput/Controller Remote
      static GlobalNamespace::OVRInput::Controller _get_Remote();
      // Set static field: static public OVRInput/Controller Remote
      static void _set_Remote(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Gamepad
      static constexpr const int Gamepad = 16;
      // Get static field: static public OVRInput/Controller Gamepad
      static GlobalNamespace::OVRInput::Controller _get_Gamepad();
      // Set static field: static public OVRInput/Controller Gamepad
      static void _set_Gamepad(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Hands
      static constexpr const int Hands = 96;
      // Get static field: static public OVRInput/Controller Hands
      static GlobalNamespace::OVRInput::Controller _get_Hands();
      // Set static field: static public OVRInput/Controller Hands
      static void _set_Hands(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller LHand
      static constexpr const int LHand = 32;
      // Get static field: static public OVRInput/Controller LHand
      static GlobalNamespace::OVRInput::Controller _get_LHand();
      // Set static field: static public OVRInput/Controller LHand
      static void _set_LHand(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller RHand
      static constexpr const int RHand = 64;
      // Get static field: static public OVRInput/Controller RHand
      static GlobalNamespace::OVRInput::Controller _get_RHand();
      // Set static field: static public OVRInput/Controller RHand
      static void _set_RHand(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Active
      static constexpr const int Active = -2147483648;
      // Get static field: static public OVRInput/Controller Active
      static GlobalNamespace::OVRInput::Controller _get_Active();
      // Set static field: static public OVRInput/Controller Active
      static void _set_Active(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller All
      static constexpr const int All = -1;
      // Get static field: static public OVRInput/Controller All
      static GlobalNamespace::OVRInput::Controller _get_All();
      // Set static field: static public OVRInput/Controller All
      static void _set_All(GlobalNamespace::OVRInput::Controller value);
    }; // OVRInput/Controller
    #pragma pack(pop)
    static check_size<sizeof(OVRInput::Controller), 0 + sizeof(int)> __GlobalNamespace_OVRInput_ControllerSizeCheck;
    static_assert(sizeof(OVRInput::Controller) == 0x4);
    // Size: 0x8
    #pragma pack(push, 1)
    // Autogenerated type: OVRInput/OpenVRController
    // [FlagsAttribute] Offset: FFFFFFFF
    struct OpenVRController/*, public System::Enum*/ {
      public:
      // public System.UInt64 value__
      // Size: 0x8
      // Offset: 0x0
      uint64_t value;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // Creating value type constructor for type: OpenVRController
      constexpr OpenVRController(uint64_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint64_t
      constexpr operator uint64_t() const noexcept {
        return value;
      }
      // static field const value: static public OVRInput/OpenVRController Unknown
      static constexpr const uint64_t Unknown = 0u;
      // Get static field: static public OVRInput/OpenVRController Unknown
      static GlobalNamespace::OVRInput::OpenVRController _get_Unknown();
      // Set static field: static public OVRInput/OpenVRController Unknown
      static void _set_Unknown(GlobalNamespace::OVRInput::OpenVRController value);
      // static field const value: static public OVRInput/OpenVRController OculusTouch
      static constexpr const uint64_t OculusTouch = 1u;
      // Get static field: static public OVRInput/OpenVRController OculusTouch
      static GlobalNamespace::OVRInput::OpenVRController _get_OculusTouch();
      // Set static field: static public OVRInput/OpenVRController OculusTouch
      static void _set_OculusTouch(GlobalNamespace::OVRInput::OpenVRController value);
      // static field const value: static public OVRInput/OpenVRController ViveController
      static constexpr const uint64_t ViveController = 2u;
      // Get static field: static public OVRInput/OpenVRController ViveController
      static GlobalNamespace::OVRInput::OpenVRController _get_ViveController();
      // Set static field: static public OVRInput/OpenVRController ViveController
      static void _set_ViveController(GlobalNamespace::OVRInput::OpenVRController value);
      // static field const value: static public OVRInput/OpenVRController WindowsMRController
      static constexpr const uint64_t WindowsMRController = 3u;
      // Get static field: static public OVRInput/OpenVRController WindowsMRController
      static GlobalNamespace::OVRInput::OpenVRController _get_WindowsMRController();
      // Set static field: static public OVRInput/OpenVRController WindowsMRController
      static void _set_WindowsMRController(GlobalNamespace::OVRInput::OpenVRController value);
    }; // OVRInput/OpenVRController
    #pragma pack(pop)
    static check_size<sizeof(OVRInput::OpenVRController), 0 + sizeof(uint64_t)> __GlobalNamespace_OVRInput_OpenVRControllerSizeCheck;
    static_assert(sizeof(OVRInput::OpenVRController) == 0x8);
    // Size: 0x68
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRInput/OpenVRControllerDetails
    struct OpenVRControllerDetails/*, public System::ValueType*/ {
      public:
      // public OVR.OpenVR.VRControllerState_t state
      // Size: 0x40
      // Offset: 0x0
      OVR::OpenVR::VRControllerState_t state;
      // Field size check
      static_assert(sizeof(OVR::OpenVR::VRControllerState_t) == 0x40);
      // public OVRInput/OpenVRController controllerType
      // Size: 0x8
      // Offset: 0x40
      GlobalNamespace::OVRInput::OpenVRController controllerType;
      // Field size check
      static_assert(sizeof(GlobalNamespace::OVRInput::OpenVRController) == 0x8);
      // public System.UInt32 deviceID
      // Size: 0x4
      // Offset: 0x48
      uint deviceID;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public UnityEngine.Vector3 localPosition
      // Size: 0xC
      // Offset: 0x4C
      UnityEngine::Vector3 localPosition;
      // Field size check
      static_assert(sizeof(UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion localOrientation
      // Size: 0x10
      // Offset: 0x58
      UnityEngine::Quaternion localOrientation;
      // Field size check
      static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
      // Creating value type constructor for type: OpenVRControllerDetails
      constexpr OpenVRControllerDetails(OVR::OpenVR::VRControllerState_t state_ = {}, GlobalNamespace::OVRInput::OpenVRController controllerType_ = {}, uint deviceID_ = {}, UnityEngine::Vector3 localPosition_ = {}, UnityEngine::Quaternion localOrientation_ = {}) noexcept : state{state_}, controllerType{controllerType_}, deviceID{deviceID_}, localPosition{localPosition_}, localOrientation{localOrientation_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // OVRInput/OpenVRControllerDetails
    #pragma pack(pop)
    static check_size<sizeof(OVRInput::OpenVRControllerDetails), 88 + sizeof(UnityEngine::Quaternion)> __GlobalNamespace_OVRInput_OpenVRControllerDetailsSizeCheck;
    static_assert(sizeof(OVRInput::OpenVRControllerDetails) == 0x68);
    // Creating value type constructor for type: OVRInput
    OVRInput() noexcept {}
    // Get static field: static private readonly System.Single AXIS_AS_BUTTON_THRESHOLD
    static float _get_AXIS_AS_BUTTON_THRESHOLD();
    // Set static field: static private readonly System.Single AXIS_AS_BUTTON_THRESHOLD
    static void _set_AXIS_AS_BUTTON_THRESHOLD(float value);
    // Get static field: static private readonly System.Single AXIS_DEADZONE_THRESHOLD
    static float _get_AXIS_DEADZONE_THRESHOLD();
    // Set static field: static private readonly System.Single AXIS_DEADZONE_THRESHOLD
    static void _set_AXIS_DEADZONE_THRESHOLD(float value);
    // Get static field: static private System.Collections.Generic.List`1<OVRInput/OVRControllerBase> controllers
    static System::Collections::Generic::List_1<GlobalNamespace::OVRInput::OVRControllerBase*>* _get_controllers();
    // Set static field: static private System.Collections.Generic.List`1<OVRInput/OVRControllerBase> controllers
    static void _set_controllers(System::Collections::Generic::List_1<GlobalNamespace::OVRInput::OVRControllerBase*>* value);
    // Get static field: static private OVRInput/Controller activeControllerType
    static GlobalNamespace::OVRInput::Controller _get_activeControllerType();
    // Set static field: static private OVRInput/Controller activeControllerType
    static void _set_activeControllerType(GlobalNamespace::OVRInput::Controller value);
    // Get static field: static private OVRInput/Controller connectedControllerTypes
    static GlobalNamespace::OVRInput::Controller _get_connectedControllerTypes();
    // Set static field: static private OVRInput/Controller connectedControllerTypes
    static void _set_connectedControllerTypes(GlobalNamespace::OVRInput::Controller value);
    // Get static field: static private OVRPlugin/Step stepType
    static GlobalNamespace::OVRPlugin::Step _get_stepType();
    // Set static field: static private OVRPlugin/Step stepType
    static void _set_stepType(GlobalNamespace::OVRPlugin::Step value);
    // Get static field: static private System.Int32 fixedUpdateCount
    static int _get_fixedUpdateCount();
    // Set static field: static private System.Int32 fixedUpdateCount
    static void _set_fixedUpdateCount(int value);
    // Get static field: static private System.Boolean _pluginSupportsActiveController
    static bool _get__pluginSupportsActiveController();
    // Set static field: static private System.Boolean _pluginSupportsActiveController
    static void _set__pluginSupportsActiveController(bool value);
    // Get static field: static private System.Boolean _pluginSupportsActiveControllerCached
    static bool _get__pluginSupportsActiveControllerCached();
    // Set static field: static private System.Boolean _pluginSupportsActiveControllerCached
    static void _set__pluginSupportsActiveControllerCached(bool value);
    // Get static field: static private System.Version _pluginSupportsActiveControllerMinVersion
    static System::Version* _get__pluginSupportsActiveControllerMinVersion();
    // Set static field: static private System.Version _pluginSupportsActiveControllerMinVersion
    static void _set__pluginSupportsActiveControllerMinVersion(System::Version* value);
    // Get static field: static private System.Int32 NUM_HAPTIC_CHANNELS
    static int _get_NUM_HAPTIC_CHANNELS();
    // Set static field: static private System.Int32 NUM_HAPTIC_CHANNELS
    static void _set_NUM_HAPTIC_CHANNELS(int value);
    // Get static field: static private OVRInput/HapticInfo[] hapticInfos
    static ::Array<GlobalNamespace::OVRInput::HapticInfo*>* _get_hapticInfos();
    // Set static field: static private OVRInput/HapticInfo[] hapticInfos
    static void _set_hapticInfos(::Array<GlobalNamespace::OVRInput::HapticInfo*>* value);
    // Get static field: static private System.Single OPENVR_MAX_HAPTIC_AMPLITUDE
    static float _get_OPENVR_MAX_HAPTIC_AMPLITUDE();
    // Set static field: static private System.Single OPENVR_MAX_HAPTIC_AMPLITUDE
    static void _set_OPENVR_MAX_HAPTIC_AMPLITUDE(float value);
    // Get static field: static private System.Single HAPTIC_VIBRATION_DURATION_SECONDS
    static float _get_HAPTIC_VIBRATION_DURATION_SECONDS();
    // Set static field: static private System.Single HAPTIC_VIBRATION_DURATION_SECONDS
    static void _set_HAPTIC_VIBRATION_DURATION_SECONDS(float value);
    // Get static field: static private System.String OPENVR_TOUCH_NAME
    static ::Il2CppString* _get_OPENVR_TOUCH_NAME();
    // Set static field: static private System.String OPENVR_TOUCH_NAME
    static void _set_OPENVR_TOUCH_NAME(::Il2CppString* value);
    // Get static field: static private System.String OPENVR_VIVE_CONTROLLER_NAME
    static ::Il2CppString* _get_OPENVR_VIVE_CONTROLLER_NAME();
    // Set static field: static private System.String OPENVR_VIVE_CONTROLLER_NAME
    static void _set_OPENVR_VIVE_CONTROLLER_NAME(::Il2CppString* value);
    // Get static field: static private System.String OPENVR_WINDOWSMR_CONTROLLER_NAME
    static ::Il2CppString* _get_OPENVR_WINDOWSMR_CONTROLLER_NAME();
    // Set static field: static private System.String OPENVR_WINDOWSMR_CONTROLLER_NAME
    static void _set_OPENVR_WINDOWSMR_CONTROLLER_NAME(::Il2CppString* value);
    // Get static field: static public OVRInput/OpenVRControllerDetails[] openVRControllerDetails
    static ::Array<GlobalNamespace::OVRInput::OpenVRControllerDetails>* _get_openVRControllerDetails();
    // Set static field: static public OVRInput/OpenVRControllerDetails[] openVRControllerDetails
    static void _set_openVRControllerDetails(::Array<GlobalNamespace::OVRInput::OpenVRControllerDetails>* value);
    // static private System.Boolean get_pluginSupportsActiveController()
    // Offset: 0x1514FE0
    static bool get_pluginSupportsActiveController();
    // static private System.Void .cctor()
    // Offset: 0x1515098
    static void _cctor();
    // static public System.Void Update()
    // Offset: 0x15155F8
    static void Update();
    // static public System.Void FixedUpdate()
    // Offset: 0x1516234
    static void FixedUpdate();
    // static public System.Boolean GetControllerOrientationTracked(OVRInput/Controller controllerType)
    // Offset: 0x1516390
    static bool GetControllerOrientationTracked(GlobalNamespace::OVRInput::Controller controllerType);
    // static public System.Boolean GetControllerOrientationValid(OVRInput/Controller controllerType)
    // Offset: 0x151645C
    static bool GetControllerOrientationValid(GlobalNamespace::OVRInput::Controller controllerType);
    // static public System.Boolean GetControllerPositionTracked(OVRInput/Controller controllerType)
    // Offset: 0x1516528
    static bool GetControllerPositionTracked(GlobalNamespace::OVRInput::Controller controllerType);
    // static public System.Boolean GetControllerPositionValid(OVRInput/Controller controllerType)
    // Offset: 0x15165F4
    static bool GetControllerPositionValid(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerPosition(OVRInput/Controller controllerType)
    // Offset: 0x150EC7C
    static UnityEngine::Vector3 GetLocalControllerPosition(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerVelocity(OVRInput/Controller controllerType)
    // Offset: 0x150F444
    static UnityEngine::Vector3 GetLocalControllerVelocity(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerAcceleration(OVRInput/Controller controllerType)
    // Offset: 0x15166C0
    static UnityEngine::Vector3 GetLocalControllerAcceleration(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Quaternion GetLocalControllerRotation(OVRInput/Controller controllerType)
    // Offset: 0x150F064
    static UnityEngine::Quaternion GetLocalControllerRotation(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerAngularVelocity(OVRInput/Controller controllerType)
    // Offset: 0x150F5EC
    static UnityEngine::Vector3 GetLocalControllerAngularVelocity(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerAngularAcceleration(OVRInput/Controller controllerType)
    // Offset: 0x1516864
    static UnityEngine::Vector3 GetLocalControllerAngularAcceleration(GlobalNamespace::OVRInput::Controller controllerType);
    // static public OVRInput/Handedness GetDominantHand()
    // Offset: 0x1516A0C
    static GlobalNamespace::OVRInput::Handedness GetDominantHand();
    // static public System.Boolean Get(OVRInput/Button virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1511B58
    static bool Get(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516144
    static bool Get(GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedButton(OVRInput/Button virtualMask, OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516A6C
    static bool GetResolvedButton(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/Button virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516C2C
    static bool GetDown(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516E1C
    static bool GetDown(GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedButtonDown(OVRInput/Button virtualMask, OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516CA4
    static bool GetResolvedButtonDown(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/Button virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516E94
    static bool GetUp(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517084
    static bool GetUp(GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedButtonUp(OVRInput/Button virtualMask, OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1516F0C
    static bool GetResolvedButtonUp(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/Touch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x15170FC
    static bool Get(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x15161BC
    static bool Get(GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedTouch(OVRInput/Touch virtualMask, OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517174
    static bool GetResolvedTouch(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/Touch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x15172E8
    static bool GetDown(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x15174D8
    static bool GetDown(GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedTouchDown(OVRInput/Touch virtualMask, OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517360
    static bool GetResolvedTouchDown(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/Touch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517550
    static bool GetUp(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517740
    static bool GetUp(GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedTouchUp(OVRInput/Touch virtualMask, OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x15175C8
    static bool GetResolvedTouchUp(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/NearTouch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x15177B8
    static bool Get(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x151798C
    static bool Get(GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedNearTouch(OVRInput/NearTouch virtualMask, OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517830
    static bool GetResolvedNearTouch(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/NearTouch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517A1C
    static bool GetDown(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517C0C
    static bool GetDown(GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedNearTouchDown(OVRInput/NearTouch virtualMask, OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517A94
    static bool GetResolvedNearTouchDown(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/NearTouch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517C84
    static bool GetUp(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517E74
    static bool GetUp(GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedNearTouchUp(OVRInput/NearTouch virtualMask, OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517CFC
    static bool GetResolvedNearTouchUp(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Single Get(OVRInput/Axis1D virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x150DF48
    static float Get(GlobalNamespace::OVRInput::Axis1D virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Single Get(OVRInput/RawAxis1D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1518364
    static float Get(GlobalNamespace::OVRInput::RawAxis1D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Single GetResolvedAxis1D(OVRInput/Axis1D virtualMask, OVRInput/RawAxis1D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x1517EEC
    static float GetResolvedAxis1D(GlobalNamespace::OVRInput::Axis1D virtualMask, GlobalNamespace::OVRInput::RawAxis1D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public UnityEngine.Vector2 Get(OVRInput/Axis2D virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0x1518468
    static UnityEngine::Vector2 Get(GlobalNamespace::OVRInput::Axis2D virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public UnityEngine.Vector2 Get(OVRInput/RawAxis2D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x15188AC
    static UnityEngine::Vector2 Get(GlobalNamespace::OVRInput::RawAxis2D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private UnityEngine.Vector2 GetResolvedAxis2D(OVRInput/Axis2D virtualMask, OVRInput/RawAxis2D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0x15184E0
    static UnityEngine::Vector2 GetResolvedAxis2D(GlobalNamespace::OVRInput::Axis2D virtualMask, GlobalNamespace::OVRInput::RawAxis2D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public OVRInput/Controller GetConnectedControllers()
    // Offset: 0x1518ACC
    static GlobalNamespace::OVRInput::Controller GetConnectedControllers();
    // static public System.Boolean IsControllerConnected(OVRInput/Controller controller)
    // Offset: 0x1518B34
    static bool IsControllerConnected(GlobalNamespace::OVRInput::Controller controller);
    // static public OVRInput/Controller GetActiveController()
    // Offset: 0x1518BA8
    static GlobalNamespace::OVRInput::Controller GetActiveController();
    // static private System.Void StartVibration(System.Single amplitude, System.Single duration, UnityEngine.XR.XRNode controllerNode)
    // Offset: 0x1518C10
    static void StartVibration(float amplitude, float duration, UnityEngine::XR::XRNode controllerNode);
    // static public System.Void SetOpenVRLocalPose(UnityEngine.Vector3 leftPos, UnityEngine.Vector3 rightPos, UnityEngine.Quaternion leftRot, UnityEngine.Quaternion rightRot)
    // Offset: 0x1518DD4
    static void SetOpenVRLocalPose(UnityEngine::Vector3 leftPos, UnityEngine::Vector3 rightPos, UnityEngine::Quaternion leftRot, UnityEngine::Quaternion rightRot);
    // static public System.String GetOpenVRStringProperty(OVR.OpenVR.ETrackedDeviceProperty prop, System.UInt32 deviceId)
    // Offset: 0x1518EFC
    static ::Il2CppString* GetOpenVRStringProperty(OVR::OpenVR::ETrackedDeviceProperty prop, uint deviceId);
    // static private System.Void UpdateXRControllerNodeIds()
    // Offset: 0x1515AFC
    static void UpdateXRControllerNodeIds();
    // static private System.Void UpdateXRControllerHaptics()
    // Offset: 0x1515F34
    static void UpdateXRControllerHaptics();
    // static private System.Void InitHapticInfo()
    // Offset: 0x15154A0
    static void InitHapticInfo();
    // static private System.Void PlayHapticImpulse(System.Single amplitude, UnityEngine.XR.XRNode deviceNode)
    // Offset: 0x1519070
    static void PlayHapticImpulse(float amplitude, UnityEngine::XR::XRNode deviceNode);
    // static private System.Boolean IsValidOpenVRDevice(System.UInt32 deviceId)
    // Offset: 0x1519204
    static bool IsValidOpenVRDevice(uint deviceId);
    // static public System.Void SetControllerVibration(System.Single frequency, System.Single amplitude, OVRInput/Controller controllerMask)
    // Offset: 0x1519210
    static void SetControllerVibration(float frequency, float amplitude, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Byte GetControllerBatteryPercentRemaining(OVRInput/Controller controllerMask)
    // Offset: 0x1519418
    static uint8_t GetControllerBatteryPercentRemaining(GlobalNamespace::OVRInput::Controller controllerMask);
    // static private UnityEngine.Vector2 CalculateAbsMax(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
    // Offset: 0x1518A54
    static UnityEngine::Vector2 CalculateAbsMax(UnityEngine::Vector2 a, UnityEngine::Vector2 b);
    // static private System.Single CalculateAbsMax(System.Single a, System.Single b)
    // Offset: 0x1518444
    static float CalculateAbsMax(float a, float b);
    // static private UnityEngine.Vector2 CalculateDeadzone(UnityEngine.Vector2 a, System.Single deadzone)
    // Offset: 0x151893C
    static UnityEngine::Vector2 CalculateDeadzone(UnityEngine::Vector2 a, float deadzone);
    // static private System.Single CalculateDeadzone(System.Single a, System.Single deadzone)
    // Offset: 0x15183F4
    static float CalculateDeadzone(float a, float deadzone);
    // static private System.Boolean ShouldResolveController(OVRInput/Controller controllerType, OVRInput/Controller controllerMask)
    // Offset: 0x1516BC8
    static bool ShouldResolveController(GlobalNamespace::OVRInput::Controller controllerType, GlobalNamespace::OVRInput::Controller controllerMask);
  }; // OVRInput
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput*, "", "OVRInput");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput::Controller, "", "OVRInput/Controller");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput::OpenVRController, "", "OVRInput/OpenVRController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput::OpenVRControllerDetails, "", "OVRInput/OpenVRControllerDetails");
// Writing includes for template specializations
#include "GlobalNamespace/OVRInput_Button.hpp"
#include "GlobalNamespace/OVRInput_RawButton.hpp"
#include "GlobalNamespace/OVRInput_Touch.hpp"
#include "GlobalNamespace/OVRInput_RawTouch.hpp"
#include "GlobalNamespace/OVRInput_NearTouch.hpp"
#include "GlobalNamespace/OVRInput_RawNearTouch.hpp"
#include "GlobalNamespace/OVRInput_Axis1D.hpp"
#include "GlobalNamespace/OVRInput_RawAxis1D.hpp"
#include "GlobalNamespace/OVRInput_Axis2D.hpp"
#include "GlobalNamespace/OVRInput_RawAxis2D.hpp"
#include "UnityEngine/XR/XRNode.hpp"
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
#include "UnityEngine/Vector2.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::get_pluginSupportsActiveController
// Il2CppName: get_pluginSupportsActiveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRInput::get_pluginSupportsActiveController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "get_pluginSupportsActiveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRInput::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRInput::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRInput::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetControllerOrientationTracked
// Il2CppName: GetControllerOrientationTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetControllerOrientationTracked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetControllerOrientationTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetControllerOrientationValid
// Il2CppName: GetControllerOrientationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetControllerOrientationValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetControllerOrientationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetControllerPositionTracked
// Il2CppName: GetControllerPositionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetControllerPositionTracked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetControllerPositionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetControllerPositionValid
// Il2CppName: GetControllerPositionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetControllerPositionValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetControllerPositionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetLocalControllerPosition
// Il2CppName: GetLocalControllerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetLocalControllerPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetLocalControllerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetLocalControllerVelocity
// Il2CppName: GetLocalControllerVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetLocalControllerVelocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetLocalControllerVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetLocalControllerAcceleration
// Il2CppName: GetLocalControllerAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetLocalControllerAcceleration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetLocalControllerAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetLocalControllerRotation
// Il2CppName: GetLocalControllerRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetLocalControllerRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetLocalControllerRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetLocalControllerAngularVelocity
// Il2CppName: GetLocalControllerAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetLocalControllerAngularVelocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetLocalControllerAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetLocalControllerAngularAcceleration
// Il2CppName: GetLocalControllerAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetLocalControllerAngularAcceleration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetLocalControllerAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDominantHand
// Il2CppName: GetDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRInput::Handedness (*)()>(&GlobalNamespace::OVRInput::GetDominantHand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Button, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Button>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawButton, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawButton>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedButton
// Il2CppName: GetResolvedButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Button, GlobalNamespace::OVRInput::RawButton, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Button>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawButton>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDown
// Il2CppName: GetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Button, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Button>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDown
// Il2CppName: GetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawButton, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawButton>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedButtonDown
// Il2CppName: GetResolvedButtonDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Button, GlobalNamespace::OVRInput::RawButton, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedButtonDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedButtonDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Button>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawButton>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetUp
// Il2CppName: GetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Button, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Button>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetUp
// Il2CppName: GetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawButton, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawButton>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedButtonUp
// Il2CppName: GetResolvedButtonUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Button, GlobalNamespace::OVRInput::RawButton, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedButtonUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedButtonUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Button>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawButton>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Touch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Touch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedTouch
// Il2CppName: GetResolvedTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Touch, GlobalNamespace::OVRInput::RawTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedTouch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Touch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDown
// Il2CppName: GetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Touch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Touch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDown
// Il2CppName: GetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedTouchDown
// Il2CppName: GetResolvedTouchDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Touch, GlobalNamespace::OVRInput::RawTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedTouchDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedTouchDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Touch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetUp
// Il2CppName: GetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Touch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Touch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetUp
// Il2CppName: GetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedTouchUp
// Il2CppName: GetResolvedTouchUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Touch, GlobalNamespace::OVRInput::RawTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedTouchUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedTouchUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Touch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::NearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::NearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawNearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawNearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedNearTouch
// Il2CppName: GetResolvedNearTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::NearTouch, GlobalNamespace::OVRInput::RawNearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedNearTouch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedNearTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::NearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawNearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDown
// Il2CppName: GetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::NearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::NearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetDown
// Il2CppName: GetDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawNearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawNearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedNearTouchDown
// Il2CppName: GetResolvedNearTouchDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::NearTouch, GlobalNamespace::OVRInput::RawNearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedNearTouchDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedNearTouchDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::NearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawNearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetUp
// Il2CppName: GetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::NearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::NearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetUp
// Il2CppName: GetUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::RawNearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawNearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedNearTouchUp
// Il2CppName: GetResolvedNearTouchUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::NearTouch, GlobalNamespace::OVRInput::RawNearTouch, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedNearTouchUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedNearTouchUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::NearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawNearTouch>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(GlobalNamespace::OVRInput::Axis1D, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Axis1D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(GlobalNamespace::OVRInput::RawAxis1D, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawAxis1D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedAxis1D
// Il2CppName: GetResolvedAxis1D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(GlobalNamespace::OVRInput::Axis1D, GlobalNamespace::OVRInput::RawAxis1D, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedAxis1D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedAxis1D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Axis1D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawAxis1D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(GlobalNamespace::OVRInput::Axis2D, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Axis2D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(GlobalNamespace::OVRInput::RawAxis2D, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawAxis2D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetResolvedAxis2D
// Il2CppName: GetResolvedAxis2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(GlobalNamespace::OVRInput::Axis2D, GlobalNamespace::OVRInput::RawAxis2D, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetResolvedAxis2D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetResolvedAxis2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Axis2D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::RawAxis2D>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetConnectedControllers
// Il2CppName: GetConnectedControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRInput::Controller (*)()>(&GlobalNamespace::OVRInput::GetConnectedControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetConnectedControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::IsControllerConnected
// Il2CppName: IsControllerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::IsControllerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "IsControllerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetActiveController
// Il2CppName: GetActiveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRInput::Controller (*)()>(&GlobalNamespace::OVRInput::GetActiveController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetActiveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::StartVibration
// Il2CppName: StartVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, UnityEngine::XR::XRNode)>(&GlobalNamespace::OVRInput::StartVibration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "StartVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::SetOpenVRLocalPose
// Il2CppName: SetOpenVRLocalPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Quaternion)>(&GlobalNamespace::OVRInput::SetOpenVRLocalPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "SetOpenVRLocalPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetOpenVRStringProperty
// Il2CppName: GetOpenVRStringProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(OVR::OpenVR::ETrackedDeviceProperty, uint)>(&GlobalNamespace::OVRInput::GetOpenVRStringProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetOpenVRStringProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::UpdateXRControllerNodeIds
// Il2CppName: UpdateXRControllerNodeIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRInput::UpdateXRControllerNodeIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "UpdateXRControllerNodeIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::UpdateXRControllerHaptics
// Il2CppName: UpdateXRControllerHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRInput::UpdateXRControllerHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "UpdateXRControllerHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::InitHapticInfo
// Il2CppName: InitHapticInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRInput::InitHapticInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "InitHapticInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::PlayHapticImpulse
// Il2CppName: PlayHapticImpulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, UnityEngine::XR::XRNode)>(&GlobalNamespace::OVRInput::PlayHapticImpulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "PlayHapticImpulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::IsValidOpenVRDevice
// Il2CppName: IsValidOpenVRDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&GlobalNamespace::OVRInput::IsValidOpenVRDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "IsValidOpenVRDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::SetControllerVibration
// Il2CppName: SetControllerVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::SetControllerVibration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "SetControllerVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::GetControllerBatteryPercentRemaining
// Il2CppName: GetControllerBatteryPercentRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::GetControllerBatteryPercentRemaining)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "GetControllerBatteryPercentRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::CalculateAbsMax
// Il2CppName: CalculateAbsMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&GlobalNamespace::OVRInput::CalculateAbsMax)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "CalculateAbsMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::CalculateAbsMax
// Il2CppName: CalculateAbsMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GlobalNamespace::OVRInput::CalculateAbsMax)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "CalculateAbsMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::CalculateDeadzone
// Il2CppName: CalculateDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2, float)>(&GlobalNamespace::OVRInput::CalculateDeadzone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "CalculateDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::CalculateDeadzone
// Il2CppName: CalculateDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GlobalNamespace::OVRInput::CalculateDeadzone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "CalculateDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::ShouldResolveController
// Il2CppName: ShouldResolveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::OVRInput::Controller, GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::OVRInput::ShouldResolveController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput*), "ShouldResolveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRInput::Controller>()});
  }
};
