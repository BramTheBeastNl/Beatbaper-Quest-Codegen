// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RuntimeLightWithIds
  class RuntimeLightWithIds : public GlobalNamespace::LightWithIds {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    // Nested type: GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData
    class LightIntensitiesData;
    // private RuntimeLightWithIds/LightIntensitiesData[] _lightIntensityData
    // Size: 0x8
    // Offset: 0x28
    ::Array<GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData*>* lightIntensityData;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData*>*) == 0x8);
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x30
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxIntensity
    // Size: 0x4
    // Offset: 0x34
    float maxIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: RuntimeLightWithIds
    RuntimeLightWithIds(::Array<GlobalNamespace::RuntimeLightWithIds::LightIntensitiesData*>* lightIntensityData_ = {}, float intensity_ = {}, float maxIntensity_ = {}) noexcept : lightIntensityData{lightIntensityData_}, intensity{intensity_}, maxIntensity{maxIntensity_} {}
    // protected System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0xFFFFFFFF
    void ColorWasSet(UnityEngine::Color color);
    // private UnityEngine.Color GetLightColor()
    // Offset: 0x1D92280
    UnityEngine::Color GetLightColor();
    // protected override System.Collections.Generic.IEnumerable`1<LightWithIds/LightData> get_lightIntensityData()
    // Offset: 0x1D9224C
    // Implemented from: LightWithIds
    // Base method: System.Collections.Generic.IEnumerable`1<LightWithIds/LightData> LightWithIds::get_lightIntensityData()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* get_lightIntensityData();
    // protected override System.Void HandleLightManagerDidChangeSomeColorsThisFrame()
    // Offset: 0x1D92254
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame()
    void HandleLightManagerDidChangeSomeColorsThisFrame();
    // protected System.Void .ctor()
    // Offset: 0x1D899AC
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeLightWithIds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RuntimeLightWithIds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeLightWithIds*, creationType>()));
    }
  }; // RuntimeLightWithIds
  #pragma pack(pop)
  static check_size<sizeof(RuntimeLightWithIds), 52 + sizeof(float)> __GlobalNamespace_RuntimeLightWithIdsSizeCheck;
  static_assert(sizeof(RuntimeLightWithIds) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::RuntimeLightWithIds*, "", "RuntimeLightWithIds");
// Writing MetadataGetter for method: RuntimeLightWithIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)(UnityEngine::Color)>(&RuntimeLightWithIds::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::GetLightColor
// Il2CppName: GetLightColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::GetLightColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "GetLightColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::get_lightIntensityData
// Il2CppName: get_lightIntensityData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<GlobalNamespace::LightWithIds::LightData*>* (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::get_lightIntensityData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "get_lightIntensityData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame
// Il2CppName: HandleLightManagerDidChangeSomeColorsThisFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::HandleLightManagerDidChangeSomeColorsThisFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), "HandleLightManagerDidChangeSomeColorsThisFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeLightWithIds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeLightWithIds::*)()>(&RuntimeLightWithIds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeLightWithIds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
