// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IServerBeatmapProvider
  class IServerBeatmapProvider;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: IServerBeatmapProviderManager
  class IServerBeatmapProviderManager/*, public System::IDisposable*/ {
    public:
    // Creating value type constructor for type: IServerBeatmapProviderManager
    IServerBeatmapProviderManager() noexcept {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public IServerBeatmapProvider GetServerBeatmapProvider()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::IServerBeatmapProvider* GetServerBeatmapProvider();
    // public System.Threading.Tasks.Task RefreshAsync()
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task* RefreshAsync();
  }; // IServerBeatmapProviderManager
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::IServerBeatmapProviderManager*, "", "IServerBeatmapProviderManager");
// Writing MetadataGetter for method: IServerBeatmapProviderManager::GetServerBeatmapProvider
// Il2CppName: GetServerBeatmapProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IServerBeatmapProvider* (IServerBeatmapProviderManager::*)()>(&IServerBeatmapProviderManager::GetServerBeatmapProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IServerBeatmapProviderManager*), "GetServerBeatmapProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IServerBeatmapProviderManager::RefreshAsync
// Il2CppName: RefreshAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (IServerBeatmapProviderManager::*)()>(&IServerBeatmapProviderManager::RefreshAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IServerBeatmapProviderManager*), "RefreshAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
