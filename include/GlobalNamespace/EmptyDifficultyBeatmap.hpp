// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
  // Forward declaring type: IDifficultyBeatmapSet
  class IDifficultyBeatmapSet;
  // Forward declaring type: BeatmapData
  class BeatmapData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: EmptyDifficultyBeatmap
  // [] Offset: FFFFFFFF
  class EmptyDifficultyBeatmap : public ::Il2CppObject/*, public GlobalNamespace::IDifficultyBeatmap*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD2055C
    // private readonly IBeatmapLevel <level>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IBeatmapLevel* level;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2056C
    // private readonly IDifficultyBeatmapSet <parentDifficultyBeatmapSet>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::IDifficultyBeatmapSet* parentDifficultyBeatmapSet;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IDifficultyBeatmapSet*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2057C
    // private readonly BeatmapDifficulty <difficulty>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::BeatmapDifficulty difficulty;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficulty) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2058C
    // private readonly System.Int32 <difficultyRank>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int difficultyRank;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2059C
    // private readonly System.Single <noteJumpMovementSpeed>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float noteJumpMovementSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD205AC
    // private readonly System.Single <noteJumpStartBeatOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    float noteJumpStartBeatOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD205BC
    // private readonly BeatmapData <beatmapData>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapData*) == 0x8);
    // Creating value type constructor for type: EmptyDifficultyBeatmap
    EmptyDifficultyBeatmap(GlobalNamespace::IBeatmapLevel* level_ = {}, GlobalNamespace::IDifficultyBeatmapSet* parentDifficultyBeatmapSet_ = {}, GlobalNamespace::BeatmapDifficulty difficulty_ = {}, int difficultyRank_ = {}, float noteJumpMovementSpeed_ = {}, float noteJumpStartBeatOffset_ = {}, GlobalNamespace::BeatmapData* beatmapData_ = {}) noexcept : level{level_}, parentDifficultyBeatmapSet{parentDifficultyBeatmapSet_}, difficulty{difficulty_}, difficultyRank{difficultyRank_}, noteJumpMovementSpeed{noteJumpMovementSpeed_}, noteJumpStartBeatOffset{noteJumpStartBeatOffset_}, beatmapData{beatmapData_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IDifficultyBeatmap
    operator GlobalNamespace::IDifficultyBeatmap() noexcept {
      return *reinterpret_cast<GlobalNamespace::IDifficultyBeatmap*>(this);
    }
    // public IBeatmapLevel get_level()
    // Offset: 0xFE2E1C
    GlobalNamespace::IBeatmapLevel* get_level_NEW();
    // public IDifficultyBeatmapSet get_parentDifficultyBeatmapSet()
    // Offset: 0xFE2E24
    GlobalNamespace::IDifficultyBeatmapSet* get_parentDifficultyBeatmapSet_NEW();
    // public BeatmapDifficulty get_difficulty()
    // Offset: 0xFE2E2C
    GlobalNamespace::BeatmapDifficulty get_difficulty_NEW();
    // public System.Int32 get_difficultyRank()
    // Offset: 0xFE2E34
    int get_difficultyRank_NEW();
    // public System.Single get_noteJumpMovementSpeed()
    // Offset: 0xFE2E3C
    float get_noteJumpMovementSpeed_NEW();
    // public System.Single get_noteJumpStartBeatOffset()
    // Offset: 0xFE2E44
    float get_noteJumpStartBeatOffset_NEW();
    // public BeatmapData get_beatmapData()
    // Offset: 0xFE2E4C
    GlobalNamespace::BeatmapData* get_beatmapData_NEW();
    // public System.Void .ctor()
    // Offset: 0xFE2E54
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EmptyDifficultyBeatmap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EmptyDifficultyBeatmap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EmptyDifficultyBeatmap*, creationType>()));
    }
  }; // EmptyDifficultyBeatmap
  #pragma pack(pop)
  static check_size<sizeof(EmptyDifficultyBeatmap), 48 + sizeof(GlobalNamespace::BeatmapData*)> __GlobalNamespace_EmptyDifficultyBeatmapSizeCheck;
  static_assert(sizeof(EmptyDifficultyBeatmap) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::EmptyDifficultyBeatmap*, "", "EmptyDifficultyBeatmap");
