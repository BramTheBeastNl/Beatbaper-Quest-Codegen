// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: StartLevelCommandLineParametersProcessor
#include "GlobalNamespace/StartLevelCommandLineParametersProcessor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StartLevelCommandLineParametersProcessor::CommandLineParametersModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StartLevelCommandLineParametersProcessor::CommandLineParametersModel*, "", "StartLevelCommandLineParametersProcessor/CommandLineParametersModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: StartLevelCommandLineParametersProcessor/CommandLineParametersModel
  // [TokenAttribute] Offset: FFFFFFFF
  class StartLevelCommandLineParametersProcessor::CommandLineParametersModel : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // public System.String mode
    // Size: 0x8
    // Offset: 0x10
    ::StringW mode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String packID
    // Size: 0x8
    // Offset: 0x18
    ::StringW packID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String levelID
    // Size: 0x8
    // Offset: 0x20
    ::StringW levelID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String difficulty
    // Size: 0x8
    // Offset: 0x28
    ::StringW difficulty;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String characteristic
    // Size: 0x8
    // Offset: 0x30
    ::StringW characteristic;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean runLevel
    // Size: 0x1
    // Offset: 0x38
    bool runLevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: runLevel and: recordingMode
    char __padding5[0x7] = {};
    // public System.String recordingMode
    // Size: 0x8
    // Offset: 0x40
    ::StringW recordingMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String cameraView
    // Size: 0x8
    // Offset: 0x48
    ::StringW cameraView;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String recordingFileName
    // Size: 0x8
    // Offset: 0x50
    ::StringW recordingFileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean addDateTimeSuffixToFileName
    // Size: 0x1
    // Offset: 0x58
    bool addDateTimeSuffixToFileName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean screenshotRecording
    // Size: 0x1
    // Offset: 0x59
    bool screenshotRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: screenshotRecording and: screenshotWidth
    char __padding10[0x2] = {};
    // public System.Int32 screenshotWidth
    // Size: 0x4
    // Offset: 0x5C
    int screenshotWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 screenshotHeight
    // Size: 0x4
    // Offset: 0x60
    int screenshotHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 framerate
    // Size: 0x4
    // Offset: 0x64
    int framerate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean practice
    // Size: 0x1
    // Offset: 0x68
    bool practice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: practice and: startSongTime
    char __padding14[0x3] = {};
    // public System.Single startSongTime
    // Size: 0x4
    // Offset: 0x6C
    float startSongTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single songSpeedMultiplier
    // Size: 0x4
    // Offset: 0x70
    float songSpeedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean overrideEnvironments
    // Size: 0x1
    // Offset: 0x74
    bool overrideEnvironments;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideEnvironments and: environmentType
    char __padding17[0x3] = {};
    // public System.String environmentType
    // Size: 0x8
    // Offset: 0x78
    ::StringW environmentType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String environmentName
    // Size: 0x8
    // Offset: 0x80
    ::StringW environmentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String mode
    ::StringW& dyn_mode();
    // Get instance field reference: public System.String packID
    ::StringW& dyn_packID();
    // Get instance field reference: public System.String levelID
    ::StringW& dyn_levelID();
    // Get instance field reference: public System.String difficulty
    ::StringW& dyn_difficulty();
    // Get instance field reference: public System.String characteristic
    ::StringW& dyn_characteristic();
    // Get instance field reference: public System.Boolean runLevel
    bool& dyn_runLevel();
    // Get instance field reference: public System.String recordingMode
    ::StringW& dyn_recordingMode();
    // Get instance field reference: public System.String cameraView
    ::StringW& dyn_cameraView();
    // Get instance field reference: public System.String recordingFileName
    ::StringW& dyn_recordingFileName();
    // Get instance field reference: public System.Boolean addDateTimeSuffixToFileName
    bool& dyn_addDateTimeSuffixToFileName();
    // Get instance field reference: public System.Boolean screenshotRecording
    bool& dyn_screenshotRecording();
    // Get instance field reference: public System.Int32 screenshotWidth
    int& dyn_screenshotWidth();
    // Get instance field reference: public System.Int32 screenshotHeight
    int& dyn_screenshotHeight();
    // Get instance field reference: public System.Int32 framerate
    int& dyn_framerate();
    // Get instance field reference: public System.Boolean practice
    bool& dyn_practice();
    // Get instance field reference: public System.Single startSongTime
    float& dyn_startSongTime();
    // Get instance field reference: public System.Single songSpeedMultiplier
    float& dyn_songSpeedMultiplier();
    // Get instance field reference: public System.Boolean overrideEnvironments
    bool& dyn_overrideEnvironments();
    // Get instance field reference: public System.String environmentType
    ::StringW& dyn_environmentType();
    // Get instance field reference: public System.String environmentName
    ::StringW& dyn_environmentName();
    // public System.Void .ctor()
    // Offset: 0x2ADE6B8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StartLevelCommandLineParametersProcessor::CommandLineParametersModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StartLevelCommandLineParametersProcessor::CommandLineParametersModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StartLevelCommandLineParametersProcessor::CommandLineParametersModel*, creationType>()));
    }
  }; // StartLevelCommandLineParametersProcessor/CommandLineParametersModel
  #pragma pack(pop)
  static check_size<sizeof(StartLevelCommandLineParametersProcessor::CommandLineParametersModel), 128 + sizeof(::StringW)> __GlobalNamespace_StartLevelCommandLineParametersProcessor_CommandLineParametersModelSizeCheck;
  static_assert(sizeof(StartLevelCommandLineParametersProcessor::CommandLineParametersModel) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StartLevelCommandLineParametersProcessor::CommandLineParametersModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
