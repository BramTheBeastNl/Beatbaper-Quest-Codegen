// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IEquatableByReference`1
#include "GlobalNamespace/IEquatableByReference_1.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: TimestampedStateTable because it is already included!
  // Skipping declaration: InterpolationDelegate because it is already included!
  // Skipping declaration: SmoothingDelegate because it is already included!
  // Forward declaring type: IStateTable`2<TType, TState>
  template<typename TType, typename TState>
  class IStateTable_2;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IConvertible
  class IConvertible;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: StateBuffer`3
  template<typename TStateTable, typename TType, typename TState>
  class StateBuffer_3 : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::StateBuffer_3::TimestampedStateTable<TStateTable, TType, TState>
    struct TimestampedStateTable;
    // Nested type: GlobalNamespace::StateBuffer_3::InterpolationDelegate<TStateTable, TType, TState>
    class InterpolationDelegate;
    // Nested type: GlobalNamespace::StateBuffer_3::SmoothingDelegate<TStateTable, TType, TState>
    class SmoothingDelegate;
    // Autogenerated type: StateBuffer`3/TimestampedStateTable
    struct TimestampedStateTable : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public GlobalNamespace::IEquatableByReference_1<typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable>*/ {
      public:
      using declaring_type = StateBuffer_3<TStateTable, TType, TState>*;
      static constexpr std::string_view NESTED_NAME = "TimestampedStateTable";
      // public System.Single time
      // Offset: 0x0
      float time;
      // public TStateTable state
      // Offset: 0x0
      TStateTable state;
      // Creating value type constructor for type: TimestampedStateTable
      constexpr TimestampedStateTable(float time_ = {}, TStateTable state_ = {}) noexcept : time{time_}, state{state_} {}
      // Creating interface conversion operator: operator GlobalNamespace::IEquatableByReference_1<typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable>
      operator GlobalNamespace::IEquatableByReference_1<typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable>() noexcept {
        return *reinterpret_cast<GlobalNamespace::IEquatableByReference_1<typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable>*>(this);
      }
      // public System.Boolean Equals(ref StateBuffer`3/TimestampedStateTable<TStateTable,TType,TState> other)
      // Offset: 0xFFFFFFFF
      bool Equals(typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable& other) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("TimestampedStateTable").WithContext("Equals");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<bool>(), "Equals", {}, ::il2cpp_utils::ExtractTypes(other)));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
      }
      // public System.Void .ctor(System.Single time, TStateTable state)
      // Offset: 0xFFFFFFFF
      // ABORTED: conflicts with another method.  TimestampedStateTable(float time, TStateTable state)
    }; // StateBuffer`3/TimestampedStateTable
    // Could not write size check! Type: StateBuffer`3/TimestampedStateTable is generic!
    // Autogenerated type: StateBuffer`3/InterpolationDelegate
    class InterpolationDelegate : public System::MulticastDelegate, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = StateBuffer_3<TStateTable, TType, TState>*;
      static constexpr std::string_view NESTED_NAME = "InterpolationDelegate";
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFF
      static typename StateBuffer_3<TStateTable, TType, TState>::InterpolationDelegate* New_ctor(::Il2CppObject* object, System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("InterpolationDelegate").WithContext(".ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename StateBuffer_3<TStateTable, TType, TState>::InterpolationDelegate*>(object, method)));
      }
      // public TState Invoke(TState a, System.Single timeA, TState b, System.Single timeB, System.Single time)
      // Offset: 0xFFFFFFFF
      TState Invoke(TState a, float timeA, TState b, float timeB, float time) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("InterpolationDelegate").WithContext("Invoke");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TState>(), "Invoke", {}, ::il2cpp_utils::ExtractTypes(a, timeA, b, timeB, time)));
        return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, a, timeA, b, timeB, time);
      }
      // public System.IAsyncResult BeginInvoke(TState a, System.Single timeA, TState b, System.Single timeB, System.Single time, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFF
      System::IAsyncResult* BeginInvoke(TState a, float timeA, TState b, float timeB, float time, System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("InterpolationDelegate").WithContext("BeginInvoke");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::IAsyncResult*>(), "BeginInvoke", {}, ::il2cpp_utils::ExtractTypes(a, timeA, b, timeB, time, callback, object)));
        return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, a, timeA, b, timeB, time, callback, object);
      }
      // public TState EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFF
      TState EndInvoke(System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("InterpolationDelegate").WithContext("EndInvoke");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TState>(), "EndInvoke", {}, ::il2cpp_utils::ExtractTypes(result)));
        return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, result);
      }
    }; // StateBuffer`3/InterpolationDelegate
    // Could not write size check! Type: StateBuffer`3/InterpolationDelegate is generic!
    // Autogenerated type: StateBuffer`3/SmoothingDelegate
    class SmoothingDelegate : public System::MulticastDelegate, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = StateBuffer_3<TStateTable, TType, TState>*;
      static constexpr std::string_view NESTED_NAME = "SmoothingDelegate";
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFF
      static typename StateBuffer_3<TStateTable, TType, TState>::SmoothingDelegate* New_ctor(::Il2CppObject* object, System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SmoothingDelegate").WithContext(".ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename StateBuffer_3<TStateTable, TType, TState>::SmoothingDelegate*>(object, method)));
      }
      // public TState Invoke(TState a, TState b, System.Single smooth)
      // Offset: 0xFFFFFFFF
      TState Invoke(TState a, TState b, float smooth) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SmoothingDelegate").WithContext("Invoke");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TState>(), "Invoke", {}, ::il2cpp_utils::ExtractTypes(a, b, smooth)));
        return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, a, b, smooth);
      }
      // public System.IAsyncResult BeginInvoke(TState a, TState b, System.Single smooth, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFF
      System::IAsyncResult* BeginInvoke(TState a, TState b, float smooth, System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SmoothingDelegate").WithContext("BeginInvoke");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::IAsyncResult*>(), "BeginInvoke", {}, ::il2cpp_utils::ExtractTypes(a, b, smooth, callback, object)));
        return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, a, b, smooth, callback, object);
      }
      // public TState EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFF
      TState EndInvoke(System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("SmoothingDelegate").WithContext("EndInvoke");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TState>(), "EndInvoke", {}, ::il2cpp_utils::ExtractTypes(result)));
        return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, result);
      }
    }; // StateBuffer`3/SmoothingDelegate
    // Could not write size check! Type: StateBuffer`3/SmoothingDelegate is generic!
    // private System.Int32 _currentIndex
    // Offset: 0x0
    int currentIndex;
    // private readonly StateBuffer`3/TimestampedStateTable<TStateTable,TType,TState>[] _buffer
    // Offset: 0x0
    ::Array<typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable>* buffer;
    // private readonly StateBuffer`3/InterpolationDelegate<TStateTable,TType,TState> _interpolator
    // Offset: 0x0
    typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::InterpolationDelegate* interpolator;
    // private readonly StateBuffer`3/SmoothingDelegate<TStateTable,TType,TState> _smoother
    // Offset: 0x0
    typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::SmoothingDelegate* smoother;
    // public System.Void .ctor(System.Int32 size, StateBuffer`3/InterpolationDelegate<TStateTable,TType,TState> interpolator, StateBuffer`3/SmoothingDelegate<TStateTable,TType,TState> smoother)
    // Offset: 0xFFFFFFFF
    static StateBuffer_3<TStateTable, TType, TState>* New_ctor(int size, typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::InterpolationDelegate* interpolator, typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::SmoothingDelegate* smoother) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StateBuffer_3<TStateTable, TType, TState>*>(size, interpolator, smoother)));
    }
    // private System.Int32 GetPreviousIndex(System.Int32 offset)
    // Offset: 0xFFFFFFFF
    int GetPreviousIndex(int offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext("GetPreviousIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<int>(), "GetPreviousIndex", {}, ::il2cpp_utils::ExtractTypes(offset)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, offset);
    }
    // protected System.Void PushState(TStateTable state, System.Single time)
    // Offset: 0xFFFFFFFF
    void PushState(TStateTable state, float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext("PushState");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "PushState", {}, ::il2cpp_utils::ExtractTypes(state, time)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, time);
    }
    // public TState GetState(TType type, System.Single time)
    // Offset: 0xFFFFFFFF
    TState GetState(TType type, float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext("GetState");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TState>(), "GetState", {}, ::il2cpp_utils::ExtractTypes(type, time)));
      return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, type, time);
    }
    // public TState GetLatestState(TType type)
    // Offset: 0xFFFFFFFF
    TState GetLatestState(TType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext("GetLatestState");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TState>(), "GetLatestState", {}, ::il2cpp_utils::ExtractTypes(type)));
      return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, type);
    }
    // public System.Single GetLatestTime()
    // Offset: 0xFFFFFFFF
    float GetLatestTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext("GetLatestTime");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<float>(), "GetLatestTime", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("StateBuffer_3").WithContext("Clear");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Clear", {}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
  }; // StateBuffer`3
  // Could not write size check! Type: StateBuffer`3 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::StateBuffer_3, "", "StateBuffer`3");
#pragma pack(pop)
