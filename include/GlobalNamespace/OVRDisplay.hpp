// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPose
#include "GlobalNamespace/OVRPose.hpp"
// Including type: OVRManager/TrackingOrigin
#include "GlobalNamespace/OVRManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  // Autogenerated type: OVRDisplay
  // [] Offset: FFFFFFFF
  class OVRDisplay : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRDisplay::EyeFov
    struct EyeFov;
    // Nested type: GlobalNamespace::OVRDisplay::EyeRenderDesc
    struct EyeRenderDesc;
    // Nested type: GlobalNamespace::OVRDisplay::LatencyData
    struct LatencyData;
    // private System.Boolean needsConfigureTexture
    // Size: 0x1
    // Offset: 0x10
    bool needsConfigureTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: needsConfigureTexture and: eyeDescs
    private: char __padding0[0x7] = {};
    public:
    // private OVRDisplay/EyeRenderDesc[] eyeDescs
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>* eyeDescs;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>*) == 0x8);
    // private System.Boolean recenterRequested
    // Size: 0x1
    // Offset: 0x20
    bool recenterRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recenterRequested and: recenterRequestedFrameCount
    private: char __padding2[0x3] = {};
    public:
    // private System.Int32 recenterRequestedFrameCount
    // Size: 0x4
    // Offset: 0x24
    int recenterRequestedFrameCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private OVRPose previousRelativeTrackingSpacePose
    // Size: 0x1C
    // Offset: 0x28
    GlobalNamespace::OVRPose previousRelativeTrackingSpacePose;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPose) == 0x1C);
    // private OVRManager/TrackingOrigin previousTrackingOrigin
    // Size: 0x4
    // Offset: 0x44
    GlobalNamespace::OVRManager::TrackingOrigin previousTrackingOrigin;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager::TrackingOrigin) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD85A2C
    // private System.Action RecenteredPose
    // Size: 0x8
    // Offset: 0x48
    System::Action* RecenteredPose;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // Creating value type constructor for type: OVRDisplay
    OVRDisplay(bool needsConfigureTexture_ = {}, ::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>* eyeDescs_ = {}, bool recenterRequested_ = {}, int recenterRequestedFrameCount_ = {}, GlobalNamespace::OVRPose previousRelativeTrackingSpacePose_ = {}, GlobalNamespace::OVRManager::TrackingOrigin previousTrackingOrigin_ = {}, System::Action* RecenteredPose_ = {}) noexcept : needsConfigureTexture{needsConfigureTexture_}, eyeDescs{eyeDescs_}, recenterRequested{recenterRequested_}, recenterRequestedFrameCount{recenterRequestedFrameCount_}, previousRelativeTrackingSpacePose{previousRelativeTrackingSpacePose_}, previousTrackingOrigin{previousTrackingOrigin_}, RecenteredPose{RecenteredPose_} {}
    // public System.Void Update()
    // Offset: 0x107081C
    void Update();
    // public System.Void add_RecenteredPose(System.Action value)
    // Offset: 0x1070B08
    void add_RecenteredPose(System::Action* value);
    // public System.Void remove_RecenteredPose(System.Action value)
    // Offset: 0x1070BAC
    void remove_RecenteredPose(System::Action* value);
    // public System.Void RecenterPose()
    // Offset: 0x1070C50
    void RecenterPose();
    // public UnityEngine.Vector3 get_acceleration()
    // Offset: 0x1070CCC
    UnityEngine::Vector3 get_acceleration();
    // public UnityEngine.Vector3 get_angularAcceleration()
    // Offset: 0x1070DF8
    UnityEngine::Vector3 get_angularAcceleration();
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0x1070F24
    UnityEngine::Vector3 get_velocity();
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0x1071050
    UnityEngine::Vector3 get_angularVelocity();
    // public OVRDisplay/EyeRenderDesc GetEyeRenderDesc(UnityEngine.XR.XRNode eye)
    // Offset: 0x10705E4
    GlobalNamespace::OVRDisplay::EyeRenderDesc GetEyeRenderDesc(UnityEngine::XR::XRNode eye);
    // public OVRDisplay/LatencyData get_latency()
    // Offset: 0x107117C
    GlobalNamespace::OVRDisplay::LatencyData get_latency();
    // public System.Single get_appFramerate()
    // Offset: 0x1071348
    float get_appFramerate();
    // public System.Int32 get_recommendedMSAALevel()
    // Offset: 0x10713E4
    int get_recommendedMSAALevel();
    // public System.Single[] get_displayFrequenciesAvailable()
    // Offset: 0x1071450
    ::Array<float>* get_displayFrequenciesAvailable();
    // public System.Single get_displayFrequency()
    // Offset: 0x10714B0
    float get_displayFrequency();
    // public System.Void set_displayFrequency(System.Single value)
    // Offset: 0x1071510
    void set_displayFrequency(float value);
    // private System.Void UpdateTextures()
    // Offset: 0x10707F0
    void UpdateTextures();
    // private System.Void ConfigureEyeDesc(UnityEngine.XR.XRNode eye)
    // Offset: 0x1071580
    void ConfigureEyeDesc(UnityEngine::XR::XRNode eye);
    // public System.Void .ctor()
    // Offset: 0x1070640
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("GlobalNamespace").WithContext("OVRDisplay").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRDisplay*, creationType>()));
    }
  }; // OVRDisplay
  static check_size<sizeof(OVRDisplay), 72 + sizeof(System::Action*)> __GlobalNamespace_OVRDisplaySizeCheck;
  static_assert(sizeof(OVRDisplay) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay*, "", "OVRDisplay");
#pragma pack(pop)
