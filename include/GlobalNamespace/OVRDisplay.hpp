// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPose
#include "GlobalNamespace/OVRPose.hpp"
// Including type: OVRManager/TrackingOrigin
#include "GlobalNamespace/OVRManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: OVRDisplay
  class OVRDisplay : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRDisplay::EyeFov
    struct EyeFov;
    // Nested type: GlobalNamespace::OVRDisplay::EyeRenderDesc
    struct EyeRenderDesc;
    // Nested type: GlobalNamespace::OVRDisplay::LatencyData
    struct LatencyData;
    // private System.Boolean needsConfigureTexture
    // Offset: 0x10
    bool needsConfigureTexture;
    // private OVRDisplay/EyeRenderDesc[] eyeDescs
    // Offset: 0x18
    ::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>* eyeDescs;
    // private System.Boolean recenterRequested
    // Offset: 0x20
    bool recenterRequested;
    // private System.Int32 recenterRequestedFrameCount
    // Offset: 0x24
    int recenterRequestedFrameCount;
    // private OVRPose previousRelativeTrackingSpacePose
    // Offset: 0x28
    GlobalNamespace::OVRPose previousRelativeTrackingSpacePose;
    // private OVRManager/TrackingOrigin previousTrackingOrigin
    // Offset: 0x44
    GlobalNamespace::OVRManager::TrackingOrigin previousTrackingOrigin;
    // private System.Action RecenteredPose
    // Offset: 0x48
    System::Action* RecenteredPose;
    // public System.Void Update()
    // Offset: 0xC2D06C
    void Update();
    // public System.Void add_RecenteredPose(System.Action value)
    // Offset: 0xC2D358
    void add_RecenteredPose(System::Action* value);
    // public System.Void remove_RecenteredPose(System.Action value)
    // Offset: 0xC2D3FC
    void remove_RecenteredPose(System::Action* value);
    // public System.Void RecenterPose()
    // Offset: 0xC2D4A0
    void RecenterPose();
    // public UnityEngine.Vector3 get_acceleration()
    // Offset: 0xC2D51C
    UnityEngine::Vector3 get_acceleration();
    // public UnityEngine.Vector3 get_angularAcceleration()
    // Offset: 0xC2D648
    UnityEngine::Vector3 get_angularAcceleration();
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0xC2D774
    UnityEngine::Vector3 get_velocity();
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0xC2D8A0
    UnityEngine::Vector3 get_angularVelocity();
    // public OVRDisplay/EyeRenderDesc GetEyeRenderDesc(UnityEngine.XR.XRNode eye)
    // Offset: 0xC2CE34
    GlobalNamespace::OVRDisplay::EyeRenderDesc GetEyeRenderDesc(UnityEngine::XR::XRNode eye);
    // public OVRDisplay/LatencyData get_latency()
    // Offset: 0xC2D9CC
    GlobalNamespace::OVRDisplay::LatencyData get_latency();
    // public System.Single get_appFramerate()
    // Offset: 0xC2DB98
    float get_appFramerate();
    // public System.Int32 get_recommendedMSAALevel()
    // Offset: 0xC2DC34
    int get_recommendedMSAALevel();
    // public System.Single[] get_displayFrequenciesAvailable()
    // Offset: 0xC2DCA0
    ::Array<float>* get_displayFrequenciesAvailable();
    // public System.Single get_displayFrequency()
    // Offset: 0xC2DD00
    float get_displayFrequency();
    // public System.Void set_displayFrequency(System.Single value)
    // Offset: 0xC2DD60
    void set_displayFrequency(float value);
    // private System.Void UpdateTextures()
    // Offset: 0xC2D040
    void UpdateTextures();
    // private System.Void ConfigureEyeDesc(UnityEngine.XR.XRNode eye)
    // Offset: 0xC2DDD0
    void ConfigureEyeDesc(UnityEngine::XR::XRNode eye);
    // public System.Void .ctor()
    // Offset: 0xC2CE90
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static OVRDisplay* New_ctor();
  }; // OVRDisplay
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay*, "", "OVRDisplay");
#pragma pack(pop)
