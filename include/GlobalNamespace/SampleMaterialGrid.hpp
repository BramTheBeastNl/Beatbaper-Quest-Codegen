// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: SampleMaterialGrid
  class SampleMaterialGrid : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SampleMaterialGrid::MaterialSetting
    struct MaterialSetting;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: SampleMaterialGrid/MaterialSetting
    struct MaterialSetting/*, public System::ValueType*/ {
      public:
      // public System.String _propertyName
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppString* propertyName;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // public System.Single _minValue
      // Size: 0x4
      // Offset: 0x8
      float minValue;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single _maxValue
      // Size: 0x4
      // Offset: 0xC
      float maxValue;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // Creating value type constructor for type: MaterialSetting
      constexpr MaterialSetting(::Il2CppString* propertyName_ = {}, float minValue_ = {}, float maxValue_ = {}) noexcept : propertyName{propertyName_}, minValue{minValue_}, maxValue{maxValue_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // SampleMaterialGrid/MaterialSetting
    #pragma pack(pop)
    static check_size<sizeof(SampleMaterialGrid::MaterialSetting), 12 + sizeof(float)> __GlobalNamespace_SampleMaterialGrid_MaterialSettingSizeCheck;
    static_assert(sizeof(SampleMaterialGrid::MaterialSetting) == 0x10);
    // private UnityEngine.Vector2Int _gridSize
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Vector2Int gridSize;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2Int) == 0x8);
    // private UnityEngine.Vector2 _instanceOffset
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Vector2 instanceOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [SpaceAttribute] Offset: 0xE13D88
    // private UnityEngine.GameObject _object
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::GameObject* object;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Material _defaultMaterial
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Material* defaultMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // [HeaderAttribute] Offset: 0xE13DC0
    // private SampleMaterialGrid/MaterialSetting _horizontalProperty
    // Size: 0x10
    // Offset: 0x38
    GlobalNamespace::SampleMaterialGrid::MaterialSetting horizontalProperty;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SampleMaterialGrid::MaterialSetting) == 0x10);
    // private SampleMaterialGrid/MaterialSetting _verticalProperty
    // Size: 0x10
    // Offset: 0x48
    GlobalNamespace::SampleMaterialGrid::MaterialSetting verticalProperty;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SampleMaterialGrid::MaterialSetting) == 0x10);
    // private UnityEngine.GameObject[,] _instancedObjects
    // Size: 0x8
    // Offset: 0x58
    ::Array<UnityEngine::GameObject*>* instancedObjects;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.MeshRenderer[,] _instancedRenderers
    // Size: 0x8
    // Offset: 0x60
    ::Array<UnityEngine::MeshRenderer*>* instancedRenderers;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::MeshRenderer*>*) == 0x8);
    // private UnityEngine.Material[,] _instancedMaterials
    // Size: 0x8
    // Offset: 0x68
    ::Array<UnityEngine::Material*>* instancedMaterials;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Material*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> _floatPropertyIds
    // Size: 0x8
    // Offset: 0x70
    System::Collections::Generic::List_1<int>* floatPropertyIds;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<int>*) == 0x8);
    // Creating value type constructor for type: SampleMaterialGrid
    SampleMaterialGrid(UnityEngine::Vector2Int gridSize_ = {}, UnityEngine::Vector2 instanceOffset_ = {}, UnityEngine::GameObject* object_ = {}, UnityEngine::Material* defaultMaterial_ = {}, GlobalNamespace::SampleMaterialGrid::MaterialSetting horizontalProperty_ = {}, GlobalNamespace::SampleMaterialGrid::MaterialSetting verticalProperty_ = {}, ::Array<UnityEngine::GameObject*>* instancedObjects_ = {}, ::Array<UnityEngine::MeshRenderer*>* instancedRenderers_ = {}, ::Array<UnityEngine::Material*>* instancedMaterials_ = {}, System::Collections::Generic::List_1<int>* floatPropertyIds_ = {}) noexcept : gridSize{gridSize_}, instanceOffset{instanceOffset_}, object{object_}, defaultMaterial{defaultMaterial_}, horizontalProperty{horizontalProperty_}, verticalProperty{verticalProperty_}, instancedObjects{instancedObjects_}, instancedRenderers{instancedRenderers_}, instancedMaterials{instancedMaterials_}, floatPropertyIds{floatPropertyIds_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Collections.Generic.List`1<System.Int32> get_floatPropertyIds()
    // Offset: 0x10D3458
    System::Collections::Generic::List_1<int>* get_floatPropertyIds();
    // private System.Void OnDestroy()
    // Offset: 0x10D3460
    void OnDestroy();
    // private System.Void OnValidate()
    // Offset: 0x10D35A4
    void OnValidate();
    // public System.Void CreateGrid()
    // Offset: 0x10D377C
    void CreateGrid();
    // public System.Void .ctor()
    // Offset: 0x10D4090
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SampleMaterialGrid* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SampleMaterialGrid::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SampleMaterialGrid*, creationType>()));
    }
  }; // SampleMaterialGrid
  #pragma pack(pop)
  static check_size<sizeof(SampleMaterialGrid), 112 + sizeof(System::Collections::Generic::List_1<int>*)> __GlobalNamespace_SampleMaterialGridSizeCheck;
  static_assert(sizeof(SampleMaterialGrid) == 0x78);
  // Writing MetadataGetter for method: SampleMaterialGrid::get_floatPropertyIds
  // Il2CppName: get_floatPropertyIds
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<int>* (SampleMaterialGrid::*)()>(&SampleMaterialGrid::get_floatPropertyIds)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SampleMaterialGrid*), "get_floatPropertyIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SampleMaterialGrid::OnDestroy
  // Il2CppName: OnDestroy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SampleMaterialGrid::*)()>(&SampleMaterialGrid::OnDestroy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SampleMaterialGrid*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SampleMaterialGrid::OnValidate
  // Il2CppName: OnValidate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SampleMaterialGrid::*)()>(&SampleMaterialGrid::OnValidate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SampleMaterialGrid*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SampleMaterialGrid::CreateGrid
  // Il2CppName: CreateGrid
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SampleMaterialGrid::*)()>(&SampleMaterialGrid::CreateGrid)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SampleMaterialGrid*), "CreateGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SampleMaterialGrid::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SampleMaterialGrid::*)()>(&SampleMaterialGrid::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SampleMaterialGrid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SampleMaterialGrid::*)()>(&SampleMaterialGrid::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SampleMaterialGrid*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SampleMaterialGrid*, "", "SampleMaterialGrid");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SampleMaterialGrid::MaterialSetting, "", "SampleMaterialGrid/MaterialSetting");
