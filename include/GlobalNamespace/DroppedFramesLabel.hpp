// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DroppedFramesLabel
  class DroppedFramesLabel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DroppedFramesLabel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DroppedFramesLabel*, "", "DroppedFramesLabel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: DroppedFramesLabel
  // [TokenAttribute] Offset: FFFFFFFF
  class DroppedFramesLabel : public ::UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private TMPro.TextMeshProUGUI _text
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TextMeshProUGUI* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private System.Int32 _expectedFrameRate
    // Size: 0x4
    // Offset: 0x20
    int expectedFrameRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _resetInterval
    // Size: 0x4
    // Offset: 0x24
    int resetInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _totalNumberOfDroppedFrames
    // Size: 0x4
    // Offset: 0x28
    int totalNumberOfDroppedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _syncedFrameTime
    // Size: 0x4
    // Offset: 0x2C
    float syncedFrameTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _intervalTime
    // Size: 0x4
    // Offset: 0x30
    float intervalTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxFrameTimeInInterval
    // Size: 0x4
    // Offset: 0x34
    float maxFrameTimeInInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _frameCountInInterval
    // Size: 0x4
    // Offset: 0x38
    int frameCountInInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TextMeshProUGUI _text
    ::TMPro::TextMeshProUGUI*& dyn__text();
    // Get instance field reference: private System.Int32 _expectedFrameRate
    int& dyn__expectedFrameRate();
    // Get instance field reference: private System.Int32 _resetInterval
    int& dyn__resetInterval();
    // Get instance field reference: private System.Int32 _totalNumberOfDroppedFrames
    int& dyn__totalNumberOfDroppedFrames();
    // Get instance field reference: private System.Single _syncedFrameTime
    float& dyn__syncedFrameTime();
    // Get instance field reference: private System.Single _intervalTime
    float& dyn__intervalTime();
    // Get instance field reference: private System.Single _maxFrameTimeInInterval
    float& dyn__maxFrameTimeInInterval();
    // Get instance field reference: private System.Int32 _frameCountInInterval
    int& dyn__frameCountInInterval();
    // protected System.Void Start()
    // Offset: 0x15697FC
    void Start();
    // protected System.Void Update()
    // Offset: 0x1569870
    void Update();
    // private System.Void RefreshText()
    // Offset: 0x156995C
    void RefreshText();
    // public System.Void .ctor()
    // Offset: 0x1569A80
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DroppedFramesLabel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DroppedFramesLabel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DroppedFramesLabel*, creationType>()));
    }
  }; // DroppedFramesLabel
  #pragma pack(pop)
  static check_size<sizeof(DroppedFramesLabel), 56 + sizeof(int)> __GlobalNamespace_DroppedFramesLabelSizeCheck;
  static_assert(sizeof(DroppedFramesLabel) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DroppedFramesLabel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DroppedFramesLabel::*)()>(&GlobalNamespace::DroppedFramesLabel::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DroppedFramesLabel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DroppedFramesLabel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DroppedFramesLabel::*)()>(&GlobalNamespace::DroppedFramesLabel::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DroppedFramesLabel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DroppedFramesLabel::RefreshText
// Il2CppName: RefreshText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DroppedFramesLabel::*)()>(&GlobalNamespace::DroppedFramesLabel::RefreshText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DroppedFramesLabel*), "RefreshText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DroppedFramesLabel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
