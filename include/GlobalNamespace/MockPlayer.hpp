// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockPlayerSettings
  class MockPlayerSettings;
  // Forward declaring type: MockPlayerFiniteStateMachine
  class MockPlayerFiniteStateMachine;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: AvatarPartsModel
  class AvatarPartsModel;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: NodePoseSyncStateManager
  class NodePoseSyncStateManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayer
  class MockPlayer : public ::Il2CppObject/*, public GlobalNamespace::IConnectedPlayer, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xE1D84C
    // private readonly System.Boolean <isMe>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D85C
    // private System.Boolean <isConnected>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnected and: multiplayerAvatarData
    char __padding1[0x6] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D86C
    // private MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
    // Size: 0x70
    // Offset: 0x18
    GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerAvatarData) == 0x70);
    // [CompilerGeneratedAttribute] Offset: 0xE1D87C
    // private System.Boolean <isConnectionOwner>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool isConnectionOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D88C
    // private System.Boolean <isKicked>k__BackingField
    // Size: 0x1
    // Offset: 0x89
    bool isKicked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isKicked and: currentPartySize
    char __padding4[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D89C
    // private System.Int32 <currentPartySize>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int currentPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8AC
    // private System.Int32 <maxPartySize>k__BackingField
    // Size: 0x4
    // Offset: 0x90
    int maxPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8BC
    // private BeatmapDifficultyMask <difficulties>k__BackingField
    // Size: 0x1
    // Offset: 0x94
    GlobalNamespace::BeatmapDifficultyMask difficulties;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficultyMask) == 0x1);
    // Padding between fields: difficulties and: modifiers
    char __padding7[0x1] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D8CC
    // private GameplayModifierMask <modifiers>k__BackingField
    // Size: 0x2
    // Offset: 0x96
    GlobalNamespace::GameplayModifierMask modifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifierMask) == 0x2);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8DC
    // private SongPackMask <songPacks>k__BackingField
    // Size: 0x10
    // Offset: 0x98
    GlobalNamespace::SongPackMask songPacks;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPackMask) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8EC
    // private System.Boolean <isMyPartyOwner>k__BackingField
    // Size: 0x1
    // Offset: 0xA8
    bool isMyPartyOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8FC
    // private System.Boolean <isOpenParty>k__BackingField
    // Size: 0x1
    // Offset: 0xA9
    bool isOpenParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D90C
    // private System.Boolean <requiresPassword>k__BackingField
    // Size: 0x1
    // Offset: 0xAA
    bool requiresPassword;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D91C
    // private System.Boolean <isWaitingOnJoin>k__BackingField
    // Size: 0x1
    // Offset: 0xAB
    bool isWaitingOnJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D92C
    // private System.Boolean <canInvite>k__BackingField
    // Size: 0x1
    // Offset: 0xAC
    bool canInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D93C
    // private System.Boolean <isWaitingOnInvite>k__BackingField
    // Size: 0x1
    // Offset: 0xAD
    bool isWaitingOnInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D94C
    // private System.Boolean <canKick>k__BackingField
    // Size: 0x1
    // Offset: 0xAE
    bool canKick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D95C
    // private System.Boolean <canLeave>k__BackingField
    // Size: 0x1
    // Offset: 0xAF
    bool canLeave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D96C
    // private System.Boolean <canBlock>k__BackingField
    // Size: 0x1
    // Offset: 0xB0
    bool canBlock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D97C
    // private System.Boolean <canUnblock>k__BackingField
    // Size: 0x1
    // Offset: 0xB1
    bool canUnblock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isReady
    // Size: 0x1
    // Offset: 0xB2
    bool isReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isReady and: playerState
    char __padding20[0x5] = {};
    // private readonly System.Collections.Generic.HashSet`1<System.String> _playerState
    // Size: 0x8
    // Offset: 0xB8
    System::Collections::Generic::HashSet_1<::Il2CppString*>* playerState;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<::Il2CppString*>*) == 0x8);
    // private readonly MockPlayerSettings _settings
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::MockPlayerSettings* settings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockPlayerSettings*) == 0x8);
    // private MockPlayerFiniteStateMachine _fsm
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::MockPlayerFiniteStateMachine* fsm;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockPlayerFiniteStateMachine*) == 0x8);
    // Creating value type constructor for type: MockPlayer
    MockPlayer(bool isMe_ = {}, bool isConnected_ = {}, GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData_ = {}, bool isConnectionOwner_ = {}, bool isKicked_ = {}, int currentPartySize_ = {}, int maxPartySize_ = {}, GlobalNamespace::BeatmapDifficultyMask difficulties_ = {}, GlobalNamespace::GameplayModifierMask modifiers_ = {}, GlobalNamespace::SongPackMask songPacks_ = {}, bool isMyPartyOwner_ = {}, bool isOpenParty_ = {}, bool requiresPassword_ = {}, bool isWaitingOnJoin_ = {}, bool canInvite_ = {}, bool isWaitingOnInvite_ = {}, bool canKick_ = {}, bool canLeave_ = {}, bool canBlock_ = {}, bool canUnblock_ = {}, bool isReady_ = {}, System::Collections::Generic::HashSet_1<::Il2CppString*>* playerState_ = {}, GlobalNamespace::MockPlayerSettings* settings_ = {}, GlobalNamespace::MockPlayerFiniteStateMachine* fsm_ = {}) noexcept : isMe{isMe_}, isConnected{isConnected_}, multiplayerAvatarData{multiplayerAvatarData_}, isConnectionOwner{isConnectionOwner_}, isKicked{isKicked_}, currentPartySize{currentPartySize_}, maxPartySize{maxPartySize_}, difficulties{difficulties_}, modifiers{modifiers_}, songPacks{songPacks_}, isMyPartyOwner{isMyPartyOwner_}, isOpenParty{isOpenParty_}, requiresPassword{requiresPassword_}, isWaitingOnJoin{isWaitingOnJoin_}, canInvite{canInvite_}, isWaitingOnInvite{isWaitingOnInvite_}, canKick{canKick_}, canLeave{canLeave_}, canBlock{canBlock_}, canUnblock{canUnblock_}, isReady{isReady_}, playerState{playerState_}, settings{settings_}, fsm{fsm_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectedPlayer
    operator GlobalNamespace::IConnectedPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectedPlayer*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // public System.Boolean get_isReady()
    // Offset: 0x113EFDC
    bool get_isReady();
    // public System.Void set_isReady(System.Boolean value)
    // Offset: 0x113EFE4
    void set_isReady(bool value);
    // public System.Boolean get_isMe()
    // Offset: 0x113F020
    bool get_isMe();
    // public System.String get_userId()
    // Offset: 0x113F028
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x113F044
    ::Il2CppString* get_userName();
    // public System.Int32 get_sortIndex()
    // Offset: 0x113F060
    int get_sortIndex();
    // public System.Boolean get_autoConnect()
    // Offset: 0x113F07C
    bool get_autoConnect();
    // public System.Boolean get_inactiveByDefault()
    // Offset: 0x113F098
    bool get_inactiveByDefault();
    // public System.Boolean get_isConnected()
    // Offset: 0x113F0B4
    bool get_isConnected();
    // protected System.Void set_isConnected(System.Boolean value)
    // Offset: 0x113F0BC
    void set_isConnected(bool value);
    // public MultiplayerAvatarData get_multiplayerAvatarData()
    // Offset: 0x113F0C8
    GlobalNamespace::MultiplayerAvatarData get_multiplayerAvatarData();
    // private System.Void set_multiplayerAvatarData(MultiplayerAvatarData value)
    // Offset: 0x113F0D8
    void set_multiplayerAvatarData(GlobalNamespace::MultiplayerAvatarData value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x113F0F4
    bool get_isConnectionOwner();
    // public System.Void set_isConnectionOwner(System.Boolean value)
    // Offset: 0x113F0FC
    void set_isConnectionOwner(bool value);
    // public DisconnectedReason get_disconnectedReason()
    // Offset: 0x113F108
    GlobalNamespace::DisconnectedReason get_disconnectedReason();
    // public System.Single get_offsetSyncTime()
    // Offset: 0x113F110
    float get_offsetSyncTime();
    // public System.Single get_currentLatency()
    // Offset: 0x113F168
    float get_currentLatency();
    // public System.Boolean get_isKicked()
    // Offset: 0x113F1A0
    bool get_isKicked();
    // public System.Void set_isKicked(System.Boolean value)
    // Offset: 0x113F1A8
    void set_isKicked(bool value);
    // public System.Int32 get_currentPartySize()
    // Offset: 0x113F1B4
    int get_currentPartySize();
    // public System.Void set_currentPartySize(System.Int32 value)
    // Offset: 0x113F1BC
    void set_currentPartySize(int value);
    // public System.Int32 get_maxPartySize()
    // Offset: 0x113F1C4
    int get_maxPartySize();
    // public System.Void set_maxPartySize(System.Int32 value)
    // Offset: 0x113F1CC
    void set_maxPartySize(int value);
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x113F1D4
    GlobalNamespace::BeatmapDifficultyMask get_difficulties();
    // public System.Void set_difficulties(BeatmapDifficultyMask value)
    // Offset: 0x113F1DC
    void set_difficulties(GlobalNamespace::BeatmapDifficultyMask value);
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x113F1E4
    GlobalNamespace::GameplayModifierMask get_modifiers();
    // public System.Void set_modifiers(GameplayModifierMask value)
    // Offset: 0x113F1EC
    void set_modifiers(GlobalNamespace::GameplayModifierMask value);
    // public SongPackMask get_songPacks()
    // Offset: 0x113F1F4
    GlobalNamespace::SongPackMask get_songPacks();
    // public System.Void set_songPacks(SongPackMask value)
    // Offset: 0x113F200
    void set_songPacks(GlobalNamespace::SongPackMask value);
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x113F208
    bool get_isMyPartyOwner();
    // public System.Void set_isMyPartyOwner(System.Boolean value)
    // Offset: 0x113F210
    void set_isMyPartyOwner(bool value);
    // public System.Boolean get_isOpenParty()
    // Offset: 0x113F21C
    bool get_isOpenParty();
    // public System.Void set_isOpenParty(System.Boolean value)
    // Offset: 0x113F224
    void set_isOpenParty(bool value);
    // public System.Boolean get_isPlayer()
    // Offset: 0x113F230
    bool get_isPlayer();
    // protected System.Void set_isPlayer(System.Boolean value)
    // Offset: 0x113F2E8
    void set_isPlayer(bool value);
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x113F3D8
    bool get_isDedicatedServer();
    // protected System.Void set_isDedicatedServer(System.Boolean value)
    // Offset: 0x113F428
    void set_isDedicatedServer(bool value);
    // public System.Boolean get_isSpectating()
    // Offset: 0x113F488
    bool get_isSpectating();
    // protected System.Void set_isSpectating(System.Boolean value)
    // Offset: 0x113F4D8
    void set_isSpectating(bool value);
    // public System.Boolean get_canJoin()
    // Offset: 0x113F538
    bool get_canJoin();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x113F540
    bool get_requiresPassword();
    // public System.Void set_requiresPassword(System.Boolean value)
    // Offset: 0x113F548
    void set_requiresPassword(bool value);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x113F554
    bool get_isWaitingOnJoin();
    // public System.Void set_isWaitingOnJoin(System.Boolean value)
    // Offset: 0x113F55C
    void set_isWaitingOnJoin(bool value);
    // public System.Boolean get_canInvite()
    // Offset: 0x113F568
    bool get_canInvite();
    // public System.Void set_canInvite(System.Boolean value)
    // Offset: 0x113F570
    void set_canInvite(bool value);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x113F57C
    bool get_isWaitingOnInvite();
    // public System.Void set_isWaitingOnInvite(System.Boolean value)
    // Offset: 0x113F584
    void set_isWaitingOnInvite(bool value);
    // public System.Boolean get_canKick()
    // Offset: 0x113F590
    bool get_canKick();
    // public System.Void set_canKick(System.Boolean value)
    // Offset: 0x113F598
    void set_canKick(bool value);
    // public System.Boolean get_canLeave()
    // Offset: 0x113F5A4
    bool get_canLeave();
    // public System.Void set_canLeave(System.Boolean value)
    // Offset: 0x113F5AC
    void set_canLeave(bool value);
    // public System.Boolean get_canBlock()
    // Offset: 0x113F5B8
    bool get_canBlock();
    // public System.Void set_canBlock(System.Boolean value)
    // Offset: 0x113F5C0
    void set_canBlock(bool value);
    // public System.Boolean get_canUnblock()
    // Offset: 0x113F5CC
    bool get_canUnblock();
    // public System.Void set_canUnblock(System.Boolean value)
    // Offset: 0x113F5D4
    void set_canUnblock(bool value);
    // public System.Boolean get_wantsToPlayNextLevel()
    // Offset: 0x113F5E0
    bool get_wantsToPlayNextLevel();
    // public System.Void set_wantsToPlayNextLevel(System.Boolean value)
    // Offset: 0x113F630
    void set_wantsToPlayNextLevel(bool value);
    // public System.Boolean get_wasActiveAtLevelStart()
    // Offset: 0x113F690
    bool get_wasActiveAtLevelStart();
    // public System.Void set_wasActiveAtLevelStart(System.Boolean value)
    // Offset: 0x113F6E0
    void set_wasActiveAtLevelStart(bool value);
    // public System.Boolean get_isActive()
    // Offset: 0x113F740
    bool get_isActive();
    // public System.Void set_isActive(System.Boolean value)
    // Offset: 0x113F790
    void set_isActive(bool value);
    // public System.Boolean get_finishedLevel()
    // Offset: 0x113F7F0
    bool get_finishedLevel();
    // public System.Void set_finishedLevel(System.Boolean value)
    // Offset: 0x113F840
    void set_finishedLevel(bool value);
    // public System.Void .ctor(MockPlayerSettings settings, System.Boolean isLocalPlayer)
    // Offset: 0x113F8A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayer* New_ctor(GlobalNamespace::MockPlayerSettings* settings, bool isLocalPlayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayer*, creationType>(settings, isLocalPlayer)));
    }
    // public System.Void SetState(System.String state, System.Boolean value)
    // Offset: 0x113F348
    void SetState(::Il2CppString* state, bool value);
    // public System.Boolean HasState(System.String state)
    // Offset: 0x113F280
    bool HasState(::Il2CppString* state);
    // public System.Void Connect(IMultiplayerSessionManager multiplayerSessionManager, AvatarPartsModel avatarPartsModel, BeatmapLevelsModel beatmapLevelsModel, NodePoseSyncStateManager nodePoseSyncStateManager)
    // Offset: 0x113F94C
    void Connect(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::AvatarPartsModel* avatarPartsModel, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager);
    // public System.Void Disconnect()
    // Offset: 0x1140270
    void Disconnect();
    // public System.Void Unblock()
    // Offset: 0x11402A4
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x1140304
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x1140364
    void SendInviteResponse(bool accept);
    // public System.Void Block()
    // Offset: 0x11403C4
    void Block();
    // public System.Void Leave()
    // Offset: 0x1140424
    void Leave();
    // public System.Void Kick()
    // Offset: 0x1140428
    void Kick();
    // public System.Void Invite()
    // Offset: 0x1140488
    void Invite();
    // public System.Void Join(System.String password)
    // Offset: 0x11404E8
    void Join(::Il2CppString* password);
    // public System.Void Join()
    // Offset: 0x1140548
    void Join();
    // public System.Void SimulateFail()
    // Offset: 0x11405A8
    void SimulateFail();
    // public System.Void SimulateGiveUp()
    // Offset: 0x11405F8
    void SimulateGiveUp();
  }; // MockPlayer
  #pragma pack(pop)
  static check_size<sizeof(MockPlayer), 200 + sizeof(GlobalNamespace::MockPlayerFiniteStateMachine*)> __GlobalNamespace_MockPlayerSizeCheck;
  static_assert(sizeof(MockPlayer) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockPlayer*, "", "MockPlayer");
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isReady
// Il2CppName: get_isReady
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isReady
// Il2CppName: set_isReady
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isMe
// Il2CppName: get_isMe
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_userId
// Il2CppName: get_userId
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_userName
// Il2CppName: get_userName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_sortIndex
// Il2CppName: get_sortIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_autoConnect
// Il2CppName: get_autoConnect
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_inactiveByDefault
// Il2CppName: get_inactiveByDefault
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isConnected
// Il2CppName: get_isConnected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isConnected
// Il2CppName: set_isConnected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_multiplayerAvatarData
// Il2CppName: get_multiplayerAvatarData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_multiplayerAvatarData
// Il2CppName: set_multiplayerAvatarData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isConnectionOwner
// Il2CppName: set_isConnectionOwner
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_disconnectedReason
// Il2CppName: get_disconnectedReason
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_currentLatency
// Il2CppName: get_currentLatency
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isKicked
// Il2CppName: get_isKicked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isKicked
// Il2CppName: set_isKicked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_currentPartySize
// Il2CppName: set_currentPartySize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_maxPartySize
// Il2CppName: get_maxPartySize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_maxPartySize
// Il2CppName: set_maxPartySize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_difficulties
// Il2CppName: get_difficulties
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_difficulties
// Il2CppName: set_difficulties
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_modifiers
// Il2CppName: get_modifiers
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_modifiers
// Il2CppName: set_modifiers
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_songPacks
// Il2CppName: get_songPacks
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_songPacks
// Il2CppName: set_songPacks
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isMyPartyOwner
// Il2CppName: set_isMyPartyOwner
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isOpenParty
// Il2CppName: get_isOpenParty
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isOpenParty
// Il2CppName: set_isOpenParty
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isPlayer
// Il2CppName: get_isPlayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isPlayer
// Il2CppName: set_isPlayer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isDedicatedServer
// Il2CppName: set_isDedicatedServer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isSpectating
// Il2CppName: get_isSpectating
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isSpectating
// Il2CppName: set_isSpectating
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canJoin
// Il2CppName: get_canJoin
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_requiresPassword
// Il2CppName: set_requiresPassword
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isWaitingOnJoin
// Il2CppName: set_isWaitingOnJoin
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canInvite
// Il2CppName: get_canInvite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canInvite
// Il2CppName: set_canInvite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isWaitingOnInvite
// Il2CppName: set_isWaitingOnInvite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canKick
// Il2CppName: get_canKick
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canKick
// Il2CppName: set_canKick
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canLeave
// Il2CppName: get_canLeave
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canLeave
// Il2CppName: set_canLeave
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canBlock
// Il2CppName: get_canBlock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canBlock
// Il2CppName: set_canBlock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canUnblock
// Il2CppName: get_canUnblock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canUnblock
// Il2CppName: set_canUnblock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel
// Il2CppName: get_wantsToPlayNextLevel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel
// Il2CppName: set_wantsToPlayNextLevel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart
// Il2CppName: get_wasActiveAtLevelStart
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart
// Il2CppName: set_wasActiveAtLevelStart
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isActive
// Il2CppName: get_isActive
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isActive
// Il2CppName: set_isActive
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_finishedLevel
// Il2CppName: get_finishedLevel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_finishedLevel
// Il2CppName: set_finishedLevel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SetState
// Il2CppName: SetState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::HasState
// Il2CppName: HasState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Connect
// Il2CppName: Connect
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Disconnect
// Il2CppName: Disconnect
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Unblock
// Il2CppName: Unblock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Block
// Il2CppName: Block
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Leave
// Il2CppName: Leave
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Kick
// Il2CppName: Kick
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Invite
// Il2CppName: Invite
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Join
// Il2CppName: Join
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Join
// Il2CppName: Join
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SimulateFail
// Il2CppName: SimulateFail
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SimulateGiveUp
// Il2CppName: SimulateGiveUp
// Cannot perform method pointer template specialization from operators!
