// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockPlayerSettings
  class MockPlayerSettings;
  // Forward declaring type: MockPlayerFiniteStateMachine
  class MockPlayerFiniteStateMachine;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: AvatarPartsModel
  class AvatarPartsModel;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: NodePoseSyncStateManager
  class NodePoseSyncStateManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayer
  class MockPlayer : public ::Il2CppObject/*, public GlobalNamespace::IConnectedPlayer, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xE1D870
    // private readonly System.Boolean <isMe>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D880
    // private System.Boolean <isConnected>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnected and: multiplayerAvatarData
    char __padding1[0x6] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D890
    // private MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
    // Size: 0x70
    // Offset: 0x18
    GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerAvatarData) == 0x70);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8A0
    // private System.Boolean <isConnectionOwner>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool isConnectionOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8B0
    // private System.Boolean <isKicked>k__BackingField
    // Size: 0x1
    // Offset: 0x89
    bool isKicked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isKicked and: currentPartySize
    char __padding4[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D8C0
    // private System.Int32 <currentPartySize>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int currentPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8D0
    // private System.Int32 <maxPartySize>k__BackingField
    // Size: 0x4
    // Offset: 0x90
    int maxPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xE1D8E0
    // private BeatmapDifficultyMask <difficulties>k__BackingField
    // Size: 0x1
    // Offset: 0x94
    GlobalNamespace::BeatmapDifficultyMask difficulties;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficultyMask) == 0x1);
    // Padding between fields: difficulties and: modifiers
    char __padding7[0x1] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE1D8F0
    // private GameplayModifierMask <modifiers>k__BackingField
    // Size: 0x2
    // Offset: 0x96
    GlobalNamespace::GameplayModifierMask modifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifierMask) == 0x2);
    // [CompilerGeneratedAttribute] Offset: 0xE1D900
    // private SongPackMask <songPacks>k__BackingField
    // Size: 0x10
    // Offset: 0x98
    GlobalNamespace::SongPackMask songPacks;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPackMask) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xE1D910
    // private System.Boolean <isMyPartyOwner>k__BackingField
    // Size: 0x1
    // Offset: 0xA8
    bool isMyPartyOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D920
    // private System.Boolean <isOpenParty>k__BackingField
    // Size: 0x1
    // Offset: 0xA9
    bool isOpenParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D930
    // private System.Boolean <requiresPassword>k__BackingField
    // Size: 0x1
    // Offset: 0xAA
    bool requiresPassword;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D940
    // private System.Boolean <isWaitingOnJoin>k__BackingField
    // Size: 0x1
    // Offset: 0xAB
    bool isWaitingOnJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D950
    // private System.Boolean <canInvite>k__BackingField
    // Size: 0x1
    // Offset: 0xAC
    bool canInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D960
    // private System.Boolean <isWaitingOnInvite>k__BackingField
    // Size: 0x1
    // Offset: 0xAD
    bool isWaitingOnInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D970
    // private System.Boolean <canKick>k__BackingField
    // Size: 0x1
    // Offset: 0xAE
    bool canKick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D980
    // private System.Boolean <canLeave>k__BackingField
    // Size: 0x1
    // Offset: 0xAF
    bool canLeave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D990
    // private System.Boolean <canBlock>k__BackingField
    // Size: 0x1
    // Offset: 0xB0
    bool canBlock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE1D9A0
    // private System.Boolean <canUnblock>k__BackingField
    // Size: 0x1
    // Offset: 0xB1
    bool canUnblock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isReady
    // Size: 0x1
    // Offset: 0xB2
    bool isReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isReady and: playerState
    char __padding20[0x5] = {};
    // private readonly System.Collections.Generic.HashSet`1<System.String> _playerState
    // Size: 0x8
    // Offset: 0xB8
    System::Collections::Generic::HashSet_1<::Il2CppString*>* playerState;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<::Il2CppString*>*) == 0x8);
    // private readonly MockPlayerSettings _settings
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::MockPlayerSettings* settings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockPlayerSettings*) == 0x8);
    // private MockPlayerFiniteStateMachine _fsm
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::MockPlayerFiniteStateMachine* fsm;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockPlayerFiniteStateMachine*) == 0x8);
    // Creating value type constructor for type: MockPlayer
    MockPlayer(bool isMe_ = {}, bool isConnected_ = {}, GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData_ = {}, bool isConnectionOwner_ = {}, bool isKicked_ = {}, int currentPartySize_ = {}, int maxPartySize_ = {}, GlobalNamespace::BeatmapDifficultyMask difficulties_ = {}, GlobalNamespace::GameplayModifierMask modifiers_ = {}, GlobalNamespace::SongPackMask songPacks_ = {}, bool isMyPartyOwner_ = {}, bool isOpenParty_ = {}, bool requiresPassword_ = {}, bool isWaitingOnJoin_ = {}, bool canInvite_ = {}, bool isWaitingOnInvite_ = {}, bool canKick_ = {}, bool canLeave_ = {}, bool canBlock_ = {}, bool canUnblock_ = {}, bool isReady_ = {}, System::Collections::Generic::HashSet_1<::Il2CppString*>* playerState_ = {}, GlobalNamespace::MockPlayerSettings* settings_ = {}, GlobalNamespace::MockPlayerFiniteStateMachine* fsm_ = {}) noexcept : isMe{isMe_}, isConnected{isConnected_}, multiplayerAvatarData{multiplayerAvatarData_}, isConnectionOwner{isConnectionOwner_}, isKicked{isKicked_}, currentPartySize{currentPartySize_}, maxPartySize{maxPartySize_}, difficulties{difficulties_}, modifiers{modifiers_}, songPacks{songPacks_}, isMyPartyOwner{isMyPartyOwner_}, isOpenParty{isOpenParty_}, requiresPassword{requiresPassword_}, isWaitingOnJoin{isWaitingOnJoin_}, canInvite{canInvite_}, isWaitingOnInvite{isWaitingOnInvite_}, canKick{canKick_}, canLeave{canLeave_}, canBlock{canBlock_}, canUnblock{canUnblock_}, isReady{isReady_}, playerState{playerState_}, settings{settings_}, fsm{fsm_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectedPlayer
    operator GlobalNamespace::IConnectedPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectedPlayer*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // public System.Boolean get_isReady()
    // Offset: 0x1139774
    bool get_isReady();
    // public System.Void set_isReady(System.Boolean value)
    // Offset: 0x113977C
    void set_isReady(bool value);
    // public System.Boolean get_isMe()
    // Offset: 0x11397B8
    bool get_isMe();
    // public System.String get_userId()
    // Offset: 0x11397C0
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x11397DC
    ::Il2CppString* get_userName();
    // public System.Int32 get_sortIndex()
    // Offset: 0x11397F8
    int get_sortIndex();
    // public System.Boolean get_autoConnect()
    // Offset: 0x1139814
    bool get_autoConnect();
    // public System.Boolean get_inactiveByDefault()
    // Offset: 0x1139830
    bool get_inactiveByDefault();
    // public System.Boolean get_isConnected()
    // Offset: 0x113984C
    bool get_isConnected();
    // protected System.Void set_isConnected(System.Boolean value)
    // Offset: 0x1139854
    void set_isConnected(bool value);
    // public MultiplayerAvatarData get_multiplayerAvatarData()
    // Offset: 0x1139860
    GlobalNamespace::MultiplayerAvatarData get_multiplayerAvatarData();
    // private System.Void set_multiplayerAvatarData(MultiplayerAvatarData value)
    // Offset: 0x1139870
    void set_multiplayerAvatarData(GlobalNamespace::MultiplayerAvatarData value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x113988C
    bool get_isConnectionOwner();
    // public System.Void set_isConnectionOwner(System.Boolean value)
    // Offset: 0x1139894
    void set_isConnectionOwner(bool value);
    // public DisconnectedReason get_disconnectedReason()
    // Offset: 0x11398A0
    GlobalNamespace::DisconnectedReason get_disconnectedReason();
    // public System.Single get_offsetSyncTime()
    // Offset: 0x11398A8
    float get_offsetSyncTime();
    // public System.Single get_currentLatency()
    // Offset: 0x1139900
    float get_currentLatency();
    // public System.Boolean get_isKicked()
    // Offset: 0x1139938
    bool get_isKicked();
    // public System.Void set_isKicked(System.Boolean value)
    // Offset: 0x1139940
    void set_isKicked(bool value);
    // public System.Int32 get_currentPartySize()
    // Offset: 0x113994C
    int get_currentPartySize();
    // public System.Void set_currentPartySize(System.Int32 value)
    // Offset: 0x1139954
    void set_currentPartySize(int value);
    // public System.Int32 get_maxPartySize()
    // Offset: 0x113995C
    int get_maxPartySize();
    // public System.Void set_maxPartySize(System.Int32 value)
    // Offset: 0x1139964
    void set_maxPartySize(int value);
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x113996C
    GlobalNamespace::BeatmapDifficultyMask get_difficulties();
    // public System.Void set_difficulties(BeatmapDifficultyMask value)
    // Offset: 0x1139974
    void set_difficulties(GlobalNamespace::BeatmapDifficultyMask value);
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x113997C
    GlobalNamespace::GameplayModifierMask get_modifiers();
    // public System.Void set_modifiers(GameplayModifierMask value)
    // Offset: 0x1139984
    void set_modifiers(GlobalNamespace::GameplayModifierMask value);
    // public SongPackMask get_songPacks()
    // Offset: 0x113998C
    GlobalNamespace::SongPackMask get_songPacks();
    // public System.Void set_songPacks(SongPackMask value)
    // Offset: 0x1139998
    void set_songPacks(GlobalNamespace::SongPackMask value);
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x11399A0
    bool get_isMyPartyOwner();
    // public System.Void set_isMyPartyOwner(System.Boolean value)
    // Offset: 0x11399A8
    void set_isMyPartyOwner(bool value);
    // public System.Boolean get_isOpenParty()
    // Offset: 0x11399B4
    bool get_isOpenParty();
    // public System.Void set_isOpenParty(System.Boolean value)
    // Offset: 0x11399BC
    void set_isOpenParty(bool value);
    // public System.Boolean get_isPlayer()
    // Offset: 0x11399C8
    bool get_isPlayer();
    // protected System.Void set_isPlayer(System.Boolean value)
    // Offset: 0x1139A80
    void set_isPlayer(bool value);
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x1139B70
    bool get_isDedicatedServer();
    // protected System.Void set_isDedicatedServer(System.Boolean value)
    // Offset: 0x1139BC0
    void set_isDedicatedServer(bool value);
    // public System.Boolean get_isSpectating()
    // Offset: 0x1139C20
    bool get_isSpectating();
    // protected System.Void set_isSpectating(System.Boolean value)
    // Offset: 0x1139C70
    void set_isSpectating(bool value);
    // public System.Boolean get_canJoin()
    // Offset: 0x1139CD0
    bool get_canJoin();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x1139CD8
    bool get_requiresPassword();
    // public System.Void set_requiresPassword(System.Boolean value)
    // Offset: 0x1139CE0
    void set_requiresPassword(bool value);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x1139CEC
    bool get_isWaitingOnJoin();
    // public System.Void set_isWaitingOnJoin(System.Boolean value)
    // Offset: 0x1139CF4
    void set_isWaitingOnJoin(bool value);
    // public System.Boolean get_canInvite()
    // Offset: 0x1139D00
    bool get_canInvite();
    // public System.Void set_canInvite(System.Boolean value)
    // Offset: 0x1139D08
    void set_canInvite(bool value);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x1139D14
    bool get_isWaitingOnInvite();
    // public System.Void set_isWaitingOnInvite(System.Boolean value)
    // Offset: 0x1139D1C
    void set_isWaitingOnInvite(bool value);
    // public System.Boolean get_canKick()
    // Offset: 0x1139D28
    bool get_canKick();
    // public System.Void set_canKick(System.Boolean value)
    // Offset: 0x1139D30
    void set_canKick(bool value);
    // public System.Boolean get_canLeave()
    // Offset: 0x1139D3C
    bool get_canLeave();
    // public System.Void set_canLeave(System.Boolean value)
    // Offset: 0x1139D44
    void set_canLeave(bool value);
    // public System.Boolean get_canBlock()
    // Offset: 0x1139D50
    bool get_canBlock();
    // public System.Void set_canBlock(System.Boolean value)
    // Offset: 0x1139D58
    void set_canBlock(bool value);
    // public System.Boolean get_canUnblock()
    // Offset: 0x1139D64
    bool get_canUnblock();
    // public System.Void set_canUnblock(System.Boolean value)
    // Offset: 0x1139D6C
    void set_canUnblock(bool value);
    // public System.Boolean get_wantsToPlayNextLevel()
    // Offset: 0x1139D78
    bool get_wantsToPlayNextLevel();
    // public System.Void set_wantsToPlayNextLevel(System.Boolean value)
    // Offset: 0x1139DC8
    void set_wantsToPlayNextLevel(bool value);
    // public System.Boolean get_wasActiveAtLevelStart()
    // Offset: 0x1139E28
    bool get_wasActiveAtLevelStart();
    // public System.Void set_wasActiveAtLevelStart(System.Boolean value)
    // Offset: 0x1139E78
    void set_wasActiveAtLevelStart(bool value);
    // public System.Boolean get_isActive()
    // Offset: 0x1139ED8
    bool get_isActive();
    // public System.Void set_isActive(System.Boolean value)
    // Offset: 0x1139F28
    void set_isActive(bool value);
    // public System.Boolean get_finishedLevel()
    // Offset: 0x1139F88
    bool get_finishedLevel();
    // public System.Void set_finishedLevel(System.Boolean value)
    // Offset: 0x1139FD8
    void set_finishedLevel(bool value);
    // public System.Void .ctor(MockPlayerSettings settings, System.Boolean isLocalPlayer)
    // Offset: 0x113A038
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayer* New_ctor(GlobalNamespace::MockPlayerSettings* settings, bool isLocalPlayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayer*, creationType>(settings, isLocalPlayer)));
    }
    // public System.Void SetState(System.String state, System.Boolean value)
    // Offset: 0x1139AE0
    void SetState(::Il2CppString* state, bool value);
    // public System.Boolean HasState(System.String state)
    // Offset: 0x1139A18
    bool HasState(::Il2CppString* state);
    // public System.Void Connect(IMultiplayerSessionManager multiplayerSessionManager, AvatarPartsModel avatarPartsModel, BeatmapLevelsModel beatmapLevelsModel, NodePoseSyncStateManager nodePoseSyncStateManager)
    // Offset: 0x113A0E4
    void Connect(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::AvatarPartsModel* avatarPartsModel, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager);
    // public System.Void Disconnect()
    // Offset: 0x113AA08
    void Disconnect();
    // public System.Void Unblock()
    // Offset: 0x113AA3C
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x113AA9C
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x113AAFC
    void SendInviteResponse(bool accept);
    // public System.Void Block()
    // Offset: 0x113AB5C
    void Block();
    // public System.Void Leave()
    // Offset: 0x113ABBC
    void Leave();
    // public System.Void Kick()
    // Offset: 0x113ABC0
    void Kick();
    // public System.Void Invite()
    // Offset: 0x113AC20
    void Invite();
    // public System.Void Join(System.String password)
    // Offset: 0x113AC80
    void Join(::Il2CppString* password);
    // public System.Void Join()
    // Offset: 0x113ACE0
    void Join();
    // public System.Void SimulateFail()
    // Offset: 0x113AD40
    void SimulateFail();
    // public System.Void SimulateGiveUp()
    // Offset: 0x113AD90
    void SimulateGiveUp();
  }; // MockPlayer
  #pragma pack(pop)
  static check_size<sizeof(MockPlayer), 200 + sizeof(GlobalNamespace::MockPlayerFiniteStateMachine*)> __GlobalNamespace_MockPlayerSizeCheck;
  static_assert(sizeof(MockPlayer) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockPlayer*, "", "MockPlayer");
