// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ConnectionFailedReason
  struct ConnectionFailedReason;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ConnectionFailedReason, "", "ConnectionFailedReason");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: ConnectionFailedReason
  // [TokenAttribute] Offset: FFFFFFFF
  struct ConnectionFailedReason/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ConnectionFailedReason
    constexpr ConnectionFailedReason(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public ConnectionFailedReason None
    static constexpr const int None = 0;
    // Get static field: static public ConnectionFailedReason None
    static ::GlobalNamespace::ConnectionFailedReason _get_None();
    // Set static field: static public ConnectionFailedReason None
    static void _set_None(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason Unknown
    static constexpr const int Unknown = 1;
    // Get static field: static public ConnectionFailedReason Unknown
    static ::GlobalNamespace::ConnectionFailedReason _get_Unknown();
    // Set static field: static public ConnectionFailedReason Unknown
    static void _set_Unknown(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason ConnectionCanceled
    static constexpr const int ConnectionCanceled = 2;
    // Get static field: static public ConnectionFailedReason ConnectionCanceled
    static ::GlobalNamespace::ConnectionFailedReason _get_ConnectionCanceled();
    // Set static field: static public ConnectionFailedReason ConnectionCanceled
    static void _set_ConnectionCanceled(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason ServerUnreachable
    static constexpr const int ServerUnreachable = 3;
    // Get static field: static public ConnectionFailedReason ServerUnreachable
    static ::GlobalNamespace::ConnectionFailedReason _get_ServerUnreachable();
    // Set static field: static public ConnectionFailedReason ServerUnreachable
    static void _set_ServerUnreachable(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason ServerAlreadyExists
    static constexpr const int ServerAlreadyExists = 4;
    // Get static field: static public ConnectionFailedReason ServerAlreadyExists
    static ::GlobalNamespace::ConnectionFailedReason _get_ServerAlreadyExists();
    // Set static field: static public ConnectionFailedReason ServerAlreadyExists
    static void _set_ServerAlreadyExists(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason ServerDoesNotExist
    static constexpr const int ServerDoesNotExist = 5;
    // Get static field: static public ConnectionFailedReason ServerDoesNotExist
    static ::GlobalNamespace::ConnectionFailedReason _get_ServerDoesNotExist();
    // Set static field: static public ConnectionFailedReason ServerDoesNotExist
    static void _set_ServerDoesNotExist(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason ServerAtCapacity
    static constexpr const int ServerAtCapacity = 6;
    // Get static field: static public ConnectionFailedReason ServerAtCapacity
    static ::GlobalNamespace::ConnectionFailedReason _get_ServerAtCapacity();
    // Set static field: static public ConnectionFailedReason ServerAtCapacity
    static void _set_ServerAtCapacity(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason VersionMismatch
    static constexpr const int VersionMismatch = 7;
    // Get static field: static public ConnectionFailedReason VersionMismatch
    static ::GlobalNamespace::ConnectionFailedReason _get_VersionMismatch();
    // Set static field: static public ConnectionFailedReason VersionMismatch
    static void _set_VersionMismatch(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason InvalidPassword
    static constexpr const int InvalidPassword = 8;
    // Get static field: static public ConnectionFailedReason InvalidPassword
    static ::GlobalNamespace::ConnectionFailedReason _get_InvalidPassword();
    // Set static field: static public ConnectionFailedReason InvalidPassword
    static void _set_InvalidPassword(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason MultiplayerApiUnreachable
    static constexpr const int MultiplayerApiUnreachable = 9;
    // Get static field: static public ConnectionFailedReason MultiplayerApiUnreachable
    static ::GlobalNamespace::ConnectionFailedReason _get_MultiplayerApiUnreachable();
    // Set static field: static public ConnectionFailedReason MultiplayerApiUnreachable
    static void _set_MultiplayerApiUnreachable(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason AuthenticationFailed
    static constexpr const int AuthenticationFailed = 10;
    // Get static field: static public ConnectionFailedReason AuthenticationFailed
    static ::GlobalNamespace::ConnectionFailedReason _get_AuthenticationFailed();
    // Set static field: static public ConnectionFailedReason AuthenticationFailed
    static void _set_AuthenticationFailed(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason NetworkNotConnected
    static constexpr const int NetworkNotConnected = 11;
    // Get static field: static public ConnectionFailedReason NetworkNotConnected
    static ::GlobalNamespace::ConnectionFailedReason _get_NetworkNotConnected();
    // Set static field: static public ConnectionFailedReason NetworkNotConnected
    static void _set_NetworkNotConnected(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason CertificateValidationFailed
    static constexpr const int CertificateValidationFailed = 12;
    // Get static field: static public ConnectionFailedReason CertificateValidationFailed
    static ::GlobalNamespace::ConnectionFailedReason _get_CertificateValidationFailed();
    // Set static field: static public ConnectionFailedReason CertificateValidationFailed
    static void _set_CertificateValidationFailed(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason ServerIsTerminating
    static constexpr const int ServerIsTerminating = 13;
    // Get static field: static public ConnectionFailedReason ServerIsTerminating
    static ::GlobalNamespace::ConnectionFailedReason _get_ServerIsTerminating();
    // Set static field: static public ConnectionFailedReason ServerIsTerminating
    static void _set_ServerIsTerminating(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason Timeout
    static constexpr const int Timeout = 14;
    // Get static field: static public ConnectionFailedReason Timeout
    static ::GlobalNamespace::ConnectionFailedReason _get_Timeout();
    // Set static field: static public ConnectionFailedReason Timeout
    static void _set_Timeout(::GlobalNamespace::ConnectionFailedReason value);
    // static field const value: static public ConnectionFailedReason FailedToFindMatch
    static constexpr const int FailedToFindMatch = 15;
    // Get static field: static public ConnectionFailedReason FailedToFindMatch
    static ::GlobalNamespace::ConnectionFailedReason _get_FailedToFindMatch();
    // Set static field: static public ConnectionFailedReason FailedToFindMatch
    static void _set_FailedToFindMatch(::GlobalNamespace::ConnectionFailedReason value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // ConnectionFailedReason
  #pragma pack(pop)
  static check_size<sizeof(ConnectionFailedReason), 0 + sizeof(int)> __GlobalNamespace_ConnectionFailedReasonSizeCheck;
  static_assert(sizeof(ConnectionFailedReason) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
