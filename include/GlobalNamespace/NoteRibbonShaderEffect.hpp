// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: PlayerTransforms
  class PlayerTransforms;
  // Forward declaring type: NoteData
  class NoteData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteRibbonShaderEffect
  class NoteRibbonShaderEffect : public UnityEngine::MonoBehaviour {
    public:
    // private MaterialPropertyBlockController _jumpPartMaterialPropertyBlockController
    // Offset: 0x18
    GlobalNamespace::MaterialPropertyBlockController* jumpPartMaterialPropertyBlockController;
    // private MaterialPropertyBlockController _movePartMaterialPropertyBlockController
    // Offset: 0x20
    GlobalNamespace::MaterialPropertyBlockController* movePartMaterialPropertyBlockController;
    // private UnityEngine.Transform _jumpPartTransform
    // Offset: 0x28
    UnityEngine::Transform* jumpPartTransform;
    // private UnityEngine.Transform _movePartTransform
    // Offset: 0x30
    UnityEngine::Transform* movePartTransform;
    // private UnityEngine.MeshFilter _jumpPartMeshFilter
    // Offset: 0x38
    UnityEngine::MeshFilter* jumpPartMeshFilter;
    // private UnityEngine.MeshFilter _movePartMeshFilter
    // Offset: 0x40
    UnityEngine::MeshFilter* movePartMeshFilter;
    // private readonly ColorManager _colorManager
    // Offset: 0x48
    GlobalNamespace::ColorManager* colorManager;
    // private readonly PlayerTransforms _playerTransforms
    // Offset: 0x50
    GlobalNamespace::PlayerTransforms* playerTransforms;
    // private System.Single _width
    // Offset: 0x58
    float width;
    // private System.Single _jumpDuration
    // Offset: 0x5C
    float jumpDuration;
    // private System.Single _ribbonJumpDuration
    // Offset: 0x60
    float ribbonJumpDuration;
    // private System.Single _moveDuration
    // Offset: 0x64
    float moveDuration;
    // private UnityEngine.Quaternion _inverseWorldRotation
    // Offset: 0x68
    UnityEngine::Quaternion inverseWorldRotation;
    // private System.Single _moveEndBeginTime
    // Offset: 0x78
    float moveEndBeginTime;
    // private System.Single _moveEndFinishTime
    // Offset: 0x7C
    float moveEndFinishTime;
    // private System.Single _alpha
    // Offset: 0x80
    float alpha;
    // private System.Single _widthMultiplier
    // Offset: 0x84
    float widthMultiplier;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Int32 _splitPointId
    static int _get__splitPointId();
    // Set static field: static private readonly System.Int32 _splitPointId
    static void _set__splitPointId(int value);
    // Get static field: static private readonly System.Int32 _movementSpeedId
    static int _get__movementSpeedId();
    // Set static field: static private readonly System.Int32 _movementSpeedId
    static void _set__movementSpeedId(int value);
    // Get static field: static private readonly System.Int32 _colorId
    static int _get__colorId();
    // Set static field: static private readonly System.Int32 _colorId
    static void _set__colorId(int value);
    // Get static field: static private readonly System.Int32 _jumpGravityId
    static int _get__jumpGravityId();
    // Set static field: static private readonly System.Int32 _jumpGravityId
    static void _set__jumpGravityId(int value);
    // Get static field: static private readonly System.Int32 _jumpYVelocityId
    static int _get__jumpYVelocityId();
    // Set static field: static private readonly System.Int32 _jumpYVelocityId
    static void _set__jumpYVelocityId(int value);
    // Get static field: static private readonly System.Int32 _widthId
    static int _get__widthId();
    // Set static field: static private readonly System.Int32 _widthId
    static void _set__widthId(int value);
    // Get static field: static private readonly System.Int32 _lengthId
    static int _get__lengthId();
    // Set static field: static private readonly System.Int32 _lengthId
    static void _set__lengthId(int value);
    // Get static field: static private readonly System.Int32 _startOffsetId
    static int _get__startOffsetId();
    // Set static field: static private readonly System.Int32 _startOffsetId
    static void _set__startOffsetId(int value);
    // Get static field: static private readonly System.Int32 _endOffsetId
    static int _get__endOffsetId();
    // Set static field: static private readonly System.Int32 _endOffsetId
    static void _set__endOffsetId(int value);
    // Get static field: static private readonly System.Int32 _posOffsetId
    static int _get__posOffsetId();
    // Set static field: static private readonly System.Int32 _posOffsetId
    static void _set__posOffsetId(int value);
    // Get static field: static private readonly System.Int32 _alphaId
    static int _get__alphaId();
    // Set static field: static private readonly System.Int32 _alphaId
    static void _set__alphaId(int value);
    // static field const value: static private System.Single kJumpRibbonLengthOffset
    static constexpr const float kJumpRibbonLengthOffset = 3.5;
    // Get static field: static private System.Single kJumpRibbonLengthOffset
    static float _get_kJumpRibbonLengthOffset();
    // Set static field: static private System.Single kJumpRibbonLengthOffset
    static void _set_kJumpRibbonLengthOffset(float value);
    // public System.Void Init(NoteData noteData, System.Single worldRotation, System.Single width, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Single endRotation)
    // Offset: 0x10B1568
    void Init(GlobalNamespace::NoteData* noteData, float worldRotation, float width, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float endRotation);
    // public System.Void ManualUpdate(System.Single time)
    // Offset: 0x10B1D2C
    void ManualUpdate(float time);
    // public System.Void SetSplitPoint(UnityEngine.Vector2 splitPoint)
    // Offset: 0x10B2008
    void SetSplitPoint(UnityEngine::Vector2 splitPoint);
    // public System.Void SetAlpha(System.Single alpha)
    // Offset: 0x10B2134
    void SetAlpha(float alpha);
    // public System.Void SetWidthMultiplier(System.Single widthMultiplier)
    // Offset: 0x10B213C
    void SetWidthMultiplier(float widthMultiplier);
    // public System.Void set_hide(System.Boolean value)
    // Offset: 0x10B2144
    void set_hide(bool value);
    // public System.Void .ctor()
    // Offset: 0x10B221C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NoteRibbonShaderEffect* New_ctor();
    // static private System.Void .cctor()
    // Offset: 0x10B2224
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // NoteRibbonShaderEffect
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteRibbonShaderEffect*, "", "NoteRibbonShaderEffect");
#pragma pack(pop)
