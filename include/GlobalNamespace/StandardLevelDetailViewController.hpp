// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EventBinder
  class EventBinder;
  // Forward declaring type: StandardLevelDetailView
  class StandardLevelDetailView;
  // Forward declaring type: StandardLevelBuyView
  class StandardLevelBuyView;
  // Forward declaring type: StandardLevelBuyInfoView
  class StandardLevelBuyInfoView;
  // Forward declaring type: LoadingControl
  class LoadingControl;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
  // Forward declaring type: DlcPromoExperimentModel
  class DlcPromoExperimentModel;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Skipping declaration: ContentType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x129
  #pragma pack(push, 1)
  // Autogenerated type: StandardLevelDetailViewController
  class StandardLevelDetailViewController : public HMUI::ViewController {
    public:
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::ContentType
    struct ContentType;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$$c__DisplayClass47_0
    class $$c__DisplayClass47_0;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$LoadBeatmapLevelAsync$d__54
    struct $LoadBeatmapLevelAsync$d__54;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$OpenLevelProductStoreOrShowBuyInfoAsync$d__57
    struct $OpenLevelProductStoreOrShowBuyInfoAsync$d__57;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$OpenLevelProductStoreAsync$d__59
    struct $OpenLevelProductStoreAsync$d__59;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$OpenLevelPackProductStoreAsync$d__61
    struct $OpenLevelPackProductStoreAsync$d__61;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$RefreshAvailabilityAsync$d__63
    struct $RefreshAvailabilityAsync$d__63;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: StandardLevelDetailViewController/ContentType
    struct ContentType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ContentType
      constexpr ContentType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public StandardLevelDetailViewController/ContentType Loading
      static constexpr const int Loading = 0;
      // Get static field: static public StandardLevelDetailViewController/ContentType Loading
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Loading();
      // Set static field: static public StandardLevelDetailViewController/ContentType Loading
      static void _set_Loading(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType OwnedAndReady
      static constexpr const int OwnedAndReady = 1;
      // Get static field: static public StandardLevelDetailViewController/ContentType OwnedAndReady
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_OwnedAndReady();
      // Set static field: static public StandardLevelDetailViewController/ContentType OwnedAndReady
      static void _set_OwnedAndReady(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType NoAllowedDifficultyBeatmap
      static constexpr const int NoAllowedDifficultyBeatmap = 2;
      // Get static field: static public StandardLevelDetailViewController/ContentType NoAllowedDifficultyBeatmap
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_NoAllowedDifficultyBeatmap();
      // Set static field: static public StandardLevelDetailViewController/ContentType NoAllowedDifficultyBeatmap
      static void _set_NoAllowedDifficultyBeatmap(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType OwnedAndDownloading
      static constexpr const int OwnedAndDownloading = 3;
      // Get static field: static public StandardLevelDetailViewController/ContentType OwnedAndDownloading
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_OwnedAndDownloading();
      // Set static field: static public StandardLevelDetailViewController/ContentType OwnedAndDownloading
      static void _set_OwnedAndDownloading(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType Buy
      static constexpr const int Buy = 4;
      // Get static field: static public StandardLevelDetailViewController/ContentType Buy
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Buy();
      // Set static field: static public StandardLevelDetailViewController/ContentType Buy
      static void _set_Buy(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType BuyInfo
      static constexpr const int BuyInfo = 5;
      // Get static field: static public StandardLevelDetailViewController/ContentType BuyInfo
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_BuyInfo();
      // Set static field: static public StandardLevelDetailViewController/ContentType BuyInfo
      static void _set_BuyInfo(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType Error
      static constexpr const int Error = 6;
      // Get static field: static public StandardLevelDetailViewController/ContentType Error
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Error();
      // Set static field: static public StandardLevelDetailViewController/ContentType Error
      static void _set_Error(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType Inactive
      static constexpr const int Inactive = 7;
      // Get static field: static public StandardLevelDetailViewController/ContentType Inactive
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Inactive();
      // Set static field: static public StandardLevelDetailViewController/ContentType Inactive
      static void _set_Inactive(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
    }; // StandardLevelDetailViewController/ContentType
    #pragma pack(pop)
    static check_size<sizeof(StandardLevelDetailViewController::ContentType), 0 + sizeof(int)> __GlobalNamespace_StandardLevelDetailViewController_ContentTypeSizeCheck;
    static_assert(sizeof(StandardLevelDetailViewController::ContentType) == 0x4);
    // private StandardLevelDetailView _standardLevelDetailView
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::StandardLevelDetailView* standardLevelDetailView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::StandardLevelDetailView*) == 0x8);
    // private StandardLevelBuyView _standardLevelBuyView
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::StandardLevelBuyView* standardLevelBuyView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::StandardLevelBuyView*) == 0x8);
    // private StandardLevelBuyInfoView _standardLevelBuyInfoView
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::StandardLevelBuyInfoView* standardLevelBuyInfoView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::StandardLevelBuyInfoView*) == 0x8);
    // private LoadingControl _loadingControl
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::LoadingControl* loadingControl;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LoadingControl*) == 0x8);
    // private UnityEngine.GameObject _requireInternetContainer
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::GameObject* requireInternetContainer;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _noAllowedBeatmapInfoContainer
    // Size: 0x8
    // Offset: 0x98
    UnityEngine::GameObject* noAllowedBeatmapInfoContainer;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [SpaceAttribute] Offset: 0xE2533C
    // [InjectAttribute] Offset: 0xE2533C
    // private PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0xA0
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE25374
    // private AdditionalContentModel _additionalContentModel
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::AdditionalContentModel* additionalContentModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AdditionalContentModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE25384
    // private BeatmapLevelsModel _beatmapLevelsModel
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xE25394
    // private DlcPromoExperimentModel _dlcPromoExperimentModel
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::DlcPromoExperimentModel* dlcPromoExperimentModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::DlcPromoExperimentModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE253A4
    // private System.Action`1<StandardLevelDetailViewController> didPressActionButtonEvent
    // Size: 0x8
    // Offset: 0xC0
    System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* didPressActionButtonEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE253B4
    // private System.Action`2<StandardLevelDetailViewController,IBeatmapLevelPack> didPressOpenLevelPackButtonEvent
    // Size: 0x8
    // Offset: 0xC8
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* didPressOpenLevelPackButtonEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE253C4
    // private System.Action`2<StandardLevelDetailViewController,System.Boolean> levelFavoriteStatusDidChangeEvent
    // Size: 0x8
    // Offset: 0xD0
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* levelFavoriteStatusDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE253D4
    // private System.Action`2<StandardLevelDetailViewController,IBeatmapLevel> didPressPracticeButtonEvent
    // Size: 0x8
    // Offset: 0xD8
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* didPressPracticeButtonEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE253E4
    // private System.Action`2<StandardLevelDetailViewController,IDifficultyBeatmap> didChangeDifficultyBeatmapEvent
    // Size: 0x8
    // Offset: 0xE0
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* didChangeDifficultyBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE253F4
    // private System.Action`2<StandardLevelDetailViewController,StandardLevelDetailViewController/ContentType> didChangeContentEvent
    // Size: 0x8
    // Offset: 0xE8
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* didChangeContentEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>*) == 0x8);
    // private EventBinder _eventBinder
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::EventBinder* eventBinder;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EventBinder*) == 0x8);
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Size: 0x8
    // Offset: 0xF8
    System::Threading::CancellationTokenSource* cancellationTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // private IPreviewBeatmapLevel _previewBeatmapLevel
    // Size: 0x8
    // Offset: 0x100
    GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IPreviewBeatmapLevel*) == 0x8);
    // private IBeatmapLevel _beatmapLevel
    // Size: 0x8
    // Offset: 0x108
    GlobalNamespace::IBeatmapLevel* beatmapLevel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevel*) == 0x8);
    // private IBeatmapLevelPack _pack
    // Size: 0x8
    // Offset: 0x110
    GlobalNamespace::IBeatmapLevelPack* pack;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevelPack*) == 0x8);
    // private System.Boolean _canBuyPack
    // Size: 0x1
    // Offset: 0x118
    bool canBuyPack;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showPlayerStats
    // Size: 0x1
    // Offset: 0x119
    bool showPlayerStats;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private BeatmapDifficultyMask _allowedBeatmapDifficultyMask
    // Size: 0x1
    // Offset: 0x11A
    GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficultyMask) == 0x1);
    // Padding between fields: allowedBeatmapDifficultyMask and: notAllowedCharacteristics
    char __padding23[0x5] = {};
    // private System.Collections.Generic.HashSet`1<BeatmapCharacteristicSO> _notAllowedCharacteristics
    // Size: 0x8
    // Offset: 0x120
    System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapCharacteristicSO*>*) == 0x8);
    // private System.Boolean _contentIsOwnedAndReady
    // Size: 0x1
    // Offset: 0x128
    bool contentIsOwnedAndReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: StandardLevelDetailViewController
    StandardLevelDetailViewController(GlobalNamespace::StandardLevelDetailView* standardLevelDetailView_ = {}, GlobalNamespace::StandardLevelBuyView* standardLevelBuyView_ = {}, GlobalNamespace::StandardLevelBuyInfoView* standardLevelBuyInfoView_ = {}, GlobalNamespace::LoadingControl* loadingControl_ = {}, UnityEngine::GameObject* requireInternetContainer_ = {}, UnityEngine::GameObject* noAllowedBeatmapInfoContainer_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::AdditionalContentModel* additionalContentModel_ = {}, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel_ = {}, GlobalNamespace::DlcPromoExperimentModel* dlcPromoExperimentModel_ = {}, System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* didPressActionButtonEvent_ = {}, System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* didPressOpenLevelPackButtonEvent_ = {}, System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* levelFavoriteStatusDidChangeEvent_ = {}, System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* didPressPracticeButtonEvent_ = {}, System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* didChangeDifficultyBeatmapEvent_ = {}, System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* didChangeContentEvent_ = {}, GlobalNamespace::EventBinder* eventBinder_ = {}, System::Threading::CancellationTokenSource* cancellationTokenSource_ = {}, GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel_ = {}, GlobalNamespace::IBeatmapLevel* beatmapLevel_ = {}, GlobalNamespace::IBeatmapLevelPack* pack_ = {}, bool canBuyPack_ = {}, bool showPlayerStats_ = {}, GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask_ = {}, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics_ = {}, bool contentIsOwnedAndReady_ = {}) noexcept : standardLevelDetailView{standardLevelDetailView_}, standardLevelBuyView{standardLevelBuyView_}, standardLevelBuyInfoView{standardLevelBuyInfoView_}, loadingControl{loadingControl_}, requireInternetContainer{requireInternetContainer_}, noAllowedBeatmapInfoContainer{noAllowedBeatmapInfoContainer_}, playerDataModel{playerDataModel_}, additionalContentModel{additionalContentModel_}, beatmapLevelsModel{beatmapLevelsModel_}, dlcPromoExperimentModel{dlcPromoExperimentModel_}, didPressActionButtonEvent{didPressActionButtonEvent_}, didPressOpenLevelPackButtonEvent{didPressOpenLevelPackButtonEvent_}, levelFavoriteStatusDidChangeEvent{levelFavoriteStatusDidChangeEvent_}, didPressPracticeButtonEvent{didPressPracticeButtonEvent_}, didChangeDifficultyBeatmapEvent{didChangeDifficultyBeatmapEvent_}, didChangeContentEvent{didChangeContentEvent_}, eventBinder{eventBinder_}, cancellationTokenSource{cancellationTokenSource_}, previewBeatmapLevel{previewBeatmapLevel_}, beatmapLevel{beatmapLevel_}, pack{pack_}, canBuyPack{canBuyPack_}, showPlayerStats{showPlayerStats_}, allowedBeatmapDifficultyMask{allowedBeatmapDifficultyMask_}, notAllowedCharacteristics{notAllowedCharacteristics_}, contentIsOwnedAndReady{contentIsOwnedAndReady_} {}
    // static field const value: static private System.String kLoadingDataErrorNoInternetLocalizationKey
    static constexpr const char* kLoadingDataErrorNoInternetLocalizationKey = "ERROR_LOADING_DATA_NO_INTERNET_MESSAGE";
    // Get static field: static private System.String kLoadingDataErrorNoInternetLocalizationKey
    static ::Il2CppString* _get_kLoadingDataErrorNoInternetLocalizationKey();
    // Set static field: static private System.String kLoadingDataErrorNoInternetLocalizationKey
    static void _set_kLoadingDataErrorNoInternetLocalizationKey(::Il2CppString* value);
    // static field const value: static private System.String kLoadingDataErrorLocalizationKey
    static constexpr const char* kLoadingDataErrorLocalizationKey = "ERROR_LOADING_DATA";
    // Get static field: static private System.String kLoadingDataErrorLocalizationKey
    static ::Il2CppString* _get_kLoadingDataErrorLocalizationKey();
    // Set static field: static private System.String kLoadingDataErrorLocalizationKey
    static void _set_kLoadingDataErrorLocalizationKey(::Il2CppString* value);
    // public System.Void add_didPressActionButtonEvent(System.Action`1<StandardLevelDetailViewController> value)
    // Offset: 0x115C7A0
    void add_didPressActionButtonEvent(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* value);
    // public System.Void remove_didPressActionButtonEvent(System.Action`1<StandardLevelDetailViewController> value)
    // Offset: 0x115C844
    void remove_didPressActionButtonEvent(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* value);
    // public System.Void add_didPressOpenLevelPackButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevelPack> value)
    // Offset: 0x115C8E8
    void add_didPressOpenLevelPackButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* value);
    // public System.Void remove_didPressOpenLevelPackButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevelPack> value)
    // Offset: 0x115C98C
    void remove_didPressOpenLevelPackButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* value);
    // public System.Void add_levelFavoriteStatusDidChangeEvent(System.Action`2<StandardLevelDetailViewController,System.Boolean> value)
    // Offset: 0x115CA30
    void add_levelFavoriteStatusDidChangeEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* value);
    // public System.Void remove_levelFavoriteStatusDidChangeEvent(System.Action`2<StandardLevelDetailViewController,System.Boolean> value)
    // Offset: 0x115CAD4
    void remove_levelFavoriteStatusDidChangeEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* value);
    // public System.Void add_didPressPracticeButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevel> value)
    // Offset: 0x115CB78
    void add_didPressPracticeButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* value);
    // public System.Void remove_didPressPracticeButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevel> value)
    // Offset: 0x115CC1C
    void remove_didPressPracticeButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* value);
    // public System.Void add_didChangeDifficultyBeatmapEvent(System.Action`2<StandardLevelDetailViewController,IDifficultyBeatmap> value)
    // Offset: 0x115CCC0
    void add_didChangeDifficultyBeatmapEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* value);
    // public System.Void remove_didChangeDifficultyBeatmapEvent(System.Action`2<StandardLevelDetailViewController,IDifficultyBeatmap> value)
    // Offset: 0x115CD64
    void remove_didChangeDifficultyBeatmapEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* value);
    // public System.Void add_didChangeContentEvent(System.Action`2<StandardLevelDetailViewController,StandardLevelDetailViewController/ContentType> value)
    // Offset: 0x115CE08
    void add_didChangeContentEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* value);
    // public System.Void remove_didChangeContentEvent(System.Action`2<StandardLevelDetailViewController,StandardLevelDetailViewController/ContentType> value)
    // Offset: 0x115CEAC
    void remove_didChangeContentEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* value);
    // public IDifficultyBeatmap get_selectedDifficultyBeatmap()
    // Offset: 0x115CF50
    GlobalNamespace::IDifficultyBeatmap* get_selectedDifficultyBeatmap();
    // public IPreviewBeatmapLevel get_beatmapLevel()
    // Offset: 0x115CF6C
    GlobalNamespace::IPreviewBeatmapLevel* get_beatmapLevel();
    // public System.Void SetData(IPreviewBeatmapLevel previewBeatmapLevel, System.Boolean showPlayerStats, System.Boolean hidePracticeButton, System.Boolean hide360DegreeBeatmapCharacteristic, System.String playButtonText, BeatmapDifficultyMask allowedBeatmapDifficultyMask, BeatmapCharacteristicSO[] notAllowedCharacteristics)
    // Offset: 0x115CF74
    void SetData(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, bool showPlayerStats, bool hidePracticeButton, bool hide360DegreeBeatmapCharacteristic, ::Il2CppString* playButtonText, GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask, ::Array<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics);
    // public System.Void SetData(IBeatmapLevelPack pack, IPreviewBeatmapLevel previewBeatmapLevel, System.Boolean showPlayerStats, System.Boolean hidePracticeButton, System.Boolean hide360DegreeBeatmapCharacteristic, System.Boolean canBuyPack, System.String playButtonText, BeatmapDifficultyMask allowedBeatmapDifficultyMask, BeatmapCharacteristicSO[] notAllowedCharacteristics)
    // Offset: 0x115D0A0
    void SetData(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, bool showPlayerStats, bool hidePracticeButton, bool hide360DegreeBeatmapCharacteristic, bool canBuyPack, ::Il2CppString* playButtonText, GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask, ::Array<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics);
    // private System.Void UpdateActionButtonIntractability()
    // Offset: 0x115D8CC
    void UpdateActionButtonIntractability();
    // private System.Void HandleDidPressPracticeButton()
    // Offset: 0x115DADC
    void HandleDidPressPracticeButton();
    // private System.Void HandleLevelLoadingUpdate(BeatmapLevelsModel/LevelDownloadingUpdate levelLoadingUpdate)
    // Offset: 0x115DB48
    void HandleLevelLoadingUpdate(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate levelLoadingUpdate);
    // private System.Void UpdateDownloading(System.Boolean preparingToDownload, System.UInt32 bytesTransferred, System.UInt32 bytesTotal)
    // Offset: 0x115DC60
    void UpdateDownloading(bool preparingToDownload, uint bytesTransferred, uint bytesTotal);
    // private System.Threading.Tasks.Task LoadBeatmapLevelAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x115E12C
    System::Threading::Tasks::Task* LoadBeatmapLevelAsync(System::Threading::CancellationToken cancellationToken);
    // public System.Void RefreshContentLevelDetailView()
    // Offset: 0x115E228
    void RefreshContentLevelDetailView();
    // public System.Void ClearSelected()
    // Offset: 0x115E240
    void ClearSelected();
    // private System.Void OpenLevelProductStoreOrShowBuyInfoAsync()
    // Offset: 0x115E25C
    void OpenLevelProductStoreOrShowBuyInfoAsync();
    // private System.Void BuyLevelButtonWasPressed()
    // Offset: 0x115E31C
    void BuyLevelButtonWasPressed();
    // private System.Void OpenLevelProductStoreAsync()
    // Offset: 0x115E424
    void OpenLevelProductStoreAsync();
    // private System.Void BuyPackButtonWasPressed()
    // Offset: 0x115E4E4
    void BuyPackButtonWasPressed();
    // private System.Void OpenLevelPackProductStoreAsync()
    // Offset: 0x115E5F0
    void OpenLevelPackProductStoreAsync();
    // private System.Void OpenLevelPack()
    // Offset: 0x115E6B0
    void OpenLevelPack();
    // private System.Void RefreshAvailabilityAsync()
    // Offset: 0x115D1BC
    void RefreshAvailabilityAsync();
    // private System.Void ShowContent(StandardLevelDetailViewController/ContentType contentType, System.String errorText, System.Single downloadingProgress, System.String downloadingText)
    // Offset: 0x115DD24
    void ShowContent(GlobalNamespace::StandardLevelDetailViewController::ContentType contentType, ::Il2CppString* errorText, float downloadingProgress, ::Il2CppString* downloadingText);
    // private System.Void HandleAdditionalContentModelDidInvalidateData()
    // Offset: 0x115E718
    void HandleAdditionalContentModelDidInvalidateData();
    // private System.Void <DidActivate>b__47_0()
    // Offset: 0x115E784
    void $DidActivate$b__47_0();
    // private System.Void <DidActivate>b__47_1()
    // Offset: 0x115E7E8
    void $DidActivate$b__47_1();
    // private System.Void <DidActivate>b__47_4(StandardLevelDetailView view, IDifficultyBeatmap beatmap)
    // Offset: 0x115E7EC
    void $DidActivate$b__47_4(GlobalNamespace::StandardLevelDetailView* view, GlobalNamespace::IDifficultyBeatmap* beatmap);
    // private System.Void <DidActivate>b__47_5(StandardLevelDetailView view, UnityEngine.UI.Toggle toggle)
    // Offset: 0x115E9F4
    void $DidActivate$b__47_5(GlobalNamespace::StandardLevelDetailView* view, UnityEngine::UI::Toggle* toggle);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x115D274
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x115D6C0
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void OnDestroy()
    // Offset: 0x115D7D8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x115E71C
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StandardLevelDetailViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StandardLevelDetailViewController*, creationType>()));
    }
  }; // StandardLevelDetailViewController
  #pragma pack(pop)
  static check_size<sizeof(StandardLevelDetailViewController), 296 + sizeof(bool)> __GlobalNamespace_StandardLevelDetailViewControllerSizeCheck;
  static_assert(sizeof(StandardLevelDetailViewController) == 0x129);
  // Writing MetadataGetter for method: StandardLevelDetailViewController::add_didPressActionButtonEvent
  // Il2CppName: add_didPressActionButtonEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>*)>(&StandardLevelDetailViewController::add_didPressActionButtonEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "add_didPressActionButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::remove_didPressActionButtonEvent
  // Il2CppName: remove_didPressActionButtonEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>*)>(&StandardLevelDetailViewController::remove_didPressActionButtonEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "remove_didPressActionButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::add_didPressOpenLevelPackButtonEvent
  // Il2CppName: add_didPressOpenLevelPackButtonEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>*)>(&StandardLevelDetailViewController::add_didPressOpenLevelPackButtonEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "add_didPressOpenLevelPackButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::remove_didPressOpenLevelPackButtonEvent
  // Il2CppName: remove_didPressOpenLevelPackButtonEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>*)>(&StandardLevelDetailViewController::remove_didPressOpenLevelPackButtonEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "remove_didPressOpenLevelPackButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::add_levelFavoriteStatusDidChangeEvent
  // Il2CppName: add_levelFavoriteStatusDidChangeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>*)>(&StandardLevelDetailViewController::add_levelFavoriteStatusDidChangeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "add_levelFavoriteStatusDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::remove_levelFavoriteStatusDidChangeEvent
  // Il2CppName: remove_levelFavoriteStatusDidChangeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>*)>(&StandardLevelDetailViewController::remove_levelFavoriteStatusDidChangeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "remove_levelFavoriteStatusDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::add_didPressPracticeButtonEvent
  // Il2CppName: add_didPressPracticeButtonEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>*)>(&StandardLevelDetailViewController::add_didPressPracticeButtonEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "add_didPressPracticeButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::remove_didPressPracticeButtonEvent
  // Il2CppName: remove_didPressPracticeButtonEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>*)>(&StandardLevelDetailViewController::remove_didPressPracticeButtonEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "remove_didPressPracticeButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::add_didChangeDifficultyBeatmapEvent
  // Il2CppName: add_didChangeDifficultyBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>*)>(&StandardLevelDetailViewController::add_didChangeDifficultyBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "add_didChangeDifficultyBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::remove_didChangeDifficultyBeatmapEvent
  // Il2CppName: remove_didChangeDifficultyBeatmapEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>*)>(&StandardLevelDetailViewController::remove_didChangeDifficultyBeatmapEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "remove_didChangeDifficultyBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::add_didChangeContentEvent
  // Il2CppName: add_didChangeContentEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>*)>(&StandardLevelDetailViewController::add_didChangeContentEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "add_didChangeContentEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::remove_didChangeContentEvent
  // Il2CppName: remove_didChangeContentEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>*)>(&StandardLevelDetailViewController::remove_didChangeContentEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "remove_didChangeContentEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::get_selectedDifficultyBeatmap
  // Il2CppName: get_selectedDifficultyBeatmap
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::get_selectedDifficultyBeatmap)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "get_selectedDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::get_beatmapLevel
  // Il2CppName: get_beatmapLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::get_beatmapLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "get_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::SetData
  // Il2CppName: SetData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(GlobalNamespace::IPreviewBeatmapLevel*, bool, bool, bool, ::Il2CppString*, GlobalNamespace::BeatmapDifficultyMask, ::Array<GlobalNamespace::BeatmapCharacteristicSO*>*)>(&StandardLevelDetailViewController::SetData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::BeatmapCharacteristicSO*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::SetData
  // Il2CppName: SetData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IPreviewBeatmapLevel*, bool, bool, bool, bool, ::Il2CppString*, GlobalNamespace::BeatmapDifficultyMask, ::Array<GlobalNamespace::BeatmapCharacteristicSO*>*)>(&StandardLevelDetailViewController::SetData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::BeatmapCharacteristicSO*>*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::UpdateActionButtonIntractability
  // Il2CppName: UpdateActionButtonIntractability
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::UpdateActionButtonIntractability)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "UpdateActionButtonIntractability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::HandleDidPressPracticeButton
  // Il2CppName: HandleDidPressPracticeButton
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::HandleDidPressPracticeButton)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "HandleDidPressPracticeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::HandleLevelLoadingUpdate
  // Il2CppName: HandleLevelLoadingUpdate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate)>(&StandardLevelDetailViewController::HandleLevelLoadingUpdate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "HandleLevelLoadingUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::UpdateDownloading
  // Il2CppName: UpdateDownloading
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(bool, uint, uint)>(&StandardLevelDetailViewController::UpdateDownloading)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "UpdateDownloading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::LoadBeatmapLevelAsync
  // Il2CppName: LoadBeatmapLevelAsync
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (StandardLevelDetailViewController::*)(System::Threading::CancellationToken)>(&StandardLevelDetailViewController::LoadBeatmapLevelAsync)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "LoadBeatmapLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::RefreshContentLevelDetailView
  // Il2CppName: RefreshContentLevelDetailView
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::RefreshContentLevelDetailView)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "RefreshContentLevelDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::ClearSelected
  // Il2CppName: ClearSelected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::ClearSelected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "ClearSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::OpenLevelProductStoreOrShowBuyInfoAsync
  // Il2CppName: OpenLevelProductStoreOrShowBuyInfoAsync
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::OpenLevelProductStoreOrShowBuyInfoAsync)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "OpenLevelProductStoreOrShowBuyInfoAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::BuyLevelButtonWasPressed
  // Il2CppName: BuyLevelButtonWasPressed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::BuyLevelButtonWasPressed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "BuyLevelButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::OpenLevelProductStoreAsync
  // Il2CppName: OpenLevelProductStoreAsync
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::OpenLevelProductStoreAsync)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "OpenLevelProductStoreAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::BuyPackButtonWasPressed
  // Il2CppName: BuyPackButtonWasPressed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::BuyPackButtonWasPressed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "BuyPackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::OpenLevelPackProductStoreAsync
  // Il2CppName: OpenLevelPackProductStoreAsync
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::OpenLevelPackProductStoreAsync)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "OpenLevelPackProductStoreAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::OpenLevelPack
  // Il2CppName: OpenLevelPack
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::OpenLevelPack)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "OpenLevelPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::RefreshAvailabilityAsync
  // Il2CppName: RefreshAvailabilityAsync
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::RefreshAvailabilityAsync)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "RefreshAvailabilityAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::ShowContent
  // Il2CppName: ShowContent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(GlobalNamespace::StandardLevelDetailViewController::ContentType, ::Il2CppString*, float, ::Il2CppString*)>(&StandardLevelDetailViewController::ShowContent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "ShowContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardLevelDetailViewController::ContentType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::HandleAdditionalContentModelDidInvalidateData
  // Il2CppName: HandleAdditionalContentModelDidInvalidateData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::HandleAdditionalContentModelDidInvalidateData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "HandleAdditionalContentModelDidInvalidateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::$DidActivate$b__47_0
  // Il2CppName: <DidActivate>b__47_0
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::$DidActivate$b__47_0)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "<DidActivate>b__47_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::$DidActivate$b__47_1
  // Il2CppName: <DidActivate>b__47_1
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::$DidActivate$b__47_1)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "<DidActivate>b__47_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::$DidActivate$b__47_4
  // Il2CppName: <DidActivate>b__47_4
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*)>(&StandardLevelDetailViewController::$DidActivate$b__47_4)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "<DidActivate>b__47_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardLevelDetailView*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::$DidActivate$b__47_5
  // Il2CppName: <DidActivate>b__47_5
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*)>(&StandardLevelDetailViewController::$DidActivate$b__47_5)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "<DidActivate>b__47_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardLevelDetailView*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Toggle*>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::DidActivate
  // Il2CppName: DidActivate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(bool, bool, bool)>(&StandardLevelDetailViewController::DidActivate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::DidDeactivate
  // Il2CppName: DidDeactivate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)(bool, bool)>(&StandardLevelDetailViewController::DidDeactivate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::OnDestroy
  // Il2CppName: OnDestroy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::OnDestroy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: StandardLevelDetailViewController::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailViewController::*)()>(&StandardLevelDetailViewController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardLevelDetailViewController*, "", "StandardLevelDetailViewController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardLevelDetailViewController::ContentType, "", "StandardLevelDetailViewController/ContentType");
