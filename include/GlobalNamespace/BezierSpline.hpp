// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierCurve
#include "GlobalNamespace/BezierCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BezierSpline
  class BezierSpline : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BezierSpline::ComputeControlPointsResults
    struct ComputeControlPointsResults;
    // Nested type: GlobalNamespace::BezierSpline::$$c
    class $$c;
    // private readonly System.Collections.Generic.List`1<BezierCurve> _segments
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> _sourceDataPoints
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<UnityEngine::Vector3>* sourceDataPoints;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Vector3>*) == 0x8);
    // Creating value type constructor for type: BezierSpline
    BezierSpline(System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments_ = {}, System::Collections::Generic::List_1<UnityEngine::Vector3>* sourceDataPoints_ = {}) noexcept : segments{segments_}, sourceDataPoints{sourceDataPoints_} {}
    // public System.Collections.Generic.List`1<BezierCurve> get_segments()
    // Offset: 0x110E134
    System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* get_segments();
    // public System.Void AddPoint(System.Single distance, UnityEngine.Vector2 point)
    // Offset: 0x110CF50
    void AddPoint(float distance, UnityEngine::Vector2 point);
    // public System.Void SortSourceData()
    // Offset: 0x110E13C
    void SortSourceData();
    // public System.Void AddArtificialStartAndFinishPoint()
    // Offset: 0x110CFFC
    void AddArtificialStartAndFinishPoint();
    // public System.Void ComputeControlPoints()
    // Offset: 0x110D1A8
    void ComputeControlPoints();
    // public System.Void Clear()
    // Offset: 0x110E804
    void Clear();
    // private BezierSpline/ComputeControlPointsResults ComputeControlPoints(System.Collections.Generic.List`1<System.Single> k)
    // Offset: 0x110E234
    GlobalNamespace::BezierSpline::ComputeControlPointsResults ComputeControlPoints(System::Collections::Generic::List_1<float>* k);
    // public System.Void .ctor()
    // Offset: 0x110CB60
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierSpline*, creationType>()));
    }
  }; // BezierSpline
  #pragma pack(pop)
  static check_size<sizeof(BezierSpline), 24 + sizeof(System::Collections::Generic::List_1<UnityEngine::Vector3>*)> __GlobalNamespace_BezierSplineSizeCheck;
  static_assert(sizeof(BezierSpline) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSpline*, "", "BezierSpline");
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::get_segments
// Il2CppName: get_segments
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::AddPoint
// Il2CppName: AddPoint
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::SortSourceData
// Il2CppName: SortSourceData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::AddArtificialStartAndFinishPoint
// Il2CppName: AddArtificialStartAndFinishPoint
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::ComputeControlPoints
// Il2CppName: ComputeControlPoints
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::Clear
// Il2CppName: Clear
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::ComputeControlPoints
// Il2CppName: ComputeControlPoints
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::BezierSpline::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
