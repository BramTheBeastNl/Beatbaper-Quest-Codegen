// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/UnityEngine.EmitParams
#include "UnityEngine/ParticleSystem_EmitParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAF
  #pragma pack(push, 1)
  // Autogenerated type: NoteTrailParticleSystem
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteTrailParticleSystem : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
    // Size: 0x8F
    // Offset: 0x20
    UnityEngine::ParticleSystem::EmitParams emitParams;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem::EmitParams) == 0x8F);
    // Creating value type constructor for type: NoteTrailParticleSystem
    NoteTrailParticleSystem(UnityEngine::ParticleSystem* particleSystem_ = {}, UnityEngine::ParticleSystem::EmitParams emitParams_ = {}) noexcept : particleSystem{particleSystem_}, emitParams{emitParams_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field: private UnityEngine.ParticleSystem _particleSystem
    UnityEngine::ParticleSystem* _get__particleSystem();
    // Set instance field: private UnityEngine.ParticleSystem _particleSystem
    void _set__particleSystem(UnityEngine::ParticleSystem* value);
    // Get instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
    UnityEngine::ParticleSystem::EmitParams _get__emitParams();
    // Set instance field: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
    void _set__emitParams(UnityEngine::ParticleSystem::EmitParams value);
    // protected System.Void Awake()
    // Offset: 0x11E8750
    void Awake();
    // public System.Void Emit(UnityEngine.Vector3 startPos, UnityEngine.Vector3 endPos, System.Int32 count)
    // Offset: 0x11E85CC
    void Emit(UnityEngine::Vector3 startPos, UnityEngine::Vector3 endPos, int count);
    // public System.Void .ctor()
    // Offset: 0x11E8760
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteTrailParticleSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailParticleSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteTrailParticleSystem*, creationType>()));
    }
  }; // NoteTrailParticleSystem
  #pragma pack(pop)
  static check_size<sizeof(NoteTrailParticleSystem), 32 + sizeof(UnityEngine::ParticleSystem::EmitParams)> __GlobalNamespace_NoteTrailParticleSystemSizeCheck;
  static_assert(sizeof(NoteTrailParticleSystem) == 0xAF);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteTrailParticleSystem*, "", "NoteTrailParticleSystem");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteTrailParticleSystem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteTrailParticleSystem::*)()>(&GlobalNamespace::NoteTrailParticleSystem::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteTrailParticleSystem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteTrailParticleSystem::Emit
// Il2CppName: Emit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteTrailParticleSystem::*)(UnityEngine::Vector3, UnityEngine::Vector3, int)>(&GlobalNamespace::NoteTrailParticleSystem::Emit)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* endPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteTrailParticleSystem*), "Emit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos, endPos, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteTrailParticleSystem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
