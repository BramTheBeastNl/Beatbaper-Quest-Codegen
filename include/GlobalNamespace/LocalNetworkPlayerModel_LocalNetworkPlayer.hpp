// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: LocalNetworkPlayerModel/LocalNetworkFlags
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkFlags.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: BeatmapDifficultyMask because it is already included!
  // Skipping declaration: GameplayModifierMask because it is already included!
  // Skipping declaration: SongPackMask because it is already included!
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7F
  #pragma pack(push, 1)
  // Autogenerated type: LocalNetworkPlayerModel/LocalNetworkPlayer
  // [] Offset: FFFFFFFF
  class LocalNetworkPlayerModel::LocalNetworkPlayer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly LocalNetworkPlayerModel _playerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::LocalNetworkPlayerModel* playerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkPlayerModel*) == 0x8);
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Net.IPAddress _ipAddress
    // Size: 0x8
    // Offset: 0x28
    System::Net::IPAddress* ipAddress;
    // Field size check
    static_assert(sizeof(System::Net::IPAddress*) == 0x8);
    // private readonly System.Boolean _isMe
    // Size: 0x1
    // Offset: 0x30
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMe and: joinRequestTime
    char __padding4[0x3] = {};
    // private System.Single _joinRequestTime
    // Size: 0x4
    // Offset: 0x34
    float joinRequestTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _inviteSentTime
    // Size: 0x4
    // Offset: 0x38
    float inviteSentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isBlocked
    // Size: 0x1
    // Offset: 0x3C
    bool isBlocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasBlockedMe
    // Size: 0x1
    // Offset: 0x3D
    bool hasBlockedMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasBlockedMe and: secret
    char __padding8[0x2] = {};
    // private System.String _secret
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _multiplayerPort
    // Size: 0x4
    // Offset: 0x48
    int multiplayerPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isConnected
    // Size: 0x1
    // Offset: 0x4C
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnected and: connectingStartTime
    char __padding11[0x3] = {};
    // private System.Single _connectingStartTime
    // Size: 0x4
    // Offset: 0x50
    float connectingStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private LocalNetworkPlayerModel/LocalNetworkFlags _flags
    // Size: 0x1
    // Offset: 0x54
    GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags) == 0x1);
    // Padding between fields: flags and: currentPartySize
    char __padding13[0x3] = {};
    // private System.Int32 _currentPartySize
    // Size: 0x4
    // Offset: 0x58
    int currentPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxPartySize
    // Size: 0x4
    // Offset: 0x5C
    int maxPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x60
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x78
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _allowedJoinToMyParty
    // Size: 0x1
    // Offset: 0x7C
    bool allowedJoinToMyParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _requestedToJoinMyParty
    // Size: 0x1
    // Offset: 0x7D
    bool requestedToJoinMyParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _invitedMeToJoinTheirParty
    // Size: 0x1
    // Offset: 0x7E
    bool invitedMeToJoinTheirParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LocalNetworkPlayer
    LocalNetworkPlayer(GlobalNamespace::LocalNetworkPlayerModel* playerModel_ = {}, ::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, System::Net::IPAddress* ipAddress_ = {}, bool isMe_ = {}, float joinRequestTime_ = {}, float inviteSentTime_ = {}, bool isBlocked_ = {}, bool hasBlockedMe_ = {}, ::Il2CppString* secret_ = {}, int multiplayerPort_ = {}, bool isConnected_ = {}, float connectingStartTime_ = {}, GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags_ = {}, int currentPartySize_ = {}, int maxPartySize_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, float lastUpdateTime_ = {}, bool allowedJoinToMyParty_ = {}, bool requestedToJoinMyParty_ = {}, bool invitedMeToJoinTheirParty_ = {}) noexcept : playerModel{playerModel_}, userId{userId_}, userName{userName_}, ipAddress{ipAddress_}, isMe{isMe_}, joinRequestTime{joinRequestTime_}, inviteSentTime{inviteSentTime_}, isBlocked{isBlocked_}, hasBlockedMe{hasBlockedMe_}, secret{secret_}, multiplayerPort{multiplayerPort_}, isConnected{isConnected_}, connectingStartTime{connectingStartTime_}, flags{flags_}, currentPartySize{currentPartySize_}, maxPartySize{maxPartySize_}, configuration{configuration_}, lastUpdateTime{lastUpdateTime_}, allowedJoinToMyParty{allowedJoinToMyParty_}, requestedToJoinMyParty{requestedToJoinMyParty_}, invitedMeToJoinTheirParty{invitedMeToJoinTheirParty_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // static field const value: static private System.Single kPeerBroadcastTimeout
    static constexpr const float kPeerBroadcastTimeout = 30;
    // Get static field: static private System.Single kPeerBroadcastTimeout
    static float _get_kPeerBroadcastTimeout();
    // Set static field: static private System.Single kPeerBroadcastTimeout
    static void _set_kPeerBroadcastTimeout(float value);
    // static field const value: static private System.Single kConnectionTimeout
    static constexpr const float kConnectionTimeout = 5;
    // Get static field: static private System.Single kConnectionTimeout
    static float _get_kConnectionTimeout();
    // Set static field: static private System.Single kConnectionTimeout
    static void _set_kConnectionTimeout(float value);
    // static field const value: static private System.Single kRequestTimeout
    static constexpr const float kRequestTimeout = 120;
    // Get static field: static private System.Single kRequestTimeout
    static float _get_kRequestTimeout();
    // Set static field: static private System.Single kRequestTimeout
    static void _set_kRequestTimeout(float value);
    // public System.String get_userId()
    // Offset: 0x10B25D8
    ::Il2CppString* get_userId_NEW();
    // public System.String get_userName()
    // Offset: 0x10B25E0
    ::Il2CppString* get_userName_NEW();
    // public System.Net.IPAddress get_ipAddress()
    // Offset: 0x10B25E8
    System::Net::IPAddress* get_ipAddress();
    // public System.Boolean get_isMe()
    // Offset: 0x10B25F0
    bool get_isMe_NEW();
    // public System.Boolean get_isPartyOwner()
    // Offset: 0x10AF81C
    bool get_isPartyOwner();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x10B25F8
    int get_currentPartySize_NEW();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x10B2600
    int get_maxPartySize_NEW();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x10B2608
    GlobalNamespace::BeatmapDifficultyMask get_difficulties_NEW();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x10B2610
    GlobalNamespace::GameplayModifierMask get_modifiers_NEW();
    // public SongPackMask get_songPacks()
    // Offset: 0x10B2618
    GlobalNamespace::SongPackMask get_songPacks_NEW();
    // public System.Boolean get_isOpenParty()
    // Offset: 0x10B05D8
    bool get_isOpenParty_NEW();
    // public System.Boolean get_isPlayer()
    // Offset: 0x10B2624
    bool get_isPlayer_NEW();
    // public System.Boolean get_isSpectating()
    // Offset: 0x10B2630
    bool get_isSpectating_NEW();
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x10B263C
    bool get_isDedicatedServer_NEW();
    // public System.Boolean get_otherPlayersCanInvite()
    // Offset: 0x10AF1EC
    bool get_otherPlayersCanInvite();
    // public System.Boolean get_isBlocked()
    // Offset: 0x10B2648
    bool get_isBlocked();
    // public System.Boolean get_hasBlockedMe()
    // Offset: 0x10B2650
    bool get_hasBlockedMe();
    // public System.String get_secret()
    // Offset: 0x10B2658
    ::Il2CppString* get_secret();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0x10B2660
    int get_multiplayerPort();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x10B1E70
    bool get_isMyPartyOwner_NEW();
    // public System.Boolean get_isConnected()
    // Offset: 0x10B2668
    bool get_isConnected_NEW();
    // public System.Boolean get_allowedJoinToMyParty()
    // Offset: 0x10B2670
    bool get_allowedJoinToMyParty();
    // public System.Boolean get_isConnecting()
    // Offset: 0x10B1530
    bool get_isConnecting();
    // private System.Boolean get_wasConnecting()
    // Offset: 0x10B2678
    bool get_wasConnecting();
    // public System.Boolean get_isTimedOut()
    // Offset: 0x10AFB10
    bool get_isTimedOut();
    // public System.Void .ctor(LocalNetworkPlayerModel playerModel, System.String userId, System.String userName, System.Net.IPAddress ipAddress, System.Boolean isMe)
    // Offset: 0x10B0308
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalNetworkPlayerModel::LocalNetworkPlayer* New_ctor(GlobalNamespace::LocalNetworkPlayerModel* playerModel, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPAddress* ipAddress, bool isMe) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalNetworkPlayerModel::LocalNetworkPlayer*, creationType>(playerModel, userId, userName, ipAddress, isMe)));
    }
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x10B26BC
    bool get_isWaitingOnJoin_NEW();
    // public System.Boolean get_canJoin()
    // Offset: 0x10B2704
    bool get_canJoin_NEW();
    // public System.Void Join()
    // Offset: 0x10B27B8
    void Join_NEW();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x10B2810
    bool get_requiresPassword_NEW();
    // public System.Void Join(System.String password)
    // Offset: 0x10B2818
    void Join_NEW(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x10B281C
    bool get_isWaitingOnInvite_NEW();
    // public System.Boolean get_canInvite()
    // Offset: 0x10B2864
    bool get_canInvite_NEW();
    // public System.Void Invite()
    // Offset: 0x10B291C
    void Invite_NEW();
    // public System.Boolean get_canKick()
    // Offset: 0x10B298C
    bool get_canKick_NEW();
    // public System.Void Kick()
    // Offset: 0x10B29C0
    void Kick_NEW();
    // public System.Boolean get_canLeave()
    // Offset: 0x10B29E0
    bool get_canLeave_NEW();
    // public System.Void Leave()
    // Offset: 0x10B2A3C
    void Leave_NEW();
    // public System.Boolean get_canBlock()
    // Offset: 0x10B2A60
    bool get_canBlock_NEW();
    // public System.Void Block()
    // Offset: 0x10B2AC4
    void Block_NEW();
    // public System.Boolean get_canUnblock()
    // Offset: 0x10B2AD0
    bool get_canUnblock_NEW();
    // public System.Void Unblock()
    // Offset: 0x10B2AD8
    void Unblock_NEW();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x10B05A0
    void SendJoinResponse_NEW(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x10B0C30
    void SendInviteResponse_NEW(bool accept);
    // public System.Boolean Update(LocalNetworkPlayerModel/LocalNetworkFlags flags, System.Int32 currentPartySize, System.Int32 maxPartySize, GameplayServerConfiguration configuration)
    // Offset: 0x10AFFEC
    bool Update(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, int currentPartySize, int maxPartySize, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Boolean HasFailedToConnect()
    // Offset: 0x10AFA80
    bool HasFailedToConnect();
    // public System.Void SetInvited(LocalNetworkPlayerModel/LocalNetworkFlags flags, System.String secret, System.Int32 multiplayerPort)
    // Offset: 0x10B0C18
    void SetInvited(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, ::Il2CppString* secret, int multiplayerPort);
    // public System.Void SetJoinResponse(System.String secret, System.Int32 multiplayerPort, System.Boolean blocked)
    // Offset: 0x10B09A4
    void SetJoinResponse(::Il2CppString* secret, int multiplayerPort, bool blocked);
    // public System.Void SetInviteResponse(System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x10B0E00
    void SetInviteResponse(bool accepted, bool blocked);
    // public System.Void SetJoinRequested(LocalNetworkPlayerModel/LocalNetworkFlags flags)
    // Offset: 0x10B0590
    void SetJoinRequested(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags);
    // public System.Boolean SetConnected()
    // Offset: 0x10B143C
    bool SetConnected();
    // public System.Boolean SetDisconnected()
    // Offset: 0x10B1574
    bool SetDisconnected();
    // public System.Void UpdateState(IConnectedPlayer connectedPlayer)
    // Offset: 0x10B1BE4
    void UpdateState(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Boolean get_isConnectable()
    // Offset: 0x10B2B44
    bool get_isConnectable();
    // public System.Void Connect()
    // Offset: 0x10B2AE0
    void Connect();
  }; // LocalNetworkPlayerModel/LocalNetworkPlayer
  #pragma pack(pop)
  static check_size<sizeof(LocalNetworkPlayerModel::LocalNetworkPlayer), 126 + sizeof(bool)> __GlobalNamespace_LocalNetworkPlayerModel_LocalNetworkPlayerSizeCheck;
  static_assert(sizeof(LocalNetworkPlayerModel::LocalNetworkPlayer) == 0x7F);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, "", "LocalNetworkPlayerModel/LocalNetworkPlayer");
