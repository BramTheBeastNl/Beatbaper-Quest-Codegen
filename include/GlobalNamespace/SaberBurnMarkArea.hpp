// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: UnityEngine.ParticleSystem/EmitParams
#include "UnityEngine/ParticleSystem_EmitParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: Saber
  class Saber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x138
  #pragma pack(push, 1)
  // Autogenerated type: SaberBurnMarkArea
  // [RequireComponent] Offset: E10F3C
  class SaberBurnMarkArea : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.LineRenderer _saberBurnMarkLinePrefab
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::LineRenderer* saberBurnMarkLinePrefab;
    // Field size check
    static_assert(sizeof(UnityEngine::LineRenderer*) == 0x8);
    // private System.Single _blackMarkLineRandomOffset
    // Size: 0x4
    // Offset: 0x20
    float blackMarkLineRandomOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _textureWidth
    // Size: 0x4
    // Offset: 0x24
    int textureWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _textureHeight
    // Size: 0x4
    // Offset: 0x28
    int textureHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _burnMarksFadeOutStrength
    // Size: 0x4
    // Offset: 0x2C
    float burnMarksFadeOutStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Shader _fadeOutShader
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Shader* fadeOutShader;
    // Field size check
    static_assert(sizeof(UnityEngine::Shader*) == 0x8);
    // [InjectAttribute] Offset: 0xE1A8D8
    // private readonly ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE1A8E8
    // private readonly SaberManager _saberManager
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::SaberManager* saberManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberManager*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(UnityEngine::Renderer*) == 0x8);
    // private readonly System.Int32 _fadeOutStrengthShaderPropertyID
    // Size: 0x4
    // Offset: 0x50
    int fadeOutStrengthShaderPropertyID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: fadeOutStrengthShaderPropertyID and: sabers
    char __padding9[0x4] = {};
    // private Saber[] _sabers
    // Size: 0x8
    // Offset: 0x58
    ::Array<GlobalNamespace::Saber*>* sabers;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::Saber*>*) == 0x8);
    // private UnityEngine.Plane _plane
    // Size: 0x10
    // Offset: 0x60
    UnityEngine::Plane plane;
    // Field size check
    static_assert(sizeof(UnityEngine::Plane) == 0x10);
    // private UnityEngine.Vector3[] _prevBurnMarkPos
    // Size: 0x8
    // Offset: 0x70
    ::Array<UnityEngine::Vector3>* prevBurnMarkPos;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // private System.Boolean[] _prevBurnMarkPosValid
    // Size: 0x8
    // Offset: 0x78
    ::Array<bool>* prevBurnMarkPosValid;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // private UnityEngine.LineRenderer[] _lineRenderers
    // Size: 0x8
    // Offset: 0x80
    ::Array<UnityEngine::LineRenderer*>* lineRenderers;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::LineRenderer*>*) == 0x8);
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(UnityEngine::Camera*) == 0x8);
    // private UnityEngine.Vector3[] _linePoints
    // Size: 0x8
    // Offset: 0x90
    ::Array<UnityEngine::Vector3>* linePoints;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.RenderTexture[] _renderTextures
    // Size: 0x8
    // Offset: 0x98
    ::Array<UnityEngine::RenderTexture*>* renderTextures;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::RenderTexture*>*) == 0x8);
    // private UnityEngine.ParticleSystem/EmitParams _emitParams
    // Size: 0x8F
    // Offset: 0xA0
    UnityEngine::ParticleSystem::EmitParams emitParams;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem::EmitParams) == 0x8F);
    // Padding between fields: emitParams and: fadeOutMaterial
    char __padding18[0x1] = {};
    // private UnityEngine.Material _fadeOutMaterial
    // Size: 0x8
    // Offset: 0x130
    UnityEngine::Material* fadeOutMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // Creating value type constructor for type: SaberBurnMarkArea
    SaberBurnMarkArea(UnityEngine::LineRenderer* saberBurnMarkLinePrefab_ = {}, float blackMarkLineRandomOffset_ = {}, int textureWidth_ = {}, int textureHeight_ = {}, float burnMarksFadeOutStrength_ = {}, UnityEngine::Shader* fadeOutShader_ = {}, GlobalNamespace::ColorManager* colorManager_ = {}, GlobalNamespace::SaberManager* saberManager_ = {}, UnityEngine::Renderer* renderer_ = {}, int fadeOutStrengthShaderPropertyID_ = {}, ::Array<GlobalNamespace::Saber*>* sabers_ = {}, UnityEngine::Plane plane_ = {}, ::Array<UnityEngine::Vector3>* prevBurnMarkPos_ = {}, ::Array<bool>* prevBurnMarkPosValid_ = {}, ::Array<UnityEngine::LineRenderer*>* lineRenderers_ = {}, UnityEngine::Camera* camera_ = {}, ::Array<UnityEngine::Vector3>* linePoints_ = {}, ::Array<UnityEngine::RenderTexture*>* renderTextures_ = {}, UnityEngine::ParticleSystem::EmitParams emitParams_ = {}, UnityEngine::Material* fadeOutMaterial_ = {}) noexcept : saberBurnMarkLinePrefab{saberBurnMarkLinePrefab_}, blackMarkLineRandomOffset{blackMarkLineRandomOffset_}, textureWidth{textureWidth_}, textureHeight{textureHeight_}, burnMarksFadeOutStrength{burnMarksFadeOutStrength_}, fadeOutShader{fadeOutShader_}, colorManager{colorManager_}, saberManager{saberManager_}, renderer{renderer_}, fadeOutStrengthShaderPropertyID{fadeOutStrengthShaderPropertyID_}, sabers{sabers_}, plane{plane_}, prevBurnMarkPos{prevBurnMarkPos_}, prevBurnMarkPosValid{prevBurnMarkPosValid_}, lineRenderers{lineRenderers_}, camera{camera_}, linePoints{linePoints_}, renderTextures{renderTextures_}, emitParams{emitParams_}, fadeOutMaterial{fadeOutMaterial_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x10B52CC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x10B5B00
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0x10B5D74
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x10B5EC0
    void OnDisable();
    // private System.Boolean GetBurnMarkPos(UnityEngine.Vector3 bladeBottomPos, UnityEngine.Vector3 bladeTopPos, out UnityEngine.Vector3 burnMarkPos)
    // Offset: 0x10B600C
    bool GetBurnMarkPos(UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos);
    // private UnityEngine.Vector3 WorldToCameraBurnMarkPos(UnityEngine.Vector3 pos)
    // Offset: 0x10B629C
    UnityEngine::Vector3 WorldToCameraBurnMarkPos(UnityEngine::Vector3 pos);
    // protected System.Void LateUpdate()
    // Offset: 0x10B63C4
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x10B6AB4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberBurnMarkArea* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberBurnMarkArea*, creationType>()));
    }
  }; // SaberBurnMarkArea
  #pragma pack(pop)
  static check_size<sizeof(SaberBurnMarkArea), 304 + sizeof(UnityEngine::Material*)> __GlobalNamespace_SaberBurnMarkAreaSizeCheck;
  static_assert(sizeof(SaberBurnMarkArea) == 0x138);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberBurnMarkArea*, "", "SaberBurnMarkArea");
// Writing MetadataGetter for method: SaberBurnMarkArea::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::GetBurnMarkPos
// Il2CppName: GetBurnMarkPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SaberBurnMarkArea::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&)>(&SaberBurnMarkArea::GetBurnMarkPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "GetBurnMarkPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::WorldToCameraBurnMarkPos
// Il2CppName: WorldToCameraBurnMarkPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SaberBurnMarkArea::*)(UnityEngine::Vector3)>(&SaberBurnMarkArea::WorldToCameraBurnMarkPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "WorldToCameraBurnMarkPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
