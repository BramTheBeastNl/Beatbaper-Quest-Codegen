// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierCurve
#include "GlobalNamespace/BezierCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: BezierSplineEvaluator
  class BezierSplineEvaluator : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BezierSplineEvaluator::CubicSolveResult
    struct CubicSolveResult;
    // private readonly System.Collections.Generic.List`1<BezierCurve> _segments
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>*) == 0x8);
    // private System.Int32 _currentSegmentIndex
    // Size: 0x4
    // Offset: 0x18
    int currentSegmentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: BezierSplineEvaluator
    BezierSplineEvaluator(System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments_ = {}, int currentSegmentIndex_ = {}) noexcept : segments{segments_}, currentSegmentIndex{currentSegmentIndex_} {}
    // static field const value: static private System.Single kSlightAboveOne
    static constexpr const float kSlightAboveOne = 1.0005;
    // Get static field: static private System.Single kSlightAboveOne
    static float _get_kSlightAboveOne();
    // Set static field: static private System.Single kSlightAboveOne
    static void _set_kSlightAboveOne(float value);
    // static field const value: static private System.Single kSlightBelowZero
    static constexpr const float kSlightBelowZero = -0.0005;
    // Get static field: static private System.Single kSlightBelowZero
    static float _get_kSlightBelowZero();
    // Set static field: static private System.Single kSlightBelowZero
    static void _set_kSlightBelowZero(float value);
    // public System.Void .ctor(BezierSpline spline)
    // Offset: 0x110D6C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierSplineEvaluator* New_ctor(GlobalNamespace::BezierSpline* spline) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierSplineEvaluator*, creationType>(spline)));
    }
    // public UnityEngine.Vector3 EvaluatePosition(System.Single time)
    // Offset: 0x1104314
    UnityEngine::Vector3 EvaluatePosition(float time);
    // private UnityEngine.Vector3 Evaluate(System.Single t)
    // Offset: 0x110EA44
    UnityEngine::Vector3 Evaluate(float t);
    // private UnityEngine.Vector3 EvaluateFirstDerivation(System.Single t)
    // Offset: 0x110EC80
    UnityEngine::Vector3 EvaluateFirstDerivation(float t);
    // private UnityEngine.Vector3 EvaluateSecondDerivation(System.Single t)
    // Offset: 0x110EED4
    UnityEngine::Vector3 EvaluateSecondDerivation(float t);
    // public System.Single OffsetSegmentAndGetT(System.Single time)
    // Offset: 0x110E930
    float OffsetSegmentAndGetT(float time);
    // private System.Single GetTForSegment(System.Int32 segmentIndex, System.Single time)
    // Offset: 0x110F25C
    float GetTForSegment(int segmentIndex, float time);
    // public System.Void GetTimeValuesForSegment(System.Int32 segmentIndex, out System.Single t0Value, out System.Single t1Value)
    // Offset: 0x110F86C
    void GetTimeValuesForSegment(int segmentIndex, float& t0Value, float& t1Value);
    // private System.Void OffsetStartIndexToDistance(System.Single time)
    // Offset: 0x110F118
    void OffsetStartIndexToDistance(float time);
    // static private System.Single CubeRoot(System.Single x)
    // Offset: 0x110F948
    static float CubeRoot(float x);
    // static private BezierSplineEvaluator/CubicSolveResult SolveCubic(System.Single a, System.Single b, System.Single c, System.Single d)
    // Offset: 0x110F3CC
    static GlobalNamespace::BezierSplineEvaluator::CubicSolveResult SolveCubic(float a, float b, float c, float d);
  }; // BezierSplineEvaluator
  #pragma pack(pop)
  static check_size<sizeof(BezierSplineEvaluator), 24 + sizeof(int)> __GlobalNamespace_BezierSplineEvaluatorSizeCheck;
  static_assert(sizeof(BezierSplineEvaluator) == 0x1C);
  // Writing MetadataGetter for method: BezierSplineEvaluator::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BezierSplineEvaluator::*)(GlobalNamespace::BezierSpline*)>(&BezierSplineEvaluator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BezierSpline*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BezierSplineEvaluator::*)(GlobalNamespace::BezierSpline*)>(&BezierSplineEvaluator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BezierSpline*>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::EvaluatePosition
  // Il2CppName: EvaluatePosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BezierSplineEvaluator::*)(float)>(&BezierSplineEvaluator::EvaluatePosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "EvaluatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::Evaluate
  // Il2CppName: Evaluate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BezierSplineEvaluator::*)(float)>(&BezierSplineEvaluator::Evaluate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::EvaluateFirstDerivation
  // Il2CppName: EvaluateFirstDerivation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BezierSplineEvaluator::*)(float)>(&BezierSplineEvaluator::EvaluateFirstDerivation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "EvaluateFirstDerivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::EvaluateSecondDerivation
  // Il2CppName: EvaluateSecondDerivation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BezierSplineEvaluator::*)(float)>(&BezierSplineEvaluator::EvaluateSecondDerivation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "EvaluateSecondDerivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::OffsetSegmentAndGetT
  // Il2CppName: OffsetSegmentAndGetT
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BezierSplineEvaluator::*)(float)>(&BezierSplineEvaluator::OffsetSegmentAndGetT)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "OffsetSegmentAndGetT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::GetTForSegment
  // Il2CppName: GetTForSegment
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BezierSplineEvaluator::*)(int, float)>(&BezierSplineEvaluator::GetTForSegment)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "GetTForSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::GetTimeValuesForSegment
  // Il2CppName: GetTimeValuesForSegment
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BezierSplineEvaluator::*)(int, float&, float&)>(&BezierSplineEvaluator::GetTimeValuesForSegment)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "GetTimeValuesForSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::OffsetStartIndexToDistance
  // Il2CppName: OffsetStartIndexToDistance
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BezierSplineEvaluator::*)(float)>(&BezierSplineEvaluator::OffsetStartIndexToDistance)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "OffsetStartIndexToDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::CubeRoot
  // Il2CppName: CubeRoot
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&BezierSplineEvaluator::CubeRoot)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "CubeRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: BezierSplineEvaluator::SolveCubic
  // Il2CppName: SolveCubic
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BezierSplineEvaluator::CubicSolveResult (*)(float, float, float, float)>(&BezierSplineEvaluator::SolveCubic)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BezierSplineEvaluator*), "SolveCubic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSplineEvaluator*, "", "BezierSplineEvaluator");
