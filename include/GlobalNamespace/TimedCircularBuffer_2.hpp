// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: <Enumerate>d__13 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: TimedCircularBuffer`2
  template<typename TKey, typename TValue>
  class TimedCircularBuffer_2 : public ::Il2CppObject/*, public System::IDisposable, public System::Collections::Generic::IEnumerable_1<TValue>*/ {
    public:
    // Nested type: GlobalNamespace::TimedCircularBuffer_2::$Enumerate$d__13<TKey, TValue>
    class $Enumerate$d__13;
    // Autogenerated type: TimedCircularBuffer`2/<Enumerate>d__13
    class $Enumerate$d__13 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::Collections::Generic::IEnumerator_1<TValue>*/ {
      public:
      using declaring_type = TimedCircularBuffer_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "$Enumerate$d__13";
      // private System.Int32 <>1__state
      // Offset: 0x0
      int $$1__state;
      // private TValue <>2__current
      // Offset: 0x0
      TValue $$2__current;
      // public TimedCircularBuffer`2<TKey,TValue> <>4__this
      // Offset: 0x0
      GlobalNamespace::TimedCircularBuffer_2<TKey, TValue>* $$4__this;
      // private System.Int32 <i>5__2
      // Offset: 0x0
      int $i$5__2;
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<TValue>
      operator System::Collections::Generic::IEnumerator_1<TValue>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<TValue>*>(this);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFF
      static typename TimedCircularBuffer_2<TKey, TValue>::$Enumerate$d__13* New_ctor(int $$1__state) {
        return THROW_UNLESS((il2cpp_utils::New<typename TimedCircularBuffer_2<TKey, TValue>::$Enumerate$d__13*>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void System_IDisposable_Dispose() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.IDisposable.Dispose"));
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "MoveNext"));
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // private TValue System.Collections.Generic.IEnumerator<TValue>.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      TValue System_Collections_Generic_IEnumerator_1_get_Current() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<TValue>(this, "System.Collections.Generic.IEnumerator<TValue>.get_Current")));
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.IEnumerator.Reset"));
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(this, "System.Collections.IEnumerator.get_Current"));
      }
    }; // TimedCircularBuffer`2/<Enumerate>d__13
    // private System.Int64[] _timestamps
    // Offset: 0x0
    ::Array<int64_t>* timestamps;
    // private TKey[] _keys
    // Offset: 0x0
    ::Array<TKey>* keys;
    // private TValue[] _buffer
    // Offset: 0x0
    ::Array<TValue>* buffer;
    // private System.Int32 _size
    // Offset: 0x0
    int size;
    // private System.Int32 _count
    // Offset: 0x0
    int count;
    // private System.Int32 _start
    // Offset: 0x0
    int start;
    // private System.Int64 _expirationLength
    // Offset: 0x0
    int64_t expirationLength;
    // private readonly System.Collections.Generic.Dictionary`2<TKey,TValue> _lookup
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<TKey, TValue>* lookup;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<TValue>
    operator System::Collections::Generic::IEnumerable_1<TValue>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<TValue>*>(this);
    }
    // public System.Void .ctor(System.Single expirationLength, System.Int32 initialSize)
    // Offset: 0xFFFFFFFF
    static TimedCircularBuffer_2<TKey, TValue>* New_ctor(float expirationLength, int initialSize) {
      return THROW_UNLESS((il2cpp_utils::New<TimedCircularBuffer_2<TKey, TValue>*>(expirationLength, initialSize)));
    }
    // private System.Void EnsureCapacity()
    // Offset: 0xFFFFFFFF
    void EnsureCapacity() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnsureCapacity"));
    }
    // private System.Void SeekToFirst()
    // Offset: 0xFFFFFFFF
    void SeekToFirst() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "SeekToFirst"));
    }
    // private System.Collections.Generic.IEnumerator`1<TValue> Enumerate()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerator_1<TValue>* Enumerate() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<TValue>*>(this, "Enumerate"));
    }
    // public System.Boolean Contains(TKey key)
    // Offset: 0xFFFFFFFF
    bool Contains(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", key));
    }
    // public TValue Get(TKey key)
    // Offset: 0xFFFFFFFF
    TValue Get(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TValue>(this, "Get", key));
    }
    // public System.Boolean Push(TKey key, TValue value)
    // Offset: 0xFFFFFFFF
    bool Push(TKey key, TValue value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Push", key, value));
    }
    // public System.Void PollUpdate()
    // Offset: 0xFFFFFFFF
    void PollUpdate() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "PollUpdate"));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
    // private System.Collections.Generic.IEnumerator`1<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<TValue>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<TValue>*>(this, "System.Collections.Generic.IEnumerable<TValue>.GetEnumerator")));
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
    }
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose() {
      Dispose();
    }
  }; // TimedCircularBuffer`2
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::TimedCircularBuffer_2, "", "TimedCircularBuffer`2");
#pragma pack(pop)
