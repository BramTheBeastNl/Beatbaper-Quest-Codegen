// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSchemeDropdown
  class ColorSchemeDropdown;
  // Forward declaring type: EditColorSchemeController
  class EditColorSchemeController;
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
  // Forward declaring type: ColorScheme
  class ColorScheme;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ModalView
  class ModalView;
  // Forward declaring type: PanelAnimationSO
  class PanelAnimationSO;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
  // Forward declaring type: DropdownWithTableView
  class DropdownWithTableView;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: ColorsOverrideSettingsPanelController
  // [] Offset: FFFFFFFF
  class ColorsOverrideSettingsPanelController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IRefreshable*/ {
    public:
    // private UnityEngine.UI.Toggle _overrideColorsToggle
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::UI::Toggle* overrideColorsToggle;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.GameObject _detailsPanelGO
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::GameObject* detailsPanelGO;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private ColorSchemeDropdown _colorSchemeDropDown
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ColorSchemeDropdown* colorSchemeDropDown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSchemeDropdown*) == 0x8);
    // private EditColorSchemeController _editColorSchemeController
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::EditColorSchemeController* editColorSchemeController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EditColorSchemeController*) == 0x8);
    // private HMUI.ModalView _editColorSchemeModalView
    // Size: 0x8
    // Offset: 0x38
    HMUI::ModalView* editColorSchemeModalView;
    // Field size check
    static_assert(sizeof(HMUI::ModalView*) == 0x8);
    // private UnityEngine.UI.Button _editColorSchemeButton
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::UI::Button* editColorSchemeButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // [SpaceAttribute] Offset: 0xD2AAD0
    // private HMUI.PanelAnimationSO _presentPanelAnimation
    // Size: 0x8
    // Offset: 0x48
    HMUI::PanelAnimationSO* presentPanelAnimation;
    // Field size check
    static_assert(sizeof(HMUI::PanelAnimationSO*) == 0x8);
    // private HMUI.PanelAnimationSO _dismissPanelAnimation
    // Size: 0x8
    // Offset: 0x50
    HMUI::PanelAnimationSO* dismissPanelAnimation;
    // Field size check
    static_assert(sizeof(HMUI::PanelAnimationSO*) == 0x8);
    // private ColorSchemesSettings _colorSchemesSettings
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::ColorSchemesSettings* colorSchemesSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSchemesSettings*) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x60
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: buttonBinder
    char __padding9[0x7] = {};
    // private HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x68
    HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(HMUI::ButtonBinder*) == 0x8);
    // Creating value type constructor for type: ColorsOverrideSettingsPanelController
    ColorsOverrideSettingsPanelController(UnityEngine::UI::Toggle* overrideColorsToggle_ = {}, UnityEngine::GameObject* detailsPanelGO_ = {}, GlobalNamespace::ColorSchemeDropdown* colorSchemeDropDown_ = {}, GlobalNamespace::EditColorSchemeController* editColorSchemeController_ = {}, HMUI::ModalView* editColorSchemeModalView_ = {}, UnityEngine::UI::Button* editColorSchemeButton_ = {}, HMUI::PanelAnimationSO* presentPanelAnimation_ = {}, HMUI::PanelAnimationSO* dismissPanelAnimation_ = {}, GlobalNamespace::ColorSchemesSettings* colorSchemesSettings_ = {}, bool initialized_ = {}, HMUI::ButtonBinder* buttonBinder_ = {}) noexcept : overrideColorsToggle{overrideColorsToggle_}, detailsPanelGO{detailsPanelGO_}, colorSchemeDropDown{colorSchemeDropDown_}, editColorSchemeController{editColorSchemeController_}, editColorSchemeModalView{editColorSchemeModalView_}, editColorSchemeButton{editColorSchemeButton_}, presentPanelAnimation{presentPanelAnimation_}, dismissPanelAnimation{dismissPanelAnimation_}, colorSchemesSettings{colorSchemesSettings_}, initialized{initialized_}, buttonBinder{buttonBinder_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IRefreshable
    operator GlobalNamespace::IRefreshable() noexcept {
      return *reinterpret_cast<GlobalNamespace::IRefreshable*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public ColorSchemesSettings get_colorSchemesSettings()
    // Offset: 0xFD5588
    GlobalNamespace::ColorSchemesSettings* get_colorSchemesSettings();
    // public System.Void SetData(ColorSchemesSettings colorSchemesSettings)
    // Offset: 0xFD5590
    void SetData(GlobalNamespace::ColorSchemesSettings* colorSchemesSettings);
    // protected System.Void OnDestroy()
    // Offset: 0xFD58D4
    void OnDestroy();
    // protected System.Void OnDisable()
    // Offset: 0xFD5C0C
    void OnDisable();
    // public System.Void Refresh()
    // Offset: 0xFD5C30
    void Refresh_NEW();
    // private System.Void HandleDropDownDidSelectCellWithIdx(HMUI.DropdownWithTableView dropDownWithTableView, System.Int32 idx)
    // Offset: 0xFD5DB4
    void HandleDropDownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropDownWithTableView, int idx);
    // private System.Void HandleOverrideColorsToggleValueChanged(System.Boolean isOn)
    // Offset: 0xFD5E0C
    void HandleOverrideColorsToggleValueChanged(bool isOn);
    // private System.Void HandleEditColorSchemeButtonWasPressed()
    // Offset: 0xFD5F20
    void HandleEditColorSchemeButtonWasPressed();
    // private System.Void HandleEditColorSchemeControllerDidFinish()
    // Offset: 0xFD5FB4
    void HandleEditColorSchemeControllerDidFinish();
    // private System.Void HandleEditColorSchemeControllerDidChangeColorScheme(ColorScheme colorScheme)
    // Offset: 0xFD6010
    void HandleEditColorSchemeControllerDidChangeColorScheme(GlobalNamespace::ColorScheme* colorScheme);
    // private System.Void <HandleOverrideColorsToggleValueChanged>b__18_0()
    // Offset: 0xFD6030
    void $HandleOverrideColorsToggleValueChanged$b__18_0();
    // public System.Void .ctor()
    // Offset: 0xFD6028
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorsOverrideSettingsPanelController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorsOverrideSettingsPanelController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorsOverrideSettingsPanelController*, creationType>()));
    }
  }; // ColorsOverrideSettingsPanelController
  #pragma pack(pop)
  static check_size<sizeof(ColorsOverrideSettingsPanelController), 104 + sizeof(HMUI::ButtonBinder*)> __GlobalNamespace_ColorsOverrideSettingsPanelControllerSizeCheck;
  static_assert(sizeof(ColorsOverrideSettingsPanelController) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ColorsOverrideSettingsPanelController*, "", "ColorsOverrideSettingsPanelController");
