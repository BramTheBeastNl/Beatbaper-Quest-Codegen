// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IUnifiedNetworkPlayerModel
  class IUnifiedNetworkPlayerModel;
  // Skipping declaration: BeatmapDifficultyMask because it is already included!
  // Skipping declaration: GameplayModifierMask because it is already included!
  // Skipping declaration: SongPackMask because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: StubMatchmakingServer
  // [] Offset: FFFFFFFF
  class StubMatchmakingServer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnifiedNetworkPlayerModel*) == 0x8);
    // private readonly GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x18
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private readonly System.String _secret
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: StubMatchmakingServer
    StubMatchmakingServer(GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, ::Il2CppString* secret_ = {}) noexcept : unifiedNetworkPlayerModel{unifiedNetworkPlayerModel_}, configuration{configuration_}, secret{secret_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // public System.Void .ctor(IUnifiedNetworkPlayerModel unifiedNetworkPlayerModel, GameplayServerConfiguration configuration, System.String secret)
    // Offset: 0xFE0444
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StubMatchmakingServer* New_ctor(GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StubMatchmakingServer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StubMatchmakingServer*, creationType>(unifiedNetworkPlayerModel, configuration, secret)));
    }
    // public System.String get_userId()
    // Offset: 0xFE0490
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0xFE04E0
    ::Il2CppString* get_userName();
    // public System.Boolean get_isMe()
    // Offset: 0xFE0530
    bool get_isMe();
    // public System.Int32 get_currentPartySize()
    // Offset: 0xFE0538
    int get_currentPartySize();
    // public System.Int32 get_maxPartySize()
    // Offset: 0xFE05EC
    int get_maxPartySize();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0xFE06A0
    bool get_isMyPartyOwner();
    // public System.Boolean get_isOpenParty()
    // Offset: 0xFE06A8
    bool get_isOpenParty();
    // public System.Boolean get_isConnected()
    // Offset: 0xFE06B0
    bool get_isConnected();
    // public System.Boolean get_isPlayer()
    // Offset: 0xFE06B8
    bool get_isPlayer();
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0xFE06C0
    bool get_isDedicatedServer();
    // public System.Boolean get_isSpectating()
    // Offset: 0xFE06C8
    bool get_isSpectating();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0xFE06D0
    GlobalNamespace::BeatmapDifficultyMask get_difficulties();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0xFE06D8
    GlobalNamespace::GameplayModifierMask get_modifiers();
    // public SongPackMask get_songPacks()
    // Offset: 0xFE06E0
    GlobalNamespace::SongPackMask get_songPacks();
    // public System.Boolean get_canJoin()
    // Offset: 0xFE06EC
    bool get_canJoin();
    // public System.Void Join()
    // Offset: 0xFE06F4
    void Join();
    // public System.Boolean get_requiresPassword()
    // Offset: 0xFE07F4
    bool get_requiresPassword();
    // public System.Void Join(System.String password)
    // Offset: 0xFE07FC
    void Join(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0xFE0800
    bool get_isWaitingOnJoin();
    // public System.Boolean get_canInvite()
    // Offset: 0xFE0808
    bool get_canInvite();
    // public System.Void Invite()
    // Offset: 0xFE0810
    void Invite();
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0xFE0870
    bool get_isWaitingOnInvite();
    // public System.Boolean get_canKick()
    // Offset: 0xFE0878
    bool get_canKick();
    // public System.Void Kick()
    // Offset: 0xFE0880
    void Kick();
    // public System.Boolean get_canLeave()
    // Offset: 0xFE08E0
    bool get_canLeave();
    // public System.Void Leave()
    // Offset: 0xFE08E8
    void Leave();
    // public System.Boolean get_canBlock()
    // Offset: 0xFE099C
    bool get_canBlock();
    // public System.Void Block()
    // Offset: 0xFE09A4
    void Block();
    // public System.Boolean get_canUnblock()
    // Offset: 0xFE0A04
    bool get_canUnblock();
    // public System.Void Unblock()
    // Offset: 0xFE0A0C
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0xFE0A6C
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0xFE0ACC
    void SendInviteResponse(bool accept);
  }; // StubMatchmakingServer
  #pragma pack(pop)
  static check_size<sizeof(StubMatchmakingServer), 48 + sizeof(::Il2CppString*)> __GlobalNamespace_StubMatchmakingServerSizeCheck;
  static_assert(sizeof(StubMatchmakingServer) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StubMatchmakingServer*, "", "StubMatchmakingServer");
