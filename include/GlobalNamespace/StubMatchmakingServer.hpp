// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IUnifiedNetworkPlayerModel
  class IUnifiedNetworkPlayerModel;
  // Skipping declaration: BeatmapDifficultyMask because it is already included!
  // Skipping declaration: GameplayModifierMask because it is already included!
  // Skipping declaration: SongPackMask because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: StubMatchmakingServer
  // [] Offset: FFFFFFFF
  class StubMatchmakingServer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnifiedNetworkPlayerModel*) == 0x8);
    // private readonly GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x18
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private readonly System.String _secret
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: StubMatchmakingServer
    StubMatchmakingServer(GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, ::Il2CppString* secret_ = {}) noexcept : unifiedNetworkPlayerModel{unifiedNetworkPlayerModel_}, configuration{configuration_}, secret{secret_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // public System.Void .ctor(IUnifiedNetworkPlayerModel unifiedNetworkPlayerModel, GameplayServerConfiguration configuration, System.String secret)
    // Offset: 0x1019BD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StubMatchmakingServer* New_ctor(GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StubMatchmakingServer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StubMatchmakingServer*, creationType>(unifiedNetworkPlayerModel, configuration, secret)));
    }
    // public System.String get_userId()
    // Offset: 0x1019C20
    ::Il2CppString* get_userId_NEW();
    // public System.String get_userName()
    // Offset: 0x1019C70
    ::Il2CppString* get_userName_NEW();
    // public System.Boolean get_isMe()
    // Offset: 0x1019CC0
    bool get_isMe_NEW();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x1019CC8
    int get_currentPartySize_NEW();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x1019D7C
    int get_maxPartySize_NEW();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x1019E30
    bool get_isMyPartyOwner_NEW();
    // public System.Boolean get_isOpenParty()
    // Offset: 0x1019E38
    bool get_isOpenParty_NEW();
    // public System.Boolean get_isConnected()
    // Offset: 0x1019E40
    bool get_isConnected_NEW();
    // public System.Boolean get_isPlayer()
    // Offset: 0x1019E48
    bool get_isPlayer_NEW();
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x1019E50
    bool get_isDedicatedServer_NEW();
    // public System.Boolean get_isSpectating()
    // Offset: 0x1019E58
    bool get_isSpectating_NEW();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x1019E60
    GlobalNamespace::BeatmapDifficultyMask get_difficulties_NEW();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x1019E68
    GlobalNamespace::GameplayModifierMask get_modifiers_NEW();
    // public SongPackMask get_songPacks()
    // Offset: 0x1019E70
    GlobalNamespace::SongPackMask get_songPacks_NEW();
    // public System.Boolean get_canJoin()
    // Offset: 0x1019E7C
    bool get_canJoin_NEW();
    // public System.Void Join()
    // Offset: 0x1019E84
    void Join_NEW();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x1019F84
    bool get_requiresPassword_NEW();
    // public System.Void Join(System.String password)
    // Offset: 0x1019F8C
    void Join_NEW(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x1019F90
    bool get_isWaitingOnJoin_NEW();
    // public System.Boolean get_canInvite()
    // Offset: 0x1019F98
    bool get_canInvite_NEW();
    // public System.Void Invite()
    // Offset: 0x1019FA0
    void Invite_NEW();
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x101A000
    bool get_isWaitingOnInvite_NEW();
    // public System.Boolean get_canKick()
    // Offset: 0x101A008
    bool get_canKick_NEW();
    // public System.Void Kick()
    // Offset: 0x101A010
    void Kick_NEW();
    // public System.Boolean get_canLeave()
    // Offset: 0x101A070
    bool get_canLeave_NEW();
    // public System.Void Leave()
    // Offset: 0x101A078
    void Leave_NEW();
    // public System.Boolean get_canBlock()
    // Offset: 0x101A12C
    bool get_canBlock_NEW();
    // public System.Void Block()
    // Offset: 0x101A134
    void Block_NEW();
    // public System.Boolean get_canUnblock()
    // Offset: 0x101A194
    bool get_canUnblock_NEW();
    // public System.Void Unblock()
    // Offset: 0x101A19C
    void Unblock_NEW();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x101A1FC
    void SendJoinResponse_NEW(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x101A25C
    void SendInviteResponse_NEW(bool accept);
  }; // StubMatchmakingServer
  #pragma pack(pop)
  static check_size<sizeof(StubMatchmakingServer), 48 + sizeof(::Il2CppString*)> __GlobalNamespace_StubMatchmakingServerSizeCheck;
  static_assert(sizeof(StubMatchmakingServer) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StubMatchmakingServer*, "", "StubMatchmakingServer");
