// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatmapObjectCallbackController
  class IBeatmapObjectCallbackController;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: SongTimeTweeningManager
  class SongTimeTweeningManager;
  // Forward declaring type: Vector3Tween
  class Vector3Tween;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SmoothStepPositionEventEffect
  class SmoothStepPositionEventEffect;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::SmoothStepPositionEventEffect);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SmoothStepPositionEventEffect*, "", "SmoothStepPositionEventEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: SmoothStepPositionEventEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class SmoothStepPositionEventEffect : public UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private BeatmapEventType _event
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::BeatmapEventType event;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventType) == 0x4);
    // private System.Boolean _clampValue
    // Size: 0x1
    // Offset: 0x1C
    bool clampValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clampValue and: eventValueMin
    char __padding1[0x3] = {};
    // [DrawIfAttribute] Offset: 0xF3B8E8
    // private System.Int32 _eventValueMin
    // Size: 0x4
    // Offset: 0x20
    int eventValueMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DrawIfAttribute] Offset: 0xF3B990
    // private System.Int32 _eventValueMax
    // Size: 0x4
    // Offset: 0x24
    int eventValueMax;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [SpaceAttribute] Offset: 0xF3BA38
    // private UnityEngine.Vector3 _movementVector
    // Size: 0xC
    // Offset: 0x28
    UnityEngine::Vector3 movementVector;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Single _stepSize
    // Size: 0x4
    // Offset: 0x34
    float stepSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InjectAttribute] Offset: 0xF3BA84
    // private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::IBeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xF3BA94
    // private readonly Tweening.SongTimeTweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x40
    Tweening::SongTimeTweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::SongTimeTweeningManager*) == 0x8);
    // private Tweening.Vector3Tween _positionTween
    // Size: 0x8
    // Offset: 0x48
    Tweening::Vector3Tween* positionTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _startPos
    // Size: 0xC
    // Offset: 0x58
    UnityEngine::Vector3 startPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapEventType _event
    GlobalNamespace::BeatmapEventType& dyn__event();
    // Get instance field reference: private System.Boolean _clampValue
    bool& dyn__clampValue();
    // Get instance field reference: private System.Int32 _eventValueMin
    int& dyn__eventValueMin();
    // Get instance field reference: private System.Int32 _eventValueMax
    int& dyn__eventValueMax();
    // Get instance field reference: private UnityEngine.Vector3 _movementVector
    UnityEngine::Vector3& dyn__movementVector();
    // Get instance field reference: private System.Single _stepSize
    float& dyn__stepSize();
    // Get instance field reference: private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    GlobalNamespace::IBeatmapObjectCallbackController*& dyn__beatmapObjectCallbackController();
    // Get instance field reference: private readonly Tweening.SongTimeTweeningManager _tweeningManager
    Tweening::SongTimeTweeningManager*& dyn__tweeningManager();
    // Get instance field reference: private Tweening.Vector3Tween _positionTween
    Tweening::Vector3Tween*& dyn__positionTween();
    // Get instance field reference: private UnityEngine.Transform _transform
    UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private UnityEngine.Vector3 _startPos
    UnityEngine::Vector3& dyn__startPos();
    // protected System.Void Awake()
    // Offset: 0x121511C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1215224
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1215314
    void OnDestroy();
    // private System.Void HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(BeatmapEventData beatmapEventData)
    // Offset: 0x1215464
    void HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private UnityEngine.Vector3 GetPositionForValue(System.Int32 value)
    // Offset: 0x1215548
    UnityEngine::Vector3 GetPositionForValue(int value);
    // private System.Void SetPosition(UnityEngine.Vector3 position)
    // Offset: 0x1215664
    void SetPosition(UnityEngine::Vector3 position);
    // public System.Void .ctor()
    // Offset: 0x12156B0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SmoothStepPositionEventEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SmoothStepPositionEventEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SmoothStepPositionEventEffect*, creationType>()));
    }
  }; // SmoothStepPositionEventEffect
  #pragma pack(pop)
  static check_size<sizeof(SmoothStepPositionEventEffect), 88 + sizeof(UnityEngine::Vector3)> __GlobalNamespace_SmoothStepPositionEventEffectSizeCheck;
  static_assert(sizeof(SmoothStepPositionEventEffect) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionEventEffect::*)()>(&GlobalNamespace::SmoothStepPositionEventEffect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionEventEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionEventEffect::*)()>(&GlobalNamespace::SmoothStepPositionEventEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionEventEffect::*)()>(&GlobalNamespace::SmoothStepPositionEventEffect::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::SmoothStepPositionEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::GetPositionForValue
// Il2CppName: GetPositionForValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (GlobalNamespace::SmoothStepPositionEventEffect::*)(int)>(&GlobalNamespace::SmoothStepPositionEventEffect::GetPositionForValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionEventEffect*), "GetPositionForValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionEventEffect::*)(UnityEngine::Vector3)>(&GlobalNamespace::SmoothStepPositionEventEffect::SetPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionEventEffect*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionEventEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
