// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRController
  class VRController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerVRControllersManager
  class PlayerVRControllersManager;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::PlayerVRControllersManager);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerVRControllersManager*, "", "PlayerVRControllersManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlayerVRControllersManager
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerVRControllersManager : public UnityEngine::MonoBehaviour {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    protected:
    #endif
    // private VRController _leftHandVRController
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::VRController* leftHandVRController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VRController*) == 0x8);
    // private VRController _rightHandVRController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::VRController* rightHandVRController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VRController*) == 0x8);
    public:
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VRController _leftHandVRController
    GlobalNamespace::VRController*& dyn__leftHandVRController();
    // Get instance field reference: private VRController _rightHandVRController
    GlobalNamespace::VRController*& dyn__rightHandVRController();
    // public System.Void DisableAllVRControllers()
    // Offset: 0x12CE3B4
    void DisableAllVRControllers();
    // public System.Void .ctor()
    // Offset: 0x12CE3F8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerVRControllersManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerVRControllersManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerVRControllersManager*, creationType>()));
    }
  }; // PlayerVRControllersManager
  #pragma pack(pop)
  static check_size<sizeof(PlayerVRControllersManager), 32 + sizeof(GlobalNamespace::VRController*)> __GlobalNamespace_PlayerVRControllersManagerSizeCheck;
  static_assert(sizeof(PlayerVRControllersManager) == 0x28);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerVRControllersManager::DisableAllVRControllers
// Il2CppName: DisableAllVRControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerVRControllersManager::*)()>(&GlobalNamespace::PlayerVRControllersManager::DisableAllVRControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerVRControllersManager*), "DisableAllVRControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerVRControllersManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
