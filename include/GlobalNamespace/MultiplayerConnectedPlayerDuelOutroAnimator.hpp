// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IMultiplayerConnectedPlayerOutroAnimator
#include "GlobalNamespace/IMultiplayerConnectedPlayerOutroAnimator.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSO
  class ColorSO;
  // Forward declaring type: AvatarVisualController
  class AvatarVisualController;
  // Forward declaring type: LightsAnimator
  class LightsAnimator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
  // Forward declaring type: Tween`1<T>
  template<typename T>
  class Tween_1;
  // Forward declaring type: Vector3Tween
  class Vector3Tween;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerConnectedPlayerDuelOutroAnimator
  class MultiplayerConnectedPlayerDuelOutroAnimator : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IMultiplayerConnectedPlayerOutroAnimator*/ {
    public:
    // Nested type: GlobalNamespace::MultiplayerConnectedPlayerDuelOutroAnimator::$AnimationCoroutine$d__13
    class $AnimationCoroutine$d__13;
    // private System.Single _moveDuration
    // Size: 0x4
    // Offset: 0x18
    float moveDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _moveOffset
    // Size: 0xC
    // Offset: 0x1C
    UnityEngine::Vector3 moveOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Single _lightsFadeOutDuration
    // Size: 0x4
    // Offset: 0x28
    float lightsFadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _avatarFadeOutDuration
    // Size: 0x4
    // Offset: 0x2C
    float avatarFadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0xD26884
    // private UnityEngine.Transform _connectedPlayerContainerTransform
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* connectedPlayerContainerTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private ColorSO _offLightsColor
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::ColorSO* offLightsColor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // private AvatarVisualController _avatarVisualsController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AvatarVisualController* avatarVisualsController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarVisualController*) == 0x8);
    // private LightsAnimator[] _lightsAnimators
    // Size: 0x8
    // Offset: 0x48
    ::Array<GlobalNamespace::LightsAnimator*>* lightsAnimators;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::LightsAnimator*>*) == 0x8);
    // [InjectAttribute] Offset: 0xD268EC
    // private readonly Tweening.TweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x50
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // private Tweening.Tween`1<UnityEngine.Color> _avatarColorTween
    // Size: 0x8
    // Offset: 0x58
    Tweening::Tween_1<UnityEngine::Color>* avatarColorTween;
    // Field size check
    static_assert(sizeof(Tweening::Tween_1<UnityEngine::Color>*) == 0x8);
    // private Tweening.Vector3Tween _platformPositionTween
    // Size: 0x8
    // Offset: 0x60
    Tweening::Vector3Tween* platformPositionTween;
    // Field size check
    static_assert(sizeof(Tweening::Vector3Tween*) == 0x8);
    // Creating value type constructor for type: MultiplayerConnectedPlayerDuelOutroAnimator
    MultiplayerConnectedPlayerDuelOutroAnimator(float moveDuration_ = {}, UnityEngine::Vector3 moveOffset_ = {}, float lightsFadeOutDuration_ = {}, float avatarFadeOutDuration_ = {}, UnityEngine::Transform* connectedPlayerContainerTransform_ = {}, GlobalNamespace::ColorSO* offLightsColor_ = {}, GlobalNamespace::AvatarVisualController* avatarVisualsController_ = {}, ::Array<GlobalNamespace::LightsAnimator*>* lightsAnimators_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, Tweening::Tween_1<UnityEngine::Color>* avatarColorTween_ = {}, Tweening::Vector3Tween* platformPositionTween_ = {}) noexcept : moveDuration{moveDuration_}, moveOffset{moveOffset_}, lightsFadeOutDuration{lightsFadeOutDuration_}, avatarFadeOutDuration{avatarFadeOutDuration_}, connectedPlayerContainerTransform{connectedPlayerContainerTransform_}, offLightsColor{offLightsColor_}, avatarVisualsController{avatarVisualsController_}, lightsAnimators{lightsAnimators_}, tweeningManager{tweeningManager_}, avatarColorTween{avatarColorTween_}, platformPositionTween{platformPositionTween_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerConnectedPlayerOutroAnimator
    operator GlobalNamespace::IMultiplayerConnectedPlayerOutroAnimator() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerConnectedPlayerOutroAnimator*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void OnDestroy()
    // Offset: 0x103FEF8
    void OnDestroy();
    // public System.Void Animate()
    // Offset: 0x103FF90
    void Animate();
    // private System.Collections.IEnumerator AnimationCoroutine()
    // Offset: 0x103FFBC
    System::Collections::IEnumerator* AnimationCoroutine();
    // private System.Void <AnimationCoroutine>b__13_0(UnityEngine.Color color)
    // Offset: 0x10400D0
    void $AnimationCoroutine$b__13_0(UnityEngine::Color color);
    // private System.Void <AnimationCoroutine>b__13_1(UnityEngine.Vector3 val)
    // Offset: 0x10400EC
    void $AnimationCoroutine$b__13_1(UnityEngine::Vector3 val);
    // public System.Void .ctor()
    // Offset: 0x1040058
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerConnectedPlayerDuelOutroAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerDuelOutroAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerConnectedPlayerDuelOutroAnimator*, creationType>()));
    }
  }; // MultiplayerConnectedPlayerDuelOutroAnimator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerConnectedPlayerDuelOutroAnimator), 96 + sizeof(Tweening::Vector3Tween*)> __GlobalNamespace_MultiplayerConnectedPlayerDuelOutroAnimatorSizeCheck;
  static_assert(sizeof(MultiplayerConnectedPlayerDuelOutroAnimator) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerDuelOutroAnimator*, "", "MultiplayerConnectedPlayerDuelOutroAnimator");
