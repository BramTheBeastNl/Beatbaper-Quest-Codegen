// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CubicSolveResult
  struct CubicSolveResult;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSplineEvaluator::CubicSolveResult, "", "BezierSplineEvaluator/CubicSolveResult");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BezierSplineEvaluator/CubicSolveResult
  // [TokenAttribute] Offset: FFFFFFFF
  struct BezierSplineEvaluator::CubicSolveResult/*, public System::ValueType*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    protected:
    #endif
    // public readonly System.Int32 numberOfSolutions
    // Size: 0x4
    // Offset: 0x0
    int numberOfSolutions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single solution1
    // Size: 0x4
    // Offset: 0x4
    float solution1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single solution2
    // Size: 0x4
    // Offset: 0x8
    float solution2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single solution3
    // Size: 0x4
    // Offset: 0xC
    float solution3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: CubicSolveResult
    constexpr CubicSolveResult(int numberOfSolutions_ = {}, float solution1_ = {}, float solution2_ = {}, float solution3_ = {}) noexcept : numberOfSolutions{numberOfSolutions_}, solution1{solution1_}, solution2{solution2_}, solution3{solution3_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Int32 numberOfSolutions
    int& dyn_numberOfSolutions();
    // Get instance field reference: public System.Single solution1
    float& dyn_solution1();
    // Get instance field reference: public System.Single solution2
    float& dyn_solution2();
    // Get instance field reference: public System.Single solution3
    float& dyn_solution3();
    // public System.Void .ctor(System.Single solution1)
    // Offset: 0x12A3730
    CubicSolveResult(float solution1);
    // public System.Void .ctor(System.Single solution1, System.Single solution2)
    // Offset: 0x12A3744
    CubicSolveResult(float solution1, float solution2);
    // public System.Void .ctor(System.Single solution1, System.Single solution2, System.Single solution3)
    // Offset: 0x12A3758
    CubicSolveResult(float solution1, float solution2, float solution3);
  }; // BezierSplineEvaluator/CubicSolveResult
  #pragma pack(pop)
  static check_size<sizeof(BezierSplineEvaluator::CubicSolveResult), 12 + sizeof(float)> __GlobalNamespace_BezierSplineEvaluator_CubicSolveResultSizeCheck;
  static_assert(sizeof(BezierSplineEvaluator::CubicSolveResult) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BezierSplineEvaluator::CubicSolveResult::CubicSolveResult
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BezierSplineEvaluator::CubicSolveResult::CubicSolveResult
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BezierSplineEvaluator::CubicSolveResult::CubicSolveResult
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
