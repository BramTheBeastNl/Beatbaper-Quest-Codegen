// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLineData
  class BeatmapLineData;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: NotesInTimeRowProcessor
  class NotesInTimeRowProcessor;
  // Forward declaring type: IReadonlyBeatmapLineData
  class IReadonlyBeatmapLineData;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapData
  // [] Offset: FFFFFFFF
  class BeatmapData : public ::Il2CppObject/*, public GlobalNamespace::IReadonlyBeatmapData*/ {
    public:
    // Nested type: GlobalNamespace::BeatmapData::$get_beatmapObjectsData$d__31
    class $get_beatmapObjectsData$d__31;
    // [CompilerGeneratedAttribute] Offset: 0xD20074
    // private System.Int32 <cuttableNotesType>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int cuttableNotesType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD20084
    // private System.Int32 <obstaclesCount>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int obstaclesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD20094
    // private System.Int32 <bombsCount>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int bombsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD200A4
    // private System.Int32 <spawnRotationEventsCount>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int spawnRotationEventsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly BeatmapLineData[] _beatmapLinesData
    // Size: 0x8
    // Offset: 0x20
    ::Array<GlobalNamespace::BeatmapLineData*>* beatmapLinesData;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::BeatmapLineData*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<BeatmapEventData> _beatmapEventsData
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>* beatmapEventsData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.HashSet`1<BeatmapEventType>> _availableSpecialEventsPerKeywordDictionary
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*>* availableSpecialEventsPerKeywordDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*>*) == 0x8);
    // private readonly NotesInTimeRowProcessor _notesInTimeRowProcessor
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::NotesInTimeRowProcessor* notesInTimeRowProcessor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NotesInTimeRowProcessor*) == 0x8);
    // private System.Single _prevAddedBeatmapObjectDataTime
    // Size: 0x4
    // Offset: 0x40
    float prevAddedBeatmapObjectDataTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _prevAddedBeatmapEventDataTime
    // Size: 0x4
    // Offset: 0x44
    float prevAddedBeatmapEventDataTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: BeatmapData
    BeatmapData(int cuttableNotesType_ = {}, int obstaclesCount_ = {}, int bombsCount_ = {}, int spawnRotationEventsCount_ = {}, ::Array<GlobalNamespace::BeatmapLineData*>* beatmapLinesData_ = {}, System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>* beatmapEventsData_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*>* availableSpecialEventsPerKeywordDictionary_ = {}, GlobalNamespace::NotesInTimeRowProcessor* notesInTimeRowProcessor_ = {}, float prevAddedBeatmapObjectDataTime_ = {}, float prevAddedBeatmapEventDataTime_ = {}) noexcept : cuttableNotesType{cuttableNotesType_}, obstaclesCount{obstaclesCount_}, bombsCount{bombsCount_}, spawnRotationEventsCount{spawnRotationEventsCount_}, beatmapLinesData{beatmapLinesData_}, beatmapEventsData{beatmapEventsData_}, availableSpecialEventsPerKeywordDictionary{availableSpecialEventsPerKeywordDictionary_}, notesInTimeRowProcessor{notesInTimeRowProcessor_}, prevAddedBeatmapObjectDataTime{prevAddedBeatmapObjectDataTime_}, prevAddedBeatmapEventDataTime{prevAddedBeatmapEventDataTime_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IReadonlyBeatmapData
    operator GlobalNamespace::IReadonlyBeatmapData() noexcept {
      return *reinterpret_cast<GlobalNamespace::IReadonlyBeatmapData*>(this);
    }
    // public System.Collections.Generic.IReadOnlyList`1<IReadonlyBeatmapLineData> get_beatmapLinesData()
    // Offset: 0x106A180
    System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IReadonlyBeatmapLineData*>* get_beatmapLinesData_NEW();
    // public System.Collections.Generic.IReadOnlyList`1<BeatmapEventData> get_beatmapEventsData()
    // Offset: 0x106A188
    System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::BeatmapEventData*>* get_beatmapEventsData_NEW();
    // public System.Collections.Generic.IReadOnlyDictionary`2<System.String,System.Collections.Generic.HashSet`1<BeatmapEventType>> get_availableSpecialEventsPerKeywordDictionary()
    // Offset: 0x106A190
    System::Collections::Generic::IReadOnlyDictionary_2<::Il2CppString*, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*>* get_availableSpecialEventsPerKeywordDictionary_NEW();
    // public System.Int32 get_numberOfLines()
    // Offset: 0x106A198
    int get_numberOfLines_NEW();
    // public System.Int32 get_cuttableNotesType()
    // Offset: 0x106A1B4
    int get_cuttableNotesType_NEW();
    // private System.Void set_cuttableNotesType(System.Int32 value)
    // Offset: 0x106A1BC
    void set_cuttableNotesType(int value);
    // public System.Int32 get_obstaclesCount()
    // Offset: 0x106A1C4
    int get_obstaclesCount_NEW();
    // private System.Void set_obstaclesCount(System.Int32 value)
    // Offset: 0x106A1CC
    void set_obstaclesCount(int value);
    // public System.Int32 get_bombsCount()
    // Offset: 0x106A1D4
    int get_bombsCount_NEW();
    // private System.Void set_bombsCount(System.Int32 value)
    // Offset: 0x106A1DC
    void set_bombsCount(int value);
    // public System.Int32 get_spawnRotationEventsCount()
    // Offset: 0x106A1E4
    int get_spawnRotationEventsCount_NEW();
    // private System.Void set_spawnRotationEventsCount(System.Int32 value)
    // Offset: 0x106A1EC
    void set_spawnRotationEventsCount(int value);
    // public System.Collections.Generic.IEnumerable`1<BeatmapObjectData> get_beatmapObjectsData()
    // Offset: 0x106A1F4
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::BeatmapObjectData*>* get_beatmapObjectsData_NEW();
    // public System.Void .ctor(System.Int32 numberOfLines)
    // Offset: 0x106A2AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapData* New_ctor(int numberOfLines) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapData*, creationType>(numberOfLines)));
    }
    // public System.Void AddBeatmapObjectData(BeatmapObjectData beatmapObjectData)
    // Offset: 0x106A428
    void AddBeatmapObjectData(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // public System.Void AddBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x106A62C
    void AddBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void InsertBeatmapEventData(System.Int32 index, BeatmapEventData beatmapEventData)
    // Offset: 0x106A778
    void InsertBeatmapEventData(int index, GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void AddAvailableSpecialEventsPerKeyword(System.String keyword, System.Collections.Generic.HashSet`1<BeatmapEventType> availableSpecialEvents)
    // Offset: 0x106AA04
    void AddAvailableSpecialEventsPerKeyword(::Il2CppString* keyword, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>* availableSpecialEvents);
    // public System.Void ProcessRemainingData()
    // Offset: 0x106AA74
    void ProcessRemainingData();
    // public BeatmapData GetCopy()
    // Offset: 0x106AA90
    GlobalNamespace::BeatmapData* GetCopy_NEW();
    // public BeatmapData GetCopyWithoutEvents()
    // Offset: 0x106B648
    GlobalNamespace::BeatmapData* GetCopyWithoutEvents_NEW();
    // public BeatmapData GetCopyWithoutBeatmapObjects()
    // Offset: 0x106B6CC
    GlobalNamespace::BeatmapData* GetCopyWithoutBeatmapObjects_NEW();
    // static private System.Void CopyBeatmapEvents(IReadonlyBeatmapData src, BeatmapData dst)
    // Offset: 0x106B08C
    static void CopyBeatmapEvents(GlobalNamespace::IReadonlyBeatmapData* src, GlobalNamespace::BeatmapData* dst);
    // static private System.Void CopyBeatmapObjects(IReadonlyBeatmapData src, BeatmapData dst)
    // Offset: 0x106AB20
    static void CopyBeatmapObjects(GlobalNamespace::IReadonlyBeatmapData* src, GlobalNamespace::BeatmapData* dst);
    // static public System.Void CopyBeatmapObjectsWaypointsOnly(IReadonlyBeatmapData src, BeatmapData dst)
    // Offset: 0x106B750
    static void CopyBeatmapObjectsWaypointsOnly(GlobalNamespace::IReadonlyBeatmapData* src, GlobalNamespace::BeatmapData* dst);
    // static private System.Void CopyAvailableSpecialEventsPerKeywordDictionary(IReadonlyBeatmapData src, BeatmapData dst)
    // Offset: 0x106B364
    static void CopyAvailableSpecialEventsPerKeywordDictionary(GlobalNamespace::IReadonlyBeatmapData* src, GlobalNamespace::BeatmapData* dst);
  }; // BeatmapData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapData), 68 + sizeof(float)> __GlobalNamespace_BeatmapDataSizeCheck;
  static_assert(sizeof(BeatmapData) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapData*, "", "BeatmapData");
