// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Quatf because it is already included!
  // Skipping declaration: Posef because it is already included!
  // Skipping declaration: TrackingConfidence because it is already included!
  // Skipping declaration: HandStatus because it is already included!
  // Skipping declaration: HandFingerPinch because it is already included!
  // Forward declaring type: OVRNativeBuffer
  class OVRNativeBuffer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: OVRPlugin
  class OVRPlugin : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRPlugin::GUID
    class GUID;
    // Nested type: GlobalNamespace::OVRPlugin::Bool
    struct Bool;
    // Nested type: GlobalNamespace::OVRPlugin::Result
    struct Result;
    // Nested type: GlobalNamespace::OVRPlugin::CameraStatus
    struct CameraStatus;
    // Nested type: GlobalNamespace::OVRPlugin::Eye
    struct Eye;
    // Nested type: GlobalNamespace::OVRPlugin::Tracker
    struct Tracker;
    // Nested type: GlobalNamespace::OVRPlugin::Node
    struct Node;
    // Nested type: GlobalNamespace::OVRPlugin::Controller
    struct Controller;
    // Nested type: GlobalNamespace::OVRPlugin::Handedness
    struct Handedness;
    // Nested type: GlobalNamespace::OVRPlugin::TrackingOrigin
    struct TrackingOrigin;
    // Nested type: GlobalNamespace::OVRPlugin::RecenterFlags
    struct RecenterFlags;
    // Nested type: GlobalNamespace::OVRPlugin::BatteryStatus
    struct BatteryStatus;
    // Nested type: GlobalNamespace::OVRPlugin::EyeTextureFormat
    struct EyeTextureFormat;
    // Nested type: GlobalNamespace::OVRPlugin::PlatformUI
    struct PlatformUI;
    // Nested type: GlobalNamespace::OVRPlugin::SystemRegion
    struct SystemRegion;
    // Nested type: GlobalNamespace::OVRPlugin::SystemHeadset
    struct SystemHeadset;
    // Nested type: GlobalNamespace::OVRPlugin::OverlayShape
    struct OverlayShape;
    // Nested type: GlobalNamespace::OVRPlugin::Step
    struct Step;
    // Nested type: GlobalNamespace::OVRPlugin::CameraDevice
    struct CameraDevice;
    // Nested type: GlobalNamespace::OVRPlugin::CameraDeviceDepthSensingMode
    struct CameraDeviceDepthSensingMode;
    // Nested type: GlobalNamespace::OVRPlugin::CameraDeviceDepthQuality
    struct CameraDeviceDepthQuality;
    // Nested type: GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel
    struct FixedFoveatedRenderingLevel;
    // Nested type: GlobalNamespace::OVRPlugin::TiledMultiResLevel
    struct TiledMultiResLevel;
    // Nested type: GlobalNamespace::OVRPlugin::PerfMetrics
    struct PerfMetrics;
    // Nested type: GlobalNamespace::OVRPlugin::CameraDeviceIntrinsicsParameters
    struct CameraDeviceIntrinsicsParameters;
    // Nested type: GlobalNamespace::OVRPlugin::OverlayFlag
    struct OverlayFlag;
    // Nested type: GlobalNamespace::OVRPlugin::Vector2f
    struct Vector2f;
    // Nested type: GlobalNamespace::OVRPlugin::Vector3f
    struct Vector3f;
    // Nested type: GlobalNamespace::OVRPlugin::Vector4f
    struct Vector4f;
    // Nested type: GlobalNamespace::OVRPlugin::Vector4s
    struct Vector4s;
    // Nested type: GlobalNamespace::OVRPlugin::Quatf
    struct Quatf;
    // Nested type: GlobalNamespace::OVRPlugin::Posef
    struct Posef;
    // Nested type: GlobalNamespace::OVRPlugin::TextureRectMatrixf
    struct TextureRectMatrixf;
    // Nested type: GlobalNamespace::OVRPlugin::PoseStatef
    struct PoseStatef;
    // Nested type: GlobalNamespace::OVRPlugin::ControllerState4
    struct ControllerState4;
    // Nested type: GlobalNamespace::OVRPlugin::ControllerState2
    struct ControllerState2;
    // Nested type: GlobalNamespace::OVRPlugin::ControllerState
    struct ControllerState;
    // Nested type: GlobalNamespace::OVRPlugin::HapticsBuffer
    struct HapticsBuffer;
    // Nested type: GlobalNamespace::OVRPlugin::HapticsState
    struct HapticsState;
    // Nested type: GlobalNamespace::OVRPlugin::HapticsDesc
    struct HapticsDesc;
    // Nested type: GlobalNamespace::OVRPlugin::AppPerfFrameStats
    struct AppPerfFrameStats;
    // Nested type: GlobalNamespace::OVRPlugin::AppPerfStats
    struct AppPerfStats;
    // Nested type: GlobalNamespace::OVRPlugin::Sizei
    struct Sizei;
    // Nested type: GlobalNamespace::OVRPlugin::Sizef
    struct Sizef;
    // Nested type: GlobalNamespace::OVRPlugin::Vector2i
    struct Vector2i;
    // Nested type: GlobalNamespace::OVRPlugin::Recti
    struct Recti;
    // Nested type: GlobalNamespace::OVRPlugin::Rectf
    struct Rectf;
    // Nested type: GlobalNamespace::OVRPlugin::Frustumf
    struct Frustumf;
    // Nested type: GlobalNamespace::OVRPlugin::Frustumf2
    struct Frustumf2;
    // Nested type: GlobalNamespace::OVRPlugin::BoundaryType
    struct BoundaryType;
    // Nested type: GlobalNamespace::OVRPlugin::BoundaryTestResult
    struct BoundaryTestResult;
    // Nested type: GlobalNamespace::OVRPlugin::BoundaryGeometry
    struct BoundaryGeometry;
    // Nested type: GlobalNamespace::OVRPlugin::Colorf
    struct Colorf;
    // Nested type: GlobalNamespace::OVRPlugin::Fovf
    struct Fovf;
    // Nested type: GlobalNamespace::OVRPlugin::CameraIntrinsics
    struct CameraIntrinsics;
    // Nested type: GlobalNamespace::OVRPlugin::CameraExtrinsics
    struct CameraExtrinsics;
    // Nested type: GlobalNamespace::OVRPlugin::LayerLayout
    struct LayerLayout;
    // Nested type: GlobalNamespace::OVRPlugin::LayerFlags
    struct LayerFlags;
    // Nested type: GlobalNamespace::OVRPlugin::LayerDesc
    struct LayerDesc;
    // Nested type: GlobalNamespace::OVRPlugin::LayerSubmit
    struct LayerSubmit;
    // Nested type: GlobalNamespace::OVRPlugin::TrackingConfidence
    struct TrackingConfidence;
    // Nested type: GlobalNamespace::OVRPlugin::Hand
    struct Hand;
    // Nested type: GlobalNamespace::OVRPlugin::HandStatus
    struct HandStatus;
    // Nested type: GlobalNamespace::OVRPlugin::BoneId
    struct BoneId;
    // Nested type: GlobalNamespace::OVRPlugin::HandFinger
    struct HandFinger;
    // Nested type: GlobalNamespace::OVRPlugin::HandFingerPinch
    struct HandFingerPinch;
    // Nested type: GlobalNamespace::OVRPlugin::HandState
    struct HandState;
    // Nested type: GlobalNamespace::OVRPlugin::HandStateInternal
    struct HandStateInternal;
    // Nested type: GlobalNamespace::OVRPlugin::BoneCapsule
    struct BoneCapsule;
    // Nested type: GlobalNamespace::OVRPlugin::Bone
    struct Bone;
    // Nested type: GlobalNamespace::OVRPlugin::SkeletonConstants
    struct SkeletonConstants;
    // Nested type: GlobalNamespace::OVRPlugin::SkeletonType
    struct SkeletonType;
    // Nested type: GlobalNamespace::OVRPlugin::Skeleton
    struct Skeleton;
    // Nested type: GlobalNamespace::OVRPlugin::MeshConstants
    struct MeshConstants;
    // Nested type: GlobalNamespace::OVRPlugin::MeshType
    struct MeshType;
    // Nested type: GlobalNamespace::OVRPlugin::Mesh
    class Mesh;
    // Nested type: GlobalNamespace::OVRPlugin::Media
    class Media;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_0_1_0
    class OVRP_0_1_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_0_1_1
    class OVRP_0_1_1;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_0_1_2
    class OVRP_0_1_2;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_0_1_3
    class OVRP_0_1_3;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_0_5_0
    class OVRP_0_5_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_0_0
    class OVRP_1_0_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_1_0
    class OVRP_1_1_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_2_0
    class OVRP_1_2_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_3_0
    class OVRP_1_3_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_5_0
    class OVRP_1_5_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_6_0
    class OVRP_1_6_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_7_0
    class OVRP_1_7_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_8_0
    class OVRP_1_8_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_9_0
    class OVRP_1_9_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_10_0
    class OVRP_1_10_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_11_0
    class OVRP_1_11_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_12_0
    class OVRP_1_12_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_15_0
    class OVRP_1_15_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_16_0
    class OVRP_1_16_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_17_0
    class OVRP_1_17_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_18_0
    class OVRP_1_18_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_19_0
    class OVRP_1_19_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_21_0
    class OVRP_1_21_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_28_0
    class OVRP_1_28_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_29_0
    class OVRP_1_29_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_30_0
    class OVRP_1_30_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_31_0
    class OVRP_1_31_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_32_0
    class OVRP_1_32_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_34_0
    class OVRP_1_34_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_35_0
    class OVRP_1_35_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_36_0
    class OVRP_1_36_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_37_0
    class OVRP_1_37_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_38_0
    class OVRP_1_38_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_39_0
    class OVRP_1_39_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_40_0
    class OVRP_1_40_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_41_0
    class OVRP_1_41_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_42_0
    class OVRP_1_42_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_43_0
    class OVRP_1_43_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_44_0
    class OVRP_1_44_0;
    // Nested type: GlobalNamespace::OVRPlugin::OVRP_1_45_0
    class OVRP_1_45_0;
    // Autogenerated type: OVRPlugin/Vector3f
    struct Vector3f : public System::ValueType {
      public:
      // public System.Single x
      // Offset: 0x0
      float x;
      // public System.Single y
      // Offset: 0x4
      float y;
      // public System.Single z
      // Offset: 0x8
      float z;
      // Get static field: static public readonly OVRPlugin/Vector3f zero
      static GlobalNamespace::OVRPlugin::Vector3f _get_zero();
      // Set static field: static public readonly OVRPlugin/Vector3f zero
      static void _set_zero(GlobalNamespace::OVRPlugin::Vector3f value);
      // Creating value type constructor for type: Vector3f
      Vector3f(float x_ = {}, float y_ = {}, float z_ = {}) : x{x_}, y{y_}, z{z_} {}
      // static private System.Void .cctor()
      // Offset: 0xEA64DC
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x9A1180
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::Il2CppString* ToString();
    }; // OVRPlugin/Vector3f
    // Autogenerated type: OVRPlugin/Quatf
    struct Quatf : public System::ValueType {
      public:
      // public System.Single x
      // Offset: 0x0
      float x;
      // public System.Single y
      // Offset: 0x4
      float y;
      // public System.Single z
      // Offset: 0x8
      float z;
      // public System.Single w
      // Offset: 0xC
      float w;
      // Get static field: static public readonly OVRPlugin/Quatf identity
      static GlobalNamespace::OVRPlugin::Quatf _get_identity();
      // Set static field: static public readonly OVRPlugin/Quatf identity
      static void _set_identity(GlobalNamespace::OVRPlugin::Quatf value);
      // Creating value type constructor for type: Quatf
      Quatf(float x_ = {}, float y_ = {}, float z_ = {}, float w_ = {}) : x{x_}, y{y_}, z{z_}, w{w_} {}
      // static private System.Void .cctor()
      // Offset: 0xEA6038
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x9A1044
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::Il2CppString* ToString();
    }; // OVRPlugin/Quatf
    // Autogenerated type: OVRPlugin/Posef
    struct Posef : public System::ValueType {
      public:
      // public OVRPlugin/Quatf Orientation
      // Offset: 0x0
      GlobalNamespace::OVRPlugin::Quatf Orientation;
      // public OVRPlugin/Vector3f Position
      // Offset: 0x10
      GlobalNamespace::OVRPlugin::Vector3f Position;
      // Get static field: static public readonly OVRPlugin/Posef identity
      static GlobalNamespace::OVRPlugin::Posef _get_identity();
      // Set static field: static public readonly OVRPlugin/Posef identity
      static void _set_identity(GlobalNamespace::OVRPlugin::Posef value);
      // Creating value type constructor for type: Posef
      Posef(GlobalNamespace::OVRPlugin::Quatf Orientation_ = {}, GlobalNamespace::OVRPlugin::Vector3f Position_ = {}) : Orientation{Orientation_}, Position{Position_} {}
      // static private System.Void .cctor()
      // Offset: 0xEA5D9C
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x9A103C
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::Il2CppString* ToString();
    }; // OVRPlugin/Posef
    // Autogenerated type: OVRPlugin/TrackingConfidence
    struct TrackingConfidence : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public OVRPlugin/TrackingConfidence Low
      static constexpr const int Low = 0;
      // Get static field: static public OVRPlugin/TrackingConfidence Low
      static GlobalNamespace::OVRPlugin::TrackingConfidence _get_Low();
      // Set static field: static public OVRPlugin/TrackingConfidence Low
      static void _set_Low(GlobalNamespace::OVRPlugin::TrackingConfidence value);
      // static field const value: static public OVRPlugin/TrackingConfidence High
      static constexpr const int High = 1065353216;
      // Get static field: static public OVRPlugin/TrackingConfidence High
      static GlobalNamespace::OVRPlugin::TrackingConfidence _get_High();
      // Set static field: static public OVRPlugin/TrackingConfidence High
      static void _set_High(GlobalNamespace::OVRPlugin::TrackingConfidence value);
      // Creating value type constructor for type: TrackingConfidence
      TrackingConfidence(int value_ = {}) : value{value_} {}
    }; // OVRPlugin/TrackingConfidence
    // Autogenerated type: OVRPlugin/HandStatus
    struct HandStatus : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public OVRPlugin/HandStatus HandTracked
      static constexpr const int HandTracked = 1;
      // Get static field: static public OVRPlugin/HandStatus HandTracked
      static GlobalNamespace::OVRPlugin::HandStatus _get_HandTracked();
      // Set static field: static public OVRPlugin/HandStatus HandTracked
      static void _set_HandTracked(GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus InputStateValid
      static constexpr const int InputStateValid = 2;
      // Get static field: static public OVRPlugin/HandStatus InputStateValid
      static GlobalNamespace::OVRPlugin::HandStatus _get_InputStateValid();
      // Set static field: static public OVRPlugin/HandStatus InputStateValid
      static void _set_InputStateValid(GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus SystemGestureInProgress
      static constexpr const int SystemGestureInProgress = 64;
      // Get static field: static public OVRPlugin/HandStatus SystemGestureInProgress
      static GlobalNamespace::OVRPlugin::HandStatus _get_SystemGestureInProgress();
      // Set static field: static public OVRPlugin/HandStatus SystemGestureInProgress
      static void _set_SystemGestureInProgress(GlobalNamespace::OVRPlugin::HandStatus value);
      // Creating value type constructor for type: HandStatus
      HandStatus(int value_ = {}) : value{value_} {}
    }; // OVRPlugin/HandStatus
    // Autogenerated type: OVRPlugin/HandFingerPinch
    struct HandFingerPinch : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // static field const value: static public OVRPlugin/HandFingerPinch Thumb
      static constexpr const int Thumb = 1;
      // Get static field: static public OVRPlugin/HandFingerPinch Thumb
      static GlobalNamespace::OVRPlugin::HandFingerPinch _get_Thumb();
      // Set static field: static public OVRPlugin/HandFingerPinch Thumb
      static void _set_Thumb(GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Index
      static constexpr const int Index = 2;
      // Get static field: static public OVRPlugin/HandFingerPinch Index
      static GlobalNamespace::OVRPlugin::HandFingerPinch _get_Index();
      // Set static field: static public OVRPlugin/HandFingerPinch Index
      static void _set_Index(GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Middle
      static constexpr const int Middle = 4;
      // Get static field: static public OVRPlugin/HandFingerPinch Middle
      static GlobalNamespace::OVRPlugin::HandFingerPinch _get_Middle();
      // Set static field: static public OVRPlugin/HandFingerPinch Middle
      static void _set_Middle(GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Ring
      static constexpr const int Ring = 8;
      // Get static field: static public OVRPlugin/HandFingerPinch Ring
      static GlobalNamespace::OVRPlugin::HandFingerPinch _get_Ring();
      // Set static field: static public OVRPlugin/HandFingerPinch Ring
      static void _set_Ring(GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Pinky
      static constexpr const int Pinky = 16;
      // Get static field: static public OVRPlugin/HandFingerPinch Pinky
      static GlobalNamespace::OVRPlugin::HandFingerPinch _get_Pinky();
      // Set static field: static public OVRPlugin/HandFingerPinch Pinky
      static void _set_Pinky(GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // Creating value type constructor for type: HandFingerPinch
      HandFingerPinch(int value_ = {}) : value{value_} {}
    }; // OVRPlugin/HandFingerPinch
    // Autogenerated type: OVRPlugin/HandStateInternal
    struct HandStateInternal : public System::ValueType {
      public:
      // public OVRPlugin/HandStatus Status
      // Offset: 0x0
      GlobalNamespace::OVRPlugin::HandStatus Status;
      // public OVRPlugin/Posef RootPose
      // Offset: 0x4
      GlobalNamespace::OVRPlugin::Posef RootPose;
      // public OVRPlugin/Quatf BoneRotations_0
      // Offset: 0x20
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_0;
      // public OVRPlugin/Quatf BoneRotations_1
      // Offset: 0x30
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_1;
      // public OVRPlugin/Quatf BoneRotations_2
      // Offset: 0x40
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_2;
      // public OVRPlugin/Quatf BoneRotations_3
      // Offset: 0x50
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_3;
      // public OVRPlugin/Quatf BoneRotations_4
      // Offset: 0x60
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_4;
      // public OVRPlugin/Quatf BoneRotations_5
      // Offset: 0x70
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_5;
      // public OVRPlugin/Quatf BoneRotations_6
      // Offset: 0x80
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_6;
      // public OVRPlugin/Quatf BoneRotations_7
      // Offset: 0x90
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_7;
      // public OVRPlugin/Quatf BoneRotations_8
      // Offset: 0xA0
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_8;
      // public OVRPlugin/Quatf BoneRotations_9
      // Offset: 0xB0
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_9;
      // public OVRPlugin/Quatf BoneRotations_10
      // Offset: 0xC0
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_10;
      // public OVRPlugin/Quatf BoneRotations_11
      // Offset: 0xD0
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_11;
      // public OVRPlugin/Quatf BoneRotations_12
      // Offset: 0xE0
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_12;
      // public OVRPlugin/Quatf BoneRotations_13
      // Offset: 0xF0
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_13;
      // public OVRPlugin/Quatf BoneRotations_14
      // Offset: 0x100
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_14;
      // public OVRPlugin/Quatf BoneRotations_15
      // Offset: 0x110
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_15;
      // public OVRPlugin/Quatf BoneRotations_16
      // Offset: 0x120
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_16;
      // public OVRPlugin/Quatf BoneRotations_17
      // Offset: 0x130
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_17;
      // public OVRPlugin/Quatf BoneRotations_18
      // Offset: 0x140
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_18;
      // public OVRPlugin/Quatf BoneRotations_19
      // Offset: 0x150
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_19;
      // public OVRPlugin/Quatf BoneRotations_20
      // Offset: 0x160
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_20;
      // public OVRPlugin/Quatf BoneRotations_21
      // Offset: 0x170
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_21;
      // public OVRPlugin/Quatf BoneRotations_22
      // Offset: 0x180
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_22;
      // public OVRPlugin/Quatf BoneRotations_23
      // Offset: 0x190
      GlobalNamespace::OVRPlugin::Quatf BoneRotations_23;
      // public OVRPlugin/HandFingerPinch Pinches
      // Offset: 0x1A0
      GlobalNamespace::OVRPlugin::HandFingerPinch Pinches;
      // public System.Single PinchStrength_0
      // Offset: 0x1A4
      float PinchStrength_0;
      // public System.Single PinchStrength_1
      // Offset: 0x1A8
      float PinchStrength_1;
      // public System.Single PinchStrength_2
      // Offset: 0x1AC
      float PinchStrength_2;
      // public System.Single PinchStrength_3
      // Offset: 0x1B0
      float PinchStrength_3;
      // public System.Single PinchStrength_4
      // Offset: 0x1B4
      float PinchStrength_4;
      // public OVRPlugin/Posef PointerPose
      // Offset: 0x1B8
      GlobalNamespace::OVRPlugin::Posef PointerPose;
      // public System.Single HandScale
      // Offset: 0x1D4
      float HandScale;
      // public OVRPlugin/TrackingConfidence HandConfidence
      // Offset: 0x1D8
      GlobalNamespace::OVRPlugin::TrackingConfidence HandConfidence;
      // public OVRPlugin/TrackingConfidence FingerConfidences_0
      // Offset: 0x1DC
      GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_0;
      // public OVRPlugin/TrackingConfidence FingerConfidences_1
      // Offset: 0x1E0
      GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_1;
      // public OVRPlugin/TrackingConfidence FingerConfidences_2
      // Offset: 0x1E4
      GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_2;
      // public OVRPlugin/TrackingConfidence FingerConfidences_3
      // Offset: 0x1E8
      GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_3;
      // public OVRPlugin/TrackingConfidence FingerConfidences_4
      // Offset: 0x1EC
      GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_4;
      // public System.Double RequestedTimeStamp
      // Offset: 0x1F0
      double RequestedTimeStamp;
      // public System.Double SampleTimeStamp
      // Offset: 0x1F8
      double SampleTimeStamp;
      // Creating value type constructor for type: HandStateInternal
      HandStateInternal(GlobalNamespace::OVRPlugin::HandStatus Status_ = {}, GlobalNamespace::OVRPlugin::Posef RootPose_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_0_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_1_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_2_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_3_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_4_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_5_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_6_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_7_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_8_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_9_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_10_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_11_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_12_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_13_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_14_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_15_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_16_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_17_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_18_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_19_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_20_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_21_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_22_ = {}, GlobalNamespace::OVRPlugin::Quatf BoneRotations_23_ = {}, GlobalNamespace::OVRPlugin::HandFingerPinch Pinches_ = {}, float PinchStrength_0_ = {}, float PinchStrength_1_ = {}, float PinchStrength_2_ = {}, float PinchStrength_3_ = {}, float PinchStrength_4_ = {}, GlobalNamespace::OVRPlugin::Posef PointerPose_ = {}, float HandScale_ = {}, GlobalNamespace::OVRPlugin::TrackingConfidence HandConfidence_ = {}, GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_0_ = {}, GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_1_ = {}, GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_2_ = {}, GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_3_ = {}, GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_4_ = {}, double RequestedTimeStamp_ = {}, double SampleTimeStamp_ = {}) : Status{Status_}, RootPose{RootPose_}, BoneRotations_0{BoneRotations_0_}, BoneRotations_1{BoneRotations_1_}, BoneRotations_2{BoneRotations_2_}, BoneRotations_3{BoneRotations_3_}, BoneRotations_4{BoneRotations_4_}, BoneRotations_5{BoneRotations_5_}, BoneRotations_6{BoneRotations_6_}, BoneRotations_7{BoneRotations_7_}, BoneRotations_8{BoneRotations_8_}, BoneRotations_9{BoneRotations_9_}, BoneRotations_10{BoneRotations_10_}, BoneRotations_11{BoneRotations_11_}, BoneRotations_12{BoneRotations_12_}, BoneRotations_13{BoneRotations_13_}, BoneRotations_14{BoneRotations_14_}, BoneRotations_15{BoneRotations_15_}, BoneRotations_16{BoneRotations_16_}, BoneRotations_17{BoneRotations_17_}, BoneRotations_18{BoneRotations_18_}, BoneRotations_19{BoneRotations_19_}, BoneRotations_20{BoneRotations_20_}, BoneRotations_21{BoneRotations_21_}, BoneRotations_22{BoneRotations_22_}, BoneRotations_23{BoneRotations_23_}, Pinches{Pinches_}, PinchStrength_0{PinchStrength_0_}, PinchStrength_1{PinchStrength_1_}, PinchStrength_2{PinchStrength_2_}, PinchStrength_3{PinchStrength_3_}, PinchStrength_4{PinchStrength_4_}, PointerPose{PointerPose_}, HandScale{HandScale_}, HandConfidence{HandConfidence_}, FingerConfidences_0{FingerConfidences_0_}, FingerConfidences_1{FingerConfidences_1_}, FingerConfidences_2{FingerConfidences_2_}, FingerConfidences_3{FingerConfidences_3_}, FingerConfidences_4{FingerConfidences_4_}, RequestedTimeStamp{RequestedTimeStamp_}, SampleTimeStamp{SampleTimeStamp_} {}
    }; // OVRPlugin/HandStateInternal
    // static field const value: static public System.Boolean isSupportedPlatform
    static constexpr const bool isSupportedPlatform = true;
    // Get static field: static public System.Boolean isSupportedPlatform
    static bool _get_isSupportedPlatform();
    // Set static field: static public System.Boolean isSupportedPlatform
    static void _set_isSupportedPlatform(bool value);
    // Get static field: static public readonly System.Version wrapperVersion
    static System::Version* _get_wrapperVersion();
    // Set static field: static public readonly System.Version wrapperVersion
    static void _set_wrapperVersion(System::Version* value);
    // Get static field: static private System.Version _version
    static System::Version* _get__version();
    // Set static field: static private System.Version _version
    static void _set__version(System::Version* value);
    // Get static field: static private System.Version _nativeSDKVersion
    static System::Version* _get__nativeSDKVersion();
    // Set static field: static private System.Version _nativeSDKVersion
    static void _set__nativeSDKVersion(System::Version* value);
    // static field const value: static private System.Int32 OverlayShapeFlagShift
    static constexpr const int OverlayShapeFlagShift = 4;
    // Get static field: static private System.Int32 OverlayShapeFlagShift
    static int _get_OverlayShapeFlagShift();
    // Set static field: static private System.Int32 OverlayShapeFlagShift
    static void _set_OverlayShapeFlagShift(int value);
    // static field const value: static public System.Int32 AppPerfFrameStatsMaxCount
    static constexpr const int AppPerfFrameStatsMaxCount = 5;
    // Get static field: static public System.Int32 AppPerfFrameStatsMaxCount
    static int _get_AppPerfFrameStatsMaxCount();
    // Set static field: static public System.Int32 AppPerfFrameStatsMaxCount
    static void _set_AppPerfFrameStatsMaxCount(int value);
    // Get static field: static private OVRPlugin/GUID _nativeAudioOutGuid
    static GlobalNamespace::OVRPlugin::GUID* _get__nativeAudioOutGuid();
    // Set static field: static private OVRPlugin/GUID _nativeAudioOutGuid
    static void _set__nativeAudioOutGuid(GlobalNamespace::OVRPlugin::GUID* value);
    // Get static field: static private System.Guid _cachedAudioOutGuid
    static System::Guid _get__cachedAudioOutGuid();
    // Set static field: static private System.Guid _cachedAudioOutGuid
    static void _set__cachedAudioOutGuid(System::Guid value);
    // Get static field: static private System.String _cachedAudioOutString
    static ::Il2CppString* _get__cachedAudioOutString();
    // Set static field: static private System.String _cachedAudioOutString
    static void _set__cachedAudioOutString(::Il2CppString* value);
    // Get static field: static private OVRPlugin/GUID _nativeAudioInGuid
    static GlobalNamespace::OVRPlugin::GUID* _get__nativeAudioInGuid();
    // Set static field: static private OVRPlugin/GUID _nativeAudioInGuid
    static void _set__nativeAudioInGuid(GlobalNamespace::OVRPlugin::GUID* value);
    // Get static field: static private System.Guid _cachedAudioInGuid
    static System::Guid _get__cachedAudioInGuid();
    // Set static field: static private System.Guid _cachedAudioInGuid
    static void _set__cachedAudioInGuid(System::Guid value);
    // Get static field: static private System.String _cachedAudioInString
    static ::Il2CppString* _get__cachedAudioInString();
    // Set static field: static private System.String _cachedAudioInString
    static void _set__cachedAudioInString(::Il2CppString* value);
    // Get static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
    static GlobalNamespace::OVRNativeBuffer* _get__nativeSystemDisplayFrequenciesAvailable();
    // Set static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
    static void _set__nativeSystemDisplayFrequenciesAvailable(GlobalNamespace::OVRNativeBuffer* value);
    // Get static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
    static ::Array<float>* _get__cachedSystemDisplayFrequenciesAvailable();
    // Set static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
    static void _set__cachedSystemDisplayFrequenciesAvailable(::Array<float>* value);
    // Get static field: static private OVRPlugin/HandStateInternal cachedHandState
    static GlobalNamespace::OVRPlugin::HandStateInternal _get_cachedHandState();
    // Set static field: static private OVRPlugin/HandStateInternal cachedHandState
    static void _set_cachedHandState(GlobalNamespace::OVRPlugin::HandStateInternal value);
    // static field const value: static private System.String pluginName
    static constexpr const char* pluginName = "OVRPlugin";
    // Get static field: static private System.String pluginName
    static ::Il2CppString* _get_pluginName();
    // Set static field: static private System.String pluginName
    static void _set_pluginName(::Il2CppString* value);
    // Get static field: static private System.Version _versionZero
    static System::Version* _get__versionZero();
    // Set static field: static private System.Version _versionZero
    static void _set__versionZero(System::Version* value);
    // static public System.Version get_version()
    // Offset: 0xE5540C
    static System::Version* get_version();
    // static public System.Version get_nativeSDKVersion()
    // Offset: 0xE55A08
    static System::Version* get_nativeSDKVersion();
    // static public System.Boolean get_initialized()
    // Offset: 0xE47668
    static bool get_initialized();
    // static public System.Boolean get_chromatic()
    // Offset: 0xE55D70
    static bool get_chromatic();
    // static public System.Void set_chromatic(System.Boolean value)
    // Offset: 0xE55E90
    static void set_chromatic(bool value);
    // static public System.Boolean get_monoscopic()
    // Offset: 0xE55FE4
    static bool get_monoscopic();
    // static public System.Void set_monoscopic(System.Boolean value)
    // Offset: 0xE56080
    static void set_monoscopic(bool value);
    // static public System.Boolean get_rotation()
    // Offset: 0xE56138
    static bool get_rotation();
    // static public System.Void set_rotation(System.Boolean value)
    // Offset: 0xE561D4
    static void set_rotation(bool value);
    // static public System.Boolean get_position()
    // Offset: 0xE5628C
    static bool get_position();
    // static public System.Void set_position(System.Boolean value)
    // Offset: 0xE56328
    static void set_position(bool value);
    // static public System.Boolean get_useIPDInPositionTracking()
    // Offset: 0xE563E0
    static bool get_useIPDInPositionTracking();
    // static public System.Void set_useIPDInPositionTracking(System.Boolean value)
    // Offset: 0xE56500
    static void set_useIPDInPositionTracking(bool value);
    // static public System.Boolean get_positionSupported()
    // Offset: 0xE5664C
    static bool get_positionSupported();
    // static public System.Boolean get_positionTracked()
    // Offset: 0xE566E8
    static bool get_positionTracked();
    // static public System.Boolean get_powerSaving()
    // Offset: 0xE49D00
    static bool get_powerSaving();
    // static public System.Boolean get_hmdPresent()
    // Offset: 0xE4C9D4
    static bool get_hmdPresent();
    // static public System.Boolean get_userPresent()
    // Offset: 0xE56788
    static bool get_userPresent();
    // static public System.Boolean get_headphonesPresent()
    // Offset: 0xE56824
    static bool get_headphonesPresent();
    // static public System.Int32 get_recommendedMSAALevel()
    // Offset: 0xE568C0
    static int get_recommendedMSAALevel();
    // static public OVRPlugin/SystemRegion get_systemRegion()
    // Offset: 0xE569E0
    static GlobalNamespace::OVRPlugin::SystemRegion get_systemRegion();
    // static public System.String get_audioOutId()
    // Offset: 0xE56B00
    static ::Il2CppString* get_audioOutId();
    // static public System.String get_audioInId()
    // Offset: 0xE56E44
    static ::Il2CppString* get_audioInId();
    // static public System.Boolean get_hasVrFocus()
    // Offset: 0xE57180
    static bool get_hasVrFocus();
    // static public System.Boolean get_hasInputFocus()
    // Offset: 0xE571EC
    static bool get_hasInputFocus();
    // static public System.Boolean get_shouldQuit()
    // Offset: 0xE57308
    static bool get_shouldQuit();
    // static public System.Boolean get_shouldRecenter()
    // Offset: 0xE57374
    static bool get_shouldRecenter();
    // static public System.String get_productName()
    // Offset: 0xE573E0
    static ::Il2CppString* get_productName();
    // static public System.String get_latency()
    // Offset: 0xE57440
    static ::Il2CppString* get_latency();
    // static public System.Single get_eyeDepth()
    // Offset: 0xE574E8
    static float get_eyeDepth();
    // static public System.Void set_eyeDepth(System.Single value)
    // Offset: 0xE57580
    static void set_eyeDepth(float value);
    // static public System.Single get_eyeHeight()
    // Offset: 0xE575F0
    static float get_eyeHeight();
    // static public System.Void set_eyeHeight(System.Single value)
    // Offset: 0xE57650
    static void set_eyeHeight(float value);
    // static public System.Single get_batteryLevel()
    // Offset: 0xE576C0
    static float get_batteryLevel();
    // static public System.Single get_batteryTemperature()
    // Offset: 0xE57720
    static float get_batteryTemperature();
    // static public System.Int32 get_cpuLevel()
    // Offset: 0xE57780
    static int get_cpuLevel();
    // static public System.Void set_cpuLevel(System.Int32 value)
    // Offset: 0xE49B90
    static void set_cpuLevel(int value);
    // static public System.Int32 get_gpuLevel()
    // Offset: 0xE577E0
    static int get_gpuLevel();
    // static public System.Void set_gpuLevel(System.Int32 value)
    // Offset: 0xE49BF8
    static void set_gpuLevel(int value);
    // static public System.Int32 get_vsyncCount()
    // Offset: 0xE57840
    static int get_vsyncCount();
    // static public System.Void set_vsyncCount(System.Int32 value)
    // Offset: 0xE578A0
    static void set_vsyncCount(int value);
    // static public System.Single get_systemVolume()
    // Offset: 0xE57908
    static float get_systemVolume();
    // static public System.Single get_ipd()
    // Offset: 0xE57968
    static float get_ipd();
    // static public System.Void set_ipd(System.Single value)
    // Offset: 0xE579C8
    static void set_ipd(float value);
    // static public System.Boolean get_occlusionMesh()
    // Offset: 0xE57A38
    static bool get_occlusionMesh();
    // static public System.Void set_occlusionMesh(System.Boolean value)
    // Offset: 0xE57AD4
    static void set_occlusionMesh(bool value);
    // static public OVRPlugin/BatteryStatus get_batteryStatus()
    // Offset: 0xE57B8C
    static GlobalNamespace::OVRPlugin::BatteryStatus get_batteryStatus();
    // static public OVRPlugin/Frustumf GetEyeFrustum(OVRPlugin/Eye eyeId)
    // Offset: 0xE57BEC
    static GlobalNamespace::OVRPlugin::Frustumf GetEyeFrustum(GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public OVRPlugin/Sizei GetEyeTextureSize(OVRPlugin/Eye eyeId)
    // Offset: 0xE57C54
    static GlobalNamespace::OVRPlugin::Sizei GetEyeTextureSize(GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public OVRPlugin/Posef GetTrackerPose(OVRPlugin/Tracker trackerId)
    // Offset: 0xE57CBC
    static GlobalNamespace::OVRPlugin::Posef GetTrackerPose(GlobalNamespace::OVRPlugin::Tracker trackerId);
    // static public OVRPlugin/Frustumf GetTrackerFrustum(OVRPlugin/Tracker trackerId)
    // Offset: 0xE57D34
    static GlobalNamespace::OVRPlugin::Frustumf GetTrackerFrustum(GlobalNamespace::OVRPlugin::Tracker trackerId);
    // static public System.Boolean ShowUI(OVRPlugin/PlatformUI ui)
    // Offset: 0xE57D9C
    static bool ShowUI(GlobalNamespace::OVRPlugin::PlatformUI ui);
    // static public System.Boolean EnqueueSubmitLayer(System.Boolean onTop, System.Boolean headLocked, System.Boolean noDepthBufferTesting, System.IntPtr leftTexture, System.IntPtr rightTexture, System.Int32 layerId, System.Int32 frameIndex, OVRPlugin/Posef pose, OVRPlugin/Vector3f scale, System.Int32 layerIndex, OVRPlugin/OverlayShape shape, System.Boolean overrideTextureRectMatrix, OVRPlugin/TextureRectMatrixf textureRectMatrix, System.Boolean overridePerLayerColorScaleAndOffset, UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean expensiveSuperSample, System.Boolean hidden)
    // Offset: 0xE4F6B8
    static bool EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, System::IntPtr leftTexture, System::IntPtr rightTexture, int layerId, int frameIndex, GlobalNamespace::OVRPlugin::Posef pose, GlobalNamespace::OVRPlugin::Vector3f scale, int layerIndex, GlobalNamespace::OVRPlugin::OverlayShape shape, bool overrideTextureRectMatrix, GlobalNamespace::OVRPlugin::TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset, UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool expensiveSuperSample, bool hidden);
    // static public OVRPlugin/LayerDesc CalculateLayerDesc(OVRPlugin/OverlayShape shape, OVRPlugin/LayerLayout layout, OVRPlugin/Sizei textureSize, System.Int32 mipLevels, System.Int32 sampleCount, OVRPlugin/EyeTextureFormat format, System.Int32 layerFlags)
    // Offset: 0xE4E420
    static GlobalNamespace::OVRPlugin::LayerDesc CalculateLayerDesc(GlobalNamespace::OVRPlugin::OverlayShape shape, GlobalNamespace::OVRPlugin::LayerLayout layout, GlobalNamespace::OVRPlugin::Sizei textureSize, int mipLevels, int sampleCount, GlobalNamespace::OVRPlugin::EyeTextureFormat format, int layerFlags);
    // static public System.Boolean EnqueueSetupLayer(OVRPlugin/LayerDesc desc, System.Int32 compositionDepth, System.IntPtr layerID)
    // Offset: 0xE4E5BC
    static bool EnqueueSetupLayer(GlobalNamespace::OVRPlugin::LayerDesc desc, int compositionDepth, System::IntPtr layerID);
    // static public System.Boolean EnqueueDestroyLayer(System.IntPtr layerID)
    // Offset: 0xE4FD54
    static bool EnqueueDestroyLayer(System::IntPtr layerID);
    // static public System.IntPtr GetLayerTexture(System.Int32 layerId, System.Int32 stage, OVRPlugin/Eye eyeId)
    // Offset: 0xE4F188
    static System::IntPtr GetLayerTexture(int layerId, int stage, GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public System.Int32 GetLayerTextureStageCount(System.Int32 layerId)
    // Offset: 0xE4E7E4
    static int GetLayerTextureStageCount(int layerId);
    // static public System.IntPtr GetLayerAndroidSurfaceObject(System.Int32 layerId)
    // Offset: 0xE4EE40
    static System::IntPtr GetLayerAndroidSurfaceObject(int layerId);
    // static public System.Boolean UpdateNodePhysicsPoses(System.Int32 frameIndex, System.Double predictionSeconds)
    // Offset: 0xE57E10
    static bool UpdateNodePhysicsPoses(int frameIndex, double predictionSeconds);
    // static public OVRPlugin/Posef GetNodePose(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0xE4D644
    static GlobalNamespace::OVRPlugin::Posef GetNodePose(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeVelocity(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0xE4D30C
    static GlobalNamespace::OVRPlugin::Vector3f GetNodeVelocity(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAngularVelocity(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0xE4D51C
    static GlobalNamespace::OVRPlugin::Vector3f GetNodeAngularVelocity(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAcceleration(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0xE4CE60
    static GlobalNamespace::OVRPlugin::Vector3f GetNodeAcceleration(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAngularAcceleration(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0xE4D1E4
    static GlobalNamespace::OVRPlugin::Vector3f GetNodeAngularAcceleration(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId);
    // static public System.Boolean GetNodePresent(OVRPlugin/Node nodeId)
    // Offset: 0xE57F2C
    static bool GetNodePresent(GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodeOrientationTracked(OVRPlugin/Node nodeId)
    // Offset: 0xE57FA0
    static bool GetNodeOrientationTracked(GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodeOrientationValid(OVRPlugin/Node nodeId)
    // Offset: 0xE58014
    static bool GetNodeOrientationValid(GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodePositionTracked(OVRPlugin/Node nodeId)
    // Offset: 0xE58160
    static bool GetNodePositionTracked(GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodePositionValid(OVRPlugin/Node nodeId)
    // Offset: 0xE581D4
    static bool GetNodePositionValid(GlobalNamespace::OVRPlugin::Node nodeId);
    // static public OVRPlugin/PoseStatef GetNodePoseStateRaw(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0xE58320
    static GlobalNamespace::OVRPlugin::PoseStatef GetNodePoseStateRaw(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Posef GetCurrentTrackingTransformPose()
    // Offset: 0xE58540
    static GlobalNamespace::OVRPlugin::Posef GetCurrentTrackingTransformPose();
    // static public OVRPlugin/Posef GetTrackingTransformRawPose()
    // Offset: 0xE58694
    static GlobalNamespace::OVRPlugin::Posef GetTrackingTransformRawPose();
    // static public OVRPlugin/Posef GetTrackingTransformRelativePose(OVRPlugin/TrackingOrigin trackingOrigin)
    // Offset: 0xE587E8
    static GlobalNamespace::OVRPlugin::Posef GetTrackingTransformRelativePose(GlobalNamespace::OVRPlugin::TrackingOrigin trackingOrigin);
    // static public OVRPlugin/ControllerState GetControllerState(System.UInt32 controllerMask)
    // Offset: 0xE589A8
    static GlobalNamespace::OVRPlugin::ControllerState GetControllerState(uint controllerMask);
    // static public OVRPlugin/ControllerState2 GetControllerState2(System.UInt32 controllerMask)
    // Offset: 0xE58A20
    static GlobalNamespace::OVRPlugin::ControllerState2 GetControllerState2(uint controllerMask);
    // static public OVRPlugin/ControllerState4 GetControllerState4(System.UInt32 controllerMask)
    // Offset: 0xE58BE0
    static GlobalNamespace::OVRPlugin::ControllerState4 GetControllerState4(uint controllerMask);
    // static public System.Boolean SetControllerVibration(System.UInt32 controllerMask, System.Single frequency, System.Single amplitude)
    // Offset: 0xE58DCC
    static bool SetControllerVibration(uint controllerMask, float frequency, float amplitude);
    // static public OVRPlugin/HapticsDesc GetControllerHapticsDesc(System.UInt32 controllerMask)
    // Offset: 0xE58E58
    static GlobalNamespace::OVRPlugin::HapticsDesc GetControllerHapticsDesc(uint controllerMask);
    // static public OVRPlugin/HapticsState GetControllerHapticsState(System.UInt32 controllerMask)
    // Offset: 0xE58F78
    static GlobalNamespace::OVRPlugin::HapticsState GetControllerHapticsState(uint controllerMask);
    // static public System.Boolean SetControllerHaptics(System.UInt32 controllerMask, OVRPlugin/HapticsBuffer hapticsBuffer)
    // Offset: 0xE59080
    static bool SetControllerHaptics(uint controllerMask, GlobalNamespace::OVRPlugin::HapticsBuffer hapticsBuffer);
    // static public System.Single GetEyeRecommendedResolutionScale()
    // Offset: 0xE591A0
    static float GetEyeRecommendedResolutionScale();
    // static public System.Single GetAppCpuStartToGpuEndTime()
    // Offset: 0xE592A0
    static float GetAppCpuStartToGpuEndTime();
    // static public System.Boolean GetBoundaryConfigured()
    // Offset: 0xE593A0
    static bool GetBoundaryConfigured();
    // static public OVRPlugin/BoundaryTestResult TestBoundaryNode(OVRPlugin/Node nodeId, OVRPlugin/BoundaryType boundaryType)
    // Offset: 0xE594A0
    static GlobalNamespace::OVRPlugin::BoundaryTestResult TestBoundaryNode(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public OVRPlugin/BoundaryTestResult TestBoundaryPoint(OVRPlugin/Vector3f point, OVRPlugin/BoundaryType boundaryType)
    // Offset: 0xE595C8
    static GlobalNamespace::OVRPlugin::BoundaryTestResult TestBoundaryPoint(GlobalNamespace::OVRPlugin::Vector3f point, GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public OVRPlugin/BoundaryGeometry GetBoundaryGeometry(OVRPlugin/BoundaryType boundaryType)
    // Offset: 0xE59718
    static GlobalNamespace::OVRPlugin::BoundaryGeometry GetBoundaryGeometry(GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public System.Boolean GetBoundaryGeometry2(OVRPlugin/BoundaryType boundaryType, System.IntPtr points, System.Int32 pointsCount)
    // Offset: 0xE59838
    static bool GetBoundaryGeometry2(GlobalNamespace::OVRPlugin::BoundaryType boundaryType, System::IntPtr points, int& pointsCount);
    // static public OVRPlugin/AppPerfStats GetAppPerfStats()
    // Offset: 0xE5995C
    static GlobalNamespace::OVRPlugin::AppPerfStats GetAppPerfStats();
    // static public System.Boolean ResetAppPerfStats()
    // Offset: 0xE59A68
    static bool ResetAppPerfStats();
    // static public System.Single GetAppFramerate()
    // Offset: 0xE59B68
    static float GetAppFramerate();
    // static public System.Boolean SetHandNodePoseStateLatency(System.Double latencyInSeconds)
    // Offset: 0xE59C68
    static bool SetHandNodePoseStateLatency(double latencyInSeconds);
    // static public System.Double GetHandNodePoseStateLatency()
    // Offset: 0xE59D78
    static double GetHandNodePoseStateLatency();
    // static public OVRPlugin/EyeTextureFormat GetDesiredEyeTextureFormat()
    // Offset: 0xE59E88
    static GlobalNamespace::OVRPlugin::EyeTextureFormat GetDesiredEyeTextureFormat();
    // static public System.Boolean SetDesiredEyeTextureFormat(OVRPlugin/EyeTextureFormat value)
    // Offset: 0xE59F88
    static bool SetDesiredEyeTextureFormat(GlobalNamespace::OVRPlugin::EyeTextureFormat value);
    // static public System.Boolean InitializeMixedReality()
    // Offset: 0xE477D4
    static bool InitializeMixedReality();
    // static public System.Boolean ShutdownMixedReality()
    // Offset: 0xE47BE8
    static bool ShutdownMixedReality();
    // static public System.Boolean IsMixedRealityInitialized()
    // Offset: 0xE476D4
    static bool IsMixedRealityInitialized();
    // static public System.Int32 GetExternalCameraCount()
    // Offset: 0xE486F4
    static int GetExternalCameraCount();
    // static public System.Boolean UpdateExternalCamera()
    // Offset: 0xE478D4
    static bool UpdateExternalCamera();
    // static public System.Boolean GetMixedRealityCameraInfo(System.Int32 cameraId, OVRPlugin/CameraExtrinsics cameraExtrinsics, OVRPlugin/CameraIntrinsics cameraIntrinsics, OVRPlugin/Posef calibrationRawPose)
    // Offset: 0xE48B7C
    static bool GetMixedRealityCameraInfo(int cameraId, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics, GlobalNamespace::OVRPlugin::Posef& calibrationRawPose);
    // static public System.Boolean OverrideExternalCameraFov(System.Int32 cameraId, System.Boolean useOverriddenFov, OVRPlugin/Fovf fov)
    // Offset: 0xE4958C
    static bool OverrideExternalCameraFov(int cameraId, bool useOverriddenFov, GlobalNamespace::OVRPlugin::Fovf fov);
    // static public System.Boolean GetUseOverriddenExternalCameraFov(System.Int32 cameraId)
    // Offset: 0xE497E0
    static bool GetUseOverriddenExternalCameraFov(int cameraId);
    // static public System.Boolean OverrideExternalCameraStaticPose(System.Int32 cameraId, System.Boolean useOverriddenPose, OVRPlugin/Posef pose)
    // Offset: 0xE496BC
    static bool OverrideExternalCameraStaticPose(int cameraId, bool useOverriddenPose, GlobalNamespace::OVRPlugin::Posef pose);
    // static public System.Boolean GetUseOverriddenExternalCameraStaticPose(System.Int32 cameraId)
    // Offset: 0xE4990C
    static bool GetUseOverriddenExternalCameraStaticPose(int cameraId);
    // static public System.Boolean ResetDefaultExternalCamera()
    // Offset: 0xE485F4
    static bool ResetDefaultExternalCamera();
    // static public System.Boolean SetDefaultExternalCamera(System.String cameraName, OVRPlugin/CameraIntrinsics cameraIntrinsics, OVRPlugin/CameraExtrinsics cameraExtrinsics)
    // Offset: 0xE48D68
    static bool SetDefaultExternalCamera(::Il2CppString* cameraName, GlobalNamespace::OVRPlugin::CameraIntrinsics& cameraIntrinsics, GlobalNamespace::OVRPlugin::CameraExtrinsics& cameraExtrinsics);
    // static public OVRPlugin/Vector3f GetBoundaryDimensions(OVRPlugin/BoundaryType boundaryType)
    // Offset: 0xE5A090
    static GlobalNamespace::OVRPlugin::Vector3f GetBoundaryDimensions(GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public System.Boolean GetBoundaryVisible()
    // Offset: 0xE5A194
    static bool GetBoundaryVisible();
    // static public System.Boolean SetBoundaryVisible(System.Boolean value)
    // Offset: 0xE5A294
    static bool SetBoundaryVisible(bool value);
    // static public OVRPlugin/SystemHeadset GetSystemHeadsetType()
    // Offset: 0xE5A3C0
    static GlobalNamespace::OVRPlugin::SystemHeadset GetSystemHeadsetType();
    // static public OVRPlugin/Controller GetActiveController()
    // Offset: 0xE5A4C0
    static GlobalNamespace::OVRPlugin::Controller GetActiveController();
    // static public OVRPlugin/Controller GetConnectedControllers()
    // Offset: 0xE5A5C0
    static GlobalNamespace::OVRPlugin::Controller GetConnectedControllers();
    // static private OVRPlugin/Bool ToBool(System.Boolean b)
    // Offset: 0xE55FDC
    static GlobalNamespace::OVRPlugin::Bool ToBool(bool b);
    // static public OVRPlugin/TrackingOrigin GetTrackingOriginType()
    // Offset: 0xE5A6C0
    static GlobalNamespace::OVRPlugin::TrackingOrigin GetTrackingOriginType();
    // static public System.Boolean SetTrackingOriginType(OVRPlugin/TrackingOrigin originType)
    // Offset: 0xE5A720
    static bool SetTrackingOriginType(GlobalNamespace::OVRPlugin::TrackingOrigin originType);
    // static public OVRPlugin/Posef GetTrackingCalibratedOrigin()
    // Offset: 0xE5A794
    static GlobalNamespace::OVRPlugin::Posef GetTrackingCalibratedOrigin();
    // static public System.Boolean SetTrackingCalibratedOrigin()
    // Offset: 0xE5A7FC
    static bool SetTrackingCalibratedOrigin();
    // static public System.Boolean RecenterTrackingOrigin(OVRPlugin/RecenterFlags flags)
    // Offset: 0xE5A868
    static bool RecenterTrackingOrigin(GlobalNamespace::OVRPlugin::RecenterFlags flags);
    // static public System.Boolean get_fixedFoveatedRenderingSupported()
    // Offset: 0xE5A8DC
    static bool get_fixedFoveatedRenderingSupported();
    // static public OVRPlugin/FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel()
    // Offset: 0xE5A9EC
    static GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel();
    // static public System.Void set_fixedFoveatedRenderingLevel(OVRPlugin/FixedFoveatedRenderingLevel value)
    // Offset: 0xE5AB18
    static void set_fixedFoveatedRenderingLevel(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel value);
    // static public System.Boolean get_tiledMultiResSupported()
    // Offset: 0xE5AC48
    static bool get_tiledMultiResSupported();
    // static public OVRPlugin/TiledMultiResLevel get_tiledMultiResLevel()
    // Offset: 0xE5ACA4
    static GlobalNamespace::OVRPlugin::TiledMultiResLevel get_tiledMultiResLevel();
    // static public System.Void set_tiledMultiResLevel(OVRPlugin/TiledMultiResLevel value)
    // Offset: 0xE5AD00
    static void set_tiledMultiResLevel(GlobalNamespace::OVRPlugin::TiledMultiResLevel value);
    // static public System.Boolean get_gpuUtilSupported()
    // Offset: 0xE5AD64
    static bool get_gpuUtilSupported();
    // static public System.Single get_gpuUtilLevel()
    // Offset: 0xE5AE74
    static float get_gpuUtilLevel();
    // static public System.Single[] get_systemDisplayFrequenciesAvailable()
    // Offset: 0xE5AFAC
    static ::Array<float>* get_systemDisplayFrequenciesAvailable();
    // static public System.Single get_systemDisplayFrequency()
    // Offset: 0xE5B2EC
    static float get_systemDisplayFrequency();
    // static public System.Void set_systemDisplayFrequency(System.Single value)
    // Offset: 0xE5B4A0
    static void set_systemDisplayFrequency(float value);
    // static public System.Boolean GetNodeFrustum2(OVRPlugin/Node nodeId, OVRPlugin/Frustumf2 frustum)
    // Offset: 0xE5B5B0
    static bool GetNodeFrustum2(GlobalNamespace::OVRPlugin::Node nodeId, GlobalNamespace::OVRPlugin::Frustumf2& frustum);
    // static public System.Boolean get_AsymmetricFovEnabled()
    // Offset: 0xE5B6D0
    static bool get_AsymmetricFovEnabled();
    // static public System.Boolean get_EyeTextureArrayEnabled()
    // Offset: 0xE5B7E4
    static bool get_EyeTextureArrayEnabled();
    // static public OVRPlugin/Handedness GetDominantHand()
    // Offset: 0xE5B8E4
    static GlobalNamespace::OVRPlugin::Handedness GetDominantHand();
    // static public System.Boolean GetReorientHMDOnControllerRecenter()
    // Offset: 0xE5B9F0
    static bool GetReorientHMDOnControllerRecenter();
    // static public System.Boolean SetReorientHMDOnControllerRecenter(System.Boolean recenterSetting)
    // Offset: 0xE5BB00
    static bool SetReorientHMDOnControllerRecenter(bool recenterSetting);
    // static public System.Boolean SendEvent(System.String name, System.String param, System.String source)
    // Offset: 0xE5BC0C
    static bool SendEvent(::Il2CppString* name, ::Il2CppString* param, ::Il2CppString* source);
    // static public System.Boolean SetHeadPoseModifier(OVRPlugin/Quatf relativeRotation, OVRPlugin/Vector3f relativeTranslation)
    // Offset: 0xE5BDFC
    static bool SetHeadPoseModifier(GlobalNamespace::OVRPlugin::Quatf& relativeRotation, GlobalNamespace::OVRPlugin::Vector3f& relativeTranslation);
    // static public System.Boolean GetHeadPoseModifier(OVRPlugin/Quatf relativeRotation, OVRPlugin/Vector3f relativeTranslation)
    // Offset: 0xE5BF14
    static bool GetHeadPoseModifier(GlobalNamespace::OVRPlugin::Quatf& relativeRotation, GlobalNamespace::OVRPlugin::Vector3f& relativeTranslation);
    // static public System.Boolean IsPerfMetricsSupported(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0xE5C098
    static bool IsPerfMetricsSupported(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Nullable`1<System.Single> GetPerfMetricsFloat(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0xE5C1B8
    static System::Nullable_1<float> GetPerfMetricsFloat(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Nullable`1<System.Int32> GetPerfMetricsInt(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0xE5C2F0
    static System::Nullable_1<int> GetPerfMetricsInt(GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Double GetTimeInSeconds()
    // Offset: 0xE5C428
    static double GetTimeInSeconds();
    // static public System.Boolean SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean applyToAllLayers)
    // Offset: 0xE5C534
    static bool SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool applyToAllLayers);
    // static public System.Boolean AddCustomMetadata(System.String name, System.String param)
    // Offset: 0xE5C6A0
    static bool AddCustomMetadata(::Il2CppString* name, ::Il2CppString* param);
    // static public System.Boolean SetDeveloperMode(OVRPlugin/Bool active)
    // Offset: 0xE5C7B8
    static bool SetDeveloperMode(GlobalNamespace::OVRPlugin::Bool active);
    // static public System.Single GetAdaptiveGPUPerformanceScale()
    // Offset: 0xE5C8C0
    static float GetAdaptiveGPUPerformanceScale();
    // static public System.Boolean GetHandTrackingEnabled()
    // Offset: 0xE5C9D8
    static bool GetHandTrackingEnabled();
    // static public System.Boolean GetHandState(OVRPlugin/Step stepId, OVRPlugin/Hand hand, OVRPlugin/HandState handState)
    // Offset: 0xE5CAEC
    static bool GetHandState(GlobalNamespace::OVRPlugin::Step stepId, GlobalNamespace::OVRPlugin::Hand hand, GlobalNamespace::OVRPlugin::HandState& handState);
    // static public System.Boolean GetSkeleton(OVRPlugin/SkeletonType skeletonType, OVRPlugin/Skeleton skeleton)
    // Offset: 0xE5D298
    static bool GetSkeleton(GlobalNamespace::OVRPlugin::SkeletonType skeletonType, GlobalNamespace::OVRPlugin::Skeleton& skeleton);
    // static public System.Boolean GetMesh(OVRPlugin/MeshType meshType, OVRPlugin/Mesh mesh)
    // Offset: 0xE46668
    static bool GetMesh(GlobalNamespace::OVRPlugin::MeshType meshType, GlobalNamespace::OVRPlugin::Mesh*& mesh);
    // static public System.Boolean GetSystemHmd3DofModeEnabled()
    // Offset: 0xE5D3B8
    static bool GetSystemHmd3DofModeEnabled();
    // static private System.Void .cctor()
    // Offset: 0xE5D4CC
    static void _cctor();
  }; // OVRPlugin
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin*, "", "OVRPlugin");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Vector3f, "", "OVRPlugin/Vector3f");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Quatf, "", "OVRPlugin/Quatf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Posef, "", "OVRPlugin/Posef");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::TrackingConfidence, "", "OVRPlugin/TrackingConfidence");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::HandStatus, "", "OVRPlugin/HandStatus");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::HandFingerPinch, "", "OVRPlugin/HandFingerPinch");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::HandStateInternal, "", "OVRPlugin/HandStateInternal");
#pragma pack(pop)
