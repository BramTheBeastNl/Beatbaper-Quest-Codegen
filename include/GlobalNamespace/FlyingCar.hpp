// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: FlyingCar
  class FlyingCar : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _startZ
    // Size: 0x4
    // Offset: 0x18
    float startZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _endZ
    // Size: 0x4
    // Offset: 0x1C
    float endZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x20
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _progress
    // Size: 0x4
    // Offset: 0x24
    float progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _pos
    // Size: 0xC
    // Offset: 0x28
    UnityEngine::Vector3 pos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: FlyingCar
    FlyingCar(float startZ_ = {}, float endZ_ = {}, float speed_ = {}, float progress_ = {}, UnityEngine::Vector3 pos_ = {}) noexcept : startZ{startZ_}, endZ{endZ_}, speed{speed_}, progress{progress_}, pos{pos_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x104664C
    void Start();
    // protected System.Void Update()
    // Offset: 0x10467AC
    void Update();
    // protected System.Void UpdatePos()
    // Offset: 0x10466FC
    void UpdatePos();
    // public System.Void .ctor()
    // Offset: 0x1046870
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlyingCar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingCar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlyingCar*, creationType>()));
    }
  }; // FlyingCar
  #pragma pack(pop)
  static check_size<sizeof(FlyingCar), 40 + sizeof(UnityEngine::Vector3)> __GlobalNamespace_FlyingCarSizeCheck;
  static_assert(sizeof(FlyingCar) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FlyingCar*, "", "FlyingCar");
// Writing MetadataGetter for method: FlyingCar::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingCar::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingCar::UpdatePos
// Il2CppName: UpdatePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::UpdatePos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), "UpdatePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingCar::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
