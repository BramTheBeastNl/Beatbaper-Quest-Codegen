// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: PracticeSettings
  class PracticeSettings;
  // Forward declaring type: PlayerAllOverallStatsData
  class PlayerAllOverallStatsData;
  // Forward declaring type: PlayerLevelStatsData
  class PlayerLevelStatsData;
  // Forward declaring type: PlayerMissionStatsData
  class PlayerMissionStatsData;
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
  // Forward declaring type: OverrideEnvironmentSettings
  class OverrideEnvironmentSettings;
  // Forward declaring type: MultiplayerModeSettings
  class MultiplayerModeSettings;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: MissionHelpSO
  class MissionHelpSO;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: PlayerData
  // [] Offset: FFFFFFFF
  class PlayerData : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD21C84
    // private System.String <playerId>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* playerId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21C94
    // private System.String <playerName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* playerName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21CA4
    // private System.Boolean <shouldShowTutorialPrompt>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool shouldShowTutorialPrompt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD21CB4
    // private System.Boolean <shouldShow360Warning>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool shouldShow360Warning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD21CC4
    // private System.Boolean <agreedToEula>k__BackingField
    // Size: 0x1
    // Offset: 0x22
    bool agreedToEula;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD21CD4
    // private System.Boolean <agreedToMultiplayerDisclaimer>k__BackingField
    // Size: 0x1
    // Offset: 0x23
    bool agreedToMultiplayerDisclaimer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD21CE4
    // private System.Boolean <avatarCreated>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    bool avatarCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD21CF4
    // private System.Boolean <shareMultiplayerLobbyCodeInRichPresence>k__BackingField
    // Size: 0x1
    // Offset: 0x25
    bool shareMultiplayerLobbyCodeInRichPresence;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shareMultiplayerLobbyCodeInRichPresence and: lastSelectedBeatmapDifficulty
    char __padding7[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD21D04
    // private BeatmapDifficulty <lastSelectedBeatmapDifficulty>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficulty) == 0x4);
    // Padding between fields: lastSelectedBeatmapDifficulty and: lastSelectedBeatmapCharacteristic
    char __padding8[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD21D14
    // private BeatmapCharacteristicSO <lastSelectedBeatmapCharacteristic>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCharacteristicSO*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D24
    // private GameplayModifiers <gameplayModifiers>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D34
    // private PlayerSpecificSettings <playerSpecificSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerSpecificSettings*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D44
    // private PracticeSettings <practiceSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::PracticeSettings* practiceSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PracticeSettings*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D54
    // private PlayerAllOverallStatsData <playerAllOverallStatsData>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerAllOverallStatsData*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D64
    // private System.Collections.Generic.List`1<PlayerLevelStatsData> <levelsStatsData>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D74
    // private System.Collections.Generic.List`1<PlayerMissionStatsData> <missionsStatsData>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D84
    // private System.Collections.Generic.List`1<System.String> <showedMissionHelpIds>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Generic::List_1<::Il2CppString*>* showedMissionHelpIds;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21D94
    // private System.Collections.Generic.List`1<System.String> <guestPlayerNames>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    System::Collections::Generic::List_1<::Il2CppString*>* guestPlayerNames;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21DA4
    // private ColorSchemesSettings <colorSchemesSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::ColorSchemesSettings* colorSchemesSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSchemesSettings*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21DB4
    // private OverrideEnvironmentSettings <overrideEnvironmentSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OverrideEnvironmentSettings*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21DC4
    // private System.Collections.Generic.HashSet`1<System.String> <favoritesLevelIds>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    System::Collections::Generic::HashSet_1<::Il2CppString*>* favoritesLevelIds;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21DD4
    // private MultiplayerModeSettings <multiplayerModeSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerModeSettings*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21DE4
    // private System.Action favoriteLevelsSetDidChangeEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action* favoriteLevelsSetDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21DF4
    // private System.Action didIncreaseNumberOfGameplaysEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action* didIncreaseNumberOfGameplaysEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD21E04
    // private System.Action didChangeShareMultiplayerLobbyCodeInRichPresenceEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action* didChangeShareMultiplayerLobbyCodeInRichPresenceEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // Creating value type constructor for type: PlayerData
    PlayerData(::Il2CppString* playerId_ = {}, ::Il2CppString* playerName_ = {}, bool shouldShowTutorialPrompt_ = {}, bool shouldShow360Warning_ = {}, bool agreedToEula_ = {}, bool agreedToMultiplayerDisclaimer_ = {}, bool avatarCreated_ = {}, bool shareMultiplayerLobbyCodeInRichPresence_ = {}, GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty_ = {}, GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic_ = {}, GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings_ = {}, GlobalNamespace::PracticeSettings* practiceSettings_ = {}, GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData_ = {}, System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData_ = {}, System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData_ = {}, System::Collections::Generic::List_1<::Il2CppString*>* showedMissionHelpIds_ = {}, System::Collections::Generic::List_1<::Il2CppString*>* guestPlayerNames_ = {}, GlobalNamespace::ColorSchemesSettings* colorSchemesSettings_ = {}, GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings_ = {}, System::Collections::Generic::HashSet_1<::Il2CppString*>* favoritesLevelIds_ = {}, GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings_ = {}, System::Action* favoriteLevelsSetDidChangeEvent_ = {}, System::Action* didIncreaseNumberOfGameplaysEvent_ = {}, System::Action* didChangeShareMultiplayerLobbyCodeInRichPresenceEvent_ = {}) noexcept : playerId{playerId_}, playerName{playerName_}, shouldShowTutorialPrompt{shouldShowTutorialPrompt_}, shouldShow360Warning{shouldShow360Warning_}, agreedToEula{agreedToEula_}, agreedToMultiplayerDisclaimer{agreedToMultiplayerDisclaimer_}, avatarCreated{avatarCreated_}, shareMultiplayerLobbyCodeInRichPresence{shareMultiplayerLobbyCodeInRichPresence_}, lastSelectedBeatmapDifficulty{lastSelectedBeatmapDifficulty_}, lastSelectedBeatmapCharacteristic{lastSelectedBeatmapCharacteristic_}, gameplayModifiers{gameplayModifiers_}, playerSpecificSettings{playerSpecificSettings_}, practiceSettings{practiceSettings_}, playerAllOverallStatsData{playerAllOverallStatsData_}, levelsStatsData{levelsStatsData_}, missionsStatsData{missionsStatsData_}, showedMissionHelpIds{showedMissionHelpIds_}, guestPlayerNames{guestPlayerNames_}, colorSchemesSettings{colorSchemesSettings_}, overrideEnvironmentSettings{overrideEnvironmentSettings_}, favoritesLevelIds{favoritesLevelIds_}, multiplayerModeSettings{multiplayerModeSettings_}, favoriteLevelsSetDidChangeEvent{favoriteLevelsSetDidChangeEvent_}, didIncreaseNumberOfGameplaysEvent{didIncreaseNumberOfGameplaysEvent_}, didChangeShareMultiplayerLobbyCodeInRichPresenceEvent{didChangeShareMultiplayerLobbyCodeInRichPresenceEvent_} {}
    // static field const value: static public System.Int32 kMaxGuestPlayers
    static constexpr const int kMaxGuestPlayers = 10;
    // Get static field: static public System.Int32 kMaxGuestPlayers
    static int _get_kMaxGuestPlayers();
    // Set static field: static public System.Int32 kMaxGuestPlayers
    static void _set_kMaxGuestPlayers(int value);
    // public System.String get_playerId()
    // Offset: 0xF615B4
    ::Il2CppString* get_playerId();
    // private System.Void set_playerId(System.String value)
    // Offset: 0xF615BC
    void set_playerId(::Il2CppString* value);
    // public System.String get_playerName()
    // Offset: 0xF615C4
    ::Il2CppString* get_playerName();
    // private System.Void set_playerName(System.String value)
    // Offset: 0xF615CC
    void set_playerName(::Il2CppString* value);
    // public System.Boolean get_shouldShowTutorialPrompt()
    // Offset: 0xF615D4
    bool get_shouldShowTutorialPrompt();
    // private System.Void set_shouldShowTutorialPrompt(System.Boolean value)
    // Offset: 0xF615DC
    void set_shouldShowTutorialPrompt(bool value);
    // public System.Boolean get_shouldShow360Warning()
    // Offset: 0xF615E8
    bool get_shouldShow360Warning();
    // private System.Void set_shouldShow360Warning(System.Boolean value)
    // Offset: 0xF615F0
    void set_shouldShow360Warning(bool value);
    // public System.Boolean get_agreedToEula()
    // Offset: 0xF615FC
    bool get_agreedToEula();
    // private System.Void set_agreedToEula(System.Boolean value)
    // Offset: 0xF61604
    void set_agreedToEula(bool value);
    // public System.Boolean get_agreedToMultiplayerDisclaimer()
    // Offset: 0xF61610
    bool get_agreedToMultiplayerDisclaimer();
    // private System.Void set_agreedToMultiplayerDisclaimer(System.Boolean value)
    // Offset: 0xF61618
    void set_agreedToMultiplayerDisclaimer(bool value);
    // public System.Boolean get_avatarCreated()
    // Offset: 0xF61624
    bool get_avatarCreated();
    // private System.Void set_avatarCreated(System.Boolean value)
    // Offset: 0xF6162C
    void set_avatarCreated(bool value);
    // public System.Boolean get_shareMultiplayerLobbyCodeInRichPresence()
    // Offset: 0xF61638
    bool get_shareMultiplayerLobbyCodeInRichPresence();
    // private System.Void set_shareMultiplayerLobbyCodeInRichPresence(System.Boolean value)
    // Offset: 0xF61640
    void set_shareMultiplayerLobbyCodeInRichPresence(bool value);
    // public BeatmapDifficulty get_lastSelectedBeatmapDifficulty()
    // Offset: 0xF6164C
    GlobalNamespace::BeatmapDifficulty get_lastSelectedBeatmapDifficulty();
    // private System.Void set_lastSelectedBeatmapDifficulty(BeatmapDifficulty value)
    // Offset: 0xF61654
    void set_lastSelectedBeatmapDifficulty(GlobalNamespace::BeatmapDifficulty value);
    // public BeatmapCharacteristicSO get_lastSelectedBeatmapCharacteristic()
    // Offset: 0xF6165C
    GlobalNamespace::BeatmapCharacteristicSO* get_lastSelectedBeatmapCharacteristic();
    // private System.Void set_lastSelectedBeatmapCharacteristic(BeatmapCharacteristicSO value)
    // Offset: 0xF61664
    void set_lastSelectedBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value);
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0xF6166C
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // private System.Void set_gameplayModifiers(GameplayModifiers value)
    // Offset: 0xF61674
    void set_gameplayModifiers(GlobalNamespace::GameplayModifiers* value);
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0xF6167C
    GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // private System.Void set_playerSpecificSettings(PlayerSpecificSettings value)
    // Offset: 0xF61684
    void set_playerSpecificSettings(GlobalNamespace::PlayerSpecificSettings* value);
    // public PracticeSettings get_practiceSettings()
    // Offset: 0xF6168C
    GlobalNamespace::PracticeSettings* get_practiceSettings();
    // private System.Void set_practiceSettings(PracticeSettings value)
    // Offset: 0xF61694
    void set_practiceSettings(GlobalNamespace::PracticeSettings* value);
    // public PlayerAllOverallStatsData get_playerAllOverallStatsData()
    // Offset: 0xF6169C
    GlobalNamespace::PlayerAllOverallStatsData* get_playerAllOverallStatsData();
    // private System.Void set_playerAllOverallStatsData(PlayerAllOverallStatsData value)
    // Offset: 0xF616A4
    void set_playerAllOverallStatsData(GlobalNamespace::PlayerAllOverallStatsData* value);
    // public System.Collections.Generic.List`1<PlayerLevelStatsData> get_levelsStatsData()
    // Offset: 0xF616AC
    System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* get_levelsStatsData();
    // private System.Void set_levelsStatsData(System.Collections.Generic.List`1<PlayerLevelStatsData> value)
    // Offset: 0xF616B4
    void set_levelsStatsData(System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* value);
    // public System.Collections.Generic.List`1<PlayerMissionStatsData> get_missionsStatsData()
    // Offset: 0xF616BC
    System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* get_missionsStatsData();
    // private System.Void set_missionsStatsData(System.Collections.Generic.List`1<PlayerMissionStatsData> value)
    // Offset: 0xF616C4
    void set_missionsStatsData(System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* value);
    // public System.Collections.Generic.List`1<System.String> get_showedMissionHelpIds()
    // Offset: 0xF616CC
    System::Collections::Generic::List_1<::Il2CppString*>* get_showedMissionHelpIds();
    // private System.Void set_showedMissionHelpIds(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0xF616D4
    void set_showedMissionHelpIds(System::Collections::Generic::List_1<::Il2CppString*>* value);
    // public System.Collections.Generic.List`1<System.String> get_guestPlayerNames()
    // Offset: 0xF616DC
    System::Collections::Generic::List_1<::Il2CppString*>* get_guestPlayerNames();
    // private System.Void set_guestPlayerNames(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0xF616E4
    void set_guestPlayerNames(System::Collections::Generic::List_1<::Il2CppString*>* value);
    // public ColorSchemesSettings get_colorSchemesSettings()
    // Offset: 0xF616EC
    GlobalNamespace::ColorSchemesSettings* get_colorSchemesSettings();
    // private System.Void set_colorSchemesSettings(ColorSchemesSettings value)
    // Offset: 0xF616F4
    void set_colorSchemesSettings(GlobalNamespace::ColorSchemesSettings* value);
    // public OverrideEnvironmentSettings get_overrideEnvironmentSettings()
    // Offset: 0xF616FC
    GlobalNamespace::OverrideEnvironmentSettings* get_overrideEnvironmentSettings();
    // private System.Void set_overrideEnvironmentSettings(OverrideEnvironmentSettings value)
    // Offset: 0xF61704
    void set_overrideEnvironmentSettings(GlobalNamespace::OverrideEnvironmentSettings* value);
    // public System.Collections.Generic.HashSet`1<System.String> get_favoritesLevelIds()
    // Offset: 0xF6170C
    System::Collections::Generic::HashSet_1<::Il2CppString*>* get_favoritesLevelIds();
    // private System.Void set_favoritesLevelIds(System.Collections.Generic.HashSet`1<System.String> value)
    // Offset: 0xF61714
    void set_favoritesLevelIds(System::Collections::Generic::HashSet_1<::Il2CppString*>* value);
    // public MultiplayerModeSettings get_multiplayerModeSettings()
    // Offset: 0xF6171C
    GlobalNamespace::MultiplayerModeSettings* get_multiplayerModeSettings();
    // private System.Void set_multiplayerModeSettings(MultiplayerModeSettings value)
    // Offset: 0xF61724
    void set_multiplayerModeSettings(GlobalNamespace::MultiplayerModeSettings* value);
    // public System.Void add_favoriteLevelsSetDidChangeEvent(System.Action value)
    // Offset: 0xF6172C
    void add_favoriteLevelsSetDidChangeEvent(System::Action* value);
    // public System.Void remove_favoriteLevelsSetDidChangeEvent(System.Action value)
    // Offset: 0xF617D0
    void remove_favoriteLevelsSetDidChangeEvent(System::Action* value);
    // public System.Void add_didIncreaseNumberOfGameplaysEvent(System.Action value)
    // Offset: 0xF61874
    void add_didIncreaseNumberOfGameplaysEvent(System::Action* value);
    // public System.Void remove_didIncreaseNumberOfGameplaysEvent(System.Action value)
    // Offset: 0xF61918
    void remove_didIncreaseNumberOfGameplaysEvent(System::Action* value);
    // public System.Void add_didChangeShareMultiplayerLobbyCodeInRichPresenceEvent(System.Action value)
    // Offset: 0xF619BC
    void add_didChangeShareMultiplayerLobbyCodeInRichPresenceEvent(System::Action* value);
    // public System.Void remove_didChangeShareMultiplayerLobbyCodeInRichPresenceEvent(System.Action value)
    // Offset: 0xF61A60
    void remove_didChangeShareMultiplayerLobbyCodeInRichPresenceEvent(System::Action* value);
    // public System.Void .ctor(System.String playerId, System.String playerName, BeatmapCharacteristicSO lastSelectedBeatmapCharacteristic, ColorSchemesSettings colorSchemesSettings, OverrideEnvironmentSettings overrideEnvironmentSettings)
    // Offset: 0xF61B04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerData* New_ctor(::Il2CppString* playerId, ::Il2CppString* playerName, GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic, GlobalNamespace::ColorSchemesSettings* colorSchemesSettings, GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerData*, creationType>(playerId, playerName, lastSelectedBeatmapCharacteristic, colorSchemesSettings, overrideEnvironmentSettings)));
    }
    // public System.Void .ctor(System.String playerId, System.String playerName, System.Boolean shouldShowTutorialPrompt, System.Boolean shouldShow360Warning, System.Boolean agreedToEula, System.Boolean agreedToMultiplayerDisclaimer, System.Boolean avatarCreated, BeatmapDifficulty lastSelectedBeatmapDifficulty, BeatmapCharacteristicSO lastSelectedBeatmapCharacteristic, GameplayModifiers gameplayModifiers, PlayerSpecificSettings playerSpecificSettings, PracticeSettings practiceSettings, PlayerAllOverallStatsData playerAllOverallStatsData, System.Collections.Generic.List`1<PlayerLevelStatsData> levelsStatsData, System.Collections.Generic.List`1<PlayerMissionStatsData> missionsStatsData, System.Collections.Generic.List`1<System.String> showedMissionHelpIds, System.Collections.Generic.List`1<System.String> guestPlayerNames, ColorSchemesSettings colorSchemesSettings, OverrideEnvironmentSettings overrideEnvironmentSettings, System.Collections.Generic.List`1<System.String> favoritesLevelIds, MultiplayerModeSettings multiplayerModeSettings)
    // Offset: 0xF61CCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerData* New_ctor(::Il2CppString* playerId, ::Il2CppString* playerName, bool shouldShowTutorialPrompt, bool shouldShow360Warning, bool agreedToEula, bool agreedToMultiplayerDisclaimer, bool avatarCreated, GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic, GlobalNamespace::GameplayModifiers* gameplayModifiers, GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings, GlobalNamespace::PracticeSettings* practiceSettings, GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData, System::Collections::Generic::List_1<GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData, System::Collections::Generic::List_1<GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData, System::Collections::Generic::List_1<::Il2CppString*>* showedMissionHelpIds, System::Collections::Generic::List_1<::Il2CppString*>* guestPlayerNames, GlobalNamespace::ColorSchemesSettings* colorSchemesSettings, GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings, System::Collections::Generic::List_1<::Il2CppString*>* favoritesLevelIds, GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerData*, creationType>(playerId, playerName, shouldShowTutorialPrompt, shouldShow360Warning, agreedToEula, agreedToMultiplayerDisclaimer, avatarCreated, lastSelectedBeatmapDifficulty, lastSelectedBeatmapCharacteristic, gameplayModifiers, playerSpecificSettings, practiceSettings, playerAllOverallStatsData, levelsStatsData, missionsStatsData, showedMissionHelpIds, guestPlayerNames, colorSchemesSettings, overrideEnvironmentSettings, favoritesLevelIds, multiplayerModeSettings)));
    }
    // public PlayerLevelStatsData GetPlayerLevelStatsData(IDifficultyBeatmap difficultyBeatmap)
    // Offset: 0xF61E78
    GlobalNamespace::PlayerLevelStatsData* GetPlayerLevelStatsData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap);
    // public PlayerLevelStatsData GetPlayerLevelStatsData(System.String levelId, BeatmapDifficulty difficulty, BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0xF620F4
    GlobalNamespace::PlayerLevelStatsData* GetPlayerLevelStatsData(::Il2CppString* levelId, GlobalNamespace::BeatmapDifficulty difficulty, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
    // public PlayerMissionStatsData GetPlayerMissionStatsData(System.String missionId)
    // Offset: 0xF62308
    GlobalNamespace::PlayerMissionStatsData* GetPlayerMissionStatsData(::Il2CppString* missionId);
    // public System.Boolean WasMissionHelpShowed(MissionHelpSO missionHelp)
    // Offset: 0xF624B0
    bool WasMissionHelpShowed(GlobalNamespace::MissionHelpSO* missionHelp);
    // public System.Void MissionHelpWasShowed(MissionHelpSO missionHelp)
    // Offset: 0xF6251C
    void MissionHelpWasShowed(GlobalNamespace::MissionHelpSO* missionHelp);
    // public System.Void IncreaseNumberOfGameplays(PlayerLevelStatsData playerLevelStats)
    // Offset: 0xF625B8
    void IncreaseNumberOfGameplays(GlobalNamespace::PlayerLevelStatsData* playerLevelStats);
    // public System.Boolean IsLevelUserFavorite(IPreviewBeatmapLevel level)
    // Offset: 0xF625F8
    bool IsLevelUserFavorite(GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void AddLevelToFavorites(IPreviewBeatmapLevel level)
    // Offset: 0xF626D0
    void AddLevelToFavorites(GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void RemoveLevelFromFavorites(IPreviewBeatmapLevel level)
    // Offset: 0xF627D8
    void RemoveLevelFromFavorites(GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void MarkTutorialAsShown()
    // Offset: 0xF628E0
    void MarkTutorialAsShown();
    // public System.Void Mark360WarningAsShown()
    // Offset: 0xF628E8
    void Mark360WarningAsShown();
    // public System.Void MarkEulaAsAgreed()
    // Offset: 0xF628F0
    void MarkEulaAsAgreed();
    // public System.Void MarkMultiplayerDisclaimerAsAgreed()
    // Offset: 0xF628FC
    void MarkMultiplayerDisclaimerAsAgreed();
    // public System.Void MarkAvatarCreated()
    // Offset: 0xF62908
    void MarkAvatarCreated();
    // public System.Void AddGuestPlayerName(System.String guestPlayerName)
    // Offset: 0xF62914
    void AddGuestPlayerName(::Il2CppString* guestPlayerName);
    // public System.Void DeleteAllGuestPlayers()
    // Offset: 0xF62A6C
    void DeleteAllGuestPlayers();
    // public System.Void SetLastSelectedBeatmapDifficulty(BeatmapDifficulty beatmapDifficulty)
    // Offset: 0xF62AC4
    void SetLastSelectedBeatmapDifficulty(GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // public System.Void SetLastSelectedBeatmapCharacteristic(BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0xF62ACC
    void SetLastSelectedBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
    // public System.Void SetGameplayModifiers(GameplayModifiers newGameplayModifiers)
    // Offset: 0xF62AD4
    void SetGameplayModifiers(GlobalNamespace::GameplayModifiers* newGameplayModifiers);
    // public System.Void SetPlayerSpecificSettings(PlayerSpecificSettings newPlayerSpecificSettings)
    // Offset: 0xF62ADC
    void SetPlayerSpecificSettings(GlobalNamespace::PlayerSpecificSettings* newPlayerSpecificSettings);
    // public System.Void SetMultiplayerModeSettings(MultiplayerModeSettings multiplayerModeSettings)
    // Offset: 0xF62AE4
    void SetMultiplayerModeSettings(GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings);
    // public System.Void SetShareMultiplayerLobbyCodeInRichPresence(System.Boolean value)
    // Offset: 0xF62AEC
    void SetShareMultiplayerLobbyCodeInRichPresence(bool value);
  }; // PlayerData
  #pragma pack(pop)
  static check_size<sizeof(PlayerData), 168 + sizeof(System::Action*)> __GlobalNamespace_PlayerDataSizeCheck;
  static_assert(sizeof(PlayerData) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerData*, "", "PlayerData");
