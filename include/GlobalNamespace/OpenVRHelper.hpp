// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: UnityEngine.XR.XRNodeState
#include "UnityEngine/XR/XRNodeState.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRPlatformSDK
  struct VRPlatformSDK;
  // Forward declaring type: IOpenVRHaptics
  class IOpenVRHaptics;
  // Forward declaring type: XRDeviceModel
  struct XRDeviceModel;
  // Skipping declaration: VRControllerManufacturerName because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Skipping declaration: XRNode because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x8D
  #pragma pack(push, 1)
  // Autogenerated type: OpenVRHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class OpenVRHelper : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IVRPlatformHelper*/ {
    public:
    // Nested type: GlobalNamespace::OpenVRHelper::VRControllerManufacturerName
    struct VRControllerManufacturerName;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OpenVRHelper/VRControllerManufacturerName
    // [TokenAttribute] Offset: FFFFFFFF
    struct VRControllerManufacturerName/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: VRControllerManufacturerName
      constexpr VRControllerManufacturerName(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName HTC
      static constexpr const int HTC = 0;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName HTC
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_HTC();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName HTC
      static void _set_HTC(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Oculus
      static constexpr const int Oculus = 1;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Oculus();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
      static void _set_Oculus(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Valve
      static constexpr const int Valve = 2;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Valve
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Valve();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Valve
      static void _set_Valve(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Unknown
      static constexpr const int Unknown = 3;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Unknown();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
      static void _set_Unknown(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // static field const value: static public OpenVRHelper/VRControllerManufacturerName Undefined
      static constexpr const int Undefined = 4;
      // Get static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
      static GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get_Undefined();
      // Set static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
      static void _set_Undefined(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
      // Get instance field: public System.Int32 value__
      int _get_value__();
      // Set instance field: public System.Int32 value__
      void _set_value__(int value);
    }; // OpenVRHelper/VRControllerManufacturerName
    #pragma pack(pop)
    static check_size<sizeof(OpenVRHelper::VRControllerManufacturerName), 0 + sizeof(int)> __GlobalNamespace_OpenVRHelper_VRControllerManufacturerNameSizeCheck;
    static_assert(sizeof(OpenVRHelper::VRControllerManufacturerName) == 0x4);
    // [InjectAttribute] Offset: 0xE7CEBC
    // private readonly IOpenVRHaptics _openVrHaptics
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::IOpenVRHaptics* openVrHaptics;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IOpenVRHaptics*) == 0x8);
    // private System.Action inputFocusWasCapturedEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action* inputFocusWasCapturedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action inputFocusWasReleasedEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action* inputFocusWasReleasedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action vrFocusWasCapturedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action* vrFocusWasCapturedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action vrFocusWasReleasedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* vrFocusWasReleasedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action hmdUnmountedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action* hmdUnmountedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action hmdMountedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action* hmdMountedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action joystickWasCenteredThisFrameEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action* joystickWasCenteredThisFrameEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<UnityEngine::Vector2>* joystickWasNotCenteredThisFrameEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<UnityEngine::Vector2>*) == 0x8);
    // private readonly Valve.VR.TrackedDevicePose_t[] _gamePoses
    // Size: 0x8
    // Offset: 0x60
    ::Array<Valve::VR::TrackedDevicePose_t>* gamePoses;
    // Field size check
    static_assert(sizeof(::Array<Valve::VR::TrackedDevicePose_t>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* nodeStates;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>*) == 0x8);
    // private readonly Valve.VR.TrackedDevicePose_t[] _poses
    // Size: 0x8
    // Offset: 0x70
    ::Array<Valve::VR::TrackedDevicePose_t>* poses;
    // Field size check
    static_assert(sizeof(::Array<Valve::VR::TrackedDevicePose_t>*) == 0x8);
    // private System.Boolean _hasInputFocus
    // Size: 0x1
    // Offset: 0x78
    bool hasInputFocus;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _didGetNodeStatesThisFrame
    // Size: 0x1
    // Offset: 0x79
    bool didGetNodeStatesThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: didGetNodeStatesThisFrame and: disabledEventSystem
    char __padding13[0x6] = {};
    // private UnityEngine.EventSystems.EventSystem _disabledEventSystem
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::EventSystems::EventSystem* disabledEventSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::EventSystem*) == 0x8);
    // private OpenVRHelper/VRControllerManufacturerName _vrControllerManufacturerName
    // Size: 0x4
    // Offset: 0x88
    GlobalNamespace::OpenVRHelper::VRControllerManufacturerName vrControllerManufacturerName;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName) == 0x4);
    // private System.Boolean _scrollingLastFrame
    // Size: 0x1
    // Offset: 0x8C
    bool scrollingLastFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OpenVRHelper
    OpenVRHelper(GlobalNamespace::IOpenVRHaptics* openVrHaptics_ = {}, System::Action* inputFocusWasCapturedEvent_ = {}, System::Action* inputFocusWasReleasedEvent_ = {}, System::Action* vrFocusWasCapturedEvent_ = {}, System::Action* vrFocusWasReleasedEvent_ = {}, System::Action* hmdUnmountedEvent_ = {}, System::Action* hmdMountedEvent_ = {}, System::Action* joystickWasCenteredThisFrameEvent_ = {}, System::Action_1<UnityEngine::Vector2>* joystickWasNotCenteredThisFrameEvent_ = {}, ::Array<Valve::VR::TrackedDevicePose_t>* gamePoses_ = {}, System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* nodeStates_ = {}, ::Array<Valve::VR::TrackedDevicePose_t>* poses_ = {}, bool hasInputFocus_ = {}, bool didGetNodeStatesThisFrame_ = {}, UnityEngine::EventSystems::EventSystem* disabledEventSystem_ = {}, GlobalNamespace::OpenVRHelper::VRControllerManufacturerName vrControllerManufacturerName_ = {}, bool scrollingLastFrame_ = {}) noexcept : openVrHaptics{openVrHaptics_}, inputFocusWasCapturedEvent{inputFocusWasCapturedEvent_}, inputFocusWasReleasedEvent{inputFocusWasReleasedEvent_}, vrFocusWasCapturedEvent{vrFocusWasCapturedEvent_}, vrFocusWasReleasedEvent{vrFocusWasReleasedEvent_}, hmdUnmountedEvent{hmdUnmountedEvent_}, hmdMountedEvent{hmdMountedEvent_}, joystickWasCenteredThisFrameEvent{joystickWasCenteredThisFrameEvent_}, joystickWasNotCenteredThisFrameEvent{joystickWasNotCenteredThisFrameEvent_}, gamePoses{gamePoses_}, nodeStates{nodeStates_}, poses{poses_}, hasInputFocus{hasInputFocus_}, didGetNodeStatesThisFrame{didGetNodeStatesThisFrame_}, disabledEventSystem{disabledEventSystem_}, vrControllerManufacturerName{vrControllerManufacturerName_}, scrollingLastFrame{scrollingLastFrame_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IVRPlatformHelper
    operator GlobalNamespace::IVRPlatformHelper() noexcept {
      return *reinterpret_cast<GlobalNamespace::IVRPlatformHelper*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single kMicroSecondsInSecond
    static constexpr const float kMicroSecondsInSecond = 1000000;
    // Get static field: static public System.Single kMicroSecondsInSecond
    static float _get_kMicroSecondsInSecond();
    // Set static field: static public System.Single kMicroSecondsInSecond
    static void _set_kMicroSecondsInSecond(float value);
    // static field const value: static public System.Int32 kUpdateInterval
    static constexpr const int kUpdateInterval = 4;
    // Get static field: static public System.Int32 kUpdateInterval
    static int _get_kUpdateInterval();
    // Set static field: static public System.Int32 kUpdateInterval
    static void _set_kUpdateInterval(int value);
    // static field const value: static public System.Int32 kMaxDurationMs
    static constexpr const int kMaxDurationMs = 4000;
    // Get static field: static public System.Int32 kMaxDurationMs
    static int _get_kMaxDurationMs();
    // Set static field: static public System.Int32 kMaxDurationMs
    static void _set_kMaxDurationMs(int value);
    // static field const value: static public System.Single kUpdateIntervalSeconds
    static constexpr const float kUpdateIntervalSeconds = 0.004;
    // Get static field: static public System.Single kUpdateIntervalSeconds
    static float _get_kUpdateIntervalSeconds();
    // Set static field: static public System.Single kUpdateIntervalSeconds
    static void _set_kUpdateIntervalSeconds(float value);
    // Get instance field: private readonly IOpenVRHaptics _openVrHaptics
    GlobalNamespace::IOpenVRHaptics* _get__openVrHaptics();
    // Set instance field: private readonly IOpenVRHaptics _openVrHaptics
    void _set__openVrHaptics(GlobalNamespace::IOpenVRHaptics* value);
    // Get instance field: private System.Action inputFocusWasCapturedEvent
    System::Action* _get_inputFocusWasCapturedEvent();
    // Set instance field: private System.Action inputFocusWasCapturedEvent
    void _set_inputFocusWasCapturedEvent(System::Action* value);
    // Get instance field: private System.Action inputFocusWasReleasedEvent
    System::Action* _get_inputFocusWasReleasedEvent();
    // Set instance field: private System.Action inputFocusWasReleasedEvent
    void _set_inputFocusWasReleasedEvent(System::Action* value);
    // Get instance field: private System.Action vrFocusWasCapturedEvent
    System::Action* _get_vrFocusWasCapturedEvent();
    // Set instance field: private System.Action vrFocusWasCapturedEvent
    void _set_vrFocusWasCapturedEvent(System::Action* value);
    // Get instance field: private System.Action vrFocusWasReleasedEvent
    System::Action* _get_vrFocusWasReleasedEvent();
    // Set instance field: private System.Action vrFocusWasReleasedEvent
    void _set_vrFocusWasReleasedEvent(System::Action* value);
    // Get instance field: private System.Action hmdUnmountedEvent
    System::Action* _get_hmdUnmountedEvent();
    // Set instance field: private System.Action hmdUnmountedEvent
    void _set_hmdUnmountedEvent(System::Action* value);
    // Get instance field: private System.Action hmdMountedEvent
    System::Action* _get_hmdMountedEvent();
    // Set instance field: private System.Action hmdMountedEvent
    void _set_hmdMountedEvent(System::Action* value);
    // Get instance field: private System.Action joystickWasCenteredThisFrameEvent
    System::Action* _get_joystickWasCenteredThisFrameEvent();
    // Set instance field: private System.Action joystickWasCenteredThisFrameEvent
    void _set_joystickWasCenteredThisFrameEvent(System::Action* value);
    // Get instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
    System::Action_1<UnityEngine::Vector2>* _get_joystickWasNotCenteredThisFrameEvent();
    // Set instance field: private System.Action`1<UnityEngine.Vector2> joystickWasNotCenteredThisFrameEvent
    void _set_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value);
    // Get instance field: private readonly Valve.VR.TrackedDevicePose_t[] _gamePoses
    ::Array<Valve::VR::TrackedDevicePose_t>* _get__gamePoses();
    // Set instance field: private readonly Valve.VR.TrackedDevicePose_t[] _gamePoses
    void _set__gamePoses(::Array<Valve::VR::TrackedDevicePose_t>* value);
    // Get instance field: private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
    System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* _get__nodeStates();
    // Set instance field: private readonly System.Collections.Generic.List`1<UnityEngine.XR.XRNodeState> _nodeStates
    void _set__nodeStates(System::Collections::Generic::List_1<UnityEngine::XR::XRNodeState>* value);
    // Get instance field: private readonly Valve.VR.TrackedDevicePose_t[] _poses
    ::Array<Valve::VR::TrackedDevicePose_t>* _get__poses();
    // Set instance field: private readonly Valve.VR.TrackedDevicePose_t[] _poses
    void _set__poses(::Array<Valve::VR::TrackedDevicePose_t>* value);
    // Get instance field: private System.Boolean _hasInputFocus
    bool _get__hasInputFocus();
    // Set instance field: private System.Boolean _hasInputFocus
    void _set__hasInputFocus(bool value);
    // Get instance field: private System.Boolean _didGetNodeStatesThisFrame
    bool _get__didGetNodeStatesThisFrame();
    // Set instance field: private System.Boolean _didGetNodeStatesThisFrame
    void _set__didGetNodeStatesThisFrame(bool value);
    // Get instance field: private UnityEngine.EventSystems.EventSystem _disabledEventSystem
    UnityEngine::EventSystems::EventSystem* _get__disabledEventSystem();
    // Set instance field: private UnityEngine.EventSystems.EventSystem _disabledEventSystem
    void _set__disabledEventSystem(UnityEngine::EventSystems::EventSystem* value);
    // Get instance field: private OpenVRHelper/VRControllerManufacturerName _vrControllerManufacturerName
    GlobalNamespace::OpenVRHelper::VRControllerManufacturerName _get__vrControllerManufacturerName();
    // Set instance field: private OpenVRHelper/VRControllerManufacturerName _vrControllerManufacturerName
    void _set__vrControllerManufacturerName(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value);
    // Get instance field: private System.Boolean _scrollingLastFrame
    bool _get__scrollingLastFrame();
    // Set instance field: private System.Boolean _scrollingLastFrame
    void _set__scrollingLastFrame(bool value);
    // public System.Boolean get_hasInputFocus()
    // Offset: 0x204AE24
    bool get_hasInputFocus();
    // public System.Boolean get_isAlwaysWireless()
    // Offset: 0x204AE2C
    bool get_isAlwaysWireless();
    // public VRPlatformSDK get_vrPlatformSDK()
    // Offset: 0x204AE34
    GlobalNamespace::VRPlatformSDK get_vrPlatformSDK();
    // public XRDeviceModel get_currentXRDeviceModel()
    // Offset: 0x204AE3C
    GlobalNamespace::XRDeviceModel get_currentXRDeviceModel();
    // private OpenVRHelper/VRControllerManufacturerName get_vrControllerManufacturerName()
    // Offset: 0x204AE44
    GlobalNamespace::OpenVRHelper::VRControllerManufacturerName get_vrControllerManufacturerName();
    // public System.Void add_inputFocusWasCapturedEvent(System.Action value)
    // Offset: 0x204A3E4
    void add_inputFocusWasCapturedEvent(System::Action* value);
    // public System.Void remove_inputFocusWasCapturedEvent(System.Action value)
    // Offset: 0x204A488
    void remove_inputFocusWasCapturedEvent(System::Action* value);
    // public System.Void add_inputFocusWasReleasedEvent(System.Action value)
    // Offset: 0x204A52C
    void add_inputFocusWasReleasedEvent(System::Action* value);
    // public System.Void remove_inputFocusWasReleasedEvent(System.Action value)
    // Offset: 0x204A5D0
    void remove_inputFocusWasReleasedEvent(System::Action* value);
    // public System.Void add_vrFocusWasCapturedEvent(System.Action value)
    // Offset: 0x204A674
    void add_vrFocusWasCapturedEvent(System::Action* value);
    // public System.Void remove_vrFocusWasCapturedEvent(System.Action value)
    // Offset: 0x204A718
    void remove_vrFocusWasCapturedEvent(System::Action* value);
    // public System.Void add_vrFocusWasReleasedEvent(System.Action value)
    // Offset: 0x204A7BC
    void add_vrFocusWasReleasedEvent(System::Action* value);
    // public System.Void remove_vrFocusWasReleasedEvent(System.Action value)
    // Offset: 0x204A860
    void remove_vrFocusWasReleasedEvent(System::Action* value);
    // public System.Void add_hmdUnmountedEvent(System.Action value)
    // Offset: 0x204A904
    void add_hmdUnmountedEvent(System::Action* value);
    // public System.Void remove_hmdUnmountedEvent(System.Action value)
    // Offset: 0x204A9A8
    void remove_hmdUnmountedEvent(System::Action* value);
    // public System.Void add_hmdMountedEvent(System.Action value)
    // Offset: 0x204AA4C
    void add_hmdMountedEvent(System::Action* value);
    // public System.Void remove_hmdMountedEvent(System.Action value)
    // Offset: 0x204AAF0
    void remove_hmdMountedEvent(System::Action* value);
    // public System.Void add_joystickWasCenteredThisFrameEvent(System.Action value)
    // Offset: 0x204AB94
    void add_joystickWasCenteredThisFrameEvent(System::Action* value);
    // public System.Void remove_joystickWasCenteredThisFrameEvent(System.Action value)
    // Offset: 0x204AC38
    void remove_joystickWasCenteredThisFrameEvent(System::Action* value);
    // public System.Void add_joystickWasNotCenteredThisFrameEvent(System.Action`1<UnityEngine.Vector2> value)
    // Offset: 0x204ACDC
    void add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value);
    // public System.Void remove_joystickWasNotCenteredThisFrameEvent(System.Action`1<UnityEngine.Vector2> value)
    // Offset: 0x204AD80
    void remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value);
    // private System.Void Awake()
    // Offset: 0x204AFD8
    void Awake();
    // public System.Void TriggerHapticPulse(UnityEngine.XR.XRNode node, System.Single duration, System.Single strength, System.Single frequency)
    // Offset: 0x204B04C
    void TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency);
    // public System.Void StopHaptics(UnityEngine.XR.XRNode node)
    // Offset: 0x204B134
    void StopHaptics(UnityEngine::XR::XRNode node);
    // public System.Void AdjustControllerTransform(UnityEngine.XR.XRNode node, UnityEngine.Transform transform, UnityEngine.Vector3 position, UnityEngine.Vector3 rotation)
    // Offset: 0x204B138
    void AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation);
    // public System.Boolean GetNodePose(UnityEngine.XR.XRNode nodeType, System.Int32 idx, out UnityEngine.Vector3 pos, out UnityEngine.Quaternion rot)
    // Offset: 0x204B35C
    bool GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, ByRef<UnityEngine::Vector3> pos, ByRef<UnityEngine::Quaternion> rot);
    // public System.Void Update()
    // Offset: 0x204B62C
    void Update();
    // public System.Void LateUpdate()
    // Offset: 0x204BBE4
    void LateUpdate();
    // public System.Void OnDestroy()
    // Offset: 0x204BBEC
    void OnDestroy();
    // private System.Void DisableEventSystem()
    // Offset: 0x204BA38
    void DisableEventSystem();
    // private System.Void EnableEventSystem()
    // Offset: 0x204BB50
    void EnableEventSystem();
    // private System.Void OnBeforeRender()
    // Offset: 0x204BCA0
    void OnBeforeRender();
    // public System.Void .ctor()
    // Offset: 0x204BD24
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OpenVRHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OpenVRHelper*, creationType>()));
    }
  }; // OpenVRHelper
  #pragma pack(pop)
  static check_size<sizeof(OpenVRHelper), 140 + sizeof(bool)> __GlobalNamespace_OpenVRHelperSizeCheck;
  static_assert(sizeof(OpenVRHelper) == 0x8D);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OpenVRHelper*, "", "OpenVRHelper");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName, "", "OpenVRHelper/VRControllerManufacturerName");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::get_hasInputFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::get_isAlwaysWireless
// Il2CppName: get_isAlwaysWireless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::get_isAlwaysWireless)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "get_isAlwaysWireless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::get_vrPlatformSDK
// Il2CppName: get_vrPlatformSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRPlatformSDK (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::get_vrPlatformSDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "get_vrPlatformSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel
// Il2CppName: get_currentXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "get_currentXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName
// Il2CppName: get_vrControllerManufacturerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "get_vrControllerManufacturerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent
// Il2CppName: add_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent
// Il2CppName: remove_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent
// Il2CppName: add_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent
// Il2CppName: remove_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent
// Il2CppName: add_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent
// Il2CppName: remove_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent
// Il2CppName: add_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent
// Il2CppName: remove_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent
// Il2CppName: add_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent
// Il2CppName: remove_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_hmdMountedEvent
// Il2CppName: add_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_hmdMountedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent
// Il2CppName: remove_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent
// Il2CppName: add_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent
// Il2CppName: remove_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action*)>(&GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent
// Il2CppName: add_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent
// Il2CppName: remove_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(UnityEngine::XR::XRNode, float, float, float)>(&GlobalNamespace::OpenVRHelper::TriggerHapticPulse)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, duration, strength, frequency});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::StopHaptics
// Il2CppName: StopHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(UnityEngine::XR::XRNode)>(&GlobalNamespace::OpenVRHelper::StopHaptics)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "StopHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::AdjustControllerTransform
// Il2CppName: AdjustControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)(UnityEngine::XR::XRNode, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3)>(&GlobalNamespace::OpenVRHelper::AdjustControllerTransform)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "AdjustControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, transform, position, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OpenVRHelper::*)(UnityEngine::XR::XRNode, int, ByRef<UnityEngine::Vector3>, ByRef<UnityEngine::Quaternion>)>(&GlobalNamespace::OpenVRHelper::GetNodePose)> {
  static const MethodInfo* get() {
    static auto* nodeType = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeType, idx, pos, rot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::DisableEventSystem
// Il2CppName: DisableEventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::DisableEventSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "DisableEventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::EnableEventSystem
// Il2CppName: EnableEventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::EnableEventSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "EnableEventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OpenVRHelper::*)()>(&GlobalNamespace::OpenVRHelper::OnBeforeRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OpenVRHelper*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OpenVRHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
