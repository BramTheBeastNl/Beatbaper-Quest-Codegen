// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorScheme
  class ColorScheme;
  // Forward declaring type: ColorSchemeNetSerializable
  struct ColorSchemeNetSerializable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ColorSchemeConverter
  class ColorSchemeConverter : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: ColorSchemeConverter
    ColorSchemeConverter() noexcept {}
    // static public ColorScheme FromNetSerializable(ColorSchemeNetSerializable serialized)
    // Offset: 0x1192638
    static GlobalNamespace::ColorScheme* FromNetSerializable(GlobalNamespace::ColorSchemeNetSerializable serialized);
  }; // ColorSchemeConverter
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ColorSchemeConverter*, "", "ColorSchemeConverter");
// Writing MetadataGetter for method: ColorSchemeConverter::FromNetSerializable
// Il2CppName: FromNetSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorScheme* (*)(GlobalNamespace::ColorSchemeNetSerializable)>(&ColorSchemeConverter::FromNetSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeConverter*), "FromNetSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorSchemeNetSerializable>()});
  }
};
