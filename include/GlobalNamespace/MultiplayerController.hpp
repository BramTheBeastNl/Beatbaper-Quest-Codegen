// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerPlayerStartState
#include "GlobalNamespace/MultiplayerPlayerStartState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: SceneStartSyncController
  class SceneStartSyncController;
  // Forward declaring type: SongStartSyncController
  class SongStartSyncController;
  // Forward declaring type: MultiplayerLevelFinishedController
  class MultiplayerLevelFinishedController;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: LobbyGameState
  class LobbyGameState;
  // Forward declaring type: MultiplayerIntroAnimationController
  class MultiplayerIntroAnimationController;
  // Forward declaring type: MultiplayerOutroAnimationController
  class MultiplayerOutroAnimationController;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
  // Skipping declaration: State because it is already included!
  // Forward declaring type: MultiplayerGameState
  struct MultiplayerGameState;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerController
  // [] Offset: FFFFFFFF
  class MultiplayerController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerController::State
    struct State;
    // Nested type: GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__31
    class $PerformSongStartSync$d__31;
    // Nested type: GlobalNamespace::MultiplayerController::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: GlobalNamespace::MultiplayerController::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MultiplayerController/State
    // [] Offset: FFFFFFFF
    struct State/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerController/State CheckingLobbyState
      static constexpr const int CheckingLobbyState = 0;
      // Get static field: static public MultiplayerController/State CheckingLobbyState
      static GlobalNamespace::MultiplayerController::State _get_CheckingLobbyState();
      // Set static field: static public MultiplayerController/State CheckingLobbyState
      static void _set_CheckingLobbyState(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State WaitingForPlayers
      static constexpr const int WaitingForPlayers = 1;
      // Get static field: static public MultiplayerController/State WaitingForPlayers
      static GlobalNamespace::MultiplayerController::State _get_WaitingForPlayers();
      // Set static field: static public MultiplayerController/State WaitingForPlayers
      static void _set_WaitingForPlayers(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State SongStartSync
      static constexpr const int SongStartSync = 2;
      // Get static field: static public MultiplayerController/State SongStartSync
      static GlobalNamespace::MultiplayerController::State _get_SongStartSync();
      // Set static field: static public MultiplayerController/State SongStartSync
      static void _set_SongStartSync(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Intro
      static constexpr const int Intro = 3;
      // Get static field: static public MultiplayerController/State Intro
      static GlobalNamespace::MultiplayerController::State _get_Intro();
      // Set static field: static public MultiplayerController/State Intro
      static void _set_Intro(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Gameplay
      static constexpr const int Gameplay = 4;
      // Get static field: static public MultiplayerController/State Gameplay
      static GlobalNamespace::MultiplayerController::State _get_Gameplay();
      // Set static field: static public MultiplayerController/State Gameplay
      static void _set_Gameplay(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Outro
      static constexpr const int Outro = 5;
      // Get static field: static public MultiplayerController/State Outro
      static GlobalNamespace::MultiplayerController::State _get_Outro();
      // Set static field: static public MultiplayerController/State Outro
      static void _set_Outro(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Finished
      static constexpr const int Finished = 6;
      // Get static field: static public MultiplayerController/State Finished
      static GlobalNamespace::MultiplayerController::State _get_Finished();
      // Set static field: static public MultiplayerController/State Finished
      static void _set_Finished(GlobalNamespace::MultiplayerController::State value);
    }; // MultiplayerController/State
    static check_size<sizeof(MultiplayerController::State), 0 + sizeof(int)> __GlobalNamespace_MultiplayerController_StateSizeCheck;
    static_assert(sizeof(MultiplayerController::State) == 0x4);
    // private UnityEngine.GameObject _loadingEnvironment
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::GameObject* loadingEnvironment;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [SpaceAttribute] Offset: 0xDC9CDC
    // private MultiplayerLevelScenesTransitionSetupDataSO _multiplayerLevelSceneSetupData
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelSceneSetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D14
    // private readonly GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameScenesManager*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D24
    // private readonly MultiplayerPlayersManager _playersManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MultiplayerPlayersManager* playersManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D34
    // private readonly SceneStartSyncController _sceneStartSyncController
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::SceneStartSyncController* sceneStartSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SceneStartSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D44
    // private readonly SongStartSyncController _songStartSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::SongStartSyncController* songStartSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongStartSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D54
    // private readonly MultiplayerLevelFinishedController _multiplayerLevelFinishedController
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::MultiplayerLevelFinishedController* multiplayerLevelFinishedController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelFinishedController*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D64
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D74
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D84
    // private readonly LobbyGameState _lobbyGameState
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::LobbyGameState* lobbyGameState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyGameState*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9D94
    // private readonly MultiplayerIntroAnimationController _introAnimationController
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::MultiplayerIntroAnimationController* introAnimationController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerIntroAnimationController*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9DA4
    // private readonly MultiplayerOutroAnimationController _outroAnimationController
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::MultiplayerOutroAnimationController* outroAnimationController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerOutroAnimationController*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9DB4
    // private readonly IMenuRpcManager _menuRpcManager
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMenuRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xDC9DC4
    // private readonly IGameplayRpcManager _gameplayRpcManager
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::IGameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IGameplayRpcManager*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDC9DD4
    // private System.Action`1<MultiplayerController/State> stateChangedEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<GlobalNamespace::MultiplayerController::State>* stateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::MultiplayerController::State>*) == 0x8);
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0x90
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private MultiplayerPlayerStartState _localPlayerSyncStartState
    // Size: 0x4
    // Offset: 0x94
    GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncStartState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayerStartState) == 0x4);
    // private MultiplayerController/State _state
    // Size: 0x4
    // Offset: 0x98
    GlobalNamespace::MultiplayerController::State state;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerController::State) == 0x4);
    // Padding between fields: state and: otherPlayersCompletionResults
    char __padding17[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> _otherPlayersCompletionResults
    // Size: 0x8
    // Offset: 0xA0
    System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* otherPlayersCompletionResults;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>*) == 0x8);
    // private LevelCompletionResults _localPlayerResults
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::LevelCompletionResults* localPlayerResults;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelCompletionResults*) == 0x8);
    // Creating value type constructor for type: MultiplayerController
    MultiplayerController(UnityEngine::GameObject* loadingEnvironment_ = {}, GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelSceneSetupData_ = {}, GlobalNamespace::GameScenesManager* gameScenesManager_ = {}, GlobalNamespace::MultiplayerPlayersManager* playersManager_ = {}, GlobalNamespace::SceneStartSyncController* sceneStartSyncController_ = {}, GlobalNamespace::SongStartSyncController* songStartSyncController_ = {}, GlobalNamespace::MultiplayerLevelFinishedController* multiplayerLevelFinishedController_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::LobbyGameState* lobbyGameState_ = {}, GlobalNamespace::MultiplayerIntroAnimationController* introAnimationController_ = {}, GlobalNamespace::MultiplayerOutroAnimationController* outroAnimationController_ = {}, GlobalNamespace::IMenuRpcManager* menuRpcManager_ = {}, GlobalNamespace::IGameplayRpcManager* gameplayRpcManager_ = {}, System::Action_1<GlobalNamespace::MultiplayerController::State>* stateChangedEvent_ = {}, float startTime_ = {}, GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncStartState_ = {}, GlobalNamespace::MultiplayerController::State state_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* otherPlayersCompletionResults_ = {}, GlobalNamespace::LevelCompletionResults* localPlayerResults_ = {}) noexcept : loadingEnvironment{loadingEnvironment_}, multiplayerLevelSceneSetupData{multiplayerLevelSceneSetupData_}, gameScenesManager{gameScenesManager_}, playersManager{playersManager_}, sceneStartSyncController{sceneStartSyncController_}, songStartSyncController{songStartSyncController_}, multiplayerLevelFinishedController{multiplayerLevelFinishedController_}, fadeInOutController{fadeInOutController_}, multiplayerSessionManager{multiplayerSessionManager_}, lobbyGameState{lobbyGameState_}, introAnimationController{introAnimationController_}, outroAnimationController{outroAnimationController_}, menuRpcManager{menuRpcManager_}, gameplayRpcManager{gameplayRpcManager_}, stateChangedEvent{stateChangedEvent_}, startTime{startTime_}, localPlayerSyncStartState{localPlayerSyncStartState_}, state{state_}, otherPlayersCompletionResults{otherPlayersCompletionResults_}, localPlayerResults{localPlayerResults_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kSongTimeToSongStartSyncTimeOffset
    static constexpr const float kSongTimeToSongStartSyncTimeOffset = -0.6;
    // Get static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
    static float _get_kSongTimeToSongStartSyncTimeOffset();
    // Set static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
    static void _set_kSongTimeToSongStartSyncTimeOffset(float value);
    // static field const value: static private System.Single kMinAnimationDurationPercentage
    static constexpr const float kMinAnimationDurationPercentage = 0.75;
    // Get static field: static private System.Single kMinAnimationDurationPercentage
    static float _get_kMinAnimationDurationPercentage();
    // Set static field: static private System.Single kMinAnimationDurationPercentage
    static void _set_kMinAnimationDurationPercentage(float value);
    // public MultiplayerController/State get_state()
    // Offset: 0xFAE26C
    GlobalNamespace::MultiplayerController::State get_state();
    // public System.Void add_stateChangedEvent(System.Action`1<MultiplayerController/State> value)
    // Offset: 0xFAE274
    void add_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value);
    // public System.Void remove_stateChangedEvent(System.Action`1<MultiplayerController/State> value)
    // Offset: 0xFAE318
    void remove_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value);
    // protected System.Void Start()
    // Offset: 0xFAE3BC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xFAE8A8
    void OnDestroy();
    // private System.Void HandleSetMultiplayerGameState(System.String userId, MultiplayerGameState gameState)
    // Offset: 0xFAEE90
    void HandleSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState);
    // private System.Void StartSceneLoadSync()
    // Offset: 0xFAE788
    void StartSceneLoadSync();
    // private System.Collections.IEnumerator PerformSongStartSync(MultiplayerPlayerStartState localPlayerSyncState)
    // Offset: 0xFAF08C
    System::Collections::IEnumerator* PerformSongStartSync(GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncState);
    // private System.Void HandleDidSwitchPlayerToInactive()
    // Offset: 0xFAF144
    void HandleDidSwitchPlayerToInactive();
    // private System.Void HandleSceneStartSyncControllerSyncStartDidSuccess()
    // Offset: 0xFAF3BC
    void HandleSceneStartSyncControllerSyncStartDidSuccess();
    // private System.Void HandleSceneStartSyncControllerSyncStartDidReceiveTooLate()
    // Offset: 0xFAF3EC
    void HandleSceneStartSyncControllerSyncStartDidReceiveTooLate();
    // private System.Void HandleSceneStartSyncControllerSyncStartDidFail()
    // Offset: 0xFAF41C
    void HandleSceneStartSyncControllerSyncStartDidFail();
    // private System.Void HandleSongStartSyncControllerSyncStartSuccess(System.Single introAnimationStartSyncTime)
    // Offset: 0xFAF43C
    void HandleSongStartSyncControllerSyncStartSuccess(float introAnimationStartSyncTime);
    // private System.Void HandleSongStartSyncControllerSyncResume(System.Single introAnimationStartSyncTime)
    // Offset: 0xFB02E8
    void HandleSongStartSyncControllerSyncResume(float introAnimationStartSyncTime);
    // private System.Void HandleSongStartSyncControllerSyncStartFailed()
    // Offset: 0xFB0758
    void HandleSongStartSyncControllerSyncStartFailed();
    // private System.Void StartGameplay(System.Single introAnimationStartSyncTime)
    // Offset: 0xFAFA88
    void StartGameplay(float introAnimationStartSyncTime);
    // private System.Void HandleAllResultsCollected(LevelCompletionResults localPlayerResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> otherPlayerResults)
    // Offset: 0xFB0778
    void HandleAllResultsCollected(GlobalNamespace::LevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* otherPlayerResults);
    // private System.Void HandleOutroAnimationDidFinish()
    // Offset: 0xFB0AA0
    void HandleOutroAnimationDidFinish();
    // private System.Void HandleRpcReturnToMenu(System.String userId)
    // Offset: 0xFB0AD4
    void HandleRpcReturnToMenu(::Il2CppString* userId);
    // private System.Void HandleDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0xFB0B84
    void HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void ChangeState(MultiplayerController/State newState)
    // Offset: 0xFAE710
    void ChangeState(GlobalNamespace::MultiplayerController::State newState);
    // private System.Single GetCurrentSongTime(System.Single songStartSyncTime)
    // Offset: 0xFAF2F4
    float GetCurrentSongTime(float songStartSyncTime);
    // private System.Single GetSongStartSyncTime(System.Single introAnimationStartSyncTime)
    // Offset: 0xFAF2B8
    float GetSongStartSyncTime(float introAnimationStartSyncTime);
    // public System.Void .ctor()
    // Offset: 0xFB0C34
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerController*, creationType>()));
    }
  }; // MultiplayerController
  static check_size<sizeof(MultiplayerController), 168 + sizeof(GlobalNamespace::LevelCompletionResults*)> __GlobalNamespace_MultiplayerControllerSizeCheck;
  static_assert(sizeof(MultiplayerController) == 0xB0);
}
#pragma pack(pop)
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerController*, "", "MultiplayerController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerController::State, "", "MultiplayerController/State");
