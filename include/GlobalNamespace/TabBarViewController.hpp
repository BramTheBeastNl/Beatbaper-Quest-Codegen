// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TextSegmentedControl
  class TextSegmentedControl;
  // Forward declaring type: SegmentedControl
  class SegmentedControl;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: ContentSizeFitter
  class ContentSizeFitter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: TabBarViewController
  class TabBarViewController : public HMUI::ViewController {
    public:
    // Nested type: GlobalNamespace::TabBarViewController::TabBarItem
    class TabBarItem;
    // private HMUI.TextSegmentedControl _segmentedControll
    // Size: 0x8
    // Offset: 0x70
    HMUI::TextSegmentedControl* segmentedControll;
    // Field size check
    static_assert(sizeof(HMUI::TextSegmentedControl*) == 0x8);
    // private UnityEngine.UI.ContentSizeFitter _contentSizeFilter
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::ContentSizeFitter* contentSizeFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::ContentSizeFitter*) == 0x8);
    // private System.String[] _labels
    // Size: 0x8
    // Offset: 0x80
    ::Array<::Il2CppString*>* labels;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private TabBarViewController/TabBarItem[] _items
    // Size: 0x8
    // Offset: 0x88
    ::Array<GlobalNamespace::TabBarViewController::TabBarItem*>* items;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TabBarViewController::TabBarItem*>*) == 0x8);
    // private System.Boolean _shouldReloadData
    // Size: 0x1
    // Offset: 0x90
    bool shouldReloadData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TabBarViewController
    TabBarViewController(HMUI::TextSegmentedControl* segmentedControll_ = {}, UnityEngine::UI::ContentSizeFitter* contentSizeFilter_ = {}, ::Array<::Il2CppString*>* labels_ = {}, ::Array<GlobalNamespace::TabBarViewController::TabBarItem*>* items_ = {}, bool shouldReloadData_ = {}) noexcept : segmentedControll{segmentedControll_}, contentSizeFilter{contentSizeFilter_}, labels{labels_}, items{items_}, shouldReloadData{shouldReloadData_} {}
    // public System.Void set_sizeToFit(System.Boolean value)
    // Offset: 0x11660F4
    void set_sizeToFit(bool value);
    // public System.Boolean get_sizeToFit()
    // Offset: 0x1166114
    bool get_sizeToFit();
    // public System.Int32 get_selectedCellNumber()
    // Offset: 0x1166130
    int get_selectedCellNumber();
    // public System.Void Setup(TabBarViewController/TabBarItem[] items)
    // Offset: 0x116614C
    void Setup(::Array<GlobalNamespace::TabBarViewController::TabBarItem*>* items);
    // public System.Void SelectItem(System.Int32 index)
    // Offset: 0x1166288
    void SelectItem(int index);
    // public System.Void Clear()
    // Offset: 0x11662A4
    void Clear();
    // private System.Void HandleDidSelectCell(HMUI.SegmentedControl segmentedControl, System.Int32 cellNumber)
    // Offset: 0x11664B4
    void HandleDidSelectCell(HMUI::SegmentedControl* segmentedControl, int cellNumber);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1166300
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void OnDestroy()
    // Offset: 0x11663D0
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x1166508
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TabBarViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TabBarViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TabBarViewController*, creationType>()));
    }
  }; // TabBarViewController
  #pragma pack(pop)
  static check_size<sizeof(TabBarViewController), 144 + sizeof(bool)> __GlobalNamespace_TabBarViewControllerSizeCheck;
  static_assert(sizeof(TabBarViewController) == 0x91);
  // Writing MetadataGetter for method: TabBarViewController::set_sizeToFit
  // Il2CppName: set_sizeToFit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)(bool)>(&TabBarViewController::set_sizeToFit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "set_sizeToFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::get_sizeToFit
  // Il2CppName: get_sizeToFit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TabBarViewController::*)()>(&TabBarViewController::get_sizeToFit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "get_sizeToFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::get_selectedCellNumber
  // Il2CppName: get_selectedCellNumber
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TabBarViewController::*)()>(&TabBarViewController::get_selectedCellNumber)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "get_selectedCellNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::Setup
  // Il2CppName: Setup
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)(::Array<GlobalNamespace::TabBarViewController::TabBarItem*>*)>(&TabBarViewController::Setup)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::TabBarViewController::TabBarItem*>*>()});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::SelectItem
  // Il2CppName: SelectItem
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)(int)>(&TabBarViewController::SelectItem)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "SelectItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::Clear
  // Il2CppName: Clear
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)()>(&TabBarViewController::Clear)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::HandleDidSelectCell
  // Il2CppName: HandleDidSelectCell
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)(HMUI::SegmentedControl*, int)>(&TabBarViewController::HandleDidSelectCell)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "HandleDidSelectCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SegmentedControl*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::DidActivate
  // Il2CppName: DidActivate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)(bool, bool, bool)>(&TabBarViewController::DidActivate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::OnDestroy
  // Il2CppName: OnDestroy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)()>(&TabBarViewController::OnDestroy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TabBarViewController::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)()>(&TabBarViewController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TabBarViewController::*)()>(&TabBarViewController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TabBarViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TabBarViewController*, "", "TabBarViewController");
