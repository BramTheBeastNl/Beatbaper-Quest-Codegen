// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FixedUpdateSmoothValue`1<T>
  template<typename T>
  class FixedUpdateSmoothValue_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::FixedUpdateSmoothValue_1, "", "FixedUpdateSmoothValue`1");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: FixedUpdateSmoothValue`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class FixedUpdateSmoothValue_1 : public ::Il2CppObject {
    public:
    public:
    // private T _currentSmoothedValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T currentSmoothedValue;
    // private T _prevSmoothedValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T prevSmoothedValue;
    // private readonly System.Single _smooth
    // Size: 0x4
    // Offset: 0x0
    float smooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private T _currentSmoothedValue
    [[deprecated("Use field access instead!")]] T& dyn__currentSmoothedValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::dyn__currentSmoothedValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentSmoothedValue"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _prevSmoothedValue
    [[deprecated("Use field access instead!")]] T& dyn__prevSmoothedValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::dyn__prevSmoothedValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_prevSmoothedValue"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Single _smooth
    [[deprecated("Use field access instead!")]] float& dyn__smooth() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::dyn__smooth");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_smooth"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // protected System.Void .ctor(System.Single smooth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FixedUpdateSmoothValue_1<T>* New_ctor(float smooth) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FixedUpdateSmoothValue_1<T>*, creationType>(smooth)));
    }
    // public System.Void SetStartValue(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetStartValue(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::SetStartValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetStartValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void FixedUpdate(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FixedUpdate(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::FixedUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public T GetValue(System.Single interpolationFactor)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T GetValue(float interpolationFactor) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interpolationFactor)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, interpolationFactor);
    }
    // protected T Interpolate(T value0, T value1, System.Single t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Interpolate(T value0, T value1, float t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FixedUpdateSmoothValue_1::Interpolate");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0), ::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(t)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method, value0, value1, t);
    }
  }; // FixedUpdateSmoothValue`1
  // Could not write size check! Type: FixedUpdateSmoothValue`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
