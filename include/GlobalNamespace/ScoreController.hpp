// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: ICutScoreBufferDidFinishEvent
#include "GlobalNamespace/ICutScoreBufferDidFinishEvent.hpp"
// Including type: CutScoreBuffer
#include "GlobalNamespace/CutScoreBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayModifiersModelSO
  class GameplayModifiersModelSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: PlayerHeadAndObstacleInteraction
  class PlayerHeadAndObstacleInteraction;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: IGameEnergyCounter
  class IGameEnergyCounter;
  // Forward declaring type: NoteWasCutDelegate
  class NoteWasCutDelegate;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: GameplayModifierParamsSO
  class GameplayModifierParamsSO;
  // Forward declaring type: MemoryPoolContainer`1<T>
  template<typename T>
  class MemoryPoolContainer_1;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: ScoreController
  class ScoreController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IScoreController, public GlobalNamespace::ICutScoreBufferDidFinishEvent*/ {
    public:
    // [TooltipAttribute] Offset: 0xE1F8EC
    // private System.Int32 _feverModeRequiredCombo
    // Size: 0x4
    // Offset: 0x18
    int feverModeRequiredCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _feverModeDuration
    // Size: 0x4
    // Offset: 0x1C
    float feverModeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GameplayModifiersModelSO _gameplayModifiersModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiersModelSO*) == 0x8);
    // [InjectAttribute] Offset: 0xE1F958
    // private readonly GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers*) == 0x8);
    // [InjectAttribute] Offset: 0xE1F968
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xE1F978
    // private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeadAndObstacleInteraction*) == 0x8);
    // [InjectAttribute] Offset: 0xE1F988
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xE1F998
    // private readonly IGameEnergyCounter _gameEnergyCounter
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::IGameEnergyCounter* gameEnergyCounter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IGameEnergyCounter*) == 0x8);
    // [InjectAttribute] Offset: 0xE1F9A8
    // private readonly CutScoreBuffer/Pool _cutScoreBufferPool
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::CutScoreBuffer::Pool* cutScoreBufferPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CutScoreBuffer::Pool*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1F9B8
    // private NoteWasCutDelegate noteWasCutEvent
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::NoteWasCutDelegate* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteWasCutDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1F9C8
    // private System.Action`2<NoteData,System.Int32> noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_2<GlobalNamespace::NoteData*, int>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::NoteData*, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1F9D8
    // private System.Action`2<System.Int32,System.Int32> scoreDidChangeEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_2<int, int>* scoreDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1F9E8
    // private System.Action`2<System.Int32,System.Int32> immediateMaxPossibleScoreDidChangeEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action_2<int, int>* immediateMaxPossibleScoreDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1F9F8
    // private System.Action`2<System.Int32,System.Single> multiplierDidChangeEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action_2<int, float>* multiplierDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1FA08
    // private System.Action`1<System.Int32> comboDidChangeEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action_1<int>* comboDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1FA18
    // private System.Action`1<System.Single> feverModeChargeProgressDidChangeEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<float>* feverModeChargeProgressDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1FA28
    // private System.Action feverDidStartEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* feverDidStartEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1FA38
    // private System.Action feverDidFinishEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action* feverDidFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE1FA48
    // private System.Action comboBreakingEventHappenedEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action* comboBreakingEventHappenedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Int32 _baseRawScore
    // Size: 0x4
    // Offset: 0xA8
    int baseRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevFrameRawScore
    // Size: 0x4
    // Offset: 0xAC
    int prevFrameRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplier
    // Size: 0x4
    // Offset: 0xB0
    int multiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplierIncreaseProgress
    // Size: 0x4
    // Offset: 0xB4
    int multiplierIncreaseProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplierIncreaseMaxProgress
    // Size: 0x4
    // Offset: 0xB8
    int multiplierIncreaseMaxProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _combo
    // Size: 0x4
    // Offset: 0xBC
    int combo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxCombo
    // Size: 0x4
    // Offset: 0xC0
    int maxCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _feverIsActive
    // Size: 0x1
    // Offset: 0xC4
    bool feverIsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: feverIsActive and: feverStartTime
    char __padding26[0x3] = {};
    // private System.Single _feverStartTime
    // Size: 0x4
    // Offset: 0xC8
    float feverStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _feverCombo
    // Size: 0x4
    // Offset: 0xCC
    int feverCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _playerHeadWasInObstacle
    // Size: 0x1
    // Offset: 0xD0
    bool playerHeadWasInObstacle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playerHeadWasInObstacle and: immediateMaxPossibleRawScore
    char __padding29[0x3] = {};
    // private System.Int32 _immediateMaxPossibleRawScore
    // Size: 0x4
    // Offset: 0xD4
    int immediateMaxPossibleRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _cutOrMissedNotes
    // Size: 0x4
    // Offset: 0xD8
    int cutOrMissedNotes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _gameplayModifiersScoreMultiplier
    // Size: 0x4
    // Offset: 0xDC
    float gameplayModifiersScoreMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _prevFrameGameplayModifiersScoreMultiplier
    // Size: 0x4
    // Offset: 0xE0
    float prevFrameGameplayModifiersScoreMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: prevFrameGameplayModifiersScoreMultiplier and: gameplayModifierParams
    char __padding33[0x4] = {};
    // private System.Collections.Generic.List`1<GameplayModifierParamsSO> _gameplayModifierParams
    // Size: 0x8
    // Offset: 0xE8
    System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>* gameplayModifierParams;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>*) == 0x8);
    // private MemoryPoolContainer`1<CutScoreBuffer> _cutScoreBufferMemoryPoolContainer
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>* cutScoreBufferMemoryPoolContainer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>*) == 0x8);
    // Creating value type constructor for type: ScoreController
    ScoreController(int feverModeRequiredCombo_ = {}, float feverModeDuration_ = {}, GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel_ = {}, GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, GlobalNamespace::IGameEnergyCounter* gameEnergyCounter_ = {}, GlobalNamespace::CutScoreBuffer::Pool* cutScoreBufferPool_ = {}, GlobalNamespace::NoteWasCutDelegate* noteWasCutEvent_ = {}, System::Action_2<GlobalNamespace::NoteData*, int>* noteWasMissedEvent_ = {}, System::Action_2<int, int>* scoreDidChangeEvent_ = {}, System::Action_2<int, int>* immediateMaxPossibleScoreDidChangeEvent_ = {}, System::Action_2<int, float>* multiplierDidChangeEvent_ = {}, System::Action_1<int>* comboDidChangeEvent_ = {}, System::Action_1<float>* feverModeChargeProgressDidChangeEvent_ = {}, System::Action* feverDidStartEvent_ = {}, System::Action* feverDidFinishEvent_ = {}, System::Action* comboBreakingEventHappenedEvent_ = {}, int baseRawScore_ = {}, int prevFrameRawScore_ = {}, int multiplier_ = {}, int multiplierIncreaseProgress_ = {}, int multiplierIncreaseMaxProgress_ = {}, int combo_ = {}, int maxCombo_ = {}, bool feverIsActive_ = {}, float feverStartTime_ = {}, int feverCombo_ = {}, bool playerHeadWasInObstacle_ = {}, int immediateMaxPossibleRawScore_ = {}, int cutOrMissedNotes_ = {}, float gameplayModifiersScoreMultiplier_ = {}, float prevFrameGameplayModifiersScoreMultiplier_ = {}, System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>* gameplayModifierParams_ = {}, GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>* cutScoreBufferMemoryPoolContainer_ = {}) noexcept : feverModeRequiredCombo{feverModeRequiredCombo_}, feverModeDuration{feverModeDuration_}, gameplayModifiersModel{gameplayModifiersModel_}, gameplayModifiers{gameplayModifiers_}, beatmapObjectManager{beatmapObjectManager_}, playerHeadAndObstacleInteraction{playerHeadAndObstacleInteraction_}, audioTimeSyncController{audioTimeSyncController_}, gameEnergyCounter{gameEnergyCounter_}, cutScoreBufferPool{cutScoreBufferPool_}, noteWasCutEvent{noteWasCutEvent_}, noteWasMissedEvent{noteWasMissedEvent_}, scoreDidChangeEvent{scoreDidChangeEvent_}, immediateMaxPossibleScoreDidChangeEvent{immediateMaxPossibleScoreDidChangeEvent_}, multiplierDidChangeEvent{multiplierDidChangeEvent_}, comboDidChangeEvent{comboDidChangeEvent_}, feverModeChargeProgressDidChangeEvent{feverModeChargeProgressDidChangeEvent_}, feverDidStartEvent{feverDidStartEvent_}, feverDidFinishEvent{feverDidFinishEvent_}, comboBreakingEventHappenedEvent{comboBreakingEventHappenedEvent_}, baseRawScore{baseRawScore_}, prevFrameRawScore{prevFrameRawScore_}, multiplier{multiplier_}, multiplierIncreaseProgress{multiplierIncreaseProgress_}, multiplierIncreaseMaxProgress{multiplierIncreaseMaxProgress_}, combo{combo_}, maxCombo{maxCombo_}, feverIsActive{feverIsActive_}, feverStartTime{feverStartTime_}, feverCombo{feverCombo_}, playerHeadWasInObstacle{playerHeadWasInObstacle_}, immediateMaxPossibleRawScore{immediateMaxPossibleRawScore_}, cutOrMissedNotes{cutOrMissedNotes_}, gameplayModifiersScoreMultiplier{gameplayModifiersScoreMultiplier_}, prevFrameGameplayModifiersScoreMultiplier{prevFrameGameplayModifiersScoreMultiplier_}, gameplayModifierParams{gameplayModifierParams_}, cutScoreBufferMemoryPoolContainer{cutScoreBufferMemoryPoolContainer_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IScoreController
    operator GlobalNamespace::IScoreController() noexcept {
      return *reinterpret_cast<GlobalNamespace::IScoreController*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ICutScoreBufferDidFinishEvent
    operator GlobalNamespace::ICutScoreBufferDidFinishEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::ICutScoreBufferDidFinishEvent*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_noteWasCutEvent(NoteWasCutDelegate value)
    // Offset: 0x10D5E24
    void add_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value);
    // public System.Void remove_noteWasCutEvent(NoteWasCutDelegate value)
    // Offset: 0x10D5EC8
    void remove_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value);
    // public System.Void add_noteWasMissedEvent(System.Action`2<NoteData,System.Int32> value)
    // Offset: 0x10D5F6C
    void add_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`2<NoteData,System.Int32> value)
    // Offset: 0x10D6010
    void remove_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value);
    // public System.Void add_scoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x10D60B4
    void add_scoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void remove_scoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x10D6158
    void remove_scoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void add_immediateMaxPossibleScoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x10D61FC
    void add_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void remove_immediateMaxPossibleScoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x10D62A0
    void remove_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void add_multiplierDidChangeEvent(System.Action`2<System.Int32,System.Single> value)
    // Offset: 0x10D6344
    void add_multiplierDidChangeEvent(System::Action_2<int, float>* value);
    // public System.Void remove_multiplierDidChangeEvent(System.Action`2<System.Int32,System.Single> value)
    // Offset: 0x10D63E8
    void remove_multiplierDidChangeEvent(System::Action_2<int, float>* value);
    // public System.Void add_comboDidChangeEvent(System.Action`1<System.Int32> value)
    // Offset: 0x10D648C
    void add_comboDidChangeEvent(System::Action_1<int>* value);
    // public System.Void remove_comboDidChangeEvent(System.Action`1<System.Int32> value)
    // Offset: 0x10D6530
    void remove_comboDidChangeEvent(System::Action_1<int>* value);
    // public System.Void add_feverModeChargeProgressDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x10D65D4
    void add_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_feverModeChargeProgressDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x10D6678
    void remove_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value);
    // public System.Void add_feverDidStartEvent(System.Action value)
    // Offset: 0x10D671C
    void add_feverDidStartEvent(System::Action* value);
    // public System.Void remove_feverDidStartEvent(System.Action value)
    // Offset: 0x10D67C0
    void remove_feverDidStartEvent(System::Action* value);
    // public System.Void add_feverDidFinishEvent(System.Action value)
    // Offset: 0x10D6864
    void add_feverDidFinishEvent(System::Action* value);
    // public System.Void remove_feverDidFinishEvent(System.Action value)
    // Offset: 0x10D6908
    void remove_feverDidFinishEvent(System::Action* value);
    // public System.Void add_comboBreakingEventHappenedEvent(System.Action value)
    // Offset: 0x10D69AC
    void add_comboBreakingEventHappenedEvent(System::Action* value);
    // public System.Void remove_comboBreakingEventHappenedEvent(System.Action value)
    // Offset: 0x10D6A50
    void remove_comboBreakingEventHappenedEvent(System::Action* value);
    // public System.Int32 get_prevFrameRawScore()
    // Offset: 0x10D6AF4
    int get_prevFrameRawScore();
    // public System.Int32 get_prevFrameModifiedScore()
    // Offset: 0x10D6AFC
    int get_prevFrameModifiedScore();
    // public System.Int32 get_maxCombo()
    // Offset: 0x10D6B84
    int get_maxCombo();
    // public System.Int32 get_multiplierWithFever()
    // Offset: 0x10D6B8C
    int get_multiplierWithFever();
    // public System.Boolean get_feverModeActive()
    // Offset: 0x10D6BA8
    bool get_feverModeActive();
    // public System.Single get_feverModeDrainProgress()
    // Offset: 0x10D6BB0
    float get_feverModeDrainProgress();
    // public System.Single get_feverModeChargeProgress()
    // Offset: 0x10D6C44
    float get_feverModeChargeProgress();
    // public System.Int32 get_immediateMaxPossibleRawScore()
    // Offset: 0x10D6C5C
    int get_immediateMaxPossibleRawScore();
    // public System.Single get_gameplayModifiersScoreMultiplier()
    // Offset: 0x10D6C64
    float get_gameplayModifiersScoreMultiplier();
    // public System.Void SetEnabled(System.Boolean enabled)
    // Offset: 0x10D6C6C
    void SetEnabled(bool enabled);
    // protected System.Void Start()
    // Offset: 0x10D6C78
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x10D6E44
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x10D6F2C
    void Update();
    // protected System.Void LateUpdate()
    // Offset: 0x10D71C4
    void LateUpdate();
    // private System.Void LoseMultiplier(out System.Boolean comboChanged, out System.Boolean multiplierChanged)
    // Offset: 0x10D7070
    void LoseMultiplier(bool& comboChanged, bool& multiplierChanged);
    // private System.Void NotifyForChange(System.Boolean comboChanged, System.Boolean multiplierChanged)
    // Offset: 0x10D70E4
    void NotifyForChange(bool comboChanged, bool multiplierChanged);
    // private System.Void HandleNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x10D74DC
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0x10D76E8
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleCutScoreBufferDidFinish(CutScoreBuffer cutScoreBuffer)
    // Offset: 0x10D77B4
    void HandleCutScoreBufferDidFinish(GlobalNamespace::CutScoreBuffer* cutScoreBuffer);
    // public System.Void .ctor()
    // Offset: 0x10D78B4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScoreController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScoreController*, creationType>()));
    }
  }; // ScoreController
  #pragma pack(pop)
  static check_size<sizeof(ScoreController), 240 + sizeof(GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>*)> __GlobalNamespace_ScoreControllerSizeCheck;
  static_assert(sizeof(ScoreController) == 0xF8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ScoreController*, "", "ScoreController");
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_scoreDidChangeEvent
// Il2CppName: add_scoreDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_scoreDidChangeEvent
// Il2CppName: remove_scoreDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: add_immediateMaxPossibleScoreDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: remove_immediateMaxPossibleScoreDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_multiplierDidChangeEvent
// Il2CppName: add_multiplierDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_multiplierDidChangeEvent
// Il2CppName: remove_multiplierDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_comboDidChangeEvent
// Il2CppName: add_comboDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_comboDidChangeEvent
// Il2CppName: remove_comboDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_feverModeChargeProgressDidChangeEvent
// Il2CppName: add_feverModeChargeProgressDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_feverModeChargeProgressDidChangeEvent
// Il2CppName: remove_feverModeChargeProgressDidChangeEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_feverDidStartEvent
// Il2CppName: add_feverDidStartEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_feverDidStartEvent
// Il2CppName: remove_feverDidStartEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_feverDidFinishEvent
// Il2CppName: add_feverDidFinishEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_feverDidFinishEvent
// Il2CppName: remove_feverDidFinishEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_comboBreakingEventHappenedEvent
// Il2CppName: add_comboBreakingEventHappenedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_comboBreakingEventHappenedEvent
// Il2CppName: remove_comboBreakingEventHappenedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_prevFrameRawScore
// Il2CppName: get_prevFrameRawScore
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_prevFrameModifiedScore
// Il2CppName: get_prevFrameModifiedScore
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_maxCombo
// Il2CppName: get_maxCombo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_multiplierWithFever
// Il2CppName: get_multiplierWithFever
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_feverModeActive
// Il2CppName: get_feverModeActive
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_feverModeDrainProgress
// Il2CppName: get_feverModeDrainProgress
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_feverModeChargeProgress
// Il2CppName: get_feverModeChargeProgress
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_immediateMaxPossibleRawScore
// Il2CppName: get_immediateMaxPossibleRawScore
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_gameplayModifiersScoreMultiplier
// Il2CppName: get_gameplayModifiersScoreMultiplier
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::SetEnabled
// Il2CppName: SetEnabled
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::Start
// Il2CppName: Start
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::OnDestroy
// Il2CppName: OnDestroy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::Update
// Il2CppName: Update
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::LateUpdate
// Il2CppName: LateUpdate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::LoseMultiplier
// Il2CppName: LoseMultiplier
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::NotifyForChange
// Il2CppName: NotifyForChange
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::HandleNoteWasMissed
// Il2CppName: HandleNoteWasMissed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::HandleCutScoreBufferDidFinish
// Il2CppName: HandleCutScoreBufferDidFinish
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
