// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayModifiersModelSO
  class GameplayModifiersModelSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: PlayerHeadAndObstacleInteraction
  class PlayerHeadAndObstacleInteraction;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: CutScoreBuffer
  class CutScoreBuffer;
  // Forward declaring type: NoteController
  class NoteController;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xDC
  // Autogenerated type: ScoreController
  // [] Offset: FFFFFFFF
  class ScoreController : public UnityEngine::MonoBehaviour {
    public:
    // [TooltipAttribute] Offset: 0xDCB120
    // private System.Int32 _feverModeRequiredCombo
    // Size: 0x4
    // Offset: 0x18
    int feverModeRequiredCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _feverModeDuration
    // Size: 0x4
    // Offset: 0x1C
    float feverModeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GameplayModifiersModelSO _gameplayModifiersModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiersModelSO*) == 0x8);
    // [InjectAttribute] Offset: 0xDCB18C
    // private readonly GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers*) == 0x8);
    // [InjectAttribute] Offset: 0xDCB19C
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xDCB1AC
    // private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeadAndObstacleInteraction*) == 0x8);
    // [InjectAttribute] Offset: 0xDCB1BC
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB1CC
    // private System.Action`3<NoteData,NoteCutInfo,System.Int32> noteWasCutEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_3<GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo*, int>* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo*, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB1DC
    // private System.Action`2<NoteData,System.Int32> noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_2<GlobalNamespace::NoteData*, int>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::NoteData*, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB1EC
    // private System.Action`2<System.Int32,System.Int32> scoreDidChangeEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_2<int, int>* scoreDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB1FC
    // private System.Action`2<System.Int32,System.Int32> immediateMaxPossibleScoreDidChangeEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_2<int, int>* immediateMaxPossibleScoreDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB20C
    // private System.Action`2<System.Int32,System.Single> multiplierDidChangeEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_2<int, float>* multiplierDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB21C
    // private System.Action`1<System.Int32> comboDidChangeEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action_1<int>* comboDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB22C
    // private System.Action`1<System.Single> feverModeChargeProgressDidChangeEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action_1<float>* feverModeChargeProgressDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB23C
    // private System.Action feverDidStartEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action* feverDidStartEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB24C
    // private System.Action feverDidFinishEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action* feverDidFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDCB25C
    // private System.Action comboBreakingEventHappenedEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* comboBreakingEventHappenedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Int32 _baseRawScore
    // Size: 0x4
    // Offset: 0x98
    int baseRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevFrameRawScore
    // Size: 0x4
    // Offset: 0x9C
    int prevFrameRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplier
    // Size: 0x4
    // Offset: 0xA0
    int multiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplierIncreaseProgress
    // Size: 0x4
    // Offset: 0xA4
    int multiplierIncreaseProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplierIncreaseMaxProgress
    // Size: 0x4
    // Offset: 0xA8
    int multiplierIncreaseMaxProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _combo
    // Size: 0x4
    // Offset: 0xAC
    int combo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxCombo
    // Size: 0x4
    // Offset: 0xB0
    int maxCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _feverIsActive
    // Size: 0x1
    // Offset: 0xB4
    bool feverIsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: feverIsActive and: feverStartTime
    char __padding24[0x3] = {};
    // private System.Single _feverStartTime
    // Size: 0x4
    // Offset: 0xB8
    float feverStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _feverCombo
    // Size: 0x4
    // Offset: 0xBC
    int feverCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _playerHeadWasInObstacle
    // Size: 0x1
    // Offset: 0xC0
    bool playerHeadWasInObstacle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playerHeadWasInObstacle and: immediateMaxPossibleRawScore
    char __padding27[0x3] = {};
    // private System.Int32 _immediateMaxPossibleRawScore
    // Size: 0x4
    // Offset: 0xC4
    int immediateMaxPossibleRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _cutOrMissedNotes
    // Size: 0x4
    // Offset: 0xC8
    int cutOrMissedNotes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cutOrMissedNotes and: cutScoreBuffers
    char __padding29[0x4] = {};
    // private readonly System.Collections.Generic.List`1<CutScoreBuffer> _cutScoreBuffers
    // Size: 0x8
    // Offset: 0xD0
    System::Collections::Generic::List_1<GlobalNamespace::CutScoreBuffer*>* cutScoreBuffers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::CutScoreBuffer*>*) == 0x8);
    // private System.Single _gameplayModifiersScoreMultiplier
    // Size: 0x4
    // Offset: 0xD8
    float gameplayModifiersScoreMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: ScoreController
    ScoreController(int feverModeRequiredCombo_ = {}, float feverModeDuration_ = {}, GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel_ = {}, GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, System::Action_3<GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo*, int>* noteWasCutEvent_ = {}, System::Action_2<GlobalNamespace::NoteData*, int>* noteWasMissedEvent_ = {}, System::Action_2<int, int>* scoreDidChangeEvent_ = {}, System::Action_2<int, int>* immediateMaxPossibleScoreDidChangeEvent_ = {}, System::Action_2<int, float>* multiplierDidChangeEvent_ = {}, System::Action_1<int>* comboDidChangeEvent_ = {}, System::Action_1<float>* feverModeChargeProgressDidChangeEvent_ = {}, System::Action* feverDidStartEvent_ = {}, System::Action* feverDidFinishEvent_ = {}, System::Action* comboBreakingEventHappenedEvent_ = {}, int baseRawScore_ = {}, int prevFrameRawScore_ = {}, int multiplier_ = {}, int multiplierIncreaseProgress_ = {}, int multiplierIncreaseMaxProgress_ = {}, int combo_ = {}, int maxCombo_ = {}, bool feverIsActive_ = {}, float feverStartTime_ = {}, int feverCombo_ = {}, bool playerHeadWasInObstacle_ = {}, int immediateMaxPossibleRawScore_ = {}, int cutOrMissedNotes_ = {}, System::Collections::Generic::List_1<GlobalNamespace::CutScoreBuffer*>* cutScoreBuffers_ = {}, float gameplayModifiersScoreMultiplier_ = {}) noexcept : feverModeRequiredCombo{feverModeRequiredCombo_}, feverModeDuration{feverModeDuration_}, gameplayModifiersModel{gameplayModifiersModel_}, gameplayModifiers{gameplayModifiers_}, beatmapObjectManager{beatmapObjectManager_}, playerHeadAndObstacleInteraction{playerHeadAndObstacleInteraction_}, audioTimeSyncController{audioTimeSyncController_}, noteWasCutEvent{noteWasCutEvent_}, noteWasMissedEvent{noteWasMissedEvent_}, scoreDidChangeEvent{scoreDidChangeEvent_}, immediateMaxPossibleScoreDidChangeEvent{immediateMaxPossibleScoreDidChangeEvent_}, multiplierDidChangeEvent{multiplierDidChangeEvent_}, comboDidChangeEvent{comboDidChangeEvent_}, feverModeChargeProgressDidChangeEvent{feverModeChargeProgressDidChangeEvent_}, feverDidStartEvent{feverDidStartEvent_}, feverDidFinishEvent{feverDidFinishEvent_}, comboBreakingEventHappenedEvent{comboBreakingEventHappenedEvent_}, baseRawScore{baseRawScore_}, prevFrameRawScore{prevFrameRawScore_}, multiplier{multiplier_}, multiplierIncreaseProgress{multiplierIncreaseProgress_}, multiplierIncreaseMaxProgress{multiplierIncreaseMaxProgress_}, combo{combo_}, maxCombo{maxCombo_}, feverIsActive{feverIsActive_}, feverStartTime{feverStartTime_}, feverCombo{feverCombo_}, playerHeadWasInObstacle{playerHeadWasInObstacle_}, immediateMaxPossibleRawScore{immediateMaxPossibleRawScore_}, cutOrMissedNotes{cutOrMissedNotes_}, cutScoreBuffers{cutScoreBuffers_}, gameplayModifiersScoreMultiplier{gameplayModifiersScoreMultiplier_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_noteWasCutEvent(System.Action`3<NoteData,NoteCutInfo,System.Int32> value)
    // Offset: 0xFC6768
    void add_noteWasCutEvent(System::Action_3<GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo*, int>* value);
    // public System.Void remove_noteWasCutEvent(System.Action`3<NoteData,NoteCutInfo,System.Int32> value)
    // Offset: 0xFC680C
    void remove_noteWasCutEvent(System::Action_3<GlobalNamespace::NoteData*, GlobalNamespace::NoteCutInfo*, int>* value);
    // public System.Void add_noteWasMissedEvent(System.Action`2<NoteData,System.Int32> value)
    // Offset: 0xFC68B0
    void add_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`2<NoteData,System.Int32> value)
    // Offset: 0xFC6954
    void remove_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value);
    // public System.Void add_scoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0xFC69F8
    void add_scoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void remove_scoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0xFC6A9C
    void remove_scoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void add_immediateMaxPossibleScoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0xFC6B40
    void add_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void remove_immediateMaxPossibleScoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0xFC6BE4
    void remove_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void add_multiplierDidChangeEvent(System.Action`2<System.Int32,System.Single> value)
    // Offset: 0xFC6C88
    void add_multiplierDidChangeEvent(System::Action_2<int, float>* value);
    // public System.Void remove_multiplierDidChangeEvent(System.Action`2<System.Int32,System.Single> value)
    // Offset: 0xFC6D2C
    void remove_multiplierDidChangeEvent(System::Action_2<int, float>* value);
    // public System.Void add_comboDidChangeEvent(System.Action`1<System.Int32> value)
    // Offset: 0xFC6DD0
    void add_comboDidChangeEvent(System::Action_1<int>* value);
    // public System.Void remove_comboDidChangeEvent(System.Action`1<System.Int32> value)
    // Offset: 0xFC6E74
    void remove_comboDidChangeEvent(System::Action_1<int>* value);
    // public System.Void add_feverModeChargeProgressDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0xFC6F18
    void add_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_feverModeChargeProgressDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0xFC6FBC
    void remove_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value);
    // public System.Void add_feverDidStartEvent(System.Action value)
    // Offset: 0xFC7060
    void add_feverDidStartEvent(System::Action* value);
    // public System.Void remove_feverDidStartEvent(System.Action value)
    // Offset: 0xFC7104
    void remove_feverDidStartEvent(System::Action* value);
    // public System.Void add_feverDidFinishEvent(System.Action value)
    // Offset: 0xFC71A8
    void add_feverDidFinishEvent(System::Action* value);
    // public System.Void remove_feverDidFinishEvent(System.Action value)
    // Offset: 0xFC724C
    void remove_feverDidFinishEvent(System::Action* value);
    // public System.Void add_comboBreakingEventHappenedEvent(System.Action value)
    // Offset: 0xFC72F0
    void add_comboBreakingEventHappenedEvent(System::Action* value);
    // public System.Void remove_comboBreakingEventHappenedEvent(System.Action value)
    // Offset: 0xFC7394
    void remove_comboBreakingEventHappenedEvent(System::Action* value);
    // public System.Int32 get_prevFrameRawScore()
    // Offset: 0xFC7438
    int get_prevFrameRawScore();
    // public System.Int32 get_prevFrameModifiedScore()
    // Offset: 0xFC7440
    int get_prevFrameModifiedScore();
    // public System.Int32 get_maxCombo()
    // Offset: 0xFC74C8
    int get_maxCombo();
    // public System.Int32 get_multiplierWithFever()
    // Offset: 0xFC74D0
    int get_multiplierWithFever();
    // public System.Boolean get_feverModeActive()
    // Offset: 0xFC74EC
    bool get_feverModeActive();
    // public System.Single get_feverModeDrainProgress()
    // Offset: 0xFC74F4
    float get_feverModeDrainProgress();
    // public System.Single get_feverModeChargeProgress()
    // Offset: 0xFC7588
    float get_feverModeChargeProgress();
    // public System.Int32 get_immediateMaxPossibleRawScore()
    // Offset: 0xFC75A0
    int get_immediateMaxPossibleRawScore();
    // public System.Single get_gameplayModifiersScoreMultiplier()
    // Offset: 0xFC75A8
    float get_gameplayModifiersScoreMultiplier();
    // protected System.Void Start()
    // Offset: 0xFC75B0
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xFC76C0
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0xFC77B0
    void Update();
    // protected System.Void LateUpdate()
    // Offset: 0xFC7A48
    void LateUpdate();
    // private System.Void LoseMultiplier(out System.Boolean comboChanged, out System.Boolean multiplierChanged)
    // Offset: 0xFC78F4
    void LoseMultiplier(bool& comboChanged, bool& multiplierChanged);
    // private System.Void NotifyForChange(System.Boolean comboChanged, System.Boolean multiplierChanged)
    // Offset: 0xFC7968
    void NotifyForChange(bool comboChanged, bool multiplierChanged);
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xFC7CF0
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0xFC7F20
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleCutScoreBufferDidFinish(CutScoreBuffer cutScoreBuffer)
    // Offset: 0xFC7FDC
    void HandleCutScoreBufferDidFinish(GlobalNamespace::CutScoreBuffer* cutScoreBuffer);
    // public System.Void .ctor()
    // Offset: 0xFC8064
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScoreController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScoreController*, creationType>()));
    }
  }; // ScoreController
  static check_size<sizeof(ScoreController), 216 + sizeof(float)> __GlobalNamespace_ScoreControllerSizeCheck;
  static_assert(sizeof(ScoreController) == 0xDC);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ScoreController*, "", "ScoreController");
#pragma pack(pop)
