// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: RpcHandler`1<TType>
  template<typename TType>
  class RpcHandler_1;
  // Forward declaring type: BeatmapIdentifierNetSerializable
  class BeatmapIdentifierNetSerializable;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: MenuRpcManager
  class MenuRpcManager : public ::Il2CppObject/*, public System::IDisposable, public GlobalNamespace::IMenuRpcManager*/ {
    public:
    // Nested type: GlobalNamespace::MenuRpcManager::RpcType
    struct RpcType;
    // Nested type: GlobalNamespace::MenuRpcManager::GetIsEntitledToLevelRpc
    class GetIsEntitledToLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetIsEntitledToLevelRpc
    class SetIsEntitledToLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::InvalidateLevelEntitlementStatusesRpc
    class InvalidateLevelEntitlementStatusesRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SelectLevelPackRpc
    class SelectLevelPackRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SelectBeatmapRpc
    class SelectBeatmapRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::ClearSelectedBeatmapRpc
    class ClearSelectedBeatmapRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetSelectedBeatmapRpc
    class GetSelectedBeatmapRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SelectGameplayModifiersRpc
    class SelectGameplayModifiersRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::ClearSelectedGameplayModifiersRpc
    class ClearSelectedGameplayModifiersRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetSelectedGameplayModifiersRpc
    class GetSelectedGameplayModifiersRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::LevelLoadErrorRpc
    class LevelLoadErrorRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::LevelLoadSuccessRpc
    class LevelLoadSuccessRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::StartLevelRpc
    class StartLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetStartedLevelRpc
    class GetStartedLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetMultiplayerGameStateRpc
    class GetMultiplayerGameStateRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetMultiplayerGameStateRpc
    class SetMultiplayerGameStateRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::CancelCountdownRpc
    class CancelCountdownRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetCountdownEndTimeRpc
    class SetCountdownEndTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetCountdownEndTimeRpc
    class GetCountdownEndTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::CancelLevelStartRpc
    class CancelLevelStartRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetIsReadyRpc
    class GetIsReadyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetIsReadyRpc
    class SetIsReadyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetStartGameTimeRpc
    class SetStartGameTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::CancelStartGameTimeRpc
    class CancelStartGameTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetIsInLobbyRpc
    class GetIsInLobbyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetIsInLobbyRpc
    class SetIsInLobbyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetOwnedSongPacksRpc
    class GetOwnedSongPacksRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetOwnedSongPacksRpc
    class SetOwnedSongPacksRpc;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: MenuRpcManager/RpcType
    struct RpcType/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: RpcType
      constexpr RpcType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public MenuRpcManager/RpcType GetIsEntitledToLevel
      static constexpr const uint8_t GetIsEntitledToLevel = 0u;
      // Get static field: static public MenuRpcManager/RpcType GetIsEntitledToLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetIsEntitledToLevel();
      // Set static field: static public MenuRpcManager/RpcType GetIsEntitledToLevel
      static void _set_GetIsEntitledToLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetIsEntitledToLevel
      static constexpr const uint8_t SetIsEntitledToLevel = 1u;
      // Get static field: static public MenuRpcManager/RpcType SetIsEntitledToLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetIsEntitledToLevel();
      // Set static field: static public MenuRpcManager/RpcType SetIsEntitledToLevel
      static void _set_SetIsEntitledToLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
      static constexpr const uint8_t InvalidateLevelEntitlementStatuses = 2u;
      // Get static field: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
      static GlobalNamespace::MenuRpcManager::RpcType _get_InvalidateLevelEntitlementStatuses();
      // Set static field: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
      static void _set_InvalidateLevelEntitlementStatuses(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SelectLevelPack
      static constexpr const uint8_t SelectLevelPack = 3u;
      // Get static field: static public MenuRpcManager/RpcType SelectLevelPack
      static GlobalNamespace::MenuRpcManager::RpcType _get_SelectLevelPack();
      // Set static field: static public MenuRpcManager/RpcType SelectLevelPack
      static void _set_SelectLevelPack(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SelectBeatmap
      static constexpr const uint8_t SelectBeatmap = 4u;
      // Get static field: static public MenuRpcManager/RpcType SelectBeatmap
      static GlobalNamespace::MenuRpcManager::RpcType _get_SelectBeatmap();
      // Set static field: static public MenuRpcManager/RpcType SelectBeatmap
      static void _set_SelectBeatmap(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType ClearSelectedBeatmap
      static constexpr const uint8_t ClearSelectedBeatmap = 5u;
      // Get static field: static public MenuRpcManager/RpcType ClearSelectedBeatmap
      static GlobalNamespace::MenuRpcManager::RpcType _get_ClearSelectedBeatmap();
      // Set static field: static public MenuRpcManager/RpcType ClearSelectedBeatmap
      static void _set_ClearSelectedBeatmap(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetSelectedBeatmap
      static constexpr const uint8_t GetSelectedBeatmap = 6u;
      // Get static field: static public MenuRpcManager/RpcType GetSelectedBeatmap
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetSelectedBeatmap();
      // Set static field: static public MenuRpcManager/RpcType GetSelectedBeatmap
      static void _set_GetSelectedBeatmap(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SelectGameplayModifiers
      static constexpr const uint8_t SelectGameplayModifiers = 7u;
      // Get static field: static public MenuRpcManager/RpcType SelectGameplayModifiers
      static GlobalNamespace::MenuRpcManager::RpcType _get_SelectGameplayModifiers();
      // Set static field: static public MenuRpcManager/RpcType SelectGameplayModifiers
      static void _set_SelectGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
      static constexpr const uint8_t ClearSelectedGameplayModifiers = 8u;
      // Get static field: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
      static GlobalNamespace::MenuRpcManager::RpcType _get_ClearSelectedGameplayModifiers();
      // Set static field: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
      static void _set_ClearSelectedGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
      static constexpr const uint8_t GetSelectedGameplayModifiers = 9u;
      // Get static field: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetSelectedGameplayModifiers();
      // Set static field: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
      static void _set_GetSelectedGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType LevelLoadError
      static constexpr const uint8_t LevelLoadError = 10u;
      // Get static field: static public MenuRpcManager/RpcType LevelLoadError
      static GlobalNamespace::MenuRpcManager::RpcType _get_LevelLoadError();
      // Set static field: static public MenuRpcManager/RpcType LevelLoadError
      static void _set_LevelLoadError(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType LevelLoadSuccess
      static constexpr const uint8_t LevelLoadSuccess = 11u;
      // Get static field: static public MenuRpcManager/RpcType LevelLoadSuccess
      static GlobalNamespace::MenuRpcManager::RpcType _get_LevelLoadSuccess();
      // Set static field: static public MenuRpcManager/RpcType LevelLoadSuccess
      static void _set_LevelLoadSuccess(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType StartLevel
      static constexpr const uint8_t StartLevel = 12u;
      // Get static field: static public MenuRpcManager/RpcType StartLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_StartLevel();
      // Set static field: static public MenuRpcManager/RpcType StartLevel
      static void _set_StartLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetStartedLevel
      static constexpr const uint8_t GetStartedLevel = 13u;
      // Get static field: static public MenuRpcManager/RpcType GetStartedLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetStartedLevel();
      // Set static field: static public MenuRpcManager/RpcType GetStartedLevel
      static void _set_GetStartedLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType CancelLevelStart
      static constexpr const uint8_t CancelLevelStart = 14u;
      // Get static field: static public MenuRpcManager/RpcType CancelLevelStart
      static GlobalNamespace::MenuRpcManager::RpcType _get_CancelLevelStart();
      // Set static field: static public MenuRpcManager/RpcType CancelLevelStart
      static void _set_CancelLevelStart(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetMultiplayerGameState
      static constexpr const uint8_t GetMultiplayerGameState = 15u;
      // Get static field: static public MenuRpcManager/RpcType GetMultiplayerGameState
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetMultiplayerGameState();
      // Set static field: static public MenuRpcManager/RpcType GetMultiplayerGameState
      static void _set_GetMultiplayerGameState(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetMultiplayerGameState
      static constexpr const uint8_t SetMultiplayerGameState = 16u;
      // Get static field: static public MenuRpcManager/RpcType SetMultiplayerGameState
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetMultiplayerGameState();
      // Set static field: static public MenuRpcManager/RpcType SetMultiplayerGameState
      static void _set_SetMultiplayerGameState(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetIsReady
      static constexpr const uint8_t GetIsReady = 17u;
      // Get static field: static public MenuRpcManager/RpcType GetIsReady
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetIsReady();
      // Set static field: static public MenuRpcManager/RpcType GetIsReady
      static void _set_GetIsReady(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetIsReady
      static constexpr const uint8_t SetIsReady = 18u;
      // Get static field: static public MenuRpcManager/RpcType SetIsReady
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetIsReady();
      // Set static field: static public MenuRpcManager/RpcType SetIsReady
      static void _set_SetIsReady(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetStartGameTime
      static constexpr const uint8_t SetStartGameTime = 19u;
      // Get static field: static public MenuRpcManager/RpcType SetStartGameTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetStartGameTime();
      // Set static field: static public MenuRpcManager/RpcType SetStartGameTime
      static void _set_SetStartGameTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType CancelStartGameTime
      static constexpr const uint8_t CancelStartGameTime = 20u;
      // Get static field: static public MenuRpcManager/RpcType CancelStartGameTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_CancelStartGameTime();
      // Set static field: static public MenuRpcManager/RpcType CancelStartGameTime
      static void _set_CancelStartGameTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetIsInLobby
      static constexpr const uint8_t GetIsInLobby = 21u;
      // Get static field: static public MenuRpcManager/RpcType GetIsInLobby
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetIsInLobby();
      // Set static field: static public MenuRpcManager/RpcType GetIsInLobby
      static void _set_GetIsInLobby(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetIsInLobby
      static constexpr const uint8_t SetIsInLobby = 22u;
      // Get static field: static public MenuRpcManager/RpcType SetIsInLobby
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetIsInLobby();
      // Set static field: static public MenuRpcManager/RpcType SetIsInLobby
      static void _set_SetIsInLobby(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetCountdownEndTime
      static constexpr const uint8_t GetCountdownEndTime = 23u;
      // Get static field: static public MenuRpcManager/RpcType GetCountdownEndTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetCountdownEndTime();
      // Set static field: static public MenuRpcManager/RpcType GetCountdownEndTime
      static void _set_GetCountdownEndTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetCountdownEndTime
      static constexpr const uint8_t SetCountdownEndTime = 24u;
      // Get static field: static public MenuRpcManager/RpcType SetCountdownEndTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetCountdownEndTime();
      // Set static field: static public MenuRpcManager/RpcType SetCountdownEndTime
      static void _set_SetCountdownEndTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType CancelCountdown
      static constexpr const uint8_t CancelCountdown = 25u;
      // Get static field: static public MenuRpcManager/RpcType CancelCountdown
      static GlobalNamespace::MenuRpcManager::RpcType _get_CancelCountdown();
      // Set static field: static public MenuRpcManager/RpcType CancelCountdown
      static void _set_CancelCountdown(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetOwnedSongPacks
      static constexpr const uint8_t GetOwnedSongPacks = 26u;
      // Get static field: static public MenuRpcManager/RpcType GetOwnedSongPacks
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetOwnedSongPacks();
      // Set static field: static public MenuRpcManager/RpcType GetOwnedSongPacks
      static void _set_GetOwnedSongPacks(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetOwnedSongPacks
      static constexpr const uint8_t SetOwnedSongPacks = 27u;
      // Get static field: static public MenuRpcManager/RpcType SetOwnedSongPacks
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetOwnedSongPacks();
      // Set static field: static public MenuRpcManager/RpcType SetOwnedSongPacks
      static void _set_SetOwnedSongPacks(GlobalNamespace::MenuRpcManager::RpcType value);
    }; // MenuRpcManager/RpcType
    #pragma pack(pop)
    static check_size<sizeof(MenuRpcManager::RpcType), 0 + sizeof(uint8_t)> __GlobalNamespace_MenuRpcManager_RpcTypeSizeCheck;
    static_assert(sizeof(MenuRpcManager::RpcType) == 0x1);
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // private readonly RpcHandler`1<MenuRpcManager/RpcType> _rpcHandler
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::RpcHandler_1<GlobalNamespace::MenuRpcManager::RpcType>* rpcHandler;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RpcHandler_1<GlobalNamespace::MenuRpcManager::RpcType>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AF94
    // private System.Action`2<System.String,System.String> getIsEntitledToLevelEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action_2<::Il2CppString*, ::Il2CppString*>* getIsEntitledToLevelEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, ::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AFA4
    // private System.Action`3<System.String,System.String,EntitlementsStatus> setIsEntitledToLevelEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* setIsEntitledToLevelEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AFB4
    // private System.Action`1<System.String> levelEntitlementStatusesInvalidatedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<::Il2CppString*>* levelEntitlementStatusesInvalidatedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AFC4
    // private System.Action`2<System.String,System.String> selectedLevelPackEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_2<::Il2CppString*, ::Il2CppString*>* selectedLevelPackEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, ::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AFD4
    // private System.Action`2<System.String,BeatmapIdentifierNetSerializable> selectedBeatmapEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* selectedBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AFE4
    // private System.Action`1<System.String> clearSelectedBeatmapEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<::Il2CppString*>* clearSelectedBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1AFF4
    // private System.Action`1<System.String> getSelectedBeatmapEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<::Il2CppString*>* getSelectedBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B004
    // private System.Action`2<System.String,GameplayModifiers> selectedGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* selectedGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B014
    // private System.Action`1<System.String> clearSelectedGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_1<::Il2CppString*>* clearSelectedGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B024
    // private System.Action`1<System.String> getSelectedGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_1<::Il2CppString*>* getSelectedGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B034
    // private System.Action`2<System.String,System.String> levelLoadErrorEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action_2<::Il2CppString*, ::Il2CppString*>* levelLoadErrorEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, ::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B044
    // private System.Action`2<System.String,System.String> levelLoadSuccessEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action_2<::Il2CppString*, ::Il2CppString*>* levelLoadSuccessEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, ::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B054
    // private System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> startedLevelEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* startedLevelEvent;
    // Field size check
    static_assert(sizeof(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B064
    // private System.Action`1<System.String> getStartedLevelEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<::Il2CppString*>* getStartedLevelEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B074
    // private System.Action`1<System.String> getMultiplayerGameStateEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action_1<::Il2CppString*>* getMultiplayerGameStateEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B084
    // private System.Action`2<System.String,MultiplayerGameState> setMultiplayerGameStateEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* setMultiplayerGameStateEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B094
    // private System.Action`1<System.String> cancelCountdownEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action_1<::Il2CppString*>* cancelCountdownEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B0A4
    // private System.Action`2<System.String,System.Single> setCountdownEndTimeEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action_2<::Il2CppString*, float>* setCountdownEndTimeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B0B4
    // private System.Action`1<System.String> getCountdownEndTimeEvent
    // Size: 0x8
    // Offset: 0xB0
    System::Action_1<::Il2CppString*>* getCountdownEndTimeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B0C4
    // private System.Action`1<System.String> cancelledLevelStartEvent
    // Size: 0x8
    // Offset: 0xB8
    System::Action_1<::Il2CppString*>* cancelledLevelStartEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B0D4
    // private System.Action`1<System.String> getIsReadyEvent
    // Size: 0x8
    // Offset: 0xC0
    System::Action_1<::Il2CppString*>* getIsReadyEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B0E4
    // private System.Action`2<System.String,System.Boolean> setIsReadyEvent
    // Size: 0x8
    // Offset: 0xC8
    System::Action_2<::Il2CppString*, bool>* setIsReadyEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, bool>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B0F4
    // private System.Action`2<System.String,System.Single> setStartGameTimeEvent
    // Size: 0x8
    // Offset: 0xD0
    System::Action_2<::Il2CppString*, float>* setStartGameTimeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B104
    // private System.Action`1<System.String> cancelStartGameTimeEvent
    // Size: 0x8
    // Offset: 0xD8
    System::Action_1<::Il2CppString*>* cancelStartGameTimeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B114
    // private System.Action`1<System.String> getIsInLobbyEvent
    // Size: 0x8
    // Offset: 0xE0
    System::Action_1<::Il2CppString*>* getIsInLobbyEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B124
    // private System.Action`2<System.String,System.Boolean> setIsInLobbyEvent
    // Size: 0x8
    // Offset: 0xE8
    System::Action_2<::Il2CppString*, bool>* setIsInLobbyEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, bool>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B134
    // private System.Action`1<System.String> getOwnedSongPacksEvent
    // Size: 0x8
    // Offset: 0xF0
    System::Action_1<::Il2CppString*>* getOwnedSongPacksEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1B144
    // private System.Action`2<System.String,SongPackMask> setOwnedSongPacksEvent
    // Size: 0x8
    // Offset: 0xF8
    System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* setOwnedSongPacksEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*) == 0x8);
    // Creating value type constructor for type: MenuRpcManager
    MenuRpcManager(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::RpcHandler_1<GlobalNamespace::MenuRpcManager::RpcType>* rpcHandler_ = {}, System::Action_2<::Il2CppString*, ::Il2CppString*>* getIsEntitledToLevelEvent_ = {}, System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* setIsEntitledToLevelEvent_ = {}, System::Action_1<::Il2CppString*>* levelEntitlementStatusesInvalidatedEvent_ = {}, System::Action_2<::Il2CppString*, ::Il2CppString*>* selectedLevelPackEvent_ = {}, System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* selectedBeatmapEvent_ = {}, System::Action_1<::Il2CppString*>* clearSelectedBeatmapEvent_ = {}, System::Action_1<::Il2CppString*>* getSelectedBeatmapEvent_ = {}, System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* selectedGameplayModifiersEvent_ = {}, System::Action_1<::Il2CppString*>* clearSelectedGameplayModifiersEvent_ = {}, System::Action_1<::Il2CppString*>* getSelectedGameplayModifiersEvent_ = {}, System::Action_2<::Il2CppString*, ::Il2CppString*>* levelLoadErrorEvent_ = {}, System::Action_2<::Il2CppString*, ::Il2CppString*>* levelLoadSuccessEvent_ = {}, System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* startedLevelEvent_ = {}, System::Action_1<::Il2CppString*>* getStartedLevelEvent_ = {}, System::Action_1<::Il2CppString*>* getMultiplayerGameStateEvent_ = {}, System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* setMultiplayerGameStateEvent_ = {}, System::Action_1<::Il2CppString*>* cancelCountdownEvent_ = {}, System::Action_2<::Il2CppString*, float>* setCountdownEndTimeEvent_ = {}, System::Action_1<::Il2CppString*>* getCountdownEndTimeEvent_ = {}, System::Action_1<::Il2CppString*>* cancelledLevelStartEvent_ = {}, System::Action_1<::Il2CppString*>* getIsReadyEvent_ = {}, System::Action_2<::Il2CppString*, bool>* setIsReadyEvent_ = {}, System::Action_2<::Il2CppString*, float>* setStartGameTimeEvent_ = {}, System::Action_1<::Il2CppString*>* cancelStartGameTimeEvent_ = {}, System::Action_1<::Il2CppString*>* getIsInLobbyEvent_ = {}, System::Action_2<::Il2CppString*, bool>* setIsInLobbyEvent_ = {}, System::Action_1<::Il2CppString*>* getOwnedSongPacksEvent_ = {}, System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* setOwnedSongPacksEvent_ = {}) noexcept : multiplayerSessionManager{multiplayerSessionManager_}, rpcHandler{rpcHandler_}, getIsEntitledToLevelEvent{getIsEntitledToLevelEvent_}, setIsEntitledToLevelEvent{setIsEntitledToLevelEvent_}, levelEntitlementStatusesInvalidatedEvent{levelEntitlementStatusesInvalidatedEvent_}, selectedLevelPackEvent{selectedLevelPackEvent_}, selectedBeatmapEvent{selectedBeatmapEvent_}, clearSelectedBeatmapEvent{clearSelectedBeatmapEvent_}, getSelectedBeatmapEvent{getSelectedBeatmapEvent_}, selectedGameplayModifiersEvent{selectedGameplayModifiersEvent_}, clearSelectedGameplayModifiersEvent{clearSelectedGameplayModifiersEvent_}, getSelectedGameplayModifiersEvent{getSelectedGameplayModifiersEvent_}, levelLoadErrorEvent{levelLoadErrorEvent_}, levelLoadSuccessEvent{levelLoadSuccessEvent_}, startedLevelEvent{startedLevelEvent_}, getStartedLevelEvent{getStartedLevelEvent_}, getMultiplayerGameStateEvent{getMultiplayerGameStateEvent_}, setMultiplayerGameStateEvent{setMultiplayerGameStateEvent_}, cancelCountdownEvent{cancelCountdownEvent_}, setCountdownEndTimeEvent{setCountdownEndTimeEvent_}, getCountdownEndTimeEvent{getCountdownEndTimeEvent_}, cancelledLevelStartEvent{cancelledLevelStartEvent_}, getIsReadyEvent{getIsReadyEvent_}, setIsReadyEvent{setIsReadyEvent_}, setStartGameTimeEvent{setStartGameTimeEvent_}, cancelStartGameTimeEvent{cancelStartGameTimeEvent_}, getIsInLobbyEvent{getIsInLobbyEvent_}, setIsInLobbyEvent{setIsInLobbyEvent_}, getOwnedSongPacksEvent{getOwnedSongPacksEvent_}, setOwnedSongPacksEvent{setOwnedSongPacksEvent_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IMenuRpcManager
    operator GlobalNamespace::IMenuRpcManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMenuRpcManager*>(this);
    }
    // static field const value: static private System.String kMenuState
    static constexpr const char* kMenuState = "in_menu";
    // Get static field: static private System.String kMenuState
    static ::Il2CppString* _get_kMenuState();
    // Set static field: static private System.String kMenuState
    static void _set_kMenuState(::Il2CppString* value);
    // public IMultiplayerSessionManager get_multiplayerSessionManager()
    // Offset: 0x15D85A4
    GlobalNamespace::IMultiplayerSessionManager* get_multiplayerSessionManager();
    // public System.Boolean get_enabled()
    // Offset: 0x15D85AC
    bool get_enabled();
    // public System.Void set_enabled(System.Boolean value)
    // Offset: 0x15D8670
    void set_enabled(bool value);
    // public System.Boolean get_enabledForAllPlayers()
    // Offset: 0x15D8744
    bool get_enabledForAllPlayers();
    // public System.Single get_syncTime()
    // Offset: 0x15D8930
    float get_syncTime();
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager)
    // Offset: 0x15D89E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MenuRpcManager* New_ctor(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuRpcManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MenuRpcManager*, creationType>(multiplayerSessionManager)));
    }
    // public System.Void Dispose()
    // Offset: 0x15D9314
    void Dispose();
    // public System.Boolean EnabledForPlayer(IConnectedPlayer player)
    // Offset: 0x15D9378
    bool EnabledForPlayer(GlobalNamespace::IConnectedPlayer* player);
    // public System.Void add_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15D9438
    void add_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15D94DC
    void remove_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void GetIsEntitledToLevel(System.String levelId)
    // Offset: 0x15D9580
    void GetIsEntitledToLevel(::Il2CppString* levelId);
    // private System.Void InvokeGetIsEntitledToLevel(System.String userId, System.String levelId)
    // Offset: 0x15D95E8
    void InvokeGetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId);
    // public System.Void add_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    // Offset: 0x15D9664
    void add_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value);
    // public System.Void remove_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    // Offset: 0x15D9708
    void remove_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value);
    // public System.Void SetIsEntitledToLevel(System.String levelId, EntitlementsStatus entitlementStatus)
    // Offset: 0x15D97AC
    void SetIsEntitledToLevel(::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus entitlementStatus);
    // private System.Void InvokeSetIsEntitledToLevel(System.String userId, System.String levelId, System.Int32 entitlementStatus)
    // Offset: 0x15D981C
    void InvokeSetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId, int entitlementStatus);
    // public System.Void add_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    // Offset: 0x15D98AC
    void add_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    // Offset: 0x15D9950
    void remove_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void InvalidateLevelEntitlementStatuses()
    // Offset: 0x15D99F4
    void InvalidateLevelEntitlementStatuses();
    // public System.Void InvokeLevelEntitlementStatusesInvalidated(System.String userId)
    // Offset: 0x15D9A4C
    void InvokeLevelEntitlementStatusesInvalidated(::Il2CppString* userId);
    // public System.Void add_selectedLevelPackEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15D9AC0
    void add_selectedLevelPackEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_selectedLevelPackEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15D9B64
    void remove_selectedLevelPackEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void SelectLevelPack(System.String levelPackId)
    // Offset: 0x15D9C08
    void SelectLevelPack(::Il2CppString* levelPackId);
    // private System.Void InvokeOnSelectedLevelPackEvent(System.String userId, System.String levelPackId)
    // Offset: 0x15D9C70
    void InvokeOnSelectedLevelPackEvent(::Il2CppString* userId, ::Il2CppString* levelPackId);
    // public System.Void add_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    // Offset: 0x15D9CEC
    void add_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value);
    // public System.Void remove_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    // Offset: 0x15D9D90
    void remove_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value);
    // public System.Void SelectBeatmap(BeatmapIdentifierNetSerializable identifier)
    // Offset: 0x15D9E34
    void SelectBeatmap(GlobalNamespace::BeatmapIdentifierNetSerializable* identifier);
    // private System.Void InvokeSelectedBeatmap(System.String userId, BeatmapIdentifierNetSerializable identifier)
    // Offset: 0x15D9E9C
    void InvokeSelectedBeatmap(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* identifier);
    // public System.Void add_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x15D9F18
    void add_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x15D9FBC
    void remove_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void ClearSelectedBeatmap()
    // Offset: 0x15DA060
    void ClearSelectedBeatmap();
    // private System.Void InvokeClearSelectedBeatmap(System.String userId)
    // Offset: 0x15DA0B8
    void InvokeClearSelectedBeatmap(::Il2CppString* userId);
    // public System.Void add_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x15DA12C
    void add_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x15DA1D0
    void remove_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetSelectedBeatmap()
    // Offset: 0x15DA274
    void GetSelectedBeatmap();
    // private System.Void InvokeGetSelectedBeatmap(System.String userId)
    // Offset: 0x15DA2CC
    void InvokeGetSelectedBeatmap(::Il2CppString* userId);
    // public System.Void add_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    // Offset: 0x15DA340
    void add_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void remove_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    // Offset: 0x15DA3E4
    void remove_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void SelectGameplayModifiers(GameplayModifiers gameplayModifiers)
    // Offset: 0x15DA488
    void SelectGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // private System.Void InvokeOnSelectedGameplayModifiersEvent(System.String userId, GameplayModifiers gameplayModifiers)
    // Offset: 0x15DA4F0
    void InvokeOnSelectedGameplayModifiersEvent(::Il2CppString* userId, GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // public System.Void add_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x15DA56C
    void add_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x15DA610
    void remove_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void ClearSelectedGameplayModifiers()
    // Offset: 0x15DA6B4
    void ClearSelectedGameplayModifiers();
    // private System.Void InvokeClearSelectedGameplayModifiers(System.String userId)
    // Offset: 0x15DA70C
    void InvokeClearSelectedGameplayModifiers(::Il2CppString* userId);
    // public System.Void add_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x15DA780
    void add_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x15DA824
    void remove_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetSelectedGameplayModifiers()
    // Offset: 0x15DA8C8
    void GetSelectedGameplayModifiers();
    // private System.Void InvokeGetSelectedGameplayModifiers(System.String userId)
    // Offset: 0x15DA920
    void InvokeGetSelectedGameplayModifiers(::Il2CppString* userId);
    // public System.Void add_levelLoadErrorEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15DA994
    void add_levelLoadErrorEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_levelLoadErrorEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15DAA38
    void remove_levelLoadErrorEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void LevelLoadError(System.String levelId)
    // Offset: 0x15DAADC
    void LevelLoadError(::Il2CppString* levelId);
    // private System.Void InvokeLevelLoadError(System.String userId, System.String levelId)
    // Offset: 0x15DAB44
    void InvokeLevelLoadError(::Il2CppString* userId, ::Il2CppString* levelId);
    // public System.Void add_levelLoadSuccessEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15DABC0
    void add_levelLoadSuccessEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_levelLoadSuccessEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x15DAC64
    void remove_levelLoadSuccessEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void LevelLoadSuccess(System.String levelId)
    // Offset: 0x15DAD08
    void LevelLoadSuccess(::Il2CppString* levelId);
    // private System.Void InvokeLevelLoadSuccess(System.String userId, System.String levelId)
    // Offset: 0x15DAD70
    void InvokeLevelLoadSuccess(::Il2CppString* userId, ::Il2CppString* levelId);
    // public System.Void add_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    // Offset: 0x15DADEC
    void add_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value);
    // public System.Void remove_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    // Offset: 0x15DAE90
    void remove_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value);
    // public System.Void StartLevel(BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0x15DAF34
    void StartLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // private System.Void InvokeStartLevel(System.String userId, BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0x15DAFB4
    void InvokeStartLevel(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // public System.Void add_getStartedLevelEvent(System.Action`1<System.String> value)
    // Offset: 0x15DB058
    void add_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getStartedLevelEvent(System.Action`1<System.String> value)
    // Offset: 0x15DB0FC
    void remove_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetStartedLevel()
    // Offset: 0x15DB1A0
    void GetStartedLevel();
    // private System.Void InvokeGetStartedLevel(System.String userId)
    // Offset: 0x15DB1F8
    void InvokeGetStartedLevel(::Il2CppString* userId);
    // public System.Void add_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    // Offset: 0x15DB26C
    void add_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    // Offset: 0x15DB310
    void remove_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetMultiplayerGameState()
    // Offset: 0x15DB3B4
    void GetMultiplayerGameState();
    // private System.Void InvokeGetMultiplayerGameState(System.String userId)
    // Offset: 0x15DB40C
    void InvokeGetMultiplayerGameState(::Il2CppString* userId);
    // public System.Void add_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    // Offset: 0x15DB480
    void add_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void remove_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    // Offset: 0x15DB524
    void remove_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void SetMultiplayerGameState(MultiplayerGameState lobbyState)
    // Offset: 0x15DB5C8
    void SetMultiplayerGameState(GlobalNamespace::MultiplayerGameState lobbyState);
    // private System.Void InvokeSetMultiplayerGameState(System.String userId, MultiplayerGameState lobbyState)
    // Offset: 0x15DB630
    void InvokeSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState lobbyState);
    // public System.Void add_cancelCountdownEvent(System.Action`1<System.String> value)
    // Offset: 0x15DB6AC
    void add_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelCountdownEvent(System.Action`1<System.String> value)
    // Offset: 0x15DB750
    void remove_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void CancelCountdown()
    // Offset: 0x15DB7F4
    void CancelCountdown();
    // private System.Void InvokeCancelCountdown(System.String userId)
    // Offset: 0x15DB84C
    void InvokeCancelCountdown(::Il2CppString* userId);
    // public System.Void add_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x15DB8C0
    void add_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void remove_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x15DB964
    void remove_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void SetCountdownEndTime(System.Single newTime)
    // Offset: 0x15DBA08
    void SetCountdownEndTime(float newTime);
    // private System.Void InvokeSetCountdownEndTime(System.String userId, System.Single newTime)
    // Offset: 0x15DBA70
    void InvokeSetCountdownEndTime(::Il2CppString* userId, float newTime);
    // public System.Void add_getCountdownEndTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x15DBAF8
    void add_getCountdownEndTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getCountdownEndTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x15DBB9C
    void remove_getCountdownEndTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetCountdownEndTime()
    // Offset: 0x15DBC40
    void GetCountdownEndTime();
    // private System.Void InvokeGetCountdownEndTime(System.String userId)
    // Offset: 0x15DBC98
    void InvokeGetCountdownEndTime(::Il2CppString* userId);
    // public System.Void add_cancelledLevelStartEvent(System.Action`1<System.String> value)
    // Offset: 0x15DBD0C
    void add_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelledLevelStartEvent(System.Action`1<System.String> value)
    // Offset: 0x15DBDB0
    void remove_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void CancelLevelStart()
    // Offset: 0x15DBE54
    void CancelLevelStart();
    // private System.Void InvokeCancelLevelStart(System.String userId)
    // Offset: 0x15DBEAC
    void InvokeCancelLevelStart(::Il2CppString* userId);
    // public System.Void add_getIsReadyEvent(System.Action`1<System.String> value)
    // Offset: 0x15DBF20
    void add_getIsReadyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getIsReadyEvent(System.Action`1<System.String> value)
    // Offset: 0x15DBFC4
    void remove_getIsReadyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetIsReady()
    // Offset: 0x15DC068
    void GetIsReady();
    // private System.Void InvokeGetIsReady(System.String userId)
    // Offset: 0x15DC0C0
    void InvokeGetIsReady(::Il2CppString* userId);
    // public System.Void add_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x15DC134
    void add_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void remove_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x15DC1D8
    void remove_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void SetIsReady(System.Boolean isReady)
    // Offset: 0x15DC27C
    void SetIsReady(bool isReady);
    // private System.Void InvokeSetIsReady(System.String userId, System.Boolean isReady)
    // Offset: 0x15DC2E4
    void InvokeSetIsReady(::Il2CppString* userId, bool isReady);
    // public System.Void add_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x15DC360
    void add_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void remove_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x15DC404
    void remove_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void SetStartGameTime(System.Single newTime)
    // Offset: 0x15DC4A8
    void SetStartGameTime(float newTime);
    // private System.Void InvokeSetStartGameCountdown(System.String userId, System.Single newTime)
    // Offset: 0x15DC510
    void InvokeSetStartGameCountdown(::Il2CppString* userId, float newTime);
    // public System.Void add_cancelStartGameTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x15DC598
    void add_cancelStartGameTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelStartGameTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x15DC63C
    void remove_cancelStartGameTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void CancelStartGameTime()
    // Offset: 0x15DC6E0
    void CancelStartGameTime();
    // private System.Void InvokeCancelStartGameCountdown(System.String userId)
    // Offset: 0x15DC738
    void InvokeCancelStartGameCountdown(::Il2CppString* userId);
    // public System.Void add_getIsInLobbyEvent(System.Action`1<System.String> value)
    // Offset: 0x15DC7AC
    void add_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getIsInLobbyEvent(System.Action`1<System.String> value)
    // Offset: 0x15DC850
    void remove_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetIsInLobby()
    // Offset: 0x15DC8F4
    void GetIsInLobby();
    // private System.Void InvokeGetIsInLobby(System.String userId)
    // Offset: 0x15DC94C
    void InvokeGetIsInLobby(::Il2CppString* userId);
    // public System.Void add_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x15DC9C0
    void add_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void remove_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x15DCA64
    void remove_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void SetIsInLobby(System.Boolean isBack)
    // Offset: 0x15DCB08
    void SetIsInLobby(bool isBack);
    // private System.Void InvokeSetIsInLobby(System.String userId, System.Boolean isBack)
    // Offset: 0x15DCB70
    void InvokeSetIsInLobby(::Il2CppString* userId, bool isBack);
    // public System.Void add_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    // Offset: 0x15DCBEC
    void add_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    // Offset: 0x15DCC90
    void remove_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetOwnedSongPacks()
    // Offset: 0x15DCD34
    void GetOwnedSongPacks();
    // private System.Void InvokeGetOwnedSongPacks(System.String userId)
    // Offset: 0x15DCD8C
    void InvokeGetOwnedSongPacks(::Il2CppString* userId);
    // public System.Void add_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    // Offset: 0x15DCE00
    void add_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value);
    // public System.Void remove_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    // Offset: 0x15DCEA4
    void remove_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value);
    // public System.Void SetOwnedSongPacks(SongPackMask songPackMask)
    // Offset: 0x15DCF48
    void SetOwnedSongPacks(GlobalNamespace::SongPackMask songPackMask);
    // private System.Void InvokeSetOwnedSongPacks(System.String userId, SongPackMask songPackMask)
    // Offset: 0x15DCFB8
    void InvokeSetOwnedSongPacks(::Il2CppString* userId, GlobalNamespace::SongPackMask songPackMask);
  }; // MenuRpcManager
  #pragma pack(pop)
  static check_size<sizeof(MenuRpcManager), 248 + sizeof(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>*)> __GlobalNamespace_MenuRpcManagerSizeCheck;
  static_assert(sizeof(MenuRpcManager) == 0x100);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MenuRpcManager*, "", "MenuRpcManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MenuRpcManager::RpcType, "", "MenuRpcManager/RpcType");
