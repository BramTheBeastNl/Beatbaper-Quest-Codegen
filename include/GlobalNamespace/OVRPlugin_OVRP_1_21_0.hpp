// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin/OVRP_1_21_0
  class OVRPlugin::OVRP_1_21_0 : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: OVRP_1_21_0
    OVRP_1_21_0() noexcept {}
    // Get static field: static public readonly System.Version version
    static System::Version* _get_version();
    // Set static field: static public readonly System.Version version
    static void _set_version(System::Version* value);
    // static public OVRPlugin/Result ovrp_GetTiledMultiResSupported(out OVRPlugin/Bool foveationSupported)
    // Offset: 0x16205BC
    static GlobalNamespace::OVRPlugin::Result ovrp_GetTiledMultiResSupported(GlobalNamespace::OVRPlugin::Bool& foveationSupported);
    // static public OVRPlugin/Result ovrp_GetTiledMultiResLevel(out OVRPlugin/FixedFoveatedRenderingLevel level)
    // Offset: 0x162063C
    static GlobalNamespace::OVRPlugin::Result ovrp_GetTiledMultiResLevel(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel& level);
    // static public OVRPlugin/Result ovrp_SetTiledMultiResLevel(OVRPlugin/FixedFoveatedRenderingLevel level)
    // Offset: 0x16206BC
    static GlobalNamespace::OVRPlugin::Result ovrp_SetTiledMultiResLevel(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel level);
    // static public OVRPlugin/Result ovrp_GetGPUUtilSupported(out OVRPlugin/Bool gpuUtilSupported)
    // Offset: 0x162073C
    static GlobalNamespace::OVRPlugin::Result ovrp_GetGPUUtilSupported(GlobalNamespace::OVRPlugin::Bool& gpuUtilSupported);
    // static public OVRPlugin/Result ovrp_GetGPUUtilLevel(out System.Single gpuUtil)
    // Offset: 0x16207BC
    static GlobalNamespace::OVRPlugin::Result ovrp_GetGPUUtilLevel(float& gpuUtil);
    // static public OVRPlugin/Result ovrp_GetSystemDisplayFrequency2(out System.Single systemDisplayFrequency)
    // Offset: 0x162083C
    static GlobalNamespace::OVRPlugin::Result ovrp_GetSystemDisplayFrequency2(float& systemDisplayFrequency);
    // static public OVRPlugin/Result ovrp_GetSystemDisplayAvailableFrequencies(System.IntPtr systemDisplayAvailableFrequencies, ref System.Int32 numFrequencies)
    // Offset: 0x16208BC
    static GlobalNamespace::OVRPlugin::Result ovrp_GetSystemDisplayAvailableFrequencies(System::IntPtr systemDisplayAvailableFrequencies, int& numFrequencies);
    // static public OVRPlugin/Result ovrp_SetSystemDisplayFrequency(System.Single requestedFrequency)
    // Offset: 0x162094C
    static GlobalNamespace::OVRPlugin::Result ovrp_SetSystemDisplayFrequency(float requestedFrequency);
    // static public OVRPlugin/Result ovrp_GetAppAsymmetricFov(out OVRPlugin/Bool useAsymmetricFov)
    // Offset: 0x16209D4
    static GlobalNamespace::OVRPlugin::Result ovrp_GetAppAsymmetricFov(GlobalNamespace::OVRPlugin::Bool& useAsymmetricFov);
    // static private System.Void .cctor()
    // Offset: 0x1620A54
    static void _cctor();
  }; // OVRPlugin/OVRP_1_21_0
  #pragma pack(pop)
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported
  // Il2CppName: ovrp_GetTiledMultiResSupported
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResSupported)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetTiledMultiResSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel
  // Il2CppName: ovrp_GetTiledMultiResLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetTiledMultiResLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetTiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel
  // Il2CppName: ovrp_SetTiledMultiResLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel)>(&OVRPlugin::OVRP_1_21_0::ovrp_SetTiledMultiResLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_SetTiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported
  // Il2CppName: ovrp_GetGPUUtilSupported
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilSupported)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetGPUUtilSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel
  // Il2CppName: ovrp_GetGPUUtilLevel
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetGPUUtilLevel)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetGPUUtilLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2
  // Il2CppName: ovrp_GetSystemDisplayFrequency2
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetSystemDisplayFrequency2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies
  // Il2CppName: ovrp_GetSystemDisplayAvailableFrequencies
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(System::IntPtr, int&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetSystemDisplayAvailableFrequencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency
  // Il2CppName: ovrp_SetSystemDisplayFrequency
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(float)>(&OVRPlugin::OVRP_1_21_0::ovrp_SetSystemDisplayFrequency)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_SetSystemDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov
  // Il2CppName: ovrp_GetAppAsymmetricFov
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Result (*)(GlobalNamespace::OVRPlugin::Bool&)>(&OVRPlugin::OVRP_1_21_0::ovrp_GetAppAsymmetricFov)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), "ovrp_GetAppAsymmetricFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRPlugin::Bool&>()});
    }
  };
  // Writing MetadataGetter for method: OVRPlugin::OVRP_1_21_0::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OVRPlugin::OVRP_1_21_0::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(OVRPlugin::OVRP_1_21_0*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::OVRP_1_21_0*, "", "OVRPlugin/OVRP_1_21_0");
