// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicCollectionSO
  class BeatmapCharacteristicCollectionSO;
  // Forward declaring type: MultiplayerLevelSelectionFlowCoordinator
  class MultiplayerLevelSelectionFlowCoordinator;
  // Forward declaring type: QuickPlaySetupViewController
  class QuickPlaySetupViewController;
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
  // Forward declaring type: ServerPlayerListController
  class ServerPlayerListController;
  // Forward declaring type: MultiplayerResultsViewController
  class MultiplayerResultsViewController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: ConnectionErrorDialogViewController
  class ConnectionErrorDialogViewController;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerLobbyController
  class MultiplayerLobbyController;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: ILobbyGameStateController
  class ILobbyGameStateController;
  // Forward declaring type: ILobbyStateDataModel
  class ILobbyStateDataModel;
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: IUnifiedNetworkPlayerModel
  class IUnifiedNetworkPlayerModel;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: PlatformLeaderboardsModel
  class PlatformLeaderboardsModel;
  // Forward declaring type: CenterStageScreenController
  class CenterStageScreenController;
  // Skipping declaration: BeatmapLevelsModel because it is already included!
  // Forward declaring type: SongPreviewPlayer
  class SongPreviewPlayer;
  // Forward declaring type: IAnalyticsModel
  class IAnalyticsModel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
  // Forward declaring type: MultiplayerGameState
  struct MultiplayerGameState;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: MultiplayerResultsData
  class MultiplayerResultsData;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScreenModeSO
  class ScreenModeSO;
  // Forward declaring type: ScreenModeController
  class ScreenModeController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x189
  #pragma pack(push, 1)
  // Autogenerated type: QuickPlayLobbyFlowCoordinator
  class QuickPlayLobbyFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0
    class $$c__DisplayClass61_0;
    // Nested type: GlobalNamespace::QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1
    class $$c__DisplayClass61_1;
    // private HMUI.ScreenModeSO _screenMode
    // Size: 0x8
    // Offset: 0xA8
    HMUI::ScreenModeSO* screenMode;
    // Field size check
    static_assert(sizeof(HMUI::ScreenModeSO*) == 0x8);
    // private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCharacteristicCollectionSO*) == 0x8);
    // private UnityEngine.AudioClip _ambienceAudioClip
    // Size: 0x8
    // Offset: 0xB8
    UnityEngine::AudioClip* ambienceAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C738
    // private readonly MultiplayerLevelSelectionFlowCoordinator _multiplayerLevelSelectionFlowCoordinator
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator* multiplayerLevelSelectionFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C748
    // private readonly QuickPlaySetupViewController _quickPlaySetupViewController
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::QuickPlaySetupViewController* quickPlaySetupViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::QuickPlaySetupViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C758
    // private readonly GameplaySetupViewController _gameplaySetupViewController
    // Size: 0x8
    // Offset: 0xD0
    GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplaySetupViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C768
    // private readonly ServerPlayerListController _serverPlayerListController
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::ServerPlayerListController* serverPlayerListController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ServerPlayerListController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C778
    // private readonly MultiplayerResultsViewController _multiplayerResultsViewController
    // Size: 0x8
    // Offset: 0xE0
    GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C788
    // private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Size: 0x8
    // Offset: 0xE8
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SimpleDialogPromptViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C798
    // private readonly ConnectionErrorDialogViewController _connectionErrorDialogViewController
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::ConnectionErrorDialogViewController* connectionErrorDialogViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ConnectionErrorDialogViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C7A8
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0xF8
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C7B8
    // private readonly MultiplayerLobbyController _multiplayerLobbyController
    // Size: 0x8
    // Offset: 0x100
    GlobalNamespace::MultiplayerLobbyController* multiplayerLobbyController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C7C8
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x108
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C7D8
    // private readonly HMUI.ScreenModeController _screenModeController
    // Size: 0x8
    // Offset: 0x110
    HMUI::ScreenModeController* screenModeController;
    // Field size check
    static_assert(sizeof(HMUI::ScreenModeController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C7E8
    // private readonly ILobbyGameStateController _lobbyGameStateController
    // Size: 0x8
    // Offset: 0x118
    GlobalNamespace::ILobbyGameStateController* lobbyGameStateController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyGameStateController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C7F8
    // private readonly ILobbyStateDataModel _lobbyStateDataModel
    // Size: 0x8
    // Offset: 0x120
    GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyStateDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C808
    // private readonly ILobbyPlayersDataModel _lobbyPlayersDataModel
    // Size: 0x8
    // Offset: 0x128
    GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyPlayersDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C818
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Size: 0x8
    // Offset: 0x130
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnifiedNetworkPlayerModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C828
    // private readonly IMenuRpcManager _menuRpcManager
    // Size: 0x8
    // Offset: 0x138
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMenuRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C838
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x140
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C848
    // private readonly PlatformLeaderboardsModel _platformLeaderboardsModel
    // Size: 0x8
    // Offset: 0x148
    GlobalNamespace::PlatformLeaderboardsModel* platformLeaderboardsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlatformLeaderboardsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C858
    // private readonly CenterStageScreenController _centerStageScreenController
    // Size: 0x8
    // Offset: 0x150
    GlobalNamespace::CenterStageScreenController* centerStageScreenController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CenterStageScreenController*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C868
    // private readonly BeatmapLevelsModel _beatmapLevelsModel
    // Size: 0x8
    // Offset: 0x158
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C878
    // private readonly SongPreviewPlayer _songPreviewPlayer
    // Size: 0x8
    // Offset: 0x160
    GlobalNamespace::SongPreviewPlayer* songPreviewPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPreviewPlayer*) == 0x8);
    // [InjectAttribute] Offset: 0xD2C888
    // private readonly IAnalyticsModel _analyticsModel
    // Size: 0x8
    // Offset: 0x168
    GlobalNamespace::IAnalyticsModel* analyticsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAnalyticsModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2C898
    // private System.Action willFinishEvent
    // Size: 0x8
    // Offset: 0x170
    System::Action* willFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2C8A8
    // private System.Action didFinishedEvent
    // Size: 0x8
    // Offset: 0x178
    System::Action* didFinishedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private LevelSelectionFlowCoordinator/State _lastSimpleLevelSelectionFlowCoordinatorState
    // Size: 0x8
    // Offset: 0x180
    GlobalNamespace::LevelSelectionFlowCoordinator::State* lastSimpleLevelSelectionFlowCoordinatorState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelSelectionFlowCoordinator::State*) == 0x8);
    // private System.Boolean _isAlreadyFinishing
    // Size: 0x1
    // Offset: 0x188
    bool isAlreadyFinishing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: QuickPlayLobbyFlowCoordinator
    QuickPlayLobbyFlowCoordinator(HMUI::ScreenModeSO* screenMode_ = {}, GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection_ = {}, UnityEngine::AudioClip* ambienceAudioClip_ = {}, GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator* multiplayerLevelSelectionFlowCoordinator_ = {}, GlobalNamespace::QuickPlaySetupViewController* quickPlaySetupViewController_ = {}, GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController_ = {}, GlobalNamespace::ServerPlayerListController* serverPlayerListController_ = {}, GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController_ = {}, GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController_ = {}, GlobalNamespace::ConnectionErrorDialogViewController* connectionErrorDialogViewController_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::MultiplayerLobbyController* multiplayerLobbyController_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, HMUI::ScreenModeController* screenModeController_ = {}, GlobalNamespace::ILobbyGameStateController* lobbyGameStateController_ = {}, GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel_ = {}, GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel_ = {}, GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel_ = {}, GlobalNamespace::IMenuRpcManager* menuRpcManager_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::PlatformLeaderboardsModel* platformLeaderboardsModel_ = {}, GlobalNamespace::CenterStageScreenController* centerStageScreenController_ = {}, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel_ = {}, GlobalNamespace::SongPreviewPlayer* songPreviewPlayer_ = {}, GlobalNamespace::IAnalyticsModel* analyticsModel_ = {}, System::Action* willFinishEvent_ = {}, System::Action* didFinishedEvent_ = {}, GlobalNamespace::LevelSelectionFlowCoordinator::State* lastSimpleLevelSelectionFlowCoordinatorState_ = {}, bool isAlreadyFinishing_ = {}) noexcept : screenMode{screenMode_}, beatmapCharacteristicCollection{beatmapCharacteristicCollection_}, ambienceAudioClip{ambienceAudioClip_}, multiplayerLevelSelectionFlowCoordinator{multiplayerLevelSelectionFlowCoordinator_}, quickPlaySetupViewController{quickPlaySetupViewController_}, gameplaySetupViewController{gameplaySetupViewController_}, serverPlayerListController{serverPlayerListController_}, multiplayerResultsViewController{multiplayerResultsViewController_}, simpleDialogPromptViewController{simpleDialogPromptViewController_}, connectionErrorDialogViewController{connectionErrorDialogViewController_}, multiplayerSessionManager{multiplayerSessionManager_}, multiplayerLobbyController{multiplayerLobbyController_}, fadeInOutController{fadeInOutController_}, screenModeController{screenModeController_}, lobbyGameStateController{lobbyGameStateController_}, lobbyStateDataModel{lobbyStateDataModel_}, lobbyPlayersDataModel{lobbyPlayersDataModel_}, unifiedNetworkPlayerModel{unifiedNetworkPlayerModel_}, menuRpcManager{menuRpcManager_}, playerDataModel{playerDataModel_}, platformLeaderboardsModel{platformLeaderboardsModel_}, centerStageScreenController{centerStageScreenController_}, beatmapLevelsModel{beatmapLevelsModel_}, songPreviewPlayer{songPreviewPlayer_}, analyticsModel{analyticsModel_}, willFinishEvent{willFinishEvent_}, didFinishedEvent{didFinishedEvent_}, lastSimpleLevelSelectionFlowCoordinatorState{lastSimpleLevelSelectionFlowCoordinatorState_}, isAlreadyFinishing{isAlreadyFinishing_} {}
    // public System.Void add_willFinishEvent(System.Action value)
    // Offset: 0xFC26C0
    void add_willFinishEvent(System::Action* value);
    // public System.Void remove_willFinishEvent(System.Action value)
    // Offset: 0xFC2768
    void remove_willFinishEvent(System::Action* value);
    // public System.Void add_didFinishedEvent(System.Action value)
    // Offset: 0xFC2810
    void add_didFinishedEvent(System::Action* value);
    // public System.Void remove_didFinishedEvent(System.Action value)
    // Offset: 0xFC28B8
    void remove_didFinishedEvent(System::Action* value);
    // private System.Void HandleLobbyPlayersDataModelDidChange(System.String userId)
    // Offset: 0xFC5270
    void HandleLobbyPlayersDataModelDidChange(::Il2CppString* userId);
    // private System.Void HandleQuickPlaySetupViewControllerSetPlayerReady(System.Boolean isReady)
    // Offset: 0xFC5274
    void HandleQuickPlaySetupViewControllerSetPlayerReady(bool isReady);
    // private System.Void HandleQuickPlaySetupViewControllerSuggestBeatmap()
    // Offset: 0xFC5338
    void HandleQuickPlaySetupViewControllerSuggestBeatmap();
    // private System.Void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(LevelSelectionFlowCoordinator/State state)
    // Offset: 0xFC550C
    void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state);
    // private System.Void HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish()
    // Offset: 0xFC584C
    void HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish();
    // private System.Void HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap()
    // Offset: 0xFC5890
    void HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap();
    // private System.Void HandleServerPlayerListControllerSelectSuggestedBeatmap(System.String levelId, BeatmapCharacteristicSO beatmapCharacteristic, BeatmapDifficulty beatmapDifficulty)
    // Offset: 0xFC5944
    void HandleServerPlayerListControllerSelectSuggestedBeatmap(::Il2CppString* levelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // private System.Void HandleLobbyGameStateControllerLobbyDisconnected()
    // Offset: 0xFC5A20
    void HandleLobbyGameStateControllerLobbyDisconnected();
    // private System.Void HandleLobbyGameStateControllerGameStarted()
    // Offset: 0xFC5AE0
    void HandleLobbyGameStateControllerGameStarted();
    // private System.Void HandleLobbyGameStateControllerGameStartedPresentView()
    // Offset: 0xFC5D84
    void HandleLobbyGameStateControllerGameStartedPresentView();
    // private System.Void HandleLobbyGameStateControllerCountdownStarted()
    // Offset: 0xFC5E4C
    void HandleLobbyGameStateControllerCountdownStarted();
    // private System.Void HandleLobbyGameStateControllerCountdownCancelled()
    // Offset: 0xFC5F14
    void HandleLobbyGameStateControllerCountdownCancelled();
    // private System.Void HandleLobbyGameStateControllerSongStillDownloading()
    // Offset: 0xFC5F34
    void HandleLobbyGameStateControllerSongStillDownloading();
    // private System.Void HandleMenuRpcManagerSetMultiplayerGameState(System.String userId, MultiplayerGameState gameState)
    // Offset: 0xFC5F38
    void HandleMenuRpcManagerSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState);
    // private System.Void HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, MultiplayerResultsData multiplayerResultsData)
    // Offset: 0xFC6148
    void HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData);
    // private System.Void HandleLobbyGameStateControllerLevelDidGetDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0xFC67DC
    void HandleLobbyGameStateControllerLevelDidGetDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleLobbyGameStateControllerBeforeSceneSwitch()
    // Offset: 0xFC67E0
    void HandleLobbyGameStateControllerBeforeSceneSwitch();
    // private System.Void HandleMultiplayerResultsViewControllerBackToLobbyPressed(MultiplayerResultsViewController multiplayerResultsViewController)
    // Offset: 0xFC69A4
    void HandleMultiplayerResultsViewControllerBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController);
    // private System.Void SetupGameStarting()
    // Offset: 0xFC5AE4
    void SetupGameStarting();
    // private System.Void SetLocalPlayerDataModelToViews(System.String userId)
    // Offset: 0xFC35D8
    void SetLocalPlayerDataModelToViews(::Il2CppString* userId);
    // private System.Void PresentBackButtonConfirmationDialog()
    // Offset: 0xFC44A8
    void PresentBackButtonConfirmationDialog();
    // private System.Void Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    // Offset: 0xFC65F0
    void Finish(System::Action* finishedCallback, bool withFadeOut);
    // private System.Void DismissViewControllersAndCoordinators()
    // Offset: 0xFC6C14
    void DismissViewControllersAndCoordinators();
    // private System.Void ShowDisconnectDialogAndFinish(DisconnectedReason disconnectedReason)
    // Offset: 0xFC4FC8
    void ShowDisconnectDialogAndFinish(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void <PresentBackButtonConfirmationDialog>b__60_0(System.Int32 btnIndex)
    // Offset: 0xFC6D2C
    void $PresentBackButtonConfirmationDialog$b__60_0(int btnIndex);
    // private System.Void <ShowDisconnectDialogAndFinish>b__63_0()
    // Offset: 0xFC6E70
    void $ShowDisconnectDialogAndFinish$b__63_0();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xFC2960
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0xFC3848
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0xFC42A4
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xFC43F8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected override System.Void InitialViewControllerWasPresented()
    // Offset: 0xFC46AC
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::InitialViewControllerWasPresented()
    void InitialViewControllerWasPresented();
    // protected override System.Void TransitionDidStart()
    // Offset: 0xFC48B0
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidStart()
    void TransitionDidStart();
    // protected override System.Void TransitionDidFinish()
    // Offset: 0xFC4B00
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidFinish()
    void TransitionDidFinish();
    // public System.Void .ctor()
    // Offset: 0xFC6D24
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static QuickPlayLobbyFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<QuickPlayLobbyFlowCoordinator*, creationType>()));
    }
  }; // QuickPlayLobbyFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(QuickPlayLobbyFlowCoordinator), 392 + sizeof(bool)> __GlobalNamespace_QuickPlayLobbyFlowCoordinatorSizeCheck;
  static_assert(sizeof(QuickPlayLobbyFlowCoordinator) == 0x189);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::QuickPlayLobbyFlowCoordinator*, "", "QuickPlayLobbyFlowCoordinator");
