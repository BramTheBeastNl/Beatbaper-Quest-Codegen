// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
// Including type: CloudsMeshGenerator
#include "GlobalNamespace/CloudsMeshGenerator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  // Autogenerated type: CloudsMeshGenerator/Ring
  // [] Offset: FFFFFFFF
  struct CloudsMeshGenerator::Ring/*, public System::ValueType*/ {
    public:
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x0
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single normalizedRadius
    // Size: 0x4
    // Offset: 0x4
    float normalizedRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 meshCount
    // Size: 0x4
    // Offset: 0x8
    int meshCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: meshCount and: cloudIDs
    private: char __padding2[0x4] = {};
    public:
    // public System.Int32[] cloudIDs
    // Size: 0x8
    // Offset: 0x10
    ::Array<int>* cloudIDs;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // public System.Single sizeMultiplier
    // Size: 0x4
    // Offset: 0x18
    float sizeMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: Ring
    constexpr Ring(float radius_ = {}, float normalizedRadius_ = {}, int meshCount_ = {}, ::Array<int>* cloudIDs_ = {}, float sizeMultiplier_ = {}) noexcept : radius{radius_}, normalizedRadius{normalizedRadius_}, meshCount{meshCount_}, cloudIDs{cloudIDs_}, sizeMultiplier{sizeMultiplier_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // CloudsMeshGenerator/Ring
  static check_size<sizeof(CloudsMeshGenerator::Ring), 24 + sizeof(float)> __GlobalNamespace_CloudsMeshGenerator_RingSizeCheck;
  static_assert(sizeof(CloudsMeshGenerator::Ring) == 0x1C);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::CloudsMeshGenerator::Ring, "", "CloudsMeshGenerator/Ring");
#pragma pack(pop)
