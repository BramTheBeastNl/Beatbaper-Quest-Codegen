// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnController
  class BeatmapObjectSpawnController;
  // Forward declaring type: BasicSpectrogramData
  class BasicSpectrogramData;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: Saber
  class Saber;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: GameplayFacade
  class GameplayFacade : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IAudioTimeSource*/ {
    public:
    // private readonly BeatmapObjectSpawnController _beatmapObjectSpawnController
    // Offset: 0x18
    GlobalNamespace::BeatmapObjectSpawnController* beatmapObjectSpawnController;
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Offset: 0x20
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // private readonly BasicSpectrogramData _spectrogramData
    // Offset: 0x28
    GlobalNamespace::BasicSpectrogramData* spectrogramData;
    // private readonly SaberManager _saberManager
    // Offset: 0x30
    GlobalNamespace::SaberManager* saberManager;
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x38
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private readonly IDifficultyBeatmap _difficultyBeatmap
    // Offset: 0x40
    GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap;
    // Creating interface conversion operator: operator GlobalNamespace::IAudioTimeSource
    operator GlobalNamespace::IAudioTimeSource() noexcept {
      return *reinterpret_cast<GlobalNamespace::IAudioTimeSource*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public IDifficultyBeatmap get_difficultyBeatmap()
    // Offset: 0x20073BC
    GlobalNamespace::IDifficultyBeatmap* get_difficultyBeatmap();
    // public System.Boolean get_isInitialized()
    // Offset: 0x20073FC
    bool get_isInitialized();
    // public System.Single get_moveDuration()
    // Offset: 0x2007418
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x2007434
    float get_jumpDuration();
    // public System.Void add_didInitEvent(System.Action value)
    // Offset: 0x2007450
    void add_didInitEvent(System::Action* value);
    // public System.Void remove_didInitEvent(System.Action value)
    // Offset: 0x200746C
    void remove_didInitEvent(System::Action* value);
    // public System.Collections.Generic.List`1<System.Single> get_ProcessedSamples()
    // Offset: 0x2007488
    System::Collections::Generic::List_1<float>* get_ProcessedSamples();
    // public Saber get_leftSaber()
    // Offset: 0x20074A4
    GlobalNamespace::Saber* get_leftSaber();
    // public Saber get_rightSaber()
    // Offset: 0x20074C0
    GlobalNamespace::Saber* get_rightSaber();
    // public System.Void add_beatmapEventDidTriggerEvent(System.Action`1<BeatmapEventData> value)
    // Offset: 0x20074DC
    void add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value);
    // public System.Void remove_beatmapEventDidTriggerEvent(System.Action`1<BeatmapEventData> value)
    // Offset: 0x20074F8
    void remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value);
    // public BeatmapObjectCallbackController/BeatmapObjectCallbackData AddBeatmapObjectCallback(BeatmapObjectCallbackController/BeatmapObjectCallback callback, System.Single aheadTime)
    // Offset: 0x2007514
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallback* callback, float aheadTime);
    // public System.Void RemoveBeatmapObjectCallback(BeatmapObjectCallbackController/BeatmapObjectCallbackData callbackData)
    // Offset: 0x2007530
    void RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* callbackData);
    // public BeatmapObjectCallbackController/BeatmapEventCallbackData AddBeatmapEventCallback(BeatmapObjectCallbackController/BeatmapEventCallback callback, System.Single aheadTime)
    // Offset: 0x200754C
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* AddBeatmapEventCallback(GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallback* callback, float aheadTime);
    // public System.Void RemoveBeatmapEventCallback(BeatmapObjectCallbackController/BeatmapEventCallbackData callbackData)
    // Offset: 0x2007568
    void RemoveBeatmapEventCallback(GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* callbackData);
    // public System.Single get_songTime()
    // Offset: 0x20073C4
    // Implemented from: IAudioTimeSource
    // Base method: System.Single IAudioTimeSource::get_songTime()
    float get_songTime();
    // public System.Single get_songEndTime()
    // Offset: 0x20073E0
    // Implemented from: IAudioTimeSource
    // Base method: System.Single IAudioTimeSource::get_songEndTime()
    float get_songEndTime();
    // public System.Void .ctor()
    // Offset: 0x2007584
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static GameplayFacade* New_ctor();
  }; // GameplayFacade
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayFacade*, "", "GameplayFacade");
#pragma pack(pop)
