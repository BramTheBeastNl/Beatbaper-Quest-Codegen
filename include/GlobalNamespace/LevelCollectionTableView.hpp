// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: TableView because it is already included!
  // Forward declaring type: AlphabetScrollbar
  class AlphabetScrollbar;
  // Forward declaring type: TableCell
  class TableCell;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LevelListTableCell
  class LevelListTableCell;
  // Forward declaring type: LevelPackHeaderTableCell
  class LevelPackHeaderTableCell;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: LevelCollectionTableView
  class LevelCollectionTableView : public UnityEngine::MonoBehaviour/*, public HMUI::TableView::IDataSource*/ {
    public:
    // private HMUI.TableView _tableView
    // Size: 0x8
    // Offset: 0x18
    HMUI::TableView* tableView;
    // Field size check
    static_assert(sizeof(HMUI::TableView*) == 0x8);
    // private HMUI.AlphabetScrollbar _alphabetScrollbar
    // Size: 0x8
    // Offset: 0x20
    HMUI::AlphabetScrollbar* alphabetScrollbar;
    // Field size check
    static_assert(sizeof(HMUI::AlphabetScrollbar*) == 0x8);
    // private LevelListTableCell _levelCellPrefab
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::LevelListTableCell* levelCellPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelListTableCell*) == 0x8);
    // private System.String _levelCellsReuseIdentifier
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* levelCellsReuseIdentifier;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private LevelPackHeaderTableCell _packCellPrefab
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::LevelPackHeaderTableCell* packCellPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelPackHeaderTableCell*) == 0x8);
    // private System.String _packCellsReuseIdentifier
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* packCellsReuseIdentifier;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Single _cellHeight
    // Size: 0x4
    // Offset: 0x48
    float cellHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _showAlphabetScrollbarLevelCountThreshold
    // Size: 0x4
    // Offset: 0x4C
    int showAlphabetScrollbarLevelCountThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [InjectAttribute] Offset: 0xD30C08
    // private AdditionalContentModel _additionalContentModel
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::AdditionalContentModel* additionalContentModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AdditionalContentModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD30C18
    // private System.Action`2<LevelCollectionTableView,IPreviewBeatmapLevel> didSelectLevelEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>* didSelectLevelEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD30C28
    // private System.Action`1<LevelCollectionTableView> didSelectHeaderEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_1<GlobalNamespace::LevelCollectionTableView*>* didSelectHeaderEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::LevelCollectionTableView*>*) == 0x8);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x68
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: previewBeatmapLevels
    char __padding11[0x7] = {};
    // private IPreviewBeatmapLevel[] _previewBeatmapLevels
    // Size: 0x8
    // Offset: 0x70
    ::Array<GlobalNamespace::IPreviewBeatmapLevel*>* previewBeatmapLevels;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::IPreviewBeatmapLevel*>*) == 0x8);
    // private UnityEngine.Sprite _headerSprite
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::Sprite* headerSprite;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // private System.String _headerText
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppString* headerText;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean _showLevelPackHeader
    // Size: 0x1
    // Offset: 0x88
    bool showLevelPackHeader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showLevelPackHeader and: favoriteLevelIds
    char __padding15[0x7] = {};
    // private System.Collections.Generic.HashSet`1<System.String> _favoriteLevelIds
    // Size: 0x8
    // Offset: 0x90
    System::Collections::Generic::HashSet_1<::Il2CppString*>* favoriteLevelIds;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<::Il2CppString*>*) == 0x8);
    // private System.Int32 _selectedRow
    // Size: 0x4
    // Offset: 0x98
    int selectedRow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: selectedRow and: selectedPreviewBeatmapLevel
    char __padding17[0x4] = {};
    // private IPreviewBeatmapLevel _selectedPreviewBeatmapLevel
    // Size: 0x8
    // Offset: 0xA0
    GlobalNamespace::IPreviewBeatmapLevel* selectedPreviewBeatmapLevel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IPreviewBeatmapLevel*) == 0x8);
    // Creating value type constructor for type: LevelCollectionTableView
    LevelCollectionTableView(HMUI::TableView* tableView_ = {}, HMUI::AlphabetScrollbar* alphabetScrollbar_ = {}, GlobalNamespace::LevelListTableCell* levelCellPrefab_ = {}, ::Il2CppString* levelCellsReuseIdentifier_ = {}, GlobalNamespace::LevelPackHeaderTableCell* packCellPrefab_ = {}, ::Il2CppString* packCellsReuseIdentifier_ = {}, float cellHeight_ = {}, int showAlphabetScrollbarLevelCountThreshold_ = {}, GlobalNamespace::AdditionalContentModel* additionalContentModel_ = {}, System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>* didSelectLevelEvent_ = {}, System::Action_1<GlobalNamespace::LevelCollectionTableView*>* didSelectHeaderEvent_ = {}, bool isInitialized_ = {}, ::Array<GlobalNamespace::IPreviewBeatmapLevel*>* previewBeatmapLevels_ = {}, UnityEngine::Sprite* headerSprite_ = {}, ::Il2CppString* headerText_ = {}, bool showLevelPackHeader_ = {}, System::Collections::Generic::HashSet_1<::Il2CppString*>* favoriteLevelIds_ = {}, int selectedRow_ = {}, GlobalNamespace::IPreviewBeatmapLevel* selectedPreviewBeatmapLevel_ = {}) noexcept : tableView{tableView_}, alphabetScrollbar{alphabetScrollbar_}, levelCellPrefab{levelCellPrefab_}, levelCellsReuseIdentifier{levelCellsReuseIdentifier_}, packCellPrefab{packCellPrefab_}, packCellsReuseIdentifier{packCellsReuseIdentifier_}, cellHeight{cellHeight_}, showAlphabetScrollbarLevelCountThreshold{showAlphabetScrollbarLevelCountThreshold_}, additionalContentModel{additionalContentModel_}, didSelectLevelEvent{didSelectLevelEvent_}, didSelectHeaderEvent{didSelectHeaderEvent_}, isInitialized{isInitialized_}, previewBeatmapLevels{previewBeatmapLevels_}, headerSprite{headerSprite_}, headerText{headerText_}, showLevelPackHeader{showLevelPackHeader_}, favoriteLevelIds{favoriteLevelIds_}, selectedRow{selectedRow_}, selectedPreviewBeatmapLevel{selectedPreviewBeatmapLevel_} {}
    // Creating interface conversion operator: operator HMUI::TableView::IDataSource
    operator HMUI::TableView::IDataSource() noexcept {
      return *reinterpret_cast<HMUI::TableView::IDataSource*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didSelectLevelEvent(System.Action`2<LevelCollectionTableView,IPreviewBeatmapLevel> value)
    // Offset: 0x109351C
    void add_didSelectLevelEvent(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>* value);
    // public System.Void remove_didSelectLevelEvent(System.Action`2<LevelCollectionTableView,IPreviewBeatmapLevel> value)
    // Offset: 0x10935C0
    void remove_didSelectLevelEvent(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>* value);
    // public System.Void add_didSelectHeaderEvent(System.Action`1<LevelCollectionTableView> value)
    // Offset: 0x1093664
    void add_didSelectHeaderEvent(System::Action_1<GlobalNamespace::LevelCollectionTableView*>* value);
    // public System.Void remove_didSelectHeaderEvent(System.Action`1<LevelCollectionTableView> value)
    // Offset: 0x1093708
    void remove_didSelectHeaderEvent(System::Action_1<GlobalNamespace::LevelCollectionTableView*>* value);
    // public System.Void Init(System.String headerText, UnityEngine.Sprite headerSprite)
    // Offset: 0x10937AC
    void Init(::Il2CppString* headerText, UnityEngine::Sprite* headerSprite);
    // private System.Void Init()
    // Offset: 0x10937F8
    void Init();
    // public System.Void SetData(IPreviewBeatmapLevel[] previewBeatmapLevels, System.Collections.Generic.HashSet`1<System.String> favoriteLevelIds, System.Boolean beatmapLevelsAreSorted)
    // Offset: 0x10938C4
    void SetData(::Array<GlobalNamespace::IPreviewBeatmapLevel*>* previewBeatmapLevels, System::Collections::Generic::HashSet_1<::Il2CppString*>* favoriteLevelIds, bool beatmapLevelsAreSorted);
    // public System.Void RefreshFavorites(System.Collections.Generic.HashSet`1<System.String> favoriteLevelIds)
    // Offset: 0x1093AC8
    void RefreshFavorites(System::Collections::Generic::HashSet_1<::Il2CppString*>* favoriteLevelIds);
    // protected System.Void OnEnable()
    // Offset: 0x1093B88
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1093C14
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x1093CA0
    void OnDestroy();
    // public System.Single CellSize()
    // Offset: 0x1093D7C
    float CellSize();
    // public System.Int32 NumberOfCells()
    // Offset: 0x1093D84
    int NumberOfCells();
    // public HMUI.TableCell CellForIdx(HMUI.TableView tableView, System.Int32 row)
    // Offset: 0x1093DA4
    HMUI::TableCell* CellForIdx(HMUI::TableView* tableView, int row);
    // private System.Void HandleDidSelectRowEvent(HMUI.TableView tableView, System.Int32 row)
    // Offset: 0x10942C8
    void HandleDidSelectRowEvent(HMUI::TableView* tableView, int row);
    // private System.Void HandleAdditionalContentModelDidInvalidateData()
    // Offset: 0x10943B0
    void HandleAdditionalContentModelDidInvalidateData();
    // public System.Void CancelAsyncOperations()
    // Offset: 0x1094480
    void CancelAsyncOperations();
    // public System.Void RefreshLevelsAvailability()
    // Offset: 0x10947AC
    void RefreshLevelsAvailability();
    // public System.Void SelectLevelPackHeaderCell()
    // Offset: 0x1094B84
    void SelectLevelPackHeaderCell();
    // public System.Void ClearSelection()
    // Offset: 0x1094BB0
    void ClearSelection();
    // public System.Void SelectLevel(IPreviewBeatmapLevel beatmapLevel)
    // Offset: 0x1094BE0
    void SelectLevel(GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel);
    // public System.Void .ctor()
    // Offset: 0x1094DB0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelCollectionTableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelCollectionTableView*, creationType>()));
    }
  }; // LevelCollectionTableView
  #pragma pack(pop)
  static check_size<sizeof(LevelCollectionTableView), 160 + sizeof(GlobalNamespace::IPreviewBeatmapLevel*)> __GlobalNamespace_LevelCollectionTableViewSizeCheck;
  static_assert(sizeof(LevelCollectionTableView) == 0xA8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LevelCollectionTableView*, "", "LevelCollectionTableView");
