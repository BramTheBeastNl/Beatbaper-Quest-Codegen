// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IBitMask`1
#include "GlobalNamespace/IBitMask_1.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: SortedSet`1<T>
  template<typename T>
  class SortedSet_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BitMaskSparse
  class BitMaskSparse : public ::Il2CppObject/*, public GlobalNamespace::IBitMask_1<GlobalNamespace::BitMaskSparse*>, public LiteNetLib::Utils::INetSerializable*/ {
    public:
    // Nested type: GlobalNamespace::BitMaskSparse::$$c
    class $$c;
    // [CompilerGeneratedAttribute] Offset: 0xDE286C
    // private readonly System.Int32 <bitCount>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int bitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: bitCount and: sparseSet
    char __padding0[0x4] = {};
    // private readonly System.Collections.Generic.SortedSet`1<System.UInt32> _sparseSet
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::SortedSet_1<uint>* sparseSet;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::SortedSet_1<uint>*) == 0x8);
    // Creating value type constructor for type: BitMaskSparse
    BitMaskSparse(int bitCount_ = {}, System::Collections::Generic::SortedSet_1<uint>* sparseSet_ = {}) noexcept : bitCount{bitCount_}, sparseSet{sparseSet_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBitMask_1<GlobalNamespace::BitMaskSparse*>
    operator GlobalNamespace::IBitMask_1<GlobalNamespace::BitMaskSparse*>() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBitMask_1<GlobalNamespace::BitMaskSparse*>*>(this);
    }
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetSerializable
    operator LiteNetLib::Utils::INetSerializable() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetSerializable*>(this);
    }
    // public System.Int32 get_bitCount()
    // Offset: 0x232C990
    int get_bitCount();
    // public System.Void .ctor(System.Int32 bitCount)
    // Offset: 0x232B064
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BitMaskSparse* New_ctor(int bitCount) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BitMaskSparse*, creationType>(bitCount)));
    }
    // public System.Boolean Equals(BitMaskSparse other)
    // Offset: 0x232C998
    bool Equals(GlobalNamespace::BitMaskSparse* other);
    // public BitMaskSparse SetBits(System.Int32 offset, System.UInt64 bits)
    // Offset: 0x232CA18
    GlobalNamespace::BitMaskSparse* SetBits(int offset, uint64_t bits);
    // public System.UInt64 GetBits(System.Int32 offset, System.Int32 count)
    // Offset: 0x232CAB0
    uint64_t GetBits(int offset, int count);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x232B39C
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x232B500
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.String ToString()
    // Offset: 0x232CB4C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // BitMaskSparse
  #pragma pack(pop)
  static check_size<sizeof(BitMaskSparse), 24 + sizeof(System::Collections::Generic::SortedSet_1<uint>*)> __GlobalNamespace_BitMaskSparseSizeCheck;
  static_assert(sizeof(BitMaskSparse) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BitMaskSparse*, "", "BitMaskSparse");
