// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerPositionDisplay
  class MultiplayerPositionDisplay : public UnityEngine::MonoBehaviour {
    public:
    // private TMPro.TextMeshPro _text
    // Size: 0x8
    // Offset: 0x18
    TMPro::TextMeshPro* text;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x20
    UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _leadingColor
    // Size: 0x10
    // Offset: 0x30
    UnityEngine::Color leadingColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _failedColor
    // Size: 0x10
    // Offset: 0x40
    UnityEngine::Color failedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private System.Single _fadeInDuration
    // Size: 0x4
    // Offset: 0x50
    float fadeInDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _crossFadeDuration
    // Size: 0x4
    // Offset: 0x54
    float crossFadeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadeOutDuration
    // Size: 0x4
    // Offset: 0x58
    float fadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fadeOutDuration and: scoreProvider
    char __padding6[0x4] = {};
    // [InjectAttribute] Offset: 0xE1E890
    // private readonly MultiplayerScoreProvider _scoreProvider
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::MultiplayerScoreProvider* scoreProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreProvider*) == 0x8);
    // [InjectAttribute] Offset: 0xE1E8A0
    // private readonly IConnectedPlayer _connectedPlayer
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // private System.Boolean _wasFirst
    // Size: 0x1
    // Offset: 0x70
    bool wasFirst;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isFailed
    // Size: 0x1
    // Offset: 0x71
    bool isFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _updatingColor
    // Size: 0x1
    // Offset: 0x72
    bool updatingColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updatingColor and: startColor
    char __padding11[0x1] = {};
    // private UnityEngine.Color _startColor
    // Size: 0x10
    // Offset: 0x74
    UnityEngine::Color startColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _targetColor
    // Size: 0x10
    // Offset: 0x84
    UnityEngine::Color targetColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private System.Single _colorAnimationStartTime
    // Size: 0x4
    // Offset: 0x94
    float colorAnimationStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _colorAnimationStartDuration
    // Size: 0x4
    // Offset: 0x98
    float colorAnimationStartDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MultiplayerPositionDisplay
    MultiplayerPositionDisplay(TMPro::TextMeshPro* text_ = {}, UnityEngine::Color normalColor_ = {}, UnityEngine::Color leadingColor_ = {}, UnityEngine::Color failedColor_ = {}, float fadeInDuration_ = {}, float crossFadeDuration_ = {}, float fadeOutDuration_ = {}, GlobalNamespace::MultiplayerScoreProvider* scoreProvider_ = {}, GlobalNamespace::IConnectedPlayer* connectedPlayer_ = {}, bool wasFirst_ = {}, bool isFailed_ = {}, bool updatingColor_ = {}, UnityEngine::Color startColor_ = {}, UnityEngine::Color targetColor_ = {}, float colorAnimationStartTime_ = {}, float colorAnimationStartDuration_ = {}) noexcept : text{text_}, normalColor{normalColor_}, leadingColor{leadingColor_}, failedColor{failedColor_}, fadeInDuration{fadeInDuration_}, crossFadeDuration{crossFadeDuration_}, fadeOutDuration{fadeOutDuration_}, scoreProvider{scoreProvider_}, connectedPlayer{connectedPlayer_}, wasFirst{wasFirst_}, isFailed{isFailed_}, updatingColor{updatingColor_}, startColor{startColor_}, targetColor{targetColor_}, colorAnimationStartTime{colorAnimationStartTime_}, colorAnimationStartDuration{colorAnimationStartDuration_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x100C2EC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x100C4BC
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x100C6D0
    void Update();
    // private System.Void UpdateColors()
    // Offset: 0x100C72C
    void UpdateColors();
    // private System.Void UpdatePosition()
    // Offset: 0x100C7CC
    void UpdatePosition();
    // private System.Void HandlePlayerFailed()
    // Offset: 0x100C944
    void HandlePlayerFailed();
    // private System.Void HandleFirstPlayerDidChange(MultiplayerScoreProvider/RankedPlayer obj)
    // Offset: 0x100CA28
    void HandleFirstPlayerDidChange(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer* obj);
    // private System.Void ChangeColor(UnityEngine.Color toColor, System.Single duration)
    // Offset: 0x100C648
    void ChangeColor(UnityEngine::Color toColor, float duration);
    // public System.Void .ctor()
    // Offset: 0x100CADC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerPositionDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionDisplay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerPositionDisplay*, creationType>()));
    }
  }; // MultiplayerPositionDisplay
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerPositionDisplay), 152 + sizeof(float)> __GlobalNamespace_MultiplayerPositionDisplaySizeCheck;
  static_assert(sizeof(MultiplayerPositionDisplay) == 0x9C);
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::OnDestroy
  // Il2CppName: OnDestroy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::OnDestroy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::Update
  // Il2CppName: Update
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::Update)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::UpdateColors
  // Il2CppName: UpdateColors
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::UpdateColors)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "UpdateColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::UpdatePosition
  // Il2CppName: UpdatePosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::UpdatePosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "UpdatePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::HandlePlayerFailed
  // Il2CppName: HandlePlayerFailed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::HandlePlayerFailed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "HandlePlayerFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::HandleFirstPlayerDidChange
  // Il2CppName: HandleFirstPlayerDidChange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)(GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*)>(&MultiplayerPositionDisplay::HandleFirstPlayerDidChange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "HandleFirstPlayerDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::ChangeColor
  // Il2CppName: ChangeColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)(UnityEngine::Color, float)>(&MultiplayerPositionDisplay::ChangeColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), "ChangeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: MultiplayerPositionDisplay::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionDisplay::*)()>(&MultiplayerPositionDisplay::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionDisplay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerPositionDisplay*, "", "MultiplayerPositionDisplay");
