// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: StandardLevelInfoSaveData
  class StandardLevelInfoSaveData;
  // Forward declaring type: IAudioClipAsyncLoader
  class IAudioClipAsyncLoader;
  // Forward declaring type: ISpriteAsyncLoader
  class ISpriteAsyncLoader;
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
  // Forward declaring type: PreviewDifficultyBeatmapSet
  class PreviewDifficultyBeatmapSet;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: CustomPreviewBeatmapLevel
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomPreviewBeatmapLevel : public ::Il2CppObject/*, public GlobalNamespace::IPreviewBeatmapLevel*/ {
    public:
    // Nested type: GlobalNamespace::CustomPreviewBeatmapLevel::$GetPreviewAudioClipAsync$d__60
    struct $GetPreviewAudioClipAsync$d__60;
    // Nested type: GlobalNamespace::CustomPreviewBeatmapLevel::$GetCoverImageAsync$d__61
    struct $GetCoverImageAsync$d__61;
    // private StandardLevelInfoSaveData _standardLevelInfoSaveData
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::StandardLevelInfoSaveData* standardLevelInfoSaveData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::StandardLevelInfoSaveData*) == 0x8);
    // private System.String _customLevelPath
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* customLevelPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private IAudioClipAsyncLoader _audioClipAsyncLoader
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IAudioClipAsyncLoader* audioClipAsyncLoader;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAudioClipAsyncLoader*) == 0x8);
    // private ISpriteAsyncLoader _spriteAsyncLoader
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ISpriteAsyncLoader* spriteAsyncLoader;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ISpriteAsyncLoader*) == 0x8);
    // private System.String _levelID
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* levelID;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _songName
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* songName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _songSubName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* songSubName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _songAuthorName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* songAuthorName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _levelAuthorName
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* levelAuthorName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.AudioClip _previewAudioClip
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::AudioClip* previewAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private System.Single _beatsPerMinute
    // Size: 0x4
    // Offset: 0x60
    float beatsPerMinute;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _songTimeOffset
    // Size: 0x4
    // Offset: 0x64
    float songTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shuffle
    // Size: 0x4
    // Offset: 0x68
    float shuffle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shufflePeriod
    // Size: 0x4
    // Offset: 0x6C
    float shufflePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previewStartTime
    // Size: 0x4
    // Offset: 0x70
    float previewStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previewDuration
    // Size: 0x4
    // Offset: 0x74
    float previewDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _songDuration
    // Size: 0x4
    // Offset: 0x78
    float songDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: songDuration and: defaultCoverImage
    char __padding16[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xE00D6C
    // private UnityEngine.Sprite _defaultCoverImage
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::Sprite* defaultCoverImage;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xE00DB8
    // private UnityEngine.Sprite _coverImage
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::Sprite* coverImage;
    // Field size check
    static_assert(sizeof(UnityEngine::Sprite*) == 0x8);
    // private EnvironmentInfoSO _environmentInfo
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::EnvironmentInfoSO* environmentInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private PreviewDifficultyBeatmapSet[] _previewDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0xA0
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* previewDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*) == 0x8);
    // Creating value type constructor for type: CustomPreviewBeatmapLevel
    CustomPreviewBeatmapLevel(GlobalNamespace::StandardLevelInfoSaveData* standardLevelInfoSaveData_ = {}, ::Il2CppString* customLevelPath_ = {}, GlobalNamespace::IAudioClipAsyncLoader* audioClipAsyncLoader_ = {}, GlobalNamespace::ISpriteAsyncLoader* spriteAsyncLoader_ = {}, ::Il2CppString* levelID_ = {}, ::Il2CppString* songName_ = {}, ::Il2CppString* songSubName_ = {}, ::Il2CppString* songAuthorName_ = {}, ::Il2CppString* levelAuthorName_ = {}, UnityEngine::AudioClip* previewAudioClip_ = {}, float beatsPerMinute_ = {}, float songTimeOffset_ = {}, float shuffle_ = {}, float shufflePeriod_ = {}, float previewStartTime_ = {}, float previewDuration_ = {}, float songDuration_ = {}, UnityEngine::Sprite* defaultCoverImage_ = {}, UnityEngine::Sprite* coverImage_ = {}, GlobalNamespace::EnvironmentInfoSO* environmentInfo_ = {}, GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo_ = {}, ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* previewDifficultyBeatmapSets_ = {}) noexcept : standardLevelInfoSaveData{standardLevelInfoSaveData_}, customLevelPath{customLevelPath_}, audioClipAsyncLoader{audioClipAsyncLoader_}, spriteAsyncLoader{spriteAsyncLoader_}, levelID{levelID_}, songName{songName_}, songSubName{songSubName_}, songAuthorName{songAuthorName_}, levelAuthorName{levelAuthorName_}, previewAudioClip{previewAudioClip_}, beatsPerMinute{beatsPerMinute_}, songTimeOffset{songTimeOffset_}, shuffle{shuffle_}, shufflePeriod{shufflePeriod_}, previewStartTime{previewStartTime_}, previewDuration{previewDuration_}, songDuration{songDuration_}, defaultCoverImage{defaultCoverImage_}, coverImage{coverImage_}, environmentInfo{environmentInfo_}, allDirectionsEnvironmentInfo{allDirectionsEnvironmentInfo_}, previewDifficultyBeatmapSets{previewDifficultyBeatmapSets_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IPreviewBeatmapLevel
    operator GlobalNamespace::IPreviewBeatmapLevel() noexcept {
      return *reinterpret_cast<GlobalNamespace::IPreviewBeatmapLevel*>(this);
    }
    // Get instance field: private StandardLevelInfoSaveData _standardLevelInfoSaveData
    GlobalNamespace::StandardLevelInfoSaveData* _get__standardLevelInfoSaveData();
    // Set instance field: private StandardLevelInfoSaveData _standardLevelInfoSaveData
    void _set__standardLevelInfoSaveData(GlobalNamespace::StandardLevelInfoSaveData* value);
    // Get instance field: private System.String _customLevelPath
    ::Il2CppString* _get__customLevelPath();
    // Set instance field: private System.String _customLevelPath
    void _set__customLevelPath(::Il2CppString* value);
    // Get instance field: private IAudioClipAsyncLoader _audioClipAsyncLoader
    GlobalNamespace::IAudioClipAsyncLoader* _get__audioClipAsyncLoader();
    // Set instance field: private IAudioClipAsyncLoader _audioClipAsyncLoader
    void _set__audioClipAsyncLoader(GlobalNamespace::IAudioClipAsyncLoader* value);
    // Get instance field: private ISpriteAsyncLoader _spriteAsyncLoader
    GlobalNamespace::ISpriteAsyncLoader* _get__spriteAsyncLoader();
    // Set instance field: private ISpriteAsyncLoader _spriteAsyncLoader
    void _set__spriteAsyncLoader(GlobalNamespace::ISpriteAsyncLoader* value);
    // Get instance field: private System.String _levelID
    ::Il2CppString* _get__levelID();
    // Set instance field: private System.String _levelID
    void _set__levelID(::Il2CppString* value);
    // Get instance field: private System.String _songName
    ::Il2CppString* _get__songName();
    // Set instance field: private System.String _songName
    void _set__songName(::Il2CppString* value);
    // Get instance field: private System.String _songSubName
    ::Il2CppString* _get__songSubName();
    // Set instance field: private System.String _songSubName
    void _set__songSubName(::Il2CppString* value);
    // Get instance field: private System.String _songAuthorName
    ::Il2CppString* _get__songAuthorName();
    // Set instance field: private System.String _songAuthorName
    void _set__songAuthorName(::Il2CppString* value);
    // Get instance field: private System.String _levelAuthorName
    ::Il2CppString* _get__levelAuthorName();
    // Set instance field: private System.String _levelAuthorName
    void _set__levelAuthorName(::Il2CppString* value);
    // Get instance field: private UnityEngine.AudioClip _previewAudioClip
    UnityEngine::AudioClip* _get__previewAudioClip();
    // Set instance field: private UnityEngine.AudioClip _previewAudioClip
    void _set__previewAudioClip(UnityEngine::AudioClip* value);
    // Get instance field: private System.Single _beatsPerMinute
    float _get__beatsPerMinute();
    // Set instance field: private System.Single _beatsPerMinute
    void _set__beatsPerMinute(float value);
    // Get instance field: private System.Single _songTimeOffset
    float _get__songTimeOffset();
    // Set instance field: private System.Single _songTimeOffset
    void _set__songTimeOffset(float value);
    // Get instance field: private System.Single _shuffle
    float _get__shuffle();
    // Set instance field: private System.Single _shuffle
    void _set__shuffle(float value);
    // Get instance field: private System.Single _shufflePeriod
    float _get__shufflePeriod();
    // Set instance field: private System.Single _shufflePeriod
    void _set__shufflePeriod(float value);
    // Get instance field: private System.Single _previewStartTime
    float _get__previewStartTime();
    // Set instance field: private System.Single _previewStartTime
    void _set__previewStartTime(float value);
    // Get instance field: private System.Single _previewDuration
    float _get__previewDuration();
    // Set instance field: private System.Single _previewDuration
    void _set__previewDuration(float value);
    // Get instance field: private System.Single _songDuration
    float _get__songDuration();
    // Set instance field: private System.Single _songDuration
    void _set__songDuration(float value);
    // Get instance field: private UnityEngine.Sprite _defaultCoverImage
    UnityEngine::Sprite* _get__defaultCoverImage();
    // Set instance field: private UnityEngine.Sprite _defaultCoverImage
    void _set__defaultCoverImage(UnityEngine::Sprite* value);
    // Get instance field: private UnityEngine.Sprite _coverImage
    UnityEngine::Sprite* _get__coverImage();
    // Set instance field: private UnityEngine.Sprite _coverImage
    void _set__coverImage(UnityEngine::Sprite* value);
    // Get instance field: private EnvironmentInfoSO _environmentInfo
    GlobalNamespace::EnvironmentInfoSO* _get__environmentInfo();
    // Set instance field: private EnvironmentInfoSO _environmentInfo
    void _set__environmentInfo(GlobalNamespace::EnvironmentInfoSO* value);
    // Get instance field: private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    GlobalNamespace::EnvironmentInfoSO* _get__allDirectionsEnvironmentInfo();
    // Set instance field: private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    void _set__allDirectionsEnvironmentInfo(GlobalNamespace::EnvironmentInfoSO* value);
    // Get instance field: private PreviewDifficultyBeatmapSet[] _previewDifficultyBeatmapSets
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* _get__previewDifficultyBeatmapSets();
    // Set instance field: private PreviewDifficultyBeatmapSet[] _previewDifficultyBeatmapSets
    void _set__previewDifficultyBeatmapSets(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* value);
    // public IAudioClipAsyncLoader get_audioClipAsyncLoader()
    // Offset: 0x1084F20
    GlobalNamespace::IAudioClipAsyncLoader* get_audioClipAsyncLoader();
    // public ISpriteAsyncLoader get_spriteAsyncLoader()
    // Offset: 0x1084F28
    GlobalNamespace::ISpriteAsyncLoader* get_spriteAsyncLoader();
    // public StandardLevelInfoSaveData get_standardLevelInfoSaveData()
    // Offset: 0x1084F30
    GlobalNamespace::StandardLevelInfoSaveData* get_standardLevelInfoSaveData();
    // public System.String get_customLevelPath()
    // Offset: 0x1084F38
    ::Il2CppString* get_customLevelPath();
    // public System.String get_levelID()
    // Offset: 0x1084F40
    ::Il2CppString* get_levelID();
    // public System.String get_songName()
    // Offset: 0x1084F48
    ::Il2CppString* get_songName();
    // public System.String get_songSubName()
    // Offset: 0x1084F50
    ::Il2CppString* get_songSubName();
    // public System.String get_songAuthorName()
    // Offset: 0x1084F58
    ::Il2CppString* get_songAuthorName();
    // public System.String get_levelAuthorName()
    // Offset: 0x1084F60
    ::Il2CppString* get_levelAuthorName();
    // public System.Single get_beatsPerMinute()
    // Offset: 0x1084F68
    float get_beatsPerMinute();
    // public System.Single get_songTimeOffset()
    // Offset: 0x1084F70
    float get_songTimeOffset();
    // public System.Single get_songDuration()
    // Offset: 0x1084F78
    float get_songDuration();
    // public System.Single get_shuffle()
    // Offset: 0x1084F80
    float get_shuffle();
    // public System.Single get_shufflePeriod()
    // Offset: 0x1084F88
    float get_shufflePeriod();
    // public System.Single get_previewStartTime()
    // Offset: 0x1084F90
    float get_previewStartTime();
    // public UnityEngine.Sprite get_defaultCoverImage()
    // Offset: 0x1084F98
    UnityEngine::Sprite* get_defaultCoverImage();
    // public System.Single get_previewDuration()
    // Offset: 0x1084FA0
    float get_previewDuration();
    // public EnvironmentInfoSO get_environmentInfo()
    // Offset: 0x1084FA8
    GlobalNamespace::EnvironmentInfoSO* get_environmentInfo();
    // public EnvironmentInfoSO get_allDirectionsEnvironmentInfo()
    // Offset: 0x1084FB0
    GlobalNamespace::EnvironmentInfoSO* get_allDirectionsEnvironmentInfo();
    // public PreviewDifficultyBeatmapSet[] get_previewDifficultyBeatmapSets()
    // Offset: 0x1085200
    ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* get_previewDifficultyBeatmapSets();
    // public System.Void .ctor(UnityEngine.Sprite defaultCoverImage, StandardLevelInfoSaveData standardLevelInfoSaveData, System.String customLevelPath, IAudioClipAsyncLoader audioClipAsyncLoader, ISpriteAsyncLoader spriteAsyncLoader, System.String levelID, System.String songName, System.String songSubName, System.String songAuthorName, System.String levelAuthorName, System.Single beatsPerMinute, System.Single songTimeOffset, System.Single shuffle, System.Single shufflePeriod, System.Single previewStartTime, System.Single previewDuration, EnvironmentInfoSO environmentInfo, EnvironmentInfoSO allDirectionsEnvironmentInfo, PreviewDifficultyBeatmapSet[] previewDifficultyBeatmapSets)
    // Offset: 0x1084C00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomPreviewBeatmapLevel* New_ctor(UnityEngine::Sprite* defaultCoverImage, GlobalNamespace::StandardLevelInfoSaveData* standardLevelInfoSaveData, ::Il2CppString* customLevelPath, GlobalNamespace::IAudioClipAsyncLoader* audioClipAsyncLoader, GlobalNamespace::ISpriteAsyncLoader* spriteAsyncLoader, ::Il2CppString* levelID, ::Il2CppString* songName, ::Il2CppString* songSubName, ::Il2CppString* songAuthorName, ::Il2CppString* levelAuthorName, float beatsPerMinute, float songTimeOffset, float shuffle, float shufflePeriod, float previewStartTime, float previewDuration, GlobalNamespace::EnvironmentInfoSO* environmentInfo, GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo, ::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* previewDifficultyBeatmapSets) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CustomPreviewBeatmapLevel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomPreviewBeatmapLevel*, creationType>(defaultCoverImage, standardLevelInfoSaveData, customLevelPath, audioClipAsyncLoader, spriteAsyncLoader, levelID, songName, songSubName, songAuthorName, levelAuthorName, beatsPerMinute, songTimeOffset, shuffle, shufflePeriod, previewStartTime, previewDuration, environmentInfo, allDirectionsEnvironmentInfo, previewDifficultyBeatmapSets)));
    }
    // public System.Threading.Tasks.Task`1<UnityEngine.AudioClip> GetPreviewAudioClipAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1084FB8
    System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* GetPreviewAudioClipAsync(System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<UnityEngine.Sprite> GetCoverImageAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x10850DC
    System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* GetCoverImageAsync(System::Threading::CancellationToken cancellationToken);
  }; // CustomPreviewBeatmapLevel
  #pragma pack(pop)
  static check_size<sizeof(CustomPreviewBeatmapLevel), 160 + sizeof(::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>*)> __GlobalNamespace_CustomPreviewBeatmapLevelSizeCheck;
  static_assert(sizeof(CustomPreviewBeatmapLevel) == 0xA8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::CustomPreviewBeatmapLevel*, "", "CustomPreviewBeatmapLevel");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_audioClipAsyncLoader
// Il2CppName: get_audioClipAsyncLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IAudioClipAsyncLoader* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_audioClipAsyncLoader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_audioClipAsyncLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_spriteAsyncLoader
// Il2CppName: get_spriteAsyncLoader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ISpriteAsyncLoader* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_spriteAsyncLoader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_spriteAsyncLoader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_standardLevelInfoSaveData
// Il2CppName: get_standardLevelInfoSaveData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::StandardLevelInfoSaveData* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_standardLevelInfoSaveData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_standardLevelInfoSaveData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_customLevelPath
// Il2CppName: get_customLevelPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_customLevelPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_customLevelPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_levelID
// Il2CppName: get_levelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_levelID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_levelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_songName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_songSubName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_songAuthorName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_levelAuthorName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_beatsPerMinute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_songTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_songDuration
// Il2CppName: get_songDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_songDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_songDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_shuffle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_shufflePeriod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_previewStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_defaultCoverImage
// Il2CppName: get_defaultCoverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_defaultCoverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_defaultCoverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_environmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo
// Il2CppName: get_allDirectionsEnvironmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_allDirectionsEnvironmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDifficultyBeatmapSets
// Il2CppName: get_previewDifficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::PreviewDifficultyBeatmapSet*>* (GlobalNamespace::CustomPreviewBeatmapLevel::*)()>(&GlobalNamespace::CustomPreviewBeatmapLevel::get_previewDifficultyBeatmapSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::GetPreviewAudioClipAsync
// Il2CppName: GetPreviewAudioClipAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::AudioClip*>* (GlobalNamespace::CustomPreviewBeatmapLevel::*)(System::Threading::CancellationToken)>(&GlobalNamespace::CustomPreviewBeatmapLevel::GetPreviewAudioClipAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomPreviewBeatmapLevel::GetCoverImageAsync
// Il2CppName: GetCoverImageAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<UnityEngine::Sprite*>* (GlobalNamespace::CustomPreviewBeatmapLevel::*)(System::Threading::CancellationToken)>(&GlobalNamespace::CustomPreviewBeatmapLevel::GetCoverImageAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomPreviewBeatmapLevel*), "GetCoverImageAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
