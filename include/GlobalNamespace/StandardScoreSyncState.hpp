// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IStateTable`2
#include "GlobalNamespace/IStateTable_2.hpp"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: IEquatableByReference`1
#include "GlobalNamespace/IEquatableByReference_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Score because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: StandardScoreSyncState
  struct StandardScoreSyncState : public System::ValueType, public GlobalNamespace::IStateTable_2<GlobalNamespace::StandardScoreSyncState::Score, int>, public LiteNetLib::Utils::INetSerializable, public GlobalNamespace::IEquatableByReference_1<GlobalNamespace::StandardScoreSyncState> {
    public:
    // Nested type: GlobalNamespace::StandardScoreSyncState::Score
    struct Score;
    // Autogenerated type: StandardScoreSyncState/Score
    struct Score : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Score
      constexpr Score(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public StandardScoreSyncState/Score ModifiedScore
      static constexpr const int ModifiedScore = 0;
      // Get static field: static public StandardScoreSyncState/Score ModifiedScore
      static GlobalNamespace::StandardScoreSyncState::Score _get_ModifiedScore();
      // Set static field: static public StandardScoreSyncState/Score ModifiedScore
      static void _set_ModifiedScore(GlobalNamespace::StandardScoreSyncState::Score value);
      // static field const value: static public StandardScoreSyncState/Score RawScore
      static constexpr const int RawScore = 1;
      // Get static field: static public StandardScoreSyncState/Score RawScore
      static GlobalNamespace::StandardScoreSyncState::Score _get_RawScore();
      // Set static field: static public StandardScoreSyncState/Score RawScore
      static void _set_RawScore(GlobalNamespace::StandardScoreSyncState::Score value);
      // static field const value: static public StandardScoreSyncState/Score ImmediateMaxPossibleRawScore
      static constexpr const int ImmediateMaxPossibleRawScore = 2;
      // Get static field: static public StandardScoreSyncState/Score ImmediateMaxPossibleRawScore
      static GlobalNamespace::StandardScoreSyncState::Score _get_ImmediateMaxPossibleRawScore();
      // Set static field: static public StandardScoreSyncState/Score ImmediateMaxPossibleRawScore
      static void _set_ImmediateMaxPossibleRawScore(GlobalNamespace::StandardScoreSyncState::Score value);
      // static field const value: static public StandardScoreSyncState/Score Combo
      static constexpr const int Combo = 3;
      // Get static field: static public StandardScoreSyncState/Score Combo
      static GlobalNamespace::StandardScoreSyncState::Score _get_Combo();
      // Set static field: static public StandardScoreSyncState/Score Combo
      static void _set_Combo(GlobalNamespace::StandardScoreSyncState::Score value);
      // static field const value: static public StandardScoreSyncState/Score Multiplier
      static constexpr const int Multiplier = 4;
      // Get static field: static public StandardScoreSyncState/Score Multiplier
      static GlobalNamespace::StandardScoreSyncState::Score _get_Multiplier();
      // Set static field: static public StandardScoreSyncState/Score Multiplier
      static void _set_Multiplier(GlobalNamespace::StandardScoreSyncState::Score value);
      // static field const value: static public StandardScoreSyncState/Score Count
      static constexpr const int Count = 5;
      // Get static field: static public StandardScoreSyncState/Score Count
      static GlobalNamespace::StandardScoreSyncState::Score _get_Count();
      // Set static field: static public StandardScoreSyncState/Score Count
      static void _set_Count(GlobalNamespace::StandardScoreSyncState::Score value);
    }; // StandardScoreSyncState/Score
    // private System.Int32 _modifiedScore
    // Offset: 0x0
    int modifiedScore;
    // private System.Int32 _rawScore
    // Offset: 0x4
    int rawScore;
    // private System.Int32 _immediateMaxPossibleRawScore
    // Offset: 0x8
    int immediateMaxPossibleRawScore;
    // private System.Int32 _combo
    // Offset: 0xC
    int combo;
    // private System.Int32 _multiplier
    // Offset: 0x10
    int multiplier;
    // Creating value type constructor for type: StandardScoreSyncState
    constexpr StandardScoreSyncState(int modifiedScore_ = {}, int rawScore_ = {}, int immediateMaxPossibleRawScore_ = {}, int combo_ = {}, int multiplier_ = {}) noexcept : modifiedScore{modifiedScore_}, rawScore{rawScore_}, immediateMaxPossibleRawScore{immediateMaxPossibleRawScore_}, combo{combo_}, multiplier{multiplier_} {}
    // static field const value: static private System.Int32 kIntSize
    static constexpr const int kIntSize = 4;
    // Get static field: static private System.Int32 kIntSize
    static int _get_kIntSize();
    // Set static field: static private System.Int32 kIntSize
    static void _set_kIntSize(int value);
    // public System.Boolean Equals(ref StandardScoreSyncState other)
    // Offset: 0xDA14FC
    bool Equals(GlobalNamespace::StandardScoreSyncState& other);
    // public System.Void SetState(StandardScoreSyncState/Score s, System.Int32 value)
    // Offset: 0xDA1454
    // Implemented from: IStateTable`2
    // Base method: System.Void IStateTable_2::SetState(StandardScoreSyncState/Score s, System.Int32 value)
    void SetState(GlobalNamespace::StandardScoreSyncState::Score s, int value);
    // public System.Int32 GetState(StandardScoreSyncState/Score s)
    // Offset: 0xDA149C
    // Implemented from: IStateTable`2
    // Base method: TState IStateTable_2::GetState(StandardScoreSyncState/Score s)
    int GetState(GlobalNamespace::StandardScoreSyncState::Score s);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xDA14EC
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xDA14F4
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
  }; // StandardScoreSyncState
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardScoreSyncState, "", "StandardScoreSyncState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardScoreSyncState::Score, "", "StandardScoreSyncState/Score");
#pragma pack(pop)
