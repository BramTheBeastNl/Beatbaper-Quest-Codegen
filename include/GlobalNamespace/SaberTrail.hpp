// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberTrailRenderer
  class SaberTrailRenderer;
  // Forward declaring type: IBladeMovementData
  class IBladeMovementData;
  // Forward declaring type: TrailElementCollection
  class TrailElementCollection;
  // Forward declaring type: BladeMovementDataElement
  struct BladeMovementDataElement;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: SaberTrail
  class SaberTrail : public UnityEngine::MonoBehaviour {
    public:
    // private SaberTrailRenderer _trailRendererPrefab
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::SaberTrailRenderer* trailRendererPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberTrailRenderer*) == 0x8);
    // [HeaderAttribute] Offset: 0xE1A97C
    // [TooltipAttribute] Offset: 0xE1A97C
    // private System.Single _trailDuration
    // Size: 0x4
    // Offset: 0x20
    float trailDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xE1A9EC
    // private System.Int32 _samplingFrequency
    // Size: 0x4
    // Offset: 0x24
    int samplingFrequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xE1AA38
    // private System.Int32 _granularity
    // Size: 0x4
    // Offset: 0x28
    int granularity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0xE1AA84
    // [TooltipAttribute] Offset: 0xE1AA84
    // private System.Single _whiteSectionMaxDuration
    // Size: 0x4
    // Offset: 0x2C
    float whiteSectionMaxDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _colorOverwrite
    // Size: 0x1
    // Offset: 0x30
    bool colorOverwrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: colorOverwrite and: forcedColor
    char __padding5[0x3] = {};
    // [DrawIfAttribute] Offset: 0xE1AAF8
    // private UnityEngine.Color _forcedColor
    // Size: 0x10
    // Offset: 0x34
    UnityEngine::Color forcedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x44
    UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Padding between fields: color and: movementData
    char __padding7[0x4] = {};
    // private IBladeMovementData _movementData
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::IBladeMovementData* movementData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBladeMovementData*) == 0x8);
    // private System.Single _lastTrailElementTime
    // Size: 0x4
    // Offset: 0x60
    float lastTrailElementTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastTrailElementTime and: trailRenderer
    char __padding9[0x4] = {};
    // private SaberTrailRenderer _trailRenderer
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::SaberTrailRenderer* trailRenderer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberTrailRenderer*) == 0x8);
    // private TrailElementCollection _trailElementCollection
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::TrailElementCollection* trailElementCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::TrailElementCollection*) == 0x8);
    // private System.Single _sampleStep
    // Size: 0x4
    // Offset: 0x78
    float sampleStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _framesPassed
    // Size: 0x4
    // Offset: 0x7C
    int framesPassed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _lastZScale
    // Size: 0x4
    // Offset: 0x80
    float lastZScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _framesToScaleCheck
    // Size: 0x4
    // Offset: 0x84
    int framesToScaleCheck;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _inited
    // Size: 0x1
    // Offset: 0x88
    bool inited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SaberTrail
    SaberTrail(GlobalNamespace::SaberTrailRenderer* trailRendererPrefab_ = {}, float trailDuration_ = {}, int samplingFrequency_ = {}, int granularity_ = {}, float whiteSectionMaxDuration_ = {}, bool colorOverwrite_ = {}, UnityEngine::Color forcedColor_ = {}, UnityEngine::Color color_ = {}, GlobalNamespace::IBladeMovementData* movementData_ = {}, float lastTrailElementTime_ = {}, GlobalNamespace::SaberTrailRenderer* trailRenderer_ = {}, GlobalNamespace::TrailElementCollection* trailElementCollection_ = {}, float sampleStep_ = {}, int framesPassed_ = {}, float lastZScale_ = {}, int framesToScaleCheck_ = {}, bool inited_ = {}) noexcept : trailRendererPrefab{trailRendererPrefab_}, trailDuration{trailDuration_}, samplingFrequency{samplingFrequency_}, granularity{granularity_}, whiteSectionMaxDuration{whiteSectionMaxDuration_}, colorOverwrite{colorOverwrite_}, forcedColor{forcedColor_}, color{color_}, movementData{movementData_}, lastTrailElementTime{lastTrailElementTime_}, trailRenderer{trailRenderer_}, trailElementCollection{trailElementCollection_}, sampleStep{sampleStep_}, framesPassed{framesPassed_}, lastZScale{lastZScale_}, framesToScaleCheck{framesToScaleCheck_}, inited{inited_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kIgnoredFramesCount
    static constexpr const int kIgnoredFramesCount = 4;
    // Get static field: static private System.Int32 kIgnoredFramesCount
    static int _get_kIgnoredFramesCount();
    // Set static field: static private System.Int32 kIgnoredFramesCount
    static void _set_kIgnoredFramesCount(int value);
    // static field const value: static private System.Int32 kSnapshotCapacityMargin
    static constexpr const int kSnapshotCapacityMargin = 3;
    // Get static field: static private System.Int32 kSnapshotCapacityMargin
    static int _get_kSnapshotCapacityMargin();
    // Set static field: static private System.Int32 kSnapshotCapacityMargin
    static void _set_kSnapshotCapacityMargin(int value);
    // static field const value: static private System.Int32 kScaleCheckFramesInterval
    static constexpr const int kScaleCheckFramesInterval = 10;
    // Get static field: static private System.Int32 kScaleCheckFramesInterval
    static int _get_kScaleCheckFramesInterval();
    // Set static field: static private System.Int32 kScaleCheckFramesInterval
    static void _set_kScaleCheckFramesInterval(int value);
    // private System.Void Awake()
    // Offset: 0x10E01CC
    void Awake();
    // public System.Void Setup(UnityEngine.Color color, IBladeMovementData movementData)
    // Offset: 0x10E02F0
    void Setup(UnityEngine::Color color, GlobalNamespace::IBladeMovementData* movementData);
    // private System.Void Init()
    // Offset: 0x10E0310
    void Init();
    // private System.Void ResetTrailData()
    // Offset: 0x10E0640
    void ResetTrailData();
    // protected System.Void LateUpdate()
    // Offset: 0x10E0728
    void LateUpdate();
    // protected System.Void OnEnable()
    // Offset: 0x10E0CF8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x10E0DC0
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x10E0E54
    void OnDestroy();
    // private System.Single GetTrailWidth(BladeMovementDataElement lastAddedData)
    // Offset: 0x10E0578
    float GetTrailWidth(GlobalNamespace::BladeMovementDataElement lastAddedData);
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0x10E0F20
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0x10E10FC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberTrail* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberTrail*, creationType>()));
    }
  }; // SaberTrail
  #pragma pack(pop)
  static check_size<sizeof(SaberTrail), 136 + sizeof(bool)> __GlobalNamespace_SaberTrailSizeCheck;
  static_assert(sizeof(SaberTrail) == 0x89);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberTrail*, "", "SaberTrail");
