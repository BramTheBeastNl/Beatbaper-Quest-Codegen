// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightWithIdMonoBehaviour
#include "GlobalNamespace/LightWithIdMonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockColorSetter
  class MaterialPropertyBlockColorSetter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: InstancedMaterialLightWithId
  // [TokenAttribute] Offset: FFFFFFFF
  class InstancedMaterialLightWithId : public GlobalNamespace::LightWithIdMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x30
    char ___base_padding[0x7] = {};
    // private MaterialPropertyBlockColorSetter _materialPropertyBlockColorSetter
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MaterialPropertyBlockColorSetter* materialPropertyBlockColorSetter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MaterialPropertyBlockColorSetter*) == 0x8);
    // private System.Boolean _setColorOnly
    // Size: 0x1
    // Offset: 0x38
    bool setColorOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setColorOnly and: intensity
    char __padding1[0x3] = {};
    // [DrawIfAttribute] Offset: 0xE8EE18
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x3C
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0xE8EEBC
    // private System.Single _minAlpha
    // Size: 0x4
    // Offset: 0x40
    float minAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x44
    UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private System.Boolean _startColorWasSet
    // Size: 0x1
    // Offset: 0x54
    bool startColorWasSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: InstancedMaterialLightWithId
    InstancedMaterialLightWithId(GlobalNamespace::MaterialPropertyBlockColorSetter* materialPropertyBlockColorSetter_ = {}, bool setColorOnly_ = {}, float intensity_ = {}, float minAlpha_ = {}, UnityEngine::Color color_ = {}, bool startColorWasSet_ = {}) noexcept : materialPropertyBlockColorSetter{materialPropertyBlockColorSetter_}, setColorOnly{setColorOnly_}, intensity{intensity_}, minAlpha{minAlpha_}, color{color_}, startColorWasSet{startColorWasSet_} {}
    // Get instance field: private MaterialPropertyBlockColorSetter _materialPropertyBlockColorSetter
    GlobalNamespace::MaterialPropertyBlockColorSetter* _get__materialPropertyBlockColorSetter();
    // Set instance field: private MaterialPropertyBlockColorSetter _materialPropertyBlockColorSetter
    void _set__materialPropertyBlockColorSetter(GlobalNamespace::MaterialPropertyBlockColorSetter* value);
    // Get instance field: private System.Boolean _setColorOnly
    bool _get__setColorOnly();
    // Set instance field: private System.Boolean _setColorOnly
    void _set__setColorOnly(bool value);
    // Get instance field: private System.Single _intensity
    float _get__intensity();
    // Set instance field: private System.Single _intensity
    void _set__intensity(float value);
    // Get instance field: private System.Single _minAlpha
    float _get__minAlpha();
    // Set instance field: private System.Single _minAlpha
    void _set__minAlpha(float value);
    // Get instance field: private UnityEngine.Color _color
    UnityEngine::Color _get__color();
    // Set instance field: private UnityEngine.Color _color
    void _set__color(UnityEngine::Color value);
    // Get instance field: private System.Boolean _startColorWasSet
    bool _get__startColorWasSet();
    // Set instance field: private System.Boolean _startColorWasSet
    void _set__startColorWasSet(bool value);
    // public System.Void .ctor()
    // Offset: 0x19638B8
    // Implemented from: LightWithIdMonoBehaviour
    // Base method: System.Void LightWithIdMonoBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InstancedMaterialLightWithId* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InstancedMaterialLightWithId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InstancedMaterialLightWithId*, creationType>()));
    }
    // public override System.Void ColorWasSet(UnityEngine.Color newColor)
    // Offset: 0x19637B8
    // Implemented from: LightWithIdMonoBehaviour
    // Base method: System.Void LightWithIdMonoBehaviour::ColorWasSet(UnityEngine.Color newColor)
    void ColorWasSet(UnityEngine::Color newColor);
  }; // InstancedMaterialLightWithId
  #pragma pack(pop)
  static check_size<sizeof(InstancedMaterialLightWithId), 84 + sizeof(bool)> __GlobalNamespace_InstancedMaterialLightWithIdSizeCheck;
  static_assert(sizeof(InstancedMaterialLightWithId) == 0x55);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::InstancedMaterialLightWithId*, "", "InstancedMaterialLightWithId");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::InstancedMaterialLightWithId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::InstancedMaterialLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::InstancedMaterialLightWithId::*)(UnityEngine::Color)>(&GlobalNamespace::InstancedMaterialLightWithId::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::InstancedMaterialLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
