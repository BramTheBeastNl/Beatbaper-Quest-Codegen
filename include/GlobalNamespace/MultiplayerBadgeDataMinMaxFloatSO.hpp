// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerBadgeDataSO
#include "GlobalNamespace/MultiplayerBadgeDataSO.hpp"
// Including type: MultiplayerBadgeMinMax
#include "GlobalNamespace/MultiplayerBadgeMinMax.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerPlayerResultsData
  class MultiplayerPlayerResultsData;
  // Forward declaring type: MultiplayerBadgeAwardData
  class MultiplayerBadgeAwardData;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerBadgeDataMinMaxFloatSO
  // [] Offset: FFFFFFFF
  class MultiplayerBadgeDataMinMaxFloatSO : public GlobalNamespace::MultiplayerBadgeDataSO {
    public:
    // [SpaceAttribute] Offset: 0xD260A4
    // private MultiplayerBadgeMinMax _minMax
    // Size: 0x4
    // Offset: 0x30
    GlobalNamespace::MultiplayerBadgeMinMax minMax;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerBadgeMinMax) == 0x4);
    // private System.Single _weightMultiplier
    // Size: 0x4
    // Offset: 0x34
    float weightMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MultiplayerBadgeDataMinMaxFloatSO
    MultiplayerBadgeDataMinMaxFloatSO(GlobalNamespace::MultiplayerBadgeMinMax minMax_ = {}, float weightMultiplier_ = {}) noexcept : minMax{minMax_}, weightMultiplier{weightMultiplier_} {}
    // protected System.Single GetValue(MultiplayerPlayerResultsData result)
    // Offset: 0xFFFFFFFF
    float GetValue(GlobalNamespace::MultiplayerPlayerResultsData* result);
    // private MultiplayerBadgeAwardData CalculateMax(System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> resultsData, System.Single randomMultiplier)
    // Offset: 0x1038E74
    GlobalNamespace::MultiplayerBadgeAwardData* CalculateMax(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, float randomMultiplier);
    // private MultiplayerBadgeAwardData CalculateMin(System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> resultsData, System.Single randomMultiplier)
    // Offset: 0x10392F8
    GlobalNamespace::MultiplayerBadgeAwardData* CalculateMin(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, float randomMultiplier);
    // public override MultiplayerBadgeAwardData CalculateBadgeData(System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> resultsData, PlayerDataModel playerDataModel, IDifficultyBeatmap difficultyBeatmap, System.Single randomMultiplier)
    // Offset: 0x1038E60
    // Implemented from: MultiplayerBadgeDataSO
    // Base method: MultiplayerBadgeAwardData MultiplayerBadgeDataSO::CalculateBadgeData_NEW(System.Collections.Generic.IReadOnlyList`1<MultiplayerPlayerResultsData> resultsData, PlayerDataModel playerDataModel, IDifficultyBeatmap difficultyBeatmap, System.Single randomMultiplier)
    GlobalNamespace::MultiplayerBadgeAwardData* CalculateBadgeData(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* resultsData, GlobalNamespace::PlayerDataModel* playerDataModel, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, float randomMultiplier);
    // protected System.Void .ctor()
    // Offset: 0x1038E50
    // Implemented from: MultiplayerBadgeDataSO
    // Base method: System.Void MultiplayerBadgeDataSO::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerBadgeDataMinMaxFloatSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerBadgeDataMinMaxFloatSO*, creationType>()));
    }
  }; // MultiplayerBadgeDataMinMaxFloatSO
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerBadgeDataMinMaxFloatSO), 52 + sizeof(float)> __GlobalNamespace_MultiplayerBadgeDataMinMaxFloatSOSizeCheck;
  static_assert(sizeof(MultiplayerBadgeDataMinMaxFloatSO) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerBadgeDataMinMaxFloatSO*, "", "MultiplayerBadgeDataMinMaxFloatSO");
