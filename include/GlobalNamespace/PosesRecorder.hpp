// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PosesRecordingData
  class PosesRecordingData;
  // Forward declaring type: PoseObject
  class PoseObject;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PosesRecorder
  class PosesRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(GlobalNamespace::PosesRecorder);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PosesRecorder*, "", "PosesRecorder");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PosesRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class PosesRecorder : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::PosesRecorder::$$c
    class $$c;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private UnityEngine.Transform[] _transforms
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<UnityEngine::Transform*> transforms;
    // Field size check
    static_assert(sizeof(::ArrayW<UnityEngine::Transform*>) == 0x8);
    // private PosesRecordingData _data
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PosesRecordingData* data;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PosesRecordingData*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Transform[] _transforms
    ::ArrayW<UnityEngine::Transform*>& dyn__transforms();
    // Get instance field reference: private PosesRecordingData _data
    GlobalNamespace::PosesRecordingData*& dyn__data();
    // public System.Void StartRecording(PoseObject[] poseObjects)
    // Offset: 0x11ADF2C
    void StartRecording(::ArrayW<GlobalNamespace::PoseObject*> poseObjects);
    // public System.Void RecordTick(System.Single time)
    // Offset: 0x11AE1A0
    void RecordTick(float time);
    // public PosesRecordingData FinishRecording()
    // Offset: 0x11AE3B8
    GlobalNamespace::PosesRecordingData* FinishRecording();
    // public System.Void .ctor()
    // Offset: 0x11AE3C0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PosesRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PosesRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PosesRecorder*, creationType>()));
    }
  }; // PosesRecorder
  #pragma pack(pop)
  static check_size<sizeof(PosesRecorder), 24 + sizeof(GlobalNamespace::PosesRecordingData*)> __GlobalNamespace_PosesRecorderSizeCheck;
  static_assert(sizeof(PosesRecorder) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PosesRecorder::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PosesRecorder::*)(::ArrayW<GlobalNamespace::PoseObject*>)>(&GlobalNamespace::PosesRecorder::StartRecording)> {
  static const MethodInfo* get() {
    static auto* poseObjects = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "PoseObject"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecorder*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseObjects});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecorder::RecordTick
// Il2CppName: RecordTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PosesRecorder::*)(float)>(&GlobalNamespace::PosesRecorder::RecordTick)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecorder*), "RecordTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecorder::FinishRecording
// Il2CppName: FinishRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PosesRecordingData* (GlobalNamespace::PosesRecorder::*)()>(&GlobalNamespace::PosesRecorder::FinishRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecorder*), "FinishRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
