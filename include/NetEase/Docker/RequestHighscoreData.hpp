// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: NetEase.Docker
namespace NetEase::Docker {
  // Forward declaring type: RequestHighscoreData
  struct RequestHighscoreData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(NetEase::Docker::RequestHighscoreData, "NetEase.Docker", "RequestHighscoreData");
// Type namespace: NetEase.Docker
namespace NetEase::Docker {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: NetEase.Docker.RequestHighscoreData
  // [TokenAttribute] Offset: FFFFFFFF
  struct RequestHighscoreData/*, public System::ValueType*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x12352C0
    // private System.String <Track>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW Track;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x12352FC
    // private System.String <HighscoreType>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::StringW HighscoreType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: RequestHighscoreData
    constexpr RequestHighscoreData(::StringW Track_ = {}, ::StringW HighscoreType_ = {}) noexcept : Track{Track_}, HighscoreType{HighscoreType_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: private System.String <Track>k__BackingField
    ::StringW& dyn_$Track$k__BackingField();
    // Get instance field reference: private System.String <HighscoreType>k__BackingField
    ::StringW& dyn_$HighscoreType$k__BackingField();
    // public System.String get_Track()
    // Offset: 0x2A57BB4
    ::StringW get_Track();
    // public System.Void set_Track(System.String value)
    // Offset: 0x2A57BBC
    void set_Track(::StringW value);
    // public System.Void set_HighscoreType(System.String value)
    // Offset: 0x2A57BC4
    void set_HighscoreType(::StringW value);
  }; // NetEase.Docker.RequestHighscoreData
  #pragma pack(pop)
  static check_size<sizeof(RequestHighscoreData), 8 + sizeof(::StringW)> __NetEase_Docker_RequestHighscoreDataSizeCheck;
  static_assert(sizeof(RequestHighscoreData) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NetEase::Docker::RequestHighscoreData::get_Track
// Il2CppName: get_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (NetEase::Docker::RequestHighscoreData::*)()>(&NetEase::Docker::RequestHighscoreData::get_Track)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEase::Docker::RequestHighscoreData), "get_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEase::Docker::RequestHighscoreData::set_Track
// Il2CppName: set_Track
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEase::Docker::RequestHighscoreData::*)(::StringW)>(&NetEase::Docker::RequestHighscoreData::set_Track)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetEase::Docker::RequestHighscoreData), "set_Track", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: NetEase::Docker::RequestHighscoreData::set_HighscoreType
// Il2CppName: set_HighscoreType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEase::Docker::RequestHighscoreData::*)(::StringW)>(&NetEase::Docker::RequestHighscoreData::set_HighscoreType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetEase::Docker::RequestHighscoreData), "set_HighscoreType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
