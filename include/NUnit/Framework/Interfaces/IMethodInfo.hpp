// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <initializer_list>
// Including type: NUnit.Framework.Interfaces.IReflectionInfo
#include "NUnit/Framework/Interfaces/IReflectionInfo.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Interfaces
namespace NUnit::Framework::Interfaces {
  // Forward declaring type: ITypeInfo
  class ITypeInfo;
  // Forward declaring type: IParameterInfo
  class IParameterInfo;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppString;
template<class T>
struct Array;
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: NUnit.Framework.Interfaces
namespace NUnit::Framework::Interfaces {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Interfaces.IMethodInfo
  class IMethodInfo/*, public NUnit::Framework::Interfaces::IReflectionInfo*/ {
    public:
    // Creating value type constructor for type: IMethodInfo
    IMethodInfo() noexcept {}
    // Creating interface conversion operator: operator NUnit::Framework::Interfaces::IReflectionInfo
    operator NUnit::Framework::Interfaces::IReflectionInfo() noexcept {
      return *reinterpret_cast<NUnit::Framework::Interfaces::IReflectionInfo*>(this);
    }
    // public NUnit.Framework.Interfaces.ITypeInfo get_TypeInfo()
    // Offset: 0xFFFFFFFF
    NUnit::Framework::Interfaces::ITypeInfo* get_TypeInfo();
    // public System.Reflection.MethodInfo get_MethodInfo()
    // Offset: 0xFFFFFFFF
    System::Reflection::MethodInfo* get_MethodInfo();
    // public System.String get_Name()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_Name();
    // public System.Boolean get_IsAbstract()
    // Offset: 0xFFFFFFFF
    bool get_IsAbstract();
    // public System.Boolean get_IsPublic()
    // Offset: 0xFFFFFFFF
    bool get_IsPublic();
    // public System.Boolean get_ContainsGenericParameters()
    // Offset: 0xFFFFFFFF
    bool get_ContainsGenericParameters();
    // public System.Boolean get_IsGenericMethodDefinition()
    // Offset: 0xFFFFFFFF
    bool get_IsGenericMethodDefinition();
    // public NUnit.Framework.Interfaces.ITypeInfo get_ReturnType()
    // Offset: 0xFFFFFFFF
    NUnit::Framework::Interfaces::ITypeInfo* get_ReturnType();
    // public NUnit.Framework.Interfaces.IParameterInfo[] GetParameters()
    // Offset: 0xFFFFFFFF
    ::Array<NUnit::Framework::Interfaces::IParameterInfo*>* GetParameters();
    // public NUnit.Framework.Interfaces.IMethodInfo MakeGenericMethod(params System.Type[] typeArguments)
    // Offset: 0xFFFFFFFF
    NUnit::Framework::Interfaces::IMethodInfo* MakeGenericMethod(::Array<System::Type*>* typeArguments);
    // Creating initializer_list -> params proxy for: NUnit.Framework.Interfaces.IMethodInfo MakeGenericMethod(params System.Type[] typeArguments)
    NUnit::Framework::Interfaces::IMethodInfo* MakeGenericMethod(std::initializer_list<System::Type*> typeArguments);
    // Creating TArgs -> initializer_list proxy for: NUnit.Framework.Interfaces.IMethodInfo MakeGenericMethod(params System.Type[] typeArguments)
    template<class ...TParams>
    NUnit::Framework::Interfaces::IMethodInfo* MakeGenericMethod(TParams&&... typeArguments) {
      return MakeGenericMethod({typeArguments...});
    }
    // public System.Object Invoke(System.Object fixture, params System.Object[] args)
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* Invoke(::Il2CppObject* fixture, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Object Invoke(System.Object fixture, params System.Object[] args)
    ::Il2CppObject* Invoke(::Il2CppObject* fixture, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Object Invoke(System.Object fixture, params System.Object[] args)
    template<class ...TParams>
    ::Il2CppObject* Invoke(::Il2CppObject* fixture, TParams&&... args) {
      return Invoke(fixture, {args...});
    }
  }; // NUnit.Framework.Interfaces.IMethodInfo
  #pragma pack(pop)
  // Writing MetadataGetter for method: IMethodInfo::get_TypeInfo
  // Il2CppName: get_TypeInfo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (IMethodInfo::*)()>(&IMethodInfo::get_TypeInfo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_TypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_MethodInfo
  // Il2CppName: get_MethodInfo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (IMethodInfo::*)()>(&IMethodInfo::get_MethodInfo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_MethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_Name
  // Il2CppName: get_Name
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMethodInfo::*)()>(&IMethodInfo::get_Name)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_IsAbstract
  // Il2CppName: get_IsAbstract
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_IsAbstract)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_IsPublic
  // Il2CppName: get_IsPublic
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_IsPublic)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_IsPublic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_ContainsGenericParameters
  // Il2CppName: get_ContainsGenericParameters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_ContainsGenericParameters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_IsGenericMethodDefinition
  // Il2CppName: get_IsGenericMethodDefinition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_IsGenericMethodDefinition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_IsGenericMethodDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::get_ReturnType
  // Il2CppName: get_ReturnType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (IMethodInfo::*)()>(&IMethodInfo::get_ReturnType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_ReturnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::GetParameters
  // Il2CppName: GetParameters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<NUnit::Framework::Interfaces::IParameterInfo*>* (IMethodInfo::*)()>(&IMethodInfo::GetParameters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "GetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::MakeGenericMethod
  // Il2CppName: MakeGenericMethod
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::IMethodInfo* (IMethodInfo::*)(::Array<System::Type*>*)>(&IMethodInfo::MakeGenericMethod)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "MakeGenericMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
    }
  };
  // Writing MetadataGetter for method: IMethodInfo::Invoke
  // Il2CppName: Invoke
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IMethodInfo::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&IMethodInfo::Invoke)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Interfaces::IMethodInfo*, "NUnit.Framework.Interfaces", "IMethodInfo");
