// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Constraints
namespace NUnit::Framework::Constraints {
  // Forward declaring type: Tolerance
  class Tolerance;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
// Completed forward declares
// Type namespace: NUnit.Framework.Constraints
namespace NUnit::Framework::Constraints {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Constraints.Numerics
  // [] Offset: FFFFFFFF
  class Numerics : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Numerics
    Numerics() noexcept {}
    // static public System.Boolean IsNumericType(System.Object obj)
    // Offset: 0x15A3E68
    static bool IsNumericType(::Il2CppObject* obj);
    // static public System.Boolean IsFloatingPointNumeric(System.Object obj)
    // Offset: 0x15A6640
    static bool IsFloatingPointNumeric(::Il2CppObject* obj);
    // static public System.Boolean IsFixedPointNumeric(System.Object obj)
    // Offset: 0x15A66B8
    static bool IsFixedPointNumeric(::Il2CppObject* obj);
    // static public System.Boolean AreEqual(System.Object expected, System.Object actual, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A5470
    static bool AreEqual(::Il2CppObject* expected, ::Il2CppObject* actual, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // static private System.Boolean AreEqual(System.Double expected, System.Double actual, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A67D0
    static bool AreEqual(double expected, double actual, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // static private System.Boolean AreEqual(System.Single expected, System.Single actual, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A6B30
    static bool AreEqual(float expected, float actual, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // static private System.Boolean AreEqual(System.Decimal expected, System.Decimal actual, NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A6E24
    static bool AreEqual(System::Decimal expected, System::Decimal actual, NUnit::Framework::Constraints::Tolerance* tolerance);
    // static private System.Boolean AreEqual(System.UInt64 expected, System.UInt64 actual, NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A712C
    static bool AreEqual(uint64_t expected, uint64_t actual, NUnit::Framework::Constraints::Tolerance* tolerance);
    // static private System.Boolean AreEqual(System.Int64 expected, System.Int64 actual, NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A72F0
    static bool AreEqual(int64_t expected, int64_t actual, NUnit::Framework::Constraints::Tolerance* tolerance);
    // static private System.Boolean AreEqual(System.UInt32 expected, System.UInt32 actual, NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A74B8
    static bool AreEqual(uint expected, uint actual, NUnit::Framework::Constraints::Tolerance* tolerance);
    // static private System.Boolean AreEqual(System.Int32 expected, System.Int32 actual, NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x15A767C
    static bool AreEqual(int expected, int actual, NUnit::Framework::Constraints::Tolerance* tolerance);
    // static public System.Int32 Compare(System.Object expected, System.Object actual)
    // Offset: 0x15A3EA0
    static int Compare(::Il2CppObject* expected, ::Il2CppObject* actual);
  }; // NUnit.Framework.Constraints.Numerics
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Constraints::Numerics*, "NUnit.Framework.Constraints", "Numerics");
