// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITestResult
#include "NUnit/Framework/Interfaces/ITestResult.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: NUnit::Framework::Interfaces
namespace NUnit::Framework::Interfaces {
  // Forward declaring type: ResultState
  class ResultState;
  // Forward declaring type: ITest
  class ITest;
  // Forward declaring type: TNode
  class TNode;
  // Forward declaring type: FailureSite
  struct FailureSite;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: TextWriter
  class TextWriter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: NUnit.Framework.Internal
namespace NUnit::Framework::Internal {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Internal.TestResult
  class TestResult : public ::Il2CppObject/*, public NUnit::Framework::Interfaces::ITestResult*/ {
    public:
    // private System.Text.StringBuilder _output
    // Size: 0x8
    // Offset: 0x10
    System::Text::StringBuilder* output;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // private System.Double _duration
    // Size: 0x8
    // Offset: 0x18
    double duration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // protected System.Int32 InternalAssertCount
    // Size: 0x4
    // Offset: 0x20
    int InternalAssertCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: InternalAssertCount and: resultState
    char __padding2[0x4] = {};
    // private NUnit.Framework.Interfaces.ResultState _resultState
    // Size: 0x8
    // Offset: 0x28
    NUnit::Framework::Interfaces::ResultState* resultState;
    // Field size check
    static_assert(sizeof(NUnit::Framework::Interfaces::ResultState*) == 0x8);
    // private System.String _message
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* message;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _stackTrace
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* stackTrace;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE054C0
    // [DebuggerBrowsableAttribute] Offset: 0xE054C0
    // private NUnit.Framework.Interfaces.ITest <Test>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    NUnit::Framework::Interfaces::ITest* Test;
    // Field size check
    static_assert(sizeof(NUnit::Framework::Interfaces::ITest*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0xE054FC
    // [CompilerGeneratedAttribute] Offset: 0xE054FC
    // private System.DateTime <StartTime>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    System::DateTime StartTime;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE05538
    // [DebuggerBrowsableAttribute] Offset: 0xE05538
    // private System.DateTime <EndTime>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    System::DateTime EndTime;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE05574
    // [DebuggerBrowsableAttribute] Offset: 0xE05574
    // private System.IO.TextWriter <OutWriter>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    System::IO::TextWriter* OutWriter;
    // Field size check
    static_assert(sizeof(System::IO::TextWriter*) == 0x8);
    // Creating value type constructor for type: TestResult
    TestResult(System::Text::StringBuilder* output_ = {}, double duration_ = {}, int InternalAssertCount_ = {}, NUnit::Framework::Interfaces::ResultState* resultState_ = {}, ::Il2CppString* message_ = {}, ::Il2CppString* stackTrace_ = {}, NUnit::Framework::Interfaces::ITest* Test_ = {}, System::DateTime StartTime_ = {}, System::DateTime EndTime_ = {}, System::IO::TextWriter* OutWriter_ = {}) noexcept : output{output_}, duration{duration_}, InternalAssertCount{InternalAssertCount_}, resultState{resultState_}, message{message_}, stackTrace{stackTrace_}, Test{Test_}, StartTime{StartTime_}, EndTime{EndTime_}, OutWriter{OutWriter_} {}
    // Creating interface conversion operator: operator NUnit::Framework::Interfaces::ITestResult
    operator NUnit::Framework::Interfaces::ITestResult() noexcept {
      return *reinterpret_cast<NUnit::Framework::Interfaces::ITestResult*>(this);
    }
    // Get static field: static readonly System.String CHILD_ERRORS_MESSAGE
    static ::Il2CppString* _get_CHILD_ERRORS_MESSAGE();
    // Set static field: static readonly System.String CHILD_ERRORS_MESSAGE
    static void _set_CHILD_ERRORS_MESSAGE(::Il2CppString* value);
    // Get static field: static readonly System.String CHILD_IGNORE_MESSAGE
    static ::Il2CppString* _get_CHILD_IGNORE_MESSAGE();
    // Set static field: static readonly System.String CHILD_IGNORE_MESSAGE
    static void _set_CHILD_IGNORE_MESSAGE(::Il2CppString* value);
    // static field const value: static System.Double MIN_DURATION
    static constexpr const double MIN_DURATION = 1e-06;
    // Get static field: static System.Double MIN_DURATION
    static double _get_MIN_DURATION();
    // Set static field: static System.Double MIN_DURATION
    static void _set_MIN_DURATION(double value);
    // public System.Void .ctor(NUnit.Framework.Interfaces.ITest test)
    // Offset: 0x22AF498
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestResult* New_ctor(NUnit::Framework::Interfaces::ITest* test) {
      static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::TestResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestResult*, creationType>(test)));
    }
    // public NUnit.Framework.Interfaces.ITest get_Test()
    // Offset: 0x22B3008
    NUnit::Framework::Interfaces::ITest* get_Test();
    // private System.Void set_Test(NUnit.Framework.Interfaces.ITest value)
    // Offset: 0x22B3010
    void set_Test(NUnit::Framework::Interfaces::ITest* value);
    // public NUnit.Framework.Interfaces.ResultState get_ResultState()
    // Offset: 0x22AF5BC
    NUnit::Framework::Interfaces::ResultState* get_ResultState();
    // private System.Void set_ResultState(NUnit.Framework.Interfaces.ResultState value)
    // Offset: 0x22B3000
    void set_ResultState(NUnit::Framework::Interfaces::ResultState* value);
    // public System.String get_Name()
    // Offset: 0x22B3018
    ::Il2CppString* get_Name();
    // public System.String get_FullName()
    // Offset: 0x22B30CC
    ::Il2CppString* get_FullName();
    // public System.Double get_Duration()
    // Offset: 0x22B3180
    double get_Duration();
    // public System.Void set_Duration(System.Double value)
    // Offset: 0x22B3188
    void set_Duration(double value);
    // public System.DateTime get_StartTime()
    // Offset: 0x22B31AC
    System::DateTime get_StartTime();
    // public System.Void set_StartTime(System.DateTime value)
    // Offset: 0x22B31B4
    void set_StartTime(System::DateTime value);
    // public System.DateTime get_EndTime()
    // Offset: 0x22B31BC
    System::DateTime get_EndTime();
    // public System.Void set_EndTime(System.DateTime value)
    // Offset: 0x22B31C4
    void set_EndTime(System::DateTime value);
    // public System.String get_Message()
    // Offset: 0x22B31CC
    ::Il2CppString* get_Message();
    // private System.Void set_Message(System.String value)
    // Offset: 0x22B31D4
    void set_Message(::Il2CppString* value);
    // public System.String get_StackTrace()
    // Offset: 0x22B31DC
    ::Il2CppString* get_StackTrace();
    // private System.Void set_StackTrace(System.String value)
    // Offset: 0x22B31E4
    void set_StackTrace(::Il2CppString* value);
    // public System.Int32 get_AssertCount()
    // Offset: 0x22B31EC
    int get_AssertCount();
    // public System.Int32 get_FailCount()
    // Offset: 0xFFFFFFFF
    int get_FailCount();
    // public System.Int32 get_PassCount()
    // Offset: 0xFFFFFFFF
    int get_PassCount();
    // public System.Int32 get_SkipCount()
    // Offset: 0xFFFFFFFF
    int get_SkipCount();
    // public System.Int32 get_InconclusiveCount()
    // Offset: 0xFFFFFFFF
    int get_InconclusiveCount();
    // public System.Boolean get_HasChildren()
    // Offset: 0xFFFFFFFF
    bool get_HasChildren();
    // public System.Collections.Generic.IEnumerable`1<NUnit.Framework.Interfaces.ITestResult> get_Children()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestResult*>* get_Children();
    // public System.IO.TextWriter get_OutWriter()
    // Offset: 0x22B31F4
    System::IO::TextWriter* get_OutWriter();
    // private System.Void set_OutWriter(System.IO.TextWriter value)
    // Offset: 0x22B31FC
    void set_OutWriter(System::IO::TextWriter* value);
    // public System.String get_Output()
    // Offset: 0x22B3204
    ::Il2CppString* get_Output();
    // public NUnit.Framework.Interfaces.TNode ToXml(System.Boolean recursive)
    // Offset: 0x22B3224
    NUnit::Framework::Interfaces::TNode* ToXml(bool recursive);
    // public NUnit.Framework.Interfaces.TNode AddToXml(NUnit.Framework.Interfaces.TNode parentNode, System.Boolean recursive)
    // Offset: 0x22B32B0
    NUnit::Framework::Interfaces::TNode* AddToXml(NUnit::Framework::Interfaces::TNode* parentNode, bool recursive);
    // public System.Void SetResult(NUnit.Framework.Interfaces.ResultState resultState)
    // Offset: 0x22B3C64
    void SetResult(NUnit::Framework::Interfaces::ResultState* resultState);
    // public System.Void SetResult(NUnit.Framework.Interfaces.ResultState resultState, System.String message)
    // Offset: 0x22B3C7C
    void SetResult(NUnit::Framework::Interfaces::ResultState* resultState, ::Il2CppString* message);
    // public System.Void SetResult(NUnit.Framework.Interfaces.ResultState resultState, System.String message, System.String stackTrace)
    // Offset: 0x22B3C70
    void SetResult(NUnit::Framework::Interfaces::ResultState* resultState, ::Il2CppString* message, ::Il2CppString* stackTrace);
    // public System.Void RecordException(System.Exception ex)
    // Offset: 0x22B3C88
    void RecordException(System::Exception* ex);
    // public System.Void RecordException(System.Exception ex, NUnit.Framework.Interfaces.FailureSite site)
    // Offset: 0x22B3E8C
    void RecordException(System::Exception* ex, NUnit::Framework::Interfaces::FailureSite site);
    // public System.Void RecordTearDownException(System.Exception ex)
    // Offset: 0x22B40CC
    void RecordTearDownException(System::Exception* ex);
    // private NUnit.Framework.Interfaces.TNode AddReasonElement(NUnit.Framework.Interfaces.TNode targetNode)
    // Offset: 0x22B3B60
    NUnit::Framework::Interfaces::TNode* AddReasonElement(NUnit::Framework::Interfaces::TNode* targetNode);
    // private NUnit.Framework.Interfaces.TNode AddFailureElement(NUnit.Framework.Interfaces.TNode targetNode)
    // Offset: 0x22B3A7C
    NUnit::Framework::Interfaces::TNode* AddFailureElement(NUnit::Framework::Interfaces::TNode* targetNode);
    // private NUnit.Framework.Interfaces.TNode AddOutputElement(NUnit.Framework.Interfaces.TNode targetNode)
    // Offset: 0x22B3BE4
    NUnit::Framework::Interfaces::TNode* AddOutputElement(NUnit::Framework::Interfaces::TNode* targetNode);
    // static private System.Void .cctor()
    // Offset: 0x22B4404
    static void _cctor();
  }; // NUnit.Framework.Internal.TestResult
  #pragma pack(pop)
  static check_size<sizeof(TestResult), 88 + sizeof(System::IO::TextWriter*)> __NUnit_Framework_Internal_TestResultSizeCheck;
  static_assert(sizeof(TestResult) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Internal::TestResult*, "NUnit.Framework.Internal", "TestResult");
// Writing MetadataGetter for method: TestResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ITest*)>(&TestResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ITest*)>(&TestResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_Test
// Il2CppName: get_Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITest* (TestResult::*)()>(&TestResult::get_Test)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_Test
// Il2CppName: set_Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ITest*)>(&TestResult::set_Test)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_ResultState
// Il2CppName: get_ResultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ResultState* (TestResult::*)()>(&TestResult::get_ResultState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_ResultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_ResultState
// Il2CppName: set_ResultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ResultState*)>(&TestResult::set_ResultState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_ResultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ResultState*>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestResult::*)()>(&TestResult::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestResult::*)()>(&TestResult::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_Duration
// Il2CppName: get_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TestResult::*)()>(&TestResult::get_Duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_Duration
// Il2CppName: set_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(double)>(&TestResult::set_Duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_StartTime
// Il2CppName: get_StartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (TestResult::*)()>(&TestResult::get_StartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_StartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_StartTime
// Il2CppName: set_StartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(System::DateTime)>(&TestResult::set_StartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_StartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_EndTime
// Il2CppName: get_EndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (TestResult::*)()>(&TestResult::get_EndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_EndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_EndTime
// Il2CppName: set_EndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(System::DateTime)>(&TestResult::set_EndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_EndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestResult::*)()>(&TestResult::get_Message)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_Message
// Il2CppName: set_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(::Il2CppString*)>(&TestResult::set_Message)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_StackTrace
// Il2CppName: get_StackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestResult::*)()>(&TestResult::get_StackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_StackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_StackTrace
// Il2CppName: set_StackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(::Il2CppString*)>(&TestResult::set_StackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_StackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_AssertCount
// Il2CppName: get_AssertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TestResult::*)()>(&TestResult::get_AssertCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_AssertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_FailCount
// Il2CppName: get_FailCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TestResult::*)()>(&TestResult::get_FailCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_FailCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_PassCount
// Il2CppName: get_PassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TestResult::*)()>(&TestResult::get_PassCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_PassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_SkipCount
// Il2CppName: get_SkipCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TestResult::*)()>(&TestResult::get_SkipCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_SkipCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_InconclusiveCount
// Il2CppName: get_InconclusiveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TestResult::*)()>(&TestResult::get_InconclusiveCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_InconclusiveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_HasChildren
// Il2CppName: get_HasChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TestResult::*)()>(&TestResult::get_HasChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_HasChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_Children
// Il2CppName: get_Children
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestResult*>* (TestResult::*)()>(&TestResult::get_Children)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_Children", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::get_OutWriter
// Il2CppName: get_OutWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::TextWriter* (TestResult::*)()>(&TestResult::get_OutWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_OutWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::set_OutWriter
// Il2CppName: set_OutWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(System::IO::TextWriter*)>(&TestResult::set_OutWriter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "set_OutWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
// Writing MetadataGetter for method: TestResult::get_Output
// Il2CppName: get_Output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestResult::*)()>(&TestResult::get_Output)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "get_Output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestResult::ToXml
// Il2CppName: ToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestResult::*)(bool)>(&TestResult::ToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TestResult::AddToXml
// Il2CppName: AddToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestResult::*)(NUnit::Framework::Interfaces::TNode*, bool)>(&TestResult::AddToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "AddToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TestResult::SetResult
// Il2CppName: SetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ResultState*)>(&TestResult::SetResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "SetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ResultState*>()});
  }
};
// Writing MetadataGetter for method: TestResult::SetResult
// Il2CppName: SetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ResultState*, ::Il2CppString*)>(&TestResult::SetResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "SetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ResultState*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestResult::SetResult
// Il2CppName: SetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(NUnit::Framework::Interfaces::ResultState*, ::Il2CppString*, ::Il2CppString*)>(&TestResult::SetResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "SetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ResultState*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestResult::RecordException
// Il2CppName: RecordException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(System::Exception*)>(&TestResult::RecordException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "RecordException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: TestResult::RecordException
// Il2CppName: RecordException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(System::Exception*, NUnit::Framework::Interfaces::FailureSite)>(&TestResult::RecordException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "RecordException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::FailureSite>()});
  }
};
// Writing MetadataGetter for method: TestResult::RecordTearDownException
// Il2CppName: RecordTearDownException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestResult::*)(System::Exception*)>(&TestResult::RecordTearDownException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "RecordTearDownException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
  }
};
// Writing MetadataGetter for method: TestResult::AddReasonElement
// Il2CppName: AddReasonElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestResult::*)(NUnit::Framework::Interfaces::TNode*)>(&TestResult::AddReasonElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "AddReasonElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>()});
  }
};
// Writing MetadataGetter for method: TestResult::AddFailureElement
// Il2CppName: AddFailureElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestResult::*)(NUnit::Framework::Interfaces::TNode*)>(&TestResult::AddFailureElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "AddFailureElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>()});
  }
};
// Writing MetadataGetter for method: TestResult::AddOutputElement
// Il2CppName: AddOutputElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestResult::*)(NUnit::Framework::Interfaces::TNode*)>(&TestResult::AddOutputElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), "AddOutputElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>()});
  }
};
// Writing MetadataGetter for method: TestResult::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TestResult::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestResult*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
