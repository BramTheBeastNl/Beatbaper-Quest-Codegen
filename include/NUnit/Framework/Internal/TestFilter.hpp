// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITestFilter
#include "NUnit/Framework/Interfaces/ITestFilter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Internal
namespace NUnit::Framework::Internal {
}
// Forward declaring namespace: NUnit::Framework::Interfaces
namespace NUnit::Framework::Interfaces {
  // Forward declaring type: ITest
  class ITest;
  // Forward declaring type: TNode
  class TNode;
}
// Completed forward declares
// Type namespace: NUnit.Framework.Internal
namespace NUnit::Framework::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Internal.TestFilter
  class TestFilter : public ::Il2CppObject/*, public NUnit::Framework::Interfaces::ITestFilter*/ {
    public:
    // Nested type: NUnit::Framework::Internal::TestFilter::EmptyFilter
    class EmptyFilter;
    // Creating value type constructor for type: TestFilter
    TestFilter() noexcept {}
    // Creating interface conversion operator: operator NUnit::Framework::Interfaces::ITestFilter
    operator NUnit::Framework::Interfaces::ITestFilter() noexcept {
      return *reinterpret_cast<NUnit::Framework::Interfaces::ITestFilter*>(this);
    }
    // Get static field: static public readonly NUnit.Framework.Internal.TestFilter Empty
    static NUnit::Framework::Internal::TestFilter* _get_Empty();
    // Set static field: static public readonly NUnit.Framework.Internal.TestFilter Empty
    static void _set_Empty(NUnit::Framework::Internal::TestFilter* value);
    // public System.Boolean Pass(NUnit.Framework.Interfaces.ITest test)
    // Offset: 0x22AFBA8
    bool Pass(NUnit::Framework::Interfaces::ITest* test);
    // public System.Boolean IsExplicitMatch(NUnit.Framework.Interfaces.ITest test)
    // Offset: 0x22AFDC8
    bool IsExplicitMatch(NUnit::Framework::Interfaces::ITest* test);
    // public System.Boolean Match(NUnit.Framework.Interfaces.ITest test)
    // Offset: 0xFFFFFFFF
    bool Match(NUnit::Framework::Interfaces::ITest* test);
    // public System.Boolean MatchParent(NUnit.Framework.Interfaces.ITest test)
    // Offset: 0x22AFC08
    bool MatchParent(NUnit::Framework::Interfaces::ITest* test);
    // protected System.Boolean MatchDescendant(NUnit.Framework.Interfaces.ITest test)
    // Offset: 0x22AFE18
    bool MatchDescendant(NUnit::Framework::Interfaces::ITest* test);
    // public NUnit.Framework.Interfaces.TNode ToXml(System.Boolean recursive)
    // Offset: 0x22B01DC
    NUnit::Framework::Interfaces::TNode* ToXml(bool recursive);
    // public NUnit.Framework.Interfaces.TNode AddToXml(NUnit.Framework.Interfaces.TNode parentNode, System.Boolean recursive)
    // Offset: 0xFFFFFFFF
    NUnit::Framework::Interfaces::TNode* AddToXml(NUnit::Framework::Interfaces::TNode* parentNode, bool recursive);
    // static private System.Void .cctor()
    // Offset: 0x22B0264
    static void _cctor();
    // protected System.Void .ctor()
    // Offset: 0x22A9D08
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::TestFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestFilter*, creationType>()));
    }
  }; // NUnit.Framework.Internal.TestFilter
  #pragma pack(pop)
  // Writing MetadataGetter for method: TestFilter::Pass
  // Il2CppName: Pass
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&TestFilter::Pass)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "Pass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::IsExplicitMatch
  // Il2CppName: IsExplicitMatch
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&TestFilter::IsExplicitMatch)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "IsExplicitMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::Match
  // Il2CppName: Match
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&TestFilter::Match)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::MatchParent
  // Il2CppName: MatchParent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&TestFilter::MatchParent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "MatchParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::MatchDescendant
  // Il2CppName: MatchDescendant
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&TestFilter::MatchDescendant)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "MatchDescendant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::ToXml
  // Il2CppName: ToXml
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestFilter::*)(bool)>(&TestFilter::ToXml)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::AddToXml
  // Il2CppName: AddToXml
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TestFilter::*)(NUnit::Framework::Interfaces::TNode*, bool)>(&TestFilter::AddToXml)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), "AddToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TestFilter::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TestFilter::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TestFilter::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestFilter::*)()>(&TestFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestFilter::*)()>(&TestFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TestFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Internal::TestFilter*, "NUnit.Framework.Internal", "TestFilter");
