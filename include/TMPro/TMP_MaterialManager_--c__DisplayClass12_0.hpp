// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_MaterialManager
#include "TMPro/TMP_MaterialManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_MaterialManager/<>c__DisplayClass12_0
  // [CompilerGeneratedAttribute] Offset: DD59D4
  class TMP_MaterialManager::$$c__DisplayClass12_0 : public ::Il2CppObject {
    public:
    // public UnityEngine.Material stencilMaterial
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Material* stencilMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // Creating value type constructor for type: $$c__DisplayClass12_0
    $$c__DisplayClass12_0(UnityEngine::Material* stencilMaterial_ = {}) noexcept : stencilMaterial{stencilMaterial_} {}
    // Creating conversion operator: operator UnityEngine::Material*
    constexpr operator UnityEngine::Material*() const noexcept {
      return stencilMaterial;
    }
    // System.Boolean <AddMaskingMaterial>b__0(TMPro.TMP_MaterialManager/MaskingMaterial item)
    // Offset: 0x116B0FC
    bool $AddMaskingMaterial$b__0(TMPro::TMP_MaterialManager::MaskingMaterial* item);
    // public System.Void .ctor()
    // Offset: 0x1169600
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_MaterialManager::$$c__DisplayClass12_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::$$c__DisplayClass12_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_MaterialManager::$$c__DisplayClass12_0*, creationType>()));
    }
  }; // TMPro.TMP_MaterialManager/<>c__DisplayClass12_0
  #pragma pack(pop)
  static check_size<sizeof(TMP_MaterialManager::$$c__DisplayClass12_0), 16 + sizeof(UnityEngine::Material*)> __TMPro_TMP_MaterialManager_$$c__DisplayClass12_0SizeCheck;
  static_assert(sizeof(TMP_MaterialManager::$$c__DisplayClass12_0) == 0x18);
  // Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass12_0::$AddMaskingMaterial$b__0
  // Il2CppName: <AddMaskingMaterial>b__0
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_MaterialManager::$$c__DisplayClass12_0::*)(TMPro::TMP_MaterialManager::MaskingMaterial*)>(&TMP_MaterialManager::$$c__DisplayClass12_0::$AddMaskingMaterial$b__0)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass12_0*), "<AddMaskingMaterial>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_MaterialManager::MaskingMaterial*>()});
    }
  };
  // Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass12_0::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass12_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass12_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass12_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass12_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass12_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass12_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_MaterialManager::$$c__DisplayClass12_0*, "TMPro", "TMP_MaterialManager/<>c__DisplayClass12_0");
