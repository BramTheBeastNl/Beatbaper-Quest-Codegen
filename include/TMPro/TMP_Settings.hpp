// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
  // Forward declaring type: TMP_StyleSheet
  class TMP_StyleSheet;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextAsset
  class TextAsset;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_Settings
  class TMP_Settings : public UnityEngine::ScriptableObject {
    public:
    // Nested type: TMPro::TMP_Settings::LineBreakingTable
    class LineBreakingTable;
    // private System.Boolean m_enableWordWrapping
    // Size: 0x1
    // Offset: 0x18
    bool m_enableWordWrapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_enableKerning
    // Size: 0x1
    // Offset: 0x19
    bool m_enableKerning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_enableExtraPadding
    // Size: 0x1
    // Offset: 0x1A
    bool m_enableExtraPadding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_enableTintAllSprites
    // Size: 0x1
    // Offset: 0x1B
    bool m_enableTintAllSprites;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_enableParseEscapeCharacters
    // Size: 0x1
    // Offset: 0x1C
    bool m_enableParseEscapeCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableRaycastTarget
    // Size: 0x1
    // Offset: 0x1D
    bool m_EnableRaycastTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_GetFontFeaturesAtRuntime
    // Size: 0x1
    // Offset: 0x1E
    bool m_GetFontFeaturesAtRuntime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_GetFontFeaturesAtRuntime and: m_missingGlyphCharacter
    char __padding6[0x1] = {};
    // private System.Int32 m_missingGlyphCharacter
    // Size: 0x4
    // Offset: 0x20
    int m_missingGlyphCharacter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_warningsDisabled
    // Size: 0x1
    // Offset: 0x24
    bool m_warningsDisabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_warningsDisabled and: m_defaultFontAsset
    char __padding8[0x3] = {};
    // private TMPro.TMP_FontAsset m_defaultFontAsset
    // Size: 0x8
    // Offset: 0x28
    TMPro::TMP_FontAsset* m_defaultFontAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontAsset*) == 0x8);
    // private System.String m_defaultFontAssetPath
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* m_defaultFontAssetPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Single m_defaultFontSize
    // Size: 0x4
    // Offset: 0x38
    float m_defaultFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_defaultAutoSizeMinRatio
    // Size: 0x4
    // Offset: 0x3C
    float m_defaultAutoSizeMinRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_defaultAutoSizeMaxRatio
    // Size: 0x4
    // Offset: 0x40
    float m_defaultAutoSizeMaxRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 m_defaultTextMeshProTextContainerSize
    // Size: 0x8
    // Offset: 0x44
    UnityEngine::Vector2 m_defaultTextMeshProTextContainerSize;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_defaultTextMeshProUITextContainerSize
    // Size: 0x8
    // Offset: 0x4C
    UnityEngine::Vector2 m_defaultTextMeshProUITextContainerSize;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private System.Boolean m_autoSizeTextContainer
    // Size: 0x1
    // Offset: 0x54
    bool m_autoSizeTextContainer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_autoSizeTextContainer and: m_fallbackFontAssets
    char __padding16[0x3] = {};
    // private System.Collections.Generic.List`1<TMPro.TMP_FontAsset> m_fallbackFontAssets
    // Size: 0x8
    // Offset: 0x58
    System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* m_fallbackFontAssets;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*) == 0x8);
    // private System.Boolean m_matchMaterialPreset
    // Size: 0x1
    // Offset: 0x60
    bool m_matchMaterialPreset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_matchMaterialPreset and: m_defaultSpriteAsset
    char __padding18[0x7] = {};
    // private TMPro.TMP_SpriteAsset m_defaultSpriteAsset
    // Size: 0x8
    // Offset: 0x68
    TMPro::TMP_SpriteAsset* m_defaultSpriteAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAsset*) == 0x8);
    // private System.String m_defaultSpriteAssetPath
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppString* m_defaultSpriteAssetPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_defaultColorGradientPresetsPath
    // Size: 0x8
    // Offset: 0x78
    ::Il2CppString* m_defaultColorGradientPresetsPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean m_enableEmojiSupport
    // Size: 0x1
    // Offset: 0x80
    bool m_enableEmojiSupport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_enableEmojiSupport and: m_defaultStyleSheet
    char __padding22[0x7] = {};
    // private TMPro.TMP_StyleSheet m_defaultStyleSheet
    // Size: 0x8
    // Offset: 0x88
    TMPro::TMP_StyleSheet* m_defaultStyleSheet;
    // Field size check
    static_assert(sizeof(TMPro::TMP_StyleSheet*) == 0x8);
    // private UnityEngine.TextAsset m_leadingCharacters
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::TextAsset* m_leadingCharacters;
    // Field size check
    static_assert(sizeof(UnityEngine::TextAsset*) == 0x8);
    // private UnityEngine.TextAsset m_followingCharacters
    // Size: 0x8
    // Offset: 0x98
    UnityEngine::TextAsset* m_followingCharacters;
    // Field size check
    static_assert(sizeof(UnityEngine::TextAsset*) == 0x8);
    // private TMPro.TMP_Settings/LineBreakingTable m_linebreakingRules
    // Size: 0x8
    // Offset: 0xA0
    TMPro::TMP_Settings::LineBreakingTable* m_linebreakingRules;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Settings::LineBreakingTable*) == 0x8);
    // Creating value type constructor for type: TMP_Settings
    TMP_Settings(bool m_enableWordWrapping_ = {}, bool m_enableKerning_ = {}, bool m_enableExtraPadding_ = {}, bool m_enableTintAllSprites_ = {}, bool m_enableParseEscapeCharacters_ = {}, bool m_EnableRaycastTarget_ = {}, bool m_GetFontFeaturesAtRuntime_ = {}, int m_missingGlyphCharacter_ = {}, bool m_warningsDisabled_ = {}, TMPro::TMP_FontAsset* m_defaultFontAsset_ = {}, ::Il2CppString* m_defaultFontAssetPath_ = {}, float m_defaultFontSize_ = {}, float m_defaultAutoSizeMinRatio_ = {}, float m_defaultAutoSizeMaxRatio_ = {}, UnityEngine::Vector2 m_defaultTextMeshProTextContainerSize_ = {}, UnityEngine::Vector2 m_defaultTextMeshProUITextContainerSize_ = {}, bool m_autoSizeTextContainer_ = {}, System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* m_fallbackFontAssets_ = {}, bool m_matchMaterialPreset_ = {}, TMPro::TMP_SpriteAsset* m_defaultSpriteAsset_ = {}, ::Il2CppString* m_defaultSpriteAssetPath_ = {}, ::Il2CppString* m_defaultColorGradientPresetsPath_ = {}, bool m_enableEmojiSupport_ = {}, TMPro::TMP_StyleSheet* m_defaultStyleSheet_ = {}, UnityEngine::TextAsset* m_leadingCharacters_ = {}, UnityEngine::TextAsset* m_followingCharacters_ = {}, TMPro::TMP_Settings::LineBreakingTable* m_linebreakingRules_ = {}) noexcept : m_enableWordWrapping{m_enableWordWrapping_}, m_enableKerning{m_enableKerning_}, m_enableExtraPadding{m_enableExtraPadding_}, m_enableTintAllSprites{m_enableTintAllSprites_}, m_enableParseEscapeCharacters{m_enableParseEscapeCharacters_}, m_EnableRaycastTarget{m_EnableRaycastTarget_}, m_GetFontFeaturesAtRuntime{m_GetFontFeaturesAtRuntime_}, m_missingGlyphCharacter{m_missingGlyphCharacter_}, m_warningsDisabled{m_warningsDisabled_}, m_defaultFontAsset{m_defaultFontAsset_}, m_defaultFontAssetPath{m_defaultFontAssetPath_}, m_defaultFontSize{m_defaultFontSize_}, m_defaultAutoSizeMinRatio{m_defaultAutoSizeMinRatio_}, m_defaultAutoSizeMaxRatio{m_defaultAutoSizeMaxRatio_}, m_defaultTextMeshProTextContainerSize{m_defaultTextMeshProTextContainerSize_}, m_defaultTextMeshProUITextContainerSize{m_defaultTextMeshProUITextContainerSize_}, m_autoSizeTextContainer{m_autoSizeTextContainer_}, m_fallbackFontAssets{m_fallbackFontAssets_}, m_matchMaterialPreset{m_matchMaterialPreset_}, m_defaultSpriteAsset{m_defaultSpriteAsset_}, m_defaultSpriteAssetPath{m_defaultSpriteAssetPath_}, m_defaultColorGradientPresetsPath{m_defaultColorGradientPresetsPath_}, m_enableEmojiSupport{m_enableEmojiSupport_}, m_defaultStyleSheet{m_defaultStyleSheet_}, m_leadingCharacters{m_leadingCharacters_}, m_followingCharacters{m_followingCharacters_}, m_linebreakingRules{m_linebreakingRules_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private TMPro.TMP_Settings s_Instance
    static TMPro::TMP_Settings* _get_s_Instance();
    // Set static field: static private TMPro.TMP_Settings s_Instance
    static void _set_s_Instance(TMPro::TMP_Settings* value);
    // static public System.String get_version()
    // Offset: 0x116DEB8
    static ::Il2CppString* get_version();
    // static public System.Boolean get_enableWordWrapping()
    // Offset: 0x116DF00
    static bool get_enableWordWrapping();
    // static public System.Boolean get_enableKerning()
    // Offset: 0x116DFD8
    static bool get_enableKerning();
    // static public System.Boolean get_enableExtraPadding()
    // Offset: 0x116DFF8
    static bool get_enableExtraPadding();
    // static public System.Boolean get_enableTintAllSprites()
    // Offset: 0x116E018
    static bool get_enableTintAllSprites();
    // static public System.Boolean get_enableParseEscapeCharacters()
    // Offset: 0x116E038
    static bool get_enableParseEscapeCharacters();
    // static public System.Boolean get_enableRaycastTarget()
    // Offset: 0x116E058
    static bool get_enableRaycastTarget();
    // static public System.Boolean get_getFontFeaturesAtRuntime()
    // Offset: 0x116E078
    static bool get_getFontFeaturesAtRuntime();
    // static public System.Int32 get_missingGlyphCharacter()
    // Offset: 0x116E098
    static int get_missingGlyphCharacter();
    // static public System.Void set_missingGlyphCharacter(System.Int32 value)
    // Offset: 0x116E0B8
    static void set_missingGlyphCharacter(int value);
    // static public System.Boolean get_warningsDisabled()
    // Offset: 0x116E0E4
    static bool get_warningsDisabled();
    // static public TMPro.TMP_FontAsset get_defaultFontAsset()
    // Offset: 0x116E104
    static TMPro::TMP_FontAsset* get_defaultFontAsset();
    // static public System.String get_defaultFontAssetPath()
    // Offset: 0x116E124
    static ::Il2CppString* get_defaultFontAssetPath();
    // static public System.Single get_defaultFontSize()
    // Offset: 0x116E144
    static float get_defaultFontSize();
    // static public System.Single get_defaultTextAutoSizingMinRatio()
    // Offset: 0x116E164
    static float get_defaultTextAutoSizingMinRatio();
    // static public System.Single get_defaultTextAutoSizingMaxRatio()
    // Offset: 0x116E184
    static float get_defaultTextAutoSizingMaxRatio();
    // static public UnityEngine.Vector2 get_defaultTextMeshProTextContainerSize()
    // Offset: 0x116E1A4
    static UnityEngine::Vector2 get_defaultTextMeshProTextContainerSize();
    // static public UnityEngine.Vector2 get_defaultTextMeshProUITextContainerSize()
    // Offset: 0x116E1C4
    static UnityEngine::Vector2 get_defaultTextMeshProUITextContainerSize();
    // static public System.Boolean get_autoSizeTextContainer()
    // Offset: 0x116E1E4
    static bool get_autoSizeTextContainer();
    // static public System.Collections.Generic.List`1<TMPro.TMP_FontAsset> get_fallbackFontAssets()
    // Offset: 0x116E204
    static System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* get_fallbackFontAssets();
    // static public System.Boolean get_matchMaterialPreset()
    // Offset: 0x116E224
    static bool get_matchMaterialPreset();
    // static public TMPro.TMP_SpriteAsset get_defaultSpriteAsset()
    // Offset: 0x116E244
    static TMPro::TMP_SpriteAsset* get_defaultSpriteAsset();
    // static public System.String get_defaultSpriteAssetPath()
    // Offset: 0x116E264
    static ::Il2CppString* get_defaultSpriteAssetPath();
    // static public System.String get_defaultColorGradientPresetsPath()
    // Offset: 0x116E284
    static ::Il2CppString* get_defaultColorGradientPresetsPath();
    // static public System.Boolean get_enableEmojiSupport()
    // Offset: 0x116E2A4
    static bool get_enableEmojiSupport();
    // static public System.Void set_enableEmojiSupport(System.Boolean value)
    // Offset: 0x116E2C4
    static void set_enableEmojiSupport(bool value);
    // static public TMPro.TMP_StyleSheet get_defaultStyleSheet()
    // Offset: 0x116E2F4
    static TMPro::TMP_StyleSheet* get_defaultStyleSheet();
    // static public UnityEngine.TextAsset get_leadingCharacters()
    // Offset: 0x116E314
    static UnityEngine::TextAsset* get_leadingCharacters();
    // static public UnityEngine.TextAsset get_followingCharacters()
    // Offset: 0x116E334
    static UnityEngine::TextAsset* get_followingCharacters();
    // static public TMPro.TMP_Settings/LineBreakingTable get_linebreakingRules()
    // Offset: 0x116E354
    static TMPro::TMP_Settings::LineBreakingTable* get_linebreakingRules();
    // static public TMPro.TMP_Settings get_instance()
    // Offset: 0x116DF20
    static TMPro::TMP_Settings* get_instance();
    // static public TMPro.TMP_Settings LoadDefaultSettings()
    // Offset: 0x116E494
    static TMPro::TMP_Settings* LoadDefaultSettings();
    // static public TMPro.TMP_Settings GetSettings()
    // Offset: 0x116E588
    static TMPro::TMP_Settings* GetSettings();
    // static public TMPro.TMP_FontAsset GetFontAsset()
    // Offset: 0x116E614
    static TMPro::TMP_FontAsset* GetFontAsset();
    // static public TMPro.TMP_SpriteAsset GetSpriteAsset()
    // Offset: 0x116E6A8
    static TMPro::TMP_SpriteAsset* GetSpriteAsset();
    // static public TMPro.TMP_StyleSheet GetStyleSheet()
    // Offset: 0x116E73C
    static TMPro::TMP_StyleSheet* GetStyleSheet();
    // static public System.Void LoadLinebreakingRules()
    // Offset: 0x116E388
    static void LoadLinebreakingRules();
    // static private System.Collections.Generic.Dictionary`2<System.Int32,System.Char> GetCharacters(UnityEngine.TextAsset file)
    // Offset: 0x116E7D8
    static System::Collections::Generic::Dictionary_2<int, ::Il2CppChar>* GetCharacters(UnityEngine::TextAsset* file);
    // public System.Void .ctor()
    // Offset: 0x116E8E8
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_Settings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_Settings*, creationType>()));
    }
  }; // TMPro.TMP_Settings
  #pragma pack(pop)
  static check_size<sizeof(TMP_Settings), 160 + sizeof(TMPro::TMP_Settings::LineBreakingTable*)> __TMPro_TMP_SettingsSizeCheck;
  static_assert(sizeof(TMP_Settings) == 0xA8);
  // Writing MetadataGetter for method: TMP_Settings::get_version
  // Il2CppName: get_version
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_version)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableWordWrapping
  // Il2CppName: get_enableWordWrapping
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableWordWrapping)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableWordWrapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableKerning
  // Il2CppName: get_enableKerning
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableKerning)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableKerning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableExtraPadding
  // Il2CppName: get_enableExtraPadding
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableExtraPadding)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableExtraPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableTintAllSprites
  // Il2CppName: get_enableTintAllSprites
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableTintAllSprites)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableTintAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableParseEscapeCharacters
  // Il2CppName: get_enableParseEscapeCharacters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableParseEscapeCharacters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableParseEscapeCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableRaycastTarget
  // Il2CppName: get_enableRaycastTarget
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableRaycastTarget)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableRaycastTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_getFontFeaturesAtRuntime
  // Il2CppName: get_getFontFeaturesAtRuntime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_getFontFeaturesAtRuntime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_getFontFeaturesAtRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_missingGlyphCharacter
  // Il2CppName: get_missingGlyphCharacter
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&TMP_Settings::get_missingGlyphCharacter)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_missingGlyphCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::set_missingGlyphCharacter
  // Il2CppName: set_missingGlyphCharacter
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&TMP_Settings::set_missingGlyphCharacter)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "set_missingGlyphCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_warningsDisabled
  // Il2CppName: get_warningsDisabled
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_warningsDisabled)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_warningsDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultFontAsset
  // Il2CppName: get_defaultFontAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)()>(&TMP_Settings::get_defaultFontAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultFontAssetPath
  // Il2CppName: get_defaultFontAssetPath
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_defaultFontAssetPath)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultFontAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultFontSize
  // Il2CppName: get_defaultFontSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TMP_Settings::get_defaultFontSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultFontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultTextAutoSizingMinRatio
  // Il2CppName: get_defaultTextAutoSizingMinRatio
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TMP_Settings::get_defaultTextAutoSizingMinRatio)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextAutoSizingMinRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultTextAutoSizingMaxRatio
  // Il2CppName: get_defaultTextAutoSizingMaxRatio
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TMP_Settings::get_defaultTextAutoSizingMaxRatio)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextAutoSizingMaxRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultTextMeshProTextContainerSize
  // Il2CppName: get_defaultTextMeshProTextContainerSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&TMP_Settings::get_defaultTextMeshProTextContainerSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextMeshProTextContainerSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultTextMeshProUITextContainerSize
  // Il2CppName: get_defaultTextMeshProUITextContainerSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&TMP_Settings::get_defaultTextMeshProUITextContainerSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextMeshProUITextContainerSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_autoSizeTextContainer
  // Il2CppName: get_autoSizeTextContainer
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_autoSizeTextContainer)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_fallbackFontAssets
  // Il2CppName: get_fallbackFontAssets
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* (*)()>(&TMP_Settings::get_fallbackFontAssets)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_fallbackFontAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_matchMaterialPreset
  // Il2CppName: get_matchMaterialPreset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_matchMaterialPreset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_matchMaterialPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultSpriteAsset
  // Il2CppName: get_defaultSpriteAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)()>(&TMP_Settings::get_defaultSpriteAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultSpriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultSpriteAssetPath
  // Il2CppName: get_defaultSpriteAssetPath
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_defaultSpriteAssetPath)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultSpriteAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultColorGradientPresetsPath
  // Il2CppName: get_defaultColorGradientPresetsPath
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_defaultColorGradientPresetsPath)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultColorGradientPresetsPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_enableEmojiSupport
  // Il2CppName: get_enableEmojiSupport
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableEmojiSupport)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableEmojiSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::set_enableEmojiSupport
  // Il2CppName: set_enableEmojiSupport
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&TMP_Settings::set_enableEmojiSupport)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "set_enableEmojiSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_defaultStyleSheet
  // Il2CppName: get_defaultStyleSheet
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_StyleSheet* (*)()>(&TMP_Settings::get_defaultStyleSheet)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_leadingCharacters
  // Il2CppName: get_leadingCharacters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAsset* (*)()>(&TMP_Settings::get_leadingCharacters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_leadingCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_followingCharacters
  // Il2CppName: get_followingCharacters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAsset* (*)()>(&TMP_Settings::get_followingCharacters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_followingCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_linebreakingRules
  // Il2CppName: get_linebreakingRules
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings::LineBreakingTable* (*)()>(&TMP_Settings::get_linebreakingRules)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_linebreakingRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::get_instance
  // Il2CppName: get_instance
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings* (*)()>(&TMP_Settings::get_instance)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::LoadDefaultSettings
  // Il2CppName: LoadDefaultSettings
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings* (*)()>(&TMP_Settings::LoadDefaultSettings)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "LoadDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::GetSettings
  // Il2CppName: GetSettings
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings* (*)()>(&TMP_Settings::GetSettings)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::GetFontAsset
  // Il2CppName: GetFontAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)()>(&TMP_Settings::GetFontAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::GetSpriteAsset
  // Il2CppName: GetSpriteAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)()>(&TMP_Settings::GetSpriteAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetSpriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::GetStyleSheet
  // Il2CppName: GetStyleSheet
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_StyleSheet* (*)()>(&TMP_Settings::GetStyleSheet)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::LoadLinebreakingRules
  // Il2CppName: LoadLinebreakingRules
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_Settings::LoadLinebreakingRules)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "LoadLinebreakingRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::GetCharacters
  // Il2CppName: GetCharacters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<int, ::Il2CppChar>* (*)(UnityEngine::TextAsset*)>(&TMP_Settings::GetCharacters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAsset*>()});
    }
  };
  // Writing MetadataGetter for method: TMP_Settings::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Settings::*)()>(&TMP_Settings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Settings::*)()>(&TMP_Settings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_Settings*, "TMPro", "TMP_Settings");
