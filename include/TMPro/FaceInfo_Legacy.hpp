// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.FaceInfo_Legacy
  // [TokenAttribute] Offset: FFFFFFFF
  class FaceInfo_Legacy : public ::Il2CppObject {
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* Name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Single PointSize
    // Size: 0x4
    // Offset: 0x18
    float PointSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Scale
    // Size: 0x4
    // Offset: 0x1C
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 CharacterCount
    // Size: 0x4
    // Offset: 0x20
    int CharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single LineHeight
    // Size: 0x4
    // Offset: 0x24
    float LineHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Baseline
    // Size: 0x4
    // Offset: 0x28
    float Baseline;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Ascender
    // Size: 0x4
    // Offset: 0x2C
    float Ascender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CapHeight
    // Size: 0x4
    // Offset: 0x30
    float CapHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Descender
    // Size: 0x4
    // Offset: 0x34
    float Descender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CenterLine
    // Size: 0x4
    // Offset: 0x38
    float CenterLine;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SuperscriptOffset
    // Size: 0x4
    // Offset: 0x3C
    float SuperscriptOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SubscriptOffset
    // Size: 0x4
    // Offset: 0x40
    float SubscriptOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SubSize
    // Size: 0x4
    // Offset: 0x44
    float SubSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Underline
    // Size: 0x4
    // Offset: 0x48
    float Underline;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single UnderlineThickness
    // Size: 0x4
    // Offset: 0x4C
    float UnderlineThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single strikethrough
    // Size: 0x4
    // Offset: 0x50
    float strikethrough;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single strikethroughThickness
    // Size: 0x4
    // Offset: 0x54
    float strikethroughThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single TabWidth
    // Size: 0x4
    // Offset: 0x58
    float TabWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Padding
    // Size: 0x4
    // Offset: 0x5C
    float Padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single AtlasWidth
    // Size: 0x4
    // Offset: 0x60
    float AtlasWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single AtlasHeight
    // Size: 0x4
    // Offset: 0x64
    float AtlasHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FaceInfo_Legacy
    FaceInfo_Legacy(::Il2CppString* Name_ = {}, float PointSize_ = {}, float Scale_ = {}, int CharacterCount_ = {}, float LineHeight_ = {}, float Baseline_ = {}, float Ascender_ = {}, float CapHeight_ = {}, float Descender_ = {}, float CenterLine_ = {}, float SuperscriptOffset_ = {}, float SubscriptOffset_ = {}, float SubSize_ = {}, float Underline_ = {}, float UnderlineThickness_ = {}, float strikethrough_ = {}, float strikethroughThickness_ = {}, float TabWidth_ = {}, float Padding_ = {}, float AtlasWidth_ = {}, float AtlasHeight_ = {}) noexcept : Name{Name_}, PointSize{PointSize_}, Scale{Scale_}, CharacterCount{CharacterCount_}, LineHeight{LineHeight_}, Baseline{Baseline_}, Ascender{Ascender_}, CapHeight{CapHeight_}, Descender{Descender_}, CenterLine{CenterLine_}, SuperscriptOffset{SuperscriptOffset_}, SubscriptOffset{SubscriptOffset_}, SubSize{SubSize_}, Underline{Underline_}, UnderlineThickness{UnderlineThickness_}, strikethrough{strikethrough_}, strikethroughThickness{strikethroughThickness_}, TabWidth{TabWidth_}, Padding{Padding_}, AtlasWidth{AtlasWidth_}, AtlasHeight{AtlasHeight_} {}
    // Get instance field: public System.String Name
    ::Il2CppString* _get_Name();
    // Set instance field: public System.String Name
    void _set_Name(::Il2CppString* value);
    // Get instance field: public System.Single PointSize
    float _get_PointSize();
    // Set instance field: public System.Single PointSize
    void _set_PointSize(float value);
    // Get instance field: public System.Single Scale
    float _get_Scale();
    // Set instance field: public System.Single Scale
    void _set_Scale(float value);
    // Get instance field: public System.Int32 CharacterCount
    int _get_CharacterCount();
    // Set instance field: public System.Int32 CharacterCount
    void _set_CharacterCount(int value);
    // Get instance field: public System.Single LineHeight
    float _get_LineHeight();
    // Set instance field: public System.Single LineHeight
    void _set_LineHeight(float value);
    // Get instance field: public System.Single Baseline
    float _get_Baseline();
    // Set instance field: public System.Single Baseline
    void _set_Baseline(float value);
    // Get instance field: public System.Single Ascender
    float _get_Ascender();
    // Set instance field: public System.Single Ascender
    void _set_Ascender(float value);
    // Get instance field: public System.Single CapHeight
    float _get_CapHeight();
    // Set instance field: public System.Single CapHeight
    void _set_CapHeight(float value);
    // Get instance field: public System.Single Descender
    float _get_Descender();
    // Set instance field: public System.Single Descender
    void _set_Descender(float value);
    // Get instance field: public System.Single CenterLine
    float _get_CenterLine();
    // Set instance field: public System.Single CenterLine
    void _set_CenterLine(float value);
    // Get instance field: public System.Single SuperscriptOffset
    float _get_SuperscriptOffset();
    // Set instance field: public System.Single SuperscriptOffset
    void _set_SuperscriptOffset(float value);
    // Get instance field: public System.Single SubscriptOffset
    float _get_SubscriptOffset();
    // Set instance field: public System.Single SubscriptOffset
    void _set_SubscriptOffset(float value);
    // Get instance field: public System.Single SubSize
    float _get_SubSize();
    // Set instance field: public System.Single SubSize
    void _set_SubSize(float value);
    // Get instance field: public System.Single Underline
    float _get_Underline();
    // Set instance field: public System.Single Underline
    void _set_Underline(float value);
    // Get instance field: public System.Single UnderlineThickness
    float _get_UnderlineThickness();
    // Set instance field: public System.Single UnderlineThickness
    void _set_UnderlineThickness(float value);
    // Get instance field: public System.Single strikethrough
    float _get_strikethrough();
    // Set instance field: public System.Single strikethrough
    void _set_strikethrough(float value);
    // Get instance field: public System.Single strikethroughThickness
    float _get_strikethroughThickness();
    // Set instance field: public System.Single strikethroughThickness
    void _set_strikethroughThickness(float value);
    // Get instance field: public System.Single TabWidth
    float _get_TabWidth();
    // Set instance field: public System.Single TabWidth
    void _set_TabWidth(float value);
    // Get instance field: public System.Single Padding
    float _get_Padding();
    // Set instance field: public System.Single Padding
    void _set_Padding(float value);
    // Get instance field: public System.Single AtlasWidth
    float _get_AtlasWidth();
    // Set instance field: public System.Single AtlasWidth
    void _set_AtlasWidth(float value);
    // Get instance field: public System.Single AtlasHeight
    float _get_AtlasHeight();
    // Set instance field: public System.Single AtlasHeight
    void _set_AtlasHeight(float value);
    // public System.Void .ctor()
    // Offset: 0x11148D0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FaceInfo_Legacy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FaceInfo_Legacy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FaceInfo_Legacy*, creationType>()));
    }
  }; // TMPro.FaceInfo_Legacy
  #pragma pack(pop)
  static check_size<sizeof(FaceInfo_Legacy), 100 + sizeof(float)> __TMPro_FaceInfo_LegacySizeCheck;
  static_assert(sizeof(FaceInfo_Legacy) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::FaceInfo_Legacy*, "TMPro", "FaceInfo_Legacy");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::FaceInfo_Legacy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
