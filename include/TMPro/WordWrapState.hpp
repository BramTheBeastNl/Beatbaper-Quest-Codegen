// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
// Including type: TMPro.TMP_LineInfo
#include "TMPro/TMP_LineInfo.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: TMPro.TMP_FontStyleStack
#include "TMPro/TMP_FontStyleStack.hpp"
// Including type: TMPro.TMP_RichTextTagStack`1
#include "TMPro/TMP_RichTextTagStack_1.hpp"
// Including type: TMPro.FontWeight
#include "TMPro/FontWeight.hpp"
// Including type: TMPro.MaterialReference
#include "TMPro/MaterialReference.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_TextInfo
  class TMP_TextInfo;
  // Forward declaring type: TMP_ColorGradient
  class TMP_ColorGradient;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TMPro.WordWrapState
  // [TokenAttribute] Offset: FFFFFFFF
  struct WordWrapState/*, public System::ValueType*/ {
    public:
    // public System.Int32 previous_WordBreak
    // Size: 0x4
    // Offset: 0x0
    int previous_WordBreak;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 total_CharacterCount
    // Size: 0x4
    // Offset: 0x4
    int total_CharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visible_CharacterCount
    // Size: 0x4
    // Offset: 0x8
    int visible_CharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visible_SpriteCount
    // Size: 0x4
    // Offset: 0xC
    int visible_SpriteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 visible_LinkCount
    // Size: 0x4
    // Offset: 0x10
    int visible_LinkCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 firstCharacterIndex
    // Size: 0x4
    // Offset: 0x14
    int firstCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 firstVisibleCharacterIndex
    // Size: 0x4
    // Offset: 0x18
    int firstVisibleCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lastCharacterIndex
    // Size: 0x4
    // Offset: 0x1C
    int lastCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lastVisibleCharIndex
    // Size: 0x4
    // Offset: 0x20
    int lastVisibleCharIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lineNumber
    // Size: 0x4
    // Offset: 0x24
    int lineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single maxCapHeight
    // Size: 0x4
    // Offset: 0x28
    float maxCapHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxAscender
    // Size: 0x4
    // Offset: 0x2C
    float maxAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxDescender
    // Size: 0x4
    // Offset: 0x30
    float maxDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxLineAscender
    // Size: 0x4
    // Offset: 0x34
    float maxLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxLineDescender
    // Size: 0x4
    // Offset: 0x38
    float maxLineDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single previousLineAscender
    // Size: 0x4
    // Offset: 0x3C
    float previousLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single xAdvance
    // Size: 0x4
    // Offset: 0x40
    float xAdvance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single preferredWidth
    // Size: 0x4
    // Offset: 0x44
    float preferredWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single preferredHeight
    // Size: 0x4
    // Offset: 0x48
    float preferredHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single previousLineScale
    // Size: 0x4
    // Offset: 0x4C
    float previousLineScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 wordCount
    // Size: 0x4
    // Offset: 0x50
    int wordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public TMPro.FontStyles fontStyle
    // Size: 0x4
    // Offset: 0x54
    TMPro::FontStyles fontStyle;
    // Field size check
    static_assert(sizeof(TMPro::FontStyles) == 0x4);
    // public System.Single fontScale
    // Size: 0x4
    // Offset: 0x58
    float fontScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fontScaleMultiplier
    // Size: 0x4
    // Offset: 0x5C
    float fontScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single currentFontSize
    // Size: 0x4
    // Offset: 0x60
    float currentFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single baselineOffset
    // Size: 0x4
    // Offset: 0x64
    float baselineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lineOffset
    // Size: 0x4
    // Offset: 0x68
    float lineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public TMPro.TMP_TextInfo textInfo
    // Size: 0x8
    // Offset: 0x70
    TMPro::TMP_TextInfo* textInfo;
    // Field size check
    static_assert(sizeof(TMPro::TMP_TextInfo*) == 0x8);
    // public TMPro.TMP_LineInfo lineInfo
    // Size: 0x5C
    // Offset: 0x78
    TMPro::TMP_LineInfo lineInfo;
    // Field size check
    static_assert(sizeof(TMPro::TMP_LineInfo) == 0x5C);
    // public UnityEngine.Color32 vertexColor
    // Size: 0x4
    // Offset: 0xD4
    UnityEngine::Color32 vertexColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 underlineColor
    // Size: 0x4
    // Offset: 0xD8
    UnityEngine::Color32 underlineColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 strikethroughColor
    // Size: 0x4
    // Offset: 0xDC
    UnityEngine::Color32 strikethroughColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // public UnityEngine.Color32 highlightColor
    // Size: 0x4
    // Offset: 0xE0
    UnityEngine::Color32 highlightColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // public TMPro.TMP_FontStyleStack basicStyleStack
    // Size: 0xA
    // Offset: 0xE4
    TMPro::TMP_FontStyleStack basicStyleStack;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontStyleStack) == 0xA);
    // public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> colorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xF0
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> colorStack;
    // public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> underlineColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x108
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> underlineColorStack;
    // public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> strikethroughColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x120
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> strikethroughColorStack;
    // public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> highlightColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0x138
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> highlightColorStack;
    // public TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> colorGradientStack
    // Size: 0xFFFFFFFF
    // Offset: 0x150
    TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> colorGradientStack;
    // public TMPro.TMP_RichTextTagStack`1<System.Single> sizeStack
    // Size: 0xFFFFFFFF
    // Offset: 0x168
    TMPro::TMP_RichTextTagStack_1<float> sizeStack;
    // public TMPro.TMP_RichTextTagStack`1<System.Single> indentStack
    // Size: 0xFFFFFFFF
    // Offset: 0x180
    TMPro::TMP_RichTextTagStack_1<float> indentStack;
    // public TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> fontWeightStack
    // Size: 0xFFFFFFFF
    // Offset: 0x198
    TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> fontWeightStack;
    // public TMPro.TMP_RichTextTagStack`1<System.Int32> styleStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1B0
    TMPro::TMP_RichTextTagStack_1<int> styleStack;
    // public TMPro.TMP_RichTextTagStack`1<System.Single> baselineStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1C8
    TMPro::TMP_RichTextTagStack_1<float> baselineStack;
    // public TMPro.TMP_RichTextTagStack`1<System.Int32> actionStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1E0
    TMPro::TMP_RichTextTagStack_1<int> actionStack;
    // public TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> materialReferenceStack
    // Size: 0xFFFFFFFF
    // Offset: 0x1F8
    TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> materialReferenceStack;
    // public TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> lineJustificationStack
    // Size: 0xFFFFFFFF
    // Offset: 0x240
    TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> lineJustificationStack;
    // public System.Int32 spriteAnimationID
    // Size: 0x4
    // Offset: 0x258
    int spriteAnimationID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public TMPro.TMP_FontAsset currentFontAsset
    // Size: 0x8
    // Offset: 0x260
    TMPro::TMP_FontAsset* currentFontAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontAsset*) == 0x8);
    // public TMPro.TMP_SpriteAsset currentSpriteAsset
    // Size: 0x8
    // Offset: 0x268
    TMPro::TMP_SpriteAsset* currentSpriteAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAsset*) == 0x8);
    // public UnityEngine.Material currentMaterial
    // Size: 0x8
    // Offset: 0x270
    UnityEngine::Material* currentMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // public System.Int32 currentMaterialIndex
    // Size: 0x4
    // Offset: 0x278
    int currentMaterialIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public TMPro.Extents meshExtents
    // Size: 0x10
    // Offset: 0x27C
    TMPro::Extents meshExtents;
    // Field size check
    static_assert(sizeof(TMPro::Extents) == 0x10);
    // public System.Boolean tagNoParsing
    // Size: 0x1
    // Offset: 0x28C
    bool tagNoParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isNonBreakingSpace
    // Size: 0x1
    // Offset: 0x28D
    bool isNonBreakingSpace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: WordWrapState
    constexpr WordWrapState(int previous_WordBreak_ = {}, int total_CharacterCount_ = {}, int visible_CharacterCount_ = {}, int visible_SpriteCount_ = {}, int visible_LinkCount_ = {}, int firstCharacterIndex_ = {}, int firstVisibleCharacterIndex_ = {}, int lastCharacterIndex_ = {}, int lastVisibleCharIndex_ = {}, int lineNumber_ = {}, float maxCapHeight_ = {}, float maxAscender_ = {}, float maxDescender_ = {}, float maxLineAscender_ = {}, float maxLineDescender_ = {}, float previousLineAscender_ = {}, float xAdvance_ = {}, float preferredWidth_ = {}, float preferredHeight_ = {}, float previousLineScale_ = {}, int wordCount_ = {}, TMPro::FontStyles fontStyle_ = {}, float fontScale_ = {}, float fontScaleMultiplier_ = {}, float currentFontSize_ = {}, float baselineOffset_ = {}, float lineOffset_ = {}, TMPro::TMP_TextInfo* textInfo_ = {}, TMPro::TMP_LineInfo lineInfo_ = {}, UnityEngine::Color32 vertexColor_ = {}, UnityEngine::Color32 underlineColor_ = {}, UnityEngine::Color32 strikethroughColor_ = {}, UnityEngine::Color32 highlightColor_ = {}, TMPro::TMP_FontStyleStack basicStyleStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> colorStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> underlineColorStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> strikethroughColorStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> highlightColorStack_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> colorGradientStack_ = {}, TMPro::TMP_RichTextTagStack_1<float> sizeStack_ = {}, TMPro::TMP_RichTextTagStack_1<float> indentStack_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> fontWeightStack_ = {}, TMPro::TMP_RichTextTagStack_1<int> styleStack_ = {}, TMPro::TMP_RichTextTagStack_1<float> baselineStack_ = {}, TMPro::TMP_RichTextTagStack_1<int> actionStack_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> materialReferenceStack_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> lineJustificationStack_ = {}, int spriteAnimationID_ = {}, TMPro::TMP_FontAsset* currentFontAsset_ = {}, TMPro::TMP_SpriteAsset* currentSpriteAsset_ = {}, UnityEngine::Material* currentMaterial_ = {}, int currentMaterialIndex_ = {}, TMPro::Extents meshExtents_ = {}, bool tagNoParsing_ = {}, bool isNonBreakingSpace_ = {}) noexcept : previous_WordBreak{previous_WordBreak_}, total_CharacterCount{total_CharacterCount_}, visible_CharacterCount{visible_CharacterCount_}, visible_SpriteCount{visible_SpriteCount_}, visible_LinkCount{visible_LinkCount_}, firstCharacterIndex{firstCharacterIndex_}, firstVisibleCharacterIndex{firstVisibleCharacterIndex_}, lastCharacterIndex{lastCharacterIndex_}, lastVisibleCharIndex{lastVisibleCharIndex_}, lineNumber{lineNumber_}, maxCapHeight{maxCapHeight_}, maxAscender{maxAscender_}, maxDescender{maxDescender_}, maxLineAscender{maxLineAscender_}, maxLineDescender{maxLineDescender_}, previousLineAscender{previousLineAscender_}, xAdvance{xAdvance_}, preferredWidth{preferredWidth_}, preferredHeight{preferredHeight_}, previousLineScale{previousLineScale_}, wordCount{wordCount_}, fontStyle{fontStyle_}, fontScale{fontScale_}, fontScaleMultiplier{fontScaleMultiplier_}, currentFontSize{currentFontSize_}, baselineOffset{baselineOffset_}, lineOffset{lineOffset_}, textInfo{textInfo_}, lineInfo{lineInfo_}, vertexColor{vertexColor_}, underlineColor{underlineColor_}, strikethroughColor{strikethroughColor_}, highlightColor{highlightColor_}, basicStyleStack{basicStyleStack_}, colorStack{colorStack_}, underlineColorStack{underlineColorStack_}, strikethroughColorStack{strikethroughColorStack_}, highlightColorStack{highlightColorStack_}, colorGradientStack{colorGradientStack_}, sizeStack{sizeStack_}, indentStack{indentStack_}, fontWeightStack{fontWeightStack_}, styleStack{styleStack_}, baselineStack{baselineStack_}, actionStack{actionStack_}, materialReferenceStack{materialReferenceStack_}, lineJustificationStack{lineJustificationStack_}, spriteAnimationID{spriteAnimationID_}, currentFontAsset{currentFontAsset_}, currentSpriteAsset{currentSpriteAsset_}, currentMaterial{currentMaterial_}, currentMaterialIndex{currentMaterialIndex_}, meshExtents{meshExtents_}, tagNoParsing{tagNoParsing_}, isNonBreakingSpace{isNonBreakingSpace_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public System.Int32 previous_WordBreak
    int _get_previous_WordBreak();
    // Set instance field: public System.Int32 previous_WordBreak
    void _set_previous_WordBreak(int value);
    // Get instance field: public System.Int32 total_CharacterCount
    int _get_total_CharacterCount();
    // Set instance field: public System.Int32 total_CharacterCount
    void _set_total_CharacterCount(int value);
    // Get instance field: public System.Int32 visible_CharacterCount
    int _get_visible_CharacterCount();
    // Set instance field: public System.Int32 visible_CharacterCount
    void _set_visible_CharacterCount(int value);
    // Get instance field: public System.Int32 visible_SpriteCount
    int _get_visible_SpriteCount();
    // Set instance field: public System.Int32 visible_SpriteCount
    void _set_visible_SpriteCount(int value);
    // Get instance field: public System.Int32 visible_LinkCount
    int _get_visible_LinkCount();
    // Set instance field: public System.Int32 visible_LinkCount
    void _set_visible_LinkCount(int value);
    // Get instance field: public System.Int32 firstCharacterIndex
    int _get_firstCharacterIndex();
    // Set instance field: public System.Int32 firstCharacterIndex
    void _set_firstCharacterIndex(int value);
    // Get instance field: public System.Int32 firstVisibleCharacterIndex
    int _get_firstVisibleCharacterIndex();
    // Set instance field: public System.Int32 firstVisibleCharacterIndex
    void _set_firstVisibleCharacterIndex(int value);
    // Get instance field: public System.Int32 lastCharacterIndex
    int _get_lastCharacterIndex();
    // Set instance field: public System.Int32 lastCharacterIndex
    void _set_lastCharacterIndex(int value);
    // Get instance field: public System.Int32 lastVisibleCharIndex
    int _get_lastVisibleCharIndex();
    // Set instance field: public System.Int32 lastVisibleCharIndex
    void _set_lastVisibleCharIndex(int value);
    // Get instance field: public System.Int32 lineNumber
    int _get_lineNumber();
    // Set instance field: public System.Int32 lineNumber
    void _set_lineNumber(int value);
    // Get instance field: public System.Single maxCapHeight
    float _get_maxCapHeight();
    // Set instance field: public System.Single maxCapHeight
    void _set_maxCapHeight(float value);
    // Get instance field: public System.Single maxAscender
    float _get_maxAscender();
    // Set instance field: public System.Single maxAscender
    void _set_maxAscender(float value);
    // Get instance field: public System.Single maxDescender
    float _get_maxDescender();
    // Set instance field: public System.Single maxDescender
    void _set_maxDescender(float value);
    // Get instance field: public System.Single maxLineAscender
    float _get_maxLineAscender();
    // Set instance field: public System.Single maxLineAscender
    void _set_maxLineAscender(float value);
    // Get instance field: public System.Single maxLineDescender
    float _get_maxLineDescender();
    // Set instance field: public System.Single maxLineDescender
    void _set_maxLineDescender(float value);
    // Get instance field: public System.Single previousLineAscender
    float _get_previousLineAscender();
    // Set instance field: public System.Single previousLineAscender
    void _set_previousLineAscender(float value);
    // Get instance field: public System.Single xAdvance
    float _get_xAdvance();
    // Set instance field: public System.Single xAdvance
    void _set_xAdvance(float value);
    // Get instance field: public System.Single preferredWidth
    float _get_preferredWidth();
    // Set instance field: public System.Single preferredWidth
    void _set_preferredWidth(float value);
    // Get instance field: public System.Single preferredHeight
    float _get_preferredHeight();
    // Set instance field: public System.Single preferredHeight
    void _set_preferredHeight(float value);
    // Get instance field: public System.Single previousLineScale
    float _get_previousLineScale();
    // Set instance field: public System.Single previousLineScale
    void _set_previousLineScale(float value);
    // Get instance field: public System.Int32 wordCount
    int _get_wordCount();
    // Set instance field: public System.Int32 wordCount
    void _set_wordCount(int value);
    // Get instance field: public TMPro.FontStyles fontStyle
    TMPro::FontStyles _get_fontStyle();
    // Set instance field: public TMPro.FontStyles fontStyle
    void _set_fontStyle(TMPro::FontStyles value);
    // Get instance field: public System.Single fontScale
    float _get_fontScale();
    // Set instance field: public System.Single fontScale
    void _set_fontScale(float value);
    // Get instance field: public System.Single fontScaleMultiplier
    float _get_fontScaleMultiplier();
    // Set instance field: public System.Single fontScaleMultiplier
    void _set_fontScaleMultiplier(float value);
    // Get instance field: public System.Single currentFontSize
    float _get_currentFontSize();
    // Set instance field: public System.Single currentFontSize
    void _set_currentFontSize(float value);
    // Get instance field: public System.Single baselineOffset
    float _get_baselineOffset();
    // Set instance field: public System.Single baselineOffset
    void _set_baselineOffset(float value);
    // Get instance field: public System.Single lineOffset
    float _get_lineOffset();
    // Set instance field: public System.Single lineOffset
    void _set_lineOffset(float value);
    // Get instance field: public TMPro.TMP_TextInfo textInfo
    TMPro::TMP_TextInfo* _get_textInfo();
    // Set instance field: public TMPro.TMP_TextInfo textInfo
    void _set_textInfo(TMPro::TMP_TextInfo* value);
    // Get instance field: public TMPro.TMP_LineInfo lineInfo
    TMPro::TMP_LineInfo _get_lineInfo();
    // Set instance field: public TMPro.TMP_LineInfo lineInfo
    void _set_lineInfo(TMPro::TMP_LineInfo value);
    // Get instance field: public UnityEngine.Color32 vertexColor
    UnityEngine::Color32 _get_vertexColor();
    // Set instance field: public UnityEngine.Color32 vertexColor
    void _set_vertexColor(UnityEngine::Color32 value);
    // Get instance field: public UnityEngine.Color32 underlineColor
    UnityEngine::Color32 _get_underlineColor();
    // Set instance field: public UnityEngine.Color32 underlineColor
    void _set_underlineColor(UnityEngine::Color32 value);
    // Get instance field: public UnityEngine.Color32 strikethroughColor
    UnityEngine::Color32 _get_strikethroughColor();
    // Set instance field: public UnityEngine.Color32 strikethroughColor
    void _set_strikethroughColor(UnityEngine::Color32 value);
    // Get instance field: public UnityEngine.Color32 highlightColor
    UnityEngine::Color32 _get_highlightColor();
    // Set instance field: public UnityEngine.Color32 highlightColor
    void _set_highlightColor(UnityEngine::Color32 value);
    // Get instance field: public TMPro.TMP_FontStyleStack basicStyleStack
    TMPro::TMP_FontStyleStack _get_basicStyleStack();
    // Set instance field: public TMPro.TMP_FontStyleStack basicStyleStack
    void _set_basicStyleStack(TMPro::TMP_FontStyleStack value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> colorStack
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> _get_colorStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> colorStack
    void _set_colorStack(TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> underlineColorStack
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> _get_underlineColorStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> underlineColorStack
    void _set_underlineColorStack(TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> strikethroughColorStack
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> _get_strikethroughColorStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> strikethroughColorStack
    void _set_strikethroughColorStack(TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> highlightColorStack
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> _get_highlightColorStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> highlightColorStack
    void _set_highlightColorStack(TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> colorGradientStack
    TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> _get_colorGradientStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> colorGradientStack
    void _set_colorGradientStack(TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<System.Single> sizeStack
    TMPro::TMP_RichTextTagStack_1<float> _get_sizeStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<System.Single> sizeStack
    void _set_sizeStack(TMPro::TMP_RichTextTagStack_1<float> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<System.Single> indentStack
    TMPro::TMP_RichTextTagStack_1<float> _get_indentStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<System.Single> indentStack
    void _set_indentStack(TMPro::TMP_RichTextTagStack_1<float> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> fontWeightStack
    TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> _get_fontWeightStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> fontWeightStack
    void _set_fontWeightStack(TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<System.Int32> styleStack
    TMPro::TMP_RichTextTagStack_1<int> _get_styleStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<System.Int32> styleStack
    void _set_styleStack(TMPro::TMP_RichTextTagStack_1<int> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<System.Single> baselineStack
    TMPro::TMP_RichTextTagStack_1<float> _get_baselineStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<System.Single> baselineStack
    void _set_baselineStack(TMPro::TMP_RichTextTagStack_1<float> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<System.Int32> actionStack
    TMPro::TMP_RichTextTagStack_1<int> _get_actionStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<System.Int32> actionStack
    void _set_actionStack(TMPro::TMP_RichTextTagStack_1<int> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> materialReferenceStack
    TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> _get_materialReferenceStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> materialReferenceStack
    void _set_materialReferenceStack(TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> value);
    // Get instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> lineJustificationStack
    TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> _get_lineJustificationStack();
    // Set instance field: public TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> lineJustificationStack
    void _set_lineJustificationStack(TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> value);
    // Get instance field: public System.Int32 spriteAnimationID
    int _get_spriteAnimationID();
    // Set instance field: public System.Int32 spriteAnimationID
    void _set_spriteAnimationID(int value);
    // Get instance field: public TMPro.TMP_FontAsset currentFontAsset
    TMPro::TMP_FontAsset* _get_currentFontAsset();
    // Set instance field: public TMPro.TMP_FontAsset currentFontAsset
    void _set_currentFontAsset(TMPro::TMP_FontAsset* value);
    // Get instance field: public TMPro.TMP_SpriteAsset currentSpriteAsset
    TMPro::TMP_SpriteAsset* _get_currentSpriteAsset();
    // Set instance field: public TMPro.TMP_SpriteAsset currentSpriteAsset
    void _set_currentSpriteAsset(TMPro::TMP_SpriteAsset* value);
    // Get instance field: public UnityEngine.Material currentMaterial
    UnityEngine::Material* _get_currentMaterial();
    // Set instance field: public UnityEngine.Material currentMaterial
    void _set_currentMaterial(UnityEngine::Material* value);
    // Get instance field: public System.Int32 currentMaterialIndex
    int _get_currentMaterialIndex();
    // Set instance field: public System.Int32 currentMaterialIndex
    void _set_currentMaterialIndex(int value);
    // Get instance field: public TMPro.Extents meshExtents
    TMPro::Extents _get_meshExtents();
    // Set instance field: public TMPro.Extents meshExtents
    void _set_meshExtents(TMPro::Extents value);
    // Get instance field: public System.Boolean tagNoParsing
    bool _get_tagNoParsing();
    // Set instance field: public System.Boolean tagNoParsing
    void _set_tagNoParsing(bool value);
    // Get instance field: public System.Boolean isNonBreakingSpace
    bool _get_isNonBreakingSpace();
    // Set instance field: public System.Boolean isNonBreakingSpace
    void _set_isNonBreakingSpace(bool value);
  }; // TMPro.WordWrapState
  // WARNING Not writing size check since size may be invalid!
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(TMPro::WordWrapState, "TMPro", "WordWrapState");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
