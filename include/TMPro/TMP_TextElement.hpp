// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TextElementType
#include "TMPro/TextElementType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TextCore
namespace UnityEngine::TextCore {
  // Forward declaring type: Glyph
  class Glyph;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_TextElement
  class TMP_TextElement : public ::Il2CppObject {
    public:
    // protected TMPro.TextElementType m_ElementType
    // Size: 0x1
    // Offset: 0x10
    TMPro::TextElementType m_ElementType;
    // Field size check
    static_assert(sizeof(TMPro::TextElementType) == 0x1);
    // Padding between fields: m_ElementType and: m_Unicode
    char __padding0[0x3] = {};
    // private System.UInt32 m_Unicode
    // Size: 0x4
    // Offset: 0x14
    uint m_Unicode;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private UnityEngine.TextCore.Glyph m_Glyph
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::TextCore::Glyph* m_Glyph;
    // Field size check
    static_assert(sizeof(UnityEngine::TextCore::Glyph*) == 0x8);
    // private System.UInt32 m_GlyphIndex
    // Size: 0x4
    // Offset: 0x20
    uint m_GlyphIndex;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Single m_Scale
    // Size: 0x4
    // Offset: 0x24
    float m_Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: TMP_TextElement
    TMP_TextElement(TMPro::TextElementType m_ElementType_ = {}, uint m_Unicode_ = {}, UnityEngine::TextCore::Glyph* m_Glyph_ = {}, uint m_GlyphIndex_ = {}, float m_Scale_ = {}) noexcept : m_ElementType{m_ElementType_}, m_Unicode{m_Unicode_}, m_Glyph{m_Glyph_}, m_GlyphIndex{m_GlyphIndex_}, m_Scale{m_Scale_} {}
    // public TMPro.TextElementType get_elementType()
    // Offset: 0x13FAE88
    TMPro::TextElementType get_elementType();
    // public System.UInt32 get_unicode()
    // Offset: 0x13FAE90
    uint get_unicode();
    // public System.Void set_unicode(System.UInt32 value)
    // Offset: 0x13FAE98
    void set_unicode(uint value);
    // public UnityEngine.TextCore.Glyph get_glyph()
    // Offset: 0x13FAEA0
    UnityEngine::TextCore::Glyph* get_glyph();
    // public System.Void set_glyph(UnityEngine.TextCore.Glyph value)
    // Offset: 0x13FAEA8
    void set_glyph(UnityEngine::TextCore::Glyph* value);
    // public System.UInt32 get_glyphIndex()
    // Offset: 0x13FAEB0
    uint get_glyphIndex();
    // public System.Void set_glyphIndex(System.UInt32 value)
    // Offset: 0x13FAEB8
    void set_glyphIndex(uint value);
    // public System.Single get_scale()
    // Offset: 0x13FAEC0
    float get_scale();
    // public System.Void set_scale(System.Single value)
    // Offset: 0x13FAEC8
    void set_scale(float value);
    // public System.Void .ctor()
    // Offset: 0x13FAED0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_TextElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_TextElement*, creationType>()));
    }
  }; // TMPro.TMP_TextElement
  #pragma pack(pop)
  static check_size<sizeof(TMP_TextElement), 36 + sizeof(float)> __TMPro_TMP_TextElementSizeCheck;
  static_assert(sizeof(TMP_TextElement) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_TextElement*, "TMPro", "TMP_TextElement");
// Writing MetadataGetter for method: TMPro::TMP_TextElement::get_elementType
// Il2CppName: get_elementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextElementType (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::get_elementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "get_elementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::get_unicode
// Il2CppName: get_unicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::get_unicode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "get_unicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::set_unicode
// Il2CppName: set_unicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_TextElement::*)(uint)>(&TMPro::TMP_TextElement::set_unicode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "set_unicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::get_glyph
// Il2CppName: get_glyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextCore::Glyph* (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::get_glyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "get_glyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::set_glyph
// Il2CppName: set_glyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_TextElement::*)(UnityEngine::TextCore::Glyph*)>(&TMPro::TMP_TextElement::set_glyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "set_glyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::Glyph*>()});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::get_glyphIndex
// Il2CppName: get_glyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::get_glyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "get_glyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::set_glyphIndex
// Il2CppName: set_glyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_TextElement::*)(uint)>(&TMPro::TMP_TextElement::set_glyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "set_glyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::get_scale
// Il2CppName: get_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::get_scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "get_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::set_scale
// Il2CppName: set_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_TextElement::*)(float)>(&TMPro::TMP_TextElement::set_scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), "set_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_TextElement::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_TextElement::*)()>(&TMPro::TMP_TextElement::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_TextElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
