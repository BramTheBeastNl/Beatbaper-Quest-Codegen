// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: TMPro
namespace TMPro {
  // Autogenerated type: TMPro.TMP_RichTextTagStack`1
  template<typename T>
  struct TMP_RichTextTagStack_1 : public System::ValueType {
    public:
    // public T[] m_ItemStack
    // Offset: 0x0
    ::Array<T>* m_ItemStack;
    // public System.Int32 m_Index
    // Offset: 0x0
    int m_Index;
    // private System.Int32 m_Capacity
    // Offset: 0x0
    int m_Capacity;
    // private T m_DefaultItem
    // Offset: 0x0
    T m_DefaultItem;
    // Creating value type constructor for type: TMP_RichTextTagStack_1
    constexpr TMP_RichTextTagStack_1(::Array<T>* m_ItemStack_ = {}, int m_Index_ = {}, int m_Capacity_ = {}, T m_DefaultItem_ = {}) noexcept : m_ItemStack{m_ItemStack_}, m_Index{m_Index_}, m_Capacity{m_Capacity_}, m_DefaultItem{m_DefaultItem_} {}
    // Autogenerated static field getter
    // Get static field: static private System.Int32 k_DefaultCapacity
    static int _get_k_DefaultCapacity() {
      static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("_get_k_DefaultCapacity");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_RichTextTagStack_1<T>>::get(), "k_DefaultCapacity"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 k_DefaultCapacity
    static void _set_k_DefaultCapacity(int value) {
      static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("_set_k_DefaultCapacity");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TMP_RichTextTagStack_1<T>>::get(), "k_DefaultCapacity", value));
    }
    // public System.Void .ctor(T[] tagStack)
    // Offset: 0xFFFFFFFF
    TMP_RichTextTagStack_1(::Array<T>* tagStack) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<TMP_RichTextTagStack_1<T>>(), ".ctor", {}, ::il2cpp_utils::ExtractTypes(tagStack)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, tagStack);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    TMP_RichTextTagStack_1(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<TMP_RichTextTagStack_1<T>>(), ".ctor", {}, ::il2cpp_utils::ExtractTypes(capacity)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, capacity);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("Clear");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Clear", {}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
    }
    // public System.Void SetDefault(T item)
    // Offset: 0xFFFFFFFF
    void SetDefault(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("SetDefault");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "SetDefault", {}, ::il2cpp_utils::ExtractTypes(item)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, item);
    }
    // public System.Void Add(T item)
    // Offset: 0xFFFFFFFF
    void Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("Add");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Add", {}, ::il2cpp_utils::ExtractTypes(item)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, item);
    }
    // public T Remove()
    // Offset: 0xFFFFFFFF
    T Remove() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("Remove");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "Remove", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
    // public System.Void Push(T item)
    // Offset: 0xFFFFFFFF
    void Push(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("Push");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Push", {}, ::il2cpp_utils::ExtractTypes(item)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, item);
    }
    // public T Pop()
    // Offset: 0xFFFFFFFF
    T Pop() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("Pop");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "Pop", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
    // public T Peek()
    // Offset: 0xFFFFFFFF
    T Peek() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("Peek");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "Peek", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
    // public T CurrentItem()
    // Offset: 0xFFFFFFFF
    T CurrentItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("CurrentItem");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "CurrentItem", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
    // public T PreviousItem()
    // Offset: 0xFFFFFFFF
    T PreviousItem() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("TMPro").WithContext("TMP_RichTextTagStack_1").WithContext("PreviousItem");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "PreviousItem", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
  }; // TMPro.TMP_RichTextTagStack`1
  // Could not write size check! Type: TMPro.TMP_RichTextTagStack`1 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(TMPro::TMP_RichTextTagStack_1, "TMPro", "TMP_RichTextTagStack`1");
#pragma pack(pop)
