// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TMPro.TMP_LinkInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct TMP_LinkInfo/*, public System::ValueType*/ {
    public:
    // public TMPro.TMP_Text textComponent
    // Size: 0x8
    // Offset: 0x0
    TMPro::TMP_Text* textComponent;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Text*) == 0x8);
    // public System.Int32 hashCode
    // Size: 0x4
    // Offset: 0x8
    int hashCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkIdFirstCharacterIndex
    // Size: 0x4
    // Offset: 0xC
    int linkIdFirstCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkIdLength
    // Size: 0x4
    // Offset: 0x10
    int linkIdLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkTextfirstCharacterIndex
    // Size: 0x4
    // Offset: 0x14
    int linkTextfirstCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 linkTextLength
    // Size: 0x4
    // Offset: 0x18
    int linkTextLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: linkTextLength and: linkID
    char __padding5[0x4] = {};
    // System.Char[] linkID
    // Size: 0x8
    // Offset: 0x20
    ::Array<::Il2CppChar>* linkID;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // Creating value type constructor for type: TMP_LinkInfo
    constexpr TMP_LinkInfo(TMPro::TMP_Text* textComponent_ = {}, int hashCode_ = {}, int linkIdFirstCharacterIndex_ = {}, int linkIdLength_ = {}, int linkTextfirstCharacterIndex_ = {}, int linkTextLength_ = {}, ::Array<::Il2CppChar>* linkID_ = {}) noexcept : textComponent{textComponent_}, hashCode{hashCode_}, linkIdFirstCharacterIndex{linkIdFirstCharacterIndex_}, linkIdLength{linkIdLength_}, linkTextfirstCharacterIndex{linkTextfirstCharacterIndex_}, linkTextLength{linkTextLength_}, linkID{linkID_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public TMPro.TMP_Text textComponent
    TMPro::TMP_Text* _get_textComponent();
    // Set instance field: public TMPro.TMP_Text textComponent
    void _set_textComponent(TMPro::TMP_Text* value);
    // Get instance field: public System.Int32 hashCode
    int _get_hashCode();
    // Set instance field: public System.Int32 hashCode
    void _set_hashCode(int value);
    // Get instance field: public System.Int32 linkIdFirstCharacterIndex
    int _get_linkIdFirstCharacterIndex();
    // Set instance field: public System.Int32 linkIdFirstCharacterIndex
    void _set_linkIdFirstCharacterIndex(int value);
    // Get instance field: public System.Int32 linkIdLength
    int _get_linkIdLength();
    // Set instance field: public System.Int32 linkIdLength
    void _set_linkIdLength(int value);
    // Get instance field: public System.Int32 linkTextfirstCharacterIndex
    int _get_linkTextfirstCharacterIndex();
    // Set instance field: public System.Int32 linkTextfirstCharacterIndex
    void _set_linkTextfirstCharacterIndex(int value);
    // Get instance field: public System.Int32 linkTextLength
    int _get_linkTextLength();
    // Set instance field: public System.Int32 linkTextLength
    void _set_linkTextLength(int value);
    // Get instance field: System.Char[] linkID
    ::Array<::Il2CppChar>* _get_linkID();
    // Set instance field: System.Char[] linkID
    void _set_linkID(::Array<::Il2CppChar>* value);
    // System.Void SetLinkID(System.Char[] text, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xD67BD0
    void SetLinkID(::Array<::Il2CppChar>* text, int startIndex, int length);
    // public System.String GetLinkText()
    // Offset: 0xD67BD8
    ::Il2CppString* GetLinkText();
    // public System.String GetLinkID()
    // Offset: 0xD67BE0
    ::Il2CppString* GetLinkID();
  }; // TMPro.TMP_LinkInfo
  #pragma pack(pop)
  static check_size<sizeof(TMP_LinkInfo), 32 + sizeof(::Array<::Il2CppChar>*)> __TMPro_TMP_LinkInfoSizeCheck;
  static_assert(sizeof(TMP_LinkInfo) == 0x28);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_LinkInfo, "TMPro", "TMP_LinkInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::TMP_LinkInfo::SetLinkID
// Il2CppName: SetLinkID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_LinkInfo::*)(::Array<::Il2CppChar>*, int, int)>(&TMPro::TMP_LinkInfo::SetLinkID)> {
  static const MethodInfo* get() {
    static auto* text = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_LinkInfo), "SetLinkID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, startIndex, length});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_LinkInfo::GetLinkText
// Il2CppName: GetLinkText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMPro::TMP_LinkInfo::*)()>(&TMPro::TMP_LinkInfo::GetLinkText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_LinkInfo), "GetLinkText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_LinkInfo::GetLinkID
// Il2CppName: GetLinkID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMPro::TMP_LinkInfo::*)()>(&TMPro::TMP_LinkInfo::GetLinkID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_LinkInfo), "GetLinkID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
