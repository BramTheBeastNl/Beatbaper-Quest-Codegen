// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus
#include "UnityEngine/ResourceManagement/AsyncOperations/DownloadStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::ResourceManagement::AsyncOperations
namespace UnityEngine::ResourceManagement::AsyncOperations {
  // Forward declaring type: IGenericProviderOperation
  class IGenericProviderOperation;
}
// Forward declaring namespace: UnityEngine::ResourceManagement
namespace UnityEngine::ResourceManagement {
  // Forward declaring type: ResourceManager
  class ResourceManager;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: UnityEngine::ResourceManagement::ResourceLocations
namespace UnityEngine::ResourceManagement::ResourceLocations {
  // Forward declaring type: IResourceLocation
  class IResourceLocation;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.ResourceManagement.ResourceProviders
namespace UnityEngine::ResourceManagement::ResourceProviders {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle
  struct ProvideHandle/*, public System::ValueType*/ {
    public:
    // private System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x0
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Version and: m_InternalOp
    char __padding0[0x4] = {};
    // private UnityEngine.ResourceManagement.AsyncOperations.IGenericProviderOperation m_InternalOp
    // Size: 0x8
    // Offset: 0x8
    UnityEngine::ResourceManagement::AsyncOperations::IGenericProviderOperation* m_InternalOp;
    // Field size check
    static_assert(sizeof(UnityEngine::ResourceManagement::AsyncOperations::IGenericProviderOperation*) == 0x8);
    // private UnityEngine.ResourceManagement.ResourceManager m_ResourceManager
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::ResourceManagement::ResourceManager* m_ResourceManager;
    // Field size check
    static_assert(sizeof(UnityEngine::ResourceManagement::ResourceManager*) == 0x8);
    // Creating value type constructor for type: ProvideHandle
    constexpr ProvideHandle(int m_Version_ = {}, UnityEngine::ResourceManagement::AsyncOperations::IGenericProviderOperation* m_InternalOp_ = {}, UnityEngine::ResourceManagement::ResourceManager* m_ResourceManager_ = {}) noexcept : m_Version{m_Version_}, m_InternalOp{m_InternalOp_}, m_ResourceManager{m_ResourceManager_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // System.Void .ctor(UnityEngine.ResourceManagement.ResourceManager rm, UnityEngine.ResourceManagement.AsyncOperations.IGenericProviderOperation op)
    // Offset: 0xF01EF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    ProvideHandle(UnityEngine::ResourceManagement::ResourceManager* rm, UnityEngine::ResourceManagement::AsyncOperations::IGenericProviderOperation* op) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rm), ::il2cpp_utils::ExtractType(op)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, rm, op);
    }
    // private UnityEngine.ResourceManagement.AsyncOperations.IGenericProviderOperation get_InternalOp()
    // Offset: 0xF01EFC
    UnityEngine::ResourceManagement::AsyncOperations::IGenericProviderOperation* get_InternalOp();
    // public UnityEngine.ResourceManagement.ResourceManager get_ResourceManager()
    // Offset: 0xF01F04
    UnityEngine::ResourceManagement::ResourceManager* get_ResourceManager();
    // public System.Type get_Type()
    // Offset: 0xF01F0C
    System::Type* get_Type();
    // public UnityEngine.ResourceManagement.ResourceLocations.IResourceLocation get_Location()
    // Offset: 0xF01F14
    UnityEngine::ResourceManagement::ResourceLocations::IResourceLocation* get_Location();
    // public System.Int32 get_DependencyCount()
    // Offset: 0xF01F1C
    int get_DependencyCount();
    // public TDepObject GetDependency(System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class TDepObject>
    TDepObject GetDependency(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle::GetDependency");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetDependency", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDepObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDepObject>::get()}));
      return ::il2cpp_utils::RunMethodThrow<TDepObject, false>(*this, ___generic__method, index);
    }
    // public System.Void GetDependencies(System.Collections.Generic.IList`1<System.Object> list)
    // Offset: 0xF01F24
    void GetDependencies(System::Collections::Generic::IList_1<::Il2CppObject*>* list);
    // public System.Void SetProgressCallback(System.Func`1<System.Single> callback)
    // Offset: 0xF01F2C
    void SetProgressCallback(System::Func_1<float>* callback);
    // public System.Void SetDownloadProgressCallbacks(System.Func`1<UnityEngine.ResourceManagement.AsyncOperations.DownloadStatus> callback)
    // Offset: 0xF01F34
    void SetDownloadProgressCallbacks(System::Func_1<UnityEngine::ResourceManagement::AsyncOperations::DownloadStatus>* callback);
    // public System.Void SetWaitForCompletionCallback(System.Func`1<System.Boolean> callback)
    // Offset: 0xF01F3C
    void SetWaitForCompletionCallback(System::Func_1<bool>* callback);
    // public System.Void Complete(T result, System.Boolean status, System.Exception exception)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Complete(T result, bool status, System::Exception* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle::Complete");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Complete", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(status), ::il2cpp_utils::ExtractType(exception)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___generic__method, result, status, exception);
    }
  }; // UnityEngine.ResourceManagement.ResourceProviders.ProvideHandle
  #pragma pack(pop)
  static check_size<sizeof(ProvideHandle), 16 + sizeof(UnityEngine::ResourceManagement::ResourceManager*)> __UnityEngine_ResourceManagement_ResourceProviders_ProvideHandleSizeCheck;
  static_assert(sizeof(ProvideHandle) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ResourceManagement::ResourceProviders::ProvideHandle, "UnityEngine.ResourceManagement.ResourceProviders", "ProvideHandle");
