// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioBehaviour
#include "UnityEngine/AudioBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: FFTWindow
  struct FFTWindow;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AudioSource
  // [StaticAccessorAttribute] Offset: DBC220
  // [RequireComponent] Offset: DBC220
  class AudioSource : public UnityEngine::AudioBehaviour {
    public:
    // Creating value type constructor for type: AudioSource
    AudioSource() noexcept {}
    // static private System.Single GetPitch(UnityEngine.AudioSource source)
    // Offset: 0x23D547C
    static float GetPitch(UnityEngine::AudioSource* source);
    // static private System.Void SetPitch(UnityEngine.AudioSource source, System.Single pitch)
    // Offset: 0x23D54BC
    static void SetPitch(UnityEngine::AudioSource* source, float pitch);
    // static private System.Void PlayHelper(UnityEngine.AudioSource source, System.UInt64 delay)
    // Offset: 0x23D550C
    static void PlayHelper(UnityEngine::AudioSource* source, uint64_t delay);
    // private System.Void Play(System.Double delay)
    // Offset: 0x23D555C
    void Play(double delay);
    // static private System.Void PlayOneShotHelper(UnityEngine.AudioSource source, UnityEngine.AudioClip clip, System.Single volumeScale)
    // Offset: 0x23D55AC
    static void PlayOneShotHelper(UnityEngine::AudioSource* source, UnityEngine::AudioClip* clip, float volumeScale);
    // private System.Void Stop(System.Boolean stopOneShots)
    // Offset: 0x23D560C
    void Stop(bool stopOneShots);
    // static private System.Void GetSpectrumDataHelper(UnityEngine.AudioSource source, out System.Single[] samples, System.Int32 channel, UnityEngine.FFTWindow window)
    // Offset: 0x23D565C
    static void GetSpectrumDataHelper(UnityEngine::AudioSource* source, ::Array<float>*& samples, int channel, UnityEngine::FFTWindow window);
    // public System.Single get_volume()
    // Offset: 0x23D56C4
    float get_volume();
    // public System.Void set_volume(System.Single value)
    // Offset: 0x23D5704
    void set_volume(float value);
    // public System.Single get_pitch()
    // Offset: 0x23D5754
    float get_pitch();
    // public System.Void set_pitch(System.Single value)
    // Offset: 0x23D5794
    void set_pitch(float value);
    // public System.Single get_time()
    // Offset: 0x23D57E4
    float get_time();
    // public System.Void set_time(System.Single value)
    // Offset: 0x23D5824
    void set_time(float value);
    // public System.Int32 get_timeSamples()
    // Offset: 0x23D5874
    int get_timeSamples();
    // public UnityEngine.AudioClip get_clip()
    // Offset: 0x23D58B4
    UnityEngine::AudioClip* get_clip();
    // public System.Void set_clip(UnityEngine.AudioClip value)
    // Offset: 0x23D58F4
    void set_clip(UnityEngine::AudioClip* value);
    // public System.Void Play()
    // Offset: 0x23D5944
    void Play();
    // public System.Void PlayScheduled(System.Double time)
    // Offset: 0x23D5988
    void PlayScheduled(double time);
    // public System.Void PlayOneShot(UnityEngine.AudioClip clip)
    // Offset: 0x23D59E4
    void PlayOneShot(UnityEngine::AudioClip* clip);
    // public System.Void PlayOneShot(UnityEngine.AudioClip clip, System.Single volumeScale)
    // Offset: 0x23D59EC
    void PlayOneShot(UnityEngine::AudioClip* clip, float volumeScale);
    // public System.Void Stop()
    // Offset: 0x23D5AE8
    void Stop();
    // public System.Void Pause()
    // Offset: 0x23D5B2C
    void Pause();
    // public System.Void UnPause()
    // Offset: 0x23D5B6C
    void UnPause();
    // public System.Boolean get_isPlaying()
    // Offset: 0x23D5BAC
    bool get_isPlaying();
    // public System.Void set_loop(System.Boolean value)
    // Offset: 0x23D5BEC
    void set_loop(bool value);
    // public System.Boolean get_playOnAwake()
    // Offset: 0x23D5C3C
    bool get_playOnAwake();
    // public System.Void set_playOnAwake(System.Boolean value)
    // Offset: 0x23D5C7C
    void set_playOnAwake(bool value);
    // public System.Void set_ignoreListenerPause(System.Boolean value)
    // Offset: 0x23D5CCC
    void set_ignoreListenerPause(bool value);
    // public System.Void set_spatialBlend(System.Single value)
    // Offset: 0x23D5D1C
    void set_spatialBlend(float value);
    // public System.Void set_reverbZoneMix(System.Single value)
    // Offset: 0x23D5D6C
    void set_reverbZoneMix(float value);
    // public System.Void set_bypassEffects(System.Boolean value)
    // Offset: 0x23D5DBC
    void set_bypassEffects(bool value);
    // public System.Void set_bypassReverbZones(System.Boolean value)
    // Offset: 0x23D5E0C
    void set_bypassReverbZones(bool value);
    // public System.Void set_dopplerLevel(System.Single value)
    // Offset: 0x23D5E5C
    void set_dopplerLevel(float value);
    // public System.Void set_spread(System.Single value)
    // Offset: 0x23D5EAC
    void set_spread(float value);
    // public System.Void set_priority(System.Int32 value)
    // Offset: 0x23D5EFC
    void set_priority(int value);
    // public System.Void set_minDistance(System.Single value)
    // Offset: 0x23D5F4C
    void set_minDistance(float value);
    // public System.Void GetSpectrumData(System.Single[] samples, System.Int32 channel, UnityEngine.FFTWindow window)
    // Offset: 0x23D5F9C
    void GetSpectrumData(::Array<float>* samples, int channel, UnityEngine::FFTWindow window);
  }; // UnityEngine.AudioSource
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AudioSource*, "UnityEngine", "AudioSource");
// Writing MetadataGetter for method: AudioSource::GetPitch
// Il2CppName: GetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::AudioSource*)>(&AudioSource::GetPitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "GetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Writing MetadataGetter for method: AudioSource::SetPitch
// Il2CppName: SetPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, float)>(&AudioSource::SetPitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "SetPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayHelper
// Il2CppName: PlayHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, uint64_t)>(&AudioSource::PlayHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(double)>(&AudioSource::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayOneShotHelper
// Il2CppName: PlayOneShotHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, UnityEngine::AudioClip*, float)>(&AudioSource::PlayOneShotHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayOneShotHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::GetSpectrumDataHelper
// Il2CppName: GetSpectrumDataHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::AudioSource*, ::Array<float>*&, int, UnityEngine::FFTWindow)>(&AudioSource::GetSpectrumDataHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "GetSpectrumDataHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FFTWindow>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_volume
// Il2CppName: get_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioSource::*)()>(&AudioSource::get_volume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_volume
// Il2CppName: set_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_volume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_pitch
// Il2CppName: get_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioSource::*)()>(&AudioSource::get_pitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_pitch
// Il2CppName: set_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_pitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioSource::*)()>(&AudioSource::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_timeSamples
// Il2CppName: get_timeSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (AudioSource::*)()>(&AudioSource::get_timeSamples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_timeSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (AudioSource::*)()>(&AudioSource::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(UnityEngine::AudioClip*)>(&AudioSource::set_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayScheduled
// Il2CppName: PlayScheduled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(double)>(&AudioSource::PlayScheduled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayScheduled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayOneShot
// Il2CppName: PlayOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(UnityEngine::AudioClip*)>(&AudioSource::PlayOneShot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: AudioSource::PlayOneShot
// Il2CppName: PlayOneShot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(UnityEngine::AudioClip*, float)>(&AudioSource::PlayOneShot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "PlayOneShot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::UnPause
// Il2CppName: UnPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)()>(&AudioSource::UnPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "UnPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioSource::*)()>(&AudioSource::get_isPlaying)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_loop
// Il2CppName: set_loop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_loop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_loop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::get_playOnAwake
// Il2CppName: get_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioSource::*)()>(&AudioSource::get_playOnAwake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "get_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioSource::set_playOnAwake
// Il2CppName: set_playOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_playOnAwake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_playOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_ignoreListenerPause
// Il2CppName: set_ignoreListenerPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_ignoreListenerPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_ignoreListenerPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_spatialBlend
// Il2CppName: set_spatialBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_spatialBlend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_spatialBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_reverbZoneMix
// Il2CppName: set_reverbZoneMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_reverbZoneMix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_reverbZoneMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_bypassEffects
// Il2CppName: set_bypassEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_bypassEffects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_bypassEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_bypassReverbZones
// Il2CppName: set_bypassReverbZones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(bool)>(&AudioSource::set_bypassReverbZones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_bypassReverbZones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_dopplerLevel
// Il2CppName: set_dopplerLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_dopplerLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_dopplerLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_spread
// Il2CppName: set_spread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_spread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_spread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_priority
// Il2CppName: set_priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(int)>(&AudioSource::set_priority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioSource::set_minDistance
// Il2CppName: set_minDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(float)>(&AudioSource::set_minDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "set_minDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioSource::GetSpectrumData
// Il2CppName: GetSpectrumData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioSource::*)(::Array<float>*, int, UnityEngine::FFTWindow)>(&AudioSource::GetSpectrumData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioSource*), "GetSpectrumData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::FFTWindow>()});
  }
};
