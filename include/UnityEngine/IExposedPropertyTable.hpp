// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: PropertyName
  struct PropertyName;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.IExposedPropertyTable
  class IExposedPropertyTable {
    public:
    // Creating value type constructor for type: IExposedPropertyTable
    IExposedPropertyTable() noexcept {}
    // public UnityEngine.Object GetReferenceValue(UnityEngine.PropertyName id, out System.Boolean idValid)
    // Offset: 0xFFFFFFFF
    UnityEngine::Object* GetReferenceValue(UnityEngine::PropertyName id, bool& idValid);
  }; // UnityEngine.IExposedPropertyTable
  #pragma pack(pop)
  // Writing MetadataGetter for method: IExposedPropertyTable::GetReferenceValue
  // Il2CppName: GetReferenceValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (IExposedPropertyTable::*)(UnityEngine::PropertyName, bool&)>(&IExposedPropertyTable::GetReferenceValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IExposedPropertyTable*), "GetReferenceValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PropertyName>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::IExposedPropertyTable*, "UnityEngine", "IExposedPropertyTable");
