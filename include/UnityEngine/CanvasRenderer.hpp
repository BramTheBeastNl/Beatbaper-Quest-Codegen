// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.UIVertex
#include "UnityEngine/UIVertex.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.CanvasRenderer
  // [NativeClassAttribute] Offset: DB4CC4
  // [NativeHeaderAttribute] Offset: DB4CC4
  class CanvasRenderer : public UnityEngine::Component {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDB4F38
    // [DebuggerBrowsableAttribute] Offset: 0xDB4F38
    // private System.Boolean <isMask>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool isMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: CanvasRenderer
    CanvasRenderer(bool isMask_ = {}) noexcept : isMask{isMask_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void set_hasPopInstruction(System.Boolean value)
    // Offset: 0x23E3984
    void set_hasPopInstruction(bool value);
    // public System.Int32 get_materialCount()
    // Offset: 0x23E39D4
    int get_materialCount();
    // public System.Void set_materialCount(System.Int32 value)
    // Offset: 0x23E3A14
    void set_materialCount(int value);
    // public System.Void set_popMaterialCount(System.Int32 value)
    // Offset: 0x23E3A64
    void set_popMaterialCount(int value);
    // public System.Int32 get_absoluteDepth()
    // Offset: 0x23E3AB4
    int get_absoluteDepth();
    // public System.Boolean get_hasMoved()
    // Offset: 0x23E3AF4
    bool get_hasMoved();
    // public System.Boolean get_cull()
    // Offset: 0x23E3B34
    bool get_cull();
    // public System.Void set_cull(System.Boolean value)
    // Offset: 0x23E3B74
    void set_cull(bool value);
    // public System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x23E3BC4
    void SetColor(UnityEngine::Color color);
    // public UnityEngine.Color GetColor()
    // Offset: 0x23E3C6C
    UnityEngine::Color GetColor();
    // public System.Void EnableRectClipping(UnityEngine.Rect rect)
    // Offset: 0x23E3D18
    void EnableRectClipping(UnityEngine::Rect rect);
    // public System.Void set_clippingSoftness(UnityEngine.Vector2 value)
    // Offset: 0x23E3DC0
    void set_clippingSoftness(UnityEngine::Vector2 value);
    // public System.Void DisableRectClipping()
    // Offset: 0x23E3E64
    void DisableRectClipping();
    // public System.Void SetMaterial(UnityEngine.Material material, System.Int32 index)
    // Offset: 0x23E3EA4
    void SetMaterial(UnityEngine::Material* material, int index);
    // public UnityEngine.Material GetMaterial(System.Int32 index)
    // Offset: 0x23E3EFC
    UnityEngine::Material* GetMaterial(int index);
    // public System.Void SetPopMaterial(UnityEngine.Material material, System.Int32 index)
    // Offset: 0x23E3F4C
    void SetPopMaterial(UnityEngine::Material* material, int index);
    // public System.Void SetTexture(UnityEngine.Texture texture)
    // Offset: 0x23E3FA4
    void SetTexture(UnityEngine::Texture* texture);
    // public System.Void SetAlphaTexture(UnityEngine.Texture texture)
    // Offset: 0x23E3FF4
    void SetAlphaTexture(UnityEngine::Texture* texture);
    // public System.Void SetMesh(UnityEngine.Mesh mesh)
    // Offset: 0x23E4044
    void SetMesh(UnityEngine::Mesh* mesh);
    // public System.Void Clear()
    // Offset: 0x23E4094
    void Clear();
    // public System.Void SetMaterial(UnityEngine.Material material, UnityEngine.Texture texture)
    // Offset: 0x23E40D4
    void SetMaterial(UnityEngine::Material* material, UnityEngine::Texture* texture);
    // public UnityEngine.Material GetMaterial()
    // Offset: 0x23E4214
    UnityEngine::Material* GetMaterial();
    // static public System.Void SplitUIVertexStreams(System.Collections.Generic.List`1<UnityEngine.UIVertex> verts, System.Collections.Generic.List`1<UnityEngine.Vector3> positions, System.Collections.Generic.List`1<UnityEngine.Color32> colors, System.Collections.Generic.List`1<UnityEngine.Vector2> uv0S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv1S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv2S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv3S, System.Collections.Generic.List`1<UnityEngine.Vector3> normals, System.Collections.Generic.List`1<UnityEngine.Vector4> tangents, System.Collections.Generic.List`1<System.Int32> indices)
    // Offset: 0x23E4258
    static void SplitUIVertexStreams(System::Collections::Generic::List_1<UnityEngine::UIVertex>* verts, System::Collections::Generic::List_1<UnityEngine::Vector3>* positions, System::Collections::Generic::List_1<UnityEngine::Color32>* colors, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv0S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv1S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv2S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv3S, System::Collections::Generic::List_1<UnityEngine::Vector3>* normals, System::Collections::Generic::List_1<UnityEngine::Vector4>* tangents, System::Collections::Generic::List_1<int>* indices);
    // static public System.Void CreateUIVertexStream(System.Collections.Generic.List`1<UnityEngine.UIVertex> verts, System.Collections.Generic.List`1<UnityEngine.Vector3> positions, System.Collections.Generic.List`1<UnityEngine.Color32> colors, System.Collections.Generic.List`1<UnityEngine.Vector2> uv0S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv1S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv2S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv3S, System.Collections.Generic.List`1<UnityEngine.Vector3> normals, System.Collections.Generic.List`1<UnityEngine.Vector4> tangents, System.Collections.Generic.List`1<System.Int32> indices)
    // Offset: 0x23E4424
    static void CreateUIVertexStream(System::Collections::Generic::List_1<UnityEngine::UIVertex>* verts, System::Collections::Generic::List_1<UnityEngine::Vector3>* positions, System::Collections::Generic::List_1<UnityEngine::Color32>* colors, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv0S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv1S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv2S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv3S, System::Collections::Generic::List_1<UnityEngine::Vector3>* normals, System::Collections::Generic::List_1<UnityEngine::Vector4>* tangents, System::Collections::Generic::List_1<int>* indices);
    // static public System.Void AddUIVertexStream(System.Collections.Generic.List`1<UnityEngine.UIVertex> verts, System.Collections.Generic.List`1<UnityEngine.Vector3> positions, System.Collections.Generic.List`1<UnityEngine.Color32> colors, System.Collections.Generic.List`1<UnityEngine.Vector2> uv0S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv1S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv2S, System.Collections.Generic.List`1<UnityEngine.Vector2> uv3S, System.Collections.Generic.List`1<UnityEngine.Vector3> normals, System.Collections.Generic.List`1<UnityEngine.Vector4> tangents)
    // Offset: 0x23E456C
    static void AddUIVertexStream(System::Collections::Generic::List_1<UnityEngine::UIVertex>* verts, System::Collections::Generic::List_1<UnityEngine::Vector3>* positions, System::Collections::Generic::List_1<UnityEngine::Color32>* colors, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv0S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv1S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv2S, System::Collections::Generic::List_1<UnityEngine::Vector2>* uv3S, System::Collections::Generic::List_1<UnityEngine::Vector3>* normals, System::Collections::Generic::List_1<UnityEngine::Vector4>* tangents);
    // static private System.Void SplitIndicesStreamsInternal(System.Object verts, System.Object indices)
    // Offset: 0x23E43D4
    static void SplitIndicesStreamsInternal(::Il2CppObject* verts, ::Il2CppObject* indices);
    // static private System.Void SplitUIVertexStreamsInternal(System.Object verts, System.Object positions, System.Object colors, System.Object uv0S, System.Object uv1S, System.Object uv2S, System.Object uv3S, System.Object normals, System.Object tangents)
    // Offset: 0x23E4334
    static void SplitUIVertexStreamsInternal(::Il2CppObject* verts, ::Il2CppObject* positions, ::Il2CppObject* colors, ::Il2CppObject* uv0S, ::Il2CppObject* uv1S, ::Il2CppObject* uv2S, ::Il2CppObject* uv3S, ::Il2CppObject* normals, ::Il2CppObject* tangents);
    // static private System.Void CreateUIVertexStreamInternal(System.Object verts, System.Object positions, System.Object colors, System.Object uv0S, System.Object uv1S, System.Object uv2S, System.Object uv3S, System.Object normals, System.Object tangents, System.Object indices)
    // Offset: 0x23E44C8
    static void CreateUIVertexStreamInternal(::Il2CppObject* verts, ::Il2CppObject* positions, ::Il2CppObject* colors, ::Il2CppObject* uv0S, ::Il2CppObject* uv1S, ::Il2CppObject* uv2S, ::Il2CppObject* uv3S, ::Il2CppObject* normals, ::Il2CppObject* tangents, ::Il2CppObject* indices);
    // private System.Void SetColor_Injected(ref UnityEngine.Color color)
    // Offset: 0x23E3C1C
    void SetColor_Injected(UnityEngine::Color& color);
    // private System.Void GetColor_Injected(out UnityEngine.Color ret)
    // Offset: 0x23E3CC8
    void GetColor_Injected(UnityEngine::Color& ret);
    // private System.Void EnableRectClipping_Injected(ref UnityEngine.Rect rect)
    // Offset: 0x23E3D70
    void EnableRectClipping_Injected(UnityEngine::Rect& rect);
    // private System.Void set_clippingSoftness_Injected(ref UnityEngine.Vector2 value)
    // Offset: 0x23E3E14
    void set_clippingSoftness_Injected(UnityEngine::Vector2& value);
  }; // UnityEngine.CanvasRenderer
  #pragma pack(pop)
  static check_size<sizeof(CanvasRenderer), 24 + sizeof(bool)> __UnityEngine_CanvasRendererSizeCheck;
  static_assert(sizeof(CanvasRenderer) == 0x19);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::CanvasRenderer*, "UnityEngine", "CanvasRenderer");
// Writing MetadataGetter for method: CanvasRenderer::set_hasPopInstruction
// Il2CppName: set_hasPopInstruction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(bool)>(&CanvasRenderer::set_hasPopInstruction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "set_hasPopInstruction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::get_materialCount
// Il2CppName: get_materialCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CanvasRenderer::*)()>(&CanvasRenderer::get_materialCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "get_materialCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::set_materialCount
// Il2CppName: set_materialCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(int)>(&CanvasRenderer::set_materialCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "set_materialCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::set_popMaterialCount
// Il2CppName: set_popMaterialCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(int)>(&CanvasRenderer::set_popMaterialCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "set_popMaterialCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::get_absoluteDepth
// Il2CppName: get_absoluteDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CanvasRenderer::*)()>(&CanvasRenderer::get_absoluteDepth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "get_absoluteDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::get_hasMoved
// Il2CppName: get_hasMoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CanvasRenderer::*)()>(&CanvasRenderer::get_hasMoved)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "get_hasMoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::get_cull
// Il2CppName: get_cull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CanvasRenderer::*)()>(&CanvasRenderer::get_cull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "get_cull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::set_cull
// Il2CppName: set_cull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(bool)>(&CanvasRenderer::set_cull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "set_cull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Color)>(&CanvasRenderer::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (CanvasRenderer::*)()>(&CanvasRenderer::GetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::EnableRectClipping
// Il2CppName: EnableRectClipping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Rect)>(&CanvasRenderer::EnableRectClipping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "EnableRectClipping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::set_clippingSoftness
// Il2CppName: set_clippingSoftness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Vector2)>(&CanvasRenderer::set_clippingSoftness)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "set_clippingSoftness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::DisableRectClipping
// Il2CppName: DisableRectClipping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)()>(&CanvasRenderer::DisableRectClipping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "DisableRectClipping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Material*, int)>(&CanvasRenderer::SetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (CanvasRenderer::*)(int)>(&CanvasRenderer::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetPopMaterial
// Il2CppName: SetPopMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Material*, int)>(&CanvasRenderer::SetPopMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetPopMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetTexture
// Il2CppName: SetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Texture*)>(&CanvasRenderer::SetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetAlphaTexture
// Il2CppName: SetAlphaTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Texture*)>(&CanvasRenderer::SetAlphaTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetAlphaTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetMesh
// Il2CppName: SetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Mesh*)>(&CanvasRenderer::SetMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)()>(&CanvasRenderer::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetMaterial
// Il2CppName: SetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Material*, UnityEngine::Texture*)>(&CanvasRenderer::SetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (CanvasRenderer::*)()>(&CanvasRenderer::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SplitUIVertexStreams
// Il2CppName: SplitUIVertexStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::List_1<UnityEngine::UIVertex>*, System::Collections::Generic::List_1<UnityEngine::Vector3>*, System::Collections::Generic::List_1<UnityEngine::Color32>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector3>*, System::Collections::Generic::List_1<UnityEngine::Vector4>*, System::Collections::Generic::List_1<int>*)>(&CanvasRenderer::SplitUIVertexStreams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SplitUIVertexStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::UIVertex>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Color32>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector4>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<int>*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::CreateUIVertexStream
// Il2CppName: CreateUIVertexStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::List_1<UnityEngine::UIVertex>*, System::Collections::Generic::List_1<UnityEngine::Vector3>*, System::Collections::Generic::List_1<UnityEngine::Color32>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector3>*, System::Collections::Generic::List_1<UnityEngine::Vector4>*, System::Collections::Generic::List_1<int>*)>(&CanvasRenderer::CreateUIVertexStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "CreateUIVertexStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::UIVertex>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Color32>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector4>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<int>*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::AddUIVertexStream
// Il2CppName: AddUIVertexStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::List_1<UnityEngine::UIVertex>*, System::Collections::Generic::List_1<UnityEngine::Vector3>*, System::Collections::Generic::List_1<UnityEngine::Color32>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector2>*, System::Collections::Generic::List_1<UnityEngine::Vector3>*, System::Collections::Generic::List_1<UnityEngine::Vector4>*)>(&CanvasRenderer::AddUIVertexStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "AddUIVertexStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::UIVertex>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Color32>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector2>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Vector4>*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SplitIndicesStreamsInternal
// Il2CppName: SplitIndicesStreamsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*)>(&CanvasRenderer::SplitIndicesStreamsInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SplitIndicesStreamsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SplitUIVertexStreamsInternal
// Il2CppName: SplitUIVertexStreamsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&CanvasRenderer::SplitUIVertexStreamsInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SplitUIVertexStreamsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::CreateUIVertexStreamInternal
// Il2CppName: CreateUIVertexStreamInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&CanvasRenderer::CreateUIVertexStreamInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "CreateUIVertexStreamInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::SetColor_Injected
// Il2CppName: SetColor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Color&)>(&CanvasRenderer::SetColor_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "SetColor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::GetColor_Injected
// Il2CppName: GetColor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Color&)>(&CanvasRenderer::GetColor_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "GetColor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::EnableRectClipping_Injected
// Il2CppName: EnableRectClipping_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Rect&)>(&CanvasRenderer::EnableRectClipping_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "EnableRectClipping_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect&>()});
  }
};
// Writing MetadataGetter for method: CanvasRenderer::set_clippingSoftness_Injected
// Il2CppName: set_clippingSoftness_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CanvasRenderer::*)(UnityEngine::Vector2&)>(&CanvasRenderer::set_clippingSoftness_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CanvasRenderer*), "set_clippingSoftness_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>()});
  }
};
