// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.GradientColorKey
#include "UnityEngine/GradientColorKey.hpp"
// Including type: UnityEngine.GradientAlphaKey
#include "UnityEngine/GradientAlphaKey.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Gradient
  // [RequiredByNativeCodeAttribute] Offset: D8F5E8
  // [NativeHeaderAttribute] Offset: D8F5E8
  class Gradient : public ::Il2CppObject/*, public System::IEquatable_1<UnityEngine::Gradient*>*/ {
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: Gradient
    Gradient(System::IntPtr m_Ptr_ = {}) noexcept : m_Ptr{m_Ptr_} {}
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Gradient*>
    operator System::IEquatable_1<UnityEngine::Gradient*>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Gradient*>*>(this);
    }
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // static private System.IntPtr Init()
    // Offset: 0x1B9ABF0
    static System::IntPtr Init();
    // private System.Void Cleanup()
    // Offset: 0x1B9AC24
    void Cleanup();
    // private System.Boolean Internal_Equals(System.IntPtr other)
    // Offset: 0x1B9AC64
    bool Internal_Equals(System::IntPtr other);
    // public UnityEngine.Color Evaluate(System.Single time)
    // Offset: 0x1B9AD8C
    UnityEngine::Color Evaluate(float time);
    // public UnityEngine.GradientColorKey[] get_colorKeys()
    // Offset: 0x1B9AE58
    ::Array<UnityEngine::GradientColorKey>* get_colorKeys();
    // public UnityEngine.GradientAlphaKey[] get_alphaKeys()
    // Offset: 0x1B9AE98
    ::Array<UnityEngine::GradientAlphaKey>* get_alphaKeys();
    // public System.Void SetKeys(UnityEngine.GradientColorKey[] colorKeys, UnityEngine.GradientAlphaKey[] alphaKeys)
    // Offset: 0x1B9AED8
    void SetKeys(::Array<UnityEngine::GradientColorKey>* colorKeys, ::Array<UnityEngine::GradientAlphaKey>* alphaKeys);
    // public System.Boolean Equals(UnityEngine.Gradient other)
    // Offset: 0x1B9B00C
    bool Equals(UnityEngine::Gradient* other);
    // private System.Void Evaluate_Injected(System.Single time, out UnityEngine.Color ret)
    // Offset: 0x1B9ADF8
    void Evaluate_Injected(float time, UnityEngine::Color& ret);
    // public System.Void .ctor()
    // Offset: 0x1B9ACB4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Gradient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Gradient*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1B9AD00
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x1B9AF30
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1B9B0DC
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Gradient
  #pragma pack(pop)
  static check_size<sizeof(Gradient), 16 + sizeof(System::IntPtr)> __UnityEngine_GradientSizeCheck;
  static_assert(sizeof(Gradient) == 0x18);
  // Writing MetadataGetter for method: Gradient::Init
  // Il2CppName: Init
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&Gradient::Init)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Gradient::Cleanup
  // Il2CppName: Cleanup
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::Cleanup)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Gradient::Internal_Equals
  // Il2CppName: Internal_Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Gradient::*)(System::IntPtr)>(&Gradient::Internal_Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Internal_Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
    }
  };
  // Writing MetadataGetter for method: Gradient::Evaluate
  // Il2CppName: Evaluate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (Gradient::*)(float)>(&Gradient::Evaluate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Gradient::get_colorKeys
  // Il2CppName: get_colorKeys
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GradientColorKey>* (Gradient::*)()>(&Gradient::get_colorKeys)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "get_colorKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Gradient::get_alphaKeys
  // Il2CppName: get_alphaKeys
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GradientAlphaKey>* (Gradient::*)()>(&Gradient::get_alphaKeys)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "get_alphaKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Gradient::SetKeys
  // Il2CppName: SetKeys
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)(::Array<UnityEngine::GradientColorKey>*, ::Array<UnityEngine::GradientAlphaKey>*)>(&Gradient::SetKeys)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "SetKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::GradientColorKey>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::GradientAlphaKey>*>()});
    }
  };
  // Writing MetadataGetter for method: Gradient::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Gradient::*)(UnityEngine::Gradient*)>(&Gradient::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Gradient*>()});
    }
  };
  // Writing MetadataGetter for method: Gradient::Evaluate_Injected
  // Il2CppName: Evaluate_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)(float, UnityEngine::Color&)>(&Gradient::Evaluate_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Evaluate_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
    }
  };
  // Writing MetadataGetter for method: Gradient::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Gradient::Finalize
  // Il2CppName: Finalize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::Finalize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Gradient::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Gradient::*)(::Il2CppObject*)>(&Gradient::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Gradient::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Gradient::*)()>(&Gradient::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Gradient*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Gradient*, "UnityEngine", "Gradient");
