// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Including type: UnityEngine.AnimatorClipInfo
#include "UnityEngine/AnimatorClipInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: AnimatorUpdateMode
  struct AnimatorUpdateMode;
  // Forward declaring type: AvatarIKGoal
  struct AvatarIKGoal;
  // Forward declaring type: AvatarIKHint
  struct AvatarIKHint;
  // Forward declaring type: HumanBodyBones
  struct HumanBodyBones;
  // Forward declaring type: ScriptableObject
  class ScriptableObject;
  // Forward declaring type: StateMachineBehaviour
  class StateMachineBehaviour;
  // Forward declaring type: StateInfoIndex
  struct StateInfoIndex;
  // Forward declaring type: AnimatorStateInfo
  struct AnimatorStateInfo;
  // Forward declaring type: AnimatorTransitionInfo
  struct AnimatorTransitionInfo;
  // Forward declaring type: AnimatorControllerParameter
  class AnimatorControllerParameter;
  // Forward declaring type: MatchTargetWeightMask
  struct MatchTargetWeightMask;
  // Forward declaring type: AvatarTarget
  struct AvatarTarget;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimatorCullingMode
  struct AnimatorCullingMode;
  // Forward declaring type: AnimatorRecorderMode
  struct AnimatorRecorderMode;
  // Forward declaring type: RuntimeAnimatorController
  class RuntimeAnimatorController;
  // Forward declaring type: Avatar
  class Avatar;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Animator
  // [NativeHeaderAttribute] Offset: DA8D88
  // [UsedByNativeCodeAttribute] Offset: DA8D88
  // [NativeHeaderAttribute] Offset: DA8D88
  // [NativeHeaderAttribute] Offset: DA8D88
  class Animator : public UnityEngine::Behaviour {
    public:
    // Creating value type constructor for type: Animator
    Animator() noexcept {}
    // public System.Boolean get_isOptimizable()
    // Offset: 0x233C4D0
    bool get_isOptimizable();
    // public System.Boolean get_isHuman()
    // Offset: 0x233C510
    bool get_isHuman();
    // public System.Boolean get_hasRootMotion()
    // Offset: 0x233C550
    bool get_hasRootMotion();
    // System.Boolean get_isRootPositionOrRotationControlledByCurves()
    // Offset: 0x233C590
    bool get_isRootPositionOrRotationControlledByCurves();
    // public System.Single get_humanScale()
    // Offset: 0x233C5D0
    float get_humanScale();
    // public System.Boolean get_isInitialized()
    // Offset: 0x233C610
    bool get_isInitialized();
    // public System.Single GetFloat(System.String name)
    // Offset: 0x233C650
    float GetFloat(::Il2CppString* name);
    // public System.Single GetFloat(System.Int32 id)
    // Offset: 0x233C6F0
    float GetFloat(int id);
    // public System.Void SetFloat(System.String name, System.Single value)
    // Offset: 0x233C790
    void SetFloat(::Il2CppString* name, float value);
    // public System.Void SetFloat(System.String name, System.Single value, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x233C850
    void SetFloat(::Il2CppString* name, float value, float dampTime, float deltaTime);
    // public System.Void SetFloat(System.Int32 id, System.Single value)
    // Offset: 0x233C940
    void SetFloat(int id, float value);
    // public System.Void SetFloat(System.Int32 id, System.Single value, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x233CA00
    void SetFloat(int id, float value, float dampTime, float deltaTime);
    // public System.Boolean GetBool(System.String name)
    // Offset: 0x233CAF0
    bool GetBool(::Il2CppString* name);
    // public System.Boolean GetBool(System.Int32 id)
    // Offset: 0x233CB90
    bool GetBool(int id);
    // public System.Void SetBool(System.String name, System.Boolean value)
    // Offset: 0x233CC30
    void SetBool(::Il2CppString* name, bool value);
    // public System.Void SetBool(System.Int32 id, System.Boolean value)
    // Offset: 0x233CCE0
    void SetBool(int id, bool value);
    // public System.Int32 GetInteger(System.String name)
    // Offset: 0x233CD90
    int GetInteger(::Il2CppString* name);
    // public System.Int32 GetInteger(System.Int32 id)
    // Offset: 0x233CE30
    int GetInteger(int id);
    // public System.Void SetInteger(System.String name, System.Int32 value)
    // Offset: 0x233CED0
    void SetInteger(::Il2CppString* name, int value);
    // public System.Void SetInteger(System.Int32 id, System.Int32 value)
    // Offset: 0x233CF80
    void SetInteger(int id, int value);
    // public System.Void SetTrigger(System.String name)
    // Offset: 0x233D030
    void SetTrigger(::Il2CppString* name);
    // public System.Void SetTrigger(System.Int32 id)
    // Offset: 0x233D0D0
    void SetTrigger(int id);
    // public System.Void ResetTrigger(System.String name)
    // Offset: 0x233D170
    void ResetTrigger(::Il2CppString* name);
    // public System.Void ResetTrigger(System.Int32 id)
    // Offset: 0x233D210
    void ResetTrigger(int id);
    // public System.Boolean IsParameterControlledByCurve(System.String name)
    // Offset: 0x233D2B0
    bool IsParameterControlledByCurve(::Il2CppString* name);
    // public System.Boolean IsParameterControlledByCurve(System.Int32 id)
    // Offset: 0x233D350
    bool IsParameterControlledByCurve(int id);
    // public UnityEngine.Vector3 get_deltaPosition()
    // Offset: 0x233D3F0
    UnityEngine::Vector3 get_deltaPosition();
    // public UnityEngine.Quaternion get_deltaRotation()
    // Offset: 0x233D4A0
    UnityEngine::Quaternion get_deltaRotation();
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0x233D54C
    UnityEngine::Vector3 get_velocity();
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0x233D5FC
    UnityEngine::Vector3 get_angularVelocity();
    // public UnityEngine.Vector3 get_rootPosition()
    // Offset: 0x233D6AC
    UnityEngine::Vector3 get_rootPosition();
    // public System.Void set_rootPosition(UnityEngine.Vector3 value)
    // Offset: 0x233D75C
    void set_rootPosition(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rootRotation()
    // Offset: 0x233D804
    UnityEngine::Quaternion get_rootRotation();
    // public System.Void set_rootRotation(UnityEngine.Quaternion value)
    // Offset: 0x233D8B0
    void set_rootRotation(UnityEngine::Quaternion value);
    // public System.Boolean get_applyRootMotion()
    // Offset: 0x233D958
    bool get_applyRootMotion();
    // public System.Void set_applyRootMotion(System.Boolean value)
    // Offset: 0x233D998
    void set_applyRootMotion(bool value);
    // public System.Boolean get_linearVelocityBlending()
    // Offset: 0x233D9E8
    bool get_linearVelocityBlending();
    // public System.Void set_linearVelocityBlending(System.Boolean value)
    // Offset: 0x233DA28
    void set_linearVelocityBlending(bool value);
    // public System.Boolean get_animatePhysics()
    // Offset: 0x233DA78
    bool get_animatePhysics();
    // public System.Void set_animatePhysics(System.Boolean value)
    // Offset: 0x233DB04
    void set_animatePhysics(bool value);
    // public UnityEngine.AnimatorUpdateMode get_updateMode()
    // Offset: 0x233DAC4
    UnityEngine::AnimatorUpdateMode get_updateMode();
    // public System.Void set_updateMode(UnityEngine.AnimatorUpdateMode value)
    // Offset: 0x233DB5C
    void set_updateMode(UnityEngine::AnimatorUpdateMode value);
    // public System.Boolean get_hasTransformHierarchy()
    // Offset: 0x233DBAC
    bool get_hasTransformHierarchy();
    // System.Boolean get_allowConstantClipSamplingOptimization()
    // Offset: 0x233DBEC
    bool get_allowConstantClipSamplingOptimization();
    // System.Void set_allowConstantClipSamplingOptimization(System.Boolean value)
    // Offset: 0x233DC2C
    void set_allowConstantClipSamplingOptimization(bool value);
    // public System.Single get_gravityWeight()
    // Offset: 0x233DC7C
    float get_gravityWeight();
    // public UnityEngine.Vector3 get_bodyPosition()
    // Offset: 0x233DCBC
    UnityEngine::Vector3 get_bodyPosition();
    // public System.Void set_bodyPosition(UnityEngine.Vector3 value)
    // Offset: 0x233DE14
    void set_bodyPosition(UnityEngine::Vector3 value);
    // UnityEngine.Vector3 get_bodyPositionInternal()
    // Offset: 0x233DDB4
    UnityEngine::Vector3 get_bodyPositionInternal();
    // System.Void set_bodyPositionInternal(UnityEngine.Vector3 value)
    // Offset: 0x233DE60
    void set_bodyPositionInternal(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_bodyRotation()
    // Offset: 0x233DF58
    UnityEngine::Quaternion get_bodyRotation();
    // public System.Void set_bodyRotation(UnityEngine.Quaternion value)
    // Offset: 0x233DFD8
    void set_bodyRotation(UnityEngine::Quaternion value);
    // UnityEngine.Quaternion get_bodyRotationInternal()
    // Offset: 0x233DF7C
    UnityEngine::Quaternion get_bodyRotationInternal();
    // System.Void set_bodyRotationInternal(UnityEngine.Quaternion value)
    // Offset: 0x233E02C
    void set_bodyRotationInternal(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 GetIKPosition(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E124
    UnityEngine::Vector3 GetIKPosition(UnityEngine::AvatarIKGoal goal);
    // private UnityEngine.Vector3 GetGoalPosition(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E150
    UnityEngine::Vector3 GetGoalPosition(UnityEngine::AvatarIKGoal goal);
    // public System.Void SetIKPosition(UnityEngine.AvatarIKGoal goal, UnityEngine.Vector3 goalPosition)
    // Offset: 0x233E218
    void SetIKPosition(UnityEngine::AvatarIKGoal goal, UnityEngine::Vector3 goalPosition);
    // private System.Void SetGoalPosition(UnityEngine.AvatarIKGoal goal, UnityEngine.Vector3 goalPosition)
    // Offset: 0x233E26C
    void SetGoalPosition(UnityEngine::AvatarIKGoal goal, UnityEngine::Vector3 goalPosition);
    // public UnityEngine.Quaternion GetIKRotation(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E32C
    UnityEngine::Quaternion GetIKRotation(UnityEngine::AvatarIKGoal goal);
    // private UnityEngine.Quaternion GetGoalRotation(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E358
    UnityEngine::Quaternion GetGoalRotation(UnityEngine::AvatarIKGoal goal);
    // public System.Void SetIKRotation(UnityEngine.AvatarIKGoal goal, UnityEngine.Quaternion goalRotation)
    // Offset: 0x233E41C
    void SetIKRotation(UnityEngine::AvatarIKGoal goal, UnityEngine::Quaternion goalRotation);
    // private System.Void SetGoalRotation(UnityEngine.AvatarIKGoal goal, UnityEngine.Quaternion goalRotation)
    // Offset: 0x233E478
    void SetGoalRotation(UnityEngine::AvatarIKGoal goal, UnityEngine::Quaternion goalRotation);
    // public System.Single GetIKPositionWeight(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E538
    float GetIKPositionWeight(UnityEngine::AvatarIKGoal goal);
    // private System.Single GetGoalWeightPosition(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E58C
    float GetGoalWeightPosition(UnityEngine::AvatarIKGoal goal);
    // public System.Void SetIKPositionWeight(UnityEngine.AvatarIKGoal goal, System.Single value)
    // Offset: 0x233E5DC
    void SetIKPositionWeight(UnityEngine::AvatarIKGoal goal, float value);
    // private System.Void SetGoalWeightPosition(UnityEngine.AvatarIKGoal goal, System.Single value)
    // Offset: 0x233E640
    void SetGoalWeightPosition(UnityEngine::AvatarIKGoal goal, float value);
    // public System.Single GetIKRotationWeight(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E6A0
    float GetIKRotationWeight(UnityEngine::AvatarIKGoal goal);
    // private System.Single GetGoalWeightRotation(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x233E6F4
    float GetGoalWeightRotation(UnityEngine::AvatarIKGoal goal);
    // public System.Void SetIKRotationWeight(UnityEngine.AvatarIKGoal goal, System.Single value)
    // Offset: 0x233E744
    void SetIKRotationWeight(UnityEngine::AvatarIKGoal goal, float value);
    // private System.Void SetGoalWeightRotation(UnityEngine.AvatarIKGoal goal, System.Single value)
    // Offset: 0x233E7A8
    void SetGoalWeightRotation(UnityEngine::AvatarIKGoal goal, float value);
    // public UnityEngine.Vector3 GetIKHintPosition(UnityEngine.AvatarIKHint hint)
    // Offset: 0x233E808
    UnityEngine::Vector3 GetIKHintPosition(UnityEngine::AvatarIKHint hint);
    // private UnityEngine.Vector3 GetHintPosition(UnityEngine.AvatarIKHint hint)
    // Offset: 0x233E834
    UnityEngine::Vector3 GetHintPosition(UnityEngine::AvatarIKHint hint);
    // public System.Void SetIKHintPosition(UnityEngine.AvatarIKHint hint, UnityEngine.Vector3 hintPosition)
    // Offset: 0x233E8FC
    void SetIKHintPosition(UnityEngine::AvatarIKHint hint, UnityEngine::Vector3 hintPosition);
    // private System.Void SetHintPosition(UnityEngine.AvatarIKHint hint, UnityEngine.Vector3 hintPosition)
    // Offset: 0x233E950
    void SetHintPosition(UnityEngine::AvatarIKHint hint, UnityEngine::Vector3 hintPosition);
    // public System.Single GetIKHintPositionWeight(UnityEngine.AvatarIKHint hint)
    // Offset: 0x233EA10
    float GetIKHintPositionWeight(UnityEngine::AvatarIKHint hint);
    // private System.Single GetHintWeightPosition(UnityEngine.AvatarIKHint hint)
    // Offset: 0x233EA64
    float GetHintWeightPosition(UnityEngine::AvatarIKHint hint);
    // public System.Void SetIKHintPositionWeight(UnityEngine.AvatarIKHint hint, System.Single value)
    // Offset: 0x233EAB4
    void SetIKHintPositionWeight(UnityEngine::AvatarIKHint hint, float value);
    // private System.Void SetHintWeightPosition(UnityEngine.AvatarIKHint hint, System.Single value)
    // Offset: 0x233EB18
    void SetHintWeightPosition(UnityEngine::AvatarIKHint hint, float value);
    // public System.Void SetLookAtPosition(UnityEngine.Vector3 lookAtPosition)
    // Offset: 0x233EB78
    void SetLookAtPosition(UnityEngine::Vector3 lookAtPosition);
    // private System.Void SetLookAtPositionInternal(UnityEngine.Vector3 lookAtPosition)
    // Offset: 0x233EBC4
    void SetLookAtPositionInternal(UnityEngine::Vector3 lookAtPosition);
    // public System.Void SetLookAtWeight(System.Single weight)
    // Offset: 0x233EC6C
    void SetLookAtWeight(float weight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight)
    // Offset: 0x233ED50
    void SetLookAtWeight(float weight, float bodyWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight)
    // Offset: 0x233EDB8
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight, System.Single eyesWeight)
    // Offset: 0x233EE2C
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight, System.Single eyesWeight, System.Single clampWeight)
    // Offset: 0x233EEA4
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight);
    // private System.Void SetLookAtWeightInternal(System.Single weight, System.Single bodyWeight, System.Single headWeight, System.Single eyesWeight, System.Single clampWeight)
    // Offset: 0x233ECD0
    void SetLookAtWeightInternal(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight);
    // public System.Void SetBoneLocalRotation(UnityEngine.HumanBodyBones humanBoneId, UnityEngine.Quaternion rotation)
    // Offset: 0x233EF28
    void SetBoneLocalRotation(UnityEngine::HumanBodyBones humanBoneId, UnityEngine::Quaternion rotation);
    // private System.Void SetBoneLocalRotationInternal(System.Int32 humanBoneId, UnityEngine.Quaternion rotation)
    // Offset: 0x233EFF4
    void SetBoneLocalRotationInternal(int humanBoneId, UnityEngine::Quaternion rotation);
    // private UnityEngine.ScriptableObject GetBehaviour(System.Type type)
    // Offset: 0x233F0B4
    UnityEngine::ScriptableObject* GetBehaviour(System::Type* type);
    // public T GetBehaviour()
    // Offset: 0xFFFFFFFF
    template<class T>
    T GetBehaviour() {
      static_assert(std::is_convertible_v<T, UnityEngine::StateMachineBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animator::GetBehaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBehaviour", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method);
    }
    // static private T[] ConvertStateMachineBehaviour(UnityEngine.ScriptableObject[] rawObjects)
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* ConvertStateMachineBehaviour(::Array<UnityEngine::ScriptableObject*>* rawObjects) {
      static_assert(std::is_convertible_v<T, UnityEngine::StateMachineBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animator::ConvertStateMachineBehaviour");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Animator", "ConvertStateMachineBehaviour", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawObjects)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, rawObjects);
    }
    // public T[] GetBehaviours()
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetBehaviours() {
      static_assert(std::is_convertible_v<T, UnityEngine::StateMachineBehaviour*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animator::GetBehaviours");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBehaviours", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method);
    }
    // UnityEngine.ScriptableObject[] InternalGetBehaviours(System.Type type)
    // Offset: 0x233F104
    ::Array<UnityEngine::ScriptableObject*>* InternalGetBehaviours(System::Type* type);
    // public UnityEngine.StateMachineBehaviour[] GetBehaviours(System.Int32 fullPathHash, System.Int32 layerIndex)
    // Offset: 0x233F154
    ::Array<UnityEngine::StateMachineBehaviour*>* GetBehaviours(int fullPathHash, int layerIndex);
    // UnityEngine.ScriptableObject[] InternalGetBehavioursByKey(System.Int32 fullPathHash, System.Int32 layerIndex, System.Type type)
    // Offset: 0x233F228
    ::Array<UnityEngine::ScriptableObject*>* InternalGetBehavioursByKey(int fullPathHash, int layerIndex, System::Type* type);
    // public System.Boolean get_stabilizeFeet()
    // Offset: 0x233F290
    bool get_stabilizeFeet();
    // public System.Void set_stabilizeFeet(System.Boolean value)
    // Offset: 0x233F2D0
    void set_stabilizeFeet(bool value);
    // public System.Int32 get_layerCount()
    // Offset: 0x233F320
    int get_layerCount();
    // public System.String GetLayerName(System.Int32 layerIndex)
    // Offset: 0x233F360
    ::Il2CppString* GetLayerName(int layerIndex);
    // public System.Int32 GetLayerIndex(System.String layerName)
    // Offset: 0x233F3B0
    int GetLayerIndex(::Il2CppString* layerName);
    // public System.Single GetLayerWeight(System.Int32 layerIndex)
    // Offset: 0x233F400
    float GetLayerWeight(int layerIndex);
    // public System.Void SetLayerWeight(System.Int32 layerIndex, System.Single weight)
    // Offset: 0x233F450
    void SetLayerWeight(int layerIndex, float weight);
    // private System.Void GetAnimatorStateInfo(System.Int32 layerIndex, UnityEngine.StateInfoIndex stateInfoIndex, out UnityEngine.AnimatorStateInfo info)
    // Offset: 0x233F4B0
    void GetAnimatorStateInfo(int layerIndex, UnityEngine::StateInfoIndex stateInfoIndex, UnityEngine::AnimatorStateInfo& info);
    // public UnityEngine.AnimatorStateInfo GetCurrentAnimatorStateInfo(System.Int32 layerIndex)
    // Offset: 0x233F518
    UnityEngine::AnimatorStateInfo GetCurrentAnimatorStateInfo(int layerIndex);
    // public UnityEngine.AnimatorStateInfo GetNextAnimatorStateInfo(System.Int32 layerIndex)
    // Offset: 0x233F5A4
    UnityEngine::AnimatorStateInfo GetNextAnimatorStateInfo(int layerIndex);
    // private System.Void GetAnimatorTransitionInfo(System.Int32 layerIndex, out UnityEngine.AnimatorTransitionInfo info)
    // Offset: 0x233F630
    void GetAnimatorTransitionInfo(int layerIndex, UnityEngine::AnimatorTransitionInfo& info);
    // public UnityEngine.AnimatorTransitionInfo GetAnimatorTransitionInfo(System.Int32 layerIndex)
    // Offset: 0x233F688
    UnityEngine::AnimatorTransitionInfo GetAnimatorTransitionInfo(int layerIndex);
    // System.Int32 GetAnimatorClipInfoCount(System.Int32 layerIndex, System.Boolean current)
    // Offset: 0x233F6FC
    int GetAnimatorClipInfoCount(int layerIndex, bool current);
    // public System.Int32 GetCurrentAnimatorClipInfoCount(System.Int32 layerIndex)
    // Offset: 0x233F754
    int GetCurrentAnimatorClipInfoCount(int layerIndex);
    // public System.Int32 GetNextAnimatorClipInfoCount(System.Int32 layerIndex)
    // Offset: 0x233F7A8
    int GetNextAnimatorClipInfoCount(int layerIndex);
    // public UnityEngine.AnimatorClipInfo[] GetCurrentAnimatorClipInfo(System.Int32 layerIndex)
    // Offset: 0x233F7FC
    ::Array<UnityEngine::AnimatorClipInfo>* GetCurrentAnimatorClipInfo(int layerIndex);
    // public UnityEngine.AnimatorClipInfo[] GetNextAnimatorClipInfo(System.Int32 layerIndex)
    // Offset: 0x233F84C
    ::Array<UnityEngine::AnimatorClipInfo>* GetNextAnimatorClipInfo(int layerIndex);
    // public System.Void GetCurrentAnimatorClipInfo(System.Int32 layerIndex, System.Collections.Generic.List`1<UnityEngine.AnimatorClipInfo> clips)
    // Offset: 0x233F89C
    void GetCurrentAnimatorClipInfo(int layerIndex, System::Collections::Generic::List_1<UnityEngine::AnimatorClipInfo>* clips);
    // private System.Void GetAnimatorClipInfoInternal(System.Int32 layerIndex, System.Boolean isCurrent, System.Object clips)
    // Offset: 0x233F95C
    void GetAnimatorClipInfoInternal(int layerIndex, bool isCurrent, ::Il2CppObject* clips);
    // public System.Void GetNextAnimatorClipInfo(System.Int32 layerIndex, System.Collections.Generic.List`1<UnityEngine.AnimatorClipInfo> clips)
    // Offset: 0x233F9C4
    void GetNextAnimatorClipInfo(int layerIndex, System::Collections::Generic::List_1<UnityEngine::AnimatorClipInfo>* clips);
    // public System.Boolean IsInTransition(System.Int32 layerIndex)
    // Offset: 0x233FA84
    bool IsInTransition(int layerIndex);
    // public UnityEngine.AnimatorControllerParameter[] get_parameters()
    // Offset: 0x233FAD4
    ::Array<UnityEngine::AnimatorControllerParameter*>* get_parameters();
    // public System.Int32 get_parameterCount()
    // Offset: 0x233FB14
    int get_parameterCount();
    // public UnityEngine.AnimatorControllerParameter GetParameter(System.Int32 index)
    // Offset: 0x233FB54
    UnityEngine::AnimatorControllerParameter* GetParameter(int index);
    // public System.Single get_feetPivotActive()
    // Offset: 0x233FCB8
    float get_feetPivotActive();
    // public System.Void set_feetPivotActive(System.Single value)
    // Offset: 0x233FCF8
    void set_feetPivotActive(float value);
    // public System.Single get_pivotWeight()
    // Offset: 0x233FD48
    float get_pivotWeight();
    // public UnityEngine.Vector3 get_pivotPosition()
    // Offset: 0x233FD88
    UnityEngine::Vector3 get_pivotPosition();
    // private System.Void MatchTarget(UnityEngine.Vector3 matchPosition, UnityEngine.Quaternion matchRotation, System.Int32 targetBodyPart, UnityEngine.MatchTargetWeightMask weightMask, System.Single startNormalizedTime, System.Single targetNormalizedTime, System.Boolean completeMatch)
    // Offset: 0x233FE38
    void MatchTarget(UnityEngine::Vector3 matchPosition, UnityEngine::Quaternion matchRotation, int targetBodyPart, UnityEngine::MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime, bool completeMatch);
    // public System.Void MatchTarget(UnityEngine.Vector3 matchPosition, UnityEngine.Quaternion matchRotation, UnityEngine.AvatarTarget targetBodyPart, UnityEngine.MatchTargetWeightMask weightMask, System.Single startNormalizedTime)
    // Offset: 0x233FF70
    void MatchTarget(UnityEngine::Vector3 matchPosition, UnityEngine::Quaternion matchRotation, UnityEngine::AvatarTarget targetBodyPart, UnityEngine::MatchTargetWeightMask weightMask, float startNormalizedTime);
    // public System.Void MatchTarget(UnityEngine.Vector3 matchPosition, UnityEngine.Quaternion matchRotation, UnityEngine.AvatarTarget targetBodyPart, UnityEngine.MatchTargetWeightMask weightMask, System.Single startNormalizedTime, System.Single targetNormalizedTime)
    // Offset: 0x233FFA8
    void MatchTarget(UnityEngine::Vector3 matchPosition, UnityEngine::Quaternion matchRotation, UnityEngine::AvatarTarget targetBodyPart, UnityEngine::MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime);
    // public System.Void MatchTarget(UnityEngine.Vector3 matchPosition, UnityEngine.Quaternion matchRotation, UnityEngine.AvatarTarget targetBodyPart, UnityEngine.MatchTargetWeightMask weightMask, System.Single startNormalizedTime, System.Single targetNormalizedTime, System.Boolean completeMatch)
    // Offset: 0x233FFC8
    void MatchTarget(UnityEngine::Vector3 matchPosition, UnityEngine::Quaternion matchRotation, UnityEngine::AvatarTarget targetBodyPart, UnityEngine::MatchTargetWeightMask weightMask, float startNormalizedTime, float targetNormalizedTime, bool completeMatch);
    // public System.Void InterruptMatchTarget()
    // Offset: 0x233FFE8
    void InterruptMatchTarget();
    // public System.Void InterruptMatchTarget(System.Boolean completeMatch)
    // Offset: 0x234002C
    void InterruptMatchTarget(bool completeMatch);
    // public System.Boolean get_isMatchingTarget()
    // Offset: 0x234007C
    bool get_isMatchingTarget();
    // public System.Single get_speed()
    // Offset: 0x23400BC
    float get_speed();
    // public System.Void set_speed(System.Single value)
    // Offset: 0x23400FC
    void set_speed(float value);
    // public System.Void ForceStateNormalizedTime(System.Single normalizedTime)
    // Offset: 0x234014C
    void ForceStateNormalizedTime(float normalizedTime);
    // public System.Void CrossFadeInFixedTime(System.String stateName, System.Single fixedTransitionDuration)
    // Offset: 0x234020C
    void CrossFadeInFixedTime(::Il2CppString* stateName, float fixedTransitionDuration);
    // public System.Void CrossFadeInFixedTime(System.String stateName, System.Single fixedTransitionDuration, System.Int32 layer)
    // Offset: 0x2340364
    void CrossFadeInFixedTime(::Il2CppString* stateName, float fixedTransitionDuration, int layer);
    // public System.Void CrossFadeInFixedTime(System.String stateName, System.Single fixedTransitionDuration, System.Int32 layer, System.Single fixedTimeOffset)
    // Offset: 0x2340400
    void CrossFadeInFixedTime(::Il2CppString* stateName, float fixedTransitionDuration, int layer, float fixedTimeOffset);
    // public System.Void CrossFadeInFixedTime(System.String stateName, System.Single fixedTransitionDuration, System.Int32 layer, System.Single fixedTimeOffset, System.Single normalizedTransitionTime)
    // Offset: 0x23404A0
    void CrossFadeInFixedTime(::Il2CppString* stateName, float fixedTransitionDuration, int layer, float fixedTimeOffset, float normalizedTransitionTime);
    // public System.Void CrossFadeInFixedTime(System.Int32 stateHashName, System.Single fixedTransitionDuration, System.Int32 layer, System.Single fixedTimeOffset)
    // Offset: 0x234054C
    void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer, float fixedTimeOffset);
    // public System.Void CrossFadeInFixedTime(System.Int32 stateHashName, System.Single fixedTransitionDuration, System.Int32 layer)
    // Offset: 0x23405C0
    void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer);
    // public System.Void CrossFadeInFixedTime(System.Int32 stateHashName, System.Single fixedTransitionDuration)
    // Offset: 0x2340630
    void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration);
    // public System.Void CrossFadeInFixedTime(System.Int32 stateHashName, System.Single fixedTransitionDuration, System.Int32 layer, System.Single fixedTimeOffset, System.Single normalizedTransitionTime)
    // Offset: 0x23402E4
    void CrossFadeInFixedTime(int stateHashName, float fixedTransitionDuration, int layer, float fixedTimeOffset, float normalizedTransitionTime);
    // public System.Void WriteDefaultValues()
    // Offset: 0x234069C
    void WriteDefaultValues();
    // public System.Void CrossFade(System.String stateName, System.Single normalizedTransitionDuration, System.Int32 layer, System.Single normalizedTimeOffset)
    // Offset: 0x23406DC
    void CrossFade(::Il2CppString* stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset);
    // public System.Void CrossFade(System.String stateName, System.Single normalizedTransitionDuration, System.Int32 layer)
    // Offset: 0x2340790
    void CrossFade(::Il2CppString* stateName, float normalizedTransitionDuration, int layer);
    // public System.Void CrossFade(System.String stateName, System.Single normalizedTransitionDuration)
    // Offset: 0x23407A0
    void CrossFade(::Il2CppString* stateName, float normalizedTransitionDuration);
    // public System.Void CrossFade(System.String stateName, System.Single normalizedTransitionDuration, System.Int32 layer, System.Single normalizedTimeOffset, System.Single normalizedTransitionTime)
    // Offset: 0x23406E4
    void CrossFade(::Il2CppString* stateName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime);
    // public System.Void CrossFade(System.Int32 stateHashName, System.Single normalizedTransitionDuration, System.Int32 layer, System.Single normalizedTimeOffset, System.Single normalizedTransitionTime)
    // Offset: 0x23407B4
    void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset, float normalizedTransitionTime);
    // public System.Void CrossFade(System.Int32 stateHashName, System.Single normalizedTransitionDuration, System.Int32 layer, System.Single normalizedTimeOffset)
    // Offset: 0x2340834
    void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer, float normalizedTimeOffset);
    // public System.Void CrossFade(System.Int32 stateHashName, System.Single normalizedTransitionDuration, System.Int32 layer)
    // Offset: 0x23408A8
    void CrossFade(int stateHashName, float normalizedTransitionDuration, int layer);
    // public System.Void CrossFade(System.Int32 stateHashName, System.Single normalizedTransitionDuration)
    // Offset: 0x234091C
    void CrossFade(int stateHashName, float normalizedTransitionDuration);
    // public System.Void PlayInFixedTime(System.String stateName, System.Int32 layer)
    // Offset: 0x234098C
    void PlayInFixedTime(::Il2CppString* stateName, int layer);
    // public System.Void PlayInFixedTime(System.String stateName)
    // Offset: 0x2340A2C
    void PlayInFixedTime(::Il2CppString* stateName);
    // public System.Void PlayInFixedTime(System.String stateName, System.Int32 layer, System.Single fixedTime)
    // Offset: 0x2340998
    void PlayInFixedTime(::Il2CppString* stateName, int layer, float fixedTime);
    // public System.Void PlayInFixedTime(System.Int32 stateNameHash, System.Int32 layer, System.Single fixedTime)
    // Offset: 0x2340A3C
    void PlayInFixedTime(int stateNameHash, int layer, float fixedTime);
    // public System.Void PlayInFixedTime(System.Int32 stateNameHash, System.Int32 layer)
    // Offset: 0x2340AA4
    void PlayInFixedTime(int stateNameHash, int layer);
    // public System.Void PlayInFixedTime(System.Int32 stateNameHash)
    // Offset: 0x2340B04
    void PlayInFixedTime(int stateNameHash);
    // public System.Void Play(System.String stateName, System.Int32 layer)
    // Offset: 0x2340B60
    void Play(::Il2CppString* stateName, int layer);
    // public System.Void Play(System.String stateName)
    // Offset: 0x2340C00
    void Play(::Il2CppString* stateName);
    // public System.Void Play(System.String stateName, System.Int32 layer, System.Single normalizedTime)
    // Offset: 0x2340B6C
    void Play(::Il2CppString* stateName, int layer, float normalizedTime);
    // public System.Void Play(System.Int32 stateNameHash, System.Int32 layer, System.Single normalizedTime)
    // Offset: 0x23401A4
    void Play(int stateNameHash, int layer, float normalizedTime);
    // public System.Void Play(System.Int32 stateNameHash, System.Int32 layer)
    // Offset: 0x2340C10
    void Play(int stateNameHash, int layer);
    // public System.Void Play(System.Int32 stateNameHash)
    // Offset: 0x2340C70
    void Play(int stateNameHash);
    // public System.Void SetTarget(UnityEngine.AvatarTarget targetIndex, System.Single targetNormalizedTime)
    // Offset: 0x2340CCC
    void SetTarget(UnityEngine::AvatarTarget targetIndex, float targetNormalizedTime);
    // public UnityEngine.Vector3 get_targetPosition()
    // Offset: 0x2340D2C
    UnityEngine::Vector3 get_targetPosition();
    // public UnityEngine.Quaternion get_targetRotation()
    // Offset: 0x2340DDC
    UnityEngine::Quaternion get_targetRotation();
    // public System.Boolean IsControlled(UnityEngine.Transform transform)
    // Offset: 0x2340E88
    bool IsControlled(UnityEngine::Transform* transform);
    // System.Boolean IsBoneTransform(UnityEngine.Transform transform)
    // Offset: 0x2340E90
    bool IsBoneTransform(UnityEngine::Transform* transform);
    // UnityEngine.Transform get_avatarRoot()
    // Offset: 0x2340EE0
    UnityEngine::Transform* get_avatarRoot();
    // public UnityEngine.Transform GetBoneTransform(UnityEngine.HumanBodyBones humanBoneId)
    // Offset: 0x2340F20
    UnityEngine::Transform* GetBoneTransform(UnityEngine::HumanBodyBones humanBoneId);
    // UnityEngine.Transform GetBoneTransformInternal(System.Int32 humanBoneId)
    // Offset: 0x234103C
    UnityEngine::Transform* GetBoneTransformInternal(int humanBoneId);
    // public UnityEngine.AnimatorCullingMode get_cullingMode()
    // Offset: 0x234108C
    UnityEngine::AnimatorCullingMode get_cullingMode();
    // public System.Void set_cullingMode(UnityEngine.AnimatorCullingMode value)
    // Offset: 0x23410CC
    void set_cullingMode(UnityEngine::AnimatorCullingMode value);
    // public System.Void StartPlayback()
    // Offset: 0x234111C
    void StartPlayback();
    // public System.Void StopPlayback()
    // Offset: 0x234115C
    void StopPlayback();
    // public System.Single get_playbackTime()
    // Offset: 0x234119C
    float get_playbackTime();
    // public System.Void set_playbackTime(System.Single value)
    // Offset: 0x23411DC
    void set_playbackTime(float value);
    // public System.Void StartRecording(System.Int32 frameCount)
    // Offset: 0x234122C
    void StartRecording(int frameCount);
    // public System.Void StopRecording()
    // Offset: 0x234127C
    void StopRecording();
    // public System.Single get_recorderStartTime()
    // Offset: 0x23412BC
    float get_recorderStartTime();
    // public System.Void set_recorderStartTime(System.Single value)
    // Offset: 0x234133C
    void set_recorderStartTime(float value);
    // private System.Single GetRecorderStartTime()
    // Offset: 0x23412FC
    float GetRecorderStartTime();
    // public System.Single get_recorderStopTime()
    // Offset: 0x2341340
    float get_recorderStopTime();
    // public System.Void set_recorderStopTime(System.Single value)
    // Offset: 0x23413C0
    void set_recorderStopTime(float value);
    // private System.Single GetRecorderStopTime()
    // Offset: 0x2341380
    float GetRecorderStopTime();
    // public UnityEngine.AnimatorRecorderMode get_recorderMode()
    // Offset: 0x23413C4
    UnityEngine::AnimatorRecorderMode get_recorderMode();
    // public UnityEngine.RuntimeAnimatorController get_runtimeAnimatorController()
    // Offset: 0x2341404
    UnityEngine::RuntimeAnimatorController* get_runtimeAnimatorController();
    // public System.Void set_runtimeAnimatorController(UnityEngine.RuntimeAnimatorController value)
    // Offset: 0x2341444
    void set_runtimeAnimatorController(UnityEngine::RuntimeAnimatorController* value);
    // public System.Boolean get_hasBoundPlayables()
    // Offset: 0x2341494
    bool get_hasBoundPlayables();
    // System.Void ClearInternalControllerPlayable()
    // Offset: 0x23414D4
    void ClearInternalControllerPlayable();
    // public System.Boolean HasState(System.Int32 layerIndex, System.Int32 stateID)
    // Offset: 0x2341514
    bool HasState(int layerIndex, int stateID);
    // static public System.Int32 StringToHash(System.String name)
    // Offset: 0x23402A4
    static int StringToHash(::Il2CppString* name);
    // public UnityEngine.Avatar get_avatar()
    // Offset: 0x234156C
    UnityEngine::Avatar* get_avatar();
    // public System.Void set_avatar(UnityEngine.Avatar value)
    // Offset: 0x23415AC
    void set_avatar(UnityEngine::Avatar* value);
    // System.String GetStats()
    // Offset: 0x23415FC
    ::Il2CppString* GetStats();
    // public UnityEngine.Playables.PlayableGraph get_playableGraph()
    // Offset: 0x234163C
    UnityEngine::Playables::PlayableGraph get_playableGraph();
    // private System.Void GetCurrentGraph(ref UnityEngine.Playables.PlayableGraph graph)
    // Offset: 0x2341694
    void GetCurrentGraph(UnityEngine::Playables::PlayableGraph& graph);
    // private System.Void CheckIfInIKPass()
    // Offset: 0x233DCE0
    void CheckIfInIKPass();
    // private System.Boolean IsInIKPass()
    // Offset: 0x2341724
    bool IsInIKPass();
    // private System.Void SetFloatString(System.String name, System.Single value)
    // Offset: 0x233C7F0
    void SetFloatString(::Il2CppString* name, float value);
    // private System.Void SetFloatID(System.Int32 id, System.Single value)
    // Offset: 0x233C9A0
    void SetFloatID(int id, float value);
    // private System.Single GetFloatString(System.String name)
    // Offset: 0x233C6A0
    float GetFloatString(::Il2CppString* name);
    // private System.Single GetFloatID(System.Int32 id)
    // Offset: 0x233C740
    float GetFloatID(int id);
    // private System.Void SetBoolString(System.String name, System.Boolean value)
    // Offset: 0x233CC88
    void SetBoolString(::Il2CppString* name, bool value);
    // private System.Void SetBoolID(System.Int32 id, System.Boolean value)
    // Offset: 0x233CD38
    void SetBoolID(int id, bool value);
    // private System.Boolean GetBoolString(System.String name)
    // Offset: 0x233CB40
    bool GetBoolString(::Il2CppString* name);
    // private System.Boolean GetBoolID(System.Int32 id)
    // Offset: 0x233CBE0
    bool GetBoolID(int id);
    // private System.Void SetIntegerString(System.String name, System.Int32 value)
    // Offset: 0x233CF28
    void SetIntegerString(::Il2CppString* name, int value);
    // private System.Void SetIntegerID(System.Int32 id, System.Int32 value)
    // Offset: 0x233CFD8
    void SetIntegerID(int id, int value);
    // private System.Int32 GetIntegerString(System.String name)
    // Offset: 0x233CDE0
    int GetIntegerString(::Il2CppString* name);
    // private System.Int32 GetIntegerID(System.Int32 id)
    // Offset: 0x233CE80
    int GetIntegerID(int id);
    // private System.Void SetTriggerString(System.String name)
    // Offset: 0x233D080
    void SetTriggerString(::Il2CppString* name);
    // private System.Void SetTriggerID(System.Int32 id)
    // Offset: 0x233D120
    void SetTriggerID(int id);
    // private System.Void ResetTriggerString(System.String name)
    // Offset: 0x233D1C0
    void ResetTriggerString(::Il2CppString* name);
    // private System.Void ResetTriggerID(System.Int32 id)
    // Offset: 0x233D260
    void ResetTriggerID(int id);
    // private System.Boolean IsParameterControlledByCurveString(System.String name)
    // Offset: 0x233D300
    bool IsParameterControlledByCurveString(::Il2CppString* name);
    // private System.Boolean IsParameterControlledByCurveID(System.Int32 id)
    // Offset: 0x233D3A0
    bool IsParameterControlledByCurveID(int id);
    // private System.Void SetFloatStringDamp(System.String name, System.Single value, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x233C8C8
    void SetFloatStringDamp(::Il2CppString* name, float value, float dampTime, float deltaTime);
    // private System.Void SetFloatIDDamp(System.Int32 id, System.Single value, System.Single dampTime, System.Single deltaTime)
    // Offset: 0x233CA78
    void SetFloatIDDamp(int id, float value, float dampTime, float deltaTime);
    // public System.Boolean get_layersAffectMassCenter()
    // Offset: 0x2341764
    bool get_layersAffectMassCenter();
    // public System.Void set_layersAffectMassCenter(System.Boolean value)
    // Offset: 0x23417A4
    void set_layersAffectMassCenter(bool value);
    // public System.Single get_leftFeetBottomHeight()
    // Offset: 0x23417F4
    float get_leftFeetBottomHeight();
    // public System.Single get_rightFeetBottomHeight()
    // Offset: 0x2341834
    float get_rightFeetBottomHeight();
    // System.Boolean get_supportsOnAnimatorMove()
    // Offset: 0x2341874
    bool get_supportsOnAnimatorMove();
    // System.Void OnUpdateModeChanged()
    // Offset: 0x23418B4
    void OnUpdateModeChanged();
    // System.Void OnCullingModeChanged()
    // Offset: 0x23418F4
    void OnCullingModeChanged();
    // System.Void WriteDefaultPose()
    // Offset: 0x2341934
    void WriteDefaultPose();
    // public System.Void Update(System.Single deltaTime)
    // Offset: 0x2341974
    void Update(float deltaTime);
    // public System.Void Rebind()
    // Offset: 0x23419C4
    void Rebind();
    // private System.Void Rebind(System.Boolean writeDefaultValues)
    // Offset: 0x2341A08
    void Rebind(bool writeDefaultValues);
    // public System.Void ApplyBuiltinRootMotion()
    // Offset: 0x2341A58
    void ApplyBuiltinRootMotion();
    // System.Void EvaluateController()
    // Offset: 0x2341A98
    void EvaluateController();
    // private System.Void EvaluateController(System.Single deltaTime)
    // Offset: 0x2341ADC
    void EvaluateController(float deltaTime);
    // System.String GetCurrentStateName(System.Int32 layerIndex)
    // Offset: 0x2341B2C
    ::Il2CppString* GetCurrentStateName(int layerIndex);
    // System.String GetNextStateName(System.Int32 layerIndex)
    // Offset: 0x2341BD8
    ::Il2CppString* GetNextStateName(int layerIndex);
    // private System.String GetAnimatorStateName(System.Int32 layerIndex, System.Boolean current)
    // Offset: 0x2341B80
    ::Il2CppString* GetAnimatorStateName(int layerIndex, bool current);
    // System.String ResolveHash(System.Int32 hash)
    // Offset: 0x2341C2C
    ::Il2CppString* ResolveHash(int hash);
    // public System.Boolean get_logWarnings()
    // Offset: 0x23416E4
    bool get_logWarnings();
    // public System.Void set_logWarnings(System.Boolean value)
    // Offset: 0x2341C7C
    void set_logWarnings(bool value);
    // public System.Boolean get_fireEvents()
    // Offset: 0x2341CCC
    bool get_fireEvents();
    // public System.Void set_fireEvents(System.Boolean value)
    // Offset: 0x2341D0C
    void set_fireEvents(bool value);
    // public System.Boolean get_keepAnimatorControllerStateOnDisable()
    // Offset: 0x2341D5C
    bool get_keepAnimatorControllerStateOnDisable();
    // public System.Void set_keepAnimatorControllerStateOnDisable(System.Boolean value)
    // Offset: 0x2341D9C
    void set_keepAnimatorControllerStateOnDisable(bool value);
    // public UnityEngine.Vector3 GetVector(System.String name)
    // Offset: 0x2341DEC
    UnityEngine::Vector3 GetVector(::Il2CppString* name);
    // public UnityEngine.Vector3 GetVector(System.Int32 id)
    // Offset: 0x2341E4C
    UnityEngine::Vector3 GetVector(int id);
    // public System.Void SetVector(System.String name, UnityEngine.Vector3 value)
    // Offset: 0x2341EAC
    void SetVector(::Il2CppString* name, UnityEngine::Vector3 value);
    // public System.Void SetVector(System.Int32 id, UnityEngine.Vector3 value)
    // Offset: 0x2341EB0
    void SetVector(int id, UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion GetQuaternion(System.String name)
    // Offset: 0x2341EB4
    UnityEngine::Quaternion GetQuaternion(::Il2CppString* name);
    // public UnityEngine.Quaternion GetQuaternion(System.Int32 id)
    // Offset: 0x2341F14
    UnityEngine::Quaternion GetQuaternion(int id);
    // public System.Void SetQuaternion(System.String name, UnityEngine.Quaternion value)
    // Offset: 0x2341F74
    void SetQuaternion(::Il2CppString* name, UnityEngine::Quaternion value);
    // public System.Void SetQuaternion(System.Int32 id, UnityEngine.Quaternion value)
    // Offset: 0x2341F78
    void SetQuaternion(int id, UnityEngine::Quaternion value);
    // private System.Void get_deltaPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x233D450
    void get_deltaPosition_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_deltaRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x233D4FC
    void get_deltaRotation_Injected(UnityEngine::Quaternion& ret);
    // private System.Void get_velocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x233D5AC
    void get_velocity_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_angularVelocity_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x233D65C
    void get_angularVelocity_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_rootPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x233D70C
    void get_rootPosition_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_rootPosition_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x233D7B4
    void set_rootPosition_Injected(UnityEngine::Vector3& value);
    // private System.Void get_rootRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x233D860
    void get_rootRotation_Injected(UnityEngine::Quaternion& ret);
    // private System.Void set_rootRotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x233D908
    void set_rootRotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void get_bodyPositionInternal_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x233DEB8
    void get_bodyPositionInternal_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_bodyPositionInternal_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x233DF08
    void set_bodyPositionInternal_Injected(UnityEngine::Vector3& value);
    // private System.Void get_bodyRotationInternal_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x233E084
    void get_bodyRotationInternal_Injected(UnityEngine::Quaternion& ret);
    // private System.Void set_bodyRotationInternal_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x233E0D4
    void set_bodyRotationInternal_Injected(UnityEngine::Quaternion& value);
    // private System.Void GetGoalPosition_Injected(UnityEngine.AvatarIKGoal goal, out UnityEngine.Vector3 ret)
    // Offset: 0x233E1C0
    void GetGoalPosition_Injected(UnityEngine::AvatarIKGoal goal, UnityEngine::Vector3& ret);
    // private System.Void SetGoalPosition_Injected(UnityEngine.AvatarIKGoal goal, ref UnityEngine.Vector3 goalPosition)
    // Offset: 0x233E2D4
    void SetGoalPosition_Injected(UnityEngine::AvatarIKGoal goal, UnityEngine::Vector3& goalPosition);
    // private System.Void GetGoalRotation_Injected(UnityEngine.AvatarIKGoal goal, out UnityEngine.Quaternion ret)
    // Offset: 0x233E3C4
    void GetGoalRotation_Injected(UnityEngine::AvatarIKGoal goal, UnityEngine::Quaternion& ret);
    // private System.Void SetGoalRotation_Injected(UnityEngine.AvatarIKGoal goal, ref UnityEngine.Quaternion goalRotation)
    // Offset: 0x233E4E0
    void SetGoalRotation_Injected(UnityEngine::AvatarIKGoal goal, UnityEngine::Quaternion& goalRotation);
    // private System.Void GetHintPosition_Injected(UnityEngine.AvatarIKHint hint, out UnityEngine.Vector3 ret)
    // Offset: 0x233E8A4
    void GetHintPosition_Injected(UnityEngine::AvatarIKHint hint, UnityEngine::Vector3& ret);
    // private System.Void SetHintPosition_Injected(UnityEngine.AvatarIKHint hint, ref UnityEngine.Vector3 hintPosition)
    // Offset: 0x233E9B8
    void SetHintPosition_Injected(UnityEngine::AvatarIKHint hint, UnityEngine::Vector3& hintPosition);
    // private System.Void SetLookAtPositionInternal_Injected(ref UnityEngine.Vector3 lookAtPosition)
    // Offset: 0x233EC1C
    void SetLookAtPositionInternal_Injected(UnityEngine::Vector3& lookAtPosition);
    // private System.Void SetBoneLocalRotationInternal_Injected(System.Int32 humanBoneId, ref UnityEngine.Quaternion rotation)
    // Offset: 0x233F05C
    void SetBoneLocalRotationInternal_Injected(int humanBoneId, UnityEngine::Quaternion& rotation);
    // private System.Void get_pivotPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x233FDE8
    void get_pivotPosition_Injected(UnityEngine::Vector3& ret);
    // private System.Void MatchTarget_Injected(ref UnityEngine.Vector3 matchPosition, ref UnityEngine.Quaternion matchRotation, System.Int32 targetBodyPart, ref UnityEngine.MatchTargetWeightMask weightMask, System.Single startNormalizedTime, System.Single targetNormalizedTime, System.Boolean completeMatch)
    // Offset: 0x233FED8
    void MatchTarget_Injected(UnityEngine::Vector3& matchPosition, UnityEngine::Quaternion& matchRotation, int targetBodyPart, UnityEngine::MatchTargetWeightMask& weightMask, float startNormalizedTime, float targetNormalizedTime, bool completeMatch);
    // private System.Void get_targetPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x2340D8C
    void get_targetPosition_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_targetRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x2340E38
    void get_targetRotation_Injected(UnityEngine::Quaternion& ret);
    // public System.Void .ctor()
    // Offset: 0x2341F7C
    // Implemented from: UnityEngine.Behaviour
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Animator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Animator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Animator*, creationType>()));
    }
  }; // UnityEngine.Animator
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Animator*, "UnityEngine", "Animator");
