// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.LOD
  // [TokenAttribute] Offset: FFFFFFFF
  // [UsedByNativeCodeAttribute] Offset: EB3B60
  struct LOD/*, public System::ValueType*/ {
    public:
    // public System.Single screenRelativeTransitionHeight
    // Size: 0x4
    // Offset: 0x0
    float screenRelativeTransitionHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fadeTransitionWidth
    // Size: 0x4
    // Offset: 0x4
    float fadeTransitionWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Renderer[] renderers
    // Size: 0x8
    // Offset: 0x8
    ::Array<UnityEngine::Renderer*>* renderers;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Renderer*>*) == 0x8);
    // Creating value type constructor for type: LOD
    constexpr LOD(float screenRelativeTransitionHeight_ = {}, float fadeTransitionWidth_ = {}, ::Array<UnityEngine::Renderer*>* renderers_ = {}) noexcept : screenRelativeTransitionHeight{screenRelativeTransitionHeight_}, fadeTransitionWidth{fadeTransitionWidth_}, renderers{renderers_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single screenRelativeTransitionHeight
    float& dyn_screenRelativeTransitionHeight();
    // Get instance field reference: public System.Single fadeTransitionWidth
    float& dyn_fadeTransitionWidth();
    // Get instance field reference: public UnityEngine.Renderer[] renderers
    ::Array<UnityEngine::Renderer*>*& dyn_renderers();
    // public System.Void .ctor(System.Single screenRelativeTransitionHeight, UnityEngine.Renderer[] renderers)
    // Offset: 0x1D957E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    LOD(float screenRelativeTransitionHeight, ::Array<UnityEngine::Renderer*>* renderers) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LOD::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenRelativeTransitionHeight), ::il2cpp_utils::ExtractType(renderers)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, screenRelativeTransitionHeight, renderers);
    }
  }; // UnityEngine.LOD
  #pragma pack(pop)
  static check_size<sizeof(LOD), 8 + sizeof(::Array<UnityEngine::Renderer*>*)> __UnityEngine_LODSizeCheck;
  static_assert(sizeof(LOD) == 0x10);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::LOD, "UnityEngine", "LOD");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::LOD::LOD
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
