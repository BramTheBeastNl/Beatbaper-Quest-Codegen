// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Skipping declaration: ScaleMode because it is already included!
  // Skipping declaration: ScreenMatchMode because it is already included!
  // Skipping declaration: Unit because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.CanvasScaler
  // [RequireComponent] Offset: DC51A8
  // [ExecuteAlways] Offset: DC51A8
  // [AddComponentMenu] Offset: DC51A8
  // [DisallowMultipleComponent] Offset: DC51A8
  class CanvasScaler : public UnityEngine::EventSystems::UIBehaviour {
    public:
    // Nested type: UnityEngine::UI::CanvasScaler::ScaleMode
    struct ScaleMode;
    // Nested type: UnityEngine::UI::CanvasScaler::ScreenMatchMode
    struct ScreenMatchMode;
    // Nested type: UnityEngine::UI::CanvasScaler::Unit
    struct Unit;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.CanvasScaler/ScaleMode
    struct ScaleMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ScaleMode
      constexpr ScaleMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.CanvasScaler/ScaleMode ConstantPixelSize
      static constexpr const int ConstantPixelSize = 0;
      // Get static field: static public UnityEngine.UI.CanvasScaler/ScaleMode ConstantPixelSize
      static UnityEngine::UI::CanvasScaler::ScaleMode _get_ConstantPixelSize();
      // Set static field: static public UnityEngine.UI.CanvasScaler/ScaleMode ConstantPixelSize
      static void _set_ConstantPixelSize(UnityEngine::UI::CanvasScaler::ScaleMode value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/ScaleMode ScaleWithScreenSize
      static constexpr const int ScaleWithScreenSize = 1;
      // Get static field: static public UnityEngine.UI.CanvasScaler/ScaleMode ScaleWithScreenSize
      static UnityEngine::UI::CanvasScaler::ScaleMode _get_ScaleWithScreenSize();
      // Set static field: static public UnityEngine.UI.CanvasScaler/ScaleMode ScaleWithScreenSize
      static void _set_ScaleWithScreenSize(UnityEngine::UI::CanvasScaler::ScaleMode value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/ScaleMode ConstantPhysicalSize
      static constexpr const int ConstantPhysicalSize = 2;
      // Get static field: static public UnityEngine.UI.CanvasScaler/ScaleMode ConstantPhysicalSize
      static UnityEngine::UI::CanvasScaler::ScaleMode _get_ConstantPhysicalSize();
      // Set static field: static public UnityEngine.UI.CanvasScaler/ScaleMode ConstantPhysicalSize
      static void _set_ConstantPhysicalSize(UnityEngine::UI::CanvasScaler::ScaleMode value);
    }; // UnityEngine.UI.CanvasScaler/ScaleMode
    #pragma pack(pop)
    static check_size<sizeof(CanvasScaler::ScaleMode), 0 + sizeof(int)> __UnityEngine_UI_CanvasScaler_ScaleModeSizeCheck;
    static_assert(sizeof(CanvasScaler::ScaleMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.CanvasScaler/ScreenMatchMode
    struct ScreenMatchMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ScreenMatchMode
      constexpr ScreenMatchMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode MatchWidthOrHeight
      static constexpr const int MatchWidthOrHeight = 0;
      // Get static field: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode MatchWidthOrHeight
      static UnityEngine::UI::CanvasScaler::ScreenMatchMode _get_MatchWidthOrHeight();
      // Set static field: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode MatchWidthOrHeight
      static void _set_MatchWidthOrHeight(UnityEngine::UI::CanvasScaler::ScreenMatchMode value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode Expand
      static constexpr const int Expand = 1;
      // Get static field: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode Expand
      static UnityEngine::UI::CanvasScaler::ScreenMatchMode _get_Expand();
      // Set static field: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode Expand
      static void _set_Expand(UnityEngine::UI::CanvasScaler::ScreenMatchMode value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode Shrink
      static constexpr const int Shrink = 2;
      // Get static field: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode Shrink
      static UnityEngine::UI::CanvasScaler::ScreenMatchMode _get_Shrink();
      // Set static field: static public UnityEngine.UI.CanvasScaler/ScreenMatchMode Shrink
      static void _set_Shrink(UnityEngine::UI::CanvasScaler::ScreenMatchMode value);
    }; // UnityEngine.UI.CanvasScaler/ScreenMatchMode
    #pragma pack(pop)
    static check_size<sizeof(CanvasScaler::ScreenMatchMode), 0 + sizeof(int)> __UnityEngine_UI_CanvasScaler_ScreenMatchModeSizeCheck;
    static_assert(sizeof(CanvasScaler::ScreenMatchMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.CanvasScaler/Unit
    struct Unit/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Unit
      constexpr Unit(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.CanvasScaler/Unit Centimeters
      static constexpr const int Centimeters = 0;
      // Get static field: static public UnityEngine.UI.CanvasScaler/Unit Centimeters
      static UnityEngine::UI::CanvasScaler::Unit _get_Centimeters();
      // Set static field: static public UnityEngine.UI.CanvasScaler/Unit Centimeters
      static void _set_Centimeters(UnityEngine::UI::CanvasScaler::Unit value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/Unit Millimeters
      static constexpr const int Millimeters = 1;
      // Get static field: static public UnityEngine.UI.CanvasScaler/Unit Millimeters
      static UnityEngine::UI::CanvasScaler::Unit _get_Millimeters();
      // Set static field: static public UnityEngine.UI.CanvasScaler/Unit Millimeters
      static void _set_Millimeters(UnityEngine::UI::CanvasScaler::Unit value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/Unit Inches
      static constexpr const int Inches = 2;
      // Get static field: static public UnityEngine.UI.CanvasScaler/Unit Inches
      static UnityEngine::UI::CanvasScaler::Unit _get_Inches();
      // Set static field: static public UnityEngine.UI.CanvasScaler/Unit Inches
      static void _set_Inches(UnityEngine::UI::CanvasScaler::Unit value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/Unit Points
      static constexpr const int Points = 3;
      // Get static field: static public UnityEngine.UI.CanvasScaler/Unit Points
      static UnityEngine::UI::CanvasScaler::Unit _get_Points();
      // Set static field: static public UnityEngine.UI.CanvasScaler/Unit Points
      static void _set_Points(UnityEngine::UI::CanvasScaler::Unit value);
      // static field const value: static public UnityEngine.UI.CanvasScaler/Unit Picas
      static constexpr const int Picas = 4;
      // Get static field: static public UnityEngine.UI.CanvasScaler/Unit Picas
      static UnityEngine::UI::CanvasScaler::Unit _get_Picas();
      // Set static field: static public UnityEngine.UI.CanvasScaler/Unit Picas
      static void _set_Picas(UnityEngine::UI::CanvasScaler::Unit value);
    }; // UnityEngine.UI.CanvasScaler/Unit
    #pragma pack(pop)
    static check_size<sizeof(CanvasScaler::Unit), 0 + sizeof(int)> __UnityEngine_UI_CanvasScaler_UnitSizeCheck;
    static_assert(sizeof(CanvasScaler::Unit) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6D40
    // private UnityEngine.UI.CanvasScaler/ScaleMode m_UiScaleMode
    // Size: 0x4
    // Offset: 0x18
    UnityEngine::UI::CanvasScaler::ScaleMode m_UiScaleMode;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::CanvasScaler::ScaleMode) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6D8C
    // protected System.Single m_ReferencePixelsPerUnit
    // Size: 0x4
    // Offset: 0x1C
    float m_ReferencePixelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6DD8
    // protected System.Single m_ScaleFactor
    // Size: 0x4
    // Offset: 0x20
    float m_ScaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6E24
    // protected UnityEngine.Vector2 m_ReferenceResolution
    // Size: 0x8
    // Offset: 0x24
    UnityEngine::Vector2 m_ReferenceResolution;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [TooltipAttribute] Offset: 0xDC6E70
    // protected UnityEngine.UI.CanvasScaler/ScreenMatchMode m_ScreenMatchMode
    // Size: 0x4
    // Offset: 0x2C
    UnityEngine::UI::CanvasScaler::ScreenMatchMode m_ScreenMatchMode;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::CanvasScaler::ScreenMatchMode) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6EBC
    // [RangeAttribute] Offset: 0xDC6EBC
    // protected System.Single m_MatchWidthOrHeight
    // Size: 0x4
    // Offset: 0x30
    float m_MatchWidthOrHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6F20
    // protected UnityEngine.UI.CanvasScaler/Unit m_PhysicalUnit
    // Size: 0x4
    // Offset: 0x34
    UnityEngine::UI::CanvasScaler::Unit m_PhysicalUnit;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::CanvasScaler::Unit) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6F6C
    // protected System.Single m_FallbackScreenDPI
    // Size: 0x4
    // Offset: 0x38
    float m_FallbackScreenDPI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDC6FB8
    // protected System.Single m_DefaultSpriteDPI
    // Size: 0x4
    // Offset: 0x3C
    float m_DefaultSpriteDPI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDC7004
    // protected System.Single m_DynamicPixelsPerUnit
    // Size: 0x4
    // Offset: 0x40
    float m_DynamicPixelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_DynamicPixelsPerUnit and: m_Canvas
    char __padding9[0x4] = {};
    // private UnityEngine.Canvas m_Canvas
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Canvas* m_Canvas;
    // Field size check
    static_assert(sizeof(UnityEngine::Canvas*) == 0x8);
    // private System.Single m_PrevScaleFactor
    // Size: 0x4
    // Offset: 0x50
    float m_PrevScaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_PrevReferencePixelsPerUnit
    // Size: 0x4
    // Offset: 0x54
    float m_PrevReferencePixelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: CanvasScaler
    CanvasScaler(UnityEngine::UI::CanvasScaler::ScaleMode m_UiScaleMode_ = {}, float m_ReferencePixelsPerUnit_ = {}, float m_ScaleFactor_ = {}, UnityEngine::Vector2 m_ReferenceResolution_ = {}, UnityEngine::UI::CanvasScaler::ScreenMatchMode m_ScreenMatchMode_ = {}, float m_MatchWidthOrHeight_ = {}, UnityEngine::UI::CanvasScaler::Unit m_PhysicalUnit_ = {}, float m_FallbackScreenDPI_ = {}, float m_DefaultSpriteDPI_ = {}, float m_DynamicPixelsPerUnit_ = {}, UnityEngine::Canvas* m_Canvas_ = {}, float m_PrevScaleFactor_ = {}, float m_PrevReferencePixelsPerUnit_ = {}) noexcept : m_UiScaleMode{m_UiScaleMode_}, m_ReferencePixelsPerUnit{m_ReferencePixelsPerUnit_}, m_ScaleFactor{m_ScaleFactor_}, m_ReferenceResolution{m_ReferenceResolution_}, m_ScreenMatchMode{m_ScreenMatchMode_}, m_MatchWidthOrHeight{m_MatchWidthOrHeight_}, m_PhysicalUnit{m_PhysicalUnit_}, m_FallbackScreenDPI{m_FallbackScreenDPI_}, m_DefaultSpriteDPI{m_DefaultSpriteDPI_}, m_DynamicPixelsPerUnit{m_DynamicPixelsPerUnit_}, m_Canvas{m_Canvas_}, m_PrevScaleFactor{m_PrevScaleFactor_}, m_PrevReferencePixelsPerUnit{m_PrevReferencePixelsPerUnit_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kLogBase
    static constexpr const float kLogBase = 2;
    // Get static field: static private System.Single kLogBase
    static float _get_kLogBase();
    // Set static field: static private System.Single kLogBase
    static void _set_kLogBase(float value);
    // public UnityEngine.UI.CanvasScaler/ScaleMode get_uiScaleMode()
    // Offset: 0x1438E10
    UnityEngine::UI::CanvasScaler::ScaleMode get_uiScaleMode();
    // public System.Void set_uiScaleMode(UnityEngine.UI.CanvasScaler/ScaleMode value)
    // Offset: 0x1438E18
    void set_uiScaleMode(UnityEngine::UI::CanvasScaler::ScaleMode value);
    // public System.Single get_referencePixelsPerUnit()
    // Offset: 0x1438E20
    float get_referencePixelsPerUnit();
    // public System.Void set_referencePixelsPerUnit(System.Single value)
    // Offset: 0x1438E28
    void set_referencePixelsPerUnit(float value);
    // public System.Single get_scaleFactor()
    // Offset: 0x1438E30
    float get_scaleFactor();
    // public System.Void set_scaleFactor(System.Single value)
    // Offset: 0x1438E38
    void set_scaleFactor(float value);
    // public UnityEngine.Vector2 get_referenceResolution()
    // Offset: 0x1438EBC
    UnityEngine::Vector2 get_referenceResolution();
    // public System.Void set_referenceResolution(UnityEngine.Vector2 value)
    // Offset: 0x1438EC4
    void set_referenceResolution(UnityEngine::Vector2 value);
    // public UnityEngine.UI.CanvasScaler/ScreenMatchMode get_screenMatchMode()
    // Offset: 0x1438FC4
    UnityEngine::UI::CanvasScaler::ScreenMatchMode get_screenMatchMode();
    // public System.Void set_screenMatchMode(UnityEngine.UI.CanvasScaler/ScreenMatchMode value)
    // Offset: 0x1438FCC
    void set_screenMatchMode(UnityEngine::UI::CanvasScaler::ScreenMatchMode value);
    // public System.Single get_matchWidthOrHeight()
    // Offset: 0x1438FD4
    float get_matchWidthOrHeight();
    // public System.Void set_matchWidthOrHeight(System.Single value)
    // Offset: 0x1438FDC
    void set_matchWidthOrHeight(float value);
    // public UnityEngine.UI.CanvasScaler/Unit get_physicalUnit()
    // Offset: 0x1438FE4
    UnityEngine::UI::CanvasScaler::Unit get_physicalUnit();
    // public System.Void set_physicalUnit(UnityEngine.UI.CanvasScaler/Unit value)
    // Offset: 0x1438FEC
    void set_physicalUnit(UnityEngine::UI::CanvasScaler::Unit value);
    // public System.Single get_fallbackScreenDPI()
    // Offset: 0x1438FF4
    float get_fallbackScreenDPI();
    // public System.Void set_fallbackScreenDPI(System.Single value)
    // Offset: 0x1438FFC
    void set_fallbackScreenDPI(float value);
    // public System.Single get_defaultSpriteDPI()
    // Offset: 0x1439004
    float get_defaultSpriteDPI();
    // public System.Void set_defaultSpriteDPI(System.Single value)
    // Offset: 0x143900C
    void set_defaultSpriteDPI(float value);
    // public System.Single get_dynamicPixelsPerUnit()
    // Offset: 0x143908C
    float get_dynamicPixelsPerUnit();
    // public System.Void set_dynamicPixelsPerUnit(System.Single value)
    // Offset: 0x1439094
    void set_dynamicPixelsPerUnit(float value);
    // protected System.Void Update()
    // Offset: 0x1439250
    void Update();
    // protected System.Void Handle()
    // Offset: 0x1439260
    void Handle();
    // protected System.Void HandleWorldCanvas()
    // Offset: 0x143936C
    void HandleWorldCanvas();
    // protected System.Void HandleConstantPixelSize()
    // Offset: 0x1439398
    void HandleConstantPixelSize();
    // protected System.Void HandleScaleWithScreenSize()
    // Offset: 0x14393C4
    void HandleScaleWithScreenSize();
    // protected System.Void HandleConstantPhysicalSize()
    // Offset: 0x1439634
    void HandleConstantPhysicalSize();
    // protected System.Void SetScaleFactor(System.Single scaleFactor)
    // Offset: 0x14391B8
    void SetScaleFactor(float scaleFactor);
    // protected System.Void SetReferencePixelsPerUnit(System.Single referencePixelsPerUnit)
    // Offset: 0x1439204
    void SetReferencePixelsPerUnit(float referencePixelsPerUnit);
    // protected System.Void .ctor()
    // Offset: 0x143909C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasScaler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::CanvasScaler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasScaler*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x1439120
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1439188
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable()
    void OnDisable();
  }; // UnityEngine.UI.CanvasScaler
  #pragma pack(pop)
  static check_size<sizeof(CanvasScaler), 84 + sizeof(float)> __UnityEngine_UI_CanvasScalerSizeCheck;
  static_assert(sizeof(CanvasScaler) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::CanvasScaler*, "UnityEngine.UI", "CanvasScaler");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::CanvasScaler::ScaleMode, "UnityEngine.UI", "CanvasScaler/ScaleMode");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::CanvasScaler::ScreenMatchMode, "UnityEngine.UI", "CanvasScaler/ScreenMatchMode");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::CanvasScaler::Unit, "UnityEngine.UI", "CanvasScaler/Unit");
// Writing includes for template specializations
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_uiScaleMode
// Il2CppName: get_uiScaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::CanvasScaler::ScaleMode (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_uiScaleMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_uiScaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_uiScaleMode
// Il2CppName: set_uiScaleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(UnityEngine::UI::CanvasScaler::ScaleMode)>(&UnityEngine::UI::CanvasScaler::set_uiScaleMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_uiScaleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasScaler::ScaleMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_referencePixelsPerUnit
// Il2CppName: get_referencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_referencePixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_referencePixelsPerUnit
// Il2CppName: set_referencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::set_referencePixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_scaleFactor
// Il2CppName: get_scaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_scaleFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_scaleFactor
// Il2CppName: set_scaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::set_scaleFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_referenceResolution
// Il2CppName: get_referenceResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_referenceResolution)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_referenceResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_referenceResolution
// Il2CppName: set_referenceResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(UnityEngine::Vector2)>(&UnityEngine::UI::CanvasScaler::set_referenceResolution)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_referenceResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_screenMatchMode
// Il2CppName: get_screenMatchMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::CanvasScaler::ScreenMatchMode (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_screenMatchMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_screenMatchMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_screenMatchMode
// Il2CppName: set_screenMatchMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(UnityEngine::UI::CanvasScaler::ScreenMatchMode)>(&UnityEngine::UI::CanvasScaler::set_screenMatchMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_screenMatchMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasScaler::ScreenMatchMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_matchWidthOrHeight
// Il2CppName: get_matchWidthOrHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_matchWidthOrHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_matchWidthOrHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_matchWidthOrHeight
// Il2CppName: set_matchWidthOrHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::set_matchWidthOrHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_matchWidthOrHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_physicalUnit
// Il2CppName: get_physicalUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::CanvasScaler::Unit (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_physicalUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_physicalUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_physicalUnit
// Il2CppName: set_physicalUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(UnityEngine::UI::CanvasScaler::Unit)>(&UnityEngine::UI::CanvasScaler::set_physicalUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_physicalUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasScaler::Unit>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_fallbackScreenDPI
// Il2CppName: get_fallbackScreenDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_fallbackScreenDPI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_fallbackScreenDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_fallbackScreenDPI
// Il2CppName: set_fallbackScreenDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::set_fallbackScreenDPI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_fallbackScreenDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_defaultSpriteDPI
// Il2CppName: get_defaultSpriteDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_defaultSpriteDPI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_defaultSpriteDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_defaultSpriteDPI
// Il2CppName: set_defaultSpriteDPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::set_defaultSpriteDPI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_defaultSpriteDPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::get_dynamicPixelsPerUnit
// Il2CppName: get_dynamicPixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::get_dynamicPixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "get_dynamicPixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::set_dynamicPixelsPerUnit
// Il2CppName: set_dynamicPixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::set_dynamicPixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "set_dynamicPixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::Handle
// Il2CppName: Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::Handle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::HandleWorldCanvas
// Il2CppName: HandleWorldCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::HandleWorldCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "HandleWorldCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::HandleConstantPixelSize
// Il2CppName: HandleConstantPixelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::HandleConstantPixelSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "HandleConstantPixelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::HandleScaleWithScreenSize
// Il2CppName: HandleScaleWithScreenSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::HandleScaleWithScreenSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "HandleScaleWithScreenSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::HandleConstantPhysicalSize
// Il2CppName: HandleConstantPhysicalSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::HandleConstantPhysicalSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "HandleConstantPhysicalSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::SetScaleFactor
// Il2CppName: SetScaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::SetScaleFactor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "SetScaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::SetReferencePixelsPerUnit
// Il2CppName: SetReferencePixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)(float)>(&UnityEngine::UI::CanvasScaler::SetReferencePixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "SetReferencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::CanvasScaler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::CanvasScaler::*)()>(&UnityEngine::UI::CanvasScaler::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::CanvasScaler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
