// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: FontData
  class FontData;
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextGenerator
  class TextGenerator;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Font
  class Font;
  // Forward declaring type: TextAnchor
  struct TextAnchor;
  // Forward declaring type: HorizontalWrapMode
  struct HorizontalWrapMode;
  // Forward declaring type: VerticalWrapMode
  struct VerticalWrapMode;
  // Forward declaring type: FontStyle
  struct FontStyle;
  // Forward declaring type: TextGenerationSettings
  struct TextGenerationSettings;
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Text
  // [] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: CD889C
  class Text : public UnityEngine::UI::MaskableGraphic/*, public UnityEngine::UI::ILayoutElement*/ {
    public:
    // private UnityEngine.UI.FontData m_FontData
    // Size: 0x8
    // Offset: 0xC0
    UnityEngine::UI::FontData* m_FontData;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::FontData*) == 0x8);
    // [TextAreaAttribute] Offset: 0xCDA934
    // protected System.String m_Text
    // Size: 0x8
    // Offset: 0xC8
    ::Il2CppString* m_Text;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.TextGenerator m_TextCache
    // Size: 0x8
    // Offset: 0xD0
    UnityEngine::TextGenerator* m_TextCache;
    // Field size check
    static_assert(sizeof(UnityEngine::TextGenerator*) == 0x8);
    // private UnityEngine.TextGenerator m_TextCacheForLayout
    // Size: 0x8
    // Offset: 0xD8
    UnityEngine::TextGenerator* m_TextCacheForLayout;
    // Field size check
    static_assert(sizeof(UnityEngine::TextGenerator*) == 0x8);
    // protected System.Boolean m_DisableFontTextureRebuiltCallback
    // Size: 0x1
    // Offset: 0xE0
    bool m_DisableFontTextureRebuiltCallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_DisableFontTextureRebuiltCallback and: m_TempVerts
    char __padding4[0x7] = {};
    // private readonly UnityEngine.UIVertex[] m_TempVerts
    // Size: 0x8
    // Offset: 0xE8
    ::Array<UnityEngine::UIVertex>* m_TempVerts;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::UIVertex>*) == 0x8);
    // Creating value type constructor for type: Text
    Text(UnityEngine::UI::FontData* m_FontData_ = {}, ::Il2CppString* m_Text_ = {}, UnityEngine::TextGenerator* m_TextCache_ = {}, UnityEngine::TextGenerator* m_TextCacheForLayout_ = {}, bool m_DisableFontTextureRebuiltCallback_ = {}, ::Array<UnityEngine::UIVertex>* m_TempVerts_ = {}) noexcept : m_FontData{m_FontData_}, m_Text{m_Text_}, m_TextCache{m_TextCache_}, m_TextCacheForLayout{m_TextCacheForLayout_}, m_DisableFontTextureRebuiltCallback{m_DisableFontTextureRebuiltCallback_}, m_TempVerts{m_TempVerts_} {}
    // Creating interface conversion operator: operator UnityEngine::UI::ILayoutElement
    operator UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ILayoutElement*>(this);
    }
    // Get static field: static protected UnityEngine.Material s_DefaultText
    static UnityEngine::Material* _get_s_DefaultText();
    // Set static field: static protected UnityEngine.Material s_DefaultText
    static void _set_s_DefaultText(UnityEngine::Material* value);
    // public UnityEngine.TextGenerator get_cachedTextGenerator()
    // Offset: 0x2134180
    UnityEngine::TextGenerator* get_cachedTextGenerator();
    // public UnityEngine.TextGenerator get_cachedTextGeneratorForLayout()
    // Offset: 0x2134218
    UnityEngine::TextGenerator* get_cachedTextGeneratorForLayout();
    // public System.Void FontTextureChanged()
    // Offset: 0x2134488
    void FontTextureChanged();
    // public UnityEngine.Font get_font()
    // Offset: 0x213446C
    UnityEngine::Font* get_font();
    // public System.Void set_font(UnityEngine.Font value)
    // Offset: 0x21345A8
    void set_font(UnityEngine::Font* value);
    // public System.String get_text()
    // Offset: 0x213469C
    ::Il2CppString* get_text_NEW();
    // public System.Void set_text(System.String value)
    // Offset: 0x21346A4
    void set_text_NEW(::Il2CppString* value);
    // public System.Boolean get_supportRichText()
    // Offset: 0x2134780
    bool get_supportRichText();
    // public System.Void set_supportRichText(System.Boolean value)
    // Offset: 0x213479C
    void set_supportRichText(bool value);
    // public System.Boolean get_resizeTextForBestFit()
    // Offset: 0x213480C
    bool get_resizeTextForBestFit();
    // public System.Void set_resizeTextForBestFit(System.Boolean value)
    // Offset: 0x2134828
    void set_resizeTextForBestFit(bool value);
    // public System.Int32 get_resizeTextMinSize()
    // Offset: 0x2134898
    int get_resizeTextMinSize();
    // public System.Void set_resizeTextMinSize(System.Int32 value)
    // Offset: 0x21348B4
    void set_resizeTextMinSize(int value);
    // public System.Int32 get_resizeTextMaxSize()
    // Offset: 0x2134918
    int get_resizeTextMaxSize();
    // public System.Void set_resizeTextMaxSize(System.Int32 value)
    // Offset: 0x2134934
    void set_resizeTextMaxSize(int value);
    // public UnityEngine.TextAnchor get_alignment()
    // Offset: 0x2134998
    UnityEngine::TextAnchor get_alignment();
    // public System.Void set_alignment(UnityEngine.TextAnchor value)
    // Offset: 0x21349B4
    void set_alignment(UnityEngine::TextAnchor value);
    // public System.Boolean get_alignByGeometry()
    // Offset: 0x2134A18
    bool get_alignByGeometry();
    // public System.Void set_alignByGeometry(System.Boolean value)
    // Offset: 0x2134A34
    void set_alignByGeometry(bool value);
    // public System.Int32 get_fontSize()
    // Offset: 0x2134A78
    int get_fontSize();
    // public System.Void set_fontSize(System.Int32 value)
    // Offset: 0x2134A94
    void set_fontSize(int value);
    // public UnityEngine.HorizontalWrapMode get_horizontalOverflow()
    // Offset: 0x2134AF8
    UnityEngine::HorizontalWrapMode get_horizontalOverflow();
    // public System.Void set_horizontalOverflow(UnityEngine.HorizontalWrapMode value)
    // Offset: 0x2134B14
    void set_horizontalOverflow(UnityEngine::HorizontalWrapMode value);
    // public UnityEngine.VerticalWrapMode get_verticalOverflow()
    // Offset: 0x2134B78
    UnityEngine::VerticalWrapMode get_verticalOverflow();
    // public System.Void set_verticalOverflow(UnityEngine.VerticalWrapMode value)
    // Offset: 0x2134B94
    void set_verticalOverflow(UnityEngine::VerticalWrapMode value);
    // public System.Single get_lineSpacing()
    // Offset: 0x2134BF8
    float get_lineSpacing();
    // public System.Void set_lineSpacing(System.Single value)
    // Offset: 0x2134C14
    void set_lineSpacing(float value);
    // public UnityEngine.FontStyle get_fontStyle()
    // Offset: 0x2134C78
    UnityEngine::FontStyle get_fontStyle();
    // public System.Void set_fontStyle(UnityEngine.FontStyle value)
    // Offset: 0x2134C94
    void set_fontStyle(UnityEngine::FontStyle value);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0x2134CF8
    float get_pixelsPerUnit();
    // System.Void AssignDefaultFont()
    // Offset: 0x2134FFC
    void AssignDefaultFont();
    // public UnityEngine.TextGenerationSettings GetGenerationSettings(UnityEngine.Vector2 extents)
    // Offset: 0x2135060
    UnityEngine::TextGenerationSettings GetGenerationSettings(UnityEngine::Vector2 extents);
    // static public UnityEngine.Vector2 GetTextAnchorPivot(UnityEngine.TextAnchor anchor)
    // Offset: 0x2135254
    static UnityEngine::Vector2 GetTextAnchorPivot(UnityEngine::TextAnchor anchor);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x2135C50
    void CalculateLayoutInputHorizontal_NEW();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x2135C54
    void CalculateLayoutInputVertical_NEW();
    // public System.Single get_minWidth()
    // Offset: 0x2135C58
    float get_minWidth_NEW();
    // public System.Single get_preferredWidth()
    // Offset: 0x2135C60
    float get_preferredWidth_NEW();
    // public System.Single get_flexibleWidth()
    // Offset: 0x2135D58
    float get_flexibleWidth_NEW();
    // public System.Single get_minHeight()
    // Offset: 0x2135D60
    float get_minHeight_NEW();
    // public System.Single get_preferredHeight()
    // Offset: 0x2135D68
    float get_preferredHeight_NEW();
    // public System.Single get_flexibleHeight()
    // Offset: 0x2135E4C
    float get_flexibleHeight_NEW();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x2135E54
    int get_layoutPriority_NEW();
    // protected System.Void .ctor()
    // Offset: 0x21340F4
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Text* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::Text::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Text*, creationType>()));
    }
    // public override UnityEngine.Texture get_mainTexture()
    // Offset: 0x2134284
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Texture Graphic::get_mainTexture_NEW()
    UnityEngine::Texture* get_mainTexture();
    // protected override System.Void OnEnable()
    // Offset: 0x2134E64
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x2134EF0
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateGeometry()
    // Offset: 0x2134F64
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::UpdateGeometry_NEW()
    void UpdateGeometry();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x2135388
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnPopulateMesh_NEW(UnityEngine.UI.VertexHelper toFill)
    void OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill);
    // static private System.Void .cctor()
    // Offset: 0x2135E5C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.UI.Text
  #pragma pack(pop)
  static check_size<sizeof(Text), 232 + sizeof(::Array<UnityEngine::UIVertex>*)> __UnityEngine_UI_TextSizeCheck;
  static_assert(sizeof(Text) == 0xF0);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Text*, "UnityEngine.UI", "Text");
