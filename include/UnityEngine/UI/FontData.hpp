// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.FontStyle
#include "UnityEngine/FontStyle.hpp"
// Including type: UnityEngine.TextAnchor
#include "UnityEngine/TextAnchor.hpp"
// Including type: UnityEngine.HorizontalWrapMode
#include "UnityEngine/HorizontalWrapMode.hpp"
// Including type: UnityEngine.VerticalWrapMode
#include "UnityEngine/VerticalWrapMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Font
  class Font;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.FontData
  class FontData : public ::Il2CppObject/*, public UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xDC6428
    // private UnityEngine.Font m_Font
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Font* m_Font;
    // Field size check
    static_assert(sizeof(UnityEngine::Font*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xDC6474
    // private System.Int32 m_FontSize
    // Size: 0x4
    // Offset: 0x18
    int m_FontSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xDC64C0
    // private UnityEngine.FontStyle m_FontStyle
    // Size: 0x4
    // Offset: 0x1C
    UnityEngine::FontStyle m_FontStyle;
    // Field size check
    static_assert(sizeof(UnityEngine::FontStyle) == 0x4);
    // private System.Boolean m_BestFit
    // Size: 0x1
    // Offset: 0x20
    bool m_BestFit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_BestFit and: m_MinSize
    char __padding3[0x3] = {};
    // private System.Int32 m_MinSize
    // Size: 0x4
    // Offset: 0x24
    int m_MinSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MaxSize
    // Size: 0x4
    // Offset: 0x28
    int m_MaxSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xDC653C
    // private UnityEngine.TextAnchor m_Alignment
    // Size: 0x4
    // Offset: 0x2C
    UnityEngine::TextAnchor m_Alignment;
    // Field size check
    static_assert(sizeof(UnityEngine::TextAnchor) == 0x4);
    // private System.Boolean m_AlignByGeometry
    // Size: 0x1
    // Offset: 0x30
    bool m_AlignByGeometry;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [FormerlySerializedAsAttribute] Offset: 0xDC6598
    // private System.Boolean m_RichText
    // Size: 0x1
    // Offset: 0x31
    bool m_RichText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RichText and: m_HorizontalOverflow
    char __padding8[0x2] = {};
    // private UnityEngine.HorizontalWrapMode m_HorizontalOverflow
    // Size: 0x4
    // Offset: 0x34
    UnityEngine::HorizontalWrapMode m_HorizontalOverflow;
    // Field size check
    static_assert(sizeof(UnityEngine::HorizontalWrapMode) == 0x4);
    // private UnityEngine.VerticalWrapMode m_VerticalOverflow
    // Size: 0x4
    // Offset: 0x38
    UnityEngine::VerticalWrapMode m_VerticalOverflow;
    // Field size check
    static_assert(sizeof(UnityEngine::VerticalWrapMode) == 0x4);
    // private System.Single m_LineSpacing
    // Size: 0x4
    // Offset: 0x3C
    float m_LineSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FontData
    FontData(UnityEngine::Font* m_Font_ = {}, int m_FontSize_ = {}, UnityEngine::FontStyle m_FontStyle_ = {}, bool m_BestFit_ = {}, int m_MinSize_ = {}, int m_MaxSize_ = {}, UnityEngine::TextAnchor m_Alignment_ = {}, bool m_AlignByGeometry_ = {}, bool m_RichText_ = {}, UnityEngine::HorizontalWrapMode m_HorizontalOverflow_ = {}, UnityEngine::VerticalWrapMode m_VerticalOverflow_ = {}, float m_LineSpacing_ = {}) noexcept : m_Font{m_Font_}, m_FontSize{m_FontSize_}, m_FontStyle{m_FontStyle_}, m_BestFit{m_BestFit_}, m_MinSize{m_MinSize_}, m_MaxSize{m_MaxSize_}, m_Alignment{m_Alignment_}, m_AlignByGeometry{m_AlignByGeometry_}, m_RichText{m_RichText_}, m_HorizontalOverflow{m_HorizontalOverflow_}, m_VerticalOverflow{m_VerticalOverflow_}, m_LineSpacing{m_LineSpacing_} {}
    // Creating interface conversion operator: operator UnityEngine::ISerializationCallbackReceiver
    operator UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // static public UnityEngine.UI.FontData get_defaultFontData()
    // Offset: 0x1912CFC
    static UnityEngine::UI::FontData* get_defaultFontData();
    // public UnityEngine.Font get_font()
    // Offset: 0x1912D9C
    UnityEngine::Font* get_font();
    // public System.Void set_font(UnityEngine.Font value)
    // Offset: 0x1912DA4
    void set_font(UnityEngine::Font* value);
    // public System.Int32 get_fontSize()
    // Offset: 0x1912DAC
    int get_fontSize();
    // public System.Void set_fontSize(System.Int32 value)
    // Offset: 0x1912DB4
    void set_fontSize(int value);
    // public UnityEngine.FontStyle get_fontStyle()
    // Offset: 0x1912DBC
    UnityEngine::FontStyle get_fontStyle();
    // public System.Void set_fontStyle(UnityEngine.FontStyle value)
    // Offset: 0x1912DC4
    void set_fontStyle(UnityEngine::FontStyle value);
    // public System.Boolean get_bestFit()
    // Offset: 0x1912DCC
    bool get_bestFit();
    // public System.Void set_bestFit(System.Boolean value)
    // Offset: 0x1912DD4
    void set_bestFit(bool value);
    // public System.Int32 get_minSize()
    // Offset: 0x1912DE0
    int get_minSize();
    // public System.Void set_minSize(System.Int32 value)
    // Offset: 0x1912DE8
    void set_minSize(int value);
    // public System.Int32 get_maxSize()
    // Offset: 0x1912DF0
    int get_maxSize();
    // public System.Void set_maxSize(System.Int32 value)
    // Offset: 0x1912DF8
    void set_maxSize(int value);
    // public UnityEngine.TextAnchor get_alignment()
    // Offset: 0x1912E00
    UnityEngine::TextAnchor get_alignment();
    // public System.Void set_alignment(UnityEngine.TextAnchor value)
    // Offset: 0x1912E08
    void set_alignment(UnityEngine::TextAnchor value);
    // public System.Boolean get_alignByGeometry()
    // Offset: 0x1912E10
    bool get_alignByGeometry();
    // public System.Void set_alignByGeometry(System.Boolean value)
    // Offset: 0x1912E18
    void set_alignByGeometry(bool value);
    // public System.Boolean get_richText()
    // Offset: 0x1912E24
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0x1912E2C
    void set_richText(bool value);
    // public UnityEngine.HorizontalWrapMode get_horizontalOverflow()
    // Offset: 0x1912E38
    UnityEngine::HorizontalWrapMode get_horizontalOverflow();
    // public System.Void set_horizontalOverflow(UnityEngine.HorizontalWrapMode value)
    // Offset: 0x1912E40
    void set_horizontalOverflow(UnityEngine::HorizontalWrapMode value);
    // public UnityEngine.VerticalWrapMode get_verticalOverflow()
    // Offset: 0x1912E48
    UnityEngine::VerticalWrapMode get_verticalOverflow();
    // public System.Void set_verticalOverflow(UnityEngine.VerticalWrapMode value)
    // Offset: 0x1912E50
    void set_verticalOverflow(UnityEngine::VerticalWrapMode value);
    // public System.Single get_lineSpacing()
    // Offset: 0x1912E58
    float get_lineSpacing();
    // public System.Void set_lineSpacing(System.Single value)
    // Offset: 0x1912E60
    void set_lineSpacing(float value);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x1912E68
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x1912E6C
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public System.Void .ctor()
    // Offset: 0x1912D94
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FontData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::FontData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FontData*, creationType>()));
    }
  }; // UnityEngine.UI.FontData
  #pragma pack(pop)
  static check_size<sizeof(FontData), 60 + sizeof(float)> __UnityEngine_UI_FontDataSizeCheck;
  static_assert(sizeof(FontData) == 0x40);
  // Writing MetadataGetter for method: FontData::get_defaultFontData
  // Il2CppName: get_defaultFontData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::FontData* (*)()>(&FontData::get_defaultFontData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_defaultFontData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::get_font
  // Il2CppName: get_font
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Font* (FontData::*)()>(&FontData::get_font)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_font
  // Il2CppName: set_font
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(UnityEngine::Font*)>(&FontData::set_font)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Font*>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_fontSize
  // Il2CppName: get_fontSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FontData::*)()>(&FontData::get_fontSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_fontSize
  // Il2CppName: set_fontSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(int)>(&FontData::set_fontSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_fontStyle
  // Il2CppName: get_fontStyle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::FontStyle (FontData::*)()>(&FontData::get_fontStyle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_fontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_fontStyle
  // Il2CppName: set_fontStyle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(UnityEngine::FontStyle)>(&FontData::set_fontStyle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_fontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::FontStyle>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_bestFit
  // Il2CppName: get_bestFit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FontData::*)()>(&FontData::get_bestFit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_bestFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_bestFit
  // Il2CppName: set_bestFit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(bool)>(&FontData::set_bestFit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_bestFit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_minSize
  // Il2CppName: get_minSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FontData::*)()>(&FontData::get_minSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_minSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_minSize
  // Il2CppName: set_minSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(int)>(&FontData::set_minSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_minSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_maxSize
  // Il2CppName: get_maxSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FontData::*)()>(&FontData::get_maxSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_maxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_maxSize
  // Il2CppName: set_maxSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(int)>(&FontData::set_maxSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_maxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_alignment
  // Il2CppName: get_alignment
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAnchor (FontData::*)()>(&FontData::get_alignment)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_alignment
  // Il2CppName: set_alignment
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(UnityEngine::TextAnchor)>(&FontData::set_alignment)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAnchor>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_alignByGeometry
  // Il2CppName: get_alignByGeometry
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FontData::*)()>(&FontData::get_alignByGeometry)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_alignByGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_alignByGeometry
  // Il2CppName: set_alignByGeometry
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(bool)>(&FontData::set_alignByGeometry)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_alignByGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_richText
  // Il2CppName: get_richText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FontData::*)()>(&FontData::get_richText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_richText
  // Il2CppName: set_richText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(bool)>(&FontData::set_richText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_horizontalOverflow
  // Il2CppName: get_horizontalOverflow
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::HorizontalWrapMode (FontData::*)()>(&FontData::get_horizontalOverflow)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_horizontalOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_horizontalOverflow
  // Il2CppName: set_horizontalOverflow
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(UnityEngine::HorizontalWrapMode)>(&FontData::set_horizontalOverflow)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_horizontalOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::HorizontalWrapMode>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_verticalOverflow
  // Il2CppName: get_verticalOverflow
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::VerticalWrapMode (FontData::*)()>(&FontData::get_verticalOverflow)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_verticalOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_verticalOverflow
  // Il2CppName: set_verticalOverflow
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(UnityEngine::VerticalWrapMode)>(&FontData::set_verticalOverflow)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_verticalOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::VerticalWrapMode>()});
    }
  };
  // Writing MetadataGetter for method: FontData::get_lineSpacing
  // Il2CppName: get_lineSpacing
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FontData::*)()>(&FontData::get_lineSpacing)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "get_lineSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::set_lineSpacing
  // Il2CppName: set_lineSpacing
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)(float)>(&FontData::set_lineSpacing)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "set_lineSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: FontData::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
  // Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)()>(&FontData::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
  // Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)()>(&FontData::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FontData::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)()>(&FontData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontData::*)()>(&FontData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FontData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::FontData*, "UnityEngine.UI", "FontData");
