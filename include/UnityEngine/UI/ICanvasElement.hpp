// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.ICanvasElement
  class ICanvasElement {
    public:
    // Creating value type constructor for type: ICanvasElement
    ICanvasElement() noexcept {}
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)
    // Offset: 0xFFFFFFFF
    void Rebuild(UnityEngine::UI::CanvasUpdate executing);
    // public UnityEngine.Transform get_transform()
    // Offset: 0xFFFFFFFF
    UnityEngine::Transform* get_transform();
    // public System.Void LayoutComplete()
    // Offset: 0xFFFFFFFF
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0xFFFFFFFF
    void GraphicUpdateComplete();
    // public System.Boolean IsDestroyed()
    // Offset: 0xFFFFFFFF
    bool IsDestroyed();
  }; // UnityEngine.UI.ICanvasElement
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::ICanvasElement*, "UnityEngine.UI", "ICanvasElement");
// Writing MetadataGetter for method: ICanvasElement::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICanvasElement::*)(UnityEngine::UI::CanvasUpdate)>(&ICanvasElement::Rebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICanvasElement*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
  }
};
// Writing MetadataGetter for method: ICanvasElement::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (ICanvasElement::*)()>(&ICanvasElement::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICanvasElement*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICanvasElement::LayoutComplete
// Il2CppName: LayoutComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICanvasElement::*)()>(&ICanvasElement::LayoutComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICanvasElement*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICanvasElement::GraphicUpdateComplete
// Il2CppName: GraphicUpdateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ICanvasElement::*)()>(&ICanvasElement::GraphicUpdateComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICanvasElement*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ICanvasElement::IsDestroyed
// Il2CppName: IsDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ICanvasElement::*)()>(&ICanvasElement::IsDestroyed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICanvasElement*), "IsDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
