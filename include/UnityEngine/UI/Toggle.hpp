// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IPointerClickHandler
#include "UnityEngine/EventSystems/IPointerClickHandler.hpp"
// Including type: UnityEngine.EventSystems.ISubmitHandler
#include "UnityEngine/EventSystems/ISubmitHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
  // Forward declaring type: ToggleGroup
  class ToggleGroup;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x119
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Toggle
  // [AddComponentMenu] Offset: DC5908
  // [RequireComponent] Offset: DC5908
  class Toggle : public UnityEngine::UI::Selectable/*, public UnityEngine::EventSystems::IPointerClickHandler, public UnityEngine::EventSystems::ISubmitHandler, public UnityEngine::UI::ICanvasElement*/ {
    public:
    // Nested type: UnityEngine::UI::Toggle::ToggleTransition
    struct ToggleTransition;
    // Nested type: UnityEngine::UI::Toggle::ToggleEvent
    class ToggleEvent;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Toggle/ToggleTransition
    struct ToggleTransition/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ToggleTransition
      constexpr ToggleTransition(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Toggle/ToggleTransition None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.UI.Toggle/ToggleTransition None
      static UnityEngine::UI::Toggle::ToggleTransition _get_None();
      // Set static field: static public UnityEngine.UI.Toggle/ToggleTransition None
      static void _set_None(UnityEngine::UI::Toggle::ToggleTransition value);
      // static field const value: static public UnityEngine.UI.Toggle/ToggleTransition Fade
      static constexpr const int Fade = 1;
      // Get static field: static public UnityEngine.UI.Toggle/ToggleTransition Fade
      static UnityEngine::UI::Toggle::ToggleTransition _get_Fade();
      // Set static field: static public UnityEngine.UI.Toggle/ToggleTransition Fade
      static void _set_Fade(UnityEngine::UI::Toggle::ToggleTransition value);
    }; // UnityEngine.UI.Toggle/ToggleTransition
    #pragma pack(pop)
    static check_size<sizeof(Toggle::ToggleTransition), 0 + sizeof(int)> __UnityEngine_UI_Toggle_ToggleTransitionSizeCheck;
    static_assert(sizeof(Toggle::ToggleTransition) == 0x4);
    // public UnityEngine.UI.Toggle/ToggleTransition toggleTransition
    // Size: 0x4
    // Offset: 0xF8
    UnityEngine::UI::Toggle::ToggleTransition toggleTransition;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle::ToggleTransition) == 0x4);
    // Padding between fields: toggleTransition and: graphic
    char __padding0[0x4] = {};
    // public UnityEngine.UI.Graphic graphic
    // Size: 0x8
    // Offset: 0x100
    UnityEngine::UI::Graphic* graphic;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Graphic*) == 0x8);
    // private UnityEngine.UI.ToggleGroup m_Group
    // Size: 0x8
    // Offset: 0x108
    UnityEngine::UI::ToggleGroup* m_Group;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::ToggleGroup*) == 0x8);
    // public UnityEngine.UI.Toggle/ToggleEvent onValueChanged
    // Size: 0x8
    // Offset: 0x110
    UnityEngine::UI::Toggle::ToggleEvent* onValueChanged;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Toggle::ToggleEvent*) == 0x8);
    // [TooltipAttribute] Offset: 0xDC79B4
    // private System.Boolean m_IsOn
    // Size: 0x1
    // Offset: 0x118
    bool m_IsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Toggle
    Toggle(UnityEngine::UI::Toggle::ToggleTransition toggleTransition_ = {}, UnityEngine::UI::Graphic* graphic_ = {}, UnityEngine::UI::ToggleGroup* m_Group_ = {}, UnityEngine::UI::Toggle::ToggleEvent* onValueChanged_ = {}, bool m_IsOn_ = {}) noexcept : toggleTransition{toggleTransition_}, graphic{graphic_}, m_Group{m_Group_}, onValueChanged{onValueChanged_}, m_IsOn{m_IsOn_} {}
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerClickHandler
    operator UnityEngine::EventSystems::IPointerClickHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerClickHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::ISubmitHandler
    operator UnityEngine::EventSystems::ISubmitHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::ISubmitHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // public UnityEngine.UI.ToggleGroup get_group()
    // Offset: 0x23A1F60
    UnityEngine::UI::ToggleGroup* get_group();
    // public System.Void set_group(UnityEngine.UI.ToggleGroup value)
    // Offset: 0x23A1F68
    void set_group(UnityEngine::UI::ToggleGroup* value);
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)
    // Offset: 0x23A22AC
    void Rebuild(UnityEngine::UI::CanvasUpdate executing);
    // public System.Void LayoutComplete()
    // Offset: 0x23A22B0
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x23A22B4
    void GraphicUpdateComplete();
    // private System.Void SetToggleGroup(UnityEngine.UI.ToggleGroup newGroup, System.Boolean setMemberValue)
    // Offset: 0x23A1F94
    void SetToggleGroup(UnityEngine::UI::ToggleGroup* newGroup, bool setMemberValue);
    // public System.Boolean get_isOn()
    // Offset: 0x23A2934
    bool get_isOn();
    // public System.Void set_isOn(System.Boolean value)
    // Offset: 0x23A293C
    void set_isOn(bool value);
    // public System.Void SetIsOnWithoutNotify(System.Boolean value)
    // Offset: 0x23A2948
    void SetIsOnWithoutNotify(bool value);
    // private System.Void Set(System.Boolean value, System.Boolean sendCallback)
    // Offset: 0x23A2574
    void Set(bool value, bool sendCallback);
    // private System.Void PlayEffect(System.Boolean instant)
    // Offset: 0x23A20FC
    void PlayEffect(bool instant);
    // private System.Void InternalToggle()
    // Offset: 0x23A2A8C
    void InternalToggle();
    // public System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x23A2AF0
    void OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x23A2B10
    void OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData);
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x23A2B14
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // protected System.Void .ctor()
    // Offset: 0x23A21D0
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Toggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::Toggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Toggle*, creationType>()));
    }
    // protected override System.Void OnDestroy()
    // Offset: 0x23A22B8
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDestroy()
    void OnDestroy();
    // protected override System.Void OnEnable()
    // Offset: 0x23A23FC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x23A2438
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x23A2468
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void Start()
    // Offset: 0x23A2A84
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Start()
    void Start();
  }; // UnityEngine.UI.Toggle
  #pragma pack(pop)
  static check_size<sizeof(Toggle), 280 + sizeof(bool)> __UnityEngine_UI_ToggleSizeCheck;
  static_assert(sizeof(Toggle) == 0x119);
  // Writing MetadataGetter for method: Toggle::get_group
  // Il2CppName: get_group
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::ToggleGroup* (Toggle::*)()>(&Toggle::get_group)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "get_group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::set_group
  // Il2CppName: set_group
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(UnityEngine::UI::ToggleGroup*)>(&Toggle::set_group)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "set_group", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ToggleGroup*>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::Rebuild
  // Il2CppName: Rebuild
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(UnityEngine::UI::CanvasUpdate)>(&Toggle::Rebuild)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::LayoutComplete
  // Il2CppName: LayoutComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::LayoutComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::GraphicUpdateComplete
  // Il2CppName: GraphicUpdateComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::GraphicUpdateComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::SetToggleGroup
  // Il2CppName: SetToggleGroup
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(UnityEngine::UI::ToggleGroup*, bool)>(&Toggle::SetToggleGroup)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "SetToggleGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ToggleGroup*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::get_isOn
  // Il2CppName: get_isOn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Toggle::*)()>(&Toggle::get_isOn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "get_isOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::set_isOn
  // Il2CppName: set_isOn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(bool)>(&Toggle::set_isOn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "set_isOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::SetIsOnWithoutNotify
  // Il2CppName: SetIsOnWithoutNotify
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(bool)>(&Toggle::SetIsOnWithoutNotify)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "SetIsOnWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::Set
  // Il2CppName: Set
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(bool, bool)>(&Toggle::Set)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::PlayEffect
  // Il2CppName: PlayEffect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(bool)>(&Toggle::PlayEffect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "PlayEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::InternalToggle
  // Il2CppName: InternalToggle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::InternalToggle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "InternalToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::OnPointerClick
  // Il2CppName: OnPointerClick
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(UnityEngine::EventSystems::PointerEventData*)>(&Toggle::OnPointerClick)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "OnPointerClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::OnSubmit
  // Il2CppName: OnSubmit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)(UnityEngine::EventSystems::BaseEventData*)>(&Toggle::OnSubmit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "OnSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Toggle::UnityEngine_UI_ICanvasElement_get_transform
  // Il2CppName: UnityEngine.UI.ICanvasElement.get_transform
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Toggle::*)()>(&Toggle::UnityEngine_UI_ICanvasElement_get_transform)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::OnDestroy
  // Il2CppName: OnDestroy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::OnDestroy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::OnEnable
  // Il2CppName: OnEnable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::OnEnable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::OnDisable
  // Il2CppName: OnDisable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::OnDisable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::OnDidApplyAnimationProperties
  // Il2CppName: OnDidApplyAnimationProperties
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::OnDidApplyAnimationProperties)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Toggle::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Toggle::*)()>(&Toggle::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Toggle*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Toggle*, "UnityEngine.UI", "Toggle");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Toggle::ToggleTransition, "UnityEngine.UI", "Toggle/ToggleTransition");
