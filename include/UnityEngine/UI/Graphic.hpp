// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.UI.CoroutineTween.ColorTween
#include "UnityEngine/UI/CoroutineTween/ColorTween.hpp"
// Including type: UnityEngine.UIVertex
#include "UnityEngine/UIVertex.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityAction
  class UnityAction;
}
// Forward declaring namespace: UnityEngine::UI::CoroutineTween
namespace UnityEngine::UI::CoroutineTween {
  // Forward declaring type: TweenRunner`1<T>
  template<typename T>
  class TweenRunner_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: VertexHelper
  class VertexHelper;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Graphic
  // [] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: CD7E94
  // [RequireComponent] Offset: CD7E94
  // [RequireComponent] Offset: CD7E94
  // [ExecuteAlways] Offset: CD7E94
  class Graphic : public UnityEngine::EventSystems::UIBehaviour/*, public UnityEngine::UI::ICanvasElement*/ {
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xCD95E4
    // protected UnityEngine.Material m_Material
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Material* m_Material;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Color m_Color
    // Size: 0x10
    // Offset: 0x20
    UnityEngine::Color m_Color;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // protected System.Boolean m_SkipLayoutUpdate
    // Size: 0x1
    // Offset: 0x30
    bool m_SkipLayoutUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_SkipMaterialUpdate
    // Size: 0x1
    // Offset: 0x31
    bool m_SkipMaterialUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RaycastTarget
    // Size: 0x1
    // Offset: 0x32
    bool m_RaycastTarget;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RaycastTarget and: m_RectTransform
    char __padding4[0x5] = {};
    // private UnityEngine.RectTransform m_RectTransform
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::RectTransform* m_RectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.CanvasRenderer m_CanvasRenderer
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::CanvasRenderer* m_CanvasRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasRenderer*) == 0x8);
    // private UnityEngine.Canvas m_Canvas
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Canvas* m_Canvas;
    // Field size check
    static_assert(sizeof(UnityEngine::Canvas*) == 0x8);
    // private System.Boolean m_VertsDirty
    // Size: 0x1
    // Offset: 0x50
    bool m_VertsDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_MaterialDirty
    // Size: 0x1
    // Offset: 0x51
    bool m_MaterialDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_MaterialDirty and: m_OnDirtyLayoutCallback
    char __padding9[0x6] = {};
    // protected UnityEngine.Events.UnityAction m_OnDirtyLayoutCallback
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Events::UnityAction* m_OnDirtyLayoutCallback;
    // Field size check
    static_assert(sizeof(UnityEngine::Events::UnityAction*) == 0x8);
    // protected UnityEngine.Events.UnityAction m_OnDirtyVertsCallback
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Events::UnityAction* m_OnDirtyVertsCallback;
    // Field size check
    static_assert(sizeof(UnityEngine::Events::UnityAction*) == 0x8);
    // protected UnityEngine.Events.UnityAction m_OnDirtyMaterialCallback
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Events::UnityAction* m_OnDirtyMaterialCallback;
    // Field size check
    static_assert(sizeof(UnityEngine::Events::UnityAction*) == 0x8);
    // protected UnityEngine.Mesh m_CachedMesh
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::Mesh* m_CachedMesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // protected UnityEngine.Vector2[] m_CachedUvs
    // Size: 0x8
    // Offset: 0x78
    ::Array<UnityEngine::Vector2>* m_CachedUvs;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector2>*) == 0x8);
    // private readonly UnityEngine.UI.CoroutineTween.TweenRunner`1<UnityEngine.UI.CoroutineTween.ColorTween> m_ColorTweenRunner
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::UI::CoroutineTween::TweenRunner_1<UnityEngine::UI::CoroutineTween::ColorTween>* m_ColorTweenRunner;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::CoroutineTween::TweenRunner_1<UnityEngine::UI::CoroutineTween::ColorTween>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCD9650
    // private System.Boolean <useLegacyMeshGeneration>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool useLegacyMeshGeneration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Graphic
    Graphic(UnityEngine::Material* m_Material_ = {}, UnityEngine::Color m_Color_ = {}, bool m_SkipLayoutUpdate_ = {}, bool m_SkipMaterialUpdate_ = {}, bool m_RaycastTarget_ = {}, UnityEngine::RectTransform* m_RectTransform_ = {}, UnityEngine::CanvasRenderer* m_CanvasRenderer_ = {}, UnityEngine::Canvas* m_Canvas_ = {}, bool m_VertsDirty_ = {}, bool m_MaterialDirty_ = {}, UnityEngine::Events::UnityAction* m_OnDirtyLayoutCallback_ = {}, UnityEngine::Events::UnityAction* m_OnDirtyVertsCallback_ = {}, UnityEngine::Events::UnityAction* m_OnDirtyMaterialCallback_ = {}, UnityEngine::Mesh* m_CachedMesh_ = {}, ::Array<UnityEngine::Vector2>* m_CachedUvs_ = {}, UnityEngine::UI::CoroutineTween::TweenRunner_1<UnityEngine::UI::CoroutineTween::ColorTween>* m_ColorTweenRunner_ = {}, bool useLegacyMeshGeneration_ = {}) noexcept : m_Material{m_Material_}, m_Color{m_Color_}, m_SkipLayoutUpdate{m_SkipLayoutUpdate_}, m_SkipMaterialUpdate{m_SkipMaterialUpdate_}, m_RaycastTarget{m_RaycastTarget_}, m_RectTransform{m_RectTransform_}, m_CanvasRenderer{m_CanvasRenderer_}, m_Canvas{m_Canvas_}, m_VertsDirty{m_VertsDirty_}, m_MaterialDirty{m_MaterialDirty_}, m_OnDirtyLayoutCallback{m_OnDirtyLayoutCallback_}, m_OnDirtyVertsCallback{m_OnDirtyVertsCallback_}, m_OnDirtyMaterialCallback{m_OnDirtyMaterialCallback_}, m_CachedMesh{m_CachedMesh_}, m_CachedUvs{m_CachedUvs_}, m_ColorTweenRunner{m_ColorTweenRunner_}, useLegacyMeshGeneration{useLegacyMeshGeneration_} {}
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static protected UnityEngine.Material s_DefaultUI
    static UnityEngine::Material* _get_s_DefaultUI();
    // Set static field: static protected UnityEngine.Material s_DefaultUI
    static void _set_s_DefaultUI(UnityEngine::Material* value);
    // Get static field: static protected UnityEngine.Texture2D s_WhiteTexture
    static UnityEngine::Texture2D* _get_s_WhiteTexture();
    // Set static field: static protected UnityEngine.Texture2D s_WhiteTexture
    static void _set_s_WhiteTexture(UnityEngine::Texture2D* value);
    // Get static field: static protected UnityEngine.Mesh s_Mesh
    static UnityEngine::Mesh* _get_s_Mesh();
    // Set static field: static protected UnityEngine.Mesh s_Mesh
    static void _set_s_Mesh(UnityEngine::Mesh* value);
    // Get static field: static private readonly UnityEngine.UI.VertexHelper s_VertexHelper
    static UnityEngine::UI::VertexHelper* _get_s_VertexHelper();
    // Set static field: static private readonly UnityEngine.UI.VertexHelper s_VertexHelper
    static void _set_s_VertexHelper(UnityEngine::UI::VertexHelper* value);
    // static public UnityEngine.Material get_defaultGraphicMaterial()
    // Offset: 0x1751418
    static UnityEngine::Material* get_defaultGraphicMaterial();
    // public UnityEngine.Color get_color()
    // Offset: 0x1751510
    UnityEngine::Color get_color();
    // public System.Void set_color(UnityEngine.Color value)
    // Offset: 0x175151C
    void set_color(UnityEngine::Color value);
    // public System.Boolean get_raycastTarget()
    // Offset: 0x1751564
    bool get_raycastTarget_NEW();
    // public System.Void set_raycastTarget(System.Boolean value)
    // Offset: 0x175156C
    void set_raycastTarget_NEW(bool value);
    // protected System.Boolean get_useLegacyMeshGeneration()
    // Offset: 0x1751578
    bool get_useLegacyMeshGeneration();
    // protected System.Void set_useLegacyMeshGeneration(System.Boolean value)
    // Offset: 0x1751580
    void set_useLegacyMeshGeneration(bool value);
    // public System.Void SetAllDirty()
    // Offset: 0x1751638
    void SetAllDirty();
    // public System.Void SetLayoutDirty()
    // Offset: 0x17516AC
    void SetLayoutDirty();
    // public System.Void SetVerticesDirty()
    // Offset: 0x17517B4
    void SetVerticesDirty();
    // public System.Void SetMaterialDirty()
    // Offset: 0x1751854
    void SetMaterialDirty();
    // public System.Int32 get_depth()
    // Offset: 0x1751FC8
    int get_depth();
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x1751754
    UnityEngine::RectTransform* get_rectTransform_NEW();
    // public UnityEngine.Canvas get_canvas()
    // Offset: 0x1751A68
    UnityEngine::Canvas* get_canvas();
    // private System.Void CacheCanvas()
    // Offset: 0x1751CF8
    void CacheCanvas();
    // public UnityEngine.CanvasRenderer get_canvasRenderer()
    // Offset: 0x1751FE8
    UnityEngine::CanvasRenderer* get_canvasRenderer();
    // public UnityEngine.Material get_defaultMaterial()
    // Offset: 0x1752048
    UnityEngine::Material* get_defaultMaterial_NEW();
    // public UnityEngine.Material get_material()
    // Offset: 0x17520A4
    UnityEngine::Material* get_material();
    // public System.Void set_material(UnityEngine.Material value)
    // Offset: 0x175213C
    void set_material(UnityEngine::Material* value);
    // public UnityEngine.Material get_materialForRendering()
    // Offset: 0x17521E4
    UnityEngine::Material* get_materialForRendering();
    // public UnityEngine.Texture get_mainTexture()
    // Offset: 0x17523E0
    UnityEngine::Texture* get_mainTexture();
    // public System.Void OnCullingChanged()
    // Offset: 0x17528A4
    void OnCullingChanged_NEW();
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0x1752944
    void Rebuild(UnityEngine::UI::CanvasUpdate update);
    // public System.Void LayoutComplete()
    // Offset: 0x1752A38
    void LayoutComplete_NEW();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x1752A3C
    void GraphicUpdateComplete_NEW();
    // protected System.Void UpdateMaterial()
    // Offset: 0x1752A40
    void UpdateMaterial();
    // protected System.Void UpdateGeometry()
    // Offset: 0x1752AFC
    void UpdateGeometry();
    // private System.Void DoMeshGeneration()
    // Offset: 0x1752EA4
    void DoMeshGeneration();
    // private System.Void DoLegacyMeshGeneration()
    // Offset: 0x1752B0C
    void DoLegacyMeshGeneration();
    // static protected UnityEngine.Mesh get_workerMesh()
    // Offset: 0x1753270
    static UnityEngine::Mesh* get_workerMesh();
    // protected System.Void OnFillVBO(System.Collections.Generic.List`1<UnityEngine.UIVertex> vbo)
    // Offset: 0x17533B4
    void OnFillVBO_NEW(System::Collections::Generic::List_1<UnityEngine::UIVertex>* vbo);
    // protected System.Void OnPopulateMesh(UnityEngine.Mesh m)
    // Offset: 0x17533B8
    void OnPopulateMesh_NEW(UnityEngine::Mesh* m);
    // protected System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper vh)
    // Offset: 0x1753460
    void OnPopulateMesh(UnityEngine::UI::VertexHelper* vh);
    // public System.Void SetNativeSize()
    // Offset: 0x1753810
    void SetNativeSize();
    // public System.Boolean Raycast(UnityEngine.Vector2 sp, UnityEngine.Camera eventCamera)
    // Offset: 0x1753814
    bool Raycast_NEW(UnityEngine::Vector2 sp, UnityEngine::Camera* eventCamera);
    // public UnityEngine.Vector2 PixelAdjustPoint(UnityEngine.Vector2 point)
    // Offset: 0x1753C8C
    UnityEngine::Vector2 PixelAdjustPoint(UnityEngine::Vector2 point);
    // public UnityEngine.Rect GetPixelAdjustedRect()
    // Offset: 0x17536C8
    UnityEngine::Rect GetPixelAdjustedRect();
    // public System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0x1753DD8
    void CrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // public System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha, System.Boolean useRGB)
    // Offset: 0x1753DF4
    void CrossFadeColor_NEW(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB);
    // static private UnityEngine.Color CreateColorFromAlpha(System.Single alpha)
    // Offset: 0x1754040
    static UnityEngine::Color CreateColorFromAlpha(float alpha);
    // public System.Void CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0x1754068
    void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // public System.Void RegisterDirtyLayoutCallback(UnityEngine.Events.UnityAction action)
    // Offset: 0x1754110
    void RegisterDirtyLayoutCallback(UnityEngine::Events::UnityAction* action);
    // public System.Void UnregisterDirtyLayoutCallback(UnityEngine.Events.UnityAction action)
    // Offset: 0x1754190
    void UnregisterDirtyLayoutCallback(UnityEngine::Events::UnityAction* action);
    // public System.Void RegisterDirtyVerticesCallback(UnityEngine.Events.UnityAction action)
    // Offset: 0x1754210
    void RegisterDirtyVerticesCallback(UnityEngine::Events::UnityAction* action);
    // public System.Void UnregisterDirtyVerticesCallback(UnityEngine.Events.UnityAction action)
    // Offset: 0x1754290
    void UnregisterDirtyVerticesCallback(UnityEngine::Events::UnityAction* action);
    // public System.Void RegisterDirtyMaterialCallback(UnityEngine.Events.UnityAction action)
    // Offset: 0x1754310
    void RegisterDirtyMaterialCallback(UnityEngine::Events::UnityAction* action);
    // public System.Void UnregisterDirtyMaterialCallback(UnityEngine.Events.UnityAction action)
    // Offset: 0x1754390
    void UnregisterDirtyMaterialCallback(UnityEngine::Events::UnityAction* action);
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x1754494
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform_NEW();
    // protected System.Void .ctor()
    // Offset: 0x175158C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Graphic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::Graphic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Graphic*, creationType>()));
    }
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x17518F4
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnRectTransformDimensionsChange_NEW()
    void OnRectTransformDimensionsChange();
    // protected override System.Void OnBeforeTransformParentChanged()
    // Offset: 0x17519B4
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnBeforeTransformParentChanged_NEW()
    void OnBeforeTransformParentChanged();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x1751C34
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnTransformParentChanged_NEW()
    void OnTransformParentChanged();
    // protected override System.Void OnEnable()
    // Offset: 0x1752448
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable_NEW()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1752588
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable_NEW()
    void OnDisable();
    // protected override System.Void OnDestroy()
    // Offset: 0x17526D0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDestroy_NEW()
    void OnDestroy();
    // protected override System.Void OnCanvasHierarchyChanged()
    // Offset: 0x1752780
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnCanvasHierarchyChanged_NEW()
    void OnCanvasHierarchyChanged();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x1753800
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDidApplyAnimationProperties_NEW()
    void OnDidApplyAnimationProperties();
    // static private System.Void .cctor()
    // Offset: 0x1754410
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.UI.Graphic
  #pragma pack(pop)
  static check_size<sizeof(Graphic), 136 + sizeof(bool)> __UnityEngine_UI_GraphicSizeCheck;
  static_assert(sizeof(Graphic) == 0x89);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Graphic*, "UnityEngine.UI", "Graphic");
