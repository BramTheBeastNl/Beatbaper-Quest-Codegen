// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x58
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UI.ColorBlock
  struct ColorBlock/*, public System::ValueType, public System::IEquatable_1<UnityEngine::UI::ColorBlock>*/ {
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xDC60F0
    // private UnityEngine.Color m_NormalColor
    // Size: 0x10
    // Offset: 0x0
    UnityEngine::Color m_NormalColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0xDC613C
    // private UnityEngine.Color m_HighlightedColor
    // Size: 0x10
    // Offset: 0x10
    UnityEngine::Color m_HighlightedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0xDC6188
    // private UnityEngine.Color m_PressedColor
    // Size: 0x10
    // Offset: 0x20
    UnityEngine::Color m_PressedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0xDC61D4
    // private UnityEngine.Color m_SelectedColor
    // Size: 0x10
    // Offset: 0x30
    UnityEngine::Color m_SelectedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [FormerlySerializedAsAttribute] Offset: 0xDC6220
    // private UnityEngine.Color m_DisabledColor
    // Size: 0x10
    // Offset: 0x40
    UnityEngine::Color m_DisabledColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // [RangeAttribute] Offset: 0xDC626C
    // private System.Single m_ColorMultiplier
    // Size: 0x4
    // Offset: 0x50
    float m_ColorMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xDC62AC
    // private System.Single m_FadeDuration
    // Size: 0x4
    // Offset: 0x54
    float m_FadeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: ColorBlock
    constexpr ColorBlock(UnityEngine::Color m_NormalColor_ = {}, UnityEngine::Color m_HighlightedColor_ = {}, UnityEngine::Color m_PressedColor_ = {}, UnityEngine::Color m_SelectedColor_ = {}, UnityEngine::Color m_DisabledColor_ = {}, float m_ColorMultiplier_ = {}, float m_FadeDuration_ = {}) noexcept : m_NormalColor{m_NormalColor_}, m_HighlightedColor{m_HighlightedColor_}, m_PressedColor{m_PressedColor_}, m_SelectedColor{m_SelectedColor_}, m_DisabledColor{m_DisabledColor_}, m_ColorMultiplier{m_ColorMultiplier_}, m_FadeDuration{m_FadeDuration_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::UI::ColorBlock>
    operator System::IEquatable_1<UnityEngine::UI::ColorBlock>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::UI::ColorBlock>*>(this);
    }
    // public UnityEngine.Color get_normalColor()
    // Offset: 0xEED3F0
    UnityEngine::Color get_normalColor();
    // public System.Void set_normalColor(UnityEngine.Color value)
    // Offset: 0xEED3FC
    void set_normalColor(UnityEngine::Color value);
    // public UnityEngine.Color get_highlightedColor()
    // Offset: 0xEED408
    UnityEngine::Color get_highlightedColor();
    // public System.Void set_highlightedColor(UnityEngine.Color value)
    // Offset: 0xEED414
    void set_highlightedColor(UnityEngine::Color value);
    // public UnityEngine.Color get_pressedColor()
    // Offset: 0xEED420
    UnityEngine::Color get_pressedColor();
    // public System.Void set_pressedColor(UnityEngine.Color value)
    // Offset: 0xEED42C
    void set_pressedColor(UnityEngine::Color value);
    // public UnityEngine.Color get_selectedColor()
    // Offset: 0xEED438
    UnityEngine::Color get_selectedColor();
    // public System.Void set_selectedColor(UnityEngine.Color value)
    // Offset: 0xEED444
    void set_selectedColor(UnityEngine::Color value);
    // public UnityEngine.Color get_disabledColor()
    // Offset: 0xEED450
    UnityEngine::Color get_disabledColor();
    // public System.Void set_disabledColor(UnityEngine.Color value)
    // Offset: 0xEED45C
    void set_disabledColor(UnityEngine::Color value);
    // public System.Single get_colorMultiplier()
    // Offset: 0xEED468
    float get_colorMultiplier();
    // public System.Void set_colorMultiplier(System.Single value)
    // Offset: 0xEED470
    void set_colorMultiplier(float value);
    // public System.Single get_fadeDuration()
    // Offset: 0xEED478
    float get_fadeDuration();
    // public System.Void set_fadeDuration(System.Single value)
    // Offset: 0xEED480
    void set_fadeDuration(float value);
    // static public UnityEngine.UI.ColorBlock get_defaultColorBlock()
    // Offset: 0x143B498
    static UnityEngine::UI::ColorBlock get_defaultColorBlock();
    // public System.Boolean Equals(UnityEngine.UI.ColorBlock other)
    // Offset: 0xEED490
    bool Equals(UnityEngine::UI::ColorBlock other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xEED488
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xEED4D0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.UI.ColorBlock
  #pragma pack(pop)
  static check_size<sizeof(ColorBlock), 84 + sizeof(float)> __UnityEngine_UI_ColorBlockSizeCheck;
  static_assert(sizeof(ColorBlock) == 0x58);
  // static public System.Boolean op_Equality(UnityEngine.UI.ColorBlock point1, UnityEngine.UI.ColorBlock point2)
  // Offset: 0x143B7C4
  bool operator ==(const UnityEngine::UI::ColorBlock& point1, const UnityEngine::UI::ColorBlock& point2);
  // static public System.Boolean op_Inequality(UnityEngine.UI.ColorBlock point1, UnityEngine.UI.ColorBlock point2)
  // Offset: 0x143B804
  bool operator !=(const UnityEngine::UI::ColorBlock& point1, const UnityEngine::UI::ColorBlock& point2);
  // Writing MetadataGetter for method: ColorBlock::get_normalColor
  // Il2CppName: get_normalColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorBlock::*)()>(&ColorBlock::get_normalColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_normalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_normalColor
  // Il2CppName: set_normalColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(UnityEngine::Color)>(&ColorBlock::set_normalColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_normalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_highlightedColor
  // Il2CppName: get_highlightedColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorBlock::*)()>(&ColorBlock::get_highlightedColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_highlightedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_highlightedColor
  // Il2CppName: set_highlightedColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(UnityEngine::Color)>(&ColorBlock::set_highlightedColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_highlightedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_pressedColor
  // Il2CppName: get_pressedColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorBlock::*)()>(&ColorBlock::get_pressedColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_pressedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_pressedColor
  // Il2CppName: set_pressedColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(UnityEngine::Color)>(&ColorBlock::set_pressedColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_pressedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_selectedColor
  // Il2CppName: get_selectedColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorBlock::*)()>(&ColorBlock::get_selectedColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_selectedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_selectedColor
  // Il2CppName: set_selectedColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(UnityEngine::Color)>(&ColorBlock::set_selectedColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_selectedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_disabledColor
  // Il2CppName: get_disabledColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorBlock::*)()>(&ColorBlock::get_disabledColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_disabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_disabledColor
  // Il2CppName: set_disabledColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(UnityEngine::Color)>(&ColorBlock::set_disabledColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_disabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_colorMultiplier
  // Il2CppName: get_colorMultiplier
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ColorBlock::*)()>(&ColorBlock::get_colorMultiplier)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_colorMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_colorMultiplier
  // Il2CppName: set_colorMultiplier
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(float)>(&ColorBlock::set_colorMultiplier)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_colorMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_fadeDuration
  // Il2CppName: get_fadeDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ColorBlock::*)()>(&ColorBlock::get_fadeDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_fadeDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::set_fadeDuration
  // Il2CppName: set_fadeDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorBlock::*)(float)>(&ColorBlock::set_fadeDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "set_fadeDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::get_defaultColorBlock
  // Il2CppName: get_defaultColorBlock
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::ColorBlock (*)()>(&ColorBlock::get_defaultColorBlock)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "get_defaultColorBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ColorBlock::*)(UnityEngine::UI::ColorBlock)>(&ColorBlock::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::ColorBlock>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ColorBlock::*)(::Il2CppObject*)>(&ColorBlock::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ColorBlock::*)()>(&ColorBlock::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::operator ==
  // Il2CppName: op_Equality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::UI::ColorBlock&, const UnityEngine::UI::ColorBlock&)>(&ColorBlock::operator ==)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::UI::ColorBlock&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::UI::ColorBlock&>()});
    }
  };
  // Writing MetadataGetter for method: ColorBlock::operator !=
  // Il2CppName: op_Inequality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::UI::ColorBlock&, const UnityEngine::UI::ColorBlock&)>(&ColorBlock::operator !=)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ColorBlock), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::UI::ColorBlock&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::UI::ColorBlock&>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::ColorBlock, "UnityEngine.UI", "ColorBlock");
