// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.EventSystems.IMoveHandler
#include "UnityEngine/EventSystems/IMoveHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerDownHandler
#include "UnityEngine/EventSystems/IPointerDownHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerUpHandler
#include "UnityEngine/EventSystems/IPointerUpHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerEnterHandler
#include "UnityEngine/EventSystems/IPointerEnterHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerExitHandler
#include "UnityEngine/EventSystems/IPointerExitHandler.hpp"
// Including type: UnityEngine.EventSystems.ISelectHandler
#include "UnityEngine/EventSystems/ISelectHandler.hpp"
// Including type: UnityEngine.EventSystems.IDeselectHandler
#include "UnityEngine/EventSystems/IDeselectHandler.hpp"
// Including type: UnityEngine.UI.Navigation
#include "UnityEngine/UI/Navigation.hpp"
// Including type: UnityEngine.UI.ColorBlock
#include "UnityEngine/UI/ColorBlock.hpp"
// Including type: UnityEngine.UI.SpriteState
#include "UnityEngine/UI/SpriteState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: AnimationTriggers
  class AnimationTriggers;
  // Forward declaring type: Graphic
  class Graphic;
  // Skipping declaration: Transition because it is already included!
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: Animator
  class Animator;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Vector2
  struct Vector2;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: AxisEventData
  class AxisEventData;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Selectable
  // [] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: CD8790
  // [ExecuteAlways] Offset: CD8790
  // [SelectionBaseAttribute] Offset: CD8790
  // [DisallowMultipleComponent] Offset: CD8790
  class Selectable : public UnityEngine::EventSystems::UIBehaviour/*, public UnityEngine::EventSystems::IMoveHandler, public UnityEngine::EventSystems::IPointerDownHandler, public UnityEngine::EventSystems::IPointerUpHandler, public UnityEngine::EventSystems::IPointerEnterHandler, public UnityEngine::EventSystems::IPointerExitHandler, public UnityEngine::EventSystems::ISelectHandler, public UnityEngine::EventSystems::IDeselectHandler*/ {
    public:
    // Nested type: UnityEngine::UI::Selectable::Transition
    struct Transition;
    // Nested type: UnityEngine::UI::Selectable::SelectionState
    struct SelectionState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Selectable/Transition
    // [] Offset: FFFFFFFF
    struct Transition/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Transition
      constexpr Transition(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Selectable/Transition None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.UI.Selectable/Transition None
      static UnityEngine::UI::Selectable::Transition _get_None();
      // Set static field: static public UnityEngine.UI.Selectable/Transition None
      static void _set_None(UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/Transition ColorTint
      static constexpr const int ColorTint = 1;
      // Get static field: static public UnityEngine.UI.Selectable/Transition ColorTint
      static UnityEngine::UI::Selectable::Transition _get_ColorTint();
      // Set static field: static public UnityEngine.UI.Selectable/Transition ColorTint
      static void _set_ColorTint(UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/Transition SpriteSwap
      static constexpr const int SpriteSwap = 2;
      // Get static field: static public UnityEngine.UI.Selectable/Transition SpriteSwap
      static UnityEngine::UI::Selectable::Transition _get_SpriteSwap();
      // Set static field: static public UnityEngine.UI.Selectable/Transition SpriteSwap
      static void _set_SpriteSwap(UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/Transition Animation
      static constexpr const int Animation = 3;
      // Get static field: static public UnityEngine.UI.Selectable/Transition Animation
      static UnityEngine::UI::Selectable::Transition _get_Animation();
      // Set static field: static public UnityEngine.UI.Selectable/Transition Animation
      static void _set_Animation(UnityEngine::UI::Selectable::Transition value);
    }; // UnityEngine.UI.Selectable/Transition
    #pragma pack(pop)
    static check_size<sizeof(Selectable::Transition), 0 + sizeof(int)> __UnityEngine_UI_Selectable_TransitionSizeCheck;
    static_assert(sizeof(Selectable::Transition) == 0x4);
    // private System.Boolean m_EnableCalled
    // Size: 0x1
    // Offset: 0x18
    bool m_EnableCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableCalled and: m_Navigation
    char __padding0[0x7] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xCDA570
    // private UnityEngine.UI.Navigation m_Navigation
    // Size: 0x28
    // Offset: 0x20
    UnityEngine::UI::Navigation m_Navigation;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Navigation) == 0x28);
    // [FormerlySerializedAsAttribute] Offset: 0xCDA5BC
    // private UnityEngine.UI.Selectable/Transition m_Transition
    // Size: 0x4
    // Offset: 0x48
    UnityEngine::UI::Selectable::Transition m_Transition;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Selectable::Transition) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xCDA608
    // private UnityEngine.UI.ColorBlock m_Colors
    // Size: 0x58
    // Offset: 0x4C
    UnityEngine::UI::ColorBlock m_Colors;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::ColorBlock) == 0x58);
    // Padding between fields: m_Colors and: m_SpriteState
    char __padding3[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xCDA654
    // private UnityEngine.UI.SpriteState m_SpriteState
    // Size: 0x20
    // Offset: 0xA8
    UnityEngine::UI::SpriteState m_SpriteState;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::SpriteState) == 0x20);
    // [FormerlySerializedAsAttribute] Offset: 0xCDA6A0
    // private UnityEngine.UI.AnimationTriggers m_AnimationTriggers
    // Size: 0x8
    // Offset: 0xC8
    UnityEngine::UI::AnimationTriggers* m_AnimationTriggers;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::AnimationTriggers*) == 0x8);
    // [TooltipAttribute] Offset: 0xCDA6EC
    // private System.Boolean m_Interactable
    // Size: 0x1
    // Offset: 0xD0
    bool m_Interactable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Interactable and: m_TargetGraphic
    char __padding6[0x7] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xCDA738
    // [FormerlySerializedAsAttribute] Offset: 0xCDA738
    // private UnityEngine.UI.Graphic m_TargetGraphic
    // Size: 0x8
    // Offset: 0xD8
    UnityEngine::UI::Graphic* m_TargetGraphic;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Graphic*) == 0x8);
    // private System.Boolean m_GroupsAllowInteraction
    // Size: 0x1
    // Offset: 0xE0
    bool m_GroupsAllowInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_GroupsAllowInteraction and: m_CurrentIndex
    char __padding8[0x3] = {};
    // protected System.Int32 m_CurrentIndex
    // Size: 0x4
    // Offset: 0xE4
    int m_CurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xCDA7A8
    // private System.Boolean <isPointerInside>k__BackingField
    // Size: 0x1
    // Offset: 0xE8
    bool isPointerInside;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xCDA7B8
    // private System.Boolean <isPointerDown>k__BackingField
    // Size: 0x1
    // Offset: 0xE9
    bool isPointerDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xCDA7C8
    // private System.Boolean <hasSelection>k__BackingField
    // Size: 0x1
    // Offset: 0xEA
    bool hasSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasSelection and: m_CanvasGroupCache
    char __padding12[0x5] = {};
    // private readonly System.Collections.Generic.List`1<UnityEngine.CanvasGroup> m_CanvasGroupCache
    // Size: 0x8
    // Offset: 0xF0
    System::Collections::Generic::List_1<UnityEngine::CanvasGroup*>* m_CanvasGroupCache;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::CanvasGroup*>*) == 0x8);
    // Creating value type constructor for type: Selectable
    Selectable(bool m_EnableCalled_ = {}, UnityEngine::UI::Navigation m_Navigation_ = {}, UnityEngine::UI::Selectable::Transition m_Transition_ = {}, UnityEngine::UI::ColorBlock m_Colors_ = {}, UnityEngine::UI::SpriteState m_SpriteState_ = {}, UnityEngine::UI::AnimationTriggers* m_AnimationTriggers_ = {}, bool m_Interactable_ = {}, UnityEngine::UI::Graphic* m_TargetGraphic_ = {}, bool m_GroupsAllowInteraction_ = {}, int m_CurrentIndex_ = {}, bool isPointerInside_ = {}, bool isPointerDown_ = {}, bool hasSelection_ = {}, System::Collections::Generic::List_1<UnityEngine::CanvasGroup*>* m_CanvasGroupCache_ = {}) noexcept : m_EnableCalled{m_EnableCalled_}, m_Navigation{m_Navigation_}, m_Transition{m_Transition_}, m_Colors{m_Colors_}, m_SpriteState{m_SpriteState_}, m_AnimationTriggers{m_AnimationTriggers_}, m_Interactable{m_Interactable_}, m_TargetGraphic{m_TargetGraphic_}, m_GroupsAllowInteraction{m_GroupsAllowInteraction_}, m_CurrentIndex{m_CurrentIndex_}, isPointerInside{isPointerInside_}, isPointerDown{isPointerDown_}, hasSelection{hasSelection_}, m_CanvasGroupCache{m_CanvasGroupCache_} {}
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IMoveHandler
    operator UnityEngine::EventSystems::IMoveHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IMoveHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerDownHandler
    operator UnityEngine::EventSystems::IPointerDownHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerDownHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerUpHandler
    operator UnityEngine::EventSystems::IPointerUpHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerUpHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerEnterHandler
    operator UnityEngine::EventSystems::IPointerEnterHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerEnterHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerExitHandler
    operator UnityEngine::EventSystems::IPointerExitHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerExitHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::ISelectHandler
    operator UnityEngine::EventSystems::ISelectHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::ISelectHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IDeselectHandler
    operator UnityEngine::EventSystems::IDeselectHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IDeselectHandler*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static protected UnityEngine.UI.Selectable[] s_Selectables
    static ::Array<UnityEngine::UI::Selectable*>* _get_s_Selectables();
    // Set static field: static protected UnityEngine.UI.Selectable[] s_Selectables
    static void _set_s_Selectables(::Array<UnityEngine::UI::Selectable*>* value);
    // Get static field: static protected System.Int32 s_SelectableCount
    static int _get_s_SelectableCount();
    // Set static field: static protected System.Int32 s_SelectableCount
    static void _set_s_SelectableCount(int value);
    // static public UnityEngine.UI.Selectable[] get_allSelectablesArray()
    // Offset: 0x183FF84
    static ::Array<UnityEngine::UI::Selectable*>* get_allSelectablesArray();
    // static public System.Int32 get_allSelectableCount()
    // Offset: 0x1840024
    static int get_allSelectableCount();
    // static public System.Collections.Generic.List`1<UnityEngine.UI.Selectable> get_allSelectables()
    // Offset: 0x184008C
    static System::Collections::Generic::List_1<UnityEngine::UI::Selectable*>* get_allSelectables();
    // static public System.Int32 AllSelectablesNoAlloc(UnityEngine.UI.Selectable[] selectables)
    // Offset: 0x1840120
    static int AllSelectablesNoAlloc(::Array<UnityEngine::UI::Selectable*>* selectables);
    // public UnityEngine.UI.Navigation get_navigation()
    // Offset: 0x1840204
    UnityEngine::UI::Navigation get_navigation();
    // public System.Void set_navigation(UnityEngine.UI.Navigation value)
    // Offset: 0x1840218
    void set_navigation(UnityEngine::UI::Navigation value);
    // public UnityEngine.UI.Selectable/Transition get_transition()
    // Offset: 0x184031C
    UnityEngine::UI::Selectable::Transition get_transition();
    // public System.Void set_transition(UnityEngine.UI.Selectable/Transition value)
    // Offset: 0x1840324
    void set_transition(UnityEngine::UI::Selectable::Transition value);
    // public UnityEngine.UI.ColorBlock get_colors()
    // Offset: 0x18403A0
    UnityEngine::UI::ColorBlock get_colors();
    // public System.Void set_colors(UnityEngine.UI.ColorBlock value)
    // Offset: 0x18403B0
    void set_colors(UnityEngine::UI::ColorBlock value);
    // public UnityEngine.UI.SpriteState get_spriteState()
    // Offset: 0x1840450
    UnityEngine::UI::SpriteState get_spriteState();
    // public System.Void set_spriteState(UnityEngine.UI.SpriteState value)
    // Offset: 0x1840460
    void set_spriteState(UnityEngine::UI::SpriteState value);
    // public UnityEngine.UI.AnimationTriggers get_animationTriggers()
    // Offset: 0x18404E8
    UnityEngine::UI::AnimationTriggers* get_animationTriggers();
    // public System.Void set_animationTriggers(UnityEngine.UI.AnimationTriggers value)
    // Offset: 0x18404F0
    void set_animationTriggers(UnityEngine::UI::AnimationTriggers* value);
    // public UnityEngine.UI.Graphic get_targetGraphic()
    // Offset: 0x184056C
    UnityEngine::UI::Graphic* get_targetGraphic();
    // public System.Void set_targetGraphic(UnityEngine.UI.Graphic value)
    // Offset: 0x1840574
    void set_targetGraphic(UnityEngine::UI::Graphic* value);
    // public System.Boolean get_interactable()
    // Offset: 0x18405F0
    bool get_interactable();
    // public System.Void set_interactable(System.Boolean value)
    // Offset: 0x18405F8
    void set_interactable(bool value);
    // private System.Boolean get_isPointerInside()
    // Offset: 0x1840780
    bool get_isPointerInside();
    // private System.Void set_isPointerInside(System.Boolean value)
    // Offset: 0x1840788
    void set_isPointerInside(bool value);
    // private System.Boolean get_isPointerDown()
    // Offset: 0x1840794
    bool get_isPointerDown();
    // private System.Void set_isPointerDown(System.Boolean value)
    // Offset: 0x184079C
    void set_isPointerDown(bool value);
    // private System.Boolean get_hasSelection()
    // Offset: 0x18407A8
    bool get_hasSelection();
    // private System.Void set_hasSelection(System.Boolean value)
    // Offset: 0x18407B0
    void set_hasSelection(bool value);
    // public UnityEngine.UI.Image get_image()
    // Offset: 0x18407BC
    UnityEngine::UI::Image* get_image();
    // public System.Void set_image(UnityEngine.UI.Image value)
    // Offset: 0x1840840
    void set_image(UnityEngine::UI::Image* value);
    // public UnityEngine.Animator get_animator()
    // Offset: 0x1840848
    UnityEngine::Animator* get_animator();
    // public System.Boolean IsInteractable()
    // Offset: 0x1840ADC
    bool IsInteractable_NEW();
    // private System.Void OnSetProperty()
    // Offset: 0x18402AC
    void OnSetProperty();
    // protected UnityEngine.UI.Selectable/SelectionState get_currentSelectionState()
    // Offset: 0x1840B00
    UnityEngine::UI::Selectable::SelectionState get_currentSelectionState();
    // protected System.Void InstantClearState()
    // Offset: 0x1840B90
    void InstantClearState_NEW();
    // protected System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0x1840F74
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public UnityEngine.UI.Selectable FindSelectable(UnityEngine.Vector3 dir)
    // Offset: 0x1841118
    UnityEngine::UI::Selectable* FindSelectable(UnityEngine::Vector3 dir);
    // static private UnityEngine.Vector3 GetPointOnRectEdge(UnityEngine.RectTransform rect, UnityEngine.Vector2 dir)
    // Offset: 0x184159C
    static UnityEngine::Vector3 GetPointOnRectEdge(UnityEngine::RectTransform* rect, UnityEngine::Vector2 dir);
    // private System.Void Navigate(UnityEngine.EventSystems.AxisEventData eventData, UnityEngine.UI.Selectable sel)
    // Offset: 0x18417D0
    void Navigate(UnityEngine::EventSystems::AxisEventData* eventData, UnityEngine::UI::Selectable* sel);
    // public UnityEngine.UI.Selectable FindSelectableOnLeft()
    // Offset: 0x183F64C
    UnityEngine::UI::Selectable* FindSelectableOnLeft_NEW();
    // public UnityEngine.UI.Selectable FindSelectableOnRight()
    // Offset: 0x183F7B0
    UnityEngine::UI::Selectable* FindSelectableOnRight_NEW();
    // public UnityEngine.UI.Selectable FindSelectableOnUp()
    // Offset: 0x183F914
    UnityEngine::UI::Selectable* FindSelectableOnUp_NEW();
    // public UnityEngine.UI.Selectable FindSelectableOnDown()
    // Offset: 0x183FA78
    UnityEngine::UI::Selectable* FindSelectableOnDown_NEW();
    // public System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    // Offset: 0x183F590
    void OnMove_NEW(UnityEngine::EventSystems::AxisEventData* eventData);
    // private System.Void StartColorTween(UnityEngine.Color targetColor, System.Boolean instant)
    // Offset: 0x1840C20
    void StartColorTween(UnityEngine::Color targetColor, bool instant);
    // private System.Void DoSpriteSwap(UnityEngine.Sprite newSprite)
    // Offset: 0x1840D18
    void DoSpriteSwap(UnityEngine::Sprite* newSprite);
    // private System.Void TriggerAnimation(System.String triggername)
    // Offset: 0x1840DD0
    void TriggerAnimation(::Il2CppString* triggername);
    // protected System.Boolean IsHighlighted()
    // Offset: 0x1841898
    bool IsHighlighted();
    // protected System.Boolean IsPressed()
    // Offset: 0x1841900
    bool IsPressed();
    // private System.Void EvaluateAndTransitionToSelectionState()
    // Offset: 0x1841958
    void EvaluateAndTransitionToSelectionState();
    // public System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x183F064
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x183F2D8
    void OnPointerUp_NEW(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1841A00
    void OnPointerEnter_NEW(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1841A0C
    void OnPointerExit_NEW(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x1841A14
    void OnSelect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x1841A20
    void OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void Select()
    // Offset: 0x1841A28
    void Select_NEW();
    // protected System.Void .ctor()
    // Offset: 0x183E0B8
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Selectable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::Selectable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Selectable*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x1840898
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake_NEW()
    void Awake();
    // protected override System.Void OnCanvasGroupChanged()
    // Offset: 0x1840928
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnCanvasGroupChanged_NEW()
    void OnCanvasGroupChanged();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x1840AFC
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDidApplyAnimationProperties_NEW()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnEnable()
    // Offset: 0x183E4A4
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable_NEW()
    void OnEnable();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x1840B5C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnTransformParentChanged_NEW()
    void OnTransformParentChanged();
    // protected override System.Void OnDisable()
    // Offset: 0x183E6D0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable_NEW()
    void OnDisable();
    // static private System.Void .cctor()
    // Offset: 0x1841B54
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.UI.Selectable
  #pragma pack(pop)
  static check_size<sizeof(Selectable), 240 + sizeof(System::Collections::Generic::List_1<UnityEngine::CanvasGroup*>*)> __UnityEngine_UI_SelectableSizeCheck;
  static_assert(sizeof(Selectable) == 0xF8);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Selectable*, "UnityEngine.UI", "Selectable");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Selectable::Transition, "UnityEngine.UI", "Selectable/Transition");
