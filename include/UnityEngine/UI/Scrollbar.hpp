// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IInitializePotentialDragHandler
#include "UnityEngine/EventSystems/IInitializePotentialDragHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.DrivenRectTransformTracker
#include "UnityEngine/DrivenRectTransformTracker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Skipping declaration: Direction because it is already included!
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: AxisEventData
  class AxisEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x13A
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Scrollbar
  // [AddComponentMenu] Offset: DC5724
  // [ExecuteAlways] Offset: DC5724
  // [RequireComponent] Offset: DC5724
  class Scrollbar : public UnityEngine::UI::Selectable/*, public UnityEngine::EventSystems::IBeginDragHandler, public UnityEngine::EventSystems::IDragHandler, public UnityEngine::EventSystems::IInitializePotentialDragHandler, public UnityEngine::UI::ICanvasElement*/ {
    public:
    // Nested type: UnityEngine::UI::Scrollbar::Direction
    struct Direction;
    // Nested type: UnityEngine::UI::Scrollbar::ScrollEvent
    class ScrollEvent;
    // Nested type: UnityEngine::UI::Scrollbar::Axis
    struct Axis;
    // Nested type: UnityEngine::UI::Scrollbar::$ClickRepeat$d__58
    class $ClickRepeat$d__58;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Scrollbar/Direction
    struct Direction/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Direction
      constexpr Direction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction LeftToRight
      static constexpr const int LeftToRight = 0;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction LeftToRight
      static UnityEngine::UI::Scrollbar::Direction _get_LeftToRight();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction LeftToRight
      static void _set_LeftToRight(UnityEngine::UI::Scrollbar::Direction value);
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction RightToLeft
      static constexpr const int RightToLeft = 1;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction RightToLeft
      static UnityEngine::UI::Scrollbar::Direction _get_RightToLeft();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction RightToLeft
      static void _set_RightToLeft(UnityEngine::UI::Scrollbar::Direction value);
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction BottomToTop
      static constexpr const int BottomToTop = 2;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction BottomToTop
      static UnityEngine::UI::Scrollbar::Direction _get_BottomToTop();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction BottomToTop
      static void _set_BottomToTop(UnityEngine::UI::Scrollbar::Direction value);
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction TopToBottom
      static constexpr const int TopToBottom = 3;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction TopToBottom
      static UnityEngine::UI::Scrollbar::Direction _get_TopToBottom();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction TopToBottom
      static void _set_TopToBottom(UnityEngine::UI::Scrollbar::Direction value);
    }; // UnityEngine.UI.Scrollbar/Direction
    #pragma pack(pop)
    static check_size<sizeof(Scrollbar::Direction), 0 + sizeof(int)> __UnityEngine_UI_Scrollbar_DirectionSizeCheck;
    static_assert(sizeof(Scrollbar::Direction) == 0x4);
    // private UnityEngine.RectTransform m_HandleRect
    // Size: 0x8
    // Offset: 0xF8
    UnityEngine::RectTransform* m_HandleRect;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.UI.Scrollbar/Direction m_Direction
    // Size: 0x4
    // Offset: 0x100
    UnityEngine::UI::Scrollbar::Direction m_Direction;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Scrollbar::Direction) == 0x4);
    // [RangeAttribute] Offset: 0xDC74A4
    // private System.Single m_Value
    // Size: 0x4
    // Offset: 0x104
    float m_Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xDC74E4
    // private System.Single m_Size
    // Size: 0x4
    // Offset: 0x108
    float m_Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xDC7524
    // private System.Int32 m_NumberOfSteps
    // Size: 0x4
    // Offset: 0x10C
    int m_NumberOfSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [SpaceAttribute] Offset: 0xDC7564
    // private UnityEngine.UI.Scrollbar/ScrollEvent m_OnValueChanged
    // Size: 0x8
    // Offset: 0x110
    UnityEngine::UI::Scrollbar::ScrollEvent* m_OnValueChanged;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Scrollbar::ScrollEvent*) == 0x8);
    // private UnityEngine.RectTransform m_ContainerRect
    // Size: 0x8
    // Offset: 0x118
    UnityEngine::RectTransform* m_ContainerRect;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Vector2 m_Offset
    // Size: 0x8
    // Offset: 0x120
    UnityEngine::Vector2 m_Offset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.DrivenRectTransformTracker m_Tracker
    // Size: 0x1
    // Offset: 0x128
    UnityEngine::DrivenRectTransformTracker m_Tracker;
    // Field size check
    static_assert(sizeof(UnityEngine::DrivenRectTransformTracker) == 0x1);
    // Padding between fields: m_Tracker and: m_PointerDownRepeat
    char __padding8[0x7] = {};
    // private UnityEngine.Coroutine m_PointerDownRepeat
    // Size: 0x8
    // Offset: 0x130
    UnityEngine::Coroutine* m_PointerDownRepeat;
    // Field size check
    static_assert(sizeof(UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean isPointerDownAndNotDragging
    // Size: 0x1
    // Offset: 0x138
    bool isPointerDownAndNotDragging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DelayedUpdateVisuals
    // Size: 0x1
    // Offset: 0x139
    bool m_DelayedUpdateVisuals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Scrollbar
    Scrollbar(UnityEngine::RectTransform* m_HandleRect_ = {}, UnityEngine::UI::Scrollbar::Direction m_Direction_ = {}, float m_Value_ = {}, float m_Size_ = {}, int m_NumberOfSteps_ = {}, UnityEngine::UI::Scrollbar::ScrollEvent* m_OnValueChanged_ = {}, UnityEngine::RectTransform* m_ContainerRect_ = {}, UnityEngine::Vector2 m_Offset_ = {}, UnityEngine::DrivenRectTransformTracker m_Tracker_ = {}, UnityEngine::Coroutine* m_PointerDownRepeat_ = {}, bool isPointerDownAndNotDragging_ = {}, bool m_DelayedUpdateVisuals_ = {}) noexcept : m_HandleRect{m_HandleRect_}, m_Direction{m_Direction_}, m_Value{m_Value_}, m_Size{m_Size_}, m_NumberOfSteps{m_NumberOfSteps_}, m_OnValueChanged{m_OnValueChanged_}, m_ContainerRect{m_ContainerRect_}, m_Offset{m_Offset_}, m_Tracker{m_Tracker_}, m_PointerDownRepeat{m_PointerDownRepeat_}, isPointerDownAndNotDragging{isPointerDownAndNotDragging_}, m_DelayedUpdateVisuals{m_DelayedUpdateVisuals_} {}
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IBeginDragHandler
    operator UnityEngine::EventSystems::IBeginDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IDragHandler
    operator UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IInitializePotentialDragHandler
    operator UnityEngine::EventSystems::IInitializePotentialDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IInitializePotentialDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // public UnityEngine.RectTransform get_handleRect()
    // Offset: 0x19B7C50
    UnityEngine::RectTransform* get_handleRect();
    // public System.Void set_handleRect(UnityEngine.RectTransform value)
    // Offset: 0x19B7C58
    void set_handleRect(UnityEngine::RectTransform* value);
    // public UnityEngine.UI.Scrollbar/Direction get_direction()
    // Offset: 0x19B7FAC
    UnityEngine::UI::Scrollbar::Direction get_direction();
    // public System.Void set_direction(UnityEngine.UI.Scrollbar/Direction value)
    // Offset: 0x19B7FB4
    void set_direction(UnityEngine::UI::Scrollbar::Direction value);
    // public System.Single get_value()
    // Offset: 0x19B8228
    float get_value();
    // public System.Void set_value(System.Single value)
    // Offset: 0x19B659C
    void set_value(float value);
    // public System.Void SetValueWithoutNotify(System.Single input)
    // Offset: 0x19B8400
    void SetValueWithoutNotify(float input);
    // public System.Single get_size()
    // Offset: 0x19B8408
    float get_size();
    // public System.Void set_size(System.Single value)
    // Offset: 0x19B63A4
    void set_size(float value);
    // public System.Int32 get_numberOfSteps()
    // Offset: 0x19B8410
    int get_numberOfSteps();
    // public System.Void set_numberOfSteps(System.Int32 value)
    // Offset: 0x19B8418
    void set_numberOfSteps(int value);
    // public UnityEngine.UI.Scrollbar/ScrollEvent get_onValueChanged()
    // Offset: 0x19B84A4
    UnityEngine::UI::Scrollbar::ScrollEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(UnityEngine.UI.Scrollbar/ScrollEvent value)
    // Offset: 0x19B84AC
    void set_onValueChanged(UnityEngine::UI::Scrollbar::ScrollEvent* value);
    // private System.Single get_stepSize()
    // Offset: 0x19B84B4
    float get_stepSize();
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)
    // Offset: 0x19B84E0
    void Rebuild(UnityEngine::UI::CanvasUpdate executing);
    // public System.Void LayoutComplete()
    // Offset: 0x19B84E4
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x19B84E8
    void GraphicUpdateComplete();
    // protected System.Void Update()
    // Offset: 0x19B88CC
    void Update();
    // private System.Void UpdateCachedReferences()
    // Offset: 0x19B7CDC
    void UpdateCachedReferences();
    // private System.Void Set(System.Single input, System.Boolean sendCallback)
    // Offset: 0x19B8334
    void Set(float input, bool sendCallback);
    // private UnityEngine.UI.Scrollbar/Axis get_axis()
    // Offset: 0x19B8928
    UnityEngine::UI::Scrollbar::Axis get_axis();
    // private System.Boolean get_reverseValue()
    // Offset: 0x19B8938
    bool get_reverseValue();
    // private System.Void UpdateVisuals()
    // Offset: 0x19B7DD0
    void UpdateVisuals();
    // private System.Void UpdateDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B894C
    void UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void DoUpdateDrag(UnityEngine.Vector2 handleCorner, System.Single remainingSize)
    // Offset: 0x19B8C00
    void DoUpdateDrag(UnityEngine::Vector2 handleCorner, float remainingSize);
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B8D44
    bool MayDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B8DAC
    void OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B8FB8
    void OnDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected System.Collections.IEnumerator ClickRepeat(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B92C0
    System::Collections::IEnumerator* ClickRepeat(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected System.Collections.IEnumerator ClickRepeat(UnityEngine.Vector2 screenPosition, UnityEngine.Camera camera)
    // Offset: 0x19B922C
    System::Collections::IEnumerator* ClickRepeat(UnityEngine::Vector2 screenPosition, UnityEngine::Camera* camera);
    // public System.Void OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B9C3C
    void OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void SetDirection(UnityEngine.UI.Scrollbar/Direction direction, System.Boolean includeRectLayouts)
    // Offset: 0x19B9C54
    void SetDirection(UnityEngine::UI::Scrollbar::Direction direction, bool includeRectLayouts);
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x19B9DE8
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // protected System.Void .ctor()
    // Offset: 0x19B8030
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Scrollbar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::Scrollbar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Scrollbar*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x19B84EC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x19B8728
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x19B88E0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B9064
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x19B9338
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerUp(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    // Offset: 0x19B9380
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    void OnMove(UnityEngine::EventSystems::AxisEventData* eventData);
    // public override UnityEngine.UI.Selectable FindSelectableOnLeft()
    // Offset: 0x19B96AC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnLeft()
    UnityEngine::UI::Selectable* FindSelectableOnLeft();
    // public override UnityEngine.UI.Selectable FindSelectableOnRight()
    // Offset: 0x19B9810
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnRight()
    UnityEngine::UI::Selectable* FindSelectableOnRight();
    // public override UnityEngine.UI.Selectable FindSelectableOnUp()
    // Offset: 0x19B9974
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnUp()
    UnityEngine::UI::Selectable* FindSelectableOnUp();
    // public override UnityEngine.UI.Selectable FindSelectableOnDown()
    // Offset: 0x19B9AD8
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnDown()
    UnityEngine::UI::Selectable* FindSelectableOnDown();
  }; // UnityEngine.UI.Scrollbar
  #pragma pack(pop)
  static check_size<sizeof(Scrollbar), 313 + sizeof(bool)> __UnityEngine_UI_ScrollbarSizeCheck;
  static_assert(sizeof(Scrollbar) == 0x13A);
  // Writing MetadataGetter for method: Scrollbar::get_handleRect
  // Il2CppName: get_handleRect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (Scrollbar::*)()>(&Scrollbar::get_handleRect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_handleRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::set_handleRect
  // Il2CppName: set_handleRect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::RectTransform*)>(&Scrollbar::set_handleRect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "set_handleRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RectTransform*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_direction
  // Il2CppName: get_direction
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Scrollbar::Direction (Scrollbar::*)()>(&Scrollbar::get_direction)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::set_direction
  // Il2CppName: set_direction
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::UI::Scrollbar::Direction)>(&Scrollbar::set_direction)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "set_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Scrollbar::Direction>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_value
  // Il2CppName: get_value
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Scrollbar::*)()>(&Scrollbar::get_value)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::set_value
  // Il2CppName: set_value
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(float)>(&Scrollbar::set_value)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::SetValueWithoutNotify
  // Il2CppName: SetValueWithoutNotify
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(float)>(&Scrollbar::SetValueWithoutNotify)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "SetValueWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_size
  // Il2CppName: get_size
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Scrollbar::*)()>(&Scrollbar::get_size)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::set_size
  // Il2CppName: set_size
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(float)>(&Scrollbar::set_size)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "set_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_numberOfSteps
  // Il2CppName: get_numberOfSteps
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Scrollbar::*)()>(&Scrollbar::get_numberOfSteps)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_numberOfSteps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::set_numberOfSteps
  // Il2CppName: set_numberOfSteps
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(int)>(&Scrollbar::set_numberOfSteps)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "set_numberOfSteps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_onValueChanged
  // Il2CppName: get_onValueChanged
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Scrollbar::ScrollEvent* (Scrollbar::*)()>(&Scrollbar::get_onValueChanged)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::set_onValueChanged
  // Il2CppName: set_onValueChanged
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::UI::Scrollbar::ScrollEvent*)>(&Scrollbar::set_onValueChanged)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "set_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Scrollbar::ScrollEvent*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_stepSize
  // Il2CppName: get_stepSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Scrollbar::*)()>(&Scrollbar::get_stepSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_stepSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::Rebuild
  // Il2CppName: Rebuild
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::UI::CanvasUpdate)>(&Scrollbar::Rebuild)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::LayoutComplete
  // Il2CppName: LayoutComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::LayoutComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::GraphicUpdateComplete
  // Il2CppName: GraphicUpdateComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::GraphicUpdateComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::Update
  // Il2CppName: Update
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::Update)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::UpdateCachedReferences
  // Il2CppName: UpdateCachedReferences
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::UpdateCachedReferences)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "UpdateCachedReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::Set
  // Il2CppName: Set
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(float, bool)>(&Scrollbar::Set)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_axis
  // Il2CppName: get_axis
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Scrollbar::Axis (Scrollbar::*)()>(&Scrollbar::get_axis)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_axis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::get_reverseValue
  // Il2CppName: get_reverseValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Scrollbar::*)()>(&Scrollbar::get_reverseValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "get_reverseValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::UpdateVisuals
  // Il2CppName: UpdateVisuals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::UpdateVisuals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::UpdateDrag
  // Il2CppName: UpdateDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::UpdateDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "UpdateDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::DoUpdateDrag
  // Il2CppName: DoUpdateDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::Vector2, float)>(&Scrollbar::DoUpdateDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "DoUpdateDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::MayDrag
  // Il2CppName: MayDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::MayDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "MayDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnBeginDrag
  // Il2CppName: OnBeginDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::OnBeginDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnBeginDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnDrag
  // Il2CppName: OnDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::OnDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::ClickRepeat
  // Il2CppName: ClickRepeat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::ClickRepeat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "ClickRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::ClickRepeat
  // Il2CppName: ClickRepeat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (Scrollbar::*)(UnityEngine::Vector2, UnityEngine::Camera*)>(&Scrollbar::ClickRepeat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "ClickRepeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnInitializePotentialDrag
  // Il2CppName: OnInitializePotentialDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::OnInitializePotentialDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnInitializePotentialDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::SetDirection
  // Il2CppName: SetDirection
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::UI::Scrollbar::Direction, bool)>(&Scrollbar::SetDirection)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "SetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Scrollbar::Direction>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::UnityEngine_UI_ICanvasElement_get_transform
  // Il2CppName: UnityEngine.UI.ICanvasElement.get_transform
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Scrollbar::*)()>(&Scrollbar::UnityEngine_UI_ICanvasElement_get_transform)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnEnable
  // Il2CppName: OnEnable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::OnEnable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnDisable
  // Il2CppName: OnDisable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::OnDisable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnRectTransformDimensionsChange
  // Il2CppName: OnRectTransformDimensionsChange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)()>(&Scrollbar::OnRectTransformDimensionsChange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnPointerDown
  // Il2CppName: OnPointerDown
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::OnPointerDown)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnPointerUp
  // Il2CppName: OnPointerUp
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::PointerEventData*)>(&Scrollbar::OnPointerUp)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::OnMove
  // Il2CppName: OnMove
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Scrollbar::*)(UnityEngine::EventSystems::AxisEventData*)>(&Scrollbar::OnMove)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "OnMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::AxisEventData*>()});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::FindSelectableOnLeft
  // Il2CppName: FindSelectableOnLeft
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Selectable* (Scrollbar::*)()>(&Scrollbar::FindSelectableOnLeft)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "FindSelectableOnLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::FindSelectableOnRight
  // Il2CppName: FindSelectableOnRight
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Selectable* (Scrollbar::*)()>(&Scrollbar::FindSelectableOnRight)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "FindSelectableOnRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::FindSelectableOnUp
  // Il2CppName: FindSelectableOnUp
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Selectable* (Scrollbar::*)()>(&Scrollbar::FindSelectableOnUp)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "FindSelectableOnUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Scrollbar::FindSelectableOnDown
  // Il2CppName: FindSelectableOnDown
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Selectable* (Scrollbar::*)()>(&Scrollbar::FindSelectableOnDown)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Scrollbar*), "FindSelectableOnDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Scrollbar*, "UnityEngine.UI", "Scrollbar");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Scrollbar::Direction, "UnityEngine.UI", "Scrollbar/Direction");
