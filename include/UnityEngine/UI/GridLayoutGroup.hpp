// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.LayoutGroup
#include "UnityEngine/UI/LayoutGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Skipping declaration: Corner because it is already included!
  // Skipping declaration: Axis because it is already included!
  // Skipping declaration: Constraint because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.GridLayoutGroup
  // [AddComponentMenu] Offset: DC52F0
  class GridLayoutGroup : public UnityEngine::UI::LayoutGroup {
    public:
    // Nested type: UnityEngine::UI::GridLayoutGroup::Corner
    struct Corner;
    // Nested type: UnityEngine::UI::GridLayoutGroup::Axis
    struct Axis;
    // Nested type: UnityEngine::UI::GridLayoutGroup::Constraint
    struct Constraint;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.GridLayoutGroup/Corner
    struct Corner/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Corner
      constexpr Corner(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Corner UpperLeft
      static constexpr const int UpperLeft = 0;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Corner UpperLeft
      static UnityEngine::UI::GridLayoutGroup::Corner _get_UpperLeft();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Corner UpperLeft
      static void _set_UpperLeft(UnityEngine::UI::GridLayoutGroup::Corner value);
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Corner UpperRight
      static constexpr const int UpperRight = 1;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Corner UpperRight
      static UnityEngine::UI::GridLayoutGroup::Corner _get_UpperRight();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Corner UpperRight
      static void _set_UpperRight(UnityEngine::UI::GridLayoutGroup::Corner value);
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Corner LowerLeft
      static constexpr const int LowerLeft = 2;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Corner LowerLeft
      static UnityEngine::UI::GridLayoutGroup::Corner _get_LowerLeft();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Corner LowerLeft
      static void _set_LowerLeft(UnityEngine::UI::GridLayoutGroup::Corner value);
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Corner LowerRight
      static constexpr const int LowerRight = 3;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Corner LowerRight
      static UnityEngine::UI::GridLayoutGroup::Corner _get_LowerRight();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Corner LowerRight
      static void _set_LowerRight(UnityEngine::UI::GridLayoutGroup::Corner value);
    }; // UnityEngine.UI.GridLayoutGroup/Corner
    #pragma pack(pop)
    static check_size<sizeof(GridLayoutGroup::Corner), 0 + sizeof(int)> __UnityEngine_UI_GridLayoutGroup_CornerSizeCheck;
    static_assert(sizeof(GridLayoutGroup::Corner) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.GridLayoutGroup/Axis
    struct Axis/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Axis
      constexpr Axis(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Axis Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Axis Horizontal
      static UnityEngine::UI::GridLayoutGroup::Axis _get_Horizontal();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Axis Horizontal
      static void _set_Horizontal(UnityEngine::UI::GridLayoutGroup::Axis value);
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Axis Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Axis Vertical
      static UnityEngine::UI::GridLayoutGroup::Axis _get_Vertical();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Axis Vertical
      static void _set_Vertical(UnityEngine::UI::GridLayoutGroup::Axis value);
    }; // UnityEngine.UI.GridLayoutGroup/Axis
    #pragma pack(pop)
    static check_size<sizeof(GridLayoutGroup::Axis), 0 + sizeof(int)> __UnityEngine_UI_GridLayoutGroup_AxisSizeCheck;
    static_assert(sizeof(GridLayoutGroup::Axis) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.GridLayoutGroup/Constraint
    struct Constraint/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Constraint
      constexpr Constraint(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Constraint Flexible
      static constexpr const int Flexible = 0;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Constraint Flexible
      static UnityEngine::UI::GridLayoutGroup::Constraint _get_Flexible();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Constraint Flexible
      static void _set_Flexible(UnityEngine::UI::GridLayoutGroup::Constraint value);
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Constraint FixedColumnCount
      static constexpr const int FixedColumnCount = 1;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Constraint FixedColumnCount
      static UnityEngine::UI::GridLayoutGroup::Constraint _get_FixedColumnCount();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Constraint FixedColumnCount
      static void _set_FixedColumnCount(UnityEngine::UI::GridLayoutGroup::Constraint value);
      // static field const value: static public UnityEngine.UI.GridLayoutGroup/Constraint FixedRowCount
      static constexpr const int FixedRowCount = 2;
      // Get static field: static public UnityEngine.UI.GridLayoutGroup/Constraint FixedRowCount
      static UnityEngine::UI::GridLayoutGroup::Constraint _get_FixedRowCount();
      // Set static field: static public UnityEngine.UI.GridLayoutGroup/Constraint FixedRowCount
      static void _set_FixedRowCount(UnityEngine::UI::GridLayoutGroup::Constraint value);
    }; // UnityEngine.UI.GridLayoutGroup/Constraint
    #pragma pack(pop)
    static check_size<sizeof(GridLayoutGroup::Constraint), 0 + sizeof(int)> __UnityEngine_UI_GridLayoutGroup_ConstraintSizeCheck;
    static_assert(sizeof(GridLayoutGroup::Constraint) == 0x4);
    // protected UnityEngine.UI.GridLayoutGroup/Corner m_StartCorner
    // Size: 0x4
    // Offset: 0x58
    UnityEngine::UI::GridLayoutGroup::Corner m_StartCorner;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::GridLayoutGroup::Corner) == 0x4);
    // protected UnityEngine.UI.GridLayoutGroup/Axis m_StartAxis
    // Size: 0x4
    // Offset: 0x5C
    UnityEngine::UI::GridLayoutGroup::Axis m_StartAxis;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::GridLayoutGroup::Axis) == 0x4);
    // protected UnityEngine.Vector2 m_CellSize
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Vector2 m_CellSize;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // protected UnityEngine.Vector2 m_Spacing
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Vector2 m_Spacing;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // protected UnityEngine.UI.GridLayoutGroup/Constraint m_Constraint
    // Size: 0x4
    // Offset: 0x70
    UnityEngine::UI::GridLayoutGroup::Constraint m_Constraint;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::GridLayoutGroup::Constraint) == 0x4);
    // protected System.Int32 m_ConstraintCount
    // Size: 0x4
    // Offset: 0x74
    int m_ConstraintCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: GridLayoutGroup
    GridLayoutGroup(UnityEngine::UI::GridLayoutGroup::Corner m_StartCorner_ = {}, UnityEngine::UI::GridLayoutGroup::Axis m_StartAxis_ = {}, UnityEngine::Vector2 m_CellSize_ = {}, UnityEngine::Vector2 m_Spacing_ = {}, UnityEngine::UI::GridLayoutGroup::Constraint m_Constraint_ = {}, int m_ConstraintCount_ = {}) noexcept : m_StartCorner{m_StartCorner_}, m_StartAxis{m_StartAxis_}, m_CellSize{m_CellSize_}, m_Spacing{m_Spacing_}, m_Constraint{m_Constraint_}, m_ConstraintCount{m_ConstraintCount_} {}
    // public UnityEngine.UI.GridLayoutGroup/Corner get_startCorner()
    // Offset: 0x1918024
    UnityEngine::UI::GridLayoutGroup::Corner get_startCorner();
    // public System.Void set_startCorner(UnityEngine.UI.GridLayoutGroup/Corner value)
    // Offset: 0x191802C
    void set_startCorner(UnityEngine::UI::GridLayoutGroup::Corner value);
    // public UnityEngine.UI.GridLayoutGroup/Axis get_startAxis()
    // Offset: 0x1918090
    UnityEngine::UI::GridLayoutGroup::Axis get_startAxis();
    // public System.Void set_startAxis(UnityEngine.UI.GridLayoutGroup/Axis value)
    // Offset: 0x1918098
    void set_startAxis(UnityEngine::UI::GridLayoutGroup::Axis value);
    // public UnityEngine.Vector2 get_cellSize()
    // Offset: 0x19180FC
    UnityEngine::Vector2 get_cellSize();
    // public System.Void set_cellSize(UnityEngine.Vector2 value)
    // Offset: 0x1918104
    void set_cellSize(UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_spacing()
    // Offset: 0x1918170
    UnityEngine::Vector2 get_spacing();
    // public System.Void set_spacing(UnityEngine.Vector2 value)
    // Offset: 0x1918178
    void set_spacing(UnityEngine::Vector2 value);
    // public UnityEngine.UI.GridLayoutGroup/Constraint get_constraint()
    // Offset: 0x19181E4
    UnityEngine::UI::GridLayoutGroup::Constraint get_constraint();
    // public System.Void set_constraint(UnityEngine.UI.GridLayoutGroup/Constraint value)
    // Offset: 0x19181EC
    void set_constraint(UnityEngine::UI::GridLayoutGroup::Constraint value);
    // public System.Int32 get_constraintCount()
    // Offset: 0x1918250
    int get_constraintCount();
    // public System.Void set_constraintCount(System.Int32 value)
    // Offset: 0x1918258
    void set_constraintCount(int value);
    // private System.Void SetCellsAlongAxis(System.Int32 axis)
    // Offset: 0x1918724
    void SetCellsAlongAxis(int axis);
    // protected System.Void .ctor()
    // Offset: 0x19182F0
    // Implemented from: UnityEngine.UI.LayoutGroup
    // Base method: System.Void LayoutGroup::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GridLayoutGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::GridLayoutGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GridLayoutGroup*, creationType>()));
    }
    // public override System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x191839C
    // Implemented from: UnityEngine.UI.LayoutGroup
    // Base method: System.Void LayoutGroup::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public override System.Void CalculateLayoutInputVertical()
    // Offset: 0x1918538
    // Implemented from: UnityEngine.UI.LayoutGroup
    // Base method: System.Void LayoutGroup::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public override System.Void SetLayoutHorizontal()
    // Offset: 0x191871C
    // Implemented from: UnityEngine.UI.LayoutGroup
    // Base method: System.Void LayoutGroup::SetLayoutHorizontal()
    void SetLayoutHorizontal();
    // public override System.Void SetLayoutVertical()
    // Offset: 0x1918DB4
    // Implemented from: UnityEngine.UI.LayoutGroup
    // Base method: System.Void LayoutGroup::SetLayoutVertical()
    void SetLayoutVertical();
  }; // UnityEngine.UI.GridLayoutGroup
  #pragma pack(pop)
  static check_size<sizeof(GridLayoutGroup), 116 + sizeof(int)> __UnityEngine_UI_GridLayoutGroupSizeCheck;
  static_assert(sizeof(GridLayoutGroup) == 0x78);
  // Writing MetadataGetter for method: GridLayoutGroup::get_startCorner
  // Il2CppName: get_startCorner
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::GridLayoutGroup::Corner (GridLayoutGroup::*)()>(&GridLayoutGroup::get_startCorner)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "get_startCorner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::set_startCorner
  // Il2CppName: set_startCorner
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(UnityEngine::UI::GridLayoutGroup::Corner)>(&GridLayoutGroup::set_startCorner)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "set_startCorner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::GridLayoutGroup::Corner>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::get_startAxis
  // Il2CppName: get_startAxis
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::GridLayoutGroup::Axis (GridLayoutGroup::*)()>(&GridLayoutGroup::get_startAxis)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "get_startAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::set_startAxis
  // Il2CppName: set_startAxis
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(UnityEngine::UI::GridLayoutGroup::Axis)>(&GridLayoutGroup::set_startAxis)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "set_startAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::GridLayoutGroup::Axis>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::get_cellSize
  // Il2CppName: get_cellSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (GridLayoutGroup::*)()>(&GridLayoutGroup::get_cellSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "get_cellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::set_cellSize
  // Il2CppName: set_cellSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(UnityEngine::Vector2)>(&GridLayoutGroup::set_cellSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "set_cellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::get_spacing
  // Il2CppName: get_spacing
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (GridLayoutGroup::*)()>(&GridLayoutGroup::get_spacing)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "get_spacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::set_spacing
  // Il2CppName: set_spacing
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(UnityEngine::Vector2)>(&GridLayoutGroup::set_spacing)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "set_spacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::get_constraint
  // Il2CppName: get_constraint
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::GridLayoutGroup::Constraint (GridLayoutGroup::*)()>(&GridLayoutGroup::get_constraint)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "get_constraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::set_constraint
  // Il2CppName: set_constraint
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(UnityEngine::UI::GridLayoutGroup::Constraint)>(&GridLayoutGroup::set_constraint)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "set_constraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::GridLayoutGroup::Constraint>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::get_constraintCount
  // Il2CppName: get_constraintCount
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GridLayoutGroup::*)()>(&GridLayoutGroup::get_constraintCount)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "get_constraintCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::set_constraintCount
  // Il2CppName: set_constraintCount
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(int)>(&GridLayoutGroup::set_constraintCount)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "set_constraintCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::SetCellsAlongAxis
  // Il2CppName: SetCellsAlongAxis
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)(int)>(&GridLayoutGroup::SetCellsAlongAxis)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "SetCellsAlongAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)()>(&GridLayoutGroup::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)()>(&GridLayoutGroup::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::CalculateLayoutInputHorizontal
  // Il2CppName: CalculateLayoutInputHorizontal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)()>(&GridLayoutGroup::CalculateLayoutInputHorizontal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::CalculateLayoutInputVertical
  // Il2CppName: CalculateLayoutInputVertical
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)()>(&GridLayoutGroup::CalculateLayoutInputVertical)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::SetLayoutHorizontal
  // Il2CppName: SetLayoutHorizontal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)()>(&GridLayoutGroup::SetLayoutHorizontal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "SetLayoutHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: GridLayoutGroup::SetLayoutVertical
  // Il2CppName: SetLayoutVertical
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GridLayoutGroup::*)()>(&GridLayoutGroup::SetLayoutVertical)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(GridLayoutGroup*), "SetLayoutVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::GridLayoutGroup*, "UnityEngine.UI", "GridLayoutGroup");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::GridLayoutGroup::Corner, "UnityEngine.UI", "GridLayoutGroup/Corner");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::GridLayoutGroup::Axis, "UnityEngine.UI", "GridLayoutGroup/Axis");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::GridLayoutGroup::Constraint, "UnityEngine.UI", "GridLayoutGroup/Constraint");
