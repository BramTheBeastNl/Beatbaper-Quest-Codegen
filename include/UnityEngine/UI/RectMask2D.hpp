// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.UI.IClipper
#include "UnityEngine/UI/IClipper.hpp"
// Including type: UnityEngine.ICanvasRaycastFilter
#include "UnityEngine/ICanvasRaycastFilter.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: RectangularVertexClipper
  class RectangularVertexClipper;
  // Forward declaring type: MaskableGraphic
  class MaskableGraphic;
  // Forward declaring type: IClippable
  class IClippable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Canvas
  class Canvas;
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.RectMask2D
  // [] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: CD99C8
  // [ExecuteAlways] Offset: CD99C8
  // [DisallowMultipleComponent] Offset: CD99C8
  // [RequireComponent] Offset: CD99C8
  class RectMask2D : public UnityEngine::EventSystems::UIBehaviour/*, public UnityEngine::UI::IClipper, public UnityEngine::ICanvasRaycastFilter*/ {
    public:
    // private readonly UnityEngine.UI.RectangularVertexClipper m_VertexClipper
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::UI::RectangularVertexClipper* m_VertexClipper;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::RectangularVertexClipper*) == 0x8);
    // private UnityEngine.RectTransform m_RectTransform
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::RectTransform* m_RectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.UI.MaskableGraphic> m_MaskableTargets
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::HashSet_1<UnityEngine::UI::MaskableGraphic*>* m_MaskableTargets;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<UnityEngine::UI::MaskableGraphic*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.UI.IClippable> m_ClipTargets
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::HashSet_1<UnityEngine::UI::IClippable*>* m_ClipTargets;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<UnityEngine::UI::IClippable*>*) == 0x8);
    // private System.Boolean m_ShouldRecalculateClipRects
    // Size: 0x1
    // Offset: 0x38
    bool m_ShouldRecalculateClipRects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ShouldRecalculateClipRects and: m_Clippers
    char __padding4[0x7] = {};
    // private System.Collections.Generic.List`1<UnityEngine.UI.RectMask2D> m_Clippers
    // Size: 0x8
    // Offset: 0x40
    System::Collections::Generic::List_1<UnityEngine::UI::RectMask2D*>* m_Clippers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::UI::RectMask2D*>*) == 0x8);
    // private UnityEngine.Rect m_LastClipRectCanvasSpace
    // Size: 0x10
    // Offset: 0x48
    UnityEngine::Rect m_LastClipRectCanvasSpace;
    // Field size check
    static_assert(sizeof(UnityEngine::Rect) == 0x10);
    // private System.Boolean m_ForceClip
    // Size: 0x1
    // Offset: 0x58
    bool m_ForceClip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ForceClip and: m_Padding
    char __padding7[0x3] = {};
    // private UnityEngine.Vector4 m_Padding
    // Size: 0x10
    // Offset: 0x5C
    UnityEngine::Vector4 m_Padding;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector2Int m_Softness
    // Size: 0x8
    // Offset: 0x6C
    UnityEngine::Vector2Int m_Softness;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2Int) == 0x8);
    // Padding between fields: m_Softness and: m_Canvas
    char __padding9[0x4] = {};
    // private UnityEngine.Canvas m_Canvas
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::Canvas* m_Canvas;
    // Field size check
    static_assert(sizeof(UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.Vector3[] m_Corners
    // Size: 0x8
    // Offset: 0x80
    ::Array<UnityEngine::Vector3>* m_Corners;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // Creating value type constructor for type: RectMask2D
    RectMask2D(UnityEngine::UI::RectangularVertexClipper* m_VertexClipper_ = {}, UnityEngine::RectTransform* m_RectTransform_ = {}, System::Collections::Generic::HashSet_1<UnityEngine::UI::MaskableGraphic*>* m_MaskableTargets_ = {}, System::Collections::Generic::HashSet_1<UnityEngine::UI::IClippable*>* m_ClipTargets_ = {}, bool m_ShouldRecalculateClipRects_ = {}, System::Collections::Generic::List_1<UnityEngine::UI::RectMask2D*>* m_Clippers_ = {}, UnityEngine::Rect m_LastClipRectCanvasSpace_ = {}, bool m_ForceClip_ = {}, UnityEngine::Vector4 m_Padding_ = {}, UnityEngine::Vector2Int m_Softness_ = {}, UnityEngine::Canvas* m_Canvas_ = {}, ::Array<UnityEngine::Vector3>* m_Corners_ = {}) noexcept : m_VertexClipper{m_VertexClipper_}, m_RectTransform{m_RectTransform_}, m_MaskableTargets{m_MaskableTargets_}, m_ClipTargets{m_ClipTargets_}, m_ShouldRecalculateClipRects{m_ShouldRecalculateClipRects_}, m_Clippers{m_Clippers_}, m_LastClipRectCanvasSpace{m_LastClipRectCanvasSpace_}, m_ForceClip{m_ForceClip_}, m_Padding{m_Padding_}, m_Softness{m_Softness_}, m_Canvas{m_Canvas_}, m_Corners{m_Corners_} {}
    // Creating interface conversion operator: operator UnityEngine::UI::IClipper
    operator UnityEngine::UI::IClipper() noexcept {
      return *reinterpret_cast<UnityEngine::UI::IClipper*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::ICanvasRaycastFilter
    operator UnityEngine::ICanvasRaycastFilter() noexcept {
      return *reinterpret_cast<UnityEngine::ICanvasRaycastFilter*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public UnityEngine.Vector4 get_padding()
    // Offset: 0x183795C
    UnityEngine::Vector4 get_padding();
    // public System.Void set_padding(UnityEngine.Vector4 value)
    // Offset: 0x1837968
    void set_padding(UnityEngine::Vector4 value);
    // public UnityEngine.Vector2Int get_softness()
    // Offset: 0x1837974
    UnityEngine::Vector2Int get_softness();
    // public System.Void set_softness(UnityEngine.Vector2Int value)
    // Offset: 0x183797C
    void set_softness(UnityEngine::Vector2Int value);
    // private UnityEngine.Canvas get_Canvas()
    // Offset: 0x1837A54
    UnityEngine::Canvas* get_Canvas();
    // public UnityEngine.Rect get_canvasRect()
    // Offset: 0x1837B8C
    UnityEngine::Rect get_canvasRect();
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x1837BD8
    UnityEngine::RectTransform* get_rectTransform();
    // public System.Boolean IsRaycastLocationValid(UnityEngine.Vector2 sp, UnityEngine.Camera eventCamera)
    // Offset: 0x1838008
    bool IsRaycastLocationValid(UnityEngine::Vector2 sp, UnityEngine::Camera* eventCamera);
    // private UnityEngine.Rect get_rootCanvasRect()
    // Offset: 0x1838100
    UnityEngine::Rect get_rootCanvasRect();
    // public System.Void PerformClipping()
    // Offset: 0x1838234
    void PerformClipping();
    // public System.Void UpdateClipSoftness()
    // Offset: 0x1838974
    void UpdateClipSoftness();
    // public System.Void AddClippable(UnityEngine.UI.IClippable clippable)
    // Offset: 0x1836210
    void AddClippable(UnityEngine::UI::IClippable* clippable);
    // public System.Void RemoveClippable(UnityEngine.UI.IClippable clippable)
    // Offset: 0x1836088
    void RemoveClippable(UnityEngine::UI::IClippable* clippable);
    // protected System.Void .ctor()
    // Offset: 0x1837DC0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RectMask2D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::RectMask2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RectMask2D*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x1837F24
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1837F60
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable()
    void OnDisable();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x1838C28
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnTransformParentChanged()
    void OnTransformParentChanged();
    // protected override System.Void OnCanvasHierarchyChanged()
    // Offset: 0x1838C54
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnCanvasHierarchyChanged()
    void OnCanvasHierarchyChanged();
  }; // UnityEngine.UI.RectMask2D
  #pragma pack(pop)
  static check_size<sizeof(RectMask2D), 128 + sizeof(::Array<UnityEngine::Vector3>*)> __UnityEngine_UI_RectMask2DSizeCheck;
  static_assert(sizeof(RectMask2D) == 0x88);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::RectMask2D*, "UnityEngine.UI", "RectMask2D");
