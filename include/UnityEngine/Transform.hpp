// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Space
  struct Space;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Transform
  // [NativeHeaderAttribute] Offset: CAA338
  // [NativeHeaderAttribute] Offset: CAA338
  // [RequiredByNativeCodeAttribute] Offset: CAA338
  // [NativeHeaderAttribute] Offset: CAA338
  class Transform : public UnityEngine::Component/*, public System::Collections::IEnumerable*/ {
    public:
    // Nested type: UnityEngine::Transform::Enumerator
    class Enumerator;
    // Creating value type constructor for type: Transform
    Transform() noexcept {}
    // Creating interface conversion operator: operator System::Collections::IEnumerable
    operator System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerable*>(this);
    }
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x1987C08
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x1987CB8
    void set_position(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_localPosition()
    // Offset: 0x1987D60
    UnityEngine::Vector3 get_localPosition();
    // public System.Void set_localPosition(UnityEngine.Vector3 value)
    // Offset: 0x1987E10
    void set_localPosition(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_eulerAngles()
    // Offset: 0x1987EB8
    UnityEngine::Vector3 get_eulerAngles();
    // public System.Void set_eulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x1987F44
    void set_eulerAngles(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_localEulerAngles()
    // Offset: 0x1988030
    UnityEngine::Vector3 get_localEulerAngles();
    // public System.Void set_localEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x19880BC
    void set_localEulerAngles(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_right()
    // Offset: 0x19881A8
    UnityEngine::Vector3 get_right();
    // public UnityEngine.Vector3 get_up()
    // Offset: 0x19882FC
    UnityEngine::Vector3 get_up();
    // public UnityEngine.Vector3 get_forward()
    // Offset: 0x1988450
    UnityEngine::Vector3 get_forward();
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x1987EE8
    UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x1987FD8
    void set_rotation(UnityEngine::Quaternion value);
    // public UnityEngine.Quaternion get_localRotation()
    // Offset: 0x1988060
    UnityEngine::Quaternion get_localRotation();
    // public System.Void set_localRotation(UnityEngine.Quaternion value)
    // Offset: 0x1988150
    void set_localRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_localScale()
    // Offset: 0x19886E4
    UnityEngine::Vector3 get_localScale();
    // public System.Void set_localScale(UnityEngine.Vector3 value)
    // Offset: 0x1988794
    void set_localScale(UnityEngine::Vector3 value);
    // public UnityEngine.Transform get_parent()
    // Offset: 0x198883C
    UnityEngine::Transform* get_parent();
    // public System.Void set_parent(UnityEngine.Transform value)
    // Offset: 0x19888BC
    void set_parent(UnityEngine::Transform* value);
    // UnityEngine.Transform get_parentInternal()
    // Offset: 0x198887C
    UnityEngine::Transform* get_parentInternal();
    // System.Void set_parentInternal(UnityEngine.Transform value)
    // Offset: 0x1988988
    void set_parentInternal(UnityEngine::Transform* value);
    // private UnityEngine.Transform GetParent()
    // Offset: 0x19889DC
    UnityEngine::Transform* GetParent();
    // public System.Void SetParent(UnityEngine.Transform p)
    // Offset: 0x1988A1C
    void SetParent(UnityEngine::Transform* p);
    // public System.Void SetParent(UnityEngine.Transform parent, System.Boolean worldPositionStays)
    // Offset: 0x1988A70
    void SetParent(UnityEngine::Transform* parent, bool worldPositionStays);
    // public UnityEngine.Matrix4x4 get_worldToLocalMatrix()
    // Offset: 0x1988AC8
    UnityEngine::Matrix4x4 get_worldToLocalMatrix();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x1988B90
    UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // public System.Void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x1988C58
    void SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation);
    // public System.Void Translate(UnityEngine.Vector3 translation, UnityEngine.Space relativeTo)
    // Offset: 0x1988D14
    void Translate(UnityEngine::Vector3 translation, UnityEngine::Space relativeTo);
    // public System.Void Translate(UnityEngine.Vector3 translation)
    // Offset: 0x1988E98
    void Translate(UnityEngine::Vector3 translation);
    // public System.Void Rotate(UnityEngine.Vector3 eulers, UnityEngine.Space relativeTo)
    // Offset: 0x1988EA0
    void Rotate(UnityEngine::Vector3 eulers, UnityEngine::Space relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 eulers)
    // Offset: 0x19890BC
    void Rotate(UnityEngine::Vector3 eulers);
    // System.Void RotateAroundInternal(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x19890C4
    void RotateAroundInternal(UnityEngine::Vector3 axis, float angle);
    // public System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle, UnityEngine.Space relativeTo)
    // Offset: 0x198918C
    void Rotate(UnityEngine::Vector3 axis, float angle, UnityEngine::Space relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x1989224
    void Rotate(UnityEngine::Vector3 axis, float angle);
    // public System.Void LookAt(UnityEngine.Transform target, UnityEngine.Vector3 worldUp)
    // Offset: 0x198922C
    void LookAt(UnityEngine::Transform* target, UnityEngine::Vector3 worldUp);
    // public System.Void LookAt(UnityEngine.Transform target)
    // Offset: 0x1989300
    void LookAt(UnityEngine::Transform* target);
    // public System.Void LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)
    // Offset: 0x19892FC
    void LookAt(UnityEngine::Vector3 worldPosition, UnityEngine::Vector3 worldUp);
    // public System.Void LookAt(UnityEngine.Vector3 worldPosition)
    // Offset: 0x1989464
    void LookAt(UnityEngine::Vector3 worldPosition);
    // private System.Void Internal_LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)
    // Offset: 0x1989400
    void Internal_LookAt(UnityEngine::Vector3 worldPosition, UnityEngine::Vector3 worldUp);
    // public UnityEngine.Vector3 TransformDirection(UnityEngine.Vector3 direction)
    // Offset: 0x1988E2C
    UnityEngine::Vector3 TransformDirection(UnityEngine::Vector3 direction);
    // public UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Vector3 direction)
    // Offset: 0x19895B0
    UnityEngine::Vector3 InverseTransformDirection(UnityEngine::Vector3 direction);
    // public UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 vector)
    // Offset: 0x1989674
    UnityEngine::Vector3 TransformVector(UnityEngine::Vector3 vector);
    // public UnityEngine.Vector3 InverseTransformVector(UnityEngine.Vector3 vector)
    // Offset: 0x1989738
    UnityEngine::Vector3 InverseTransformVector(UnityEngine::Vector3 vector);
    // public UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 position)
    // Offset: 0x19897FC
    UnityEngine::Vector3 TransformPoint(UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 position)
    // Offset: 0x19898C0
    UnityEngine::Vector3 InverseTransformPoint(UnityEngine::Vector3 position);
    // public System.Int32 get_childCount()
    // Offset: 0x1989984
    int get_childCount();
    // public System.Void SetAsFirstSibling()
    // Offset: 0x19899C4
    void SetAsFirstSibling();
    // public System.Void SetAsLastSibling()
    // Offset: 0x1989A04
    void SetAsLastSibling();
    // public System.Void SetSiblingIndex(System.Int32 index)
    // Offset: 0x1989A44
    void SetSiblingIndex(int index);
    // public System.Int32 GetSiblingIndex()
    // Offset: 0x1989A94
    int GetSiblingIndex();
    // static private UnityEngine.Transform FindRelativeTransformWithPath(UnityEngine.Transform transform, System.String path, System.Boolean isActiveOnly)
    // Offset: 0x1989AD4
    static UnityEngine::Transform* FindRelativeTransformWithPath(UnityEngine::Transform* transform, ::Il2CppString* path, bool isActiveOnly);
    // public UnityEngine.Transform Find(System.String n)
    // Offset: 0x1989B2C
    UnityEngine::Transform* Find(::Il2CppString* n);
    // public UnityEngine.Vector3 get_lossyScale()
    // Offset: 0x1989BE4
    UnityEngine::Vector3 get_lossyScale();
    // public System.Boolean IsChildOf(UnityEngine.Transform parent)
    // Offset: 0x1989C94
    bool IsChildOf(UnityEngine::Transform* parent);
    // public System.Boolean get_hasChanged()
    // Offset: 0x1989CE4
    bool get_hasChanged();
    // public System.Void set_hasChanged(System.Boolean value)
    // Offset: 0x1989D24
    void set_hasChanged(bool value);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1989D74
    System::Collections::IEnumerator* GetEnumerator();
    // public UnityEngine.Transform GetChild(System.Int32 index)
    // Offset: 0x1989E14
    UnityEngine::Transform* GetChild(int index);
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x1987C68
    void get_position_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x1987D10
    void set_position_Injected(UnityEngine::Vector3& value);
    // private System.Void get_localPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x1987DC0
    void get_localPosition_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_localPosition_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x1987E68
    void set_localPosition_Injected(UnityEngine::Vector3& value);
    // private System.Void get_rotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x19885A4
    void get_rotation_Injected(UnityEngine::Quaternion& ret);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x19885F4
    void set_rotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void get_localRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x1988644
    void get_localRotation_Injected(UnityEngine::Quaternion& ret);
    // private System.Void set_localRotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x1988694
    void set_localRotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void get_localScale_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x1988744
    void get_localScale_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_localScale_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x19887EC
    void set_localScale_Injected(UnityEngine::Vector3& value);
    // private System.Void get_worldToLocalMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1988B40
    void get_worldToLocalMatrix_Injected(UnityEngine::Matrix4x4& ret);
    // private System.Void get_localToWorldMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1988C08
    void get_localToWorldMatrix_Injected(UnityEngine::Matrix4x4& ret);
    // private System.Void SetPositionAndRotation_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation)
    // Offset: 0x1988CBC
    void SetPositionAndRotation_Injected(UnityEngine::Vector3& position, UnityEngine::Quaternion& rotation);
    // private System.Void RotateAroundInternal_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x198912C
    void RotateAroundInternal_Injected(UnityEngine::Vector3& axis, float angle);
    // private System.Void Internal_LookAt_Injected(ref UnityEngine.Vector3 worldPosition, ref UnityEngine.Vector3 worldUp)
    // Offset: 0x1989500
    void Internal_LookAt_Injected(UnityEngine::Vector3& worldPosition, UnityEngine::Vector3& worldUp);
    // private System.Void TransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)
    // Offset: 0x1989558
    void TransformDirection_Injected(UnityEngine::Vector3& direction, UnityEngine::Vector3& ret);
    // private System.Void InverseTransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)
    // Offset: 0x198961C
    void InverseTransformDirection_Injected(UnityEngine::Vector3& direction, UnityEngine::Vector3& ret);
    // private System.Void TransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)
    // Offset: 0x19896E0
    void TransformVector_Injected(UnityEngine::Vector3& vector, UnityEngine::Vector3& ret);
    // private System.Void InverseTransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)
    // Offset: 0x19897A4
    void InverseTransformVector_Injected(UnityEngine::Vector3& vector, UnityEngine::Vector3& ret);
    // private System.Void TransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x1989868
    void TransformPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Vector3& ret);
    // private System.Void InverseTransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x198992C
    void InverseTransformPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Vector3& ret);
    // private System.Void get_lossyScale_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x1989C44
    void get_lossyScale_Injected(UnityEngine::Vector3& ret);
    // protected System.Void .ctor()
    // Offset: 0x1987C00
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Transform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Transform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Transform*, creationType>()));
    }
  }; // UnityEngine.Transform
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Transform*, "UnityEngine", "Transform");
