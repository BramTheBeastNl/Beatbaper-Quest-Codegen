// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RotationOrder
  struct RotationOrder;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Space
  struct Space;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Transform
  // [NativeHeaderAttribute] Offset: D90B34
  // [RequiredByNativeCodeAttribute] Offset: D90B34
  // [NativeHeaderAttribute] Offset: D90B34
  // [NativeHeaderAttribute] Offset: D90B34
  class Transform : public UnityEngine::Component/*, public System::Collections::IEnumerable*/ {
    public:
    // Nested type: UnityEngine::Transform::Enumerator
    class Enumerator;
    // Creating value type constructor for type: Transform
    Transform() noexcept {}
    // Creating interface conversion operator: operator System::Collections::IEnumerable
    operator System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerable*>(this);
    }
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x231D7F0
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x231D8A0
    void set_position(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_localPosition()
    // Offset: 0x231D948
    UnityEngine::Vector3 get_localPosition();
    // public System.Void set_localPosition(UnityEngine.Vector3 value)
    // Offset: 0x231D9F8
    void set_localPosition(UnityEngine::Vector3 value);
    // UnityEngine.Vector3 GetLocalEulerAngles(UnityEngine.RotationOrder order)
    // Offset: 0x231DAA0
    UnityEngine::Vector3 GetLocalEulerAngles(UnityEngine::RotationOrder order);
    // System.Void SetLocalEulerAngles(UnityEngine.Vector3 euler, UnityEngine.RotationOrder order)
    // Offset: 0x231DB68
    void SetLocalEulerAngles(UnityEngine::Vector3 euler, UnityEngine::RotationOrder order);
    // System.Void SetLocalEulerHint(UnityEngine.Vector3 euler)
    // Offset: 0x231DC28
    void SetLocalEulerHint(UnityEngine::Vector3 euler);
    // public UnityEngine.Vector3 get_eulerAngles()
    // Offset: 0x231DCD0
    UnityEngine::Vector3 get_eulerAngles();
    // public System.Void set_eulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x231DD5C
    void set_eulerAngles(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_localEulerAngles()
    // Offset: 0x231DE48
    UnityEngine::Vector3 get_localEulerAngles();
    // public System.Void set_localEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x231DED4
    void set_localEulerAngles(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_right()
    // Offset: 0x231DFC0
    UnityEngine::Vector3 get_right();
    // public System.Void set_right(UnityEngine.Vector3 value)
    // Offset: 0x231E114
    void set_right(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_up()
    // Offset: 0x231E1EC
    UnityEngine::Vector3 get_up();
    // public System.Void set_up(UnityEngine.Vector3 value)
    // Offset: 0x231E340
    void set_up(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_forward()
    // Offset: 0x231E418
    UnityEngine::Vector3 get_forward();
    // public System.Void set_forward(UnityEngine.Vector3 value)
    // Offset: 0x231E56C
    void set_forward(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x231DD00
    UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x231DDF0
    void set_rotation(UnityEngine::Quaternion value);
    // public UnityEngine.Quaternion get_localRotation()
    // Offset: 0x231DE78
    UnityEngine::Quaternion get_localRotation();
    // public System.Void set_localRotation(UnityEngine.Quaternion value)
    // Offset: 0x231DF68
    void set_localRotation(UnityEngine::Quaternion value);
    // UnityEngine.RotationOrder get_rotationOrder()
    // Offset: 0x231E740
    UnityEngine::RotationOrder get_rotationOrder();
    // System.Void set_rotationOrder(UnityEngine.RotationOrder value)
    // Offset: 0x231E7C0
    void set_rotationOrder(UnityEngine::RotationOrder value);
    // System.Int32 GetRotationOrderInternal()
    // Offset: 0x231E780
    int GetRotationOrderInternal();
    // System.Void SetRotationOrderInternal(UnityEngine.RotationOrder rotationOrder)
    // Offset: 0x231E810
    void SetRotationOrderInternal(UnityEngine::RotationOrder rotationOrder);
    // public UnityEngine.Vector3 get_localScale()
    // Offset: 0x231E860
    UnityEngine::Vector3 get_localScale();
    // public System.Void set_localScale(UnityEngine.Vector3 value)
    // Offset: 0x231E910
    void set_localScale(UnityEngine::Vector3 value);
    // public UnityEngine.Transform get_parent()
    // Offset: 0x231E9B8
    UnityEngine::Transform* get_parent();
    // public System.Void set_parent(UnityEngine.Transform value)
    // Offset: 0x231EA38
    void set_parent(UnityEngine::Transform* value);
    // UnityEngine.Transform get_parentInternal()
    // Offset: 0x231E9F8
    UnityEngine::Transform* get_parentInternal();
    // System.Void set_parentInternal(UnityEngine.Transform value)
    // Offset: 0x231EB04
    void set_parentInternal(UnityEngine::Transform* value);
    // private UnityEngine.Transform GetParent()
    // Offset: 0x231EB58
    UnityEngine::Transform* GetParent();
    // public System.Void SetParent(UnityEngine.Transform p)
    // Offset: 0x231EB98
    void SetParent(UnityEngine::Transform* p);
    // public System.Void SetParent(UnityEngine.Transform parent, System.Boolean worldPositionStays)
    // Offset: 0x231EBEC
    void SetParent(UnityEngine::Transform* parent, bool worldPositionStays);
    // public UnityEngine.Matrix4x4 get_worldToLocalMatrix()
    // Offset: 0x231EC44
    UnityEngine::Matrix4x4 get_worldToLocalMatrix();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x231ED0C
    UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // public System.Void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x231EDD4
    void SetPositionAndRotation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation);
    // public System.Void Translate(UnityEngine.Vector3 translation, UnityEngine.Space relativeTo)
    // Offset: 0x231EE90
    void Translate(UnityEngine::Vector3 translation, UnityEngine::Space relativeTo);
    // public System.Void Translate(UnityEngine.Vector3 translation)
    // Offset: 0x231F014
    void Translate(UnityEngine::Vector3 translation);
    // public System.Void Translate(System.Single x, System.Single y, System.Single z, UnityEngine.Space relativeTo)
    // Offset: 0x231F01C
    void Translate(float x, float y, float z, UnityEngine::Space relativeTo);
    // public System.Void Translate(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231F02C
    void Translate(float x, float y, float z);
    // public System.Void Translate(UnityEngine.Vector3 translation, UnityEngine.Transform relativeTo)
    // Offset: 0x231F034
    void Translate(UnityEngine::Vector3 translation, UnityEngine::Transform* relativeTo);
    // public System.Void Translate(System.Single x, System.Single y, System.Single z, UnityEngine.Transform relativeTo)
    // Offset: 0x231F174
    void Translate(float x, float y, float z, UnityEngine::Transform* relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 eulers, UnityEngine.Space relativeTo)
    // Offset: 0x231F178
    void Rotate(UnityEngine::Vector3 eulers, UnityEngine::Space relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 eulers)
    // Offset: 0x231F394
    void Rotate(UnityEngine::Vector3 eulers);
    // public System.Void Rotate(System.Single xAngle, System.Single yAngle, System.Single zAngle, UnityEngine.Space relativeTo)
    // Offset: 0x231F39C
    void Rotate(float xAngle, float yAngle, float zAngle, UnityEngine::Space relativeTo);
    // public System.Void Rotate(System.Single xAngle, System.Single yAngle, System.Single zAngle)
    // Offset: 0x231F3A0
    void Rotate(float xAngle, float yAngle, float zAngle);
    // System.Void RotateAroundInternal(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x231F3A8
    void RotateAroundInternal(UnityEngine::Vector3 axis, float angle);
    // public System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle, UnityEngine.Space relativeTo)
    // Offset: 0x231F470
    void Rotate(UnityEngine::Vector3 axis, float angle, UnityEngine::Space relativeTo);
    // public System.Void Rotate(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x231F508
    void Rotate(UnityEngine::Vector3 axis, float angle);
    // public System.Void RotateAround(UnityEngine.Vector3 point, UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x231F510
    void RotateAround(UnityEngine::Vector3 point, UnityEngine::Vector3 axis, float angle);
    // public System.Void LookAt(UnityEngine.Transform target, UnityEngine.Vector3 worldUp)
    // Offset: 0x231F680
    void LookAt(UnityEngine::Transform* target, UnityEngine::Vector3 worldUp);
    // public System.Void LookAt(UnityEngine.Transform target)
    // Offset: 0x231F754
    void LookAt(UnityEngine::Transform* target);
    // public System.Void LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)
    // Offset: 0x231F750
    void LookAt(UnityEngine::Vector3 worldPosition, UnityEngine::Vector3 worldUp);
    // public System.Void LookAt(UnityEngine.Vector3 worldPosition)
    // Offset: 0x231F8B8
    void LookAt(UnityEngine::Vector3 worldPosition);
    // private System.Void Internal_LookAt(UnityEngine.Vector3 worldPosition, UnityEngine.Vector3 worldUp)
    // Offset: 0x231F854
    void Internal_LookAt(UnityEngine::Vector3 worldPosition, UnityEngine::Vector3 worldUp);
    // public UnityEngine.Vector3 TransformDirection(UnityEngine.Vector3 direction)
    // Offset: 0x231EFA8
    UnityEngine::Vector3 TransformDirection(UnityEngine::Vector3 direction);
    // public UnityEngine.Vector3 TransformDirection(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231FA04
    UnityEngine::Vector3 TransformDirection(float x, float y, float z);
    // public UnityEngine.Vector3 InverseTransformDirection(UnityEngine.Vector3 direction)
    // Offset: 0x231FA08
    UnityEngine::Vector3 InverseTransformDirection(UnityEngine::Vector3 direction);
    // public UnityEngine.Vector3 InverseTransformDirection(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231FACC
    UnityEngine::Vector3 InverseTransformDirection(float x, float y, float z);
    // public UnityEngine.Vector3 TransformVector(UnityEngine.Vector3 vector)
    // Offset: 0x231FAD0
    UnityEngine::Vector3 TransformVector(UnityEngine::Vector3 vector);
    // public UnityEngine.Vector3 TransformVector(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231FB94
    UnityEngine::Vector3 TransformVector(float x, float y, float z);
    // public UnityEngine.Vector3 InverseTransformVector(UnityEngine.Vector3 vector)
    // Offset: 0x231FB98
    UnityEngine::Vector3 InverseTransformVector(UnityEngine::Vector3 vector);
    // public UnityEngine.Vector3 InverseTransformVector(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231FC5C
    UnityEngine::Vector3 InverseTransformVector(float x, float y, float z);
    // public UnityEngine.Vector3 TransformPoint(UnityEngine.Vector3 position)
    // Offset: 0x231FC60
    UnityEngine::Vector3 TransformPoint(UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 TransformPoint(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231FD24
    UnityEngine::Vector3 TransformPoint(float x, float y, float z);
    // public UnityEngine.Vector3 InverseTransformPoint(UnityEngine.Vector3 position)
    // Offset: 0x231FD28
    UnityEngine::Vector3 InverseTransformPoint(UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 InverseTransformPoint(System.Single x, System.Single y, System.Single z)
    // Offset: 0x231FDEC
    UnityEngine::Vector3 InverseTransformPoint(float x, float y, float z);
    // public UnityEngine.Transform get_root()
    // Offset: 0x231FDF0
    UnityEngine::Transform* get_root();
    // private UnityEngine.Transform GetRoot()
    // Offset: 0x231FE30
    UnityEngine::Transform* GetRoot();
    // public System.Int32 get_childCount()
    // Offset: 0x231FE70
    int get_childCount();
    // public System.Void DetachChildren()
    // Offset: 0x231FEB0
    void DetachChildren();
    // public System.Void SetAsFirstSibling()
    // Offset: 0x231FEF0
    void SetAsFirstSibling();
    // public System.Void SetAsLastSibling()
    // Offset: 0x231FF30
    void SetAsLastSibling();
    // public System.Void SetSiblingIndex(System.Int32 index)
    // Offset: 0x231FF70
    void SetSiblingIndex(int index);
    // public System.Int32 GetSiblingIndex()
    // Offset: 0x231FFC0
    int GetSiblingIndex();
    // static private UnityEngine.Transform FindRelativeTransformWithPath(UnityEngine.Transform transform, System.String path, System.Boolean isActiveOnly)
    // Offset: 0x2320000
    static UnityEngine::Transform* FindRelativeTransformWithPath(UnityEngine::Transform* transform, ::Il2CppString* path, bool isActiveOnly);
    // public UnityEngine.Transform Find(System.String n)
    // Offset: 0x2320058
    UnityEngine::Transform* Find(::Il2CppString* n);
    // System.Void SendTransformChangedScale()
    // Offset: 0x2320110
    void SendTransformChangedScale();
    // public UnityEngine.Vector3 get_lossyScale()
    // Offset: 0x2320150
    UnityEngine::Vector3 get_lossyScale();
    // public System.Boolean IsChildOf(UnityEngine.Transform parent)
    // Offset: 0x2320200
    bool IsChildOf(UnityEngine::Transform* parent);
    // public System.Boolean get_hasChanged()
    // Offset: 0x2320250
    bool get_hasChanged();
    // public System.Void set_hasChanged(System.Boolean value)
    // Offset: 0x2320290
    void set_hasChanged(bool value);
    // public UnityEngine.Transform FindChild(System.String n)
    // Offset: 0x23202E0
    UnityEngine::Transform* FindChild(::Il2CppString* n);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x23202E4
    System::Collections::IEnumerator* GetEnumerator();
    // public System.Void RotateAround(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x2320384
    void RotateAround(UnityEngine::Vector3 axis, float angle);
    // public System.Void RotateAroundLocal(UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x232044C
    void RotateAroundLocal(UnityEngine::Vector3 axis, float angle);
    // public UnityEngine.Transform GetChild(System.Int32 index)
    // Offset: 0x2320514
    UnityEngine::Transform* GetChild(int index);
    // public System.Int32 GetChildCount()
    // Offset: 0x2320564
    int GetChildCount();
    // public System.Int32 get_hierarchyCapacity()
    // Offset: 0x23205A4
    int get_hierarchyCapacity();
    // public System.Void set_hierarchyCapacity(System.Int32 value)
    // Offset: 0x2320624
    void set_hierarchyCapacity(int value);
    // private System.Int32 internal_getHierarchyCapacity()
    // Offset: 0x23205E4
    int internal_getHierarchyCapacity();
    // private System.Void internal_setHierarchyCapacity(System.Int32 value)
    // Offset: 0x2320674
    void internal_setHierarchyCapacity(int value);
    // public System.Int32 get_hierarchyCount()
    // Offset: 0x23206C4
    int get_hierarchyCount();
    // private System.Int32 internal_getHierarchyCount()
    // Offset: 0x2320704
    int internal_getHierarchyCount();
    // System.Boolean IsNonUniformScaleTransform()
    // Offset: 0x2320744
    bool IsNonUniformScaleTransform();
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x231D850
    void get_position_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x231D8F8
    void set_position_Injected(UnityEngine::Vector3& value);
    // private System.Void get_localPosition_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x231D9A8
    void get_localPosition_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_localPosition_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x231DA50
    void set_localPosition_Injected(UnityEngine::Vector3& value);
    // private System.Void GetLocalEulerAngles_Injected(UnityEngine.RotationOrder order, out UnityEngine.Vector3 ret)
    // Offset: 0x231DB10
    void GetLocalEulerAngles_Injected(UnityEngine::RotationOrder order, UnityEngine::Vector3& ret);
    // private System.Void SetLocalEulerAngles_Injected(ref UnityEngine.Vector3 euler, UnityEngine.RotationOrder order)
    // Offset: 0x231DBD0
    void SetLocalEulerAngles_Injected(UnityEngine::Vector3& euler, UnityEngine::RotationOrder order);
    // private System.Void SetLocalEulerHint_Injected(ref UnityEngine.Vector3 euler)
    // Offset: 0x231DC80
    void SetLocalEulerHint_Injected(UnityEngine::Vector3& euler);
    // private System.Void get_rotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x231E600
    void get_rotation_Injected(UnityEngine::Quaternion& ret);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x231E650
    void set_rotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void get_localRotation_Injected(out UnityEngine.Quaternion ret)
    // Offset: 0x231E6A0
    void get_localRotation_Injected(UnityEngine::Quaternion& ret);
    // private System.Void set_localRotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x231E6F0
    void set_localRotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void get_localScale_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x231E8C0
    void get_localScale_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_localScale_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x231E968
    void set_localScale_Injected(UnityEngine::Vector3& value);
    // private System.Void get_worldToLocalMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x231ECBC
    void get_worldToLocalMatrix_Injected(UnityEngine::Matrix4x4& ret);
    // private System.Void get_localToWorldMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x231ED84
    void get_localToWorldMatrix_Injected(UnityEngine::Matrix4x4& ret);
    // private System.Void SetPositionAndRotation_Injected(ref UnityEngine.Vector3 position, ref UnityEngine.Quaternion rotation)
    // Offset: 0x231EE38
    void SetPositionAndRotation_Injected(UnityEngine::Vector3& position, UnityEngine::Quaternion& rotation);
    // private System.Void RotateAroundInternal_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x231F410
    void RotateAroundInternal_Injected(UnityEngine::Vector3& axis, float angle);
    // private System.Void Internal_LookAt_Injected(ref UnityEngine.Vector3 worldPosition, ref UnityEngine.Vector3 worldUp)
    // Offset: 0x231F954
    void Internal_LookAt_Injected(UnityEngine::Vector3& worldPosition, UnityEngine::Vector3& worldUp);
    // private System.Void TransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)
    // Offset: 0x231F9AC
    void TransformDirection_Injected(UnityEngine::Vector3& direction, UnityEngine::Vector3& ret);
    // private System.Void InverseTransformDirection_Injected(ref UnityEngine.Vector3 direction, out UnityEngine.Vector3 ret)
    // Offset: 0x231FA74
    void InverseTransformDirection_Injected(UnityEngine::Vector3& direction, UnityEngine::Vector3& ret);
    // private System.Void TransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)
    // Offset: 0x231FB3C
    void TransformVector_Injected(UnityEngine::Vector3& vector, UnityEngine::Vector3& ret);
    // private System.Void InverseTransformVector_Injected(ref UnityEngine.Vector3 vector, out UnityEngine.Vector3 ret)
    // Offset: 0x231FC04
    void InverseTransformVector_Injected(UnityEngine::Vector3& vector, UnityEngine::Vector3& ret);
    // private System.Void TransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x231FCCC
    void TransformPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Vector3& ret);
    // private System.Void InverseTransformPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x231FD94
    void InverseTransformPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Vector3& ret);
    // private System.Void get_lossyScale_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x23201B0
    void get_lossyScale_Injected(UnityEngine::Vector3& ret);
    // private System.Void RotateAround_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x23203EC
    void RotateAround_Injected(UnityEngine::Vector3& axis, float angle);
    // private System.Void RotateAroundLocal_Injected(ref UnityEngine.Vector3 axis, System.Single angle)
    // Offset: 0x23204B4
    void RotateAroundLocal_Injected(UnityEngine::Vector3& axis, float angle);
    // protected System.Void .ctor()
    // Offset: 0x231D7E8
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Transform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Transform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Transform*, creationType>()));
    }
  }; // UnityEngine.Transform
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Transform*, "UnityEngine", "Transform");
// Writing MetadataGetter for method: Transform::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localPosition
// Il2CppName: get_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_localPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_localPosition
// Il2CppName: set_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_localPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::GetLocalEulerAngles
// Il2CppName: GetLocalEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::RotationOrder)>(&Transform::GetLocalEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetLocalEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RotationOrder>()});
  }
};
// Writing MetadataGetter for method: Transform::SetLocalEulerAngles
// Il2CppName: SetLocalEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::RotationOrder)>(&Transform::SetLocalEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetLocalEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RotationOrder>()});
  }
};
// Writing MetadataGetter for method: Transform::SetLocalEulerHint
// Il2CppName: SetLocalEulerHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::SetLocalEulerHint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetLocalEulerHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_eulerAngles
// Il2CppName: get_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_eulerAngles
// Il2CppName: set_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localEulerAngles
// Il2CppName: get_localEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_localEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_localEulerAngles
// Il2CppName: set_localEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_localEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_right
// Il2CppName: get_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_right)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_right
// Il2CppName: set_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_right)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_up
// Il2CppName: get_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_up)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_up
// Il2CppName: set_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_up)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_forward
// Il2CppName: get_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_forward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_forward
// Il2CppName: set_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_forward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (Transform::*)()>(&Transform::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Quaternion)>(&Transform::set_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localRotation
// Il2CppName: get_localRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (Transform::*)()>(&Transform::get_localRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_localRotation
// Il2CppName: set_localRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Quaternion)>(&Transform::set_localRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Transform::get_rotationOrder
// Il2CppName: get_rotationOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RotationOrder (Transform::*)()>(&Transform::get_rotationOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_rotationOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_rotationOrder
// Il2CppName: set_rotationOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::RotationOrder)>(&Transform::set_rotationOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_rotationOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RotationOrder>()});
  }
};
// Writing MetadataGetter for method: Transform::GetRotationOrderInternal
// Il2CppName: GetRotationOrderInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::GetRotationOrderInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetRotationOrderInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::SetRotationOrderInternal
// Il2CppName: SetRotationOrderInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::RotationOrder)>(&Transform::SetRotationOrderInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetRotationOrderInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RotationOrder>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localScale
// Il2CppName: get_localScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_localScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_localScale
// Il2CppName: set_localScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::set_localScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::get_parent
// Il2CppName: get_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)()>(&Transform::get_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_parent
// Il2CppName: set_parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Transform*)>(&Transform::set_parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::get_parentInternal
// Il2CppName: get_parentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)()>(&Transform::get_parentInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_parentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_parentInternal
// Il2CppName: set_parentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Transform*)>(&Transform::set_parentInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_parentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::GetParent
// Il2CppName: GetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)()>(&Transform::GetParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Transform*)>(&Transform::SetParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::SetParent
// Il2CppName: SetParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Transform*, bool)>(&Transform::SetParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Transform::get_worldToLocalMatrix
// Il2CppName: get_worldToLocalMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Transform::*)()>(&Transform::get_worldToLocalMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_worldToLocalMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::get_localToWorldMatrix
// Il2CppName: get_localToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Transform::*)()>(&Transform::get_localToWorldMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::SetPositionAndRotation
// Il2CppName: SetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&Transform::SetPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Space)>(&Transform::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Space>()});
  }
};
// Writing MetadataGetter for method: Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(float, float, float, UnityEngine::Space)>(&Transform::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Space>()});
  }
};
// Writing MetadataGetter for method: Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(float, float, float)>(&Transform::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Transform*)>(&Transform::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(float, float, float, UnityEngine::Transform*)>(&Transform::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Space)>(&Transform::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Space>()});
  }
};
// Writing MetadataGetter for method: Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(float, float, float, UnityEngine::Space)>(&Transform::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Space>()});
  }
};
// Writing MetadataGetter for method: Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(float, float, float)>(&Transform::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::RotateAroundInternal
// Il2CppName: RotateAroundInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, float)>(&Transform::RotateAroundInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAroundInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, float, UnityEngine::Space)>(&Transform::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Space>()});
  }
};
// Writing MetadataGetter for method: Transform::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, float)>(&Transform::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::RotateAround
// Il2CppName: RotateAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&Transform::RotateAround)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Transform*, UnityEngine::Vector3)>(&Transform::LookAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Transform*)>(&Transform::LookAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Transform::LookAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3)>(&Transform::LookAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::Internal_LookAt
// Il2CppName: Internal_LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Transform::Internal_LookAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Internal_LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformDirection
// Il2CppName: TransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::Vector3)>(&Transform::TransformDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformDirection
// Il2CppName: TransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(float, float, float)>(&Transform::TransformDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformDirection
// Il2CppName: InverseTransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::Vector3)>(&Transform::InverseTransformDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformDirection
// Il2CppName: InverseTransformDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(float, float, float)>(&Transform::InverseTransformDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformVector
// Il2CppName: TransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::Vector3)>(&Transform::TransformVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformVector
// Il2CppName: TransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(float, float, float)>(&Transform::TransformVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformVector
// Il2CppName: InverseTransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::Vector3)>(&Transform::InverseTransformVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformVector
// Il2CppName: InverseTransformVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(float, float, float)>(&Transform::InverseTransformVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformPoint
// Il2CppName: TransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::Vector3)>(&Transform::TransformPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformPoint
// Il2CppName: TransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(float, float, float)>(&Transform::TransformPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformPoint
// Il2CppName: InverseTransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(UnityEngine::Vector3)>(&Transform::InverseTransformPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformPoint
// Il2CppName: InverseTransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)(float, float, float)>(&Transform::InverseTransformPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::get_root
// Il2CppName: get_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)()>(&Transform::get_root)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::GetRoot
// Il2CppName: GetRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)()>(&Transform::GetRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::get_childCount
// Il2CppName: get_childCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::get_childCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_childCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::DetachChildren
// Il2CppName: DetachChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)()>(&Transform::DetachChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "DetachChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::SetAsFirstSibling
// Il2CppName: SetAsFirstSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)()>(&Transform::SetAsFirstSibling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetAsFirstSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::SetAsLastSibling
// Il2CppName: SetAsLastSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)()>(&Transform::SetAsLastSibling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetAsLastSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::SetSiblingIndex
// Il2CppName: SetSiblingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(int)>(&Transform::SetSiblingIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetSiblingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Transform::GetSiblingIndex
// Il2CppName: GetSiblingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::GetSiblingIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetSiblingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::FindRelativeTransformWithPath
// Il2CppName: FindRelativeTransformWithPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(UnityEngine::Transform*, ::Il2CppString*, bool)>(&Transform::FindRelativeTransformWithPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "FindRelativeTransformWithPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Transform::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)(::Il2CppString*)>(&Transform::Find)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Transform::SendTransformChangedScale
// Il2CppName: SendTransformChangedScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)()>(&Transform::SendTransformChangedScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SendTransformChangedScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::get_lossyScale
// Il2CppName: get_lossyScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Transform::*)()>(&Transform::get_lossyScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_lossyScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::IsChildOf
// Il2CppName: IsChildOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Transform::*)(UnityEngine::Transform*)>(&Transform::IsChildOf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "IsChildOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Transform::get_hasChanged
// Il2CppName: get_hasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Transform::*)()>(&Transform::get_hasChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_hasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_hasChanged
// Il2CppName: set_hasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(bool)>(&Transform::set_hasChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_hasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Transform::FindChild
// Il2CppName: FindChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)(::Il2CppString*)>(&Transform::FindChild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "FindChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Transform::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (Transform::*)()>(&Transform::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::RotateAround
// Il2CppName: RotateAround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, float)>(&Transform::RotateAround)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::RotateAroundLocal
// Il2CppName: RotateAroundLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3, float)>(&Transform::RotateAroundLocal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAroundLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::GetChild
// Il2CppName: GetChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Transform::*)(int)>(&Transform::GetChild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Transform::GetChildCount
// Il2CppName: GetChildCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::GetChildCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetChildCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::get_hierarchyCapacity
// Il2CppName: get_hierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::get_hierarchyCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_hierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::set_hierarchyCapacity
// Il2CppName: set_hierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(int)>(&Transform::set_hierarchyCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_hierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Transform::internal_getHierarchyCapacity
// Il2CppName: internal_getHierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::internal_getHierarchyCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "internal_getHierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::internal_setHierarchyCapacity
// Il2CppName: internal_setHierarchyCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(int)>(&Transform::internal_setHierarchyCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "internal_setHierarchyCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Transform::get_hierarchyCount
// Il2CppName: get_hierarchyCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::get_hierarchyCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_hierarchyCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::internal_getHierarchyCount
// Il2CppName: internal_getHierarchyCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Transform::*)()>(&Transform::internal_getHierarchyCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "internal_getHierarchyCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::IsNonUniformScaleTransform
// Il2CppName: IsNonUniformScaleTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Transform::*)()>(&Transform::IsNonUniformScaleTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "IsNonUniformScaleTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Transform::get_position_Injected
// Il2CppName: get_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::get_position_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::set_position_Injected
// Il2CppName: set_position_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::set_position_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localPosition_Injected
// Il2CppName: get_localPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::get_localPosition_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::set_localPosition_Injected
// Il2CppName: set_localPosition_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::set_localPosition_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::GetLocalEulerAngles_Injected
// Il2CppName: GetLocalEulerAngles_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::RotationOrder, UnityEngine::Vector3&)>(&Transform::GetLocalEulerAngles_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "GetLocalEulerAngles_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RotationOrder>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::SetLocalEulerAngles_Injected
// Il2CppName: SetLocalEulerAngles_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::RotationOrder)>(&Transform::SetLocalEulerAngles_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetLocalEulerAngles_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RotationOrder>()});
  }
};
// Writing MetadataGetter for method: Transform::SetLocalEulerHint_Injected
// Il2CppName: SetLocalEulerHint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::SetLocalEulerHint_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetLocalEulerHint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_rotation_Injected
// Il2CppName: get_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Quaternion&)>(&Transform::get_rotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Transform::set_rotation_Injected
// Il2CppName: set_rotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Quaternion&)>(&Transform::set_rotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localRotation_Injected
// Il2CppName: get_localRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Quaternion&)>(&Transform::get_localRotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Transform::set_localRotation_Injected
// Il2CppName: set_localRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Quaternion&)>(&Transform::set_localRotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localScale_Injected
// Il2CppName: get_localScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::get_localScale_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::set_localScale_Injected
// Il2CppName: set_localScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::set_localScale_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "set_localScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_worldToLocalMatrix_Injected
// Il2CppName: get_worldToLocalMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Matrix4x4&)>(&Transform::get_worldToLocalMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_worldToLocalMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_localToWorldMatrix_Injected
// Il2CppName: get_localToWorldMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Matrix4x4&)>(&Transform::get_localToWorldMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_localToWorldMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Transform::SetPositionAndRotation_Injected
// Il2CppName: SetPositionAndRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Transform::SetPositionAndRotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "SetPositionAndRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Transform::RotateAroundInternal_Injected
// Il2CppName: RotateAroundInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, float)>(&Transform::RotateAroundInternal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAroundInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::Internal_LookAt_Injected
// Il2CppName: Internal_LookAt_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::Internal_LookAt_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "Internal_LookAt_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformDirection_Injected
// Il2CppName: TransformDirection_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::TransformDirection_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformDirection_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformDirection_Injected
// Il2CppName: InverseTransformDirection_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::InverseTransformDirection_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformDirection_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformVector_Injected
// Il2CppName: TransformVector_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::TransformVector_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformVector_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformVector_Injected
// Il2CppName: InverseTransformVector_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::InverseTransformVector_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformVector_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::TransformPoint_Injected
// Il2CppName: TransformPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::TransformPoint_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "TransformPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::InverseTransformPoint_Injected
// Il2CppName: InverseTransformPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Transform::InverseTransformPoint_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "InverseTransformPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::get_lossyScale_Injected
// Il2CppName: get_lossyScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&)>(&Transform::get_lossyScale_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "get_lossyScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Transform::RotateAround_Injected
// Il2CppName: RotateAround_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, float)>(&Transform::RotateAround_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAround_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::RotateAroundLocal_Injected
// Il2CppName: RotateAroundLocal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)(UnityEngine::Vector3&, float)>(&Transform::RotateAroundLocal_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), "RotateAroundLocal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Transform::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)()>(&Transform::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Transform::*)()>(&Transform::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Transform*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
