// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: MaterialGlobalIlluminationFlags
  struct MaterialGlobalIlluminationFlags;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShaderPropertyFlags
  struct ShaderPropertyFlags;
  // Forward declaring type: RenderTextureSubElement
  struct RenderTextureSubElement;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Material
  // [NativeHeaderAttribute] Offset: D8EECC
  // [NativeHeaderAttribute] Offset: D8EECC
  class Material : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Material
    Material() noexcept {}
    // static public UnityEngine.Material Create(System.String scriptContents)
    // Offset: 0x1BEFBFC
    static UnityEngine::Material* Create(::Il2CppString* scriptContents);
    // static private System.Void CreateWithShader(UnityEngine.Material self, UnityEngine.Shader shader)
    // Offset: 0x1BEFCE4
    static void CreateWithShader(UnityEngine::Material* self, UnityEngine::Shader* shader);
    // static private System.Void CreateWithMaterial(UnityEngine.Material self, UnityEngine.Material source)
    // Offset: 0x1BEFD34
    static void CreateWithMaterial(UnityEngine::Material* self, UnityEngine::Material* source);
    // static private System.Void CreateWithString(UnityEngine.Material self)
    // Offset: 0x1BEFD84
    static void CreateWithString(UnityEngine::Material* self);
    // public System.Void .ctor(UnityEngine.Shader shader)
    // Offset: 0x1BEFDC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Material* New_ctor(UnityEngine::Shader* shader) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Material::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Material*, creationType>(shader)));
    }
    // public System.Void .ctor(UnityEngine.Material source)
    // Offset: 0x1BEFE6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Material* New_ctor(UnityEngine::Material* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Material::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Material*, creationType>(source)));
    }
    // public System.Void .ctor(System.String contents)
    // Offset: 0x1BEFC54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Material* New_ctor(::Il2CppString* contents) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Material::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Material*, creationType>(contents)));
    }
    // static UnityEngine.Material GetDefaultMaterial()
    // Offset: 0x1BEFF0C
    static UnityEngine::Material* GetDefaultMaterial();
    // static UnityEngine.Material GetDefaultParticleMaterial()
    // Offset: 0x1BEFF40
    static UnityEngine::Material* GetDefaultParticleMaterial();
    // static UnityEngine.Material GetDefaultLineMaterial()
    // Offset: 0x1BEFF74
    static UnityEngine::Material* GetDefaultLineMaterial();
    // public UnityEngine.Shader get_shader()
    // Offset: 0x1BEFFA8
    UnityEngine::Shader* get_shader();
    // public System.Void set_shader(UnityEngine.Shader value)
    // Offset: 0x1BEFFE8
    void set_shader(UnityEngine::Shader* value);
    // public UnityEngine.Color get_color()
    // Offset: 0x1BF0038
    UnityEngine::Color get_color();
    // public System.Void set_color(UnityEngine.Color value)
    // Offset: 0x1BF014C
    void set_color(UnityEngine::Color value);
    // public UnityEngine.Texture get_mainTexture()
    // Offset: 0x1BF026C
    UnityEngine::Texture* get_mainTexture();
    // public System.Void set_mainTexture(UnityEngine.Texture value)
    // Offset: 0x1BF03DC
    void set_mainTexture(UnityEngine::Texture* value);
    // public UnityEngine.Vector2 get_mainTextureOffset()
    // Offset: 0x1BF0568
    UnityEngine::Vector2 get_mainTextureOffset();
    // public System.Void set_mainTextureOffset(UnityEngine.Vector2 value)
    // Offset: 0x1BF0660
    void set_mainTextureOffset(UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_mainTextureScale()
    // Offset: 0x1BF0750
    UnityEngine::Vector2 get_mainTextureScale();
    // public System.Void set_mainTextureScale(UnityEngine.Vector2 value)
    // Offset: 0x1BF0840
    void set_mainTextureScale(UnityEngine::Vector2 value);
    // private System.Int32 GetFirstPropertyNameIdByAttribute(UnityEngine.Rendering.ShaderPropertyFlags attributeFlag)
    // Offset: 0x1BF00C8
    int GetFirstPropertyNameIdByAttribute(UnityEngine::Rendering::ShaderPropertyFlags attributeFlag);
    // public System.Boolean HasProperty(System.Int32 nameID)
    // Offset: 0x1BF0930
    bool HasProperty(int nameID);
    // public System.Boolean HasProperty(System.String name)
    // Offset: 0x1BF0980
    bool HasProperty(::Il2CppString* name);
    // public System.Int32 get_renderQueue()
    // Offset: 0x1BF09DC
    int get_renderQueue();
    // public System.Void set_renderQueue(System.Int32 value)
    // Offset: 0x1BF0A1C
    void set_renderQueue(int value);
    // System.Int32 get_rawRenderQueue()
    // Offset: 0x1BF0A6C
    int get_rawRenderQueue();
    // public System.Void EnableKeyword(System.String keyword)
    // Offset: 0x1BF0AAC
    void EnableKeyword(::Il2CppString* keyword);
    // public System.Void DisableKeyword(System.String keyword)
    // Offset: 0x1BF0AFC
    void DisableKeyword(::Il2CppString* keyword);
    // public System.Boolean IsKeywordEnabled(System.String keyword)
    // Offset: 0x1BF0B4C
    bool IsKeywordEnabled(::Il2CppString* keyword);
    // public UnityEngine.MaterialGlobalIlluminationFlags get_globalIlluminationFlags()
    // Offset: 0x1BF0B9C
    UnityEngine::MaterialGlobalIlluminationFlags get_globalIlluminationFlags();
    // public System.Void set_globalIlluminationFlags(UnityEngine.MaterialGlobalIlluminationFlags value)
    // Offset: 0x1BF0BDC
    void set_globalIlluminationFlags(UnityEngine::MaterialGlobalIlluminationFlags value);
    // public System.Boolean get_doubleSidedGI()
    // Offset: 0x1BF0C2C
    bool get_doubleSidedGI();
    // public System.Void set_doubleSidedGI(System.Boolean value)
    // Offset: 0x1BF0C6C
    void set_doubleSidedGI(bool value);
    // public System.Boolean get_enableInstancing()
    // Offset: 0x1BF0CBC
    bool get_enableInstancing();
    // public System.Void set_enableInstancing(System.Boolean value)
    // Offset: 0x1BF0CFC
    void set_enableInstancing(bool value);
    // public System.Int32 get_passCount()
    // Offset: 0x1BF0D4C
    int get_passCount();
    // public System.Void SetShaderPassEnabled(System.String passName, System.Boolean enabled)
    // Offset: 0x1BF0D8C
    void SetShaderPassEnabled(::Il2CppString* passName, bool enabled);
    // public System.Boolean GetShaderPassEnabled(System.String passName)
    // Offset: 0x1BF0DE4
    bool GetShaderPassEnabled(::Il2CppString* passName);
    // public System.String GetPassName(System.Int32 pass)
    // Offset: 0x1BF0E34
    ::Il2CppString* GetPassName(int pass);
    // public System.Int32 FindPass(System.String passName)
    // Offset: 0x1BF0E84
    int FindPass(::Il2CppString* passName);
    // public System.Void SetOverrideTag(System.String tag, System.String val)
    // Offset: 0x1BF0ED4
    void SetOverrideTag(::Il2CppString* tag, ::Il2CppString* val);
    // private System.String GetTagImpl(System.String tag, System.Boolean currentSubShaderOnly, System.String defaultValue)
    // Offset: 0x1BF0F2C
    ::Il2CppString* GetTagImpl(::Il2CppString* tag, bool currentSubShaderOnly, ::Il2CppString* defaultValue);
    // public System.String GetTag(System.String tag, System.Boolean searchFallbacks, System.String defaultValue)
    // Offset: 0x1BF0F94
    ::Il2CppString* GetTag(::Il2CppString* tag, bool searchFallbacks, ::Il2CppString* defaultValue);
    // public System.String GetTag(System.String tag, System.Boolean searchFallbacks)
    // Offset: 0x1BF0FFC
    ::Il2CppString* GetTag(::Il2CppString* tag, bool searchFallbacks);
    // public System.Void Lerp(UnityEngine.Material start, UnityEngine.Material end, System.Single t)
    // Offset: 0x1BF1094
    void Lerp(UnityEngine::Material* start, UnityEngine::Material* end, float t);
    // public System.Boolean SetPass(System.Int32 pass)
    // Offset: 0x1BF10FC
    bool SetPass(int pass);
    // public System.Void CopyPropertiesFromMaterial(UnityEngine.Material mat)
    // Offset: 0x1BF114C
    void CopyPropertiesFromMaterial(UnityEngine::Material* mat);
    // private System.String[] GetShaderKeywords()
    // Offset: 0x1BF119C
    ::Array<::Il2CppString*>* GetShaderKeywords();
    // private System.Void SetShaderKeywords(System.String[] names)
    // Offset: 0x1BF11DC
    void SetShaderKeywords(::Array<::Il2CppString*>* names);
    // public System.String[] get_shaderKeywords()
    // Offset: 0x1BF122C
    ::Array<::Il2CppString*>* get_shaderKeywords();
    // public System.Void set_shaderKeywords(System.String[] value)
    // Offset: 0x1BF126C
    void set_shaderKeywords(::Array<::Il2CppString*>* value);
    // public System.Int32 ComputeCRC()
    // Offset: 0x1BF12BC
    int ComputeCRC();
    // public System.String[] GetTexturePropertyNames()
    // Offset: 0x1BF12FC
    ::Array<::Il2CppString*>* GetTexturePropertyNames();
    // public System.Int32[] GetTexturePropertyNameIDs()
    // Offset: 0x1BF133C
    ::Array<int>* GetTexturePropertyNameIDs();
    // private System.Void GetTexturePropertyNamesInternal(System.Object outNames)
    // Offset: 0x1BF137C
    void GetTexturePropertyNamesInternal(::Il2CppObject* outNames);
    // private System.Void GetTexturePropertyNameIDsInternal(System.Object outNames)
    // Offset: 0x1BF13CC
    void GetTexturePropertyNameIDsInternal(::Il2CppObject* outNames);
    // public System.Void GetTexturePropertyNames(System.Collections.Generic.List`1<System.String> outNames)
    // Offset: 0x1BF141C
    void GetTexturePropertyNames(System::Collections::Generic::List_1<::Il2CppString*>* outNames);
    // public System.Void GetTexturePropertyNameIDs(System.Collections.Generic.List`1<System.Int32> outNames)
    // Offset: 0x1BF146C
    void GetTexturePropertyNameIDs(System::Collections::Generic::List_1<int>* outNames);
    // private System.Void SetFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x1BF14BC
    void SetFloatImpl(int name, float value);
    // private System.Void SetColorImpl(System.Int32 name, UnityEngine.Color value)
    // Offset: 0x1BF151C
    void SetColorImpl(int name, UnityEngine::Color value);
    // private System.Void SetMatrixImpl(System.Int32 name, UnityEngine.Matrix4x4 value)
    // Offset: 0x1BF15DC
    void SetMatrixImpl(int name, UnityEngine::Matrix4x4 value);
    // private System.Void SetTextureImpl(System.Int32 name, UnityEngine.Texture value)
    // Offset: 0x1BF168C
    void SetTextureImpl(int name, UnityEngine::Texture* value);
    // private System.Void SetRenderTextureImpl(System.Int32 name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element)
    // Offset: 0x1BF16E4
    void SetRenderTextureImpl(int name, UnityEngine::RenderTexture* value, UnityEngine::Rendering::RenderTextureSubElement element);
    // private System.Void SetBufferImpl(System.Int32 name, UnityEngine.ComputeBuffer value)
    // Offset: 0x1BF174C
    void SetBufferImpl(int name, UnityEngine::ComputeBuffer* value);
    // private System.Void SetConstantBufferImpl(System.Int32 name, UnityEngine.ComputeBuffer value, System.Int32 offset, System.Int32 size)
    // Offset: 0x1BF17A4
    void SetConstantBufferImpl(int name, UnityEngine::ComputeBuffer* value, int offset, int size);
    // private System.Single GetFloatImpl(System.Int32 name)
    // Offset: 0x1BF1814
    float GetFloatImpl(int name);
    // private UnityEngine.Color GetColorImpl(System.Int32 name)
    // Offset: 0x1BF1864
    UnityEngine::Color GetColorImpl(int name);
    // private UnityEngine.Matrix4x4 GetMatrixImpl(System.Int32 name)
    // Offset: 0x1BF1928
    UnityEngine::Matrix4x4 GetMatrixImpl(int name);
    // private UnityEngine.Texture GetTextureImpl(System.Int32 name)
    // Offset: 0x1BF1A00
    UnityEngine::Texture* GetTextureImpl(int name);
    // private System.Void SetFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1BF1A50
    void SetFloatArrayImpl(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1BF1AB8
    void SetVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // private System.Void SetColorArrayImpl(System.Int32 name, UnityEngine.Color[] values, System.Int32 count)
    // Offset: 0x1BF1B20
    void SetColorArrayImpl(int name, ::Array<UnityEngine::Color>* values, int count);
    // private System.Void SetMatrixArrayImpl(System.Int32 name, UnityEngine.Matrix4x4[] values, System.Int32 count)
    // Offset: 0x1BF1B88
    void SetMatrixArrayImpl(int name, ::Array<UnityEngine::Matrix4x4>* values, int count);
    // private System.Single[] GetFloatArrayImpl(System.Int32 name)
    // Offset: 0x1BF1BF0
    ::Array<float>* GetFloatArrayImpl(int name);
    // private UnityEngine.Vector4[] GetVectorArrayImpl(System.Int32 name)
    // Offset: 0x1BF1C40
    ::Array<UnityEngine::Vector4>* GetVectorArrayImpl(int name);
    // private UnityEngine.Color[] GetColorArrayImpl(System.Int32 name)
    // Offset: 0x1BF1C90
    ::Array<UnityEngine::Color>* GetColorArrayImpl(int name);
    // private UnityEngine.Matrix4x4[] GetMatrixArrayImpl(System.Int32 name)
    // Offset: 0x1BF1CE0
    ::Array<UnityEngine::Matrix4x4>* GetMatrixArrayImpl(int name);
    // private System.Int32 GetFloatArrayCountImpl(System.Int32 name)
    // Offset: 0x1BF1D30
    int GetFloatArrayCountImpl(int name);
    // private System.Int32 GetVectorArrayCountImpl(System.Int32 name)
    // Offset: 0x1BF1D80
    int GetVectorArrayCountImpl(int name);
    // private System.Int32 GetColorArrayCountImpl(System.Int32 name)
    // Offset: 0x1BF1DD0
    int GetColorArrayCountImpl(int name);
    // private System.Int32 GetMatrixArrayCountImpl(System.Int32 name)
    // Offset: 0x1BF1E20
    int GetMatrixArrayCountImpl(int name);
    // private System.Void ExtractFloatArrayImpl(System.Int32 name, out System.Single[] val)
    // Offset: 0x1BF1E70
    void ExtractFloatArrayImpl(int name, ::Array<float>*& val);
    // private System.Void ExtractVectorArrayImpl(System.Int32 name, out UnityEngine.Vector4[] val)
    // Offset: 0x1BF1EC8
    void ExtractVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>*& val);
    // private System.Void ExtractColorArrayImpl(System.Int32 name, out UnityEngine.Color[] val)
    // Offset: 0x1BF1F20
    void ExtractColorArrayImpl(int name, ::Array<UnityEngine::Color>*& val);
    // private System.Void ExtractMatrixArrayImpl(System.Int32 name, out UnityEngine.Matrix4x4[] val)
    // Offset: 0x1BF1F78
    void ExtractMatrixArrayImpl(int name, ::Array<UnityEngine::Matrix4x4>*& val);
    // private UnityEngine.Vector4 GetTextureScaleAndOffsetImpl(System.Int32 name)
    // Offset: 0x1BF1FD0
    UnityEngine::Vector4 GetTextureScaleAndOffsetImpl(int name);
    // private System.Void SetTextureOffsetImpl(System.Int32 name, UnityEngine.Vector2 offset)
    // Offset: 0x1BF2094
    void SetTextureOffsetImpl(int name, UnityEngine::Vector2 offset);
    // private System.Void SetTextureScaleImpl(System.Int32 name, UnityEngine.Vector2 scale)
    // Offset: 0x1BF2148
    void SetTextureScaleImpl(int name, UnityEngine::Vector2 scale);
    // private System.Void SetFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1BF21FC
    void SetFloatArray(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1BF2320
    void SetVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // private System.Void SetColorArray(System.Int32 name, UnityEngine.Color[] values, System.Int32 count)
    // Offset: 0x1BF2444
    void SetColorArray(int name, ::Array<UnityEngine::Color>* values, int count);
    // private System.Void SetMatrixArray(System.Int32 name, UnityEngine.Matrix4x4[] values, System.Int32 count)
    // Offset: 0x1BF2568
    void SetMatrixArray(int name, ::Array<UnityEngine::Matrix4x4>* values, int count);
    // private System.Void ExtractFloatArray(System.Int32 name, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1BF268C
    void ExtractFloatArray(int name, System::Collections::Generic::List_1<float>* values);
    // private System.Void ExtractVectorArray(System.Int32 name, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1BF2860
    void ExtractVectorArray(int name, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // private System.Void ExtractColorArray(System.Int32 name, System.Collections.Generic.List`1<UnityEngine.Color> values)
    // Offset: 0x1BF29F4
    void ExtractColorArray(int name, System::Collections::Generic::List_1<UnityEngine::Color>* values);
    // private System.Void ExtractMatrixArray(System.Int32 name, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1BF2B88
    void ExtractMatrixArray(int name, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // public System.Void SetFloat(System.String name, System.Single value)
    // Offset: 0x1BF2D1C
    void SetFloat(::Il2CppString* name, float value);
    // public System.Void SetFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x1BF2D88
    void SetFloat(int nameID, float value);
    // public System.Void SetInt(System.String name, System.Int32 value)
    // Offset: 0x1BF2DE8
    void SetInt(::Il2CppString* name, int value);
    // public System.Void SetInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x1BF2E58
    void SetInt(int nameID, int value);
    // public System.Void SetColor(System.String name, UnityEngine.Color value)
    // Offset: 0x1BF020C
    void SetColor(::Il2CppString* name, UnityEngine::Color value);
    // public System.Void SetColor(System.Int32 nameID, UnityEngine.Color value)
    // Offset: 0x1BF0208
    void SetColor(int nameID, UnityEngine::Color value);
    // public System.Void SetVector(System.String name, UnityEngine.Vector4 value)
    // Offset: 0x1BF2EB8
    void SetVector(::Il2CppString* name, UnityEngine::Vector4 value);
    // public System.Void SetVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x1BF2F24
    void SetVector(int nameID, UnityEngine::Vector4 value);
    // public System.Void SetMatrix(System.String name, UnityEngine.Matrix4x4 value)
    // Offset: 0x1BF2F54
    void SetMatrix(::Il2CppString* name, UnityEngine::Matrix4x4 value);
    // public System.Void SetMatrix(System.Int32 nameID, UnityEngine.Matrix4x4 value)
    // Offset: 0x1BF2FD4
    void SetMatrix(int nameID, UnityEngine::Matrix4x4 value);
    // public System.Void SetTexture(System.String name, UnityEngine.Texture value)
    // Offset: 0x1BF0504
    void SetTexture(::Il2CppString* name, UnityEngine::Texture* value);
    // public System.Void SetTexture(System.Int32 nameID, UnityEngine.Texture value)
    // Offset: 0x1BF04AC
    void SetTexture(int nameID, UnityEngine::Texture* value);
    // public System.Void SetTexture(System.String name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element)
    // Offset: 0x1BF3044
    void SetTexture(::Il2CppString* name, UnityEngine::RenderTexture* value, UnityEngine::Rendering::RenderTextureSubElement element);
    // public System.Void SetTexture(System.Int32 nameID, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element)
    // Offset: 0x1BF30B8
    void SetTexture(int nameID, UnityEngine::RenderTexture* value, UnityEngine::Rendering::RenderTextureSubElement element);
    // public System.Void SetBuffer(System.String name, UnityEngine.ComputeBuffer value)
    // Offset: 0x1BF3120
    void SetBuffer(::Il2CppString* name, UnityEngine::ComputeBuffer* value);
    // public System.Void SetBuffer(System.Int32 nameID, UnityEngine.ComputeBuffer value)
    // Offset: 0x1BF3184
    void SetBuffer(int nameID, UnityEngine::ComputeBuffer* value);
    // public System.Void SetConstantBuffer(System.String name, UnityEngine.ComputeBuffer value, System.Int32 offset, System.Int32 size)
    // Offset: 0x1BF31DC
    void SetConstantBuffer(::Il2CppString* name, UnityEngine::ComputeBuffer* value, int offset, int size);
    // public System.Void SetConstantBuffer(System.Int32 nameID, UnityEngine.ComputeBuffer value, System.Int32 offset, System.Int32 size)
    // Offset: 0x1BF3258
    void SetConstantBuffer(int nameID, UnityEngine::ComputeBuffer* value, int offset, int size);
    // public System.Void SetFloatArray(System.String name, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1BF32C8
    void SetFloatArray(::Il2CppString* name, System::Collections::Generic::List_1<float>* values);
    // public System.Void SetFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1BF3354
    void SetFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // public System.Void SetFloatArray(System.String name, System.Single[] values)
    // Offset: 0x1BF33D0
    void SetFloatArray(::Il2CppString* name, ::Array<float>* values);
    // public System.Void SetFloatArray(System.Int32 nameID, System.Single[] values)
    // Offset: 0x1BF3414
    void SetFloatArray(int nameID, ::Array<float>* values);
    // public System.Void SetColorArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Color> values)
    // Offset: 0x1BF342C
    void SetColorArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Color>* values);
    // public System.Void SetColorArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Color> values)
    // Offset: 0x1BF34B8
    void SetColorArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Color>* values);
    // public System.Void SetColorArray(System.String name, UnityEngine.Color[] values)
    // Offset: 0x1BF3534
    void SetColorArray(::Il2CppString* name, ::Array<UnityEngine::Color>* values);
    // public System.Void SetColorArray(System.Int32 nameID, UnityEngine.Color[] values)
    // Offset: 0x1BF3578
    void SetColorArray(int nameID, ::Array<UnityEngine::Color>* values);
    // public System.Void SetVectorArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1BF3590
    void SetVectorArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // public System.Void SetVectorArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1BF361C
    void SetVectorArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // public System.Void SetVectorArray(System.String name, UnityEngine.Vector4[] values)
    // Offset: 0x1BF3698
    void SetVectorArray(::Il2CppString* name, ::Array<UnityEngine::Vector4>* values);
    // public System.Void SetVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x1BF36DC
    void SetVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // public System.Void SetMatrixArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1BF36F4
    void SetMatrixArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // public System.Void SetMatrixArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1BF3780
    void SetMatrixArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // public System.Void SetMatrixArray(System.String name, UnityEngine.Matrix4x4[] values)
    // Offset: 0x1BF37FC
    void SetMatrixArray(::Il2CppString* name, ::Array<UnityEngine::Matrix4x4>* values);
    // public System.Void SetMatrixArray(System.Int32 nameID, UnityEngine.Matrix4x4[] values)
    // Offset: 0x1BF3840
    void SetMatrixArray(int nameID, ::Array<UnityEngine::Matrix4x4>* values);
    // public System.Single GetFloat(System.String name)
    // Offset: 0x1BF3858
    float GetFloat(::Il2CppString* name);
    // public System.Single GetFloat(System.Int32 nameID)
    // Offset: 0x1BF38B4
    float GetFloat(int nameID);
    // public System.Int32 GetInt(System.String name)
    // Offset: 0x1BF3904
    int GetInt(::Il2CppString* name);
    // public System.Int32 GetInt(System.Int32 nameID)
    // Offset: 0x1BF3968
    int GetInt(int nameID);
    // public UnityEngine.Color GetColor(System.String name)
    // Offset: 0x1BF011C
    UnityEngine::Color GetColor(::Il2CppString* name);
    // public UnityEngine.Color GetColor(System.Int32 nameID)
    // Offset: 0x1BF0118
    UnityEngine::Color GetColor(int nameID);
    // public UnityEngine.Vector4 GetVector(System.String name)
    // Offset: 0x1BF39C0
    UnityEngine::Vector4 GetVector(::Il2CppString* name);
    // public UnityEngine.Vector4 GetVector(System.Int32 nameID)
    // Offset: 0x1BF39F8
    UnityEngine::Vector4 GetVector(int nameID);
    // public UnityEngine.Matrix4x4 GetMatrix(System.String name)
    // Offset: 0x1BF3A10
    UnityEngine::Matrix4x4 GetMatrix(::Il2CppString* name);
    // public UnityEngine.Matrix4x4 GetMatrix(System.Int32 nameID)
    // Offset: 0x1BF3AB8
    UnityEngine::Matrix4x4 GetMatrix(int nameID);
    // public UnityEngine.Texture GetTexture(System.String name)
    // Offset: 0x1BF0380
    UnityEngine::Texture* GetTexture(::Il2CppString* name);
    // public UnityEngine.Texture GetTexture(System.Int32 nameID)
    // Offset: 0x1BF0330
    UnityEngine::Texture* GetTexture(int nameID);
    // public System.Single[] GetFloatArray(System.String name)
    // Offset: 0x1BF3B50
    ::Array<float>* GetFloatArray(::Il2CppString* name);
    // public System.Single[] GetFloatArray(System.Int32 nameID)
    // Offset: 0x1BF3B80
    ::Array<float>* GetFloatArray(int nameID);
    // public UnityEngine.Color[] GetColorArray(System.String name)
    // Offset: 0x1BF3C14
    ::Array<UnityEngine::Color>* GetColorArray(::Il2CppString* name);
    // public UnityEngine.Color[] GetColorArray(System.Int32 nameID)
    // Offset: 0x1BF3C44
    ::Array<UnityEngine::Color>* GetColorArray(int nameID);
    // public UnityEngine.Vector4[] GetVectorArray(System.String name)
    // Offset: 0x1BF3CD8
    ::Array<UnityEngine::Vector4>* GetVectorArray(::Il2CppString* name);
    // public UnityEngine.Vector4[] GetVectorArray(System.Int32 nameID)
    // Offset: 0x1BF3D08
    ::Array<UnityEngine::Vector4>* GetVectorArray(int nameID);
    // public UnityEngine.Matrix4x4[] GetMatrixArray(System.String name)
    // Offset: 0x1BF3D9C
    ::Array<UnityEngine::Matrix4x4>* GetMatrixArray(::Il2CppString* name);
    // public UnityEngine.Matrix4x4[] GetMatrixArray(System.Int32 nameID)
    // Offset: 0x1BF3DCC
    ::Array<UnityEngine::Matrix4x4>* GetMatrixArray(int nameID);
    // public System.Void GetFloatArray(System.String name, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1BF3E60
    void GetFloatArray(::Il2CppString* name, System::Collections::Generic::List_1<float>* values);
    // public System.Void GetFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1BF3E98
    void GetFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // public System.Void GetColorArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Color> values)
    // Offset: 0x1BF3E9C
    void GetColorArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Color>* values);
    // public System.Void GetColorArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Color> values)
    // Offset: 0x1BF3ED4
    void GetColorArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Color>* values);
    // public System.Void GetVectorArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1BF3ED8
    void GetVectorArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // public System.Void GetVectorArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1BF3F10
    void GetVectorArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // public System.Void GetMatrixArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1BF3F14
    void GetMatrixArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // public System.Void GetMatrixArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1BF3F4C
    void GetMatrixArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // public System.Void SetTextureOffset(System.String name, UnityEngine.Vector2 value)
    // Offset: 0x1BF0708
    void SetTextureOffset(::Il2CppString* name, UnityEngine::Vector2 value);
    // public System.Void SetTextureOffset(System.Int32 nameID, UnityEngine.Vector2 value)
    // Offset: 0x1BF0704
    void SetTextureOffset(int nameID, UnityEngine::Vector2 value);
    // public System.Void SetTextureScale(System.String name, UnityEngine.Vector2 value)
    // Offset: 0x1BF08E8
    void SetTextureScale(::Il2CppString* name, UnityEngine::Vector2 value);
    // public System.Void SetTextureScale(System.Int32 nameID, UnityEngine.Vector2 value)
    // Offset: 0x1BF08E4
    void SetTextureScale(int nameID, UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 GetTextureOffset(System.String name)
    // Offset: 0x1BF0630
    UnityEngine::Vector2 GetTextureOffset(::Il2CppString* name);
    // public UnityEngine.Vector2 GetTextureOffset(System.Int32 nameID)
    // Offset: 0x1BF05F8
    UnityEngine::Vector2 GetTextureOffset(int nameID);
    // public UnityEngine.Vector2 GetTextureScale(System.String name)
    // Offset: 0x1BF0810
    UnityEngine::Vector2 GetTextureScale(::Il2CppString* name);
    // public UnityEngine.Vector2 GetTextureScale(System.Int32 nameID)
    // Offset: 0x1BF07E0
    UnityEngine::Vector2 GetTextureScale(int nameID);
    // private System.Void SetColorImpl_Injected(System.Int32 name, ref UnityEngine.Color value)
    // Offset: 0x1BF1584
    void SetColorImpl_Injected(int name, UnityEngine::Color& value);
    // private System.Void SetMatrixImpl_Injected(System.Int32 name, ref UnityEngine.Matrix4x4 value)
    // Offset: 0x1BF1634
    void SetMatrixImpl_Injected(int name, UnityEngine::Matrix4x4& value);
    // private System.Void GetColorImpl_Injected(System.Int32 name, out UnityEngine.Color ret)
    // Offset: 0x1BF18D0
    void GetColorImpl_Injected(int name, UnityEngine::Color& ret);
    // private System.Void GetMatrixImpl_Injected(System.Int32 name, out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1BF19A8
    void GetMatrixImpl_Injected(int name, UnityEngine::Matrix4x4& ret);
    // private System.Void GetTextureScaleAndOffsetImpl_Injected(System.Int32 name, out UnityEngine.Vector4 ret)
    // Offset: 0x1BF203C
    void GetTextureScaleAndOffsetImpl_Injected(int name, UnityEngine::Vector4& ret);
    // private System.Void SetTextureOffsetImpl_Injected(System.Int32 name, ref UnityEngine.Vector2 offset)
    // Offset: 0x1BF20F0
    void SetTextureOffsetImpl_Injected(int name, UnityEngine::Vector2& offset);
    // private System.Void SetTextureScaleImpl_Injected(System.Int32 name, ref UnityEngine.Vector2 scale)
    // Offset: 0x1BF21A4
    void SetTextureScaleImpl_Injected(int name, UnityEngine::Vector2& scale);
  }; // UnityEngine.Material
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Material*, "UnityEngine", "Material");
