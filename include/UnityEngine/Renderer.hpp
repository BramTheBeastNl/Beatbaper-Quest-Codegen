// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: MotionVectorGenerationMode
  struct MotionVectorGenerationMode;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShadowCastingMode
  struct ShadowCastingMode;
  // Forward declaring type: LightProbeUsage
  struct LightProbeUsage;
  // Forward declaring type: ReflectionProbeUsage
  struct ReflectionProbeUsage;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Renderer
  // [NativeHeaderAttribute] Offset: D8EBC8
  // [UsedByNativeCodeAttribute] Offset: D8EBC8
  // [NativeHeaderAttribute] Offset: D8EBC8
  // [RequireComponent] Offset: D8EBC8
  class Renderer : public UnityEngine::Component {
    public:
    // Creating value type constructor for type: Renderer
    Renderer() noexcept {}
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1B2BAC0
    UnityEngine::Bounds get_bounds();
    // private UnityEngine.Material GetMaterial()
    // Offset: 0x1B2BB7C
    UnityEngine::Material* GetMaterial();
    // private UnityEngine.Material GetSharedMaterial()
    // Offset: 0x1B2BBBC
    UnityEngine::Material* GetSharedMaterial();
    // private System.Void SetMaterial(UnityEngine.Material m)
    // Offset: 0x1B2BBFC
    void SetMaterial(UnityEngine::Material* m);
    // private UnityEngine.Material[] GetMaterialArray()
    // Offset: 0x1B2BC4C
    ::Array<UnityEngine::Material*>* GetMaterialArray();
    // private System.Void CopySharedMaterialArray(out UnityEngine.Material[] m)
    // Offset: 0x1B2BC8C
    void CopySharedMaterialArray(::Array<UnityEngine::Material*>*& m);
    // private System.Void SetMaterialArray(UnityEngine.Material[] m)
    // Offset: 0x1B2BCDC
    void SetMaterialArray(::Array<UnityEngine::Material*>* m);
    // System.Void Internal_SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x1B2BD2C
    void Internal_SetPropertyBlock(UnityEngine::MaterialPropertyBlock* properties);
    // System.Void Internal_SetPropertyBlockMaterialIndex(UnityEngine.MaterialPropertyBlock properties, System.Int32 materialIndex)
    // Offset: 0x1B2BD7C
    void Internal_SetPropertyBlockMaterialIndex(UnityEngine::MaterialPropertyBlock* properties, int materialIndex);
    // public System.Void SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties)
    // Offset: 0x1B2BDD4
    void SetPropertyBlock(UnityEngine::MaterialPropertyBlock* properties);
    // public System.Void SetPropertyBlock(UnityEngine.MaterialPropertyBlock properties, System.Int32 materialIndex)
    // Offset: 0x1B2BE24
    void SetPropertyBlock(UnityEngine::MaterialPropertyBlock* properties, int materialIndex);
    // public System.Boolean get_enabled()
    // Offset: 0x1B2BE7C
    bool get_enabled();
    // public System.Void set_enabled(System.Boolean value)
    // Offset: 0x1B2BEBC
    void set_enabled(bool value);
    // public System.Boolean get_isVisible()
    // Offset: 0x1B2BF0C
    bool get_isVisible();
    // public System.Void set_shadowCastingMode(UnityEngine.Rendering.ShadowCastingMode value)
    // Offset: 0x1B2BF4C
    void set_shadowCastingMode(UnityEngine::Rendering::ShadowCastingMode value);
    // public System.Void set_receiveShadows(System.Boolean value)
    // Offset: 0x1B2BF9C
    void set_receiveShadows(bool value);
    // public System.Void set_motionVectorGenerationMode(UnityEngine.MotionVectorGenerationMode value)
    // Offset: 0x1B2BFEC
    void set_motionVectorGenerationMode(UnityEngine::MotionVectorGenerationMode value);
    // public System.Void set_lightProbeUsage(UnityEngine.Rendering.LightProbeUsage value)
    // Offset: 0x1B2C03C
    void set_lightProbeUsage(UnityEngine::Rendering::LightProbeUsage value);
    // public System.Void set_reflectionProbeUsage(UnityEngine.Rendering.ReflectionProbeUsage value)
    // Offset: 0x1B2C08C
    void set_reflectionProbeUsage(UnityEngine::Rendering::ReflectionProbeUsage value);
    // public System.Int32 get_sortingLayerID()
    // Offset: 0x1B2C0DC
    int get_sortingLayerID();
    // public System.Void set_sortingLayerID(System.Int32 value)
    // Offset: 0x1B2C11C
    void set_sortingLayerID(int value);
    // public System.Int32 get_sortingOrder()
    // Offset: 0x1B2C16C
    int get_sortingOrder();
    // public System.Void set_sortingOrder(System.Int32 value)
    // Offset: 0x1B2C1AC
    void set_sortingOrder(int value);
    // public System.Void set_allowOcclusionWhenDynamic(System.Boolean value)
    // Offset: 0x1B2C1FC
    void set_allowOcclusionWhenDynamic(bool value);
    // public System.Boolean get_isPartOfStaticBatch()
    // Offset: 0x1B2C24C
    bool get_isPartOfStaticBatch();
    // private System.Int32 GetMaterialCount()
    // Offset: 0x1B2C28C
    int GetMaterialCount();
    // private UnityEngine.Material[] GetSharedMaterialArray()
    // Offset: 0x1B2C2CC
    ::Array<UnityEngine::Material*>* GetSharedMaterialArray();
    // public UnityEngine.Material[] get_materials()
    // Offset: 0x1B2C30C
    ::Array<UnityEngine::Material*>* get_materials();
    // public System.Void set_materials(UnityEngine.Material[] value)
    // Offset: 0x1B2C34C
    void set_materials(::Array<UnityEngine::Material*>* value);
    // public UnityEngine.Material get_material()
    // Offset: 0x1B2C39C
    UnityEngine::Material* get_material();
    // public System.Void set_material(UnityEngine.Material value)
    // Offset: 0x1B2C3DC
    void set_material(UnityEngine::Material* value);
    // public UnityEngine.Material get_sharedMaterial()
    // Offset: 0x1B2C42C
    UnityEngine::Material* get_sharedMaterial();
    // public System.Void set_sharedMaterial(UnityEngine.Material value)
    // Offset: 0x1B2C46C
    void set_sharedMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material[] get_sharedMaterials()
    // Offset: 0x1B2C4BC
    ::Array<UnityEngine::Material*>* get_sharedMaterials();
    // public System.Void set_sharedMaterials(UnityEngine.Material[] value)
    // Offset: 0x1B2C4FC
    void set_sharedMaterials(::Array<UnityEngine::Material*>* value);
    // public System.Void GetSharedMaterials(System.Collections.Generic.List`1<UnityEngine.Material> m)
    // Offset: 0x1B2C54C
    void GetSharedMaterials(System::Collections::Generic::List_1<UnityEngine::Material*>* m);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x1B2BB2C
    void get_bounds_Injected(UnityEngine::Bounds& ret);
    // public System.Void .ctor()
    // Offset: 0x1B2C664
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Renderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Renderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Renderer*, creationType>()));
    }
  }; // UnityEngine.Renderer
  #pragma pack(pop)
  // Writing MetadataGetter for method: Renderer::get_bounds
  // Il2CppName: get_bounds
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (Renderer::*)()>(&Renderer::get_bounds)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::GetMaterial
  // Il2CppName: GetMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (Renderer::*)()>(&Renderer::GetMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::GetSharedMaterial
  // Il2CppName: GetSharedMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (Renderer::*)()>(&Renderer::GetSharedMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "GetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::SetMaterial
  // Il2CppName: SetMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Material*)>(&Renderer::SetMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "SetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::GetMaterialArray
  // Il2CppName: GetMaterialArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (Renderer::*)()>(&Renderer::GetMaterialArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "GetMaterialArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::CopySharedMaterialArray
  // Il2CppName: CopySharedMaterialArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(::Array<UnityEngine::Material*>*&)>(&Renderer::CopySharedMaterialArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "CopySharedMaterialArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*&>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::SetMaterialArray
  // Il2CppName: SetMaterialArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(::Array<UnityEngine::Material*>*)>(&Renderer::SetMaterialArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "SetMaterialArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::Internal_SetPropertyBlock
  // Il2CppName: Internal_SetPropertyBlock
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::MaterialPropertyBlock*)>(&Renderer::Internal_SetPropertyBlock)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "Internal_SetPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::Internal_SetPropertyBlockMaterialIndex
  // Il2CppName: Internal_SetPropertyBlockMaterialIndex
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::MaterialPropertyBlock*, int)>(&Renderer::Internal_SetPropertyBlockMaterialIndex)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "Internal_SetPropertyBlockMaterialIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::SetPropertyBlock
  // Il2CppName: SetPropertyBlock
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::MaterialPropertyBlock*)>(&Renderer::SetPropertyBlock)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "SetPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::SetPropertyBlock
  // Il2CppName: SetPropertyBlock
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::MaterialPropertyBlock*, int)>(&Renderer::SetPropertyBlock)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "SetPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MaterialPropertyBlock*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_enabled
  // Il2CppName: get_enabled
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Renderer::*)()>(&Renderer::get_enabled)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_enabled
  // Il2CppName: set_enabled
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(bool)>(&Renderer::set_enabled)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_isVisible
  // Il2CppName: get_isVisible
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Renderer::*)()>(&Renderer::get_isVisible)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_isVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_shadowCastingMode
  // Il2CppName: set_shadowCastingMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Rendering::ShadowCastingMode)>(&Renderer::set_shadowCastingMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_shadowCastingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ShadowCastingMode>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_receiveShadows
  // Il2CppName: set_receiveShadows
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(bool)>(&Renderer::set_receiveShadows)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_receiveShadows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_motionVectorGenerationMode
  // Il2CppName: set_motionVectorGenerationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::MotionVectorGenerationMode)>(&Renderer::set_motionVectorGenerationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_motionVectorGenerationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MotionVectorGenerationMode>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_lightProbeUsage
  // Il2CppName: set_lightProbeUsage
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Rendering::LightProbeUsage)>(&Renderer::set_lightProbeUsage)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_lightProbeUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::LightProbeUsage>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_reflectionProbeUsage
  // Il2CppName: set_reflectionProbeUsage
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Rendering::ReflectionProbeUsage)>(&Renderer::set_reflectionProbeUsage)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_reflectionProbeUsage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::ReflectionProbeUsage>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_sortingLayerID
  // Il2CppName: get_sortingLayerID
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Renderer::*)()>(&Renderer::get_sortingLayerID)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_sortingLayerID
  // Il2CppName: set_sortingLayerID
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(int)>(&Renderer::set_sortingLayerID)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_sortingOrder
  // Il2CppName: get_sortingOrder
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Renderer::*)()>(&Renderer::get_sortingOrder)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_sortingOrder
  // Il2CppName: set_sortingOrder
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(int)>(&Renderer::set_sortingOrder)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_allowOcclusionWhenDynamic
  // Il2CppName: set_allowOcclusionWhenDynamic
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(bool)>(&Renderer::set_allowOcclusionWhenDynamic)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_allowOcclusionWhenDynamic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_isPartOfStaticBatch
  // Il2CppName: get_isPartOfStaticBatch
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Renderer::*)()>(&Renderer::get_isPartOfStaticBatch)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_isPartOfStaticBatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::GetMaterialCount
  // Il2CppName: GetMaterialCount
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Renderer::*)()>(&Renderer::GetMaterialCount)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "GetMaterialCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::GetSharedMaterialArray
  // Il2CppName: GetSharedMaterialArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (Renderer::*)()>(&Renderer::GetSharedMaterialArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "GetSharedMaterialArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_materials
  // Il2CppName: get_materials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (Renderer::*)()>(&Renderer::get_materials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_materials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_materials
  // Il2CppName: set_materials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(::Array<UnityEngine::Material*>*)>(&Renderer::set_materials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_materials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_material
  // Il2CppName: get_material
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (Renderer::*)()>(&Renderer::get_material)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_material
  // Il2CppName: set_material
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Material*)>(&Renderer::set_material)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_sharedMaterial
  // Il2CppName: get_sharedMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (Renderer::*)()>(&Renderer::get_sharedMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_sharedMaterial
  // Il2CppName: set_sharedMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Material*)>(&Renderer::set_sharedMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_sharedMaterials
  // Il2CppName: get_sharedMaterials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (Renderer::*)()>(&Renderer::get_sharedMaterials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_sharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Renderer::set_sharedMaterials
  // Il2CppName: set_sharedMaterials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(::Array<UnityEngine::Material*>*)>(&Renderer::set_sharedMaterials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "set_sharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::GetSharedMaterials
  // Il2CppName: GetSharedMaterials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(System::Collections::Generic::List_1<UnityEngine::Material*>*)>(&Renderer::GetSharedMaterials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "GetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Material*>*>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::get_bounds_Injected
  // Il2CppName: get_bounds_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)(UnityEngine::Bounds&)>(&Renderer::get_bounds_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), "get_bounds_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Bounds&>()});
    }
  };
  // Writing MetadataGetter for method: Renderer::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)()>(&Renderer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Renderer::*)()>(&Renderer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Renderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Renderer*, "UnityEngine", "Renderer");
