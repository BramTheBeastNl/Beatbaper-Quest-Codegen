// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: UnityEngine::AI
namespace UnityEngine::AI {
  // Forward declaring type: NavMeshPathStatus
  struct NavMeshPathStatus;
}
// Completed forward declares
// Type namespace: UnityEngine.AI
namespace UnityEngine::AI {
  // Size: 0x20
  // Autogenerated type: UnityEngine.AI.NavMeshPath
  // [] Offset: FFFFFFFF
  // [MovedFromAttribute] Offset: D9CD88
  // [NativeHeaderAttribute] Offset: D9CD88
  class NavMeshPath : public ::Il2CppObject {
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // UnityEngine.Vector3[] m_Corners
    // Size: 0x8
    // Offset: 0x18
    ::Array<UnityEngine::Vector3>* m_Corners;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // Creating value type constructor for type: NavMeshPath
    NavMeshPath(System::IntPtr m_Ptr_ = {}, ::Array<UnityEngine::Vector3>* m_Corners_ = {}) noexcept : m_Ptr{m_Ptr_}, m_Corners{m_Corners_} {}
    // static private System.IntPtr InitializeNavMeshPath()
    // Offset: 0x1A0A974
    static System::IntPtr InitializeNavMeshPath();
    // static private System.Void DestroyNavMeshPath(System.IntPtr ptr)
    // Offset: 0x1A0AA6C
    static void DestroyNavMeshPath(System::IntPtr ptr);
    // private UnityEngine.Vector3[] CalculateCornersInternal()
    // Offset: 0x1A0AAAC
    ::Array<UnityEngine::Vector3>* CalculateCornersInternal();
    // private System.Void ClearCornersInternal()
    // Offset: 0x1A0AAEC
    void ClearCornersInternal();
    // public System.Void ClearCorners()
    // Offset: 0x1A0A6BC
    void ClearCorners();
    // private System.Void CalculateCorners()
    // Offset: 0x1A0AB2C
    void CalculateCorners();
    // public UnityEngine.Vector3[] get_corners()
    // Offset: 0x1A0ABA0
    ::Array<UnityEngine::Vector3>* get_corners();
    // public UnityEngine.AI.NavMeshPathStatus get_status()
    // Offset: 0x1A0ABC4
    UnityEngine::AI::NavMeshPathStatus get_status();
    // public System.Void .ctor()
    // Offset: 0x1A0A928
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavMeshPath* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::AI").WithContext("NavMeshPath").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavMeshPath*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1A0A9A8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.AI.NavMeshPath
  static check_size<sizeof(NavMeshPath), 24 + sizeof(::Array<UnityEngine::Vector3>*)> __UnityEngine_AI_NavMeshPathSizeCheck;
  static_assert(sizeof(NavMeshPath) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AI::NavMeshPath*, "UnityEngine.AI", "NavMeshPath");
#pragma pack(pop)
