// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Color32
  struct Color32;
  // Forward declaring type: ParticleSystemStopBehavior
  struct ParticleSystemStopBehavior;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.ParticleSystem
  class ParticleSystem : public UnityEngine::Component {
    public:
    // Nested type: UnityEngine::ParticleSystem::MainModule
    struct MainModule;
    // Nested type: UnityEngine::ParticleSystem::EmissionModule
    struct EmissionModule;
    // Nested type: UnityEngine::ParticleSystem::ShapeModule
    struct ShapeModule;
    // Nested type: UnityEngine::ParticleSystem::Particle
    struct Particle;
    // Nested type: UnityEngine::ParticleSystem::MinMaxCurve
    struct MinMaxCurve;
    // Nested type: UnityEngine::ParticleSystem::MinMaxGradient
    struct MinMaxGradient;
    // Nested type: UnityEngine::ParticleSystem::EmitParams
    struct EmitParams;
    // Nested type: UnityEngine::ParticleSystem::ForceOverLifetimeModule
    struct ForceOverLifetimeModule;
    // public System.Void Emit(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, System.Single size, System.Single lifetime, UnityEngine.Color32 color)
    // Offset: 0x18C09E0
    void Emit(UnityEngine::Vector3 position, UnityEngine::Vector3 velocity, float size, float lifetime, UnityEngine::Color32 color);
    // public System.Void Emit(UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x18C0D6C
    void Emit(UnityEngine::ParticleSystem::Particle particle);
    // public System.Int32 get_particleCount()
    // Offset: 0x18C0DBC
    int get_particleCount();
    // public System.Single get_time()
    // Offset: 0x18C0DFC
    float get_time();
    // public System.UInt32 get_randomSeed()
    // Offset: 0x18C0E3C
    uint get_randomSeed();
    // public System.Void set_randomSeed(System.UInt32 value)
    // Offset: 0x18C0E7C
    void set_randomSeed(uint value);
    // public System.Boolean get_useAutoRandomSeed()
    // Offset: 0x18C0ECC
    bool get_useAutoRandomSeed();
    // public System.Void set_useAutoRandomSeed(System.Boolean value)
    // Offset: 0x18C0F0C
    void set_useAutoRandomSeed(bool value);
    // public System.Void SetParticles(UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size, System.Int32 offset)
    // Offset: 0x18C0F5C
    void SetParticles(::Array<UnityEngine::ParticleSystem::Particle>*& particles, int size, int offset);
    // public System.Void SetParticles(UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size)
    // Offset: 0x18C0FC4
    void SetParticles(::Array<UnityEngine::ParticleSystem::Particle>*& particles, int size);
    // public System.Int32 GetParticles(UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size, System.Int32 offset)
    // Offset: 0x18C1020
    int GetParticles(::Array<UnityEngine::ParticleSystem::Particle>*& particles, int size, int offset);
    // public System.Int32 GetParticles(UnityEngine.ParticleSystem/Particle[] particles, System.Int32 size)
    // Offset: 0x18C1088
    int GetParticles(::Array<UnityEngine::ParticleSystem::Particle>*& particles, int size);
    // public System.Int32 GetParticles(UnityEngine.ParticleSystem/Particle[] particles)
    // Offset: 0x18C10E4
    int GetParticles(::Array<UnityEngine::ParticleSystem::Particle>*& particles);
    // public System.Void Simulate(System.Single t, System.Boolean withChildren, System.Boolean restart, System.Boolean fixedTimeStep)
    // Offset: 0x18C113C
    void Simulate(float t, bool withChildren, bool restart, bool fixedTimeStep);
    // public System.Void Simulate(System.Single t, System.Boolean withChildren, System.Boolean restart)
    // Offset: 0x18C11B4
    void Simulate(float t, bool withChildren, bool restart);
    // public System.Void Stop(System.Boolean withChildren, UnityEngine.ParticleSystemStopBehavior stopBehavior)
    // Offset: 0x18C1220
    void Stop(bool withChildren, UnityEngine::ParticleSystemStopBehavior stopBehavior);
    // public System.Void Clear(System.Boolean withChildren)
    // Offset: 0x18C1278
    void Clear(bool withChildren);
    // public System.Void Clear()
    // Offset: 0x18C12C8
    void Clear();
    // public System.Void Emit(System.Int32 count)
    // Offset: 0x18C130C
    void Emit(int count);
    // private System.Void Emit_Internal(System.Int32 count)
    // Offset: 0x18C135C
    void Emit_Internal(int count);
    // public System.Void Emit(UnityEngine.ParticleSystem/EmitParams emitParams, System.Int32 count)
    // Offset: 0x18C13AC
    void Emit(UnityEngine::ParticleSystem::EmitParams emitParams, int count);
    // private System.Void EmitOld_Internal(UnityEngine.ParticleSystem/Particle particle)
    // Offset: 0x18C0D1C
    void EmitOld_Internal(UnityEngine::ParticleSystem::Particle& particle);
    // public UnityEngine.ParticleSystem/MainModule get_main()
    // Offset: 0x18C145C
    UnityEngine::ParticleSystem::MainModule get_main();
    // public UnityEngine.ParticleSystem/EmissionModule get_emission()
    // Offset: 0x18C1490
    UnityEngine::ParticleSystem::EmissionModule get_emission();
    // public UnityEngine.ParticleSystem/ShapeModule get_shape()
    // Offset: 0x18C14C4
    UnityEngine::ParticleSystem::ShapeModule get_shape();
    // public UnityEngine.ParticleSystem/ForceOverLifetimeModule get_forceOverLifetime()
    // Offset: 0x18C14F8
    UnityEngine::ParticleSystem::ForceOverLifetimeModule get_forceOverLifetime();
    // private System.Void Emit_Injected(UnityEngine.ParticleSystem/EmitParams emitParams, System.Int32 count)
    // Offset: 0x18C1404
    void Emit_Injected(UnityEngine::ParticleSystem::EmitParams& emitParams, int count);
  }; // UnityEngine.ParticleSystem
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ParticleSystem*, "UnityEngine", "ParticleSystem");
#pragma pack(pop)
