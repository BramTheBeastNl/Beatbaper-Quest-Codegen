// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TrackAsset
  class TrackAsset;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.IMarker
  class IMarker {
    public:
    // Creating value type constructor for type: IMarker
    IMarker() noexcept {}
    // public System.Double get_time()
    // Offset: 0xFFFFFFFF
    double get_time();
    // public System.Void set_time(System.Double value)
    // Offset: 0xFFFFFFFF
    void set_time(double value);
    // public UnityEngine.Timeline.TrackAsset get_parent()
    // Offset: 0xFFFFFFFF
    UnityEngine::Timeline::TrackAsset* get_parent();
    // public System.Void Initialize(UnityEngine.Timeline.TrackAsset parent)
    // Offset: 0xFFFFFFFF
    void Initialize(UnityEngine::Timeline::TrackAsset* parent);
  }; // UnityEngine.Timeline.IMarker
  #pragma pack(pop)
  // Writing MetadataGetter for method: IMarker::get_time
  // Il2CppName: get_time
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (IMarker::*)()>(&IMarker::get_time)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMarker*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMarker::set_time
  // Il2CppName: set_time
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMarker::*)(double)>(&IMarker::set_time)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMarker*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: IMarker::get_parent
  // Il2CppName: get_parent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (IMarker::*)()>(&IMarker::get_parent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMarker*), "get_parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMarker::Initialize
  // Il2CppName: Initialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMarker::*)(UnityEngine::Timeline::TrackAsset*)>(&IMarker::Initialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMarker*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::IMarker*, "UnityEngine.Timeline", "IMarker");
