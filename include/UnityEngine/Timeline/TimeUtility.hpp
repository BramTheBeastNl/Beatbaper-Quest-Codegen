// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.TimeUtility
  class TimeUtility : public ::Il2CppObject {
    public:
    // Nested type: UnityEngine::Timeline::TimeUtility::$$c
    class $$c;
    // Creating value type constructor for type: TimeUtility
    TimeUtility() noexcept {}
    // Get static field: static public readonly System.Double kTimeEpsilon
    static double _get_kTimeEpsilon();
    // Set static field: static public readonly System.Double kTimeEpsilon
    static void _set_kTimeEpsilon(double value);
    // Get static field: static public readonly System.Double kFrameRateEpsilon
    static double _get_kFrameRateEpsilon();
    // Set static field: static public readonly System.Double kFrameRateEpsilon
    static void _set_kFrameRateEpsilon(double value);
    // Get static field: static public readonly System.Double k_MaxTimelineDurationInSeconds
    static double _get_k_MaxTimelineDurationInSeconds();
    // Set static field: static public readonly System.Double k_MaxTimelineDurationInSeconds
    static void _set_k_MaxTimelineDurationInSeconds(double value);
    // static private System.Void ValidateFrameRate(System.Double frameRate)
    // Offset: 0x17E7EDC
    static void ValidateFrameRate(double frameRate);
    // static public System.Int32 ToFrames(System.Double time, System.Double frameRate)
    // Offset: 0x17E7F94
    static int ToFrames(double time, double frameRate);
    // static public System.Double ToExactFrames(System.Double time, System.Double frameRate)
    // Offset: 0x17E8174
    static double ToExactFrames(double time, double frameRate);
    // static public System.Double FromFrames(System.Int32 frames, System.Double frameRate)
    // Offset: 0x17E81EC
    static double FromFrames(int frames, double frameRate);
    // static public System.Double FromFrames(System.Double frames, System.Double frameRate)
    // Offset: 0x17E8268
    static double FromFrames(double frames, double frameRate);
    // static public System.Boolean OnFrameBoundary(System.Double time, System.Double frameRate)
    // Offset: 0x17E82E0
    static bool OnFrameBoundary(double time, double frameRate);
    // static public System.Double GetEpsilon(System.Double time, System.Double frameRate)
    // Offset: 0x17E80C0
    static double GetEpsilon(double time, double frameRate);
    // static public System.Boolean OnFrameBoundary(System.Double time, System.Double frameRate, System.Double epsilon)
    // Offset: 0x17E8364
    static bool OnFrameBoundary(double time, double frameRate, double epsilon);
    // static public System.Double RoundToFrame(System.Double time, System.Double frameRate)
    // Offset: 0x17E8490
    static double RoundToFrame(double time, double frameRate);
    // static public System.String TimeAsFrames(System.Double timeValue, System.Double frameRate, System.String format)
    // Offset: 0x17E8550
    static ::Il2CppString* TimeAsFrames(double timeValue, double frameRate, ::Il2CppString* format);
    // static public System.String TimeAsTimeCode(System.Double timeValue, System.Double frameRate, System.String format)
    // Offset: 0x17E8650
    static ::Il2CppString* TimeAsTimeCode(double timeValue, double frameRate, ::Il2CppString* format);
    // static public System.Double ParseTimeCode(System.String timeCode, System.Double frameRate, System.Double defaultValue)
    // Offset: 0x17E8AD8
    static double ParseTimeCode(::Il2CppString* timeCode, double frameRate, double defaultValue);
    // static public System.Double GetAnimationClipLength(UnityEngine.AnimationClip clip)
    // Offset: 0x17D683C
    static double GetAnimationClipLength(UnityEngine::AnimationClip* clip);
    // static private System.String RemoveChar(System.String str, System.Func`2<System.Char,System.Boolean> charToRemoveFunc)
    // Offset: 0x17E9068
    static ::Il2CppString* RemoveChar(::Il2CppString* str, System::Func_2<::Il2CppChar, bool>* charToRemoveFunc);
    // static private System.Void .cctor()
    // Offset: 0x17E917C
    static void _cctor();
  }; // UnityEngine.Timeline.TimeUtility
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TimeUtility*, "UnityEngine.Timeline", "TimeUtility");
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::ValidateFrameRate
// Il2CppName: ValidateFrameRate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::ToFrames
// Il2CppName: ToFrames
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::ToExactFrames
// Il2CppName: ToExactFrames
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::FromFrames
// Il2CppName: FromFrames
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::FromFrames
// Il2CppName: FromFrames
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::OnFrameBoundary
// Il2CppName: OnFrameBoundary
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::GetEpsilon
// Il2CppName: GetEpsilon
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::OnFrameBoundary
// Il2CppName: OnFrameBoundary
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::RoundToFrame
// Il2CppName: RoundToFrame
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::TimeAsFrames
// Il2CppName: TimeAsFrames
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::TimeAsTimeCode
// Il2CppName: TimeAsTimeCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::ParseTimeCode
// Il2CppName: ParseTimeCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::GetAnimationClipLength
// Il2CppName: GetAnimationClipLength
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::RemoveChar
// Il2CppName: RemoveChar
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimeUtility::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
