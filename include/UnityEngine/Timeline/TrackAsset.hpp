// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Timeline.IPropertyPreview
#include "UnityEngine/Timeline/IPropertyPreview.hpp"
// Including type: UnityEngine.Timeline.ICurvesOwner
#include "UnityEngine/Timeline/ICurvesOwner.hpp"
// Including type: UnityEngine.Timeline.DiscreteTime
#include "UnityEngine/Timeline/DiscreteTime.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.Timeline.MarkerList
#include "UnityEngine/Timeline/MarkerList.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TimelineClip
  class TimelineClip;
  // Forward declaring type: TrackBindingTypeAttribute
  class TrackBindingTypeAttribute;
  // Forward declaring type: TimelineAsset
  class TimelineAsset;
  // Forward declaring type: IMarker
  class IMarker;
  // Forward declaring type: IntervalTree`1<T>
  template<typename T>
  class IntervalTree_1;
  // Forward declaring type: RuntimeElement
  class RuntimeElement;
  // Forward declaring type: IPropertyCollector
  class IPropertyCollector;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Skipping declaration: ScriptableObject because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Skipping declaration: IPlayableAsset because it is already included!
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Timeline.TrackAsset
  // [] Offset: FFFFFFFF
  // [IgnoreOnPlayableTrackAttribute] Offset: CE9428
  class TrackAsset : public UnityEngine::Playables::PlayableAsset/*, public UnityEngine::ISerializationCallbackReceiver, public UnityEngine::Timeline::IPropertyPreview, public UnityEngine::Timeline::ICurvesOwner*/ {
    public:
    // Nested type: UnityEngine::Timeline::TrackAsset::Versions
    struct Versions;
    // Nested type: UnityEngine::Timeline::TrackAsset::TrackAssetUpgrade
    class TrackAssetUpgrade;
    // Nested type: UnityEngine::Timeline::TrackAsset::TransientBuildData
    struct TransientBuildData;
    // Nested type: UnityEngine::Timeline::TrackAsset::$get_outputs$d__65
    class $get_outputs$d__65;
    // Nested type: UnityEngine::Timeline::TrackAsset::$$c
    class $$c;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.Timeline.TrackAsset/TransientBuildData
    // [] Offset: FFFFFFFF
    struct TransientBuildData/*, public System::ValueType*/ {
      public:
      // public System.Collections.Generic.List`1<UnityEngine.Timeline.TrackAsset> trackList
      // Size: 0x8
      // Offset: 0x0
      System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>* trackList;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*) == 0x8);
      // public System.Collections.Generic.List`1<UnityEngine.Timeline.TimelineClip> clipList
      // Size: 0x8
      // Offset: 0x8
      System::Collections::Generic::List_1<UnityEngine::Timeline::TimelineClip*>* clipList;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::TimelineClip*>*) == 0x8);
      // public System.Collections.Generic.List`1<UnityEngine.Timeline.IMarker> markerList
      // Size: 0x8
      // Offset: 0x10
      System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>* markerList;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>*) == 0x8);
      // Creating value type constructor for type: TransientBuildData
      constexpr TransientBuildData(System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>* trackList_ = {}, System::Collections::Generic::List_1<UnityEngine::Timeline::TimelineClip*>* clipList_ = {}, System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>* markerList_ = {}) noexcept : trackList{trackList_}, clipList{clipList_}, markerList{markerList_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // static public UnityEngine.Timeline.TrackAsset/TransientBuildData Create()
      // Offset: 0x20F0A54
      static UnityEngine::Timeline::TrackAsset::TransientBuildData Create();
      // public System.Void Clear()
      // Offset: 0xE0DBC8
      void Clear();
    }; // UnityEngine.Timeline.TrackAsset/TransientBuildData
    #pragma pack(pop)
    static check_size<sizeof(TrackAsset::TransientBuildData), 16 + sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>*)> __UnityEngine_Timeline_TrackAsset_TransientBuildDataSizeCheck;
    static_assert(sizeof(TrackAsset::TransientBuildData) == 0x18);
    // [HideInInspector] Offset: 0xCEA380
    // private System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x18
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [ObsoleteAttribute] Offset: 0xCEA3B8
    // [HideInInspector] Offset: 0xCEA3B8
    // [FormerlySerializedAsAttribute] Offset: 0xCEA3B8
    // UnityEngine.AnimationClip m_AnimClip
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AnimationClip* m_AnimClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationClip*) == 0x8);
    // [HideInInspector] Offset: 0xCEA45C
    // private System.Boolean m_Locked
    // Size: 0x1
    // Offset: 0x28
    bool m_Locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xCEA494
    // private System.Boolean m_Muted
    // Size: 0x1
    // Offset: 0x29
    bool m_Muted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xCEA4CC
    // private System.String m_CustomPlayableFullTypename
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* m_CustomPlayableFullTypename;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [HideInInspector] Offset: 0xCEA504
    // private UnityEngine.AnimationClip m_Curves
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::AnimationClip* m_Curves;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationClip*) == 0x8);
    // [HideInInspector] Offset: 0xCEA53C
    // private UnityEngine.Playables.PlayableAsset m_Parent
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Playables::PlayableAsset* m_Parent;
    // Field size check
    static_assert(sizeof(UnityEngine::Playables::PlayableAsset*) == 0x8);
    // [HideInInspector] Offset: 0xCEA574
    // private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Children
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* m_Children;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>*) == 0x8);
    // private System.Int32 m_ItemsHash
    // Size: 0x4
    // Offset: 0x50
    int m_ItemsHash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Timeline.TimelineClip[] m_ClipsCache
    // Size: 0x8
    // Offset: 0x58
    ::Array<UnityEngine::Timeline::TimelineClip*>* m_ClipsCache;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Timeline::TimelineClip*>*) == 0x8);
    // private UnityEngine.Timeline.DiscreteTime m_Start
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Timeline::DiscreteTime m_Start;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::DiscreteTime) == 0x8);
    // private UnityEngine.Timeline.DiscreteTime m_End
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Timeline::DiscreteTime m_End;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::DiscreteTime) == 0x8);
    // private System.Boolean m_CacheSorted
    // Size: 0x1
    // Offset: 0x70
    bool m_CacheSorted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Boolean> m_SupportsNotifications
    // Size: 0xFFFFFFFF
    // Offset: 0x71
    System::Nullable_1<bool> m_SupportsNotifications;
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> m_ChildTrackCache
    // Size: 0x8
    // Offset: 0x78
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* m_ChildTrackCache;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>*) == 0x8);
    // [HideInInspector] Offset: 0xCEA5AC
    // protected internal System.Collections.Generic.List`1<UnityEngine.Timeline.TimelineClip> m_Clips
    // Size: 0x8
    // Offset: 0x80
    System::Collections::Generic::List_1<UnityEngine::Timeline::TimelineClip*>* m_Clips;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::TimelineClip*>*) == 0x8);
    // [HideInInspector] Offset: 0xCEA5E4
    // private UnityEngine.Timeline.MarkerList m_Markers
    // Size: 0x12
    // Offset: 0x88
    UnityEngine::Timeline::MarkerList m_Markers;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::MarkerList) == 0x12);
    // Creating value type constructor for type: TrackAsset
    TrackAsset(int m_Version_ = {}, UnityEngine::AnimationClip* m_AnimClip_ = {}, bool m_Locked_ = {}, bool m_Muted_ = {}, ::Il2CppString* m_CustomPlayableFullTypename_ = {}, UnityEngine::AnimationClip* m_Curves_ = {}, UnityEngine::Playables::PlayableAsset* m_Parent_ = {}, System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* m_Children_ = {}, int m_ItemsHash_ = {}, ::Array<UnityEngine::Timeline::TimelineClip*>* m_ClipsCache_ = {}, UnityEngine::Timeline::DiscreteTime m_Start_ = {}, UnityEngine::Timeline::DiscreteTime m_End_ = {}, bool m_CacheSorted_ = {}, System::Nullable_1<bool> m_SupportsNotifications_ = {}, System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* m_ChildTrackCache_ = {}, System::Collections::Generic::List_1<UnityEngine::Timeline::TimelineClip*>* m_Clips_ = {}, UnityEngine::Timeline::MarkerList m_Markers_ = {}) noexcept : m_Version{m_Version_}, m_AnimClip{m_AnimClip_}, m_Locked{m_Locked_}, m_Muted{m_Muted_}, m_CustomPlayableFullTypename{m_CustomPlayableFullTypename_}, m_Curves{m_Curves_}, m_Parent{m_Parent_}, m_Children{m_Children_}, m_ItemsHash{m_ItemsHash_}, m_ClipsCache{m_ClipsCache_}, m_Start{m_Start_}, m_End{m_End_}, m_CacheSorted{m_CacheSorted_}, m_SupportsNotifications{m_SupportsNotifications_}, m_ChildTrackCache{m_ChildTrackCache_}, m_Clips{m_Clips_}, m_Markers{m_Markers_} {}
    // Creating interface conversion operator: operator UnityEngine::ISerializationCallbackReceiver
    operator UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::Timeline::IPropertyPreview
    operator UnityEngine::Timeline::IPropertyPreview() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::IPropertyPreview*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::Timeline::ICurvesOwner
    operator UnityEngine::Timeline::ICurvesOwner() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::ICurvesOwner*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 k_LatestVersion
    static constexpr const int k_LatestVersion = 3;
    // Get static field: static private System.Int32 k_LatestVersion
    static int _get_k_LatestVersion();
    // Set static field: static private System.Int32 k_LatestVersion
    static void _set_k_LatestVersion(int value);
    // Get static field: static private UnityEngine.Timeline.TrackAsset/TransientBuildData s_BuildData
    static UnityEngine::Timeline::TrackAsset::TransientBuildData _get_s_BuildData();
    // Set static field: static private UnityEngine.Timeline.TrackAsset/TransientBuildData s_BuildData
    static void _set_s_BuildData(UnityEngine::Timeline::TrackAsset::TransientBuildData value);
    // static field const value: static System.String kDefaultCurvesName
    static constexpr const char* kDefaultCurvesName = "Track Parameters";
    // Get static field: static System.String kDefaultCurvesName
    static ::Il2CppString* _get_kDefaultCurvesName();
    // Set static field: static System.String kDefaultCurvesName
    static void _set_kDefaultCurvesName(::Il2CppString* value);
    // [CompilerGeneratedAttribute] Offset: 0xCEA43C
    // Get static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnClipPlayableCreate
    static System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* _get_OnClipPlayableCreate();
    // Set static field: static private System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnClipPlayableCreate
    static void _set_OnClipPlayableCreate(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value);
    // [CompilerGeneratedAttribute] Offset: 0xCEA44C
    // Get static field: static private System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnTrackAnimationPlayableCreate
    static System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* _get_OnTrackAnimationPlayableCreate();
    // Set static field: static private System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> OnTrackAnimationPlayableCreate
    static void _set_OnTrackAnimationPlayableCreate(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value);
    // Get static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
    static ::Array<UnityEngine::Timeline::TrackAsset*>* _get_s_EmptyCache();
    // Set static field: static private UnityEngine.Timeline.TrackAsset[] s_EmptyCache
    static void _set_s_EmptyCache(::Array<UnityEngine::Timeline::TrackAsset*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
    static System::Collections::Generic::Dictionary_2<System::Type*, UnityEngine::Timeline::TrackBindingTypeAttribute*>* _get_s_TrackBindingTypeAttributeCache();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,UnityEngine.Timeline.TrackBindingTypeAttribute> s_TrackBindingTypeAttributeCache
    static void _set_s_TrackBindingTypeAttributeCache(System::Collections::Generic::Dictionary_2<System::Type*, UnityEngine::Timeline::TrackBindingTypeAttribute*>* value);
    // protected System.Void OnBeforeTrackSerialize()
    // Offset: 0x20EAC70
    void OnBeforeTrackSerialize_NEW();
    // protected System.Void OnAfterTrackDeserialize()
    // Offset: 0x20EAC74
    void OnAfterTrackDeserialize_NEW();
    // System.Void OnUpgradeFromVersion(System.Int32 oldVersion)
    // Offset: 0x20EAC78
    void OnUpgradeFromVersion_NEW(int oldVersion);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x20EAC7C
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_NEW();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x20EADDC
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_NEW();
    // private System.Void UpgradeToLatestVersion()
    // Offset: 0x20EB198
    void UpgradeToLatestVersion();
    // static System.Void add_OnClipPlayableCreate(System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> value)
    // Offset: 0x20EB1A8
    static void add_OnClipPlayableCreate(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value);
    // static System.Void remove_OnClipPlayableCreate(System.Action`3<UnityEngine.Timeline.TimelineClip,UnityEngine.GameObject,UnityEngine.Playables.Playable> value)
    // Offset: 0x20EB298
    static void remove_OnClipPlayableCreate(System::Action_3<UnityEngine::Timeline::TimelineClip*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value);
    // static System.Void add_OnTrackAnimationPlayableCreate(System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> value)
    // Offset: 0x20EB388
    static void add_OnTrackAnimationPlayableCreate(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value);
    // static System.Void remove_OnTrackAnimationPlayableCreate(System.Action`3<UnityEngine.Timeline.TrackAsset,UnityEngine.GameObject,UnityEngine.Playables.Playable> value)
    // Offset: 0x20EB478
    static void remove_OnTrackAnimationPlayableCreate(System::Action_3<UnityEngine::Timeline::TrackAsset*, UnityEngine::GameObject*, UnityEngine::Playables::Playable>* value);
    // public System.Double get_start()
    // Offset: 0x20EB568
    double get_start();
    // public System.Double get_end()
    // Offset: 0x20EB6EC
    double get_end();
    // public System.Boolean get_muted()
    // Offset: 0x20EB7E0
    bool get_muted();
    // public System.Void set_muted(System.Boolean value)
    // Offset: 0x20EB7E8
    void set_muted(bool value);
    // public System.Boolean get_mutedInHierarchy()
    // Offset: 0x20EB7F4
    bool get_mutedInHierarchy();
    // public UnityEngine.Timeline.TimelineAsset get_timelineAsset()
    // Offset: 0x20E8444
    UnityEngine::Timeline::TimelineAsset* get_timelineAsset();
    // public UnityEngine.Playables.PlayableAsset get_parent()
    // Offset: 0x20EB99C
    UnityEngine::Playables::PlayableAsset* get_parent();
    // System.Void set_parent(UnityEngine.Playables.PlayableAsset value)
    // Offset: 0x20EB9A4
    void set_parent(UnityEngine::Playables::PlayableAsset* value);
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TimelineClip> GetClips()
    // Offset: 0x20EB9AC
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TimelineClip*>* GetClips();
    // UnityEngine.Timeline.TimelineClip[] get_clips()
    // Offset: 0x20EB9B0
    ::Array<UnityEngine::Timeline::TimelineClip*>* get_clips();
    // public System.Boolean get_isEmpty()
    // Offset: 0x20EBA4C
    bool get_isEmpty_NEW();
    // public System.Boolean get_hasClips()
    // Offset: 0x20EBAC4
    bool get_hasClips();
    // public System.Boolean get_hasCurves()
    // Offset: 0x20EBB20
    bool get_hasCurves_NEW();
    // public System.Boolean get_isSubTrack()
    // Offset: 0x20E88D0
    bool get_isSubTrack();
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> GetChildTracks()
    // Offset: 0x20EBC80
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* GetChildTracks();
    // System.String get_customPlayableTypename()
    // Offset: 0x20EBE44
    ::Il2CppString* get_customPlayableTypename();
    // System.Void set_customPlayableTypename(System.String value)
    // Offset: 0x20EBE4C
    void set_customPlayableTypename(::Il2CppString* value);
    // public UnityEngine.AnimationClip get_curves()
    // Offset: 0x20EBE54
    UnityEngine::AnimationClip* get_curves_NEW();
    // System.Void set_curves(UnityEngine.AnimationClip value)
    // Offset: 0x20EBE5C
    void set_curves(UnityEngine::AnimationClip* value);
    // private System.String UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName()
    // Offset: 0x20EBE64
    ::Il2CppString* UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName_NEW();
    // private UnityEngine.Object UnityEngine.Timeline.ICurvesOwner.get_asset()
    // Offset: 0x20EBEAC
    UnityEngine::Object* UnityEngine_Timeline_ICurvesOwner_get_asset_NEW();
    // private UnityEngine.Object UnityEngine.Timeline.ICurvesOwner.get_assetOwner()
    // Offset: 0x20EBEB0
    UnityEngine::Object* UnityEngine_Timeline_ICurvesOwner_get_assetOwner_NEW();
    // private UnityEngine.Timeline.TrackAsset UnityEngine.Timeline.ICurvesOwner.get_targetTrack()
    // Offset: 0x20EBEB4
    UnityEngine::Timeline::TrackAsset* UnityEngine_Timeline_ICurvesOwner_get_targetTrack_NEW();
    // System.Collections.Generic.List`1<UnityEngine.ScriptableObject> get_subTracksObjects()
    // Offset: 0x20EBEB8
    System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* get_subTracksObjects();
    // public System.Boolean get_locked()
    // Offset: 0x20EBEC0
    bool get_locked();
    // public System.Void set_locked(System.Boolean value)
    // Offset: 0x20EBEC8
    void set_locked(bool value);
    // public System.Boolean get_lockedInHierarchy()
    // Offset: 0x20EBED4
    bool get_lockedInHierarchy();
    // public System.Boolean get_supportsNotifications()
    // Offset: 0x20EC07C
    bool get_supportsNotifications();
    // private System.Void __internalAwake()
    // Offset: 0x20EC120
    void __internalAwake();
    // public System.Void CreateCurves(System.String curvesClipName)
    // Offset: 0x20EC1C4
    void CreateCurves_NEW(::Il2CppString* curvesClipName);
    // public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    // Offset: 0x20EC278
    UnityEngine::Playables::Playable CreateTrackMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount);
    // public UnityEngine.Timeline.TimelineClip CreateDefaultClip()
    // Offset: 0x20EC358
    UnityEngine::Timeline::TimelineClip* CreateDefaultClip();
    // public UnityEngine.Timeline.TimelineClip CreateClip()
    // Offset: 0xFFFFFFFF
    template<class T>
    UnityEngine::Timeline::TimelineClip* CreateClip() {
      static_assert(std::is_convertible_v<T, UnityEngine::ScriptableObject*> && std::is_base_of_v<UnityEngine::Playables::IPlayableAsset, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateClip");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___generic__method);
    }
    // public System.Boolean DeleteClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x20EC62C
    bool DeleteClip(UnityEngine::Timeline::TimelineClip* clip);
    // public UnityEngine.Timeline.IMarker CreateMarker(System.Type type, System.Double time)
    // Offset: 0x20EC744
    UnityEngine::Timeline::IMarker* CreateMarker(System::Type* type, double time);
    // public T CreateMarker(System.Double time)
    // Offset: 0xFFFFFFFF
    template<class T>
    T CreateMarker(double time) {
      static_assert(std::is_convertible_v<T, UnityEngine::ScriptableObject*> && std::is_base_of_v<UnityEngine::Timeline::IMarker, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::CreateMarker");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateMarker", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(time)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method, time);
    }
    // public System.Boolean DeleteMarker(UnityEngine.Timeline.IMarker marker)
    // Offset: 0x20EC754
    bool DeleteMarker(UnityEngine::Timeline::IMarker* marker);
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.IMarker> GetMarkers()
    // Offset: 0x20EB19C
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::IMarker*>* GetMarkers();
    // public System.Int32 GetMarkerCount()
    // Offset: 0x20EBBBC
    int GetMarkerCount();
    // public UnityEngine.Timeline.IMarker GetMarker(System.Int32 idx)
    // Offset: 0x20EC760
    UnityEngine::Timeline::IMarker* GetMarker(int idx);
    // UnityEngine.Timeline.TimelineClip CreateClip(System.Type requestedType)
    // Offset: 0x20EC76C
    UnityEngine::Timeline::TimelineClip* CreateClip(System::Type* requestedType);
    // UnityEngine.Timeline.TimelineClip CreateAndAddNewClipOfType(System.Type requestedType)
    // Offset: 0x20EC5F8
    UnityEngine::Timeline::TimelineClip* CreateAndAddNewClipOfType(System::Type* requestedType);
    // UnityEngine.Timeline.TimelineClip CreateClipOfType(System.Type requestedType)
    // Offset: 0x20ECB68
    UnityEngine::Timeline::TimelineClip* CreateClipOfType(System::Type* requestedType);
    // UnityEngine.Timeline.TimelineClip CreateClipFromPlayableAsset(UnityEngine.Playables.IPlayableAsset asset)
    // Offset: 0x20ED010
    UnityEngine::Timeline::TimelineClip* CreateClipFromPlayableAsset(UnityEngine::Playables::IPlayableAsset* asset);
    // private UnityEngine.Timeline.TimelineClip CreateClipFromAsset(UnityEngine.ScriptableObject playableAsset)
    // Offset: 0x20ECD74
    UnityEngine::Timeline::TimelineClip* CreateClipFromAsset(UnityEngine::ScriptableObject* playableAsset);
    // System.Collections.Generic.IEnumerable`1<UnityEngine.ScriptableObject> GetMarkersRaw()
    // Offset: 0x20ED4EC
    System::Collections::Generic::IEnumerable_1<UnityEngine::ScriptableObject*>* GetMarkersRaw();
    // System.Void ClearMarkers()
    // Offset: 0x20ED4F4
    void ClearMarkers();
    // System.Void AddMarker(UnityEngine.ScriptableObject e)
    // Offset: 0x20ED500
    void AddMarker(UnityEngine::ScriptableObject* e);
    // System.Boolean DeleteMarkerRaw(UnityEngine.ScriptableObject marker)
    // Offset: 0x20ED50C
    bool DeleteMarkerRaw(UnityEngine::ScriptableObject* marker);
    // private System.Int32 GetTimeRangeHash()
    // Offset: 0x20ED550
    int GetTimeRangeHash();
    // System.Void AddClip(UnityEngine.Timeline.TimelineClip newClip)
    // Offset: 0x20E653C
    void AddClip(UnityEngine::Timeline::TimelineClip* newClip);
    // private UnityEngine.Playables.Playable CreateNotificationsPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Playables.Playable mixerPlayable, UnityEngine.GameObject go, UnityEngine.Playables.Playable timelinePlayable)
    // Offset: 0x20ED9CC
    UnityEngine::Playables::Playable CreateNotificationsPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable mixerPlayable, UnityEngine::GameObject* go, UnityEngine::Playables::Playable timelinePlayable);
    // UnityEngine.Playables.Playable CreatePlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree, UnityEngine.Playables.Playable timelinePlayable)
    // Offset: 0x20EA10C
    UnityEngine::Playables::Playable CreatePlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Playables::Playable timelinePlayable);
    // UnityEngine.Playables.Playable CompileClips(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Collections.Generic.IList`1<UnityEngine.Timeline.TimelineClip> timelineClips, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    // Offset: 0x20EE238
    UnityEngine::Playables::Playable CompileClips_NEW(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, System::Collections::Generic::IList_1<UnityEngine::Timeline::TimelineClip*>* timelineClips, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree);
    // private System.Void GatherCompilableTracks(System.Collections.Generic.IList`1<UnityEngine.Timeline.TrackAsset> tracks)
    // Offset: 0x20EE784
    void GatherCompilableTracks(System::Collections::Generic::IList_1<UnityEngine::Timeline::TrackAsset*>* tracks);
    // private System.Void GatherNotificiations(System.Collections.Generic.List`1<UnityEngine.Timeline.IMarker> markers)
    // Offset: 0x20EDBBC
    void GatherNotificiations(System::Collections::Generic::List_1<UnityEngine::Timeline::IMarker*>* markers);
    // UnityEngine.Playables.Playable OnCreateClipPlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    // Offset: 0x20EEB0C
    UnityEngine::Playables::Playable OnCreateClipPlayableGraph_NEW(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree);
    // System.Void ConfigureTrackAnimation(UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree, UnityEngine.GameObject go, UnityEngine.Playables.Playable blend)
    // Offset: 0x20EE630
    void ConfigureTrackAnimation(UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::GameObject* go, UnityEngine::Playables::Playable blend);
    // System.Void SortClips()
    // Offset: 0x20E94BC
    void SortClips();
    // System.Void ClearClipsInternal()
    // Offset: 0x20EF0EC
    void ClearClipsInternal();
    // System.Void ClearSubTracksInternal()
    // Offset: 0x20EF158
    void ClearSubTracksInternal();
    // System.Void OnClipMove()
    // Offset: 0x20E60BC
    void OnClipMove();
    // UnityEngine.Timeline.TimelineClip CreateNewClipContainerInternal()
    // Offset: 0x20ED2AC
    UnityEngine::Timeline::TimelineClip* CreateNewClipContainerInternal();
    // System.Void AddChild(UnityEngine.Timeline.TrackAsset child)
    // Offset: 0x20EF1C4
    void AddChild(UnityEngine::Timeline::TrackAsset* child);
    // System.Void MoveLastTrackBefore(UnityEngine.Timeline.TrackAsset asset)
    // Offset: 0x20EF280
    void MoveLastTrackBefore(UnityEngine::Timeline::TrackAsset* asset);
    // System.Boolean RemoveSubTrack(UnityEngine.Timeline.TrackAsset child)
    // Offset: 0x20EF4AC
    bool RemoveSubTrack(UnityEngine::Timeline::TrackAsset* child);
    // System.Void RemoveClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x20E64CC
    void RemoveClip(UnityEngine::Timeline::TimelineClip* clip);
    // System.Void GetEvaluationTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x20EF538
    void GetEvaluationTime_NEW(double& outStart, double& outDuration);
    // System.Void GetSequenceTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x20EFAE8
    void GetSequenceTime_NEW(double& outStart, double& outDuration);
    // public System.Void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    // Offset: 0x20EFAF8
    void GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver);
    // UnityEngine.GameObject GetGameObjectBinding(UnityEngine.Playables.PlayableDirector director)
    // Offset: 0x20F018C
    UnityEngine::GameObject* GetGameObjectBinding(UnityEngine::Playables::PlayableDirector* director);
    // System.Boolean ValidateClipType(System.Type clipType)
    // Offset: 0x20EC8F8
    bool ValidateClipType(System::Type* clipType);
    // protected System.Void OnCreateClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x20F030C
    void OnCreateClip(UnityEngine::Timeline::TimelineClip* clip);
    // private System.Void UpdateDuration()
    // Offset: 0x20EB5DC
    void UpdateDuration();
    // protected internal System.Int32 CalculateItemsHash()
    // Offset: 0x20F0310
    int CalculateItemsHash_NEW();
    // protected UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject gameObject, UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x20F05C0
    UnityEngine::Playables::Playable CreatePlayable_NEW(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* gameObject, UnityEngine::Timeline::TimelineClip* clip);
    // System.Void Invalidate()
    // Offset: 0x20EB0F4
    void Invalidate();
    // System.Double GetNotificationDuration()
    // Offset: 0x20EF794
    double GetNotificationDuration();
    // System.Boolean CanCompileClips()
    // Offset: 0x20F0838
    bool CanCompileClips();
    // System.Boolean IsCompilable()
    // Offset: 0x20E913C
    bool IsCompilable();
    // private System.Void UpdateChildTrackCache()
    // Offset: 0x20EBCA4
    void UpdateChildTrackCache();
    // System.Int32 Hash()
    // Offset: 0x20F089C
    int Hash_NEW();
    // private System.Int32 GetClipsHash()
    // Offset: 0x20F03B0
    int GetClipsHash();
    // static protected System.Int32 GetAnimationClipHash(UnityEngine.AnimationClip clip)
    // Offset: 0x20F04C4
    static int GetAnimationClipHash(UnityEngine::AnimationClip* clip);
    // private System.Boolean HasNotifications()
    // Offset: 0x20EF788
    bool HasNotifications();
    // private System.Boolean CanCompileNotifications()
    // Offset: 0x20EEAD0
    bool CanCompileNotifications();
    // private System.Boolean CanCompileClipsRecursive()
    // Offset: 0x20EDEC4
    bool CanCompileClipsRecursive();
    // public override System.Double get_duration()
    // Offset: 0x20EB760
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Double PlayableAsset::get_duration_NEW()
    double get_duration();
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> get_outputs()
    // Offset: 0x20EBBC8
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> PlayableAsset::get_outputs_NEW()
    System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* get_outputs();
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go)
    // Offset: 0x20EC2F8
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable_NEW(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go)
    UnityEngine::Playables::Playable CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go);
    // protected System.Void .ctor()
    // Offset: 0x20F08DC
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Void PlayableAsset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TrackAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackAsset*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x20F0998
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.Timeline.TrackAsset
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TrackAsset*, "UnityEngine.Timeline", "TrackAsset");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TrackAsset::TransientBuildData, "UnityEngine.Timeline", "TrackAsset/TransientBuildData");
