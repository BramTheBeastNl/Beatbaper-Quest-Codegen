// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.HashUtility
  // [ExtensionAttribute] Offset: FFFFFFFF
  class HashUtility : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: HashUtility
    HashUtility() noexcept {}
    // static public System.Int32 CombineHash(System.Int32 h1, System.Int32 h2)
    // Offset: 0x17D85BC
    static int CombineHash(int h1, int h2);
    // static public System.Int32 CombineHash(System.Int32 h1, System.Int32 h2, System.Int32 h3)
    // Offset: 0x17E2778
    static int CombineHash(int h1, int h2, int h3);
    // static public System.Int32 CombineHash(System.Int32 h1, System.Int32 h2, System.Int32 h3, System.Int32 h4)
    // Offset: 0x17E27A4
    static int CombineHash(int h1, int h2, int h3, int h4);
    // static public System.Int32 CombineHash(System.Int32 h1, System.Int32 h2, System.Int32 h3, System.Int32 h4, System.Int32 h5)
    // Offset: 0x17E27E0
    static int CombineHash(int h1, int h2, int h3, int h4, int h5);
    // static public System.Int32 CombineHash(System.Int32 h1, System.Int32 h2, System.Int32 h3, System.Int32 h4, System.Int32 h5, System.Int32 h6)
    // Offset: 0x17E282C
    static int CombineHash(int h1, int h2, int h3, int h4, int h5, int h6);
    // static public System.Int32 CombineHash(System.Int32 h1, System.Int32 h2, System.Int32 h3, System.Int32 h4, System.Int32 h5, System.Int32 h6, System.Int32 h7)
    // Offset: 0x17E2888
    static int CombineHash(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
    // static public System.Int32 CombineHash(System.Int32[] hashes)
    // Offset: 0x17E28C0
    static int CombineHash(::Array<int>* hashes);
  }; // UnityEngine.Timeline.HashUtility
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::HashUtility*, "UnityEngine.Timeline", "HashUtility");
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int, int)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int, int, int, int, int)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HashUtility::CombineHash
// Il2CppName: CombineHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<int>*)>(&HashUtility::CombineHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HashUtility*), "CombineHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>()});
  }
};
