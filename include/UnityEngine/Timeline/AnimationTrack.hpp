// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.Timeline.ILayerable
#include "UnityEngine/Timeline/ILayerable.hpp"
// Including type: UnityEngine.Timeline.TimelineClip/ClipExtrapolation
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/LoopMode
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.MatchTargetFields
#include "UnityEngine/Timeline/MatchTargetFields.hpp"
// Including type: UnityEngine.Timeline.TrackOffset
#include "UnityEngine/Timeline/TrackOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Skipping declaration: TimelineClip because it is already included!
  // Forward declaring type: IntervalTree`1<T>
  template<typename T>
  class IntervalTree_1;
  // Forward declaring type: RuntimeElement
  class RuntimeElement;
  // Forward declaring type: AppliedOffsetMode
  struct AppliedOffsetMode;
  // Forward declaring type: IPropertyCollector
  class IPropertyCollector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AvatarMask
  class AvatarMask;
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Skipping declaration: Playable because it is already included!
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Forward declaring type: AnimationLayerMixerPlayable
  struct AnimationLayerMixerPlayable;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Timeline.AnimationTrack
  // [TrackClipTypeAttribute] Offset: DD71D0
  // [TrackBindingTypeAttribute] Offset: DD71D0
  // [ExcludeFromPresetAttribute] Offset: DD71D0
  class AnimationTrack : public UnityEngine::Timeline::TrackAsset/*, public UnityEngine::Timeline::ILayerable*/ {
    public:
    // Nested type: UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade
    class AnimationTrackUpgrade;
    // Nested type: UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49
    class $get_outputs$d__49;
    // [FormerlySerializedAsAttribute] Offset: 0xDD7B2C
    // private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_InfiniteClipPreExtrapolation
    // Size: 0x4
    // Offset: 0xA0
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPreExtrapolation;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xDD7B78
    // private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_InfiniteClipPostExtrapolation
    // Size: 0x4
    // Offset: 0xA4
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPostExtrapolation;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xDD7BC4
    // private UnityEngine.Vector3 m_InfiniteClipOffsetPosition
    // Size: 0xC
    // Offset: 0xA8
    UnityEngine::Vector3 m_InfiniteClipOffsetPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [FormerlySerializedAsAttribute] Offset: 0xDD7C10
    // private UnityEngine.Vector3 m_InfiniteClipOffsetEulerAngles
    // Size: 0xC
    // Offset: 0xB4
    UnityEngine::Vector3 m_InfiniteClipOffsetEulerAngles;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [FormerlySerializedAsAttribute] Offset: 0xDD7C5C
    // private System.Double m_InfiniteClipTimeOffset
    // Size: 0x8
    // Offset: 0xC0
    double m_InfiniteClipTimeOffset;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xDD7CA8
    // private System.Boolean m_InfiniteClipRemoveOffset
    // Size: 0x1
    // Offset: 0xC8
    bool m_InfiniteClipRemoveOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_InfiniteClipApplyFootIK
    // Size: 0x1
    // Offset: 0xC9
    bool m_InfiniteClipApplyFootIK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xDD7D04
    // private UnityEngine.Timeline.AnimationPlayableAsset/LoopMode mInfiniteClipLoop
    // Size: 0x4
    // Offset: 0xCC
    UnityEngine::Timeline::AnimationPlayableAsset::LoopMode mInfiniteClipLoop;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode) == 0x4);
    // private UnityEngine.Timeline.MatchTargetFields m_MatchTargetFields
    // Size: 0x4
    // Offset: 0xD0
    UnityEngine::Timeline::MatchTargetFields m_MatchTargetFields;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::MatchTargetFields) == 0x4);
    // private UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0xD4
    UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_EulerAngles
    // Size: 0xC
    // Offset: 0xE0
    UnityEngine::Vector3 m_EulerAngles;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.AvatarMask m_AvatarMask
    // Size: 0x8
    // Offset: 0xF0
    UnityEngine::AvatarMask* m_AvatarMask;
    // Field size check
    static_assert(sizeof(UnityEngine::AvatarMask*) == 0x8);
    // private System.Boolean m_ApplyAvatarMask
    // Size: 0x1
    // Offset: 0xF8
    bool m_ApplyAvatarMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Timeline.TrackOffset m_TrackOffset
    // Size: 0x4
    // Offset: 0xFC
    UnityEngine::Timeline::TrackOffset m_TrackOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TrackOffset) == 0x4);
    // [HideInInspector] Offset: 0xDD7D9C
    // private UnityEngine.AnimationClip m_InfiniteClip
    // Size: 0x8
    // Offset: 0x100
    UnityEngine::AnimationClip* m_InfiniteClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationClip*) == 0x8);
    // [ObsoleteAttribute] Offset: 0xDD7DD4
    // [HideInInspector] Offset: 0xDD7DD4
    // private UnityEngine.Quaternion m_OpenClipOffsetRotation
    // Size: 0x10
    // Offset: 0x108
    UnityEngine::Quaternion m_OpenClipOffsetRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [ObsoleteAttribute] Offset: 0xDD7E34
    // [HideInInspector] Offset: 0xDD7E34
    // private UnityEngine.Quaternion m_Rotation
    // Size: 0x10
    // Offset: 0x118
    UnityEngine::Quaternion m_Rotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [ObsoleteAttribute] Offset: 0xDD7E94
    // [HideInInspector] Offset: 0xDD7E94
    // private System.Boolean m_ApplyOffsets
    // Size: 0x1
    // Offset: 0x128
    bool m_ApplyOffsets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: AnimationTrack
    AnimationTrack(UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPreExtrapolation_ = {}, UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPostExtrapolation_ = {}, UnityEngine::Vector3 m_InfiniteClipOffsetPosition_ = {}, UnityEngine::Vector3 m_InfiniteClipOffsetEulerAngles_ = {}, double m_InfiniteClipTimeOffset_ = {}, bool m_InfiniteClipRemoveOffset_ = {}, bool m_InfiniteClipApplyFootIK_ = {}, UnityEngine::Timeline::AnimationPlayableAsset::LoopMode mInfiniteClipLoop_ = {}, UnityEngine::Timeline::MatchTargetFields m_MatchTargetFields_ = {}, UnityEngine::Vector3 m_Position_ = {}, UnityEngine::Vector3 m_EulerAngles_ = {}, UnityEngine::AvatarMask* m_AvatarMask_ = {}, bool m_ApplyAvatarMask_ = {}, UnityEngine::Timeline::TrackOffset m_TrackOffset_ = {}, UnityEngine::AnimationClip* m_InfiniteClip_ = {}, UnityEngine::Quaternion m_OpenClipOffsetRotation_ = {}, UnityEngine::Quaternion m_Rotation_ = {}, bool m_ApplyOffsets_ = {}) noexcept : m_InfiniteClipPreExtrapolation{m_InfiniteClipPreExtrapolation_}, m_InfiniteClipPostExtrapolation{m_InfiniteClipPostExtrapolation_}, m_InfiniteClipOffsetPosition{m_InfiniteClipOffsetPosition_}, m_InfiniteClipOffsetEulerAngles{m_InfiniteClipOffsetEulerAngles_}, m_InfiniteClipTimeOffset{m_InfiniteClipTimeOffset_}, m_InfiniteClipRemoveOffset{m_InfiniteClipRemoveOffset_}, m_InfiniteClipApplyFootIK{m_InfiniteClipApplyFootIK_}, mInfiniteClipLoop{mInfiniteClipLoop_}, m_MatchTargetFields{m_MatchTargetFields_}, m_Position{m_Position_}, m_EulerAngles{m_EulerAngles_}, m_AvatarMask{m_AvatarMask_}, m_ApplyAvatarMask{m_ApplyAvatarMask_}, m_TrackOffset{m_TrackOffset_}, m_InfiniteClip{m_InfiniteClip_}, m_OpenClipOffsetRotation{m_OpenClipOffsetRotation_}, m_Rotation{m_Rotation_}, m_ApplyOffsets{m_ApplyOffsets_} {}
    // Creating interface conversion operator: operator UnityEngine::Timeline::ILayerable
    operator UnityEngine::Timeline::ILayerable() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::ILayerable*>(this);
    }
    // static field const value: static private System.String k_DefaultInfiniteClipName
    static constexpr const char* k_DefaultInfiniteClipName = "Recorded";
    // Get static field: static private System.String k_DefaultInfiniteClipName
    static ::Il2CppString* _get_k_DefaultInfiniteClipName();
    // Set static field: static private System.String k_DefaultInfiniteClipName
    static void _set_k_DefaultInfiniteClipName(::Il2CppString* value);
    // static field const value: static private System.String k_DefaultRecordableClipName
    static constexpr const char* k_DefaultRecordableClipName = "Recorded";
    // Get static field: static private System.String k_DefaultRecordableClipName
    static ::Il2CppString* _get_k_DefaultRecordableClipName();
    // Set static field: static private System.String k_DefaultRecordableClipName
    static void _set_k_DefaultRecordableClipName(::Il2CppString* value);
    // Get static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
    static System::Collections::Generic::Queue_1<UnityEngine::Transform*>* _get_s_CachedQueue();
    // Set static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
    static void _set_s_CachedQueue(System::Collections::Generic::Queue_1<UnityEngine::Transform*>* value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x17D7A34
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x17D7A40
    void set_position(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x17D7A4C
    UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x17D7AD4
    void set_rotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_eulerAngles()
    // Offset: 0x17D7B14
    UnityEngine::Vector3 get_eulerAngles();
    // public System.Void set_eulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x17D7B20
    void set_eulerAngles(UnityEngine::Vector3 value);
    // public System.Boolean get_applyOffsets()
    // Offset: 0x17D7B2C
    bool get_applyOffsets();
    // public System.Void set_applyOffsets(System.Boolean value)
    // Offset: 0x17D7B34
    void set_applyOffsets(bool value);
    // public UnityEngine.Timeline.TrackOffset get_trackOffset()
    // Offset: 0x17D7B38
    UnityEngine::Timeline::TrackOffset get_trackOffset();
    // public System.Void set_trackOffset(UnityEngine.Timeline.TrackOffset value)
    // Offset: 0x17D7B40
    void set_trackOffset(UnityEngine::Timeline::TrackOffset value);
    // public UnityEngine.Timeline.MatchTargetFields get_matchTargetFields()
    // Offset: 0x17D7B48
    UnityEngine::Timeline::MatchTargetFields get_matchTargetFields();
    // public System.Void set_matchTargetFields(UnityEngine.Timeline.MatchTargetFields value)
    // Offset: 0x17D7B50
    void set_matchTargetFields(UnityEngine::Timeline::MatchTargetFields value);
    // public UnityEngine.AnimationClip get_infiniteClip()
    // Offset: 0x17D7BD0
    UnityEngine::AnimationClip* get_infiniteClip();
    // System.Void set_infiniteClip(UnityEngine.AnimationClip value)
    // Offset: 0x17D7BD8
    void set_infiniteClip(UnityEngine::AnimationClip* value);
    // System.Boolean get_infiniteClipRemoveOffset()
    // Offset: 0x17D7BE0
    bool get_infiniteClipRemoveOffset();
    // System.Void set_infiniteClipRemoveOffset(System.Boolean value)
    // Offset: 0x17D7BE8
    void set_infiniteClipRemoveOffset(bool value);
    // public UnityEngine.AvatarMask get_avatarMask()
    // Offset: 0x17D7BF4
    UnityEngine::AvatarMask* get_avatarMask();
    // public System.Void set_avatarMask(UnityEngine.AvatarMask value)
    // Offset: 0x17D7BFC
    void set_avatarMask(UnityEngine::AvatarMask* value);
    // public System.Boolean get_applyAvatarMask()
    // Offset: 0x17D7C04
    bool get_applyAvatarMask();
    // public System.Void set_applyAvatarMask(System.Boolean value)
    // Offset: 0x17D7C0C
    void set_applyAvatarMask(bool value);
    // public System.Boolean get_inClipMode()
    // Offset: 0x17D7D90
    bool get_inClipMode();
    // public UnityEngine.Vector3 get_infiniteClipOffsetPosition()
    // Offset: 0x17D7DD8
    UnityEngine::Vector3 get_infiniteClipOffsetPosition();
    // public System.Void set_infiniteClipOffsetPosition(UnityEngine.Vector3 value)
    // Offset: 0x17D7DE4
    void set_infiniteClipOffsetPosition(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_infiniteClipOffsetRotation()
    // Offset: 0x17D7DF0
    UnityEngine::Quaternion get_infiniteClipOffsetRotation();
    // public System.Void set_infiniteClipOffsetRotation(UnityEngine.Quaternion value)
    // Offset: 0x17D7E78
    void set_infiniteClipOffsetRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_infiniteClipOffsetEulerAngles()
    // Offset: 0x17D7EB8
    UnityEngine::Vector3 get_infiniteClipOffsetEulerAngles();
    // public System.Void set_infiniteClipOffsetEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x17D7EC4
    void set_infiniteClipOffsetEulerAngles(UnityEngine::Vector3 value);
    // System.Boolean get_infiniteClipApplyFootIK()
    // Offset: 0x17D7ED0
    bool get_infiniteClipApplyFootIK();
    // System.Void set_infiniteClipApplyFootIK(System.Boolean value)
    // Offset: 0x17D7ED8
    void set_infiniteClipApplyFootIK(bool value);
    // System.Double get_infiniteClipTimeOffset()
    // Offset: 0x17D7EE4
    double get_infiniteClipTimeOffset();
    // System.Void set_infiniteClipTimeOffset(System.Double value)
    // Offset: 0x17D7EEC
    void set_infiniteClipTimeOffset(double value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_infiniteClipPreExtrapolation()
    // Offset: 0x17D7EF4
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_infiniteClipPreExtrapolation();
    // public System.Void set_infiniteClipPreExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x17D7EFC
    void set_infiniteClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_infiniteClipPostExtrapolation()
    // Offset: 0x17D7F04
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_infiniteClipPostExtrapolation();
    // public System.Void set_infiniteClipPostExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x17D7F0C
    void set_infiniteClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // UnityEngine.Timeline.AnimationPlayableAsset/LoopMode get_infiniteClipLoop()
    // Offset: 0x17D7F14
    UnityEngine::Timeline::AnimationPlayableAsset::LoopMode get_infiniteClipLoop();
    // System.Void set_infiniteClipLoop(UnityEngine.Timeline.AnimationPlayableAsset/LoopMode value)
    // Offset: 0x17D7F1C
    void set_infiniteClipLoop(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value);
    // private System.Void ResetOffsets()
    // Offset: 0x17D7F24
    void ResetOffsets();
    // public UnityEngine.Timeline.TimelineClip CreateClip(UnityEngine.AnimationClip clip)
    // Offset: 0x17D7FA8
    UnityEngine::Timeline::TimelineClip* CreateClip(UnityEngine::AnimationClip* clip);
    // public System.Void CreateInfiniteClip(System.String infiniteClipName)
    // Offset: 0x17D8290
    void CreateInfiniteClip(::Il2CppString* infiniteClipName);
    // public UnityEngine.Timeline.TimelineClip CreateRecordableClip(System.String animClipName)
    // Offset: 0x17D8394
    UnityEngine::Timeline::TimelineClip* CreateRecordableClip(::Il2CppString* animClipName);
    // System.Void UpdateClipOffsets()
    // Offset: 0x17D7FA4
    void UpdateClipOffsets();
    // private UnityEngine.Playables.Playable CompileTrackPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Timeline.AnimationTrack track, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree, UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x17D85D8
    UnityEngine::Playables::Playable CompileTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Timeline::AnimationTrack* track, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode);
    // private UnityEngine.Playables.Playable UnityEngine.Timeline.ILayerable.CreateLayerMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    // Offset: 0x17D8F64
    UnityEngine::Playables::Playable UnityEngine_Timeline_ILayerable_CreateLayerMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount);
    // private System.Int32 GetDefaultBlendCount()
    // Offset: 0x17D9D40
    int GetDefaultBlendCount();
    // private System.Void AttachDefaultBlend(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Animations.AnimationLayerMixerPlayable mixer, System.Boolean requireOffset)
    // Offset: 0x17DA230
    void AttachDefaultBlend(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Animations::AnimationLayerMixerPlayable mixer, bool requireOffset);
    // private UnityEngine.Playables.Playable AttachOffsetPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Playables.Playable playable, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x17DA24C
    UnityEngine::Playables::Playable AttachOffsetPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable playable, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot);
    // private System.Boolean RequiresMotionXPlayable(UnityEngine.Timeline.AppliedOffsetMode mode, UnityEngine.GameObject gameObject)
    // Offset: 0x17DA114
    bool RequiresMotionXPlayable(UnityEngine::Timeline::AppliedOffsetMode mode, UnityEngine::GameObject* gameObject);
    // static private System.Boolean UsesAbsoluteMotion(UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x17DA234
    static bool UsesAbsoluteMotion(UnityEngine::Timeline::AppliedOffsetMode mode);
    // private System.Boolean HasController(UnityEngine.GameObject gameObject)
    // Offset: 0x17DA590
    bool HasController(UnityEngine::GameObject* gameObject);
    // UnityEngine.Animator GetBinding(UnityEngine.Playables.PlayableDirector director)
    // Offset: 0x17DA39C
    UnityEngine::Animator* GetBinding(UnityEngine::Playables::PlayableDirector* director);
    // static private UnityEngine.Animations.AnimationLayerMixerPlayable CreateGroupMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    // Offset: 0x17D9D48
    static UnityEngine::Animations::AnimationLayerMixerPlayable CreateGroupMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount);
    // private UnityEngine.Playables.Playable CreateInfiniteTrackPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree, UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x17D9DC8
    UnityEngine::Playables::Playable CreateInfiniteTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode);
    // private UnityEngine.Playables.Playable ApplyTrackOffset(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Playables.Playable root, UnityEngine.GameObject go, UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x17D8DCC
    UnityEngine::Playables::Playable ApplyTrackOffset(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable root, UnityEngine::GameObject* go, UnityEngine::Timeline::AppliedOffsetMode mode);
    // private System.Void AssignAnimationClip(UnityEngine.Timeline.TimelineClip clip, UnityEngine.AnimationClip animClip)
    // Offset: 0x17D8054
    void AssignAnimationClip(UnityEngine::Timeline::TimelineClip* clip, UnityEngine::AnimationClip* animClip);
    // private System.Void GetAnimationClips(System.Collections.Generic.List`1<UnityEngine.AnimationClip> animClips)
    // Offset: 0x17DA8B0
    void GetAnimationClips(System::Collections::Generic::List_1<UnityEngine::AnimationClip*>* animClips);
    // private UnityEngine.Timeline.AppliedOffsetMode GetOffsetMode(UnityEngine.GameObject go, System.Boolean animatesRootTransform)
    // Offset: 0x17D9CCC
    UnityEngine::Timeline::AppliedOffsetMode GetOffsetMode(UnityEngine::GameObject* go, bool animatesRootTransform);
    // private System.Boolean IsRootTransformDisabledByMask(UnityEngine.GameObject gameObject, UnityEngine.Transform genericRootNode)
    // Offset: 0x17D9A44
    bool IsRootTransformDisabledByMask(UnityEngine::GameObject* gameObject, UnityEngine::Transform* genericRootNode);
    // private UnityEngine.Transform GetGenericRootNode(UnityEngine.GameObject gameObject)
    // Offset: 0x17D984C
    UnityEngine::Transform* GetGenericRootNode(UnityEngine::GameObject* gameObject);
    // System.Boolean AnimatesRootTransform()
    // Offset: 0x17D8A34
    bool AnimatesRootTransform();
    // static private UnityEngine.Transform FindInHierarchyBreadthFirst(UnityEngine.Transform t, System.String name)
    // Offset: 0x17DAD20
    static UnityEngine::Transform* FindInHierarchyBreadthFirst(UnityEngine::Transform* t, ::Il2CppString* name);
    // public UnityEngine.Vector3 get_openClipOffsetPosition()
    // Offset: 0x17DAEF4
    UnityEngine::Vector3 get_openClipOffsetPosition();
    // public System.Void set_openClipOffsetPosition(UnityEngine.Vector3 value)
    // Offset: 0x17DAF00
    void set_openClipOffsetPosition(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_openClipOffsetRotation()
    // Offset: 0x17DAF0C
    UnityEngine::Quaternion get_openClipOffsetRotation();
    // public System.Void set_openClipOffsetRotation(UnityEngine.Quaternion value)
    // Offset: 0x17DAF10
    void set_openClipOffsetRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_openClipOffsetEulerAngles()
    // Offset: 0x17DAF50
    UnityEngine::Vector3 get_openClipOffsetEulerAngles();
    // public System.Void set_openClipOffsetEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x17DAF5C
    void set_openClipOffsetEulerAngles(UnityEngine::Vector3 value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_openClipPreExtrapolation()
    // Offset: 0x17DAF68
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_openClipPreExtrapolation();
    // public System.Void set_openClipPreExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x17DAF70
    void set_openClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_openClipPostExtrapolation()
    // Offset: 0x17DAF78
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_openClipPostExtrapolation();
    // public System.Void set_openClipPostExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x17DAF80
    void set_openClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // override System.Boolean CanCompileClips()
    // Offset: 0x17D7C18
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Boolean TrackAsset::CanCompileClips()
    bool CanCompileClips();
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> get_outputs()
    // Offset: 0x17D7CD8
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> TrackAsset::get_outputs()
    System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* get_outputs();
    // protected override System.Void OnCreateClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x17D84D4
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::OnCreateClip(UnityEngine.Timeline.TimelineClip clip)
    void OnCreateClip(UnityEngine::Timeline::TimelineClip* clip);
    // protected internal override System.Int32 CalculateItemsHash()
    // Offset: 0x17D8524
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Int32 TrackAsset::CalculateItemsHash()
    int CalculateItemsHash();
    // override UnityEngine.Playables.Playable CreateMixerPlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    // Offset: 0x17D8FC4
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: UnityEngine.Playables.Playable TrackAsset::CreateMixerPlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    UnityEngine::Playables::Playable CreateMixerPlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree);
    // override System.Void GetEvaluationTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x17DA6FC
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::GetEvaluationTime(out System.Double outStart, out System.Double outDuration)
    void GetEvaluationTime(double& outStart, double& outDuration);
    // override System.Void GetSequenceTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x17DA7AC
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::GetSequenceTime(out System.Double outStart, out System.Double outDuration)
    void GetSequenceTime(double& outStart, double& outDuration);
    // public override System.Void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    // Offset: 0x17DA8AC
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    void GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver);
    // override System.Void OnUpgradeFromVersion(System.Int32 oldVersion)
    // Offset: 0x17DAF88
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::OnUpgradeFromVersion(System.Int32 oldVersion)
    void OnUpgradeFromVersion(int oldVersion);
    // public System.Void .ctor()
    // Offset: 0x17DB0E8
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::.ctor()
    // Base method: System.Void PlayableAsset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimationTrack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimationTrack*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x17DB244
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.Timeline.AnimationTrack
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::AnimationTrack*, "UnityEngine.Timeline", "AnimationTrack");
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Vector3)>(&UnityEngine::Timeline::AnimationTrack::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Quaternion)>(&UnityEngine::Timeline::AnimationTrack::set_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_eulerAngles
// Il2CppName: get_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_eulerAngles
// Il2CppName: set_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Vector3)>(&UnityEngine::Timeline::AnimationTrack::set_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_applyOffsets
// Il2CppName: get_applyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_applyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_applyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_applyOffsets
// Il2CppName: set_applyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(bool)>(&UnityEngine::Timeline::AnimationTrack::set_applyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_applyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_trackOffset
// Il2CppName: get_trackOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackOffset (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_trackOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_trackOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_trackOffset
// Il2CppName: set_trackOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TrackOffset)>(&UnityEngine::Timeline::AnimationTrack::set_trackOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_trackOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackOffset>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_matchTargetFields
// Il2CppName: get_matchTargetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::MatchTargetFields (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_matchTargetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_matchTargetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_matchTargetFields
// Il2CppName: set_matchTargetFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::MatchTargetFields)>(&UnityEngine::Timeline::AnimationTrack::set_matchTargetFields)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_matchTargetFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::MatchTargetFields>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClip
// Il2CppName: get_infiniteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClip
// Il2CppName: set_infiniteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::AnimationClip*)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset
// Il2CppName: get_infiniteClipRemoveOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipRemoveOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset
// Il2CppName: set_infiniteClipRemoveOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(bool)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipRemoveOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_avatarMask
// Il2CppName: get_avatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AvatarMask* (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_avatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_avatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_avatarMask
// Il2CppName: set_avatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::AvatarMask*)>(&UnityEngine::Timeline::AnimationTrack::set_avatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_avatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AvatarMask*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask
// Il2CppName: get_applyAvatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_applyAvatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask
// Il2CppName: set_applyAvatarMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(bool)>(&UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_applyAvatarMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_inClipMode
// Il2CppName: get_inClipMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_inClipMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_inClipMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition
// Il2CppName: get_infiniteClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition
// Il2CppName: set_infiniteClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Vector3)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation
// Il2CppName: get_infiniteClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation
// Il2CppName: set_infiniteClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Quaternion)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles
// Il2CppName: get_infiniteClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles
// Il2CppName: set_infiniteClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Vector3)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK
// Il2CppName: get_infiniteClipApplyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipApplyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK
// Il2CppName: set_infiniteClipApplyFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(bool)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipApplyFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset
// Il2CppName: get_infiniteClipTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset
// Il2CppName: set_infiniteClipTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(double)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation
// Il2CppName: get_infiniteClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation
// Il2CppName: set_infiniteClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation
// Il2CppName: get_infiniteClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation
// Il2CppName: set_infiniteClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop
// Il2CppName: get_infiniteClipLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_infiniteClipLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop
// Il2CppName: set_infiniteClipLoop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode)>(&UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_infiniteClipLoop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CreateClip
// Il2CppName: CreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::AnimationClip*)>(&UnityEngine::Timeline::AnimationTrack::CreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip
// Il2CppName: CreateInfiniteClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(::Il2CppString*)>(&UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CreateInfiniteClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CreateRecordableClip
// Il2CppName: CreateRecordableClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip* (UnityEngine::Timeline::AnimationTrack::*)(::Il2CppString*)>(&UnityEngine::Timeline::AnimationTrack::CreateRecordableClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CreateRecordableClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets
// Il2CppName: UpdateClipOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "UpdateClipOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable
// Il2CppName: CompileTrackPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Timeline::AnimationTrack*, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*, UnityEngine::Timeline::AppliedOffsetMode)>(&UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CompileTrackPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AnimationTrack*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer
// Il2CppName: UnityEngine.Timeline.ILayerable.CreateLayerMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, int)>(&UnityEngine::Timeline::AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "UnityEngine.Timeline.ILayerable.CreateLayerMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount
// Il2CppName: GetDefaultBlendCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetDefaultBlendCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend
// Il2CppName: AttachDefaultBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Animations::AnimationLayerMixerPlayable, bool)>(&UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "AttachDefaultBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Animations::AnimationLayerMixerPlayable>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable
// Il2CppName: AttachOffsetPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::Playable, UnityEngine::Vector3, UnityEngine::Quaternion)>(&UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "AttachOffsetPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable
// Il2CppName: RequiresMotionXPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::AppliedOffsetMode, UnityEngine::GameObject*)>(&UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "RequiresMotionXPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion
// Il2CppName: UsesAbsoluteMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Timeline::AppliedOffsetMode)>(&UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "UsesAbsoluteMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::HasController
// Il2CppName: HasController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::GameObject*)>(&UnityEngine::Timeline::AnimationTrack::HasController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "HasController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetBinding
// Il2CppName: GetBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animator* (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableDirector*)>(&UnityEngine::Timeline::AnimationTrack::GetBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CreateGroupMixer
// Il2CppName: CreateGroupMixer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animations::AnimationLayerMixerPlayable (*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, int)>(&UnityEngine::Timeline::AnimationTrack::CreateGroupMixer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CreateGroupMixer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable
// Il2CppName: CreateInfiniteTrackPlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*, UnityEngine::Timeline::AppliedOffsetMode)>(&UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CreateInfiniteTrackPlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset
// Il2CppName: ApplyTrackOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::Playables::Playable, UnityEngine::GameObject*, UnityEngine::Timeline::AppliedOffsetMode)>(&UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "ApplyTrackOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::AppliedOffsetMode>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::AssignAnimationClip
// Il2CppName: AssignAnimationClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TimelineClip*, UnityEngine::AnimationClip*)>(&UnityEngine::Timeline::AnimationTrack::AssignAnimationClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "AssignAnimationClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetAnimationClips
// Il2CppName: GetAnimationClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(System::Collections::Generic::List_1<UnityEngine::AnimationClip*>*)>(&UnityEngine::Timeline::AnimationTrack::GetAnimationClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetAnimationClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::AnimationClip*>*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetOffsetMode
// Il2CppName: GetOffsetMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::AppliedOffsetMode (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::GameObject*, bool)>(&UnityEngine::Timeline::AnimationTrack::GetOffsetMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetOffsetMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask
// Il2CppName: IsRootTransformDisabledByMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::GameObject*, UnityEngine::Transform*)>(&UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "IsRootTransformDisabledByMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetGenericRootNode
// Il2CppName: GetGenericRootNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::GameObject*)>(&UnityEngine::Timeline::AnimationTrack::GetGenericRootNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetGenericRootNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform
// Il2CppName: AnimatesRootTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "AnimatesRootTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst
// Il2CppName: FindInHierarchyBreadthFirst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(UnityEngine::Transform*, ::Il2CppString*)>(&UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "FindInHierarchyBreadthFirst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition
// Il2CppName: get_openClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_openClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition
// Il2CppName: set_openClipOffsetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Vector3)>(&UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_openClipOffsetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation
// Il2CppName: get_openClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_openClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation
// Il2CppName: set_openClipOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Quaternion)>(&UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_openClipOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles
// Il2CppName: get_openClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_openClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles
// Il2CppName: set_openClipOffsetEulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Vector3)>(&UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_openClipOffsetEulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation
// Il2CppName: get_openClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_openClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation
// Il2CppName: set_openClipPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_openClipPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation
// Il2CppName: get_openClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_openClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation
// Il2CppName: set_openClipPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "set_openClipPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CanCompileClips
// Il2CppName: CanCompileClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::CanCompileClips)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CanCompileClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::get_outputs
// Il2CppName: get_outputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::get_outputs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "get_outputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::OnCreateClip
// Il2CppName: OnCreateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Timeline::TimelineClip*)>(&UnityEngine::Timeline::AnimationTrack::OnCreateClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "OnCreateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CalculateItemsHash
// Il2CppName: CalculateItemsHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Timeline::AnimationTrack::*)()>(&UnityEngine::Timeline::AnimationTrack::CalculateItemsHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CalculateItemsHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::CreateMixerPlayableGraph
// Il2CppName: CreateMixerPlayableGraph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*)>(&UnityEngine::Timeline::AnimationTrack::CreateMixerPlayableGraph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "CreateMixerPlayableGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetEvaluationTime
// Il2CppName: GetEvaluationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(double&, double&)>(&UnityEngine::Timeline::AnimationTrack::GetEvaluationTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetEvaluationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GetSequenceTime
// Il2CppName: GetSequenceTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(double&, double&)>(&UnityEngine::Timeline::AnimationTrack::GetSequenceTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GetSequenceTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double&>(), ::il2cpp_utils::ExtractIndependentType<double&>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::GatherProperties
// Il2CppName: GatherProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(UnityEngine::Playables::PlayableDirector*, UnityEngine::Timeline::IPropertyCollector*)>(&UnityEngine::Timeline::AnimationTrack::GatherProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "GatherProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableDirector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::IPropertyCollector*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion
// Il2CppName: OnUpgradeFromVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::AnimationTrack::*)(int)>(&UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), "OnUpgradeFromVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Timeline::AnimationTrack::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Timeline::AnimationTrack::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::AnimationTrack*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
