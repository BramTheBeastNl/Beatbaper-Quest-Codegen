// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.ICurvesOwner
#include "UnityEngine/Timeline/ICurvesOwner.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Skipping declaration: BlendCurveMode because it is already included!
  // Forward declaring type: TrackAsset
  class TrackAsset;
  // Skipping declaration: ClipExtrapolation because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.TimelineClip
  class TimelineClip : public ::Il2CppObject/*, public UnityEngine::Timeline::ICurvesOwner, public UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: UnityEngine::Timeline::TimelineClip::Versions
    struct Versions;
    // Nested type: UnityEngine::Timeline::TimelineClip::TimelineClipUpgrade
    class TimelineClipUpgrade;
    // Nested type: UnityEngine::Timeline::TimelineClip::ClipExtrapolation
    struct ClipExtrapolation;
    // Nested type: UnityEngine::Timeline::TimelineClip::BlendCurveMode
    struct BlendCurveMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Timeline.TimelineClip/ClipExtrapolation
    struct ClipExtrapolation/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ClipExtrapolation
      constexpr ClipExtrapolation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
      static UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_None();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation None
      static void _set_None(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
      static constexpr const int Hold = 1;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
      static UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_Hold();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Hold
      static void _set_Hold(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
      static constexpr const int Loop = 2;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
      static UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_Loop();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Loop
      static void _set_Loop(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
      static constexpr const int PingPong = 3;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
      static UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_PingPong();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation PingPong
      static void _set_PingPong(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
      static constexpr const int Continue = 4;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
      static UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_Continue();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/ClipExtrapolation Continue
      static void _set_Continue(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    }; // UnityEngine.Timeline.TimelineClip/ClipExtrapolation
    #pragma pack(pop)
    static check_size<sizeof(TimelineClip::ClipExtrapolation), 0 + sizeof(int)> __UnityEngine_Timeline_TimelineClip_ClipExtrapolationSizeCheck;
    static_assert(sizeof(TimelineClip::ClipExtrapolation) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Timeline.TimelineClip/BlendCurveMode
    struct BlendCurveMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: BlendCurveMode
      constexpr BlendCurveMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
      static constexpr const int Auto = 0;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
      static UnityEngine::Timeline::TimelineClip::BlendCurveMode _get_Auto();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Auto
      static void _set_Auto(UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
      static constexpr const int Manual = 1;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
      static UnityEngine::Timeline::TimelineClip::BlendCurveMode _get_Manual();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/BlendCurveMode Manual
      static void _set_Manual(UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
    }; // UnityEngine.Timeline.TimelineClip/BlendCurveMode
    #pragma pack(pop)
    static check_size<sizeof(TimelineClip::BlendCurveMode), 0 + sizeof(int)> __UnityEngine_Timeline_TimelineClip_BlendCurveModeSizeCheck;
    static_assert(sizeof(TimelineClip::BlendCurveMode) == 0x4);
    // [HideInInspector] Offset: 0xDD7EF4
    // private System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x10
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Version and: m_Start
    char __padding0[0x4] = {};
    // private System.Double m_Start
    // Size: 0x8
    // Offset: 0x18
    double m_Start;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_ClipIn
    // Size: 0x8
    // Offset: 0x20
    double m_ClipIn;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Object m_Asset
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Object* m_Asset;
    // Field size check
    static_assert(sizeof(UnityEngine::Object*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xDD7F5C
    // private System.Double m_Duration
    // Size: 0x8
    // Offset: 0x30
    double m_Duration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_TimeScale
    // Size: 0x8
    // Offset: 0x38
    double m_TimeScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Timeline.TrackAsset m_ParentTrack
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Timeline::TrackAsset* m_ParentTrack;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TrackAsset*) == 0x8);
    // private System.Double m_EaseInDuration
    // Size: 0x8
    // Offset: 0x48
    double m_EaseInDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_EaseOutDuration
    // Size: 0x8
    // Offset: 0x50
    double m_EaseOutDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_BlendInDuration
    // Size: 0x8
    // Offset: 0x58
    double m_BlendInDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_BlendOutDuration
    // Size: 0x8
    // Offset: 0x60
    double m_BlendOutDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.AnimationCurve m_MixInCurve
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::AnimationCurve* m_MixInCurve;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve m_MixOutCurve
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::AnimationCurve* m_MixOutCurve;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Timeline.TimelineClip/BlendCurveMode m_BlendInCurveMode
    // Size: 0x4
    // Offset: 0x78
    UnityEngine::Timeline::TimelineClip::BlendCurveMode m_BlendInCurveMode;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::BlendCurveMode) == 0x4);
    // private UnityEngine.Timeline.TimelineClip/BlendCurveMode m_BlendOutCurveMode
    // Size: 0x4
    // Offset: 0x7C
    UnityEngine::Timeline::TimelineClip::BlendCurveMode m_BlendOutCurveMode;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::BlendCurveMode) == 0x4);
    // private System.Collections.Generic.List`1<System.String> m_ExposedParameterNames
    // Size: 0x8
    // Offset: 0x80
    System::Collections::Generic::List_1<::Il2CppString*>* m_ExposedParameterNames;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
    // private UnityEngine.AnimationClip m_AnimationCurves
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::AnimationClip* m_AnimationCurves;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationClip*) == 0x8);
    // private System.Boolean m_Recordable
    // Size: 0x1
    // Offset: 0x90
    bool m_Recordable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Recordable and: m_PostExtrapolationMode
    char __padding17[0x3] = {};
    // private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_PostExtrapolationMode
    // Size: 0x4
    // Offset: 0x94
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_PostExtrapolationMode;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_PreExtrapolationMode
    // Size: 0x4
    // Offset: 0x98
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_PreExtrapolationMode;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // Padding between fields: m_PreExtrapolationMode and: m_PostExtrapolationTime
    char __padding19[0x4] = {};
    // private System.Double m_PostExtrapolationTime
    // Size: 0x8
    // Offset: 0xA0
    double m_PostExtrapolationTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_PreExtrapolationTime
    // Size: 0x8
    // Offset: 0xA8
    double m_PreExtrapolationTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.String m_DisplayName
    // Size: 0x8
    // Offset: 0xB0
    ::Il2CppString* m_DisplayName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: TimelineClip
    TimelineClip(int m_Version_ = {}, double m_Start_ = {}, double m_ClipIn_ = {}, UnityEngine::Object* m_Asset_ = {}, double m_Duration_ = {}, double m_TimeScale_ = {}, UnityEngine::Timeline::TrackAsset* m_ParentTrack_ = {}, double m_EaseInDuration_ = {}, double m_EaseOutDuration_ = {}, double m_BlendInDuration_ = {}, double m_BlendOutDuration_ = {}, UnityEngine::AnimationCurve* m_MixInCurve_ = {}, UnityEngine::AnimationCurve* m_MixOutCurve_ = {}, UnityEngine::Timeline::TimelineClip::BlendCurveMode m_BlendInCurveMode_ = {}, UnityEngine::Timeline::TimelineClip::BlendCurveMode m_BlendOutCurveMode_ = {}, System::Collections::Generic::List_1<::Il2CppString*>* m_ExposedParameterNames_ = {}, UnityEngine::AnimationClip* m_AnimationCurves_ = {}, bool m_Recordable_ = {}, UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_PostExtrapolationMode_ = {}, UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_PreExtrapolationMode_ = {}, double m_PostExtrapolationTime_ = {}, double m_PreExtrapolationTime_ = {}, ::Il2CppString* m_DisplayName_ = {}) noexcept : m_Version{m_Version_}, m_Start{m_Start_}, m_ClipIn{m_ClipIn_}, m_Asset{m_Asset_}, m_Duration{m_Duration_}, m_TimeScale{m_TimeScale_}, m_ParentTrack{m_ParentTrack_}, m_EaseInDuration{m_EaseInDuration_}, m_EaseOutDuration{m_EaseOutDuration_}, m_BlendInDuration{m_BlendInDuration_}, m_BlendOutDuration{m_BlendOutDuration_}, m_MixInCurve{m_MixInCurve_}, m_MixOutCurve{m_MixOutCurve_}, m_BlendInCurveMode{m_BlendInCurveMode_}, m_BlendOutCurveMode{m_BlendOutCurveMode_}, m_ExposedParameterNames{m_ExposedParameterNames_}, m_AnimationCurves{m_AnimationCurves_}, m_Recordable{m_Recordable_}, m_PostExtrapolationMode{m_PostExtrapolationMode_}, m_PreExtrapolationMode{m_PreExtrapolationMode_}, m_PostExtrapolationTime{m_PostExtrapolationTime_}, m_PreExtrapolationTime{m_PreExtrapolationTime_}, m_DisplayName{m_DisplayName_} {}
    // Creating interface conversion operator: operator UnityEngine::Timeline::ICurvesOwner
    operator UnityEngine::Timeline::ICurvesOwner() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::ICurvesOwner*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::ISerializationCallbackReceiver
    operator UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // static field const value: static private System.Int32 k_LatestVersion
    static constexpr const int k_LatestVersion = 1;
    // Get static field: static private System.Int32 k_LatestVersion
    static int _get_k_LatestVersion();
    // Set static field: static private System.Int32 k_LatestVersion
    static void _set_k_LatestVersion(int value);
    // Get static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
    static UnityEngine::Timeline::ClipCaps _get_kDefaultClipCaps();
    // Set static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
    static void _set_kDefaultClipCaps(UnityEngine::Timeline::ClipCaps value);
    // Get static field: static public readonly System.Single kDefaultClipDurationInSeconds
    static float _get_kDefaultClipDurationInSeconds();
    // Set static field: static public readonly System.Single kDefaultClipDurationInSeconds
    static void _set_kDefaultClipDurationInSeconds(float value);
    // Get static field: static public readonly System.Double kTimeScaleMin
    static double _get_kTimeScaleMin();
    // Set static field: static public readonly System.Double kTimeScaleMin
    static void _set_kTimeScaleMin(double value);
    // Get static field: static public readonly System.Double kTimeScaleMax
    static double _get_kTimeScaleMax();
    // Set static field: static public readonly System.Double kTimeScaleMax
    static void _set_kTimeScaleMax(double value);
    // Get static field: static readonly System.String kDefaultCurvesName
    static ::Il2CppString* _get_kDefaultCurvesName();
    // Set static field: static readonly System.String kDefaultCurvesName
    static void _set_kDefaultCurvesName(::Il2CppString* value);
    // Get static field: static readonly System.Double kMinDuration
    static double _get_kMinDuration();
    // Set static field: static readonly System.Double kMinDuration
    static void _set_kMinDuration(double value);
    // Get static field: static readonly System.Double kMaxTimeValue
    static double _get_kMaxTimeValue();
    // Set static field: static readonly System.Double kMaxTimeValue
    static void _set_kMaxTimeValue(double value);
    // private System.Void UpgradeToLatestVersion()
    // Offset: 0x2337540
    void UpgradeToLatestVersion();
    // System.Void .ctor(UnityEngine.Timeline.TrackAsset parent)
    // Offset: 0x23375B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelineClip* New_ctor(UnityEngine::Timeline::TrackAsset* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineClip::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelineClip*, creationType>(parent)));
    }
    // public System.Boolean get_hasPreExtrapolation()
    // Offset: 0x2337708
    bool get_hasPreExtrapolation();
    // public System.Boolean get_hasPostExtrapolation()
    // Offset: 0x2337728
    bool get_hasPostExtrapolation();
    // public System.Double get_timeScale()
    // Offset: 0x2337748
    double get_timeScale();
    // public System.Void set_timeScale(System.Double value)
    // Offset: 0x2337928
    void set_timeScale(double value);
    // public System.Double get_start()
    // Offset: 0x2337A14
    double get_start();
    // public System.Void set_start(System.Double value)
    // Offset: 0x2337A1C
    void set_start(double value);
    // public System.Double get_duration()
    // Offset: 0x2337C90
    double get_duration();
    // public System.Void set_duration(System.Double value)
    // Offset: 0x2337C98
    void set_duration(double value);
    // public System.Double get_end()
    // Offset: 0x2337D50
    double get_end();
    // public System.Double get_clipIn()
    // Offset: 0x2337D60
    double get_clipIn();
    // public System.Void set_clipIn(System.Double value)
    // Offset: 0x2337D8C
    void set_clipIn(double value);
    // public System.String get_displayName()
    // Offset: 0x2337E70
    ::Il2CppString* get_displayName();
    // public System.Void set_displayName(System.String value)
    // Offset: 0x2337E78
    void set_displayName(::Il2CppString* value);
    // public System.Double get_clipAssetDuration()
    // Offset: 0x2337E80
    double get_clipAssetDuration();
    // public UnityEngine.AnimationClip get_curves()
    // Offset: 0x2337F50
    UnityEngine::AnimationClip* get_curves();
    // System.Void set_curves(UnityEngine.AnimationClip value)
    // Offset: 0x2337F58
    void set_curves(UnityEngine::AnimationClip* value);
    // private System.String UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName()
    // Offset: 0x2337F60
    ::Il2CppString* UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName();
    // public System.Boolean get_hasCurves()
    // Offset: 0x2337FC8
    bool get_hasCurves();
    // public UnityEngine.Object get_asset()
    // Offset: 0x2338064
    UnityEngine::Object* get_asset();
    // public System.Void set_asset(UnityEngine.Object value)
    // Offset: 0x233806C
    void set_asset(UnityEngine::Object* value);
    // private UnityEngine.Object UnityEngine.Timeline.ICurvesOwner.get_assetOwner()
    // Offset: 0x2338074
    UnityEngine::Object* UnityEngine_Timeline_ICurvesOwner_get_assetOwner();
    // private UnityEngine.Timeline.TrackAsset UnityEngine.Timeline.ICurvesOwner.get_targetTrack()
    // Offset: 0x233807C
    UnityEngine::Timeline::TrackAsset* UnityEngine_Timeline_ICurvesOwner_get_targetTrack();
    // public UnityEngine.Object get_underlyingAsset()
    // Offset: 0x2338084
    UnityEngine::Object* get_underlyingAsset();
    // public System.Void set_underlyingAsset(UnityEngine.Object value)
    // Offset: 0x233808C
    void set_underlyingAsset(UnityEngine::Object* value);
    // public UnityEngine.Timeline.TrackAsset get_parentTrack()
    // Offset: 0x2338090
    UnityEngine::Timeline::TrackAsset* get_parentTrack();
    // public System.Void set_parentTrack(UnityEngine.Timeline.TrackAsset value)
    // Offset: 0x2338098
    void set_parentTrack(UnityEngine::Timeline::TrackAsset* value);
    // public UnityEngine.Timeline.TrackAsset GetParentTrack()
    // Offset: 0x233809C
    UnityEngine::Timeline::TrackAsset* GetParentTrack();
    // System.Void SetParentTrack_Internal(UnityEngine.Timeline.TrackAsset newParentTrack)
    // Offset: 0x23375F4
    void SetParentTrack_Internal(UnityEngine::Timeline::TrackAsset* newParentTrack);
    // public System.Double get_easeInDuration()
    // Offset: 0x23381A4
    double get_easeInDuration();
    // public System.Void set_easeInDuration(System.Double value)
    // Offset: 0x23382A8
    void set_easeInDuration(double value);
    // public System.Double get_easeOutDuration()
    // Offset: 0x23383AC
    double get_easeOutDuration();
    // public System.Void set_easeOutDuration(System.Double value)
    // Offset: 0x23384B0
    void set_easeOutDuration(double value);
    // public System.Double get_eastOutTime()
    // Offset: 0x23385B4
    double get_eastOutTime();
    // public System.Double get_easeOutTime()
    // Offset: 0x23385EC
    double get_easeOutTime();
    // public System.Double get_blendInDuration()
    // Offset: 0x2338624
    double get_blendInDuration();
    // public System.Void set_blendInDuration(System.Double value)
    // Offset: 0x2338650
    void set_blendInDuration(double value);
    // public System.Double get_blendOutDuration()
    // Offset: 0x23386E8
    double get_blendOutDuration();
    // public System.Void set_blendOutDuration(System.Double value)
    // Offset: 0x2338714
    void set_blendOutDuration(double value);
    // public UnityEngine.Timeline.TimelineClip/BlendCurveMode get_blendInCurveMode()
    // Offset: 0x23387AC
    UnityEngine::Timeline::TimelineClip::BlendCurveMode get_blendInCurveMode();
    // public System.Void set_blendInCurveMode(UnityEngine.Timeline.TimelineClip/BlendCurveMode value)
    // Offset: 0x23387B4
    void set_blendInCurveMode(UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
    // public UnityEngine.Timeline.TimelineClip/BlendCurveMode get_blendOutCurveMode()
    // Offset: 0x23387BC
    UnityEngine::Timeline::TimelineClip::BlendCurveMode get_blendOutCurveMode();
    // public System.Void set_blendOutCurveMode(UnityEngine.Timeline.TimelineClip/BlendCurveMode value)
    // Offset: 0x23387C4
    void set_blendOutCurveMode(UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
    // public System.Boolean get_hasBlendIn()
    // Offset: 0x2338478
    bool get_hasBlendIn();
    // public System.Boolean get_hasBlendOut()
    // Offset: 0x2338270
    bool get_hasBlendOut();
    // public UnityEngine.AnimationCurve get_mixInCurve()
    // Offset: 0x23387CC
    UnityEngine::AnimationCurve* get_mixInCurve();
    // public System.Void set_mixInCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x2338880
    void set_mixInCurve(UnityEngine::AnimationCurve* value);
    // public System.Single get_mixInPercentage()
    // Offset: 0x2338888
    float get_mixInPercentage();
    // public System.Double get_mixInDuration()
    // Offset: 0x23388B4
    double get_mixInDuration();
    // public UnityEngine.AnimationCurve get_mixOutCurve()
    // Offset: 0x2338908
    UnityEngine::AnimationCurve* get_mixOutCurve();
    // public System.Void set_mixOutCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x23389BC
    void set_mixOutCurve(UnityEngine::AnimationCurve* value);
    // public System.Double get_mixOutTime()
    // Offset: 0x23389C4
    double get_mixOutTime();
    // public System.Double get_mixOutDuration()
    // Offset: 0x23389FC
    double get_mixOutDuration();
    // public System.Single get_mixOutPercentage()
    // Offset: 0x2338A50
    float get_mixOutPercentage();
    // public System.Boolean get_recordable()
    // Offset: 0x2338A7C
    bool get_recordable();
    // System.Void set_recordable(System.Boolean value)
    // Offset: 0x2338A84
    void set_recordable(bool value);
    // public System.Collections.Generic.List`1<System.String> get_exposedParameters()
    // Offset: 0x2338A90
    System::Collections::Generic::List_1<::Il2CppString*>* get_exposedParameters();
    // public UnityEngine.Timeline.ClipCaps get_clipCaps()
    // Offset: 0x233782C
    UnityEngine::Timeline::ClipCaps get_clipCaps();
    // System.Int32 Hash()
    // Offset: 0x2338B04
    int Hash();
    // public System.Single EvaluateMixOut(System.Double time)
    // Offset: 0x2338BC4
    float EvaluateMixOut(double time);
    // public System.Single EvaluateMixIn(System.Double time)
    // Offset: 0x2338D00
    float EvaluateMixIn(double time);
    // static private UnityEngine.AnimationCurve GetDefaultMixInCurve()
    // Offset: 0x2338868
    static UnityEngine::AnimationCurve* GetDefaultMixInCurve();
    // static private UnityEngine.AnimationCurve GetDefaultMixOutCurve()
    // Offset: 0x23389A4
    static UnityEngine::AnimationCurve* GetDefaultMixOutCurve();
    // public System.Double ToLocalTime(System.Double time)
    // Offset: 0x2338E18
    double ToLocalTime(double time);
    // public System.Double ToLocalTimeUnbound(System.Double time)
    // Offset: 0x2339104
    double ToLocalTimeUnbound(double time);
    // System.Double FromLocalTimeUnbound(System.Double time)
    // Offset: 0x2339160
    double FromLocalTimeUnbound(double time);
    // public UnityEngine.AnimationClip get_animationClip()
    // Offset: 0x23391B0
    UnityEngine::AnimationClip* get_animationClip();
    // static private System.Double SanitizeTimeValue(System.Double value, System.Double defaultValue)
    // Offset: 0x2337B28
    static double SanitizeTimeValue(double value, double defaultValue);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_postExtrapolationMode()
    // Offset: 0x23392BC
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_postExtrapolationMode();
    // System.Void set_postExtrapolationMode(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x23392EC
    void set_postExtrapolationMode(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_preExtrapolationMode()
    // Offset: 0x2339324
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_preExtrapolationMode();
    // System.Void set_preExtrapolationMode(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x2339354
    void set_preExtrapolationMode(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // System.Void SetPostExtrapolationTime(System.Double time)
    // Offset: 0x233938C
    void SetPostExtrapolationTime(double time);
    // System.Void SetPreExtrapolationTime(System.Double time)
    // Offset: 0x2339394
    void SetPreExtrapolationTime(double time);
    // public System.Boolean IsExtrapolatedTime(System.Double sequenceTime)
    // Offset: 0x233939C
    bool IsExtrapolatedTime(double sequenceTime);
    // public System.Boolean IsPreExtrapolatedTime(System.Double sequenceTime)
    // Offset: 0x2338F18
    bool IsPreExtrapolatedTime(double sequenceTime);
    // public System.Boolean IsPostExtrapolatedTime(System.Double sequenceTime)
    // Offset: 0x23390A0
    bool IsPostExtrapolatedTime(double sequenceTime);
    // public System.Double get_extrapolatedStart()
    // Offset: 0x23393E8
    double get_extrapolatedStart();
    // public System.Double get_extrapolatedDuration()
    // Offset: 0x2339400
    double get_extrapolatedDuration();
    // static private System.Double GetExtrapolatedTime(System.Double time, UnityEngine.Timeline.TimelineClip/ClipExtrapolation mode, System.Double duration)
    // Offset: 0x2338F74
    static double GetExtrapolatedTime(double time, UnityEngine::Timeline::TimelineClip::ClipExtrapolation mode, double duration);
    // public System.Void CreateCurves(System.String curvesClipName)
    // Offset: 0x23394D8
    void CreateCurves(::Il2CppString* curvesClipName);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x2339774
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x2339780
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public System.Void ConformEaseValues()
    // Offset: 0x233998C
    void ConformEaseValues();
    // static private System.Double CalculateEasingRatio(System.Double easeIn, System.Double easeOut)
    // Offset: 0x2339A2C
    static double CalculateEasingRatio(double easeIn, double easeOut);
    // private System.Void UpdateDirty(System.Double oldValue, System.Double newValue)
    // Offset: 0x2337A10
    void UpdateDirty(double oldValue, double newValue);
    // static private System.Void .cctor()
    // Offset: 0x2339B04
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x23397B8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // UnityEngine.Timeline.TimelineClip
  #pragma pack(pop)
  static check_size<sizeof(TimelineClip), 176 + sizeof(::Il2CppString*)> __UnityEngine_Timeline_TimelineClipSizeCheck;
  static_assert(sizeof(TimelineClip) == 0xB8);
  // Writing MetadataGetter for method: TimelineClip::UpgradeToLatestVersion
  // Il2CppName: UpgradeToLatestVersion
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::UpgradeToLatestVersion)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UpgradeToLatestVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_hasPreExtrapolation
  // Il2CppName: get_hasPreExtrapolation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasPreExtrapolation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_hasPostExtrapolation
  // Il2CppName: get_hasPostExtrapolation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasPostExtrapolation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_timeScale
  // Il2CppName: get_timeScale
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_timeScale)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_timeScale
  // Il2CppName: set_timeScale
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_timeScale)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_start
  // Il2CppName: get_start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_start
  // Il2CppName: set_start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_duration
  // Il2CppName: get_duration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_duration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_duration
  // Il2CppName: set_duration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_duration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_end
  // Il2CppName: get_end
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_end)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_clipIn
  // Il2CppName: get_clipIn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_clipIn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_clipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_clipIn
  // Il2CppName: set_clipIn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_clipIn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_clipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_displayName
  // Il2CppName: get_displayName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TimelineClip::*)()>(&TimelineClip::get_displayName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_displayName
  // Il2CppName: set_displayName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(::Il2CppString*)>(&TimelineClip::set_displayName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_clipAssetDuration
  // Il2CppName: get_clipAssetDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_clipAssetDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_clipAssetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_curves
  // Il2CppName: get_curves
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (TimelineClip::*)()>(&TimelineClip::get_curves)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_curves
  // Il2CppName: set_curves
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::AnimationClip*)>(&TimelineClip::set_curves)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationClip*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName
  // Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TimelineClip::*)()>(&TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_hasCurves
  // Il2CppName: get_hasCurves
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasCurves)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_asset
  // Il2CppName: get_asset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TimelineClip::*)()>(&TimelineClip::get_asset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_asset
  // Il2CppName: set_asset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Object*)>(&TimelineClip::set_asset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner
  // Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_assetOwner
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TimelineClip::*)()>(&TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_assetOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack
  // Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_targetTrack
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineClip::*)()>(&TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_targetTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_underlyingAsset
  // Il2CppName: get_underlyingAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (TimelineClip::*)()>(&TimelineClip::get_underlyingAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_underlyingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_underlyingAsset
  // Il2CppName: set_underlyingAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Object*)>(&TimelineClip::set_underlyingAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_underlyingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_parentTrack
  // Il2CppName: get_parentTrack
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineClip::*)()>(&TimelineClip::get_parentTrack)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_parentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_parentTrack
  // Il2CppName: set_parentTrack
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::set_parentTrack)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_parentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::GetParentTrack
  // Il2CppName: GetParentTrack
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TrackAsset* (TimelineClip::*)()>(&TimelineClip::GetParentTrack)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetParentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::SetParentTrack_Internal
  // Il2CppName: SetParentTrack_Internal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TrackAsset*)>(&TimelineClip::SetParentTrack_Internal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SetParentTrack_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TrackAsset*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_easeInDuration
  // Il2CppName: get_easeInDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_easeInDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_easeInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_easeInDuration
  // Il2CppName: set_easeInDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_easeInDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_easeInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_easeOutDuration
  // Il2CppName: get_easeOutDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_easeOutDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_easeOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_easeOutDuration
  // Il2CppName: set_easeOutDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_easeOutDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_easeOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_eastOutTime
  // Il2CppName: get_eastOutTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_eastOutTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_eastOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_easeOutTime
  // Il2CppName: get_easeOutTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_easeOutTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_easeOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_blendInDuration
  // Il2CppName: get_blendInDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_blendInDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_blendInDuration
  // Il2CppName: set_blendInDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_blendInDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_blendOutDuration
  // Il2CppName: get_blendOutDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_blendOutDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_blendOutDuration
  // Il2CppName: set_blendOutDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::set_blendOutDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_blendInCurveMode
  // Il2CppName: get_blendInCurveMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::BlendCurveMode (TimelineClip::*)()>(&TimelineClip::get_blendInCurveMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendInCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_blendInCurveMode
  // Il2CppName: set_blendInCurveMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::BlendCurveMode)>(&TimelineClip::set_blendInCurveMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendInCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::BlendCurveMode>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_blendOutCurveMode
  // Il2CppName: get_blendOutCurveMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::BlendCurveMode (TimelineClip::*)()>(&TimelineClip::get_blendOutCurveMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_blendOutCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_blendOutCurveMode
  // Il2CppName: set_blendOutCurveMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::BlendCurveMode)>(&TimelineClip::set_blendOutCurveMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_blendOutCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::BlendCurveMode>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_hasBlendIn
  // Il2CppName: get_hasBlendIn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasBlendIn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasBlendIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_hasBlendOut
  // Il2CppName: get_hasBlendOut
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_hasBlendOut)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_hasBlendOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixInCurve
  // Il2CppName: get_mixInCurve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (TimelineClip::*)()>(&TimelineClip::get_mixInCurve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_mixInCurve
  // Il2CppName: set_mixInCurve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::AnimationCurve*)>(&TimelineClip::set_mixInCurve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_mixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationCurve*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixInPercentage
  // Il2CppName: get_mixInPercentage
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)()>(&TimelineClip::get_mixInPercentage)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixInPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixInDuration
  // Il2CppName: get_mixInDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_mixInDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixOutCurve
  // Il2CppName: get_mixOutCurve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (TimelineClip::*)()>(&TimelineClip::get_mixOutCurve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_mixOutCurve
  // Il2CppName: set_mixOutCurve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::AnimationCurve*)>(&TimelineClip::set_mixOutCurve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_mixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AnimationCurve*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixOutTime
  // Il2CppName: get_mixOutTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_mixOutTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixOutDuration
  // Il2CppName: get_mixOutDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_mixOutDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_mixOutPercentage
  // Il2CppName: get_mixOutPercentage
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)()>(&TimelineClip::get_mixOutPercentage)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_mixOutPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_recordable
  // Il2CppName: get_recordable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)()>(&TimelineClip::get_recordable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_recordable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_recordable
  // Il2CppName: set_recordable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(bool)>(&TimelineClip::set_recordable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_recordable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_exposedParameters
  // Il2CppName: get_exposedParameters
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<::Il2CppString*>* (TimelineClip::*)()>(&TimelineClip::get_exposedParameters)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_exposedParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_clipCaps
  // Il2CppName: get_clipCaps
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (TimelineClip::*)()>(&TimelineClip::get_clipCaps)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::Hash
  // Il2CppName: Hash
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TimelineClip::*)()>(&TimelineClip::Hash)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::EvaluateMixOut
  // Il2CppName: EvaluateMixOut
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)(double)>(&TimelineClip::EvaluateMixOut)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "EvaluateMixOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::EvaluateMixIn
  // Il2CppName: EvaluateMixIn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TimelineClip::*)(double)>(&TimelineClip::EvaluateMixIn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "EvaluateMixIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::GetDefaultMixInCurve
  // Il2CppName: GetDefaultMixInCurve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (*)()>(&TimelineClip::GetDefaultMixInCurve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetDefaultMixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::GetDefaultMixOutCurve
  // Il2CppName: GetDefaultMixOutCurve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationCurve* (*)()>(&TimelineClip::GetDefaultMixOutCurve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetDefaultMixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::ToLocalTime
  // Il2CppName: ToLocalTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)(double)>(&TimelineClip::ToLocalTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ToLocalTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::ToLocalTimeUnbound
  // Il2CppName: ToLocalTimeUnbound
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)(double)>(&TimelineClip::ToLocalTimeUnbound)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ToLocalTimeUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::FromLocalTimeUnbound
  // Il2CppName: FromLocalTimeUnbound
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)(double)>(&TimelineClip::FromLocalTimeUnbound)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "FromLocalTimeUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_animationClip
  // Il2CppName: get_animationClip
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (TimelineClip::*)()>(&TimelineClip::get_animationClip)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_animationClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::SanitizeTimeValue
  // Il2CppName: SanitizeTimeValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&TimelineClip::SanitizeTimeValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SanitizeTimeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_postExtrapolationMode
  // Il2CppName: get_postExtrapolationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (TimelineClip::*)()>(&TimelineClip::get_postExtrapolationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_postExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_postExtrapolationMode
  // Il2CppName: set_postExtrapolationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&TimelineClip::set_postExtrapolationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_postExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_preExtrapolationMode
  // Il2CppName: get_preExtrapolationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::TimelineClip::ClipExtrapolation (TimelineClip::*)()>(&TimelineClip::get_preExtrapolationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_preExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::set_preExtrapolationMode
  // Il2CppName: set_preExtrapolationMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&TimelineClip::set_preExtrapolationMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "set_preExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::SetPostExtrapolationTime
  // Il2CppName: SetPostExtrapolationTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::SetPostExtrapolationTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SetPostExtrapolationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::SetPreExtrapolationTime
  // Il2CppName: SetPreExtrapolationTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double)>(&TimelineClip::SetPreExtrapolationTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "SetPreExtrapolationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::IsExtrapolatedTime
  // Il2CppName: IsExtrapolatedTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)(double)>(&TimelineClip::IsExtrapolatedTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "IsExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::IsPreExtrapolatedTime
  // Il2CppName: IsPreExtrapolatedTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)(double)>(&TimelineClip::IsPreExtrapolatedTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "IsPreExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::IsPostExtrapolatedTime
  // Il2CppName: IsPostExtrapolatedTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TimelineClip::*)(double)>(&TimelineClip::IsPostExtrapolatedTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "IsPostExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_extrapolatedStart
  // Il2CppName: get_extrapolatedStart
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_extrapolatedStart)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_extrapolatedStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::get_extrapolatedDuration
  // Il2CppName: get_extrapolatedDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (TimelineClip::*)()>(&TimelineClip::get_extrapolatedDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "get_extrapolatedDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::GetExtrapolatedTime
  // Il2CppName: GetExtrapolatedTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, UnityEngine::Timeline::TimelineClip::ClipExtrapolation, double)>(&TimelineClip::GetExtrapolatedTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "GetExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Timeline::TimelineClip::ClipExtrapolation>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::CreateCurves
  // Il2CppName: CreateCurves
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(::Il2CppString*)>(&TimelineClip::CreateCurves)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "CreateCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
  // Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
  // Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::ConformEaseValues
  // Il2CppName: ConformEaseValues
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)()>(&TimelineClip::ConformEaseValues)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ConformEaseValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::CalculateEasingRatio
  // Il2CppName: CalculateEasingRatio
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&TimelineClip::CalculateEasingRatio)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "CalculateEasingRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::UpdateDirty
  // Il2CppName: UpdateDirty
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelineClip::*)(double, double)>(&TimelineClip::UpdateDirty)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "UpdateDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TimelineClip::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: TimelineClip::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TimelineClip::*)()>(&TimelineClip::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TimelineClip*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TimelineClip*, "UnityEngine.Timeline", "TimelineClip");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TimelineClip::ClipExtrapolation, "UnityEngine.Timeline", "TimelineClip/ClipExtrapolation");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TimelineClip::BlendCurveMode, "UnityEngine.Timeline", "TimelineClip/BlendCurveMode");
