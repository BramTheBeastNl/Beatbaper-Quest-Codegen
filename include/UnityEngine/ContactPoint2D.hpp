// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ContactPoint2D
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeClassAttribute] Offset: DA00C0
  // [RequiredByNativeCodeAttribute] Offset: DA00C0
  // [NativeHeaderAttribute] Offset: DA00C0
  struct ContactPoint2D/*, public System::ValueType*/ {
    public:
    // [NativeNameAttribute] Offset: 0xDA057C
    // private UnityEngine.Vector2 m_Point
    // Size: 0x8
    // Offset: 0x0
    UnityEngine::Vector2 m_Point;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [NativeNameAttribute] Offset: 0xDA05B4
    // private UnityEngine.Vector2 m_Normal
    // Size: 0x8
    // Offset: 0x8
    UnityEngine::Vector2 m_Normal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [NativeNameAttribute] Offset: 0xDA05EC
    // private UnityEngine.Vector2 m_RelativeVelocity
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Vector2 m_RelativeVelocity;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [NativeNameAttribute] Offset: 0xDA0624
    // private System.Single m_Separation
    // Size: 0x4
    // Offset: 0x18
    float m_Separation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA065C
    // private System.Single m_NormalImpulse
    // Size: 0x4
    // Offset: 0x1C
    float m_NormalImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA0694
    // private System.Single m_TangentImpulse
    // Size: 0x4
    // Offset: 0x20
    float m_TangentImpulse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA06CC
    // private System.Int32 m_Collider
    // Size: 0x4
    // Offset: 0x24
    int m_Collider;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA0704
    // private System.Int32 m_OtherCollider
    // Size: 0x4
    // Offset: 0x28
    int m_OtherCollider;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA073C
    // private System.Int32 m_Rigidbody
    // Size: 0x4
    // Offset: 0x2C
    int m_Rigidbody;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA0774
    // private System.Int32 m_OtherRigidbody
    // Size: 0x4
    // Offset: 0x30
    int m_OtherRigidbody;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [NativeNameAttribute] Offset: 0xDA07AC
    // private System.Int32 m_Enabled
    // Size: 0x4
    // Offset: 0x34
    int m_Enabled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ContactPoint2D
    constexpr ContactPoint2D(UnityEngine::Vector2 m_Point_ = {}, UnityEngine::Vector2 m_Normal_ = {}, UnityEngine::Vector2 m_RelativeVelocity_ = {}, float m_Separation_ = {}, float m_NormalImpulse_ = {}, float m_TangentImpulse_ = {}, int m_Collider_ = {}, int m_OtherCollider_ = {}, int m_Rigidbody_ = {}, int m_OtherRigidbody_ = {}, int m_Enabled_ = {}) noexcept : m_Point{m_Point_}, m_Normal{m_Normal_}, m_RelativeVelocity{m_RelativeVelocity_}, m_Separation{m_Separation_}, m_NormalImpulse{m_NormalImpulse_}, m_TangentImpulse{m_TangentImpulse_}, m_Collider{m_Collider_}, m_OtherCollider{m_OtherCollider_}, m_Rigidbody{m_Rigidbody_}, m_OtherRigidbody{m_OtherRigidbody_}, m_Enabled{m_Enabled_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: private UnityEngine.Vector2 m_Point
    UnityEngine::Vector2 _get_m_Point();
    // Set instance field: private UnityEngine.Vector2 m_Point
    void _set_m_Point(UnityEngine::Vector2 value);
    // Get instance field: private UnityEngine.Vector2 m_Normal
    UnityEngine::Vector2 _get_m_Normal();
    // Set instance field: private UnityEngine.Vector2 m_Normal
    void _set_m_Normal(UnityEngine::Vector2 value);
    // Get instance field: private UnityEngine.Vector2 m_RelativeVelocity
    UnityEngine::Vector2 _get_m_RelativeVelocity();
    // Set instance field: private UnityEngine.Vector2 m_RelativeVelocity
    void _set_m_RelativeVelocity(UnityEngine::Vector2 value);
    // Get instance field: private System.Single m_Separation
    float _get_m_Separation();
    // Set instance field: private System.Single m_Separation
    void _set_m_Separation(float value);
    // Get instance field: private System.Single m_NormalImpulse
    float _get_m_NormalImpulse();
    // Set instance field: private System.Single m_NormalImpulse
    void _set_m_NormalImpulse(float value);
    // Get instance field: private System.Single m_TangentImpulse
    float _get_m_TangentImpulse();
    // Set instance field: private System.Single m_TangentImpulse
    void _set_m_TangentImpulse(float value);
    // Get instance field: private System.Int32 m_Collider
    int _get_m_Collider();
    // Set instance field: private System.Int32 m_Collider
    void _set_m_Collider(int value);
    // Get instance field: private System.Int32 m_OtherCollider
    int _get_m_OtherCollider();
    // Set instance field: private System.Int32 m_OtherCollider
    void _set_m_OtherCollider(int value);
    // Get instance field: private System.Int32 m_Rigidbody
    int _get_m_Rigidbody();
    // Set instance field: private System.Int32 m_Rigidbody
    void _set_m_Rigidbody(int value);
    // Get instance field: private System.Int32 m_OtherRigidbody
    int _get_m_OtherRigidbody();
    // Set instance field: private System.Int32 m_OtherRigidbody
    void _set_m_OtherRigidbody(int value);
    // Get instance field: private System.Int32 m_Enabled
    int _get_m_Enabled();
    // Set instance field: private System.Int32 m_Enabled
    void _set_m_Enabled(int value);
  }; // UnityEngine.ContactPoint2D
  #pragma pack(pop)
  static check_size<sizeof(ContactPoint2D), 52 + sizeof(int)> __UnityEngine_ContactPoint2DSizeCheck;
  static_assert(sizeof(ContactPoint2D) == 0x38);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ContactPoint2D, "UnityEngine", "ContactPoint2D");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
