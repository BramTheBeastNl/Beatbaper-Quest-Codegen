// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Shader
  // [] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: CA8630
  // [NativeHeaderAttribute] Offset: CA8630
  // [NativeHeaderAttribute] Offset: CA8630
  // [NativeHeaderAttribute] Offset: CA8630
  // [NativeHeaderAttribute] Offset: CA8630
  // [NativeHeaderAttribute] Offset: CA8630
  // [NativeHeaderAttribute] Offset: CA8630
  class Shader : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Shader
    Shader() noexcept {}
    // static public UnityEngine.Shader Find(System.String name)
    // Offset: 0x1981920
    static UnityEngine::Shader* Find(::Il2CppString* name);
    // public System.Boolean get_isSupported()
    // Offset: 0x1981960
    bool get_isSupported();
    // static public System.Void EnableKeyword(System.String keyword)
    // Offset: 0x19819A0
    static void EnableKeyword(::Il2CppString* keyword);
    // static public System.Void DisableKeyword(System.String keyword)
    // Offset: 0x19819E0
    static void DisableKeyword(::Il2CppString* keyword);
    // static public System.Int32 PropertyToID(System.String name)
    // Offset: 0x197C694
    static int PropertyToID(::Il2CppString* name);
    // static private System.Void SetGlobalFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x1981A20
    static void SetGlobalFloatImpl(int name, float value);
    // static private System.Void SetGlobalVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x1981A70
    static void SetGlobalVectorImpl(int name, UnityEngine::Vector4 value);
    // static private System.Void SetGlobalMatrixImpl(System.Int32 name, UnityEngine.Matrix4x4 value)
    // Offset: 0x1981B18
    static void SetGlobalMatrixImpl(int name, UnityEngine::Matrix4x4 value);
    // static private System.Void SetGlobalTextureImpl(System.Int32 name, UnityEngine.Texture value)
    // Offset: 0x1981BB8
    static void SetGlobalTextureImpl(int name, UnityEngine::Texture* value);
    // static private System.Void SetGlobalFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1981C08
    static void SetGlobalFloatArrayImpl(int name, ::Array<float>* values, int count);
    // static private System.Void SetGlobalVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1981C60
    static void SetGlobalVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.Void SetGlobalFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1981CB8
    static void SetGlobalFloatArray(int name, ::Array<float>* values, int count);
    // static private System.Void SetGlobalVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1981DCC
    static void SetGlobalVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static public System.Void SetGlobalFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x1981EE0
    static void SetGlobalFloat(int nameID, float value);
    // static public System.Void SetGlobalInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x1981F30
    static void SetGlobalInt(int nameID, int value);
    // static public System.Void SetGlobalVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x1981F80
    static void SetGlobalVector(int nameID, UnityEngine::Vector4 value);
    // static public System.Void SetGlobalMatrix(System.Int32 nameID, UnityEngine.Matrix4x4 value)
    // Offset: 0x1981F84
    static void SetGlobalMatrix(int nameID, UnityEngine::Matrix4x4 value);
    // static public System.Void SetGlobalTexture(System.String name, UnityEngine.Texture value)
    // Offset: 0x1981FE4
    static void SetGlobalTexture(::Il2CppString* name, UnityEngine::Texture* value);
    // static public System.Void SetGlobalTexture(System.Int32 nameID, UnityEngine.Texture value)
    // Offset: 0x1982060
    static void SetGlobalTexture(int nameID, UnityEngine::Texture* value);
    // static public System.Void SetGlobalFloatArray(System.Int32 nameID, System.Single[] values)
    // Offset: 0x19820B0
    static void SetGlobalFloatArray(int nameID, ::Array<float>* values);
    // static public System.Void SetGlobalVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x19820C8
    static void SetGlobalVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // static private System.Void SetGlobalVectorImpl_Injected(System.Int32 name, ref UnityEngine.Vector4 value)
    // Offset: 0x1981AC8
    static void SetGlobalVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // static private System.Void SetGlobalMatrixImpl_Injected(System.Int32 name, ref UnityEngine.Matrix4x4 value)
    // Offset: 0x1981B68
    static void SetGlobalMatrixImpl_Injected(int name, UnityEngine::Matrix4x4& value);
    // private System.Void .ctor()
    // Offset: 0x19820E0
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Shader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Shader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Shader*, creationType>()));
    }
  }; // UnityEngine.Shader
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Shader*, "UnityEngine", "Shader");
