// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: ShaderHardwareTier
  struct ShaderHardwareTier;
  // Forward declaring type: ShaderTagId
  struct ShaderTagId;
  // Forward declaring type: RenderTextureSubElement
  struct RenderTextureSubElement;
  // Forward declaring type: ShaderPropertyType
  struct ShaderPropertyType;
  // Forward declaring type: ShaderPropertyFlags
  struct ShaderPropertyFlags;
  // Forward declaring type: TextureDimension
  struct TextureDimension;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: DisableBatchingType
  struct DisableBatchingType;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Shader
  // [NativeHeaderAttribute] Offset: D8EDB0
  // [NativeHeaderAttribute] Offset: D8EDB0
  // [NativeHeaderAttribute] Offset: D8EDB0
  // [NativeHeaderAttribute] Offset: D8EDB0
  // [NativeHeaderAttribute] Offset: D8EDB0
  // [NativeHeaderAttribute] Offset: D8EDB0
  // [NativeHeaderAttribute] Offset: D8EDB0
  class Shader : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Shader
    Shader() noexcept {}
    // static public UnityEngine.Rendering.ShaderHardwareTier get_globalShaderHardwareTier()
    // Offset: 0x1B1761C
    static UnityEngine::Rendering::ShaderHardwareTier get_globalShaderHardwareTier();
    // static public System.Void set_globalShaderHardwareTier(UnityEngine.Rendering.ShaderHardwareTier value)
    // Offset: 0x1B1767C
    static void set_globalShaderHardwareTier(UnityEngine::Rendering::ShaderHardwareTier value);
    // static public UnityEngine.Shader Find(System.String name)
    // Offset: 0x1B176E4
    static UnityEngine::Shader* Find(::Il2CppString* name);
    // static UnityEngine.Shader FindBuiltin(System.String name)
    // Offset: 0x1B17724
    static UnityEngine::Shader* FindBuiltin(::Il2CppString* name);
    // public System.Int32 get_maximumLOD()
    // Offset: 0x1B17764
    int get_maximumLOD();
    // public System.Void set_maximumLOD(System.Int32 value)
    // Offset: 0x1B177A4
    void set_maximumLOD(int value);
    // static public System.Int32 get_globalMaximumLOD()
    // Offset: 0x1B177F4
    static int get_globalMaximumLOD();
    // static public System.Void set_globalMaximumLOD(System.Int32 value)
    // Offset: 0x1B17828
    static void set_globalMaximumLOD(int value);
    // public System.Boolean get_isSupported()
    // Offset: 0x1B17868
    bool get_isSupported();
    // static public System.String get_globalRenderPipeline()
    // Offset: 0x1B178A8
    static ::Il2CppString* get_globalRenderPipeline();
    // static public System.Void set_globalRenderPipeline(System.String value)
    // Offset: 0x1B178DC
    static void set_globalRenderPipeline(::Il2CppString* value);
    // static public System.Void EnableKeyword(System.String keyword)
    // Offset: 0x1B1791C
    static void EnableKeyword(::Il2CppString* keyword);
    // static public System.Void DisableKeyword(System.String keyword)
    // Offset: 0x1B1795C
    static void DisableKeyword(::Il2CppString* keyword);
    // static public System.Boolean IsKeywordEnabled(System.String keyword)
    // Offset: 0x1B1799C
    static bool IsKeywordEnabled(::Il2CppString* keyword);
    // public System.Int32 get_renderQueue()
    // Offset: 0x1B179DC
    int get_renderQueue();
    // UnityEngine.DisableBatchingType get_disableBatching()
    // Offset: 0x1B17A1C
    UnityEngine::DisableBatchingType get_disableBatching();
    // static public System.Void WarmupAllShaders()
    // Offset: 0x1B17A5C
    static void WarmupAllShaders();
    // static System.Int32 TagToID(System.String name)
    // Offset: 0x1B17A90
    static int TagToID(::Il2CppString* name);
    // static System.String IDToTag(System.Int32 name)
    // Offset: 0x1B17AD0
    static ::Il2CppString* IDToTag(int name);
    // static public System.Int32 PropertyToID(System.String name)
    // Offset: 0x1B11A28
    static int PropertyToID(::Il2CppString* name);
    // public UnityEngine.Shader GetDependency(System.String name)
    // Offset: 0x1B17B10
    UnityEngine::Shader* GetDependency(::Il2CppString* name);
    // public System.Int32 get_passCount()
    // Offset: 0x1B17B60
    int get_passCount();
    // public UnityEngine.Rendering.ShaderTagId FindPassTagValue(System.Int32 passIndex, UnityEngine.Rendering.ShaderTagId tagName)
    // Offset: 0x1B17BA0
    UnityEngine::Rendering::ShaderTagId FindPassTagValue(int passIndex, UnityEngine::Rendering::ShaderTagId tagName);
    // private System.Int32 Internal_FindPassTagValue(System.Int32 passIndex, System.Int32 tagName)
    // Offset: 0x1B17C94
    int Internal_FindPassTagValue(int passIndex, int tagName);
    // static private System.Void SetGlobalFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x1B17CEC
    static void SetGlobalFloatImpl(int name, float value);
    // static private System.Void SetGlobalVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x1B17D3C
    static void SetGlobalVectorImpl(int name, UnityEngine::Vector4 value);
    // static private System.Void SetGlobalMatrixImpl(System.Int32 name, UnityEngine.Matrix4x4 value)
    // Offset: 0x1B17DE4
    static void SetGlobalMatrixImpl(int name, UnityEngine::Matrix4x4 value);
    // static private System.Void SetGlobalTextureImpl(System.Int32 name, UnityEngine.Texture value)
    // Offset: 0x1B17E84
    static void SetGlobalTextureImpl(int name, UnityEngine::Texture* value);
    // static private System.Void SetGlobalRenderTextureImpl(System.Int32 name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element)
    // Offset: 0x1B17ED4
    static void SetGlobalRenderTextureImpl(int name, UnityEngine::RenderTexture* value, UnityEngine::Rendering::RenderTextureSubElement element);
    // static private System.Void SetGlobalBufferImpl(System.Int32 name, UnityEngine.ComputeBuffer value)
    // Offset: 0x1B17F2C
    static void SetGlobalBufferImpl(int name, UnityEngine::ComputeBuffer* value);
    // static private System.Void SetGlobalConstantBufferImpl(System.Int32 name, UnityEngine.ComputeBuffer value, System.Int32 offset, System.Int32 size)
    // Offset: 0x1B17F7C
    static void SetGlobalConstantBufferImpl(int name, UnityEngine::ComputeBuffer* value, int offset, int size);
    // static private System.Single GetGlobalFloatImpl(System.Int32 name)
    // Offset: 0x1B17FE4
    static float GetGlobalFloatImpl(int name);
    // static private UnityEngine.Vector4 GetGlobalVectorImpl(System.Int32 name)
    // Offset: 0x1B18024
    static UnityEngine::Vector4 GetGlobalVectorImpl(int name);
    // static private UnityEngine.Matrix4x4 GetGlobalMatrixImpl(System.Int32 name)
    // Offset: 0x1B180D0
    static UnityEngine::Matrix4x4 GetGlobalMatrixImpl(int name);
    // static private UnityEngine.Texture GetGlobalTextureImpl(System.Int32 name)
    // Offset: 0x1B18198
    static UnityEngine::Texture* GetGlobalTextureImpl(int name);
    // static private System.Void SetGlobalFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1B181D8
    static void SetGlobalFloatArrayImpl(int name, ::Array<float>* values, int count);
    // static private System.Void SetGlobalVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1B18230
    static void SetGlobalVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.Void SetGlobalMatrixArrayImpl(System.Int32 name, UnityEngine.Matrix4x4[] values, System.Int32 count)
    // Offset: 0x1B18288
    static void SetGlobalMatrixArrayImpl(int name, ::Array<UnityEngine::Matrix4x4>* values, int count);
    // static private System.Single[] GetGlobalFloatArrayImpl(System.Int32 name)
    // Offset: 0x1B182E0
    static ::Array<float>* GetGlobalFloatArrayImpl(int name);
    // static private UnityEngine.Vector4[] GetGlobalVectorArrayImpl(System.Int32 name)
    // Offset: 0x1B18320
    static ::Array<UnityEngine::Vector4>* GetGlobalVectorArrayImpl(int name);
    // static private UnityEngine.Matrix4x4[] GetGlobalMatrixArrayImpl(System.Int32 name)
    // Offset: 0x1B18360
    static ::Array<UnityEngine::Matrix4x4>* GetGlobalMatrixArrayImpl(int name);
    // static private System.Int32 GetGlobalFloatArrayCountImpl(System.Int32 name)
    // Offset: 0x1B183A0
    static int GetGlobalFloatArrayCountImpl(int name);
    // static private System.Int32 GetGlobalVectorArrayCountImpl(System.Int32 name)
    // Offset: 0x1B183E0
    static int GetGlobalVectorArrayCountImpl(int name);
    // static private System.Int32 GetGlobalMatrixArrayCountImpl(System.Int32 name)
    // Offset: 0x1B18420
    static int GetGlobalMatrixArrayCountImpl(int name);
    // static private System.Void ExtractGlobalFloatArrayImpl(System.Int32 name, out System.Single[] val)
    // Offset: 0x1B18460
    static void ExtractGlobalFloatArrayImpl(int name, ::Array<float>*& val);
    // static private System.Void ExtractGlobalVectorArrayImpl(System.Int32 name, out UnityEngine.Vector4[] val)
    // Offset: 0x1B184B0
    static void ExtractGlobalVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>*& val);
    // static private System.Void ExtractGlobalMatrixArrayImpl(System.Int32 name, out UnityEngine.Matrix4x4[] val)
    // Offset: 0x1B18500
    static void ExtractGlobalMatrixArrayImpl(int name, ::Array<UnityEngine::Matrix4x4>*& val);
    // static private System.Void SetGlobalFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1B18550
    static void SetGlobalFloatArray(int name, ::Array<float>* values, int count);
    // static private System.Void SetGlobalVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1B18664
    static void SetGlobalVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.Void SetGlobalMatrixArray(System.Int32 name, UnityEngine.Matrix4x4[] values, System.Int32 count)
    // Offset: 0x1B18778
    static void SetGlobalMatrixArray(int name, ::Array<UnityEngine::Matrix4x4>* values, int count);
    // static private System.Void ExtractGlobalFloatArray(System.Int32 name, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1B1888C
    static void ExtractGlobalFloatArray(int name, System::Collections::Generic::List_1<float>* values);
    // static private System.Void ExtractGlobalVectorArray(System.Int32 name, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1B189EC
    static void ExtractGlobalVectorArray(int name, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // static private System.Void ExtractGlobalMatrixArray(System.Int32 name, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1B18B4C
    static void ExtractGlobalMatrixArray(int name, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // static public System.Void SetGlobalFloat(System.String name, System.Single value)
    // Offset: 0x1B18CAC
    static void SetGlobalFloat(::Il2CppString* name, float value);
    // static public System.Void SetGlobalFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x1B18D28
    static void SetGlobalFloat(int nameID, float value);
    // static public System.Void SetGlobalInt(System.String name, System.Int32 value)
    // Offset: 0x1B18D78
    static void SetGlobalInt(::Il2CppString* name, int value);
    // static public System.Void SetGlobalInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x1B18E00
    static void SetGlobalInt(int nameID, int value);
    // static public System.Void SetGlobalVector(System.String name, UnityEngine.Vector4 value)
    // Offset: 0x1B18E50
    static void SetGlobalVector(::Il2CppString* name, UnityEngine::Vector4 value);
    // static public System.Void SetGlobalVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x1B18EC4
    static void SetGlobalVector(int nameID, UnityEngine::Vector4 value);
    // static public System.Void SetGlobalColor(System.String name, UnityEngine.Color value)
    // Offset: 0x1B18EC8
    static void SetGlobalColor(::Il2CppString* name, UnityEngine::Color value);
    // static public System.Void SetGlobalColor(System.Int32 nameID, UnityEngine.Color value)
    // Offset: 0x1B18F4C
    static void SetGlobalColor(int nameID, UnityEngine::Color value);
    // static public System.Void SetGlobalMatrix(System.String name, UnityEngine.Matrix4x4 value)
    // Offset: 0x1B18F74
    static void SetGlobalMatrix(::Il2CppString* name, UnityEngine::Matrix4x4 value);
    // static public System.Void SetGlobalMatrix(System.Int32 nameID, UnityEngine.Matrix4x4 value)
    // Offset: 0x1B1900C
    static void SetGlobalMatrix(int nameID, UnityEngine::Matrix4x4 value);
    // static public System.Void SetGlobalTexture(System.String name, UnityEngine.Texture value)
    // Offset: 0x1B1906C
    static void SetGlobalTexture(::Il2CppString* name, UnityEngine::Texture* value);
    // static public System.Void SetGlobalTexture(System.Int32 nameID, UnityEngine.Texture value)
    // Offset: 0x1B190E8
    static void SetGlobalTexture(int nameID, UnityEngine::Texture* value);
    // static public System.Void SetGlobalTexture(System.String name, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element)
    // Offset: 0x1B19138
    static void SetGlobalTexture(::Il2CppString* name, UnityEngine::RenderTexture* value, UnityEngine::Rendering::RenderTextureSubElement element);
    // static public System.Void SetGlobalTexture(System.Int32 nameID, UnityEngine.RenderTexture value, UnityEngine.Rendering.RenderTextureSubElement element)
    // Offset: 0x1B191BC
    static void SetGlobalTexture(int nameID, UnityEngine::RenderTexture* value, UnityEngine::Rendering::RenderTextureSubElement element);
    // static public System.Void SetGlobalBuffer(System.String name, UnityEngine.ComputeBuffer value)
    // Offset: 0x1B19214
    static void SetGlobalBuffer(::Il2CppString* name, UnityEngine::ComputeBuffer* value);
    // static public System.Void SetGlobalBuffer(System.Int32 nameID, UnityEngine.ComputeBuffer value)
    // Offset: 0x1B19290
    static void SetGlobalBuffer(int nameID, UnityEngine::ComputeBuffer* value);
    // static public System.Void SetGlobalConstantBuffer(System.Int32 nameID, UnityEngine.ComputeBuffer value, System.Int32 offset, System.Int32 size)
    // Offset: 0x1B192E0
    static void SetGlobalConstantBuffer(int nameID, UnityEngine::ComputeBuffer* value, int offset, int size);
    // static public System.Void SetGlobalFloatArray(System.String name, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1B19348
    static void SetGlobalFloatArray(::Il2CppString* name, System::Collections::Generic::List_1<float>* values);
    // static public System.Void SetGlobalFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1B193E8
    static void SetGlobalFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // static public System.Void SetGlobalFloatArray(System.String name, System.Single[] values)
    // Offset: 0x1B1945C
    static void SetGlobalFloatArray(::Il2CppString* name, ::Array<float>* values);
    // static public System.Void SetGlobalFloatArray(System.Int32 nameID, System.Single[] values)
    // Offset: 0x1B194BC
    static void SetGlobalFloatArray(int nameID, ::Array<float>* values);
    // static public System.Void SetGlobalVectorArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1B194D4
    static void SetGlobalVectorArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // static public System.Void SetGlobalVectorArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1B19574
    static void SetGlobalVectorArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // static public System.Void SetGlobalVectorArray(System.String name, UnityEngine.Vector4[] values)
    // Offset: 0x1B195E8
    static void SetGlobalVectorArray(::Il2CppString* name, ::Array<UnityEngine::Vector4>* values);
    // static public System.Void SetGlobalVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x1B19648
    static void SetGlobalVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // static public System.Void SetGlobalMatrixArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1B19660
    static void SetGlobalMatrixArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // static public System.Void SetGlobalMatrixArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1B19700
    static void SetGlobalMatrixArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // static public System.Void SetGlobalMatrixArray(System.String name, UnityEngine.Matrix4x4[] values)
    // Offset: 0x1B19774
    static void SetGlobalMatrixArray(::Il2CppString* name, ::Array<UnityEngine::Matrix4x4>* values);
    // static public System.Void SetGlobalMatrixArray(System.Int32 nameID, UnityEngine.Matrix4x4[] values)
    // Offset: 0x1B197D4
    static void SetGlobalMatrixArray(int nameID, ::Array<UnityEngine::Matrix4x4>* values);
    // static public System.Single GetGlobalFloat(System.String name)
    // Offset: 0x1B197EC
    static float GetGlobalFloat(::Il2CppString* name);
    // static public System.Single GetGlobalFloat(System.Int32 nameID)
    // Offset: 0x1B19858
    static float GetGlobalFloat(int nameID);
    // static public System.Int32 GetGlobalInt(System.String name)
    // Offset: 0x1B19898
    static int GetGlobalInt(::Il2CppString* name);
    // static public System.Int32 GetGlobalInt(System.Int32 nameID)
    // Offset: 0x1B1990C
    static int GetGlobalInt(int nameID);
    // static public UnityEngine.Vector4 GetGlobalVector(System.String name)
    // Offset: 0x1B19954
    static UnityEngine::Vector4 GetGlobalVector(::Il2CppString* name);
    // static public UnityEngine.Vector4 GetGlobalVector(System.Int32 nameID)
    // Offset: 0x1B19998
    static UnityEngine::Vector4 GetGlobalVector(int nameID);
    // static public UnityEngine.Color GetGlobalColor(System.String name)
    // Offset: 0x1B1999C
    static UnityEngine::Color GetGlobalColor(::Il2CppString* name);
    // static public UnityEngine.Color GetGlobalColor(System.Int32 nameID)
    // Offset: 0x1B199E8
    static UnityEngine::Color GetGlobalColor(int nameID);
    // static public UnityEngine.Matrix4x4 GetGlobalMatrix(System.String name)
    // Offset: 0x1B19A00
    static UnityEngine::Matrix4x4 GetGlobalMatrix(::Il2CppString* name);
    // static public UnityEngine.Matrix4x4 GetGlobalMatrix(System.Int32 nameID)
    // Offset: 0x1B19AC0
    static UnityEngine::Matrix4x4 GetGlobalMatrix(int nameID);
    // static public UnityEngine.Texture GetGlobalTexture(System.String name)
    // Offset: 0x1B19B50
    static UnityEngine::Texture* GetGlobalTexture(::Il2CppString* name);
    // static public UnityEngine.Texture GetGlobalTexture(System.Int32 nameID)
    // Offset: 0x1B19BBC
    static UnityEngine::Texture* GetGlobalTexture(int nameID);
    // static public System.Single[] GetGlobalFloatArray(System.String name)
    // Offset: 0x1B19BFC
    static ::Array<float>* GetGlobalFloatArray(::Il2CppString* name);
    // static public System.Single[] GetGlobalFloatArray(System.Int32 nameID)
    // Offset: 0x1B19C40
    static ::Array<float>* GetGlobalFloatArray(int nameID);
    // static public UnityEngine.Vector4[] GetGlobalVectorArray(System.String name)
    // Offset: 0x1B19CBC
    static ::Array<UnityEngine::Vector4>* GetGlobalVectorArray(::Il2CppString* name);
    // static public UnityEngine.Vector4[] GetGlobalVectorArray(System.Int32 nameID)
    // Offset: 0x1B19D00
    static ::Array<UnityEngine::Vector4>* GetGlobalVectorArray(int nameID);
    // static public UnityEngine.Matrix4x4[] GetGlobalMatrixArray(System.String name)
    // Offset: 0x1B19D7C
    static ::Array<UnityEngine::Matrix4x4>* GetGlobalMatrixArray(::Il2CppString* name);
    // static public UnityEngine.Matrix4x4[] GetGlobalMatrixArray(System.Int32 nameID)
    // Offset: 0x1B19DC0
    static ::Array<UnityEngine::Matrix4x4>* GetGlobalMatrixArray(int nameID);
    // static public System.Void GetGlobalFloatArray(System.String name, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1B19E3C
    static void GetGlobalFloatArray(::Il2CppString* name, System::Collections::Generic::List_1<float>* values);
    // static public System.Void GetGlobalFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1B19E90
    static void GetGlobalFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // static public System.Void GetGlobalVectorArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1B19E94
    static void GetGlobalVectorArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // static public System.Void GetGlobalVectorArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Vector4> values)
    // Offset: 0x1B19EE8
    static void GetGlobalVectorArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Vector4>* values);
    // static public System.Void GetGlobalMatrixArray(System.String name, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1B19EEC
    static void GetGlobalMatrixArray(::Il2CppString* name, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // static public System.Void GetGlobalMatrixArray(System.Int32 nameID, System.Collections.Generic.List`1<UnityEngine.Matrix4x4> values)
    // Offset: 0x1B19F40
    static void GetGlobalMatrixArray(int nameID, System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* values);
    // static private System.String GetPropertyName(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B19FAC
    static ::Il2CppString* GetPropertyName(UnityEngine::Shader* shader, int propertyIndex);
    // static private System.Int32 GetPropertyNameId(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B19FFC
    static int GetPropertyNameId(UnityEngine::Shader* shader, int propertyIndex);
    // static private UnityEngine.Rendering.ShaderPropertyType GetPropertyType(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A04C
    static UnityEngine::Rendering::ShaderPropertyType GetPropertyType(UnityEngine::Shader* shader, int propertyIndex);
    // static private System.String GetPropertyDescription(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A09C
    static ::Il2CppString* GetPropertyDescription(UnityEngine::Shader* shader, int propertyIndex);
    // static private UnityEngine.Rendering.ShaderPropertyFlags GetPropertyFlags(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A0EC
    static UnityEngine::Rendering::ShaderPropertyFlags GetPropertyFlags(UnityEngine::Shader* shader, int propertyIndex);
    // static private System.String[] GetPropertyAttributes(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A13C
    static ::Array<::Il2CppString*>* GetPropertyAttributes(UnityEngine::Shader* shader, int propertyIndex);
    // static private UnityEngine.Vector4 GetPropertyDefaultValue(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A18C
    static UnityEngine::Vector4 GetPropertyDefaultValue(UnityEngine::Shader* shader, int propertyIndex);
    // static private UnityEngine.Rendering.TextureDimension GetPropertyTextureDimension(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A250
    static UnityEngine::Rendering::TextureDimension GetPropertyTextureDimension(UnityEngine::Shader* shader, int propertyIndex);
    // static private System.String GetPropertyTextureDefaultName(UnityEngine.Shader shader, System.Int32 propertyIndex)
    // Offset: 0x1B1A2A0
    static ::Il2CppString* GetPropertyTextureDefaultName(UnityEngine::Shader* shader, int propertyIndex);
    // static private System.Void CheckPropertyIndex(UnityEngine.Shader s, System.Int32 propertyIndex)
    // Offset: 0x1B1A2F0
    static void CheckPropertyIndex(UnityEngine::Shader* s, int propertyIndex);
    // public System.Int32 GetPropertyCount()
    // Offset: 0x1B1A3B4
    int GetPropertyCount();
    // public System.Int32 FindPropertyIndex(System.String propertyName)
    // Offset: 0x1B1A3F4
    int FindPropertyIndex(::Il2CppString* propertyName);
    // public System.String GetPropertyName(System.Int32 propertyIndex)
    // Offset: 0x1B1A444
    ::Il2CppString* GetPropertyName(int propertyIndex);
    // public System.Int32 GetPropertyNameId(System.Int32 propertyIndex)
    // Offset: 0x1B1A498
    int GetPropertyNameId(int propertyIndex);
    // public UnityEngine.Rendering.ShaderPropertyType GetPropertyType(System.Int32 propertyIndex)
    // Offset: 0x1B1A4EC
    UnityEngine::Rendering::ShaderPropertyType GetPropertyType(int propertyIndex);
    // public System.String GetPropertyDescription(System.Int32 propertyIndex)
    // Offset: 0x1B1A540
    ::Il2CppString* GetPropertyDescription(int propertyIndex);
    // public UnityEngine.Rendering.ShaderPropertyFlags GetPropertyFlags(System.Int32 propertyIndex)
    // Offset: 0x1B1A594
    UnityEngine::Rendering::ShaderPropertyFlags GetPropertyFlags(int propertyIndex);
    // public System.String[] GetPropertyAttributes(System.Int32 propertyIndex)
    // Offset: 0x1B1A5E8
    ::Array<::Il2CppString*>* GetPropertyAttributes(int propertyIndex);
    // public System.Single GetPropertyDefaultFloatValue(System.Int32 propertyIndex)
    // Offset: 0x1B1A63C
    float GetPropertyDefaultFloatValue(int propertyIndex);
    // public UnityEngine.Vector4 GetPropertyDefaultVectorValue(System.Int32 propertyIndex)
    // Offset: 0x1B1A718
    UnityEngine::Vector4 GetPropertyDefaultVectorValue(int propertyIndex);
    // public UnityEngine.Vector2 GetPropertyRangeLimits(System.Int32 propertyIndex)
    // Offset: 0x1B1A7C8
    UnityEngine::Vector2 GetPropertyRangeLimits(int propertyIndex);
    // public UnityEngine.Rendering.TextureDimension GetPropertyTextureDimension(System.Int32 propertyIndex)
    // Offset: 0x1B1A8D8
    UnityEngine::Rendering::TextureDimension GetPropertyTextureDimension(int propertyIndex);
    // public System.String GetPropertyTextureDefaultName(System.Int32 propertyIndex)
    // Offset: 0x1B1A9A8
    ::Il2CppString* GetPropertyTextureDefaultName(int propertyIndex);
    // static private System.Void SetGlobalVectorImpl_Injected(System.Int32 name, ref UnityEngine.Vector4 value)
    // Offset: 0x1B17D94
    static void SetGlobalVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // static private System.Void SetGlobalMatrixImpl_Injected(System.Int32 name, ref UnityEngine.Matrix4x4 value)
    // Offset: 0x1B17E34
    static void SetGlobalMatrixImpl_Injected(int name, UnityEngine::Matrix4x4& value);
    // static private System.Void GetGlobalVectorImpl_Injected(System.Int32 name, out UnityEngine.Vector4 ret)
    // Offset: 0x1B18080
    static void GetGlobalVectorImpl_Injected(int name, UnityEngine::Vector4& ret);
    // static private System.Void GetGlobalMatrixImpl_Injected(System.Int32 name, out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1B18148
    static void GetGlobalMatrixImpl_Injected(int name, UnityEngine::Matrix4x4& ret);
    // static private System.Void GetPropertyDefaultValue_Injected(UnityEngine.Shader shader, System.Int32 propertyIndex, out UnityEngine.Vector4 ret)
    // Offset: 0x1B1A1F8
    static void GetPropertyDefaultValue_Injected(UnityEngine::Shader* shader, int propertyIndex, UnityEngine::Vector4& ret);
    // private System.Void .ctor()
    // Offset: 0x1B19F44
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Shader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Shader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Shader*, creationType>()));
    }
  }; // UnityEngine.Shader
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Shader*, "UnityEngine", "Shader");
