// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AudioLowPassFilter
  // [RequireComponent] Offset: DBC334
  class AudioLowPassFilter : public UnityEngine::Behaviour {
    public:
    // Creating value type constructor for type: AudioLowPassFilter
    AudioLowPassFilter() noexcept {}
    // public System.Single get_cutoffFrequency()
    // Offset: 0x23D4A14
    float get_cutoffFrequency();
    // public System.Void set_cutoffFrequency(System.Single value)
    // Offset: 0x23D4A54
    void set_cutoffFrequency(float value);
  }; // UnityEngine.AudioLowPassFilter
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AudioLowPassFilter*, "UnityEngine", "AudioLowPassFilter");
// Writing MetadataGetter for method: AudioLowPassFilter::get_cutoffFrequency
// Il2CppName: get_cutoffFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioLowPassFilter::*)()>(&AudioLowPassFilter::get_cutoffFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioLowPassFilter*), "get_cutoffFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioLowPassFilter::set_cutoffFrequency
// Il2CppName: set_cutoffFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioLowPassFilter::*)(float)>(&AudioLowPassFilter::set_cutoffFrequency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioLowPassFilter*), "set_cutoffFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
