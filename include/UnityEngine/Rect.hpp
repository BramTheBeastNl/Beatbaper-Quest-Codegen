// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rect
  // [NativeHeaderAttribute] Offset: D8E454
  // [NativeClassAttribute] Offset: D8E454
  // [RequiredByNativeCodeAttribute] Offset: D8E454
  struct Rect/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Rect>*/ {
    public:
    // [NativeNameAttribute] Offset: 0xD92F64
    // private System.Single m_XMin
    // Size: 0x4
    // Offset: 0x0
    float m_XMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xD92F9C
    // private System.Single m_YMin
    // Size: 0x4
    // Offset: 0x4
    float m_YMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xD92FD4
    // private System.Single m_Width
    // Size: 0x4
    // Offset: 0x8
    float m_Width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xD9300C
    // private System.Single m_Height
    // Size: 0x4
    // Offset: 0xC
    float m_Height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: Rect
    constexpr Rect(float m_XMin_ = {}, float m_YMin_ = {}, float m_Width_ = {}, float m_Height_ = {}) noexcept : m_XMin{m_XMin_}, m_YMin{m_YMin_}, m_Width{m_Width_}, m_Height{m_Height_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Rect>
    operator System::IEquatable_1<UnityEngine::Rect>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Rect>*>(this);
    }
    // public System.Void .ctor(System.Single x, System.Single y, System.Single width, System.Single height)
    // Offset: 0xF06010
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  Rect(float x, float y, float width, float height)
    // public System.Void .ctor(UnityEngine.Vector2 position, UnityEngine.Vector2 size)
    // Offset: 0xF0601C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Rect(UnityEngine::Vector2 position, UnityEngine::Vector2 size) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rect::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(size)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, position, size);
    }
    // public System.Void .ctor(UnityEngine.Rect source)
    // Offset: 0xF06028
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: is copy constructor.  Rect(UnityEngine::Rect source)
    // static public UnityEngine.Rect get_zero()
    // Offset: 0x1B27590
    static UnityEngine::Rect get_zero();
    // static public UnityEngine.Rect MinMaxRect(System.Single xmin, System.Single ymin, System.Single xmax, System.Single ymax)
    // Offset: 0x1B275A4
    static UnityEngine::Rect MinMaxRect(float xmin, float ymin, float xmax, float ymax);
    // public System.Single get_x()
    // Offset: 0xF06034
    float get_x();
    // public System.Void set_x(System.Single value)
    // Offset: 0xF0603C
    void set_x(float value);
    // public System.Single get_y()
    // Offset: 0xF06044
    float get_y();
    // public System.Void set_y(System.Single value)
    // Offset: 0xF0604C
    void set_y(float value);
    // public UnityEngine.Vector2 get_position()
    // Offset: 0xF06054
    UnityEngine::Vector2 get_position();
    // public System.Void set_position(UnityEngine.Vector2 value)
    // Offset: 0xF06084
    void set_position(UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_center()
    // Offset: 0xF0608C
    UnityEngine::Vector2 get_center();
    // public System.Void set_center(UnityEngine.Vector2 value)
    // Offset: 0xF06094
    void set_center(UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_min()
    // Offset: 0xF060B0
    UnityEngine::Vector2 get_min();
    // public UnityEngine.Vector2 get_max()
    // Offset: 0xF060E0
    UnityEngine::Vector2 get_max();
    // public System.Single get_width()
    // Offset: 0xF0611C
    float get_width();
    // public System.Void set_width(System.Single value)
    // Offset: 0xF06124
    void set_width(float value);
    // public System.Single get_height()
    // Offset: 0xF0612C
    float get_height();
    // public System.Void set_height(System.Single value)
    // Offset: 0xF06134
    void set_height(float value);
    // public UnityEngine.Vector2 get_size()
    // Offset: 0xF0613C
    UnityEngine::Vector2 get_size();
    // public System.Void set_size(UnityEngine.Vector2 value)
    // Offset: 0xF0616C
    void set_size(UnityEngine::Vector2 value);
    // public System.Single get_xMin()
    // Offset: 0xF06174
    float get_xMin();
    // public System.Void set_xMin(System.Single value)
    // Offset: 0xF0617C
    void set_xMin(float value);
    // public System.Single get_yMin()
    // Offset: 0xF06198
    float get_yMin();
    // public System.Void set_yMin(System.Single value)
    // Offset: 0xF061A0
    void set_yMin(float value);
    // public System.Single get_xMax()
    // Offset: 0xF061BC
    float get_xMax();
    // public System.Void set_xMax(System.Single value)
    // Offset: 0xF061CC
    void set_xMax(float value);
    // public System.Single get_yMax()
    // Offset: 0xF061DC
    float get_yMax();
    // public System.Void set_yMax(System.Single value)
    // Offset: 0xF061EC
    void set_yMax(float value);
    // public System.Boolean Contains(UnityEngine.Vector2 point)
    // Offset: 0xF061FC
    bool Contains(UnityEngine::Vector2 point);
    // public System.Boolean Contains(UnityEngine.Vector3 point)
    // Offset: 0xF06240
    bool Contains(UnityEngine::Vector3 point);
    // static private UnityEngine.Rect OrderMinMax(UnityEngine.Rect rect)
    // Offset: 0x1B27840
    static UnityEngine::Rect OrderMinMax(UnityEngine::Rect rect);
    // public System.Boolean Overlaps(UnityEngine.Rect other)
    // Offset: 0xF06284
    bool Overlaps(UnityEngine::Rect other);
    // public System.Boolean Overlaps(UnityEngine.Rect other, System.Boolean allowInverse)
    // Offset: 0xF0628C
    bool Overlaps(UnityEngine::Rect other, bool allowInverse);
    // public System.Boolean Equals(UnityEngine.Rect other)
    // Offset: 0xF062A8
    bool Equals(UnityEngine::Rect other);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF06298
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xF062A0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.String ToString()
    // Offset: 0xF062B0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // UnityEngine.Rect
  #pragma pack(pop)
  static check_size<sizeof(Rect), 12 + sizeof(float)> __UnityEngine_RectSizeCheck;
  static_assert(sizeof(Rect) == 0x10);
  // static public System.Boolean op_Inequality(UnityEngine.Rect lhs, UnityEngine.Rect rhs)
  // Offset: 0x1B2794C
  bool operator !=(const UnityEngine::Rect& lhs, const UnityEngine::Rect& rhs);
  // static public System.Boolean op_Equality(UnityEngine.Rect lhs, UnityEngine.Rect rhs)
  // Offset: 0x1B27980
  bool operator ==(const UnityEngine::Rect& lhs, const UnityEngine::Rect& rhs);
  // Writing MetadataGetter for method: Rect::Rect
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float, float, float, float)>(&Rect::Rect<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float, float, float, float)>(&Rect::Rect<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Rect
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Rect::Rect<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Rect::Rect<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Rect
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Rect)>(&Rect::Rect<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Rect)>(&Rect::Rect<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_zero
  // Il2CppName: get_zero
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rect (*)()>(&Rect::get_zero)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::MinMaxRect
  // Il2CppName: MinMaxRect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rect (*)(float, float, float, float)>(&Rect::MinMaxRect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "MinMaxRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_x
  // Il2CppName: get_x
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_x)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_x
  // Il2CppName: set_x
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_x)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_y
  // Il2CppName: get_y
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_y)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_y
  // Il2CppName: set_y
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_y)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_position
  // Il2CppName: get_position
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (Rect::*)()>(&Rect::get_position)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_position
  // Il2CppName: set_position
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Vector2)>(&Rect::set_position)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_center
  // Il2CppName: get_center
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (Rect::*)()>(&Rect::get_center)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_center", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_center
  // Il2CppName: set_center
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Vector2)>(&Rect::set_center)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_center", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_min
  // Il2CppName: get_min
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (Rect::*)()>(&Rect::get_min)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::get_max
  // Il2CppName: get_max
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (Rect::*)()>(&Rect::get_max)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::get_width
  // Il2CppName: get_width
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_width)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_width
  // Il2CppName: set_width
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_width)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_height
  // Il2CppName: get_height
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_height)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_height
  // Il2CppName: set_height
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_height)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_size
  // Il2CppName: get_size
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (Rect::*)()>(&Rect::get_size)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_size
  // Il2CppName: set_size
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(UnityEngine::Vector2)>(&Rect::set_size)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_xMin
  // Il2CppName: get_xMin
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_xMin)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_xMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_xMin
  // Il2CppName: set_xMin
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_xMin)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_xMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_yMin
  // Il2CppName: get_yMin
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_yMin)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_yMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_yMin
  // Il2CppName: set_yMin
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_yMin)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_yMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_xMax
  // Il2CppName: get_xMax
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_xMax)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_xMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_xMax
  // Il2CppName: set_xMax
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_xMax)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_xMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::get_yMax
  // Il2CppName: get_yMax
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rect::*)()>(&Rect::get_yMax)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "get_yMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::set_yMax
  // Il2CppName: set_yMax
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rect::*)(float)>(&Rect::set_yMax)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "set_yMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Contains
  // Il2CppName: Contains
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rect::*)(UnityEngine::Vector2)>(&Rect::Contains)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Contains
  // Il2CppName: Contains
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rect::*)(UnityEngine::Vector3)>(&Rect::Contains)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: Rect::OrderMinMax
  // Il2CppName: OrderMinMax
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rect (*)(UnityEngine::Rect)>(&Rect::OrderMinMax)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "OrderMinMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Overlaps
  // Il2CppName: Overlaps
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rect::*)(UnityEngine::Rect)>(&Rect::Overlaps)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "Overlaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Overlaps
  // Il2CppName: Overlaps
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rect::*)(UnityEngine::Rect, bool)>(&Rect::Overlaps)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "Overlaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Rect::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rect::*)(UnityEngine::Rect)>(&Rect::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
    }
  };
  // Writing MetadataGetter for method: Rect::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Rect::*)()>(&Rect::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rect::*)(::Il2CppObject*)>(&Rect::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Rect::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Rect::*)()>(&Rect::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rect::operator !=
  // Il2CppName: op_Inequality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Rect&, const UnityEngine::Rect&)>(&Rect::operator !=)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Rect&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Rect&>()});
    }
  };
  // Writing MetadataGetter for method: Rect::operator ==
  // Il2CppName: op_Equality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Rect&, const UnityEngine::Rect&)>(&Rect::operator ==)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rect), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Rect&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Rect&>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Rect, "UnityEngine", "Rect");
