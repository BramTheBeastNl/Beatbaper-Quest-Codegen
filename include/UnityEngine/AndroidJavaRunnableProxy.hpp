// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AndroidJavaProxy
#include "UnityEngine/AndroidJavaProxy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AndroidJavaRunnable
  class AndroidJavaRunnable;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AndroidJavaRunnableProxy
  class AndroidJavaRunnableProxy : public UnityEngine::AndroidJavaProxy {
    public:
    // private UnityEngine.AndroidJavaRunnable mRunnable
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AndroidJavaRunnable* mRunnable;
    // Field size check
    static_assert(sizeof(UnityEngine::AndroidJavaRunnable*) == 0x8);
    // Creating value type constructor for type: AndroidJavaRunnableProxy
    AndroidJavaRunnableProxy(UnityEngine::AndroidJavaRunnable* mRunnable_ = {}) noexcept : mRunnable{mRunnable_} {}
    // Creating conversion operator: operator UnityEngine::AndroidJavaRunnable*
    constexpr operator UnityEngine::AndroidJavaRunnable*() const noexcept {
      return mRunnable;
    }
    // public System.Void .ctor(UnityEngine.AndroidJavaRunnable runnable)
    // Offset: 0x2376B34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AndroidJavaRunnableProxy* New_ctor(UnityEngine::AndroidJavaRunnable* runnable) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AndroidJavaRunnableProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AndroidJavaRunnableProxy*, creationType>(runnable)));
    }
    // public System.Void run()
    // Offset: 0x2376BB8
    void run();
  }; // UnityEngine.AndroidJavaRunnableProxy
  #pragma pack(pop)
  static check_size<sizeof(AndroidJavaRunnableProxy), 32 + sizeof(UnityEngine::AndroidJavaRunnable*)> __UnityEngine_AndroidJavaRunnableProxySizeCheck;
  static_assert(sizeof(AndroidJavaRunnableProxy) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AndroidJavaRunnableProxy*, "UnityEngine", "AndroidJavaRunnableProxy");
// Writing MetadataGetter for method: UnityEngine::AndroidJavaRunnableProxy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AndroidJavaRunnableProxy::*)(UnityEngine::AndroidJavaRunnable*)>(&UnityEngine::AndroidJavaRunnableProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AndroidJavaRunnableProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AndroidJavaRunnable*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AndroidJavaRunnableProxy::*)(UnityEngine::AndroidJavaRunnable*)>(&UnityEngine::AndroidJavaRunnableProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AndroidJavaRunnableProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AndroidJavaRunnable*>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::AndroidJavaRunnableProxy::run
// Il2CppName: run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::AndroidJavaRunnableProxy::*)()>(&UnityEngine::AndroidJavaRunnableProxy::run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AndroidJavaRunnableProxy*), "run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
