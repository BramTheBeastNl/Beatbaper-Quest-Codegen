// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <initializer_list>
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Mathf
  // [NativeHeaderAttribute] Offset: D8F87C
  // [NativeHeaderAttribute] Offset: D8F87C
  // [NativeHeaderAttribute] Offset: D8F87C
  // [NativeHeaderAttribute] Offset: D8F87C
  struct Mathf/*, public System::ValueType*/ {
    public:
    // Creating value type constructor for type: Mathf
    constexpr Mathf() noexcept {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static public readonly System.Single Epsilon
    static void _set_Epsilon(float value);
    // static public System.Int32 NextPowerOfTwo(System.Int32 value)
    // Offset: 0x1C1064C
    static int NextPowerOfTwo(int value);
    // static public System.Single GammaToLinearSpace(System.Single value)
    // Offset: 0x1C1068C
    static float GammaToLinearSpace(float value);
    // static public System.Single LinearToGammaSpace(System.Single value)
    // Offset: 0x1C106D0
    static float LinearToGammaSpace(float value);
    // static public System.Single PerlinNoise(System.Single x, System.Single y)
    // Offset: 0x1C10714
    static float PerlinNoise(float x, float y);
    // static public System.Single Sin(System.Single f)
    // Offset: 0x1C10760
    static float Sin(float f);
    // static public System.Single Cos(System.Single f)
    // Offset: 0x1C107D4
    static float Cos(float f);
    // static public System.Single Tan(System.Single f)
    // Offset: 0x1C10848
    static float Tan(float f);
    // static public System.Single Asin(System.Single f)
    // Offset: 0x1C108BC
    static float Asin(float f);
    // static public System.Single Acos(System.Single f)
    // Offset: 0x1C10930
    static float Acos(float f);
    // static public System.Single Atan(System.Single f)
    // Offset: 0x1C109A4
    static float Atan(float f);
    // static public System.Single Atan2(System.Single y, System.Single x)
    // Offset: 0x1C10A18
    static float Atan2(float y, float x);
    // static public System.Single Sqrt(System.Single f)
    // Offset: 0x1C10A94
    static float Sqrt(float f);
    // static public System.Single Abs(System.Single f)
    // Offset: 0x1C10B1C
    static float Abs(float f);
    // static public System.Int32 Abs(System.Int32 value)
    // Offset: 0x1C10B88
    static int Abs(int value);
    // static public System.Single Min(System.Single a, System.Single b)
    // Offset: 0x1C10BF0
    static float Min(float a, float b);
    // static public System.Int32 Min(System.Int32 a, System.Int32 b)
    // Offset: 0x1C10BFC
    static int Min(int a, int b);
    // static public System.Single Max(System.Single a, System.Single b)
    // Offset: 0x1C10C08
    static float Max(float a, float b);
    // static public System.Single Max(params System.Single[] values)
    // Offset: 0x1C10C14
    static float Max(::Array<float>* values);
    // Creating initializer_list -> params proxy for: System.Single Max(params System.Single[] values)
    static float Max(std::initializer_list<float> values);
    // Creating TArgs -> initializer_list proxy for: System.Single Max(params System.Single[] values)
    template<class ...TParams>
    static float Max(TParams&&... values) {
      return Max({values...});
    }
    // static public System.Int32 Max(System.Int32 a, System.Int32 b)
    // Offset: 0x1C10C68
    static int Max(int a, int b);
    // static public System.Single Pow(System.Single f, System.Single p)
    // Offset: 0x1C10C74
    static float Pow(float f, float p);
    // static public System.Single Log(System.Single f, System.Single p)
    // Offset: 0x1C10CF4
    static float Log(float f, float p);
    // static public System.Single Log(System.Single f)
    // Offset: 0x1C10D74
    static float Log(float f);
    // static public System.Single Ceil(System.Single f)
    // Offset: 0x1C10DE8
    static float Ceil(float f);
    // static public System.Single Floor(System.Single f)
    // Offset: 0x1C10E54
    static float Floor(float f);
    // static public System.Single Round(System.Single f)
    // Offset: 0x1C10EC0
    static float Round(float f);
    // static public System.Int32 CeilToInt(System.Single f)
    // Offset: 0x1C10F98
    static int CeilToInt(float f);
    // static public System.Int32 FloorToInt(System.Single f)
    // Offset: 0x1C11004
    static int FloorToInt(float f);
    // static public System.Int32 RoundToInt(System.Single f)
    // Offset: 0x1C11070
    static int RoundToInt(float f);
    // static public System.Single Sign(System.Single f)
    // Offset: 0x1C11148
    static float Sign(float f);
    // static public System.Single Clamp(System.Single value, System.Single min, System.Single max)
    // Offset: 0x1C1115C
    static float Clamp(float value, float min, float max);
    // static public System.Int32 Clamp(System.Int32 value, System.Int32 min, System.Int32 max)
    // Offset: 0x1C11178
    static int Clamp(int value, int min, int max);
    // static public System.Single Clamp01(System.Single value)
    // Offset: 0x1C11194
    static float Clamp01(float value);
    // static public System.Single Lerp(System.Single a, System.Single b, System.Single t)
    // Offset: 0x1C111B0
    static float Lerp(float a, float b, float t);
    // static public System.Single LerpUnclamped(System.Single a, System.Single b, System.Single t)
    // Offset: 0x1C11248
    static float LerpUnclamped(float a, float b, float t);
    // static public System.Single LerpAngle(System.Single a, System.Single b, System.Single t)
    // Offset: 0x1C11258
    static float LerpAngle(float a, float b, float t);
    // static public System.Single MoveTowards(System.Single current, System.Single target, System.Single maxDelta)
    // Offset: 0x1C113C0
    static float MoveTowards(float current, float target, float maxDelta);
    // static public System.Boolean Approximately(System.Single a, System.Single b)
    // Offset: 0x1C1147C
    static bool Approximately(float a, float b);
    // static public System.Single SmoothDamp(System.Single current, System.Single target, ref System.Single currentVelocity, System.Single smoothTime)
    // Offset: 0x1C1152C
    static float SmoothDamp(float current, float target, float& currentVelocity, float smoothTime);
    // static public System.Single SmoothDamp(System.Single current, System.Single target, ref System.Single currentVelocity, System.Single smoothTime, System.Single maxSpeed, System.Single deltaTime)
    // Offset: 0x1C115D0
    static float SmoothDamp(float current, float target, float& currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
    // static public System.Single Repeat(System.Single t, System.Single length)
    // Offset: 0x1C11330
    static float Repeat(float t, float length);
    // static public System.Single InverseLerp(System.Single a, System.Single b, System.Single value)
    // Offset: 0x1C11724
    static float InverseLerp(float a, float b, float value);
    // static public System.Single DeltaAngle(System.Single current, System.Single target)
    // Offset: 0x1C117C8
    static float DeltaAngle(float current, float target);
    // static private System.Void .cctor()
    // Offset: 0x1C11860
    static void _cctor();
  }; // UnityEngine.Mathf
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Mathf, "UnityEngine", "Mathf");
// Writing MetadataGetter for method: UnityEngine::Mathf::NextPowerOfTwo
// Il2CppName: NextPowerOfTwo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::GammaToLinearSpace
// Il2CppName: GammaToLinearSpace
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::LinearToGammaSpace
// Il2CppName: LinearToGammaSpace
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::PerlinNoise
// Il2CppName: PerlinNoise
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Sin
// Il2CppName: Sin
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Cos
// Il2CppName: Cos
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Tan
// Il2CppName: Tan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Asin
// Il2CppName: Asin
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Acos
// Il2CppName: Acos
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Atan
// Il2CppName: Atan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Atan2
// Il2CppName: Atan2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Sqrt
// Il2CppName: Sqrt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Abs
// Il2CppName: Abs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Abs
// Il2CppName: Abs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Min
// Il2CppName: Min
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Min
// Il2CppName: Min
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Max
// Il2CppName: Max
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Max
// Il2CppName: Max
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Max
// Il2CppName: Max
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Pow
// Il2CppName: Pow
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Log
// Il2CppName: Log
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Log
// Il2CppName: Log
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Ceil
// Il2CppName: Ceil
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Floor
// Il2CppName: Floor
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Round
// Il2CppName: Round
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::CeilToInt
// Il2CppName: CeilToInt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::FloorToInt
// Il2CppName: FloorToInt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::RoundToInt
// Il2CppName: RoundToInt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Sign
// Il2CppName: Sign
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Clamp
// Il2CppName: Clamp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Clamp
// Il2CppName: Clamp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Clamp01
// Il2CppName: Clamp01
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Lerp
// Il2CppName: Lerp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::LerpUnclamped
// Il2CppName: LerpUnclamped
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::LerpAngle
// Il2CppName: LerpAngle
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::MoveTowards
// Il2CppName: MoveTowards
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Approximately
// Il2CppName: Approximately
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::SmoothDamp
// Il2CppName: SmoothDamp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::SmoothDamp
// Il2CppName: SmoothDamp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::Repeat
// Il2CppName: Repeat
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::InverseLerp
// Il2CppName: InverseLerp
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::DeltaAngle
// Il2CppName: DeltaAngle
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mathf::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
