// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <initializer_list>
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Mathf
  // [] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: CA90F0
  // [NativeHeaderAttribute] Offset: CA90F0
  // [NativeHeaderAttribute] Offset: CA90F0
  // [NativeHeaderAttribute] Offset: CA90F0
  struct Mathf/*, public System::ValueType*/ {
    public:
    // Creating value type constructor for type: Mathf
    constexpr Mathf() noexcept {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static public readonly System.Single Epsilon
    static void _set_Epsilon(float value);
    // static public System.Int32 NextPowerOfTwo(System.Int32 value)
    // Offset: 0x1A73370
    static int NextPowerOfTwo(int value);
    // static public System.Single GammaToLinearSpace(System.Single value)
    // Offset: 0x1A733B0
    static float GammaToLinearSpace(float value);
    // static public System.Single LinearToGammaSpace(System.Single value)
    // Offset: 0x1A733F4
    static float LinearToGammaSpace(float value);
    // static public System.Single PerlinNoise(System.Single x, System.Single y)
    // Offset: 0x1A73438
    static float PerlinNoise(float x, float y);
    // static public System.Single Sin(System.Single f)
    // Offset: 0x1A73484
    static float Sin(float f);
    // static public System.Single Cos(System.Single f)
    // Offset: 0x1A734F8
    static float Cos(float f);
    // static public System.Single Tan(System.Single f)
    // Offset: 0x1A7356C
    static float Tan(float f);
    // static public System.Single Asin(System.Single f)
    // Offset: 0x1A735E0
    static float Asin(float f);
    // static public System.Single Acos(System.Single f)
    // Offset: 0x1A73654
    static float Acos(float f);
    // static public System.Single Atan(System.Single f)
    // Offset: 0x1A736C8
    static float Atan(float f);
    // static public System.Single Atan2(System.Single y, System.Single x)
    // Offset: 0x1A7373C
    static float Atan2(float y, float x);
    // static public System.Single Sqrt(System.Single f)
    // Offset: 0x1A737B8
    static float Sqrt(float f);
    // static public System.Single Abs(System.Single f)
    // Offset: 0x1A73840
    static float Abs(float f);
    // static public System.Int32 Abs(System.Int32 value)
    // Offset: 0x1A738AC
    static int Abs(int value);
    // static public System.Single Min(System.Single a, System.Single b)
    // Offset: 0x1A73914
    static float Min(float a, float b);
    // static public System.Int32 Min(System.Int32 a, System.Int32 b)
    // Offset: 0x1A73920
    static int Min(int a, int b);
    // static public System.Single Max(System.Single a, System.Single b)
    // Offset: 0x1A7392C
    static float Max(float a, float b);
    // static public System.Single Max(params System.Single[] values)
    // Offset: 0x1A73938
    static float Max(::Array<float>* values);
    // Creating initializer_list -> params proxy for: System.Single Max(params System.Single[] values)
    static float Max(std::initializer_list<float> values);
    // Creating TArgs -> initializer_list proxy for: System.Single Max(params System.Single[] values)
    template<class ...TParams>
    static float Max(TParams&&... values) {
      return Max({values...});
    }
    // static public System.Int32 Max(System.Int32 a, System.Int32 b)
    // Offset: 0x1A7398C
    static int Max(int a, int b);
    // static public System.Single Pow(System.Single f, System.Single p)
    // Offset: 0x1A73998
    static float Pow(float f, float p);
    // static public System.Single Log(System.Single f, System.Single p)
    // Offset: 0x1A73A18
    static float Log(float f, float p);
    // static public System.Single Log(System.Single f)
    // Offset: 0x1A73A98
    static float Log(float f);
    // static public System.Single Ceil(System.Single f)
    // Offset: 0x1A73B0C
    static float Ceil(float f);
    // static public System.Single Floor(System.Single f)
    // Offset: 0x1A73B78
    static float Floor(float f);
    // static public System.Single Round(System.Single f)
    // Offset: 0x1A73BE4
    static float Round(float f);
    // static public System.Int32 CeilToInt(System.Single f)
    // Offset: 0x1A73CBC
    static int CeilToInt(float f);
    // static public System.Int32 FloorToInt(System.Single f)
    // Offset: 0x1A73D28
    static int FloorToInt(float f);
    // static public System.Int32 RoundToInt(System.Single f)
    // Offset: 0x1A73D94
    static int RoundToInt(float f);
    // static public System.Single Sign(System.Single f)
    // Offset: 0x1A73E6C
    static float Sign(float f);
    // static public System.Single Clamp(System.Single value, System.Single min, System.Single max)
    // Offset: 0x1A73E80
    static float Clamp(float value, float min, float max);
    // static public System.Int32 Clamp(System.Int32 value, System.Int32 min, System.Int32 max)
    // Offset: 0x1A73E9C
    static int Clamp(int value, int min, int max);
    // static public System.Single Clamp01(System.Single value)
    // Offset: 0x1A73EB8
    static float Clamp01(float value);
    // static public System.Single Lerp(System.Single a, System.Single b, System.Single t)
    // Offset: 0x1A73ED4
    static float Lerp(float a, float b, float t);
    // static public System.Single LerpUnclamped(System.Single a, System.Single b, System.Single t)
    // Offset: 0x1A73F6C
    static float LerpUnclamped(float a, float b, float t);
    // static public System.Single MoveTowards(System.Single current, System.Single target, System.Single maxDelta)
    // Offset: 0x1A73F7C
    static float MoveTowards(float current, float target, float maxDelta);
    // static public System.Boolean Approximately(System.Single a, System.Single b)
    // Offset: 0x1A74038
    static bool Approximately(float a, float b);
    // static public System.Single SmoothDamp(System.Single current, System.Single target, ref System.Single currentVelocity, System.Single smoothTime)
    // Offset: 0x1A740E8
    static float SmoothDamp(float current, float target, float& currentVelocity, float smoothTime);
    // static public System.Single SmoothDamp(System.Single current, System.Single target, ref System.Single currentVelocity, System.Single smoothTime, System.Single maxSpeed, System.Single deltaTime)
    // Offset: 0x1A7418C
    static float SmoothDamp(float current, float target, float& currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
    // static public System.Single Repeat(System.Single t, System.Single length)
    // Offset: 0x1A742E0
    static float Repeat(float t, float length);
    // static public System.Single InverseLerp(System.Single a, System.Single b, System.Single value)
    // Offset: 0x1A74370
    static float InverseLerp(float a, float b, float value);
    // static public System.Single DeltaAngle(System.Single current, System.Single target)
    // Offset: 0x1A74414
    static float DeltaAngle(float current, float target);
    // static private System.Void .cctor()
    // Offset: 0x1A744AC
    static void _cctor();
  }; // UnityEngine.Mathf
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Mathf, "UnityEngine", "Mathf");
