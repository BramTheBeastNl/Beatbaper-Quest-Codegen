// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderMode
  struct RenderMode;
  // Forward declaring type: AdditionalCanvasShaderChannels
  struct AdditionalCanvasShaderChannels;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Canvas
  // [RequireComponent] Offset: DB4E04
  // [NativeClassAttribute] Offset: DB4E04
  // [NativeHeaderAttribute] Offset: DB4E04
  // [NativeHeaderAttribute] Offset: DB4E04
  class Canvas : public UnityEngine::Behaviour {
    public:
    // Nested type: UnityEngine::Canvas::WillRenderCanvases
    class WillRenderCanvases;
    // Creating value type constructor for type: Canvas
    Canvas() noexcept {}
    // [CompilerGeneratedAttribute] Offset: 0xDB4F74
    // [DebuggerBrowsableAttribute] Offset: 0xDB4F74
    // Get static field: static private UnityEngine.Canvas/WillRenderCanvases willRenderCanvases
    static UnityEngine::Canvas::WillRenderCanvases* _get_willRenderCanvases();
    // Set static field: static private UnityEngine.Canvas/WillRenderCanvases willRenderCanvases
    static void _set_willRenderCanvases(UnityEngine::Canvas::WillRenderCanvases* value);
    // static public System.Void add_willRenderCanvases(UnityEngine.Canvas/WillRenderCanvases value)
    // Offset: 0x23E2C64
    static void add_willRenderCanvases(UnityEngine::Canvas::WillRenderCanvases* value);
    // static public System.Void remove_willRenderCanvases(UnityEngine.Canvas/WillRenderCanvases value)
    // Offset: 0x23E2D18
    static void remove_willRenderCanvases(UnityEngine::Canvas::WillRenderCanvases* value);
    // public UnityEngine.RenderMode get_renderMode()
    // Offset: 0x23E2DCC
    UnityEngine::RenderMode get_renderMode();
    // public System.Void set_renderMode(UnityEngine.RenderMode value)
    // Offset: 0x23E2E0C
    void set_renderMode(UnityEngine::RenderMode value);
    // public System.Boolean get_isRootCanvas()
    // Offset: 0x23E2E5C
    bool get_isRootCanvas();
    // public System.Single get_scaleFactor()
    // Offset: 0x23E2E9C
    float get_scaleFactor();
    // public System.Void set_scaleFactor(System.Single value)
    // Offset: 0x23E2EDC
    void set_scaleFactor(float value);
    // public System.Single get_referencePixelsPerUnit()
    // Offset: 0x23E2F2C
    float get_referencePixelsPerUnit();
    // public System.Void set_referencePixelsPerUnit(System.Single value)
    // Offset: 0x23E2F6C
    void set_referencePixelsPerUnit(float value);
    // public System.Boolean get_pixelPerfect()
    // Offset: 0x23E2FBC
    bool get_pixelPerfect();
    // public System.Void set_pixelPerfect(System.Boolean value)
    // Offset: 0x23E2FFC
    void set_pixelPerfect(bool value);
    // public System.Int32 get_renderOrder()
    // Offset: 0x23E304C
    int get_renderOrder();
    // public System.Boolean get_overrideSorting()
    // Offset: 0x23E308C
    bool get_overrideSorting();
    // public System.Void set_overrideSorting(System.Boolean value)
    // Offset: 0x23E30CC
    void set_overrideSorting(bool value);
    // public System.Int32 get_sortingOrder()
    // Offset: 0x23E311C
    int get_sortingOrder();
    // public System.Void set_sortingOrder(System.Int32 value)
    // Offset: 0x23E315C
    void set_sortingOrder(int value);
    // public System.Int32 get_targetDisplay()
    // Offset: 0x23E31AC
    int get_targetDisplay();
    // public System.Int32 get_sortingLayerID()
    // Offset: 0x23E31EC
    int get_sortingLayerID();
    // public System.Void set_sortingLayerID(System.Int32 value)
    // Offset: 0x23E322C
    void set_sortingLayerID(int value);
    // public UnityEngine.AdditionalCanvasShaderChannels get_additionalShaderChannels()
    // Offset: 0x23E327C
    UnityEngine::AdditionalCanvasShaderChannels get_additionalShaderChannels();
    // public System.Void set_additionalShaderChannels(UnityEngine.AdditionalCanvasShaderChannels value)
    // Offset: 0x23E32BC
    void set_additionalShaderChannels(UnityEngine::AdditionalCanvasShaderChannels value);
    // public UnityEngine.Canvas get_rootCanvas()
    // Offset: 0x23E330C
    UnityEngine::Canvas* get_rootCanvas();
    // public UnityEngine.Camera get_worldCamera()
    // Offset: 0x23E334C
    UnityEngine::Camera* get_worldCamera();
    // public System.Void set_worldCamera(UnityEngine.Camera value)
    // Offset: 0x23E338C
    void set_worldCamera(UnityEngine::Camera* value);
    // static public UnityEngine.Material GetDefaultCanvasMaterial()
    // Offset: 0x23E33DC
    static UnityEngine::Material* GetDefaultCanvasMaterial();
    // static public UnityEngine.Material GetETC1SupportedCanvasMaterial()
    // Offset: 0x23E3410
    static UnityEngine::Material* GetETC1SupportedCanvasMaterial();
    // static public System.Void ForceUpdateCanvases()
    // Offset: 0x23E3444
    static void ForceUpdateCanvases();
    // static private System.Void SendWillRenderCanvases()
    // Offset: 0x23E3448
    static void SendWillRenderCanvases();
    // public System.Void .ctor()
    // Offset: 0x23E36B4
    // Implemented from: UnityEngine.Behaviour
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Canvas* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Canvas::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Canvas*, creationType>()));
    }
  }; // UnityEngine.Canvas
  #pragma pack(pop)
  // Writing MetadataGetter for method: Canvas::add_willRenderCanvases
  // Il2CppName: add_willRenderCanvases
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Canvas::WillRenderCanvases*)>(&Canvas::add_willRenderCanvases)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "add_willRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas::WillRenderCanvases*>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::remove_willRenderCanvases
  // Il2CppName: remove_willRenderCanvases
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Canvas::WillRenderCanvases*)>(&Canvas::remove_willRenderCanvases)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "remove_willRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Canvas::WillRenderCanvases*>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_renderMode
  // Il2CppName: get_renderMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderMode (Canvas::*)()>(&Canvas::get_renderMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_renderMode
  // Il2CppName: set_renderMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(UnityEngine::RenderMode)>(&Canvas::set_renderMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderMode>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_isRootCanvas
  // Il2CppName: get_isRootCanvas
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Canvas::*)()>(&Canvas::get_isRootCanvas)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_isRootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_scaleFactor
  // Il2CppName: get_scaleFactor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Canvas::*)()>(&Canvas::get_scaleFactor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_scaleFactor
  // Il2CppName: set_scaleFactor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(float)>(&Canvas::set_scaleFactor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_scaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_referencePixelsPerUnit
  // Il2CppName: get_referencePixelsPerUnit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Canvas::*)()>(&Canvas::get_referencePixelsPerUnit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_referencePixelsPerUnit
  // Il2CppName: set_referencePixelsPerUnit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(float)>(&Canvas::set_referencePixelsPerUnit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_referencePixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_pixelPerfect
  // Il2CppName: get_pixelPerfect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Canvas::*)()>(&Canvas::get_pixelPerfect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_pixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_pixelPerfect
  // Il2CppName: set_pixelPerfect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(bool)>(&Canvas::set_pixelPerfect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_pixelPerfect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_renderOrder
  // Il2CppName: get_renderOrder
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_renderOrder)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_renderOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_overrideSorting
  // Il2CppName: get_overrideSorting
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Canvas::*)()>(&Canvas::get_overrideSorting)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_overrideSorting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_overrideSorting
  // Il2CppName: set_overrideSorting
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(bool)>(&Canvas::set_overrideSorting)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_overrideSorting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_sortingOrder
  // Il2CppName: get_sortingOrder
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_sortingOrder)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_sortingOrder
  // Il2CppName: set_sortingOrder
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(int)>(&Canvas::set_sortingOrder)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_sortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_targetDisplay
  // Il2CppName: get_targetDisplay
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_targetDisplay)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_sortingLayerID
  // Il2CppName: get_sortingLayerID
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Canvas::*)()>(&Canvas::get_sortingLayerID)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_sortingLayerID
  // Il2CppName: set_sortingLayerID
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(int)>(&Canvas::set_sortingLayerID)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_sortingLayerID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_additionalShaderChannels
  // Il2CppName: get_additionalShaderChannels
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AdditionalCanvasShaderChannels (Canvas::*)()>(&Canvas::get_additionalShaderChannels)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_additionalShaderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_additionalShaderChannels
  // Il2CppName: set_additionalShaderChannels
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(UnityEngine::AdditionalCanvasShaderChannels)>(&Canvas::set_additionalShaderChannels)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_additionalShaderChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AdditionalCanvasShaderChannels>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_rootCanvas
  // Il2CppName: get_rootCanvas
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Canvas* (Canvas::*)()>(&Canvas::get_rootCanvas)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_rootCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::get_worldCamera
  // Il2CppName: get_worldCamera
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (Canvas::*)()>(&Canvas::get_worldCamera)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "get_worldCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::set_worldCamera
  // Il2CppName: set_worldCamera
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)(UnityEngine::Camera*)>(&Canvas::set_worldCamera)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "set_worldCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
    }
  };
  // Writing MetadataGetter for method: Canvas::GetDefaultCanvasMaterial
  // Il2CppName: GetDefaultCanvasMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)()>(&Canvas::GetDefaultCanvasMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "GetDefaultCanvasMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::GetETC1SupportedCanvasMaterial
  // Il2CppName: GetETC1SupportedCanvasMaterial
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)()>(&Canvas::GetETC1SupportedCanvasMaterial)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "GetETC1SupportedCanvasMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::ForceUpdateCanvases
  // Il2CppName: ForceUpdateCanvases
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Canvas::ForceUpdateCanvases)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "ForceUpdateCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::SendWillRenderCanvases
  // Il2CppName: SendWillRenderCanvases
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Canvas::SendWillRenderCanvases)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), "SendWillRenderCanvases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Canvas::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)()>(&Canvas::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Canvas::*)()>(&Canvas::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Canvas*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Canvas*, "UnityEngine", "Canvas");
