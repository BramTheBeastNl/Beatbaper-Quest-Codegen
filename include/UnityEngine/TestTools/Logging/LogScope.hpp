// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TestTools::Logging
namespace UnityEngine::TestTools::Logging {
  // Forward declaring type: LogMatch
  class LogMatch;
  // Forward declaring type: LogEvent
  class LogEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LogType
  struct LogType;
}
// Completed forward declares
// Type namespace: UnityEngine.TestTools.Logging
namespace UnityEngine::TestTools::Logging {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TestTools.Logging.LogScope
  class LogScope : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: UnityEngine::TestTools::Logging::LogScope::$$c
    class $$c;
    // private readonly System.Object m_Lock
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* m_Lock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean m_Disposed
    // Size: 0x1
    // Offset: 0x18
    bool m_Disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_NeedToProcessLogs
    // Size: 0x1
    // Offset: 0x19
    bool m_NeedToProcessLogs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_NeedToProcessLogs and: ExpectedLogs
    char __padding2[0x6] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE3DEC0
    // private System.Collections.Generic.Queue`1<UnityEngine.TestTools.Logging.LogMatch> <ExpectedLogs>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>* ExpectedLogs;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE3DED0
    // private readonly System.Collections.Generic.List`1<UnityEngine.TestTools.Logging.LogEvent> <AllLogs>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* AllLogs;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE3DEE0
    // private readonly System.Collections.Generic.List`1<UnityEngine.TestTools.Logging.LogEvent> <FailingLogs>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* FailingLogs;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE3DEF0
    // private System.Boolean <IgnoreFailingMessages>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool IgnoreFailingMessages;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE3DF00
    // private System.Boolean <IsNUnitException>k__BackingField
    // Size: 0x1
    // Offset: 0x39
    bool IsNUnitException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE3DF10
    // private System.Boolean <IsNUnitSuccessException>k__BackingField
    // Size: 0x1
    // Offset: 0x3A
    bool IsNUnitSuccessException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE3DF20
    // private System.Boolean <IsNUnitInconclusiveException>k__BackingField
    // Size: 0x1
    // Offset: 0x3B
    bool IsNUnitInconclusiveException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xE3DF30
    // private System.Boolean <IsNUnitIgnoreException>k__BackingField
    // Size: 0x1
    // Offset: 0x3C
    bool IsNUnitIgnoreException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsNUnitIgnoreException and: NUnitExceptionMessage
    char __padding10[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xE3DF40
    // private System.String <NUnitExceptionMessage>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* NUnitExceptionMessage;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: LogScope
    LogScope(::Il2CppObject* m_Lock_ = {}, bool m_Disposed_ = {}, bool m_NeedToProcessLogs_ = {}, System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>* ExpectedLogs_ = {}, System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* AllLogs_ = {}, System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* FailingLogs_ = {}, bool IgnoreFailingMessages_ = {}, bool IsNUnitException_ = {}, bool IsNUnitSuccessException_ = {}, bool IsNUnitInconclusiveException_ = {}, bool IsNUnitIgnoreException_ = {}, ::Il2CppString* NUnitExceptionMessage_ = {}) noexcept : m_Lock{m_Lock_}, m_Disposed{m_Disposed_}, m_NeedToProcessLogs{m_NeedToProcessLogs_}, ExpectedLogs{ExpectedLogs_}, AllLogs{AllLogs_}, FailingLogs{FailingLogs_}, IgnoreFailingMessages{IgnoreFailingMessages_}, IsNUnitException{IsNUnitException_}, IsNUnitSuccessException{IsNUnitSuccessException_}, IsNUnitInconclusiveException{IsNUnitInconclusiveException_}, IsNUnitIgnoreException{IsNUnitIgnoreException_}, NUnitExceptionMessage{NUnitExceptionMessage_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.TestTools.Logging.LogScope> s_ActiveScopes
    static System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogScope*>* _get_s_ActiveScopes();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.TestTools.Logging.LogScope> s_ActiveScopes
    static void _set_s_ActiveScopes(System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogScope*>* value);
    // public System.Collections.Generic.Queue`1<UnityEngine.TestTools.Logging.LogMatch> get_ExpectedLogs()
    // Offset: 0x14B8098
    System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>* get_ExpectedLogs();
    // public System.Void set_ExpectedLogs(System.Collections.Generic.Queue`1<UnityEngine.TestTools.Logging.LogMatch> value)
    // Offset: 0x14B80A0
    void set_ExpectedLogs(System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>* value);
    // public System.Collections.Generic.List`1<UnityEngine.TestTools.Logging.LogEvent> get_AllLogs()
    // Offset: 0x14B80A8
    System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* get_AllLogs();
    // public System.Collections.Generic.List`1<UnityEngine.TestTools.Logging.LogEvent> get_FailingLogs()
    // Offset: 0x14B80B0
    System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* get_FailingLogs();
    // public System.Boolean get_IgnoreFailingMessages()
    // Offset: 0x14B80B8
    bool get_IgnoreFailingMessages();
    // public System.Void set_IgnoreFailingMessages(System.Boolean value)
    // Offset: 0x14B80C0
    void set_IgnoreFailingMessages(bool value);
    // private System.Void set_IsNUnitException(System.Boolean value)
    // Offset: 0x14B80CC
    void set_IsNUnitException(bool value);
    // private System.Void set_IsNUnitSuccessException(System.Boolean value)
    // Offset: 0x14B80D8
    void set_IsNUnitSuccessException(bool value);
    // private System.Void set_IsNUnitInconclusiveException(System.Boolean value)
    // Offset: 0x14B80E4
    void set_IsNUnitInconclusiveException(bool value);
    // private System.Void set_IsNUnitIgnoreException(System.Boolean value)
    // Offset: 0x14B80F0
    void set_IsNUnitIgnoreException(bool value);
    // private System.Void set_NUnitExceptionMessage(System.String value)
    // Offset: 0x14B80FC
    void set_NUnitExceptionMessage(::Il2CppString* value);
    // private System.Void Activate()
    // Offset: 0x14B8104
    void Activate();
    // private System.Void Deactivate()
    // Offset: 0x14B8278
    void Deactivate();
    // static private System.Void RegisterScope(UnityEngine.TestTools.Logging.LogScope logScope)
    // Offset: 0x14B8200
    static void RegisterScope(UnityEngine::TestTools::Logging::LogScope* logScope);
    // static private System.Void UnregisterScope(UnityEngine.TestTools.Logging.LogScope logScope)
    // Offset: 0x14B833C
    static void UnregisterScope(UnityEngine::TestTools::Logging::LogScope* logScope);
    // public System.Void AddLog(System.String message, System.String stacktrace, UnityEngine.LogType type)
    // Offset: 0x14B83B4
    void AddLog(::Il2CppString* message, ::Il2CppString* stacktrace, UnityEngine::LogType type);
    // static private System.Boolean IsNUnitResultStateException(System.String stacktrace, UnityEngine.LogType logType)
    // Offset: 0x14B86E0
    static bool IsNUnitResultStateException(::Il2CppString* stacktrace, UnityEngine::LogType logType);
    // static private System.Boolean IsFailingLog(UnityEngine.LogType type)
    // Offset: 0x14B877C
    static bool IsFailingLog(UnityEngine::LogType type);
    // public System.Void Dispose()
    // Offset: 0x14A72C0
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x14B8798
    void Dispose(bool disposing);
    // public System.Boolean AnyFailingLogs()
    // Offset: 0x14A7268
    bool AnyFailingLogs();
    // public System.Void ProcessExpectedLogs()
    // Offset: 0x14B87B4
    void ProcessExpectedLogs();
    // public System.Void NoUnexpectedReceived()
    // Offset: 0x14B8B24
    void NoUnexpectedReceived();
    // static private System.Void .cctor()
    // Offset: 0x14B8CD0
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x14A7184
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LogScope* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TestTools::Logging::LogScope::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LogScope*, creationType>()));
    }
  }; // UnityEngine.TestTools.Logging.LogScope
  #pragma pack(pop)
  static check_size<sizeof(LogScope), 64 + sizeof(::Il2CppString*)> __UnityEngine_TestTools_Logging_LogScopeSizeCheck;
  static_assert(sizeof(LogScope) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::TestTools::Logging::LogScope*, "UnityEngine.TestTools.Logging", "LogScope");
// Writing MetadataGetter for method: LogScope::get_ExpectedLogs
// Il2CppName: get_ExpectedLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>* (LogScope::*)()>(&LogScope::get_ExpectedLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "get_ExpectedLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::set_ExpectedLogs
// Il2CppName: set_ExpectedLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>*)>(&LogScope::set_ExpectedLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_ExpectedLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Queue_1<UnityEngine::TestTools::Logging::LogMatch*>*>()});
  }
};
// Writing MetadataGetter for method: LogScope::get_AllLogs
// Il2CppName: get_AllLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* (LogScope::*)()>(&LogScope::get_AllLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "get_AllLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::get_FailingLogs
// Il2CppName: get_FailingLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TestTools::Logging::LogEvent*>* (LogScope::*)()>(&LogScope::get_FailingLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "get_FailingLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::get_IgnoreFailingMessages
// Il2CppName: get_IgnoreFailingMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LogScope::*)()>(&LogScope::get_IgnoreFailingMessages)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "get_IgnoreFailingMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::set_IgnoreFailingMessages
// Il2CppName: set_IgnoreFailingMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(bool)>(&LogScope::set_IgnoreFailingMessages)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_IgnoreFailingMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LogScope::set_IsNUnitException
// Il2CppName: set_IsNUnitException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(bool)>(&LogScope::set_IsNUnitException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_IsNUnitException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LogScope::set_IsNUnitSuccessException
// Il2CppName: set_IsNUnitSuccessException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(bool)>(&LogScope::set_IsNUnitSuccessException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_IsNUnitSuccessException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LogScope::set_IsNUnitInconclusiveException
// Il2CppName: set_IsNUnitInconclusiveException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(bool)>(&LogScope::set_IsNUnitInconclusiveException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_IsNUnitInconclusiveException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LogScope::set_IsNUnitIgnoreException
// Il2CppName: set_IsNUnitIgnoreException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(bool)>(&LogScope::set_IsNUnitIgnoreException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_IsNUnitIgnoreException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LogScope::set_NUnitExceptionMessage
// Il2CppName: set_NUnitExceptionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(::Il2CppString*)>(&LogScope::set_NUnitExceptionMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "set_NUnitExceptionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LogScope::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::RegisterScope
// Il2CppName: RegisterScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::TestTools::Logging::LogScope*)>(&LogScope::RegisterScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "RegisterScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TestTools::Logging::LogScope*>()});
  }
};
// Writing MetadataGetter for method: LogScope::UnregisterScope
// Il2CppName: UnregisterScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::TestTools::Logging::LogScope*)>(&LogScope::UnregisterScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "UnregisterScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TestTools::Logging::LogScope*>()});
  }
};
// Writing MetadataGetter for method: LogScope::AddLog
// Il2CppName: AddLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(::Il2CppString*, ::Il2CppString*, UnityEngine::LogType)>(&LogScope::AddLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "AddLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>()});
  }
};
// Writing MetadataGetter for method: LogScope::IsNUnitResultStateException
// Il2CppName: IsNUnitResultStateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, UnityEngine::LogType)>(&LogScope::IsNUnitResultStateException)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "IsNUnitResultStateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>()});
  }
};
// Writing MetadataGetter for method: LogScope::IsFailingLog
// Il2CppName: IsFailingLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::LogType)>(&LogScope::IsFailingLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "IsFailingLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>()});
  }
};
// Writing MetadataGetter for method: LogScope::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)(bool)>(&LogScope::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LogScope::AnyFailingLogs
// Il2CppName: AnyFailingLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LogScope::*)()>(&LogScope::AnyFailingLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "AnyFailingLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::ProcessExpectedLogs
// Il2CppName: ProcessExpectedLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::ProcessExpectedLogs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "ProcessExpectedLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::NoUnexpectedReceived
// Il2CppName: NoUnexpectedReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::NoUnexpectedReceived)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), "NoUnexpectedReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LogScope::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogScope::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogScope::*)()>(&LogScope::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogScope*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
