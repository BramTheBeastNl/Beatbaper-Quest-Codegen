// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Ray
  struct Ray/*, public System::ValueType*/ {
    public:
    // private UnityEngine.Vector3 m_Origin
    // Size: 0xC
    // Offset: 0x0
    UnityEngine::Vector3 m_Origin;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_Direction
    // Size: 0xC
    // Offset: 0xC
    UnityEngine::Vector3 m_Direction;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: Ray
    constexpr Ray(UnityEngine::Vector3 m_Origin_ = {}, UnityEngine::Vector3 m_Direction_ = {}) noexcept : m_Origin{m_Origin_}, m_Direction{m_Direction_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(UnityEngine.Vector3 origin, UnityEngine.Vector3 direction)
    // Offset: 0xF05F40
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  Ray(UnityEngine::Vector3 origin, UnityEngine::Vector3 direction)
    // public UnityEngine.Vector3 get_origin()
    // Offset: 0xF05F48
    UnityEngine::Vector3 get_origin();
    // public System.Void set_origin(UnityEngine.Vector3 value)
    // Offset: 0xF05F54
    void set_origin(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_direction()
    // Offset: 0xF05F60
    UnityEngine::Vector3 get_direction();
    // public System.Void set_direction(UnityEngine.Vector3 value)
    // Offset: 0xF05F6C
    void set_direction(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 GetPoint(System.Single distance)
    // Offset: 0xF05FAC
    UnityEngine::Vector3 GetPoint(float distance);
    // public override System.String ToString()
    // Offset: 0xF05FB4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // UnityEngine.Ray
  #pragma pack(pop)
  static check_size<sizeof(Ray), 12 + sizeof(UnityEngine::Vector3)> __UnityEngine_RaySizeCheck;
  static_assert(sizeof(Ray) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Ray, "UnityEngine", "Ray");
// Writing MetadataGetter for method: Ray::Ray
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ray::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Ray::Ray<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ray::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Ray::Ray<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Ray::get_origin
// Il2CppName: get_origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Ray::*)()>(&Ray::get_origin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), "get_origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ray::set_origin
// Il2CppName: set_origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ray::*)(UnityEngine::Vector3)>(&Ray::set_origin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), "set_origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Ray::get_direction
// Il2CppName: get_direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Ray::*)()>(&Ray::get_direction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), "get_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Ray::set_direction
// Il2CppName: set_direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Ray::*)(UnityEngine::Vector3)>(&Ray::set_direction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), "set_direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Ray::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Ray::*)(float)>(&Ray::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Ray::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Ray::*)()>(&Ray::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Ray), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
