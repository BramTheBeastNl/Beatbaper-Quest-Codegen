// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Gizmos
  // [] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: CA7E88
  // [NativeHeaderAttribute] Offset: CA7E88
  class Gizmos : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Gizmos
    Gizmos() noexcept {}
    // static public System.Void DrawLine(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
    // Offset: 0x19CF120
    static void DrawLine(UnityEngine::Vector3 from, UnityEngine::Vector3 to);
    // static public System.Void DrawWireSphere(UnityEngine.Vector3 center, System.Single radius)
    // Offset: 0x19CF1CC
    static void DrawWireSphere(UnityEngine::Vector3 center, float radius);
    // static public System.Void DrawSphere(UnityEngine.Vector3 center, System.Single radius)
    // Offset: 0x19CF27C
    static void DrawSphere(UnityEngine::Vector3 center, float radius);
    // static public System.Void DrawWireCube(UnityEngine.Vector3 center, UnityEngine.Vector3 size)
    // Offset: 0x19CF32C
    static void DrawWireCube(UnityEngine::Vector3 center, UnityEngine::Vector3 size);
    // static public System.Void DrawCube(UnityEngine.Vector3 center, UnityEngine.Vector3 size)
    // Offset: 0x19CF3D8
    static void DrawCube(UnityEngine::Vector3 center, UnityEngine::Vector3 size);
    // static public System.Void set_color(UnityEngine.Color value)
    // Offset: 0x19CF484
    static void set_color(UnityEngine::Color value);
    // static public System.Void set_matrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x19CF514
    static void set_matrix(UnityEngine::Matrix4x4 value);
    // static public System.Void DrawRay(UnityEngine.Vector3 from, UnityEngine.Vector3 direction)
    // Offset: 0x19CF594
    static void DrawRay(UnityEngine::Vector3 from, UnityEngine::Vector3 direction);
    // static private System.Void DrawLine_Injected(ref UnityEngine.Vector3 from, ref UnityEngine.Vector3 to)
    // Offset: 0x19CF17C
    static void DrawLine_Injected(UnityEngine::Vector3& from, UnityEngine::Vector3& to);
    // static private System.Void DrawWireSphere_Injected(ref UnityEngine.Vector3 center, System.Single radius)
    // Offset: 0x19CF22C
    static void DrawWireSphere_Injected(UnityEngine::Vector3& center, float radius);
    // static private System.Void DrawSphere_Injected(ref UnityEngine.Vector3 center, System.Single radius)
    // Offset: 0x19CF2DC
    static void DrawSphere_Injected(UnityEngine::Vector3& center, float radius);
    // static private System.Void DrawWireCube_Injected(ref UnityEngine.Vector3 center, ref UnityEngine.Vector3 size)
    // Offset: 0x19CF388
    static void DrawWireCube_Injected(UnityEngine::Vector3& center, UnityEngine::Vector3& size);
    // static private System.Void DrawCube_Injected(ref UnityEngine.Vector3 center, ref UnityEngine.Vector3 size)
    // Offset: 0x19CF434
    static void DrawCube_Injected(UnityEngine::Vector3& center, UnityEngine::Vector3& size);
    // static private System.Void set_color_Injected(ref UnityEngine.Color value)
    // Offset: 0x19CF4D4
    static void set_color_Injected(UnityEngine::Color& value);
    // static private System.Void set_matrix_Injected(ref UnityEngine.Matrix4x4 value)
    // Offset: 0x19CF554
    static void set_matrix_Injected(UnityEngine::Matrix4x4& value);
  }; // UnityEngine.Gizmos
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Gizmos*, "UnityEngine", "Gizmos");
