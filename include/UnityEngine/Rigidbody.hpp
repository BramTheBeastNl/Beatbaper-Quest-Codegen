// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: CollisionDetectionMode
  struct CollisionDetectionMode;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: ForceMode
  struct ForceMode;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rigidbody
  // [NativeHeaderAttribute] Offset: DA32D8
  // [RequireComponent] Offset: DA32D8
  class Rigidbody : public UnityEngine::Component {
    public:
    // Creating value type constructor for type: Rigidbody
    Rigidbody() noexcept {}
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0x23DA4BC
    void set_velocity(UnityEngine::Vector3 value);
    // public System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x23DA564
    void set_angularVelocity(UnityEngine::Vector3 value);
    // public System.Void set_mass(System.Single value)
    // Offset: 0x23DA60C
    void set_mass(float value);
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0x23DA65C
    void set_useGravity(bool value);
    // public System.Boolean get_isKinematic()
    // Offset: 0x23DA6AC
    bool get_isKinematic();
    // public System.Void set_isKinematic(System.Boolean value)
    // Offset: 0x23DA6EC
    void set_isKinematic(bool value);
    // public System.Void set_collisionDetectionMode(UnityEngine.CollisionDetectionMode value)
    // Offset: 0x23DA73C
    void set_collisionDetectionMode(UnityEngine::CollisionDetectionMode value);
    // public UnityEngine.Vector3 get_worldCenterOfMass()
    // Offset: 0x23DA78C
    UnityEngine::Vector3 get_worldCenterOfMass();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x23DA83C
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x23DA8EC
    void set_position(UnityEngine::Vector3 value);
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x23DA994
    void set_rotation(UnityEngine::Quaternion value);
    // public System.Single get_maxAngularVelocity()
    // Offset: 0x23DAA3C
    float get_maxAngularVelocity();
    // public System.Void MovePosition(UnityEngine.Vector3 position)
    // Offset: 0x23DAA7C
    void MovePosition(UnityEngine::Vector3 position);
    // public System.Void MoveRotation(UnityEngine.Quaternion rot)
    // Offset: 0x23DAB24
    void MoveRotation(UnityEngine::Quaternion rot);
    // public System.Void WakeUp()
    // Offset: 0x23DABCC
    void WakeUp();
    // public System.Void AddForce(UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x23DAC0C
    void AddForce(UnityEngine::Vector3 force, UnityEngine::ForceMode mode);
    // public System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position, UnityEngine.ForceMode mode)
    // Offset: 0x23DACCC
    void AddForceAtPosition(UnityEngine::Vector3 force, UnityEngine::Vector3 position, UnityEngine::ForceMode mode);
    // public System.Void AddForceAtPosition(UnityEngine.Vector3 force, UnityEngine.Vector3 position)
    // Offset: 0x23DADA8
    void AddForceAtPosition(UnityEngine::Vector3 force, UnityEngine::Vector3 position);
    // private System.Void set_velocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x23DA514
    void set_velocity_Injected(UnityEngine::Vector3& value);
    // private System.Void set_angularVelocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x23DA5BC
    void set_angularVelocity_Injected(UnityEngine::Vector3& value);
    // private System.Void get_worldCenterOfMass_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x23DA7EC
    void get_worldCenterOfMass_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x23DA89C
    void get_position_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x23DA944
    void set_position_Injected(UnityEngine::Vector3& value);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x23DA9EC
    void set_rotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void MovePosition_Injected(ref UnityEngine.Vector3 position)
    // Offset: 0x23DAAD4
    void MovePosition_Injected(UnityEngine::Vector3& position);
    // private System.Void MoveRotation_Injected(ref UnityEngine.Quaternion rot)
    // Offset: 0x23DAB7C
    void MoveRotation_Injected(UnityEngine::Quaternion& rot);
    // private System.Void AddForce_Injected(ref UnityEngine.Vector3 force, UnityEngine.ForceMode mode)
    // Offset: 0x23DAC74
    void AddForce_Injected(UnityEngine::Vector3& force, UnityEngine::ForceMode mode);
    // private System.Void AddForceAtPosition_Injected(ref UnityEngine.Vector3 force, ref UnityEngine.Vector3 position, UnityEngine.ForceMode mode)
    // Offset: 0x23DAD40
    void AddForceAtPosition_Injected(UnityEngine::Vector3& force, UnityEngine::Vector3& position, UnityEngine::ForceMode mode);
    // public System.Void .ctor()
    // Offset: 0x23DADB0
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Rigidbody* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rigidbody::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Rigidbody*, creationType>()));
    }
  }; // UnityEngine.Rigidbody
  #pragma pack(pop)
  // Writing MetadataGetter for method: Rigidbody::set_velocity
  // Il2CppName: set_velocity
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3)>(&Rigidbody::set_velocity)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_angularVelocity
  // Il2CppName: set_angularVelocity
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3)>(&Rigidbody::set_angularVelocity)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_angularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_mass
  // Il2CppName: set_mass
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(float)>(&Rigidbody::set_mass)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_mass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_useGravity
  // Il2CppName: set_useGravity
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(bool)>(&Rigidbody::set_useGravity)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_useGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::get_isKinematic
  // Il2CppName: get_isKinematic
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Rigidbody::*)()>(&Rigidbody::get_isKinematic)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "get_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_isKinematic
  // Il2CppName: set_isKinematic
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(bool)>(&Rigidbody::set_isKinematic)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_isKinematic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_collisionDetectionMode
  // Il2CppName: set_collisionDetectionMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::CollisionDetectionMode)>(&Rigidbody::set_collisionDetectionMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_collisionDetectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::CollisionDetectionMode>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::get_worldCenterOfMass
  // Il2CppName: get_worldCenterOfMass
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Rigidbody::*)()>(&Rigidbody::get_worldCenterOfMass)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "get_worldCenterOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::get_position
  // Il2CppName: get_position
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Rigidbody::*)()>(&Rigidbody::get_position)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_position
  // Il2CppName: set_position
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3)>(&Rigidbody::set_position)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_rotation
  // Il2CppName: set_rotation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Quaternion)>(&Rigidbody::set_rotation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::get_maxAngularVelocity
  // Il2CppName: get_maxAngularVelocity
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Rigidbody::*)()>(&Rigidbody::get_maxAngularVelocity)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "get_maxAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::MovePosition
  // Il2CppName: MovePosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3)>(&Rigidbody::MovePosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "MovePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::MoveRotation
  // Il2CppName: MoveRotation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Quaternion)>(&Rigidbody::MoveRotation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "MoveRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::WakeUp
  // Il2CppName: WakeUp
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)()>(&Rigidbody::WakeUp)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "WakeUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::AddForce
  // Il2CppName: AddForce
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3, UnityEngine::ForceMode)>(&Rigidbody::AddForce)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "AddForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::ForceMode>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::AddForceAtPosition
  // Il2CppName: AddForceAtPosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::ForceMode)>(&Rigidbody::AddForceAtPosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "AddForceAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::ForceMode>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::AddForceAtPosition
  // Il2CppName: AddForceAtPosition
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Rigidbody::AddForceAtPosition)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "AddForceAtPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_velocity_Injected
  // Il2CppName: set_velocity_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&)>(&Rigidbody::set_velocity_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_velocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_angularVelocity_Injected
  // Il2CppName: set_angularVelocity_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&)>(&Rigidbody::set_angularVelocity_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_angularVelocity_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::get_worldCenterOfMass_Injected
  // Il2CppName: get_worldCenterOfMass_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&)>(&Rigidbody::get_worldCenterOfMass_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "get_worldCenterOfMass_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::get_position_Injected
  // Il2CppName: get_position_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&)>(&Rigidbody::get_position_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "get_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_position_Injected
  // Il2CppName: set_position_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&)>(&Rigidbody::set_position_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_position_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::set_rotation_Injected
  // Il2CppName: set_rotation_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Quaternion&)>(&Rigidbody::set_rotation_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "set_rotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::MovePosition_Injected
  // Il2CppName: MovePosition_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&)>(&Rigidbody::MovePosition_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "MovePosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::MoveRotation_Injected
  // Il2CppName: MoveRotation_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Quaternion&)>(&Rigidbody::MoveRotation_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "MoveRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::AddForce_Injected
  // Il2CppName: AddForce_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&, UnityEngine::ForceMode)>(&Rigidbody::AddForce_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "AddForce_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::ForceMode>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::AddForceAtPosition_Injected
  // Il2CppName: AddForceAtPosition_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)(UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::ForceMode)>(&Rigidbody::AddForceAtPosition_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), "AddForceAtPosition_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::ForceMode>()});
    }
  };
  // Writing MetadataGetter for method: Rigidbody::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)()>(&Rigidbody::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Rigidbody::*)()>(&Rigidbody::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Rigidbody*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Rigidbody*, "UnityEngine", "Rigidbody");
