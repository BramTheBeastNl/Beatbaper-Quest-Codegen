// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: CollisionDetectionMode
  struct CollisionDetectionMode;
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Rigidbody
  // [NativeHeaderAttribute] Offset: CC9F20
  // [RequireComponent] Offset: CC9F20
  class Rigidbody : public UnityEngine::Component {
    public:
    // Creating value type constructor for type: Rigidbody
    Rigidbody() noexcept {}
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0x219F278
    void set_velocity(UnityEngine::Vector3 value);
    // public System.Void set_angularVelocity(UnityEngine.Vector3 value)
    // Offset: 0x219F320
    void set_angularVelocity(UnityEngine::Vector3 value);
    // public System.Void set_mass(System.Single value)
    // Offset: 0x219F3C8
    void set_mass(float value);
    // public System.Void set_useGravity(System.Boolean value)
    // Offset: 0x219F418
    void set_useGravity(bool value);
    // public System.Boolean get_isKinematic()
    // Offset: 0x219F468
    bool get_isKinematic();
    // public System.Void set_isKinematic(System.Boolean value)
    // Offset: 0x219F4A8
    void set_isKinematic(bool value);
    // public System.Void set_collisionDetectionMode(UnityEngine.CollisionDetectionMode value)
    // Offset: 0x219F4F8
    void set_collisionDetectionMode(UnityEngine::CollisionDetectionMode value);
    // public UnityEngine.Vector3 get_worldCenterOfMass()
    // Offset: 0x219F548
    UnityEngine::Vector3 get_worldCenterOfMass();
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x219F5F8
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x219F6A8
    void set_position(UnityEngine::Vector3 value);
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x219F750
    void set_rotation(UnityEngine::Quaternion value);
    // public System.Single get_maxAngularVelocity()
    // Offset: 0x219F7F8
    float get_maxAngularVelocity();
    // public System.Void MovePosition(UnityEngine.Vector3 position)
    // Offset: 0x219F838
    void MovePosition(UnityEngine::Vector3 position);
    // public System.Void MoveRotation(UnityEngine.Quaternion rot)
    // Offset: 0x219F8E0
    void MoveRotation(UnityEngine::Quaternion rot);
    // public System.Void WakeUp()
    // Offset: 0x219F988
    void WakeUp();
    // private System.Void set_velocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x219F2D0
    void set_velocity_Injected(UnityEngine::Vector3& value);
    // private System.Void set_angularVelocity_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x219F378
    void set_angularVelocity_Injected(UnityEngine::Vector3& value);
    // private System.Void get_worldCenterOfMass_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x219F5A8
    void get_worldCenterOfMass_Injected(UnityEngine::Vector3& ret);
    // private System.Void get_position_Injected(out UnityEngine.Vector3 ret)
    // Offset: 0x219F658
    void get_position_Injected(UnityEngine::Vector3& ret);
    // private System.Void set_position_Injected(ref UnityEngine.Vector3 value)
    // Offset: 0x219F700
    void set_position_Injected(UnityEngine::Vector3& value);
    // private System.Void set_rotation_Injected(ref UnityEngine.Quaternion value)
    // Offset: 0x219F7A8
    void set_rotation_Injected(UnityEngine::Quaternion& value);
    // private System.Void MovePosition_Injected(ref UnityEngine.Vector3 position)
    // Offset: 0x219F890
    void MovePosition_Injected(UnityEngine::Vector3& position);
    // private System.Void MoveRotation_Injected(ref UnityEngine.Quaternion rot)
    // Offset: 0x219F938
    void MoveRotation_Injected(UnityEngine::Quaternion& rot);
    // public System.Void .ctor()
    // Offset: 0x219F9C8
    // Implemented from: UnityEngine.Component
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Rigidbody* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rigidbody::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Rigidbody*, creationType>()));
    }
  }; // UnityEngine.Rigidbody
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Rigidbody*, "UnityEngine", "Rigidbody");
