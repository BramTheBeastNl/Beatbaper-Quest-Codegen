// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.GL
  // [NativeHeaderAttribute] Offset: CB9248
  // [StaticAccessorAttribute] Offset: CB9248
  // [NativeHeaderAttribute] Offset: CB9248
  // [NativeHeaderAttribute] Offset: CB9248
  // [NativeHeaderAttribute] Offset: CB9248
  class GL : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: GL
    GL() noexcept {}
    // static public System.Void Vertex3(System.Single x, System.Single y, System.Single z)
    // Offset: 0x1A0E390
    static void Vertex3(float x, float y, float z);
    // static public System.Void TexCoord3(System.Single x, System.Single y, System.Single z)
    // Offset: 0x1A0E3EC
    static void TexCoord3(float x, float y, float z);
    // static public System.Void TexCoord(UnityEngine.Vector3 v)
    // Offset: 0x1A0E448
    static void TexCoord(UnityEngine::Vector3 v);
    // static public System.Void TexCoord2(System.Single x, System.Single y)
    // Offset: 0x1A0E4A4
    static void TexCoord2(float x, float y);
    // static public System.Boolean get_invertCulling()
    // Offset: 0x1A0E4F4
    static bool get_invertCulling();
    // static public System.Void set_invertCulling(System.Boolean value)
    // Offset: 0x1A0E528
    static void set_invertCulling(bool value);
    // static public System.Void Flush()
    // Offset: 0x1A0E568
    static void Flush();
    // static public System.Void PushMatrix()
    // Offset: 0x1A0E59C
    static void PushMatrix();
    // static public System.Void PopMatrix()
    // Offset: 0x1A0E5D0
    static void PopMatrix();
    // static public System.Void LoadOrtho()
    // Offset: 0x1A0E604
    static void LoadOrtho();
    // static private System.Void GLLoadPixelMatrixScript(System.Single left, System.Single right, System.Single bottom, System.Single top)
    // Offset: 0x1A0E638
    static void GLLoadPixelMatrixScript(float left, float right, float bottom, float top);
    // static public System.Void LoadPixelMatrix(System.Single left, System.Single right, System.Single bottom, System.Single top)
    // Offset: 0x1A0E69C
    static void LoadPixelMatrix(float left, float right, float bottom, float top);
    // static public System.Void Begin(System.Int32 mode)
    // Offset: 0x1A0E700
    static void Begin(int mode);
    // static public System.Void End()
    // Offset: 0x1A0E740
    static void End();
    // static private System.Void GLClear(System.Boolean clearDepth, System.Boolean clearColor, UnityEngine.Color backgroundColor, System.Single depth)
    // Offset: 0x1A0E774
    static void GLClear(bool clearDepth, bool clearColor, UnityEngine::Color backgroundColor, float depth);
    // static public System.Void Clear(System.Boolean clearDepth, System.Boolean clearColor, UnityEngine.Color backgroundColor)
    // Offset: 0x1A0E854
    static void Clear(bool clearDepth, bool clearColor, UnityEngine::Color backgroundColor);
    // static public System.Void Viewport(UnityEngine.Rect pixelRect)
    // Offset: 0x1A0E864
    static void Viewport(UnityEngine::Rect pixelRect);
    // static private System.Void GLClear_Injected(System.Boolean clearDepth, System.Boolean clearColor, ref UnityEngine.Color backgroundColor, System.Single depth)
    // Offset: 0x1A0E7EC
    static void GLClear_Injected(bool clearDepth, bool clearColor, UnityEngine::Color& backgroundColor, float depth);
    // static private System.Void Viewport_Injected(ref UnityEngine.Rect pixelRect)
    // Offset: 0x1A0E8B4
    static void Viewport_Injected(UnityEngine::Rect& pixelRect);
  }; // UnityEngine.GL
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::GL*, "UnityEngine", "GL");
