// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.GL
  // [NativeHeaderAttribute] Offset: D8E7B0
  // [NativeHeaderAttribute] Offset: D8E7B0
  // [NativeHeaderAttribute] Offset: D8E7B0
  // [StaticAccessorAttribute] Offset: D8E7B0
  // [NativeHeaderAttribute] Offset: D8E7B0
  class GL : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: GL
    GL() noexcept {}
    // static public System.Void Vertex3(System.Single x, System.Single y, System.Single z)
    // Offset: 0x1B99028
    static void Vertex3(float x, float y, float z);
    // static public System.Void TexCoord3(System.Single x, System.Single y, System.Single z)
    // Offset: 0x1B99084
    static void TexCoord3(float x, float y, float z);
    // static public System.Void TexCoord(UnityEngine.Vector3 v)
    // Offset: 0x1B990E0
    static void TexCoord(UnityEngine::Vector3 v);
    // static public System.Void TexCoord2(System.Single x, System.Single y)
    // Offset: 0x1B9913C
    static void TexCoord2(float x, float y);
    // static public System.Boolean get_invertCulling()
    // Offset: 0x1B9918C
    static bool get_invertCulling();
    // static public System.Void set_invertCulling(System.Boolean value)
    // Offset: 0x1B991C0
    static void set_invertCulling(bool value);
    // static public System.Void Flush()
    // Offset: 0x1B99200
    static void Flush();
    // static public System.Void PushMatrix()
    // Offset: 0x1B99234
    static void PushMatrix();
    // static public System.Void PopMatrix()
    // Offset: 0x1B99268
    static void PopMatrix();
    // static public System.Void LoadOrtho()
    // Offset: 0x1B9929C
    static void LoadOrtho();
    // static private System.Void GLLoadPixelMatrixScript(System.Single left, System.Single right, System.Single bottom, System.Single top)
    // Offset: 0x1B992D0
    static void GLLoadPixelMatrixScript(float left, float right, float bottom, float top);
    // static public System.Void LoadPixelMatrix(System.Single left, System.Single right, System.Single bottom, System.Single top)
    // Offset: 0x1B99334
    static void LoadPixelMatrix(float left, float right, float bottom, float top);
    // static public System.Void Begin(System.Int32 mode)
    // Offset: 0x1B99398
    static void Begin(int mode);
    // static public System.Void End()
    // Offset: 0x1B993D8
    static void End();
    // static private System.Void GLClear(System.Boolean clearDepth, System.Boolean clearColor, UnityEngine.Color backgroundColor, System.Single depth)
    // Offset: 0x1B9940C
    static void GLClear(bool clearDepth, bool clearColor, UnityEngine::Color backgroundColor, float depth);
    // static public System.Void Clear(System.Boolean clearDepth, System.Boolean clearColor, UnityEngine.Color backgroundColor)
    // Offset: 0x1B994EC
    static void Clear(bool clearDepth, bool clearColor, UnityEngine::Color backgroundColor);
    // static public System.Void Viewport(UnityEngine.Rect pixelRect)
    // Offset: 0x1B994FC
    static void Viewport(UnityEngine::Rect pixelRect);
    // static private System.Void GLClear_Injected(System.Boolean clearDepth, System.Boolean clearColor, ref UnityEngine.Color backgroundColor, System.Single depth)
    // Offset: 0x1B99484
    static void GLClear_Injected(bool clearDepth, bool clearColor, UnityEngine::Color& backgroundColor, float depth);
    // static private System.Void Viewport_Injected(ref UnityEngine.Rect pixelRect)
    // Offset: 0x1B9954C
    static void Viewport_Injected(UnityEngine::Rect& pixelRect);
  }; // UnityEngine.GL
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::GL*, "UnityEngine", "GL");
// Writing MetadataGetter for method: GL::Vertex3
// Il2CppName: Vertex3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float)>(&GL::Vertex3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "Vertex3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::TexCoord3
// Il2CppName: TexCoord3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float)>(&GL::TexCoord3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "TexCoord3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::TexCoord
// Il2CppName: TexCoord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3)>(&GL::TexCoord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "TexCoord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: GL::TexCoord2
// Il2CppName: TexCoord2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float)>(&GL::TexCoord2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "TexCoord2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::get_invertCulling
// Il2CppName: get_invertCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GL::get_invertCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "get_invertCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GL::set_invertCulling
// Il2CppName: set_invertCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GL::set_invertCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "set_invertCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GL::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GL::Flush)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GL::PushMatrix
// Il2CppName: PushMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GL::PushMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "PushMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GL::PopMatrix
// Il2CppName: PopMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GL::PopMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "PopMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GL::LoadOrtho
// Il2CppName: LoadOrtho
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GL::LoadOrtho)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "LoadOrtho", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GL::GLLoadPixelMatrixScript
// Il2CppName: GLLoadPixelMatrixScript
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float)>(&GL::GLLoadPixelMatrixScript)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "GLLoadPixelMatrixScript", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::LoadPixelMatrix
// Il2CppName: LoadPixelMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float)>(&GL::LoadPixelMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "LoadPixelMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::Begin
// Il2CppName: Begin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GL::Begin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "Begin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GL::End
// Il2CppName: End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GL::End)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GL::GLClear
// Il2CppName: GLClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, bool, UnityEngine::Color, float)>(&GL::GLClear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "GLClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, bool, UnityEngine::Color)>(&GL::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: GL::Viewport
// Il2CppName: Viewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rect)>(&GL::Viewport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "Viewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
  }
};
// Writing MetadataGetter for method: GL::GLClear_Injected
// Il2CppName: GLClear_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, bool, UnityEngine::Color&, float)>(&GL::GLClear_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "GLClear_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GL::Viewport_Injected
// Il2CppName: Viewport_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Rect&)>(&GL::Viewport_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GL*), "Viewport_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect&>()});
  }
};
