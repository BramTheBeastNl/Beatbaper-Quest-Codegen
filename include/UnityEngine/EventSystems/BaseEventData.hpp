// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.AbstractEventData
#include "UnityEngine/EventSystems/AbstractEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
  // Forward declaring type: BaseInputModule
  class BaseInputModule;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.EventSystems.BaseEventData
  class BaseEventData : public UnityEngine::EventSystems::AbstractEventData {
    public:
    // Writing base type padding for base size: 0x11 to desired offset: 0x18
    char ___base_padding[0x7] = {};
    // private readonly UnityEngine.EventSystems.EventSystem m_EventSystem
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::EventSystems::EventSystem* m_EventSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::EventSystem*) == 0x8);
    // Creating value type constructor for type: BaseEventData
    BaseEventData(UnityEngine::EventSystems::EventSystem* m_EventSystem_ = {}) noexcept : m_EventSystem{m_EventSystem_} {}
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // public System.Void .ctor(UnityEngine.EventSystems.EventSystem eventSystem)
    // Offset: 0x142CF38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseEventData* New_ctor(UnityEngine::EventSystems::EventSystem* eventSystem) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::EventSystems::BaseEventData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseEventData*, creationType>(eventSystem)));
    }
    // public UnityEngine.EventSystems.BaseInputModule get_currentInputModule()
    // Offset: 0x142CF64
    UnityEngine::EventSystems::BaseInputModule* get_currentInputModule();
    // public UnityEngine.GameObject get_selectedObject()
    // Offset: 0x142CF80
    UnityEngine::GameObject* get_selectedObject();
    // public System.Void set_selectedObject(UnityEngine.GameObject value)
    // Offset: 0x142CF9C
    void set_selectedObject(UnityEngine::GameObject* value);
  }; // UnityEngine.EventSystems.BaseEventData
  #pragma pack(pop)
  static check_size<sizeof(BaseEventData), 24 + sizeof(UnityEngine::EventSystems::EventSystem*)> __UnityEngine_EventSystems_BaseEventDataSizeCheck;
  static_assert(sizeof(BaseEventData) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::EventSystems::BaseEventData*, "UnityEngine.EventSystems", "BaseEventData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::EventSystems::BaseEventData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::EventSystems::BaseEventData::get_currentInputModule
// Il2CppName: get_currentInputModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::BaseInputModule* (UnityEngine::EventSystems::BaseEventData::*)()>(&UnityEngine::EventSystems::BaseEventData::get_currentInputModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::BaseEventData*), "get_currentInputModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::BaseEventData::get_selectedObject
// Il2CppName: get_selectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (UnityEngine::EventSystems::BaseEventData::*)()>(&UnityEngine::EventSystems::BaseEventData::get_selectedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::BaseEventData*), "get_selectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::BaseEventData::set_selectedObject
// Il2CppName: set_selectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::BaseEventData::*)(UnityEngine::GameObject*)>(&UnityEngine::EventSystems::BaseEventData::set_selectedObject)> {
  const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::BaseEventData*), "set_selectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
