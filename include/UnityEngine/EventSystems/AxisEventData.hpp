// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.EventSystems.MoveDirection
#include "UnityEngine/EventSystems/MoveDirection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Completed forward declares
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.EventSystems.AxisEventData
  class AxisEventData : public UnityEngine::EventSystems::BaseEventData {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDC7A50
    // private UnityEngine.Vector2 <moveVector>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Vector2 moveVector;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDC7A60
    // private UnityEngine.EventSystems.MoveDirection <moveDir>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    UnityEngine::EventSystems::MoveDirection moveDir;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::MoveDirection) == 0x4);
    // Creating value type constructor for type: AxisEventData
    AxisEventData(UnityEngine::Vector2 moveVector_ = {}, UnityEngine::EventSystems::MoveDirection moveDir_ = {}) noexcept : moveVector{moveVector_}, moveDir{moveDir_} {}
    // public UnityEngine.Vector2 get_moveVector()
    // Offset: 0x142CE88
    UnityEngine::Vector2 get_moveVector();
    // public System.Void set_moveVector(UnityEngine.Vector2 value)
    // Offset: 0x142CE90
    void set_moveVector(UnityEngine::Vector2 value);
    // public UnityEngine.EventSystems.MoveDirection get_moveDir()
    // Offset: 0x142CE98
    UnityEngine::EventSystems::MoveDirection get_moveDir();
    // public System.Void set_moveDir(UnityEngine.EventSystems.MoveDirection value)
    // Offset: 0x142CEA0
    void set_moveDir(UnityEngine::EventSystems::MoveDirection value);
    // public System.Void .ctor(UnityEngine.EventSystems.EventSystem eventSystem)
    // Offset: 0x142CEA8
    // Implemented from: UnityEngine.EventSystems.BaseEventData
    // Base method: System.Void BaseEventData::.ctor(UnityEngine.EventSystems.EventSystem eventSystem)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AxisEventData* New_ctor(UnityEngine::EventSystems::EventSystem* eventSystem) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::EventSystems::AxisEventData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AxisEventData*, creationType>(eventSystem)));
    }
  }; // UnityEngine.EventSystems.AxisEventData
  #pragma pack(pop)
  static check_size<sizeof(AxisEventData), 40 + sizeof(UnityEngine::EventSystems::MoveDirection)> __UnityEngine_EventSystems_AxisEventDataSizeCheck;
  static_assert(sizeof(AxisEventData) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::EventSystems::AxisEventData*, "UnityEngine.EventSystems", "AxisEventData");
// Writing MetadataGetter for method: AxisEventData::get_moveVector
// Il2CppName: get_moveVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (AxisEventData::*)()>(&AxisEventData::get_moveVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AxisEventData*), "get_moveVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AxisEventData::set_moveVector
// Il2CppName: set_moveVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AxisEventData::*)(UnityEngine::Vector2)>(&AxisEventData::set_moveVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AxisEventData*), "set_moveVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: AxisEventData::get_moveDir
// Il2CppName: get_moveDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::MoveDirection (AxisEventData::*)()>(&AxisEventData::get_moveDir)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AxisEventData*), "get_moveDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AxisEventData::set_moveDir
// Il2CppName: set_moveDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AxisEventData::*)(UnityEngine::EventSystems::MoveDirection)>(&AxisEventData::set_moveDir)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AxisEventData*), "set_moveDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::MoveDirection>()});
  }
};
// Writing MetadataGetter for method: AxisEventData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AxisEventData::*)(UnityEngine::EventSystems::EventSystem*)>(&AxisEventData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AxisEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::EventSystem*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AxisEventData::*)(UnityEngine::EventSystems::EventSystem*)>(&AxisEventData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AxisEventData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::EventSystem*>()});
  }
};
