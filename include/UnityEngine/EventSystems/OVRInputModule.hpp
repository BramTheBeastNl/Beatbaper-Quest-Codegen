// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.PointerInputModule
#include "UnityEngine/EventSystems/PointerInputModule.hpp"
// Including type: OVRInput/Button
#include "GlobalNamespace/OVRInput_Button.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: OVRPointerEventData
  class OVRPointerEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCursor
  class OVRCursor;
  // Forward declaring type: OVRRaycaster
  class OVRRaycaster;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.EventSystems.OVRInputModule
  class OVRInputModule : public UnityEngine::EventSystems::PointerInputModule {
    public:
    // Nested type: UnityEngine::EventSystems::OVRInputModule::InputMode
    struct InputMode;
    // [TooltipAttribute] Offset: 0xDD04F8
    // public UnityEngine.Transform rayTransform
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Transform* rayTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public OVRCursor m_Cursor
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::OVRCursor* m_Cursor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRCursor*) == 0x8);
    // [TooltipAttribute] Offset: 0xDD0530
    // public OVRInput/Button joyPadClickButton
    // Size: 0x4
    // Offset: 0x68
    GlobalNamespace::OVRInput::Button joyPadClickButton;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::Button) == 0x4);
    // [TooltipAttribute] Offset: 0xDD0568
    // public UnityEngine.KeyCode gazeClickKey
    // Size: 0x4
    // Offset: 0x6C
    UnityEngine::KeyCode gazeClickKey;
    // Field size check
    static_assert(sizeof(UnityEngine::KeyCode) == 0x4);
    // [HeaderAttribute] Offset: 0xDD05A0
    // [TooltipAttribute] Offset: 0xDD05A0
    // public System.Boolean performSphereCastForGazepointer
    // Size: 0x1
    // Offset: 0x70
    bool performSphereCastForGazepointer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0xDD0600
    // [TooltipAttribute] Offset: 0xDD0600
    // public System.Boolean useRightStickScroll
    // Size: 0x1
    // Offset: 0x71
    bool useRightStickScroll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRightStickScroll and: rightStickDeadZone
    char __padding5[0x2] = {};
    // [TooltipAttribute] Offset: 0xDD0660
    // public System.Single rightStickDeadZone
    // Size: 0x4
    // Offset: 0x74
    float rightStickDeadZone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xDD0698
    // [TooltipAttribute] Offset: 0xDD0698
    // public System.Boolean useSwipeScroll
    // Size: 0x1
    // Offset: 0x78
    bool useSwipeScroll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSwipeScroll and: swipeDragThreshold
    char __padding7[0x3] = {};
    // [TooltipAttribute] Offset: 0xDD06F8
    // public System.Single swipeDragThreshold
    // Size: 0x4
    // Offset: 0x7C
    float swipeDragThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDD0730
    // public System.Single swipeDragScale
    // Size: 0x4
    // Offset: 0x80
    float swipeDragScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xDD0768
    // public System.Boolean InvertSwipeXAxis
    // Size: 0x1
    // Offset: 0x84
    bool InvertSwipeXAxis;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InvertSwipeXAxis and: activeGraphicRaycaster
    char __padding10[0x3] = {};
    // public OVRRaycaster activeGraphicRaycaster
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::OVRRaycaster* activeGraphicRaycaster;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRRaycaster*) == 0x8);
    // [HeaderAttribute] Offset: 0xDD07A0
    // [TooltipAttribute] Offset: 0xDD07A0
    // public System.Single angleDragThreshold
    // Size: 0x4
    // Offset: 0x90
    float angleDragThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SpherecastRadius
    // Size: 0x4
    // Offset: 0x94
    float m_SpherecastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_NextAction
    // Size: 0x4
    // Offset: 0x98
    float m_NextAction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 m_LastMousePosition
    // Size: 0x8
    // Offset: 0x9C
    UnityEngine::Vector2 m_LastMousePosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_MousePosition
    // Size: 0x8
    // Offset: 0xA4
    UnityEngine::Vector2 m_MousePosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // Padding between fields: m_MousePosition and: m_HorizontalAxis
    char __padding16[0x4] = {};
    // [HeaderAttribute] Offset: 0xDD0810
    // private System.String m_HorizontalAxis
    // Size: 0x8
    // Offset: 0xB0
    ::Il2CppString* m_HorizontalAxis;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_VerticalAxis
    // Size: 0x8
    // Offset: 0xB8
    ::Il2CppString* m_VerticalAxis;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_SubmitButton
    // Size: 0x8
    // Offset: 0xC0
    ::Il2CppString* m_SubmitButton;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_CancelButton
    // Size: 0x8
    // Offset: 0xC8
    ::Il2CppString* m_CancelButton;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Single m_InputActionsPerSecond
    // Size: 0x4
    // Offset: 0xD0
    float m_InputActionsPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_AllowActivationOnMobileDevice
    // Size: 0x1
    // Offset: 0xD4
    bool m_AllowActivationOnMobileDevice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AllowActivationOnMobileDevice and: m_VRRayPointerData
    char __padding22[0x3] = {};
    // protected System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.EventSystems.OVRPointerEventData> m_VRRayPointerData
    // Size: 0x8
    // Offset: 0xD8
    System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::OVRPointerEventData*>* m_VRRayPointerData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::OVRPointerEventData*>*) == 0x8);
    // private readonly UnityEngine.EventSystems.PointerInputModule/MouseState m_MouseState
    // Size: 0x8
    // Offset: 0xE0
    UnityEngine::EventSystems::PointerInputModule::MouseState* m_MouseState;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::PointerInputModule::MouseState*) == 0x8);
    // Creating value type constructor for type: OVRInputModule
    OVRInputModule(UnityEngine::Transform* rayTransform_ = {}, GlobalNamespace::OVRCursor* m_Cursor_ = {}, GlobalNamespace::OVRInput::Button joyPadClickButton_ = {}, UnityEngine::KeyCode gazeClickKey_ = {}, bool performSphereCastForGazepointer_ = {}, bool useRightStickScroll_ = {}, float rightStickDeadZone_ = {}, bool useSwipeScroll_ = {}, float swipeDragThreshold_ = {}, float swipeDragScale_ = {}, bool InvertSwipeXAxis_ = {}, GlobalNamespace::OVRRaycaster* activeGraphicRaycaster_ = {}, float angleDragThreshold_ = {}, float m_SpherecastRadius_ = {}, float m_NextAction_ = {}, UnityEngine::Vector2 m_LastMousePosition_ = {}, UnityEngine::Vector2 m_MousePosition_ = {}, ::Il2CppString* m_HorizontalAxis_ = {}, ::Il2CppString* m_VerticalAxis_ = {}, ::Il2CppString* m_SubmitButton_ = {}, ::Il2CppString* m_CancelButton_ = {}, float m_InputActionsPerSecond_ = {}, bool m_AllowActivationOnMobileDevice_ = {}, System::Collections::Generic::Dictionary_2<int, UnityEngine::EventSystems::OVRPointerEventData*>* m_VRRayPointerData_ = {}, UnityEngine::EventSystems::PointerInputModule::MouseState* m_MouseState_ = {}) noexcept : rayTransform{rayTransform_}, m_Cursor{m_Cursor_}, joyPadClickButton{joyPadClickButton_}, gazeClickKey{gazeClickKey_}, performSphereCastForGazepointer{performSphereCastForGazepointer_}, useRightStickScroll{useRightStickScroll_}, rightStickDeadZone{rightStickDeadZone_}, useSwipeScroll{useSwipeScroll_}, swipeDragThreshold{swipeDragThreshold_}, swipeDragScale{swipeDragScale_}, InvertSwipeXAxis{InvertSwipeXAxis_}, activeGraphicRaycaster{activeGraphicRaycaster_}, angleDragThreshold{angleDragThreshold_}, m_SpherecastRadius{m_SpherecastRadius_}, m_NextAction{m_NextAction_}, m_LastMousePosition{m_LastMousePosition_}, m_MousePosition{m_MousePosition_}, m_HorizontalAxis{m_HorizontalAxis_}, m_VerticalAxis{m_VerticalAxis_}, m_SubmitButton{m_SubmitButton_}, m_CancelButton{m_CancelButton_}, m_InputActionsPerSecond{m_InputActionsPerSecond_}, m_AllowActivationOnMobileDevice{m_AllowActivationOnMobileDevice_}, m_VRRayPointerData{m_VRRayPointerData_}, m_MouseState{m_MouseState_} {}
    // public UnityEngine.EventSystems.OVRInputModule/InputMode get_inputMode()
    // Offset: 0x1ED7BB8
    UnityEngine::EventSystems::OVRInputModule::InputMode get_inputMode();
    // public System.Boolean get_allowActivationOnMobileDevice()
    // Offset: 0x1ED7BC0
    bool get_allowActivationOnMobileDevice();
    // public System.Void set_allowActivationOnMobileDevice(System.Boolean value)
    // Offset: 0x1ED7BC8
    void set_allowActivationOnMobileDevice(bool value);
    // public System.Single get_inputActionsPerSecond()
    // Offset: 0x1ED7BD4
    float get_inputActionsPerSecond();
    // public System.Void set_inputActionsPerSecond(System.Single value)
    // Offset: 0x1ED7BDC
    void set_inputActionsPerSecond(float value);
    // public System.String get_horizontalAxis()
    // Offset: 0x1ED7BE4
    ::Il2CppString* get_horizontalAxis();
    // public System.Void set_horizontalAxis(System.String value)
    // Offset: 0x1ED7BEC
    void set_horizontalAxis(::Il2CppString* value);
    // public System.String get_verticalAxis()
    // Offset: 0x1ED7BF4
    ::Il2CppString* get_verticalAxis();
    // public System.Void set_verticalAxis(System.String value)
    // Offset: 0x1ED7BFC
    void set_verticalAxis(::Il2CppString* value);
    // public System.String get_submitButton()
    // Offset: 0x1ED7C04
    ::Il2CppString* get_submitButton();
    // public System.Void set_submitButton(System.String value)
    // Offset: 0x1ED7C0C
    void set_submitButton(::Il2CppString* value);
    // public System.String get_cancelButton()
    // Offset: 0x1ED7C14
    ::Il2CppString* get_cancelButton();
    // public System.Void set_cancelButton(System.String value)
    // Offset: 0x1ED7C1C
    void set_cancelButton(::Il2CppString* value);
    // private System.Boolean SendSubmitEventToSelectedObject()
    // Offset: 0x1ED81E4
    bool SendSubmitEventToSelectedObject();
    // private System.Boolean AllowMoveEventProcessing(System.Single time)
    // Offset: 0x1ED83F4
    bool AllowMoveEventProcessing(float time);
    // private UnityEngine.Vector2 GetRawMoveVector()
    // Offset: 0x1ED8454
    UnityEngine::Vector2 GetRawMoveVector();
    // private System.Boolean SendMoveEventToSelectedObject()
    // Offset: 0x1ED853C
    bool SendMoveEventToSelectedObject();
    // private System.Boolean SendUpdateEventToSelectedObject()
    // Offset: 0x1ED8734
    bool SendUpdateEventToSelectedObject();
    // private System.Void ProcessMousePress(UnityEngine.EventSystems.PointerInputModule/MouseButtonEventData data)
    // Offset: 0x1ED8888
    void ProcessMousePress(UnityEngine::EventSystems::PointerInputModule::MouseButtonEventData* data);
    // private System.Void ProcessMouseEvent(UnityEngine.EventSystems.PointerInputModule/MouseState mouseData)
    // Offset: 0x1ED90A4
    void ProcessMouseEvent(UnityEngine::EventSystems::PointerInputModule::MouseState* mouseData);
    // static private System.Boolean UseMouse(System.Boolean pressed, System.Boolean released, UnityEngine.EventSystems.PointerEventData pointerData)
    // Offset: 0x1ED9344
    static bool UseMouse(bool pressed, bool released, UnityEngine::EventSystems::PointerEventData* pointerData);
    // protected System.Void CopyFromTo(UnityEngine.EventSystems.OVRPointerEventData from, UnityEngine.EventSystems.OVRPointerEventData to)
    // Offset: 0x1ED9448
    void CopyFromTo(UnityEngine::EventSystems::OVRPointerEventData* from, UnityEngine::EventSystems::OVRPointerEventData* to);
    // protected System.Boolean GetPointerData(System.Int32 id, out UnityEngine.EventSystems.OVRPointerEventData data, System.Boolean create)
    // Offset: 0x1ED9510
    bool GetPointerData(int id, UnityEngine::EventSystems::OVRPointerEventData*& data, bool create);
    // static private UnityEngine.Vector3 GetRectTransformNormal(UnityEngine.RectTransform rectTransform)
    // Offset: 0x1ED95FC
    static UnityEngine::Vector3 GetRectTransformNormal(UnityEngine::RectTransform* rectTransform);
    // protected UnityEngine.EventSystems.PointerInputModule/MouseState GetGazePointerData()
    // Offset: 0x1ED977C
    UnityEngine::EventSystems::PointerInputModule::MouseState* GetGazePointerData();
    // protected UnityEngine.EventSystems.PointerInputModule/MouseState GetCanvasPointerData()
    // Offset: 0x1EDA2D8
    UnityEngine::EventSystems::PointerInputModule::MouseState* GetCanvasPointerData();
    // private System.Boolean ShouldStartDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x1EDA6B8
    bool ShouldStartDrag(UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // static private System.Boolean IsPointerMoving(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x1ED9404
    static bool IsPointerMoving(UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // protected UnityEngine.Vector2 SwipeAdjustedPosition(UnityEngine.Vector2 originalPosition, UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x1EDAA3C
    UnityEngine::Vector2 SwipeAdjustedPosition(UnityEngine::Vector2 originalPosition, UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // protected UnityEngine.EventSystems.PointerEventData/FramePressState GetGazeButtonState()
    // Offset: 0x1EDAEC8
    UnityEngine::EventSystems::PointerEventData::FramePressState GetGazeButtonState();
    // protected UnityEngine.Vector2 GetExtraScrollDelta()
    // Offset: 0x1ED9D80
    UnityEngine::Vector2 GetExtraScrollDelta();
    // protected System.Void .ctor()
    // Offset: 0x1ED7AA8
    // Implemented from: UnityEngine.EventSystems.PointerInputModule
    // Base method: System.Void PointerInputModule::.ctor()
    // Base method: System.Void BaseInputModule::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRInputModule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::EventSystems::OVRInputModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRInputModule*, creationType>()));
    }
    // public override System.Void UpdateModule()
    // Offset: 0x1ED7C24
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::UpdateModule()
    void UpdateModule();
    // public override System.Boolean IsModuleSupported()
    // Offset: 0x1ED7CC8
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Boolean BaseInputModule::IsModuleSupported()
    bool IsModuleSupported();
    // public override System.Boolean ShouldActivateModule()
    // Offset: 0x1ED7CE0
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Boolean BaseInputModule::ShouldActivateModule()
    bool ShouldActivateModule();
    // public override System.Void ActivateModule()
    // Offset: 0x1ED7E74
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::ActivateModule()
    void ActivateModule();
    // public override System.Void DeactivateModule()
    // Offset: 0x1ED7FB0
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::DeactivateModule()
    void DeactivateModule();
    // public override System.Void Process()
    // Offset: 0x1ED9394
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::Process()
    void Process();
    // protected System.Void CopyFromTo(UnityEngine.EventSystems.PointerEventData from, UnityEngine.EventSystems.PointerEventData to)
    // Offset: 0x1ED94B4
    // Implemented from: UnityEngine.EventSystems.PointerInputModule
    // Base method: System.Void PointerInputModule::CopyFromTo(UnityEngine.EventSystems.PointerEventData from, UnityEngine.EventSystems.PointerEventData to)
    void CopyFromTo(UnityEngine::EventSystems::PointerEventData* from, UnityEngine::EventSystems::PointerEventData* to);
    // protected System.Void ClearSelection()
    // Offset: 0x1ED7FD8
    // Implemented from: UnityEngine.EventSystems.PointerInputModule
    // Base method: System.Void PointerInputModule::ClearSelection()
    void ClearSelection();
    // protected override System.Void ProcessDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x1EDAB8C
    // Implemented from: UnityEngine.EventSystems.PointerInputModule
    // Base method: System.Void PointerInputModule::ProcessDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    void ProcessDrag(UnityEngine::EventSystems::PointerEventData* pointerEvent);
  }; // UnityEngine.EventSystems.OVRInputModule
  #pragma pack(pop)
  static check_size<sizeof(OVRInputModule), 224 + sizeof(UnityEngine::EventSystems::PointerInputModule::MouseState*)> __UnityEngine_EventSystems_OVRInputModuleSizeCheck;
  static_assert(sizeof(OVRInputModule) == 0xE8);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::EventSystems::OVRInputModule*, "UnityEngine.EventSystems", "OVRInputModule");
// Writing MetadataGetter for method: OVRInputModule::get_inputMode
// Il2CppName: get_inputMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::OVRInputModule::InputMode (OVRInputModule::*)()>(&OVRInputModule::get_inputMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_inputMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::get_allowActivationOnMobileDevice
// Il2CppName: get_allowActivationOnMobileDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)()>(&OVRInputModule::get_allowActivationOnMobileDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_allowActivationOnMobileDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::set_allowActivationOnMobileDevice
// Il2CppName: set_allowActivationOnMobileDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(bool)>(&OVRInputModule::set_allowActivationOnMobileDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "set_allowActivationOnMobileDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::get_inputActionsPerSecond
// Il2CppName: get_inputActionsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (OVRInputModule::*)()>(&OVRInputModule::get_inputActionsPerSecond)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_inputActionsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::set_inputActionsPerSecond
// Il2CppName: set_inputActionsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(float)>(&OVRInputModule::set_inputActionsPerSecond)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "set_inputActionsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::get_horizontalAxis
// Il2CppName: get_horizontalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRInputModule::*)()>(&OVRInputModule::get_horizontalAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_horizontalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::set_horizontalAxis
// Il2CppName: set_horizontalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(::Il2CppString*)>(&OVRInputModule::set_horizontalAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "set_horizontalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::get_verticalAxis
// Il2CppName: get_verticalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRInputModule::*)()>(&OVRInputModule::get_verticalAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_verticalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::set_verticalAxis
// Il2CppName: set_verticalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(::Il2CppString*)>(&OVRInputModule::set_verticalAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "set_verticalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::get_submitButton
// Il2CppName: get_submitButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRInputModule::*)()>(&OVRInputModule::get_submitButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_submitButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::set_submitButton
// Il2CppName: set_submitButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(::Il2CppString*)>(&OVRInputModule::set_submitButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "set_submitButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::get_cancelButton
// Il2CppName: get_cancelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OVRInputModule::*)()>(&OVRInputModule::get_cancelButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "get_cancelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::set_cancelButton
// Il2CppName: set_cancelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(::Il2CppString*)>(&OVRInputModule::set_cancelButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "set_cancelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::SendSubmitEventToSelectedObject
// Il2CppName: SendSubmitEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)()>(&OVRInputModule::SendSubmitEventToSelectedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "SendSubmitEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::AllowMoveEventProcessing
// Il2CppName: AllowMoveEventProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)(float)>(&OVRInputModule::AllowMoveEventProcessing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "AllowMoveEventProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetRawMoveVector
// Il2CppName: GetRawMoveVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (OVRInputModule::*)()>(&OVRInputModule::GetRawMoveVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetRawMoveVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::SendMoveEventToSelectedObject
// Il2CppName: SendMoveEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)()>(&OVRInputModule::SendMoveEventToSelectedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "SendMoveEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::SendUpdateEventToSelectedObject
// Il2CppName: SendUpdateEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)()>(&OVRInputModule::SendUpdateEventToSelectedObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "SendUpdateEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ProcessMousePress
// Il2CppName: ProcessMousePress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(UnityEngine::EventSystems::PointerInputModule::MouseButtonEventData*)>(&OVRInputModule::ProcessMousePress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ProcessMousePress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerInputModule::MouseButtonEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ProcessMouseEvent
// Il2CppName: ProcessMouseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(UnityEngine::EventSystems::PointerInputModule::MouseState*)>(&OVRInputModule::ProcessMouseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ProcessMouseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerInputModule::MouseState*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::UseMouse
// Il2CppName: UseMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool, UnityEngine::EventSystems::PointerEventData*)>(&OVRInputModule::UseMouse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "UseMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::CopyFromTo
// Il2CppName: CopyFromTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(UnityEngine::EventSystems::OVRPointerEventData*, UnityEngine::EventSystems::OVRPointerEventData*)>(&OVRInputModule::CopyFromTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "CopyFromTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::OVRPointerEventData*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::OVRPointerEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetPointerData
// Il2CppName: GetPointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)(int, UnityEngine::EventSystems::OVRPointerEventData*&, bool)>(&OVRInputModule::GetPointerData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetPointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::OVRPointerEventData*&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetRectTransformNormal
// Il2CppName: GetRectTransformNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::RectTransform*)>(&OVRInputModule::GetRectTransformNormal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetRectTransformNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RectTransform*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetGazePointerData
// Il2CppName: GetGazePointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::PointerInputModule::MouseState* (OVRInputModule::*)()>(&OVRInputModule::GetGazePointerData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetGazePointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetCanvasPointerData
// Il2CppName: GetCanvasPointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::PointerInputModule::MouseState* (OVRInputModule::*)()>(&OVRInputModule::GetCanvasPointerData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetCanvasPointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ShouldStartDrag
// Il2CppName: ShouldStartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)(UnityEngine::EventSystems::PointerEventData*)>(&OVRInputModule::ShouldStartDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ShouldStartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::IsPointerMoving
// Il2CppName: IsPointerMoving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::EventSystems::PointerEventData*)>(&OVRInputModule::IsPointerMoving)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "IsPointerMoving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::SwipeAdjustedPosition
// Il2CppName: SwipeAdjustedPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (OVRInputModule::*)(UnityEngine::Vector2, UnityEngine::EventSystems::PointerEventData*)>(&OVRInputModule::SwipeAdjustedPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "SwipeAdjustedPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetGazeButtonState
// Il2CppName: GetGazeButtonState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::PointerEventData::FramePressState (OVRInputModule::*)()>(&OVRInputModule::GetGazeButtonState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetGazeButtonState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::GetExtraScrollDelta
// Il2CppName: GetExtraScrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (OVRInputModule::*)()>(&OVRInputModule::GetExtraScrollDelta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "GetExtraScrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::UpdateModule
// Il2CppName: UpdateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::UpdateModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "UpdateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::IsModuleSupported
// Il2CppName: IsModuleSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)()>(&OVRInputModule::IsModuleSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "IsModuleSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ShouldActivateModule
// Il2CppName: ShouldActivateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OVRInputModule::*)()>(&OVRInputModule::ShouldActivateModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ShouldActivateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ActivateModule
// Il2CppName: ActivateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::ActivateModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ActivateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::DeactivateModule
// Il2CppName: DeactivateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::DeactivateModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "DeactivateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::Process)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::CopyFromTo
// Il2CppName: CopyFromTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(UnityEngine::EventSystems::PointerEventData*, UnityEngine::EventSystems::PointerEventData*)>(&OVRInputModule::CopyFromTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "CopyFromTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)()>(&OVRInputModule::ClearSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRInputModule::ProcessDrag
// Il2CppName: ProcessDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRInputModule::*)(UnityEngine::EventSystems::PointerEventData*)>(&OVRInputModule::ProcessDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRInputModule*), "ProcessDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
