// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.AddressableAssets
namespace UnityEngine::AddressableAssets {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.AddressableAssets.IKeyEvaluator
  class IKeyEvaluator {
    public:
    // Creating value type constructor for type: IKeyEvaluator
    IKeyEvaluator() noexcept {}
    // public System.Object get_RuntimeKey()
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* get_RuntimeKey();
    // public System.Boolean RuntimeKeyIsValid()
    // Offset: 0xFFFFFFFF
    bool RuntimeKeyIsValid();
  }; // UnityEngine.AddressableAssets.IKeyEvaluator
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AddressableAssets::IKeyEvaluator*, "UnityEngine.AddressableAssets", "IKeyEvaluator");
// Writing includes for template specializations
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::IKeyEvaluator::get_RuntimeKey
// Il2CppName: get_RuntimeKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (UnityEngine::AddressableAssets::IKeyEvaluator::*)()>(&UnityEngine::AddressableAssets::IKeyEvaluator::get_RuntimeKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::IKeyEvaluator*), "get_RuntimeKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::AddressableAssets::IKeyEvaluator::RuntimeKeyIsValid
// Il2CppName: RuntimeKeyIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::AddressableAssets::IKeyEvaluator::*)()>(&UnityEngine::AddressableAssets::IKeyEvaluator::RuntimeKeyIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::AddressableAssets::IKeyEvaluator*), "RuntimeKeyIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
