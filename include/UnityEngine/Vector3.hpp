// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Vector3
  // [] Offset: FFFFFFFF
  // [NativeClassAttribute] Offset: CA8F6C
  // [NativeTypeAttribute] Offset: CA8F6C
  // [DefaultMemberAttribute] Offset: CA8F6C
  // [RequiredByNativeCodeAttribute] Offset: CA8F6C
  // [NativeHeaderAttribute] Offset: CA8F6C
  // [NativeHeaderAttribute] Offset: CA8F6C
  struct Vector3/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Vector3>*/ {
    public:
    // public System.Single x
    // Size: 0x4
    // Offset: 0x0
    float x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single y
    // Size: 0x4
    // Offset: 0x4
    float y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single z
    // Size: 0x4
    // Offset: 0x8
    float z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: Vector3
    constexpr Vector3(float x_ = {}, float y_ = {}, float z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Vector3>
    operator System::IEquatable_1<UnityEngine::Vector3>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Vector3>*>(this);
    }
    // static field const value: static public System.Single kEpsilon
    static constexpr const float kEpsilon = 1e-05;
    // Get static field: static public System.Single kEpsilon
    static float _get_kEpsilon();
    // Set static field: static public System.Single kEpsilon
    static void _set_kEpsilon(float value);
    // static field const value: static public System.Single kEpsilonNormalSqrt
    static constexpr const float kEpsilonNormalSqrt = 1e-15;
    // Get static field: static public System.Single kEpsilonNormalSqrt
    static float _get_kEpsilonNormalSqrt();
    // Set static field: static public System.Single kEpsilonNormalSqrt
    static void _set_kEpsilonNormalSqrt(float value);
    // Get static field: static private readonly UnityEngine.Vector3 zeroVector
    static UnityEngine::Vector3 _get_zeroVector();
    // Set static field: static private readonly UnityEngine.Vector3 zeroVector
    static void _set_zeroVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 oneVector
    static UnityEngine::Vector3 _get_oneVector();
    // Set static field: static private readonly UnityEngine.Vector3 oneVector
    static void _set_oneVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 upVector
    static UnityEngine::Vector3 _get_upVector();
    // Set static field: static private readonly UnityEngine.Vector3 upVector
    static void _set_upVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 downVector
    static UnityEngine::Vector3 _get_downVector();
    // Set static field: static private readonly UnityEngine.Vector3 downVector
    static void _set_downVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 leftVector
    static UnityEngine::Vector3 _get_leftVector();
    // Set static field: static private readonly UnityEngine.Vector3 leftVector
    static void _set_leftVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 rightVector
    static UnityEngine::Vector3 _get_rightVector();
    // Set static field: static private readonly UnityEngine.Vector3 rightVector
    static void _set_rightVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 forwardVector
    static UnityEngine::Vector3 _get_forwardVector();
    // Set static field: static private readonly UnityEngine.Vector3 forwardVector
    static void _set_forwardVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 backVector
    static UnityEngine::Vector3 _get_backVector();
    // Set static field: static private readonly UnityEngine.Vector3 backVector
    static void _set_backVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 positiveInfinityVector
    static UnityEngine::Vector3 _get_positiveInfinityVector();
    // Set static field: static private readonly UnityEngine.Vector3 positiveInfinityVector
    static void _set_positiveInfinityVector(UnityEngine::Vector3 value);
    // Get static field: static private readonly UnityEngine.Vector3 negativeInfinityVector
    static UnityEngine::Vector3 _get_negativeInfinityVector();
    // Set static field: static private readonly UnityEngine.Vector3 negativeInfinityVector
    static void _set_negativeInfinityVector(UnityEngine::Vector3 value);
    // static public UnityEngine.Vector3 Slerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)
    // Offset: 0x198C40C
    static UnityEngine::Vector3 Slerp(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t);
    // static private System.Void OrthoNormalize2(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b)
    // Offset: 0x198C538
    static void OrthoNormalize2(UnityEngine::Vector3& a, UnityEngine::Vector3& b);
    // static public System.Void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent)
    // Offset: 0x198C588
    static void OrthoNormalize(UnityEngine::Vector3& normal, UnityEngine::Vector3& tangent);
    // static public UnityEngine.Vector3 RotateTowards(UnityEngine.Vector3 current, UnityEngine.Vector3 target, System.Single maxRadiansDelta, System.Single maxMagnitudeDelta)
    // Offset: 0x198C61C
    static UnityEngine::Vector3 RotateTowards(UnityEngine::Vector3 current, UnityEngine::Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta);
    // static public UnityEngine.Vector3 Lerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)
    // Offset: 0x198C758
    static UnityEngine::Vector3 Lerp(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t);
    // static public UnityEngine.Vector3 LerpUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)
    // Offset: 0x198C820
    static UnityEngine::Vector3 LerpUnclamped(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t);
    // static public UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, System.Single smoothTime)
    // Offset: 0x198C848
    static UnityEngine::Vector3 SmoothDamp(UnityEngine::Vector3 current, UnityEngine::Vector3 target, UnityEngine::Vector3& currentVelocity, float smoothTime);
    // static public UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, System.Single smoothTime, System.Single maxSpeed, System.Single deltaTime)
    // Offset: 0x198C940
    static UnityEngine::Vector3 SmoothDamp(UnityEngine::Vector3 current, UnityEngine::Vector3 target, UnityEngine::Vector3& currentVelocity, float smoothTime, float maxSpeed, float deltaTime);
    // public System.Single get_Item(System.Int32 index)
    // Offset: 0xDFE04C
    float get_Item(int index);
    // public System.Void set_Item(System.Int32 index, System.Single value)
    // Offset: 0xDFE054
    void set_Item(int index, float value);
    // public System.Void .ctor(System.Single x, System.Single y, System.Single z)
    // Offset: 0xDFE05C
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  Vector3(float x, float y, float z)
    // public System.Void .ctor(System.Single x, System.Single y)
    // Offset: 0xDFE068
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Vector3(float x, float y) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(x, y)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, x, y);
    }
    // static public UnityEngine.Vector3 Scale(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x198CD44
    static UnityEngine::Vector3 Scale(UnityEngine::Vector3 a, UnityEngine::Vector3 b);
    // public System.Void Scale(UnityEngine.Vector3 scale)
    // Offset: 0xDFE074
    void Scale(UnityEngine::Vector3 scale);
    // static public UnityEngine.Vector3 Cross(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
    // Offset: 0x198CD74
    static UnityEngine::Vector3 Cross(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs);
    // public System.Boolean Equals(UnityEngine.Vector3 other)
    // Offset: 0xDFE0A4
    bool Equals(UnityEngine::Vector3 other);
    // static public UnityEngine.Vector3 Normalize(UnityEngine.Vector3 value)
    // Offset: 0x198CE44
    static UnityEngine::Vector3 Normalize(UnityEngine::Vector3 value);
    // public System.Void Normalize()
    // Offset: 0xDFE0D4
    void Normalize();
    // public UnityEngine.Vector3 get_normalized()
    // Offset: 0xDFE0DC
    UnityEngine::Vector3 get_normalized();
    // static public System.Single Dot(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
    // Offset: 0x198D1BC
    static float Dot(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs);
    // static public UnityEngine.Vector3 Project(UnityEngine.Vector3 vector, UnityEngine.Vector3 onNormal)
    // Offset: 0x198D1D4
    static UnityEngine::Vector3 Project(UnityEngine::Vector3 vector, UnityEngine::Vector3 onNormal);
    // static public UnityEngine.Vector3 ProjectOnPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 planeNormal)
    // Offset: 0x198D30C
    static UnityEngine::Vector3 ProjectOnPlane(UnityEngine::Vector3 vector, UnityEngine::Vector3 planeNormal);
    // static public System.Single Angle(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
    // Offset: 0x198D444
    static float Angle(UnityEngine::Vector3 from, UnityEngine::Vector3 to);
    // static public System.Single Distance(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
    // Offset: 0x198D5E8
    static float Distance(UnityEngine::Vector3 a, UnityEngine::Vector3 b);
    // static public UnityEngine.Vector3 ClampMagnitude(UnityEngine.Vector3 vector, System.Single maxLength)
    // Offset: 0x198D6BC
    static UnityEngine::Vector3 ClampMagnitude(UnityEngine::Vector3 vector, float maxLength);
    // static public System.Single Magnitude(UnityEngine.Vector3 vector)
    // Offset: 0x198CF1C
    static float Magnitude(UnityEngine::Vector3 vector);
    // public System.Single get_magnitude()
    // Offset: 0xDFE0E4
    float get_magnitude();
    // static public System.Single SqrMagnitude(UnityEngine.Vector3 vector)
    // Offset: 0x198D848
    static float SqrMagnitude(UnityEngine::Vector3 vector);
    // public System.Single get_sqrMagnitude()
    // Offset: 0xDFE0EC
    float get_sqrMagnitude();
    // static public UnityEngine.Vector3 Min(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
    // Offset: 0x198D860
    static UnityEngine::Vector3 Min(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs);
    // static public UnityEngine.Vector3 Max(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
    // Offset: 0x198D930
    static UnityEngine::Vector3 Max(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs);
    // static public UnityEngine.Vector3 get_zero()
    // Offset: 0x198CFDC
    static UnityEngine::Vector3 get_zero();
    // static public UnityEngine.Vector3 get_one()
    // Offset: 0x198DA00
    static UnityEngine::Vector3 get_one();
    // static public UnityEngine.Vector3 get_forward()
    // Offset: 0x1988538
    static UnityEngine::Vector3 get_forward();
    // static public UnityEngine.Vector3 get_back()
    // Offset: 0x198DA6C
    static UnityEngine::Vector3 get_back();
    // static public UnityEngine.Vector3 get_up()
    // Offset: 0x19883E4
    static UnityEngine::Vector3 get_up();
    // static public UnityEngine.Vector3 get_down()
    // Offset: 0x198DAD8
    static UnityEngine::Vector3 get_down();
    // static public UnityEngine.Vector3 get_left()
    // Offset: 0x198DB44
    static UnityEngine::Vector3 get_left();
    // static public UnityEngine.Vector3 get_right()
    // Offset: 0x1988290
    static UnityEngine::Vector3 get_right();
    // static public UnityEngine.Vector3 get_positiveInfinity()
    // Offset: 0x198DBB0
    static UnityEngine::Vector3 get_positiveInfinity();
    // public System.String ToString(System.String format)
    // Offset: 0xDFE114
    ::Il2CppString* ToString(::Il2CppString* format);
    // static private System.Void .cctor()
    // Offset: 0x198E088
    static void _cctor();
    // static private System.Void Slerp_Injected(ref UnityEngine.Vector3 a, ref UnityEngine.Vector3 b, System.Single t, out UnityEngine.Vector3 ret)
    // Offset: 0x198C4D0
    static void Slerp_Injected(UnityEngine::Vector3& a, UnityEngine::Vector3& b, float t, UnityEngine::Vector3& ret);
    // static private System.Void RotateTowards_Injected(ref UnityEngine.Vector3 current, ref UnityEngine.Vector3 target, System.Single maxRadiansDelta, System.Single maxMagnitudeDelta, out UnityEngine.Vector3 ret)
    // Offset: 0x198C6E8
    static void RotateTowards_Injected(UnityEngine::Vector3& current, UnityEngine::Vector3& target, float maxRadiansDelta, float maxMagnitudeDelta, UnityEngine::Vector3& ret);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDFE094
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xDFE09C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.String ToString()
    // Offset: 0xDFE10C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // UnityEngine.Vector3
  #pragma pack(pop)
  static check_size<sizeof(Vector3), 8 + sizeof(float)> __UnityEngine_Vector3SizeCheck;
  static_assert(sizeof(Vector3) == 0xC);
  // static public UnityEngine.Vector3 op_Addition(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
  // Offset: 0x1988E1C
  UnityEngine::Vector3 operator+(const UnityEngine::Vector3& a, const UnityEngine::Vector3& b);
  // static public UnityEngine.Vector3 op_Subtraction(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
  // Offset: 0x198DC1C
  UnityEngine::Vector3 operator-(const UnityEngine::Vector3& a, const UnityEngine::Vector3& b);
  // static public UnityEngine.Vector3 op_UnaryNegation(UnityEngine.Vector3 a)
  // Offset: 0x198DC2C
  UnityEngine::Vector3 operator-(const UnityEngine::Vector3& a);
  // static public UnityEngine.Vector3 op_Multiply(UnityEngine.Vector3 a, System.Single d)
  // Offset: 0x198DC3C
  UnityEngine::Vector3 operator*(const UnityEngine::Vector3& a, const float& d);
  // static public UnityEngine.Vector3 op_Multiply(System.Single d, UnityEngine.Vector3 a)
  // Offset: 0x198DC4C
  UnityEngine::Vector3 operator*(const float& d, const UnityEngine::Vector3& a);
  // static public UnityEngine.Vector3 op_Division(UnityEngine.Vector3 a, System.Single d)
  // Offset: 0x198CFCC
  UnityEngine::Vector3 operator/(const UnityEngine::Vector3& a, const float& d);
  // static public System.Boolean op_Equality(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
  // Offset: 0x198DC60
  bool operator ==(const UnityEngine::Vector3& lhs, const UnityEngine::Vector3& rhs);
  // static public System.Boolean op_Inequality(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
  // Offset: 0x198DC94
  bool operator !=(const UnityEngine::Vector3& lhs, const UnityEngine::Vector3& rhs);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Vector3, "UnityEngine", "Vector3");
