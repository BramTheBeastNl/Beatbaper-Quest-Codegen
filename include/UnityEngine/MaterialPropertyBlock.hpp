// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.MaterialPropertyBlock
  // [] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: D4BF6C
  // [NativeHeaderAttribute] Offset: D4BF6C
  // [NativeHeaderAttribute] Offset: D4BF6C
  // [NativeHeaderAttribute] Offset: D4BF6C
  class MaterialPropertyBlock : public ::Il2CppObject {
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: MaterialPropertyBlock
    MaterialPropertyBlock(System::IntPtr m_Ptr_ = {}) noexcept : m_Ptr{m_Ptr_} {}
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // private UnityEngine.Color GetColorImpl(System.Int32 name)
    // Offset: 0x168FFE8
    UnityEngine::Color GetColorImpl(int name);
    // private System.Void SetFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x16900AC
    void SetFloatImpl(int name, float value);
    // private System.Void SetVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x169010C
    void SetVectorImpl(int name, UnityEngine::Vector4 value);
    // private System.Void SetColorImpl(System.Int32 name, UnityEngine.Color value)
    // Offset: 0x16901CC
    void SetColorImpl(int name, UnityEngine::Color value);
    // private System.Void SetFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x169028C
    void SetFloatArrayImpl(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x16902F4
    void SetVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.IntPtr CreateImpl()
    // Offset: 0x169035C
    static System::IntPtr CreateImpl();
    // static private System.Void DestroyImpl(System.IntPtr mpb)
    // Offset: 0x1690390
    static void DestroyImpl(System::IntPtr mpb);
    // private System.Void Clear(System.Boolean keepMemory)
    // Offset: 0x16903D0
    void Clear(bool keepMemory);
    // public System.Void Clear()
    // Offset: 0x1690420
    void Clear();
    // private System.Void SetFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1690464
    void SetFloatArray(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1690588
    void SetVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // private System.Void Dispose()
    // Offset: 0x1690760
    void Dispose();
    // public System.Void SetFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x1690814
    void SetFloat(int nameID, float value);
    // public System.Void SetInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x1690874
    void SetInt(int nameID, int value);
    // public System.Void SetVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x16908D4
    void SetVector(int nameID, UnityEngine::Vector4 value);
    // public System.Void SetColor(System.String name, UnityEngine.Color value)
    // Offset: 0x16908D8
    void SetColor(::Il2CppString* name, UnityEngine::Color value);
    // public System.Void SetColor(System.Int32 nameID, UnityEngine.Color value)
    // Offset: 0x1690938
    void SetColor(int nameID, UnityEngine::Color value);
    // public System.Void SetFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x169093C
    void SetFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // public System.Void SetVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x16909B8
    void SetVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // public UnityEngine.Color GetColor(System.Int32 nameID)
    // Offset: 0x16909D0
    UnityEngine::Color GetColor(int nameID);
    // private System.Void GetColorImpl_Injected(System.Int32 name, out UnityEngine.Color ret)
    // Offset: 0x1690054
    void GetColorImpl_Injected(int name, UnityEngine::Color& ret);
    // private System.Void SetVectorImpl_Injected(System.Int32 name, ref UnityEngine.Vector4 value)
    // Offset: 0x1690174
    void SetVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // private System.Void SetColorImpl_Injected(System.Int32 name, ref UnityEngine.Color value)
    // Offset: 0x1690234
    void SetColorImpl_Injected(int name, UnityEngine::Color& value);
    // public System.Void .ctor()
    // Offset: 0x16906AC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialPropertyBlock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MaterialPropertyBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialPropertyBlock*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x16906F8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.MaterialPropertyBlock
  static check_size<sizeof(MaterialPropertyBlock), 16 + sizeof(System::IntPtr)> __UnityEngine_MaterialPropertyBlockSizeCheck;
  static_assert(sizeof(MaterialPropertyBlock) == 0x18);
}
#pragma pack(pop)
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::MaterialPropertyBlock*, "UnityEngine", "MaterialPropertyBlock");
