// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.MaterialPropertyBlock
  // [NativeHeaderAttribute] Offset: D8EB20
  // [NativeHeaderAttribute] Offset: D8EB20
  // [NativeHeaderAttribute] Offset: D8EB20
  // [NativeHeaderAttribute] Offset: D8EB20
  class MaterialPropertyBlock : public ::Il2CppObject {
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: MaterialPropertyBlock
    MaterialPropertyBlock(System::IntPtr m_Ptr_ = {}) noexcept : m_Ptr{m_Ptr_} {}
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // private UnityEngine.Color GetColorImpl(System.Int32 name)
    // Offset: 0x1C0FC60
    UnityEngine::Color GetColorImpl(int name);
    // private System.Void SetFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x1C0FD24
    void SetFloatImpl(int name, float value);
    // private System.Void SetVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x1C0FD84
    void SetVectorImpl(int name, UnityEngine::Vector4 value);
    // private System.Void SetColorImpl(System.Int32 name, UnityEngine.Color value)
    // Offset: 0x1C0FE44
    void SetColorImpl(int name, UnityEngine::Color value);
    // private System.Void SetFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1C0FF04
    void SetFloatArrayImpl(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1C0FF6C
    void SetVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.IntPtr CreateImpl()
    // Offset: 0x1C0FFD4
    static System::IntPtr CreateImpl();
    // static private System.Void DestroyImpl(System.IntPtr mpb)
    // Offset: 0x1C10008
    static void DestroyImpl(System::IntPtr mpb);
    // private System.Void Clear(System.Boolean keepMemory)
    // Offset: 0x1C10048
    void Clear(bool keepMemory);
    // public System.Void Clear()
    // Offset: 0x1C10098
    void Clear();
    // private System.Void SetFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x1C100DC
    void SetFloatArray(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x1C10200
    void SetVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // private System.Void Dispose()
    // Offset: 0x1C103D8
    void Dispose();
    // public System.Void SetFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x1C1048C
    void SetFloat(int nameID, float value);
    // public System.Void SetInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x1C104EC
    void SetInt(int nameID, int value);
    // public System.Void SetVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x1C1054C
    void SetVector(int nameID, UnityEngine::Vector4 value);
    // public System.Void SetColor(System.String name, UnityEngine.Color value)
    // Offset: 0x1C10550
    void SetColor(::Il2CppString* name, UnityEngine::Color value);
    // public System.Void SetColor(System.Int32 nameID, UnityEngine.Color value)
    // Offset: 0x1C105B0
    void SetColor(int nameID, UnityEngine::Color value);
    // public System.Void SetFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x1C105B4
    void SetFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // public System.Void SetVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x1C10630
    void SetVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // public UnityEngine.Color GetColor(System.Int32 nameID)
    // Offset: 0x1C10648
    UnityEngine::Color GetColor(int nameID);
    // private System.Void GetColorImpl_Injected(System.Int32 name, out UnityEngine.Color ret)
    // Offset: 0x1C0FCCC
    void GetColorImpl_Injected(int name, UnityEngine::Color& ret);
    // private System.Void SetVectorImpl_Injected(System.Int32 name, ref UnityEngine.Vector4 value)
    // Offset: 0x1C0FDEC
    void SetVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // private System.Void SetColorImpl_Injected(System.Int32 name, ref UnityEngine.Color value)
    // Offset: 0x1C0FEAC
    void SetColorImpl_Injected(int name, UnityEngine::Color& value);
    // public System.Void .ctor()
    // Offset: 0x1C10324
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialPropertyBlock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MaterialPropertyBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialPropertyBlock*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1C10370
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.MaterialPropertyBlock
  #pragma pack(pop)
  static check_size<sizeof(MaterialPropertyBlock), 16 + sizeof(System::IntPtr)> __UnityEngine_MaterialPropertyBlockSizeCheck;
  static_assert(sizeof(MaterialPropertyBlock) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::MaterialPropertyBlock*, "UnityEngine", "MaterialPropertyBlock");
// Writing MetadataGetter for method: MaterialPropertyBlock::GetColorImpl
// Il2CppName: GetColorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MaterialPropertyBlock::*)(int)>(&MaterialPropertyBlock::GetColorImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "GetColorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetFloatImpl
// Il2CppName: SetFloatImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, float)>(&MaterialPropertyBlock::SetFloatImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetFloatImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetVectorImpl
// Il2CppName: SetVectorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Vector4)>(&MaterialPropertyBlock::SetVectorImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetVectorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetColorImpl
// Il2CppName: SetColorImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Color)>(&MaterialPropertyBlock::SetColorImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetColorImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetFloatArrayImpl
// Il2CppName: SetFloatArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, ::Array<float>*, int)>(&MaterialPropertyBlock::SetFloatArrayImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetFloatArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetVectorArrayImpl
// Il2CppName: SetVectorArrayImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, ::Array<UnityEngine::Vector4>*, int)>(&MaterialPropertyBlock::SetVectorArrayImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetVectorArrayImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector4>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::CreateImpl
// Il2CppName: CreateImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&MaterialPropertyBlock::CreateImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "CreateImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::DestroyImpl
// Il2CppName: DestroyImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&MaterialPropertyBlock::DestroyImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "DestroyImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(bool)>(&MaterialPropertyBlock::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)()>(&MaterialPropertyBlock::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetFloatArray
// Il2CppName: SetFloatArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, ::Array<float>*, int)>(&MaterialPropertyBlock::SetFloatArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetFloatArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetVectorArray
// Il2CppName: SetVectorArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, ::Array<UnityEngine::Vector4>*, int)>(&MaterialPropertyBlock::SetVectorArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetVectorArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector4>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)()>(&MaterialPropertyBlock::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetFloat
// Il2CppName: SetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, float)>(&MaterialPropertyBlock::SetFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetInt
// Il2CppName: SetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, int)>(&MaterialPropertyBlock::SetInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetVector
// Il2CppName: SetVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Vector4)>(&MaterialPropertyBlock::SetVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(::Il2CppString*, UnityEngine::Color)>(&MaterialPropertyBlock::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Color)>(&MaterialPropertyBlock::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetFloatArray
// Il2CppName: SetFloatArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, System::Collections::Generic::List_1<float>*)>(&MaterialPropertyBlock::SetFloatArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetFloatArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<float>*>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetVectorArray
// Il2CppName: SetVectorArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, ::Array<UnityEngine::Vector4>*)>(&MaterialPropertyBlock::SetVectorArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetVectorArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector4>*>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MaterialPropertyBlock::*)(int)>(&MaterialPropertyBlock::GetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::GetColorImpl_Injected
// Il2CppName: GetColorImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Color&)>(&MaterialPropertyBlock::GetColorImpl_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "GetColorImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetVectorImpl_Injected
// Il2CppName: SetVectorImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Vector4&)>(&MaterialPropertyBlock::SetVectorImpl_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetVectorImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::SetColorImpl_Injected
// Il2CppName: SetColorImpl_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)(int, UnityEngine::Color&)>(&MaterialPropertyBlock::SetColorImpl_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "SetColorImpl_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)()>(&MaterialPropertyBlock::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)()>(&MaterialPropertyBlock::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MaterialPropertyBlock::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MaterialPropertyBlock::*)()>(&MaterialPropertyBlock::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MaterialPropertyBlock*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
