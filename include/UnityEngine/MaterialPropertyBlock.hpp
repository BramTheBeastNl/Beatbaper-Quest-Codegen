// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector4
  struct Vector4;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.MaterialPropertyBlock
  class MaterialPropertyBlock : public ::Il2CppObject {
    public:
    // System.IntPtr m_Ptr
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // private UnityEngine.Color GetColorImpl(System.Int32 name)
    // Offset: 0x179A168
    UnityEngine::Color GetColorImpl(int name);
    // private System.Void SetFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x179A22C
    void SetFloatImpl(int name, float value);
    // private System.Void SetVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x179A28C
    void SetVectorImpl(int name, UnityEngine::Vector4 value);
    // private System.Void SetColorImpl(System.Int32 name, UnityEngine.Color value)
    // Offset: 0x179A34C
    void SetColorImpl(int name, UnityEngine::Color value);
    // private System.Void SetFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x179A40C
    void SetFloatArrayImpl(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x179A474
    void SetVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.IntPtr CreateImpl()
    // Offset: 0x179A4DC
    static System::IntPtr CreateImpl();
    // static private System.Void DestroyImpl(System.IntPtr mpb)
    // Offset: 0x179A510
    static void DestroyImpl(System::IntPtr mpb);
    // private System.Void Clear(System.Boolean keepMemory)
    // Offset: 0x179A550
    void Clear(bool keepMemory);
    // public System.Void Clear()
    // Offset: 0x179A5A0
    void Clear();
    // private System.Void SetFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x179A5E4
    void SetFloatArray(int name, ::Array<float>* values, int count);
    // private System.Void SetVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x179A708
    void SetVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // private System.Void Dispose()
    // Offset: 0x179A8E0
    void Dispose();
    // public System.Void SetFloat(System.String name, System.Single value)
    // Offset: 0x179A994
    void SetFloat(::Il2CppString* name, float value);
    // public System.Void SetFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x179AA00
    void SetFloat(int nameID, float value);
    // public System.Void SetInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x179AA60
    void SetInt(int nameID, int value);
    // public System.Void SetVector(System.String name, UnityEngine.Vector4 value)
    // Offset: 0x179AAC0
    void SetVector(::Il2CppString* name, UnityEngine::Vector4 value);
    // public System.Void SetVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x179AB20
    void SetVector(int nameID, UnityEngine::Vector4 value);
    // public System.Void SetColor(System.String name, UnityEngine.Color value)
    // Offset: 0x179AB24
    void SetColor(::Il2CppString* name, UnityEngine::Color value);
    // public System.Void SetColor(System.Int32 nameID, UnityEngine.Color value)
    // Offset: 0x179AB84
    void SetColor(int nameID, UnityEngine::Color value);
    // public System.Void SetFloatArray(System.Int32 nameID, System.Collections.Generic.List`1<System.Single> values)
    // Offset: 0x179AB88
    void SetFloatArray(int nameID, System::Collections::Generic::List_1<float>* values);
    // public System.Void SetVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x179AC04
    void SetVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // public UnityEngine.Color GetColor(System.Int32 nameID)
    // Offset: 0x179AC1C
    UnityEngine::Color GetColor(int nameID);
    // private System.Void GetColorImpl_Injected(System.Int32 name, out UnityEngine.Color ret)
    // Offset: 0x179A1D4
    void GetColorImpl_Injected(int name, UnityEngine::Color& ret);
    // private System.Void SetVectorImpl_Injected(System.Int32 name, ref UnityEngine.Vector4 value)
    // Offset: 0x179A2F4
    void SetVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // private System.Void SetColorImpl_Injected(System.Int32 name, ref UnityEngine.Color value)
    // Offset: 0x179A3B4
    void SetColorImpl_Injected(int name, UnityEngine::Color& value);
    // public System.Void .ctor()
    // Offset: 0x179A82C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static MaterialPropertyBlock* New_ctor();
    // protected override System.Void Finalize()
    // Offset: 0x179A878
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.MaterialPropertyBlock
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::MaterialPropertyBlock*, "UnityEngine", "MaterialPropertyBlock");
#pragma pack(pop)
