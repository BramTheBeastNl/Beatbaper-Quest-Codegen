// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: UnityEngine.Experimental.Rendering.TextureCreationFlags
#include "UnityEngine/Experimental/Rendering/TextureCreationFlags.hpp"
// Including type: UnityEngine.Experimental.Rendering.DefaultFormat
#include "UnityEngine/Experimental/Rendering/DefaultFormat.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Texture2D
  // [UsedByNativeCodeAttribute] Offset: D8F26C
  // [NativeHeaderAttribute] Offset: D8F26C
  // [NativeHeaderAttribute] Offset: D8F26C
  class Texture2D : public UnityEngine::Texture {
    public:
    // Creating value type constructor for type: Texture2D
    Texture2D() noexcept {}
    // public UnityEngine.TextureFormat get_format()
    // Offset: 0x22FF53C
    UnityEngine::TextureFormat get_format();
    // static public UnityEngine.Texture2D get_whiteTexture()
    // Offset: 0x22FF57C
    static UnityEngine::Texture2D* get_whiteTexture();
    // static public UnityEngine.Texture2D get_blackTexture()
    // Offset: 0x22FF5B0
    static UnityEngine::Texture2D* get_blackTexture();
    // static public UnityEngine.Texture2D get_redTexture()
    // Offset: 0x22FF5E4
    static UnityEngine::Texture2D* get_redTexture();
    // static public UnityEngine.Texture2D get_grayTexture()
    // Offset: 0x22FF618
    static UnityEngine::Texture2D* get_grayTexture();
    // static public UnityEngine.Texture2D get_linearGrayTexture()
    // Offset: 0x22FF64C
    static UnityEngine::Texture2D* get_linearGrayTexture();
    // static public UnityEngine.Texture2D get_normalTexture()
    // Offset: 0x22FF680
    static UnityEngine::Texture2D* get_normalTexture();
    // public System.Void Compress(System.Boolean highQuality)
    // Offset: 0x22FF6B4
    void Compress(bool highQuality);
    // static private System.Boolean Internal_CreateImpl(UnityEngine.Texture2D mono, System.Int32 w, System.Int32 h, System.Int32 mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.IntPtr nativeTex)
    // Offset: 0x22FF704
    static bool Internal_CreateImpl(UnityEngine::Texture2D* mono, int w, int h, int mipCount, UnityEngine::Experimental::Rendering::GraphicsFormat format, UnityEngine::Experimental::Rendering::TextureCreationFlags flags, System::IntPtr nativeTex);
    // static private System.Void Internal_Create(UnityEngine.Texture2D mono, System.Int32 w, System.Int32 h, System.Int32 mipCount, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.IntPtr nativeTex)
    // Offset: 0x22FF78C
    static void Internal_Create(UnityEngine::Texture2D* mono, int w, int h, int mipCount, UnityEngine::Experimental::Rendering::GraphicsFormat format, UnityEngine::Experimental::Rendering::TextureCreationFlags flags, System::IntPtr nativeTex);
    // private System.Void ApplyImpl(System.Boolean updateMipmaps, System.Boolean makeNoLongerReadable)
    // Offset: 0x22FF8B8
    void ApplyImpl(bool updateMipmaps, bool makeNoLongerReadable);
    // private System.Boolean ResizeImpl(System.Int32 width, System.Int32 height)
    // Offset: 0x22FF910
    bool ResizeImpl(int width, int height);
    // private System.Void SetPixelImpl(System.Int32 image, System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0x22FF968
    void SetPixelImpl(int image, int x, int y, UnityEngine::Color color);
    // private UnityEngine.Color GetPixelImpl(System.Int32 image, System.Int32 x, System.Int32 y)
    // Offset: 0x22FFA58
    UnityEngine::Color GetPixelImpl(int image, int x, int y);
    // private UnityEngine.Color GetPixelBilinearImpl(System.Int32 image, System.Single u, System.Single v)
    // Offset: 0x22FFB4C
    UnityEngine::Color GetPixelBilinearImpl(int image, float u, float v);
    // private System.Boolean ResizeWithFormatImpl(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean hasMipMap)
    // Offset: 0x22FFC40
    bool ResizeWithFormatImpl(int width, int height, UnityEngine::TextureFormat format, bool hasMipMap);
    // private System.Void ReadPixelsImpl(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x22FFCB0
    void ReadPixelsImpl(UnityEngine::Rect source, int destX, int destY, bool recalculateMipMaps);
    // private System.Void SetPixelsImpl(System.Int32 x, System.Int32 y, System.Int32 w, System.Int32 h, UnityEngine.Color[] pixel, System.Int32 miplevel, System.Int32 frame)
    // Offset: 0x22FFDA0
    void SetPixelsImpl(int x, int y, int w, int h, ::Array<UnityEngine::Color>* pixel, int miplevel, int frame);
    // private System.Boolean LoadRawTextureDataImpl(System.IntPtr data, System.Int32 size)
    // Offset: 0x22FFE38
    bool LoadRawTextureDataImpl(System::IntPtr data, int size);
    // private System.Boolean LoadRawTextureDataImplArray(System.Byte[] data)
    // Offset: 0x22FFE90
    bool LoadRawTextureDataImplArray(::Array<uint8_t>* data);
    // private System.Boolean SetPixelDataImplArray(System.Array data, System.Int32 mipLevel, System.Int32 elementSize, System.Int32 dataArraySize, System.Int32 sourceDataStartIndex)
    // Offset: 0x22FFEE0
    bool SetPixelDataImplArray(System::Array* data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
    // private System.Boolean SetPixelDataImpl(System.IntPtr data, System.Int32 mipLevel, System.Int32 elementSize, System.Int32 dataArraySize, System.Int32 sourceDataStartIndex)
    // Offset: 0x22FFF60
    bool SetPixelDataImpl(System::IntPtr data, int mipLevel, int elementSize, int dataArraySize, int sourceDataStartIndex);
    // private System.IntPtr GetWritableImageData(System.Int32 frame)
    // Offset: 0x22FFFE0
    System::IntPtr GetWritableImageData(int frame);
    // private System.Int64 GetRawImageDataSize()
    // Offset: 0x2300030
    int64_t GetRawImageDataSize();
    // static private System.Void GenerateAtlasImpl(UnityEngine.Vector2[] sizes, System.Int32 padding, System.Int32 atlasSize, out UnityEngine.Rect[] rect)
    // Offset: 0x2300070
    static void GenerateAtlasImpl(::Array<UnityEngine::Vector2>* sizes, int padding, int atlasSize, ::Array<UnityEngine::Rect>*& rect);
    // System.Boolean get_isPreProcessed()
    // Offset: 0x23000D8
    bool get_isPreProcessed();
    // public System.Boolean get_streamingMipmaps()
    // Offset: 0x2300118
    bool get_streamingMipmaps();
    // public System.Int32 get_streamingMipmapsPriority()
    // Offset: 0x2300158
    int get_streamingMipmapsPriority();
    // public System.Int32 get_requestedMipmapLevel()
    // Offset: 0x2300198
    int get_requestedMipmapLevel();
    // public System.Void set_requestedMipmapLevel(System.Int32 value)
    // Offset: 0x23001D8
    void set_requestedMipmapLevel(int value);
    // public System.Int32 get_minimumMipmapLevel()
    // Offset: 0x2300228
    int get_minimumMipmapLevel();
    // public System.Void set_minimumMipmapLevel(System.Int32 value)
    // Offset: 0x2300268
    void set_minimumMipmapLevel(int value);
    // System.Boolean get_loadAllMips()
    // Offset: 0x23002B8
    bool get_loadAllMips();
    // System.Void set_loadAllMips(System.Boolean value)
    // Offset: 0x23002F8
    void set_loadAllMips(bool value);
    // public System.Int32 get_calculatedMipmapLevel()
    // Offset: 0x2300348
    int get_calculatedMipmapLevel();
    // public System.Int32 get_desiredMipmapLevel()
    // Offset: 0x2300388
    int get_desiredMipmapLevel();
    // public System.Int32 get_loadingMipmapLevel()
    // Offset: 0x23003C8
    int get_loadingMipmapLevel();
    // public System.Int32 get_loadedMipmapLevel()
    // Offset: 0x2300408
    int get_loadedMipmapLevel();
    // public System.Void ClearRequestedMipmapLevel()
    // Offset: 0x2300448
    void ClearRequestedMipmapLevel();
    // public System.Boolean IsRequestedMipmapLevelLoaded()
    // Offset: 0x2300488
    bool IsRequestedMipmapLevelLoaded();
    // public System.Void ClearMinimumMipmapLevel()
    // Offset: 0x23004C8
    void ClearMinimumMipmapLevel();
    // public System.Void UpdateExternalTexture(System.IntPtr nativeTex)
    // Offset: 0x2300508
    void UpdateExternalTexture(System::IntPtr nativeTex);
    // private System.Void SetAllPixels32(UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x2300558
    void SetAllPixels32(::Array<UnityEngine::Color32>* colors, int miplevel);
    // private System.Void SetBlockOfPixels32(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x23005B0
    void SetBlockOfPixels32(int x, int y, int blockWidth, int blockHeight, ::Array<UnityEngine::Color32>* colors, int miplevel);
    // public System.Byte[] GetRawTextureData()
    // Offset: 0x2300638
    ::Array<uint8_t>* GetRawTextureData();
    // public UnityEngine.Color[] GetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, System.Int32 miplevel)
    // Offset: 0x2300678
    ::Array<UnityEngine::Color>* GetPixels(int x, int y, int blockWidth, int blockHeight, int miplevel);
    // public UnityEngine.Color[] GetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight)
    // Offset: 0x23006F8
    ::Array<UnityEngine::Color>* GetPixels(int x, int y, int blockWidth, int blockHeight);
    // public UnityEngine.Color32[] GetPixels32(System.Int32 miplevel)
    // Offset: 0x230076C
    ::Array<UnityEngine::Color32>* GetPixels32(int miplevel);
    // public UnityEngine.Color32[] GetPixels32()
    // Offset: 0x23007BC
    ::Array<UnityEngine::Color32>* GetPixels32();
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding, System.Int32 maximumAtlasSize, System.Boolean makeNoLongerReadable)
    // Offset: 0x2300800
    ::Array<UnityEngine::Rect>* PackTextures(::Array<UnityEngine::Texture2D*>* textures, int padding, int maximumAtlasSize, bool makeNoLongerReadable);
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding, System.Int32 maximumAtlasSize)
    // Offset: 0x2300870
    ::Array<UnityEngine::Rect>* PackTextures(::Array<UnityEngine::Texture2D*>* textures, int padding, int maximumAtlasSize);
    // public UnityEngine.Rect[] PackTextures(UnityEngine.Texture2D[] textures, System.Int32 padding)
    // Offset: 0x23008DC
    ::Array<UnityEngine::Rect>* PackTextures(::Array<UnityEngine::Texture2D*>* textures, int padding);
    // System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags, System.Int32 mipCount, System.IntPtr nativeTex)
    // Offset: 0x230093C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::Experimental::Rendering::GraphicsFormat format, UnityEngine::Experimental::Rendering::TextureCreationFlags flags, int mipCount, System::IntPtr nativeTex) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, flags, mipCount, nativeTex)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.DefaultFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags)
    // Offset: 0x2300A1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::Experimental::Rendering::DefaultFormat format, UnityEngine::Experimental::Rendering::TextureCreationFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, flags)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, UnityEngine.Experimental.Rendering.TextureCreationFlags flags)
    // Offset: 0x2300A94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::Experimental::Rendering::GraphicsFormat format, UnityEngine::Experimental::Rendering::TextureCreationFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, flags)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.Experimental.Rendering.GraphicsFormat format, System.Int32 mipCount, UnityEngine.Experimental.Rendering.TextureCreationFlags flags)
    // Offset: 0x2300B38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::Experimental::Rendering::GraphicsFormat format, int mipCount, UnityEngine::Experimental::Rendering::TextureCreationFlags flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, format, mipCount, flags)));
    }
    // System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Int32 mipCount, System.Boolean linear, System.IntPtr nativeTex)
    // Offset: 0x2300BC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::TextureFormat textureFormat, int mipCount, bool linear, System::IntPtr nativeTex) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipCount, linear, nativeTex)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Int32 mipCount, System.Boolean linear)
    // Offset: 0x2300CD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::TextureFormat textureFormat, int mipCount, bool linear) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipCount, linear)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain, System.Boolean linear)
    // Offset: 0x2300D58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::TextureFormat textureFormat, bool mipChain, bool linear) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain, linear)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat textureFormat, System.Boolean mipChain)
    // Offset: 0x2300DF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height, UnityEngine::TextureFormat textureFormat, bool mipChain) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height, textureFormat, mipChain)));
    }
    // public System.Void .ctor(System.Int32 width, System.Int32 height)
    // Offset: 0x2300E7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Texture2D* New_ctor(int width, int height) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Texture2D*, creationType>(width, height)));
    }
    // static public UnityEngine.Texture2D CreateExternalTexture(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean mipChain, System.Boolean linear, System.IntPtr nativeTex)
    // Offset: 0x2300F10
    static UnityEngine::Texture2D* CreateExternalTexture(int width, int height, UnityEngine::TextureFormat format, bool mipChain, bool linear, System::IntPtr nativeTex);
    // public System.Void SetPixel(System.Int32 x, System.Int32 y, UnityEngine.Color color)
    // Offset: 0x230100C
    void SetPixel(int x, int y, UnityEngine::Color color);
    // public System.Void SetPixel(System.Int32 x, System.Int32 y, UnityEngine.Color color, System.Int32 mipLevel)
    // Offset: 0x23010C8
    void SetPixel(int x, int y, UnityEngine::Color color, int mipLevel);
    // public System.Void SetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color[] colors, System.Int32 miplevel)
    // Offset: 0x2301190
    void SetPixels(int x, int y, int blockWidth, int blockHeight, ::Array<UnityEngine::Color>* colors, int miplevel);
    // public System.Void SetPixels(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color[] colors)
    // Offset: 0x230126C
    void SetPixels(int x, int y, int blockWidth, int blockHeight, ::Array<UnityEngine::Color>* colors);
    // public System.Void SetPixels(UnityEngine.Color[] colors, System.Int32 miplevel)
    // Offset: 0x2301274
    void SetPixels(::Array<UnityEngine::Color>* colors, int miplevel);
    // public System.Void SetPixels(UnityEngine.Color[] colors)
    // Offset: 0x23012F0
    void SetPixels(::Array<UnityEngine::Color>* colors);
    // public UnityEngine.Color GetPixel(System.Int32 x, System.Int32 y)
    // Offset: 0x2301358
    UnityEngine::Color GetPixel(int x, int y);
    // public UnityEngine.Color GetPixel(System.Int32 x, System.Int32 y, System.Int32 mipLevel)
    // Offset: 0x23013E4
    UnityEngine::Color GetPixel(int x, int y, int mipLevel);
    // public UnityEngine.Color GetPixelBilinear(System.Single u, System.Single v)
    // Offset: 0x230147C
    UnityEngine::Color GetPixelBilinear(float u, float v);
    // public UnityEngine.Color GetPixelBilinear(System.Single u, System.Single v, System.Int32 mipLevel)
    // Offset: 0x2301508
    UnityEngine::Color GetPixelBilinear(float u, float v, int mipLevel);
    // public System.Void LoadRawTextureData(System.IntPtr data, System.Int32 size)
    // Offset: 0x23015A0
    void LoadRawTextureData(System::IntPtr data, int size);
    // public System.Void LoadRawTextureData(System.Byte[] data)
    // Offset: 0x23016E4
    void LoadRawTextureData(::Array<uint8_t>* data);
    // public System.Void LoadRawTextureData(Unity.Collections.NativeArray`1<T> data)
    // Offset: 0xFFFFFFFF
    template<class T>
    void LoadRawTextureData(Unity::Collections::NativeArray_1<T> data) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::LoadRawTextureData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRawTextureData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data);
    }
    // public System.Void SetPixelData(T[] data, System.Int32 mipLevel, System.Int32 sourceDataStartIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetPixelData(::Array<T>* data, int mipLevel, int sourceDataStartIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::SetPixelData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPixelData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(mipLevel), ::il2cpp_utils::ExtractType(sourceDataStartIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, mipLevel, sourceDataStartIndex);
    }
    // public System.Void SetPixelData(Unity.Collections.NativeArray`1<T> data, System.Int32 mipLevel, System.Int32 sourceDataStartIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetPixelData(Unity::Collections::NativeArray_1<T> data, int mipLevel, int sourceDataStartIndex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::SetPixelData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPixelData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(mipLevel), ::il2cpp_utils::ExtractType(sourceDataStartIndex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, mipLevel, sourceDataStartIndex);
    }
    // public Unity.Collections.NativeArray`1<T> GetRawTextureData()
    // Offset: 0xFFFFFFFF
    template<class T>
    Unity::Collections::NativeArray_1<T> GetRawTextureData() {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Texture2D::GetRawTextureData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawTextureData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Unity::Collections::NativeArray_1<T>, false>(this, ___generic__method);
    }
    // public System.Void Apply(System.Boolean updateMipmaps, System.Boolean makeNoLongerReadable)
    // Offset: 0x2301814
    void Apply(bool updateMipmaps, bool makeNoLongerReadable);
    // public System.Void Apply(System.Boolean updateMipmaps)
    // Offset: 0x23018BC
    void Apply(bool updateMipmaps);
    // public System.Void Apply()
    // Offset: 0x23018C8
    void Apply();
    // public System.Boolean Resize(System.Int32 width, System.Int32 height)
    // Offset: 0x23018D4
    bool Resize(int width, int height);
    // public System.Boolean Resize(System.Int32 width, System.Int32 height, UnityEngine.TextureFormat format, System.Boolean hasMipMap)
    // Offset: 0x230197C
    bool Resize(int width, int height, UnityEngine::TextureFormat format, bool hasMipMap);
    // public System.Void ReadPixels(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x2301A3C
    void ReadPixels(UnityEngine::Rect source, int destX, int destY, bool recalculateMipMaps);
    // public System.Void ReadPixels(UnityEngine.Rect source, System.Int32 destX, System.Int32 destY)
    // Offset: 0x2301B04
    void ReadPixels(UnityEngine::Rect source, int destX, int destY);
    // static public System.Boolean GenerateAtlas(UnityEngine.Vector2[] sizes, System.Int32 padding, System.Int32 atlasSize, System.Collections.Generic.List`1<UnityEngine.Rect> results)
    // Offset: 0x2301B0C
    static bool GenerateAtlas(::Array<UnityEngine::Vector2>* sizes, int padding, int atlasSize, System::Collections::Generic::List_1<UnityEngine::Rect>* results);
    // public System.Void SetPixels32(UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x2301C9C
    void SetPixels32(::Array<UnityEngine::Color32>* colors, int miplevel);
    // public System.Void SetPixels32(UnityEngine.Color32[] colors)
    // Offset: 0x2301CF4
    void SetPixels32(::Array<UnityEngine::Color32>* colors);
    // public System.Void SetPixels32(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color32[] colors, System.Int32 miplevel)
    // Offset: 0x2301D48
    void SetPixels32(int x, int y, int blockWidth, int blockHeight, ::Array<UnityEngine::Color32>* colors, int miplevel);
    // public System.Void SetPixels32(System.Int32 x, System.Int32 y, System.Int32 blockWidth, System.Int32 blockHeight, UnityEngine.Color32[] colors)
    // Offset: 0x2301DD0
    void SetPixels32(int x, int y, int blockWidth, int blockHeight, ::Array<UnityEngine::Color32>* colors);
    // public UnityEngine.Color[] GetPixels(System.Int32 miplevel)
    // Offset: 0x2301E54
    ::Array<UnityEngine::Color>* GetPixels(int miplevel);
    // public UnityEngine.Color[] GetPixels()
    // Offset: 0x2301EF4
    ::Array<UnityEngine::Color>* GetPixels();
    // private System.Void SetPixelImpl_Injected(System.Int32 image, System.Int32 x, System.Int32 y, ref UnityEngine.Color color)
    // Offset: 0x22FF9E8
    void SetPixelImpl_Injected(int image, int x, int y, UnityEngine::Color& color);
    // private System.Void GetPixelImpl_Injected(System.Int32 image, System.Int32 x, System.Int32 y, out UnityEngine.Color ret)
    // Offset: 0x22FFADC
    void GetPixelImpl_Injected(int image, int x, int y, UnityEngine::Color& ret);
    // private System.Void GetPixelBilinearImpl_Injected(System.Int32 image, System.Single u, System.Single v, out UnityEngine.Color ret)
    // Offset: 0x22FFBD0
    void GetPixelBilinearImpl_Injected(int image, float u, float v, UnityEngine::Color& ret);
    // private System.Void ReadPixelsImpl_Injected(ref UnityEngine.Rect source, System.Int32 destX, System.Int32 destY, System.Boolean recalculateMipMaps)
    // Offset: 0x22FFD30
    void ReadPixelsImpl_Injected(UnityEngine::Rect& source, int destX, int destY, bool recalculateMipMaps);
    // public override System.Boolean get_isReadable()
    // Offset: 0x22FF878
    // Implemented from: UnityEngine.Texture
    // Base method: System.Boolean Texture::get_isReadable()
    bool get_isReadable();
  }; // UnityEngine.Texture2D
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Texture2D*, "UnityEngine", "Texture2D");
