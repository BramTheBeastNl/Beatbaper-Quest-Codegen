// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Playables.IPlayable
#include "UnityEngine/Playables/IPlayable.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Playables.PlayableHandle
#include "UnityEngine/Playables/PlayableHandle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: Playable
  struct Playable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: UnityEngine.Animations
namespace UnityEngine::Animations {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Animations.AnimationClipPlayable
  // [] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: CBD81C
  // [RequiredByNativeCodeAttribute] Offset: CBD81C
  // [NativeHeaderAttribute] Offset: CBD81C
  // [StaticAccessorAttribute] Offset: CBD81C
  struct AnimationClipPlayable/*, public System::ValueType, public UnityEngine::Playables::IPlayable, public System::IEquatable_1<UnityEngine::Animations::AnimationClipPlayable>*/ {
    public:
    // private UnityEngine.Playables.PlayableHandle m_Handle
    // Size: 0xC
    // Offset: 0x0
    UnityEngine::Playables::PlayableHandle m_Handle;
    // Field size check
    static_assert(sizeof(UnityEngine::Playables::PlayableHandle) == 0xC);
    // Creating value type constructor for type: AnimationClipPlayable
    constexpr AnimationClipPlayable(UnityEngine::Playables::PlayableHandle m_Handle_ = {}) noexcept : m_Handle{m_Handle_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::Playables::IPlayable
    operator UnityEngine::Playables::IPlayable() noexcept {
      return *reinterpret_cast<UnityEngine::Playables::IPlayable*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Animations::AnimationClipPlayable>
    operator System::IEquatable_1<UnityEngine::Animations::AnimationClipPlayable>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Animations::AnimationClipPlayable>*>(this);
    }
    // Creating conversion operator: operator UnityEngine::Playables::PlayableHandle
    constexpr operator UnityEngine::Playables::PlayableHandle() const noexcept {
      return m_Handle;
    }
    // static public UnityEngine.Animations.AnimationClipPlayable Create(UnityEngine.Playables.PlayableGraph graph, UnityEngine.AnimationClip clip)
    // Offset: 0x2140248
    static UnityEngine::Animations::AnimationClipPlayable Create(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip);
    // static private UnityEngine.Playables.PlayableHandle CreateHandle(UnityEngine.Playables.PlayableGraph graph, UnityEngine.AnimationClip clip)
    // Offset: 0x2140284
    static UnityEngine::Playables::PlayableHandle CreateHandle(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip);
    // System.Void .ctor(UnityEngine.Playables.PlayableHandle handle)
    // Offset: 0xE14918
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  AnimationClipPlayable(UnityEngine::Playables::PlayableHandle handle)
    // public UnityEngine.Playables.PlayableHandle GetHandle()
    // Offset: 0xE14920
    UnityEngine::Playables::PlayableHandle GetHandle_NEW();
    // public System.Boolean Equals(UnityEngine.Animations.AnimationClipPlayable other)
    // Offset: 0xE1492C
    bool Equals_NEW(UnityEngine::Animations::AnimationClipPlayable other);
    // public System.Void SetApplyFootIK(System.Boolean value)
    // Offset: 0xE14934
    void SetApplyFootIK(bool value);
    // System.Void SetRemoveStartOffset(System.Boolean value)
    // Offset: 0xE14984
    void SetRemoveStartOffset(bool value);
    // System.Void SetOverrideLoopTime(System.Boolean value)
    // Offset: 0xE149D4
    void SetOverrideLoopTime(bool value);
    // System.Void SetLoopTime(System.Boolean value)
    // Offset: 0xE14A24
    void SetLoopTime(bool value);
    // static private System.Boolean CreateHandleInternal(UnityEngine.Playables.PlayableGraph graph, UnityEngine.AnimationClip clip, ref UnityEngine.Playables.PlayableHandle handle)
    // Offset: 0x2140404
    static bool CreateHandleInternal(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip, UnityEngine::Playables::PlayableHandle& handle);
    // static private System.Void SetApplyFootIKInternal(ref UnityEngine.Playables.PlayableHandle handle, System.Boolean value)
    // Offset: 0x2140584
    static void SetApplyFootIKInternal(UnityEngine::Playables::PlayableHandle& handle, bool value);
    // static private System.Void SetRemoveStartOffsetInternal(ref UnityEngine.Playables.PlayableHandle handle, System.Boolean value)
    // Offset: 0x2140624
    static void SetRemoveStartOffsetInternal(UnityEngine::Playables::PlayableHandle& handle, bool value);
    // static private System.Void SetOverrideLoopTimeInternal(ref UnityEngine.Playables.PlayableHandle handle, System.Boolean value)
    // Offset: 0x21406C4
    static void SetOverrideLoopTimeInternal(UnityEngine::Playables::PlayableHandle& handle, bool value);
    // static private System.Void SetLoopTimeInternal(ref UnityEngine.Playables.PlayableHandle handle, System.Boolean value)
    // Offset: 0x2140764
    static void SetLoopTimeInternal(UnityEngine::Playables::PlayableHandle& handle, bool value);
    // static private System.Boolean CreateHandleInternal_Injected(ref UnityEngine.Playables.PlayableGraph graph, UnityEngine.AnimationClip clip, ref UnityEngine.Playables.PlayableHandle handle)
    // Offset: 0x21407B4
    static bool CreateHandleInternal_Injected(UnityEngine::Playables::PlayableGraph& graph, UnityEngine::AnimationClip* clip, UnityEngine::Playables::PlayableHandle& handle);
  }; // UnityEngine.Animations.AnimationClipPlayable
  #pragma pack(pop)
  static check_size<sizeof(AnimationClipPlayable), 0 + sizeof(UnityEngine::Playables::PlayableHandle)> __UnityEngine_Animations_AnimationClipPlayableSizeCheck;
  static_assert(sizeof(AnimationClipPlayable) == 0xC);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Animations::AnimationClipPlayable, "UnityEngine.Animations", "AnimationClipPlayable");
