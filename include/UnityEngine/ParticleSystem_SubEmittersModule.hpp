// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/SubEmittersModule
  struct ParticleSystem::SubEmittersModule/*, public System::ValueType*/ {
    public:
    // UnityEngine.ParticleSystem m_ParticleSystem
    // Size: 0x8
    // Offset: 0x0
    UnityEngine::ParticleSystem* m_ParticleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // Creating value type constructor for type: SubEmittersModule
    constexpr SubEmittersModule(UnityEngine::ParticleSystem* m_ParticleSystem_ = {}) noexcept : m_ParticleSystem{m_ParticleSystem_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator UnityEngine::ParticleSystem*
    constexpr operator UnityEngine::ParticleSystem*() const noexcept {
      return m_ParticleSystem;
    }
    // System.Void .ctor(UnityEngine.ParticleSystem particleSystem)
    // Offset: 0xF2382C
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  SubEmittersModule(UnityEngine::ParticleSystem* particleSystem)
    // public System.Int32 get_subEmittersCount()
    // Offset: 0xF23834
    int get_subEmittersCount();
    // public UnityEngine.ParticleSystem GetSubEmitterSystem(System.Int32 index)
    // Offset: 0xF23874
    UnityEngine::ParticleSystem* GetSubEmitterSystem(int index);
    // static private System.Int32 get_subEmittersCount_Injected(ref UnityEngine.ParticleSystem/SubEmittersModule _unity_self)
    // Offset: 0x23CE998
    static int get_subEmittersCount_Injected(UnityEngine::ParticleSystem::SubEmittersModule& _unity_self);
    // static private UnityEngine.ParticleSystem GetSubEmitterSystem_Injected(ref UnityEngine.ParticleSystem/SubEmittersModule _unity_self, System.Int32 index)
    // Offset: 0x23CEA28
    static UnityEngine::ParticleSystem* GetSubEmitterSystem_Injected(UnityEngine::ParticleSystem::SubEmittersModule& _unity_self, int index);
  }; // UnityEngine.ParticleSystem/SubEmittersModule
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::SubEmittersModule), 0 + sizeof(UnityEngine::ParticleSystem*)> __UnityEngine_ParticleSystem_SubEmittersModuleSizeCheck;
  static_assert(sizeof(ParticleSystem::SubEmittersModule) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ParticleSystem::SubEmittersModule, "UnityEngine", "ParticleSystem/SubEmittersModule");
