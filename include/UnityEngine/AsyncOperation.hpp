// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.YieldInstruction
#include "UnityEngine/YieldInstruction.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.AsyncOperation
  // [NativeHeaderAttribute] Offset: D8FEA0
  // [NativeHeaderAttribute] Offset: D8FEA0
  // [RequiredByNativeCodeAttribute] Offset: D8FEA0
  class AsyncOperation : public UnityEngine::YieldInstruction {
    public:
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.Action`1<UnityEngine.AsyncOperation> m_completeCallback
    // Size: 0x8
    // Offset: 0x18
    System::Action_1<UnityEngine::AsyncOperation*>* m_completeCallback;
    // Field size check
    static_assert(sizeof(System::Action_1<UnityEngine::AsyncOperation*>*) == 0x8);
    // Creating value type constructor for type: AsyncOperation
    AsyncOperation(System::IntPtr m_Ptr_ = {}, System::Action_1<UnityEngine::AsyncOperation*>* m_completeCallback_ = {}) noexcept : m_Ptr{m_Ptr_}, m_completeCallback{m_completeCallback_} {}
    // static private System.Void InternalDestroy(System.IntPtr ptr)
    // Offset: 0x1B6F2F0
    static void InternalDestroy(System::IntPtr ptr);
    // public System.Boolean get_isDone()
    // Offset: 0x1B6F330
    bool get_isDone();
    // public System.Single get_progress()
    // Offset: 0x1B6F370
    float get_progress();
    // public System.Void set_priority(System.Int32 value)
    // Offset: 0x1B6F3B0
    void set_priority(int value);
    // public System.Boolean get_allowSceneActivation()
    // Offset: 0x1B6F400
    bool get_allowSceneActivation();
    // public System.Void set_allowSceneActivation(System.Boolean value)
    // Offset: 0x1B6F440
    void set_allowSceneActivation(bool value);
    // System.Void InvokeCompletionEvent()
    // Offset: 0x1B6F52C
    void InvokeCompletionEvent();
    // public System.Void add_completed(System.Action`1<UnityEngine.AsyncOperation> value)
    // Offset: 0x1B6F58C
    void add_completed(System::Action_1<UnityEngine::AsyncOperation*>* value);
    // public System.Void remove_completed(System.Action`1<UnityEngine.AsyncOperation> value)
    // Offset: 0x1B6F664
    void remove_completed(System::Action_1<UnityEngine::AsyncOperation*>* value);
    // protected override System.Void Finalize()
    // Offset: 0x1B6F490
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public System.Void .ctor()
    // Offset: 0x1B6F6E4
    // Implemented from: UnityEngine.YieldInstruction
    // Base method: System.Void YieldInstruction::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsyncOperation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsyncOperation*, creationType>()));
    }
  }; // UnityEngine.AsyncOperation
  #pragma pack(pop)
  static check_size<sizeof(AsyncOperation), 24 + sizeof(System::Action_1<UnityEngine::AsyncOperation*>*)> __UnityEngine_AsyncOperationSizeCheck;
  static_assert(sizeof(AsyncOperation) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::AsyncOperation*, "UnityEngine", "AsyncOperation");
