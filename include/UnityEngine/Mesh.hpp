// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.BoneWeight1
#include "UnityEngine/BoneWeight1.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.CombineInstance
#include "UnityEngine/CombineInstance.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.MeshUpdateFlags
#include "UnityEngine/Rendering/MeshUpdateFlags.hpp"
// Including type: UnityEngine.MeshTopology
#include "UnityEngine/MeshTopology.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IndexFormat
  struct IndexFormat;
  // Forward declaring type: SubMeshDescriptor
  struct SubMeshDescriptor;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
  // Forward declaring type: Array
  class Array;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Mesh
  // [RequiredByNativeCodeAttribute] Offset: D8F190
  // [NativeHeaderAttribute] Offset: D8F190
  class Mesh : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Mesh
    Mesh() noexcept {}
    // static private System.Void Internal_Create(UnityEngine.Mesh mono)
    // Offset: 0x1BF72EC
    static void Internal_Create(UnityEngine::Mesh* mono);
    // static UnityEngine.Mesh FromInstanceID(System.Int32 id)
    // Offset: 0x1BF73BC
    static UnityEngine::Mesh* FromInstanceID(int id);
    // public UnityEngine.Rendering.IndexFormat get_indexFormat()
    // Offset: 0x1BF73FC
    UnityEngine::Rendering::IndexFormat get_indexFormat();
    // public System.Void set_indexFormat(UnityEngine.Rendering.IndexFormat value)
    // Offset: 0x1BF743C
    void set_indexFormat(UnityEngine::Rendering::IndexFormat value);
    // public System.Void SetIndexBufferParams(System.Int32 indexCount, UnityEngine.Rendering.IndexFormat format)
    // Offset: 0x1BF748C
    void SetIndexBufferParams(int indexCount, UnityEngine::Rendering::IndexFormat format);
    // private System.Void InternalSetIndexBufferData(System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1BF74E4
    void InternalSetIndexBufferData(System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetIndexBufferDataFromArray(System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1BF756C
    void InternalSetIndexBufferDataFromArray(System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1BF75F4
    void SetVertexBufferParams(int vertexCount, ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // Creating initializer_list -> params proxy for: System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    void SetVertexBufferParams(int vertexCount, std::initializer_list<UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // Creating TArgs -> initializer_list proxy for: System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    template<class ...TParams>
    void SetVertexBufferParams(int vertexCount, TParams&&... attributes) {
      SetVertexBufferParams(vertexCount, {attributes...});
    }
    // private System.Void InternalSetVertexBufferData(System.Int32 stream, System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1BF764C
    void InternalSetVertexBufferData(int stream, System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetVertexBufferDataFromArray(System.Int32 stream, System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1BF76E4
    void InternalSetVertexBufferDataFromArray(int stream, System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Array GetVertexAttributesAlloc()
    // Offset: 0x1BF777C
    System::Array* GetVertexAttributesAlloc();
    // private System.Int32 GetVertexAttributesArray(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1BF77BC
    int GetVertexAttributesArray(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributesList(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x1BF780C
    int GetVertexAttributesList(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributeCountImpl()
    // Offset: 0x1BF785C
    int GetVertexAttributeCountImpl();
    // public UnityEngine.Rendering.VertexAttributeDescriptor GetVertexAttribute(System.Int32 index)
    // Offset: 0x1BF789C
    UnityEngine::Rendering::VertexAttributeDescriptor GetVertexAttribute(int index);
    // private System.UInt32 GetIndexStartImpl(System.Int32 submesh)
    // Offset: 0x1BF795C
    uint GetIndexStartImpl(int submesh);
    // private System.UInt32 GetIndexCountImpl(System.Int32 submesh)
    // Offset: 0x1BF79AC
    uint GetIndexCountImpl(int submesh);
    // private System.UInt32 GetTrianglesCountImpl(System.Int32 submesh)
    // Offset: 0x1BF79FC
    uint GetTrianglesCountImpl(int submesh);
    // private System.UInt32 GetBaseVertexImpl(System.Int32 submesh)
    // Offset: 0x1BF7A4C
    uint GetBaseVertexImpl(int submesh);
    // private System.Int32[] GetTrianglesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BF7A9C
    ::Array<int>* GetTrianglesImpl(int submesh, bool applyBaseVertex);
    // private System.Int32[] GetIndicesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BF7AF4
    ::Array<int>* GetIndicesImpl(int submesh, bool applyBaseVertex);
    // private System.Void SetIndicesImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BF7B4C
    void SetIndicesImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void SetIndicesNativeArrayImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.IntPtr indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BF7BEC
    void SetIndicesNativeArrayImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::IntPtr indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void GetTrianglesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BF7C8C
    void GetTrianglesNonAllocImpl(::Array<int>*& values, int submesh, bool applyBaseVertex);
    // private System.Void GetTrianglesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BF7CF4
    void GetTrianglesNonAllocImpl16(::Array<uint16_t>*& values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BF7D5C
    void GetIndicesNonAllocImpl(::Array<int>*& values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BF7DC4
    void GetIndicesNonAllocImpl16(::Array<uint16_t>*& values, int submesh, bool applyBaseVertex);
    // private System.Void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch)
    // Offset: 0x1BF7E2C
    void PrintErrorCantAccessChannel(UnityEngine::Rendering::VertexAttribute ch);
    // public System.Boolean HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1BF7E7C
    bool HasVertexAttribute(UnityEngine::Rendering::VertexAttribute attr);
    // public System.Int32 GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1BF7ECC
    int GetVertexAttributeDimension(UnityEngine::Rendering::VertexAttribute attr);
    // public UnityEngine.Rendering.VertexAttributeFormat GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1BF7F1C
    UnityEngine::Rendering::VertexAttributeFormat GetVertexAttributeFormat(UnityEngine::Rendering::VertexAttribute attr);
    // private System.Void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1BF7F6C
    void SetArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int arraySize, int valuesStart, int valuesCount);
    // private System.Void SetNativeArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1BF8004
    void SetNativeArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::IntPtr values, int arraySize, int valuesStart, int valuesCount);
    // private System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0x1BF809C
    System::Array* GetAllocArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim);
    // private System.Void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values)
    // Offset: 0x1BF8104
    void GetArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values);
    // public System.Int32 get_vertexBufferCount()
    // Offset: 0x1BF8174
    int get_vertexBufferCount();
    // public System.IntPtr GetNativeVertexBufferPtr(System.Int32 index)
    // Offset: 0x1BF81B4
    System::IntPtr GetNativeVertexBufferPtr(int index);
    // public System.IntPtr GetNativeIndexBufferPtr()
    // Offset: 0x1BF8204
    System::IntPtr GetNativeIndexBufferPtr();
    // public System.Int32 get_blendShapeCount()
    // Offset: 0x1BF8244
    int get_blendShapeCount();
    // public System.Void ClearBlendShapes()
    // Offset: 0x1BF8284
    void ClearBlendShapes();
    // public System.String GetBlendShapeName(System.Int32 shapeIndex)
    // Offset: 0x1BF82C4
    ::Il2CppString* GetBlendShapeName(int shapeIndex);
    // public System.Int32 GetBlendShapeIndex(System.String blendShapeName)
    // Offset: 0x1BF8314
    int GetBlendShapeIndex(::Il2CppString* blendShapeName);
    // public System.Int32 GetBlendShapeFrameCount(System.Int32 shapeIndex)
    // Offset: 0x1BF8364
    int GetBlendShapeFrameCount(int shapeIndex);
    // public System.Single GetBlendShapeFrameWeight(System.Int32 shapeIndex, System.Int32 frameIndex)
    // Offset: 0x1BF83B4
    float GetBlendShapeFrameWeight(int shapeIndex, int frameIndex);
    // public System.Void GetBlendShapeFrameVertices(System.Int32 shapeIndex, System.Int32 frameIndex, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x1BF840C
    void GetBlendShapeFrameVertices(int shapeIndex, int frameIndex, ::Array<UnityEngine::Vector3>* deltaVertices, ::Array<UnityEngine::Vector3>* deltaNormals, ::Array<UnityEngine::Vector3>* deltaTangents);
    // public System.Void AddBlendShapeFrame(System.String shapeName, System.Single frameWeight, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x1BF848C
    void AddBlendShapeFrame(::Il2CppString* shapeName, float frameWeight, ::Array<UnityEngine::Vector3>* deltaVertices, ::Array<UnityEngine::Vector3>* deltaNormals, ::Array<UnityEngine::Vector3>* deltaTangents);
    // private System.Boolean HasBoneWeights()
    // Offset: 0x1BF850C
    bool HasBoneWeights();
    // private UnityEngine.BoneWeight[] GetBoneWeightsImpl()
    // Offset: 0x1BF854C
    ::Array<UnityEngine::BoneWeight>* GetBoneWeightsImpl();
    // private System.Void SetBoneWeightsImpl(UnityEngine.BoneWeight[] weights)
    // Offset: 0x1BF858C
    void SetBoneWeightsImpl(::Array<UnityEngine::BoneWeight>* weights);
    // public System.Void SetBoneWeights(Unity.Collections.NativeArray`1<System.Byte> bonesPerVertex, Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> weights)
    // Offset: 0x1BF85DC
    void SetBoneWeights(Unity::Collections::NativeArray_1<uint8_t> bonesPerVertex, Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> weights);
    // private System.Void InternalSetBoneWeights(System.IntPtr bonesPerVertex, System.Int32 bonesPerVertexSize, System.IntPtr weights, System.Int32 weightsSize)
    // Offset: 0x1BF86B8
    void InternalSetBoneWeights(System::IntPtr bonesPerVertex, int bonesPerVertexSize, System::IntPtr weights, int weightsSize);
    // public Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> GetAllBoneWeights()
    // Offset: 0x1BF8728
    Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> GetAllBoneWeights();
    // public Unity.Collections.NativeArray`1<System.Byte> GetBonesPerVertex()
    // Offset: 0x1BF8864
    Unity::Collections::NativeArray_1<uint8_t> GetBonesPerVertex();
    // private System.Int32 GetAllBoneWeightsArraySize()
    // Offset: 0x1BF8824
    int GetAllBoneWeightsArraySize();
    // private System.IntPtr GetAllBoneWeightsArray()
    // Offset: 0x1BF87E4
    System::IntPtr GetAllBoneWeightsArray();
    // private System.IntPtr GetBonesPerVertexArray()
    // Offset: 0x1BF8990
    System::IntPtr GetBonesPerVertexArray();
    // private System.Int32 GetBindposeCount()
    // Offset: 0x1BF89D0
    int GetBindposeCount();
    // public UnityEngine.Matrix4x4[] get_bindposes()
    // Offset: 0x1BF8A10
    ::Array<UnityEngine::Matrix4x4>* get_bindposes();
    // public System.Void set_bindposes(UnityEngine.Matrix4x4[] value)
    // Offset: 0x1BF8A50
    void set_bindposes(::Array<UnityEngine::Matrix4x4>* value);
    // private System.Void GetBoneWeightsNonAllocImpl(out UnityEngine.BoneWeight[] values)
    // Offset: 0x1BF8AA0
    void GetBoneWeightsNonAllocImpl(::Array<UnityEngine::BoneWeight>*& values);
    // private System.Void GetBindposesNonAllocImpl(out UnityEngine.Matrix4x4[] values)
    // Offset: 0x1BF8AF0
    void GetBindposesNonAllocImpl(::Array<UnityEngine::Matrix4x4>*& values);
    // public System.Boolean get_isReadable()
    // Offset: 0x1BF8B40
    bool get_isReadable();
    // System.Boolean get_canAccess()
    // Offset: 0x1BF8B80
    bool get_canAccess();
    // public System.Int32 get_vertexCount()
    // Offset: 0x1BF8950
    int get_vertexCount();
    // public System.Int32 get_subMeshCount()
    // Offset: 0x1BF8BC0
    int get_subMeshCount();
    // public System.Void set_subMeshCount(System.Int32 value)
    // Offset: 0x1BF8C00
    void set_subMeshCount(int value);
    // public System.Void SetSubMesh(System.Int32 index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1BF8C50
    void SetSubMesh(int index, UnityEngine::Rendering::SubMeshDescriptor desc, UnityEngine::Rendering::MeshUpdateFlags flags);
    // public UnityEngine.Rendering.SubMeshDescriptor GetSubMesh(System.Int32 index)
    // Offset: 0x1BF8D20
    UnityEngine::Rendering::SubMeshDescriptor GetSubMesh(int index);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1BF8DF8
    UnityEngine::Bounds get_bounds();
    // public System.Void set_bounds(UnityEngine.Bounds value)
    // Offset: 0x1BF8EB4
    void set_bounds(UnityEngine::Bounds value);
    // private System.Void ClearImpl(System.Boolean keepVertexLayout)
    // Offset: 0x1BF8F54
    void ClearImpl(bool keepVertexLayout);
    // private System.Void RecalculateBoundsImpl()
    // Offset: 0x1BF8FA4
    void RecalculateBoundsImpl();
    // private System.Void RecalculateNormalsImpl()
    // Offset: 0x1BF8FE4
    void RecalculateNormalsImpl();
    // private System.Void RecalculateTangentsImpl()
    // Offset: 0x1BF9024
    void RecalculateTangentsImpl();
    // private System.Void MarkDynamicImpl()
    // Offset: 0x1BF9064
    void MarkDynamicImpl();
    // public System.Void MarkModified()
    // Offset: 0x1BF90A4
    void MarkModified();
    // private System.Void UploadMeshDataImpl(System.Boolean markNoLongerReadable)
    // Offset: 0x1BF90E4
    void UploadMeshDataImpl(bool markNoLongerReadable);
    // private UnityEngine.MeshTopology GetTopologyImpl(System.Int32 submesh)
    // Offset: 0x1BF9134
    UnityEngine::MeshTopology GetTopologyImpl(int submesh);
    // public System.Single GetUVDistributionMetric(System.Int32 uvSetIndex)
    // Offset: 0x1BF9184
    float GetUVDistributionMetric(int uvSetIndex);
    // private System.Void CombineMeshesImpl(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x1BF91D4
    void CombineMeshesImpl(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // private System.Void OptimizeImpl()
    // Offset: 0x1BF9244
    void OptimizeImpl();
    // private System.Void OptimizeIndexBuffersImpl()
    // Offset: 0x1BF9284
    void OptimizeIndexBuffersImpl();
    // private System.Void OptimizeReorderVertexBufferImpl()
    // Offset: 0x1BF92C4
    void OptimizeReorderVertexBufferImpl();
    // UnityEngine.Rendering.VertexAttribute GetUVChannel(System.Int32 uvIndex)
    // Offset: 0x1BF9304
    UnityEngine::Rendering::VertexAttribute GetUVChannel(int uvIndex);
    // static System.Int32 DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0x1BF9398
    static int DefaultDimensionForChannel(UnityEngine::Rendering::VertexAttribute channel);
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method, channel, format, dim);
    }
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method, channel);
    }
    // private System.Void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1BF9454
    void SetSizedArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetSizedNativeArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1BF96E0
    void SetSizedNativeArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::IntPtr values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, format, dim, values);
    }
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, values);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, format, dim, values, start, length);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, values, start, length);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim, UnityEngine.Rendering.VertexAttributeFormat channelType)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim, UnityEngine::Rendering::VertexAttributeFormat channelType) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(channelType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim, channelType);
    }
    // public UnityEngine.Vector3[] get_vertices()
    // Offset: 0x1BF9964
    ::Array<UnityEngine::Vector3>* get_vertices();
    // public System.Void set_vertices(UnityEngine.Vector3[] value)
    // Offset: 0x1BF99B8
    void set_vertices(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector3[] get_normals()
    // Offset: 0x1BF9A1C
    ::Array<UnityEngine::Vector3>* get_normals();
    // public System.Void set_normals(UnityEngine.Vector3[] value)
    // Offset: 0x1BF9A70
    void set_normals(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector4[] get_tangents()
    // Offset: 0x1BF9AD4
    ::Array<UnityEngine::Vector4>* get_tangents();
    // public System.Void set_tangents(UnityEngine.Vector4[] value)
    // Offset: 0x1BF9B28
    void set_tangents(::Array<UnityEngine::Vector4>* value);
    // public UnityEngine.Vector2[] get_uv()
    // Offset: 0x1BF9B8C
    ::Array<UnityEngine::Vector2>* get_uv();
    // public System.Void set_uv(UnityEngine.Vector2[] value)
    // Offset: 0x1BF9BE0
    void set_uv(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv2()
    // Offset: 0x1BF9C44
    ::Array<UnityEngine::Vector2>* get_uv2();
    // public System.Void set_uv2(UnityEngine.Vector2[] value)
    // Offset: 0x1BF9C98
    void set_uv2(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv3()
    // Offset: 0x1BF9CFC
    ::Array<UnityEngine::Vector2>* get_uv3();
    // public System.Void set_uv3(UnityEngine.Vector2[] value)
    // Offset: 0x1BF9D50
    void set_uv3(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv4()
    // Offset: 0x1BF9DB4
    ::Array<UnityEngine::Vector2>* get_uv4();
    // public System.Void set_uv4(UnityEngine.Vector2[] value)
    // Offset: 0x1BF9E08
    void set_uv4(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv5()
    // Offset: 0x1BF9E6C
    ::Array<UnityEngine::Vector2>* get_uv5();
    // public System.Void set_uv5(UnityEngine.Vector2[] value)
    // Offset: 0x1BF9EC0
    void set_uv5(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv6()
    // Offset: 0x1BF9F24
    ::Array<UnityEngine::Vector2>* get_uv6();
    // public System.Void set_uv6(UnityEngine.Vector2[] value)
    // Offset: 0x1BF9F78
    void set_uv6(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv7()
    // Offset: 0x1BF9FDC
    ::Array<UnityEngine::Vector2>* get_uv7();
    // public System.Void set_uv7(UnityEngine.Vector2[] value)
    // Offset: 0x1BFA030
    void set_uv7(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv8()
    // Offset: 0x1BFA094
    ::Array<UnityEngine::Vector2>* get_uv8();
    // public System.Void set_uv8(UnityEngine.Vector2[] value)
    // Offset: 0x1BFA0E8
    void set_uv8(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Color[] get_colors()
    // Offset: 0x1BFA14C
    ::Array<UnityEngine::Color>* get_colors();
    // public System.Void set_colors(UnityEngine.Color[] value)
    // Offset: 0x1BFA1A0
    void set_colors(::Array<UnityEngine::Color>* value);
    // public UnityEngine.Color32[] get_colors32()
    // Offset: 0x1BFA204
    ::Array<UnityEngine::Color32>* get_colors32();
    // public System.Void set_colors32(UnityEngine.Color32[] value)
    // Offset: 0x1BFA260
    void set_colors32(::Array<UnityEngine::Color32>* value);
    // public System.Void GetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> vertices)
    // Offset: 0x1BFA2CC
    void GetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* vertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices)
    // Offset: 0x1BFA3D4
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFA444
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices)
    // Offset: 0x1BFA4C0
    void SetVertices(::Array<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFA518
    void SetVertices(::Array<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertices(Unity::Collections::NativeArray_1<T> inVertices) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inVertices);
    }
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertices(Unity::Collections::NativeArray_1<T> inVertices, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inVertices, start, length);
    }
    // public System.Void GetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> normals)
    // Offset: 0x1BFA5B8
    void GetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* normals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals)
    // Offset: 0x1BFA6C0
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFA730
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals)
    // Offset: 0x1BFA7AC
    void SetNormals(::Array<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFA7F4
    void SetNormals(::Array<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetNormals(Unity::Collections::NativeArray_1<T> inNormals) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inNormals);
    }
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetNormals(Unity::Collections::NativeArray_1<T> inNormals, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inNormals, start, length);
    }
    // public System.Void GetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> tangents)
    // Offset: 0x1BFA894
    void GetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* tangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents)
    // Offset: 0x1BFA99C
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFAA0C
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents)
    // Offset: 0x1BFAA88
    void SetTangents(::Array<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFAAD0
    void SetTangents(::Array<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetTangents(Unity::Collections::NativeArray_1<T> inTangents) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inTangents);
    }
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetTangents(Unity::Collections::NativeArray_1<T> inTangents, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inTangents, start, length);
    }
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color> colors)
    // Offset: 0x1BFAB70
    void GetColors(System::Collections::Generic::List_1<UnityEngine::Color>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors)
    // Offset: 0x1BFAC78
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFACE8
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color>* inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color[] inColors)
    // Offset: 0x1BFAD64
    void SetColors(::Array<UnityEngine::Color>* inColors);
    // public System.Void SetColors(UnityEngine.Color[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFADAC
    void SetColors(::Array<UnityEngine::Color>* inColors, int start, int length);
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color32> colors)
    // Offset: 0x1BFAE4C
    void GetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors)
    // Offset: 0x1BFAF30
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFAFA0
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color32[] inColors)
    // Offset: 0x1BFB024
    void SetColors(::Array<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(UnityEngine.Color32[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB06C
    void SetColors(::Array<UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetColors(Unity::Collections::NativeArray_1<T> inColors) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inColors);
    }
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetColors(Unity::Collections::NativeArray_1<T> inColors, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inColors, start, length);
    }
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Collections.Generic.List`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUvsImpl(int uvIndex, int dim, System::Collections::Generic::List_1<T>* uvs, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUvsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUvsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, uvIndex, dim, uvs, start, length);
    }
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1BFB0E0
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1BFB1DC
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1BFB2D8
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB158
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB254
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB350
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs, int start, int length);
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Array uvs, System.Int32 arrayStart, System.Int32 arraySize)
    // Offset: 0x1BFB3D4
    void SetUvsImpl(int uvIndex, int dim, System::Array* uvs, int arrayStart, int arraySize);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs)
    // Offset: 0x1BFB504
    void SetUVs(int channel, ::Array<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs)
    // Offset: 0x1BFB574
    void SetUVs(int channel, ::Array<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs)
    // Offset: 0x1BFB5E4
    void SetUVs(int channel, ::Array<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB560
    void SetUVs(int channel, ::Array<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB5D0
    void SetUVs(int channel, ::Array<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFB640
    void SetUVs(int channel, ::Array<UnityEngine::Vector4>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUVs(int channel, Unity::Collections::NativeArray_1<T> uvs) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, uvs);
    }
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUVs(int channel, Unity::Collections::NativeArray_1<T> uvs, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, uvs, start, length);
    }
    // private System.Void GetUVsImpl(System.Int32 uvIndex, System.Collections.Generic.List`1<T> uvs, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetUVsImpl(int uvIndex, System::Collections::Generic::List_1<T>* uvs, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetUVsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUVsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, uvIndex, uvs, dim);
    }
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1BFB654
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1BFB6C0
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1BFB72C
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Int32 get_vertexAttributeCount()
    // Offset: 0x1BFB798
    int get_vertexAttributeCount();
    // public UnityEngine.Rendering.VertexAttributeDescriptor[] GetVertexAttributes()
    // Offset: 0x1BFB7D8
    ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* GetVertexAttributes();
    // public System.Int32 GetVertexAttributes(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1BFB86C
    int GetVertexAttributes(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Int32 GetVertexAttributes(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x1BFB8BC
    int GetVertexAttributes(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Void SetVertexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(::Array<T>* data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // private System.Void PrintErrorCantAccessIndices()
    // Offset: 0x1BFB90C
    void PrintErrorCantAccessIndices();
    // private System.Boolean CheckCanAccessSubmesh(System.Int32 submesh, System.Boolean errorAboutTriangles)
    // Offset: 0x1BFBA24
    bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles);
    // private System.Boolean CheckCanAccessSubmeshTriangles(System.Int32 submesh)
    // Offset: 0x1BFBB54
    bool CheckCanAccessSubmeshTriangles(int submesh);
    // private System.Boolean CheckCanAccessSubmeshIndices(System.Int32 submesh)
    // Offset: 0x1BFBB5C
    bool CheckCanAccessSubmeshIndices(int submesh);
    // public System.Int32[] get_triangles()
    // Offset: 0x1BFBB64
    ::Array<int>* get_triangles();
    // public System.Void set_triangles(System.Int32[] value)
    // Offset: 0x1BFBC20
    void set_triangles(::Array<int>* value);
    // public System.Int32[] GetTriangles(System.Int32 submesh)
    // Offset: 0x1BFBD94
    ::Array<int>* GetTriangles(int submesh);
    // public System.Int32[] GetTriangles(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BFBD9C
    ::Array<int>* GetTriangles(int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1BFBE4C
    void GetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BFBE54
    void GetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BFBFE8
    void GetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool applyBaseVertex);
    // public System.Int32[] GetIndices(System.Int32 submesh)
    // Offset: 0x1BFC17C
    ::Array<int>* GetIndices(int submesh);
    // public System.Int32[] GetIndices(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BFC184
    ::Array<int>* GetIndices(int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh)
    // Offset: 0x1BFC234
    void GetIndices(System::Collections::Generic::List_1<int>* indices, int submesh);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BFC23C
    void GetIndices(System::Collections::Generic::List_1<int>* indices, int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1BFC494
    void GetIndices(System::Collections::Generic::List_1<uint16_t>* indices, int submesh, bool applyBaseVertex);
    // public System.Void SetIndexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(::Array<T>* data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.UInt32 GetIndexStart(System.Int32 submesh)
    // Offset: 0x1BFC608
    uint GetIndexStart(int submesh);
    // public System.UInt32 GetIndexCount(System.Int32 submesh)
    // Offset: 0x1BFC3B0
    uint GetIndexCount(int submesh);
    // public System.UInt32 GetBaseVertex(System.Int32 submesh)
    // Offset: 0x1BFC6EC
    uint GetBaseVertex(int submesh);
    // private System.Void CheckIndicesArrayRange(System.Int32 valuesLength, System.Int32 start, System.Int32 length)
    // Offset: 0x1BFC7D0
    void CheckIndicesArrayRange(int valuesLength, int start, int length);
    // private System.Void SetTrianglesImpl(System.Int32 submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, System.Int32 trianglesArrayLength, System.Int32 start, System.Int32 length, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFBCE8
    void SetTrianglesImpl(int submesh, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh)
    // Offset: 0x1BFC980
    void SetTriangles(::Array<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1BFC9FC
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFC98C
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCA08
    void SetTriangles(::Array<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCAAC
    void SetTriangles(::Array<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCB1C
    void SetTriangles(::Array<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1BFCBC0
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1BFCC5C
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCBCC
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCC68
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCD5C
    void SetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCDEC
    void SetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh)
    // Offset: 0x1BFCEE0
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1BFCF70
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCEEC
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFCF7C
    void SetIndices(::Array<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFD06C
    void SetIndices(::Array<uint16_t>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFD0F0
    void SetIndices(::Array<uint16_t>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndices(Unity::Collections::NativeArray_1<T> indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, indices, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndices(Unity::Collections::NativeArray_1<T> indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(indicesStart), ::il2cpp_utils::ExtractType(indicesLength), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFD1E0
    void SetIndices(System::Collections::Generic::List_1<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFD28C
    void SetIndices(System::Collections::Generic::List_1<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFD3CC
    void SetIndices(System::Collections::Generic::List_1<uint16_t>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1BFD478
    void SetIndices(System::Collections::Generic::List_1<uint16_t>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void GetBindposes(System.Collections.Generic.List`1<UnityEngine.Matrix4x4> bindposes)
    // Offset: 0x1BFD5B8
    void GetBindposes(System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* bindposes);
    // public System.Void GetBoneWeights(System.Collections.Generic.List`1<UnityEngine.BoneWeight> boneWeights)
    // Offset: 0x1BFD6D0
    void GetBoneWeights(System::Collections::Generic::List_1<UnityEngine::BoneWeight>* boneWeights);
    // public UnityEngine.BoneWeight[] get_boneWeights()
    // Offset: 0x1BFD814
    ::Array<UnityEngine::BoneWeight>* get_boneWeights();
    // public System.Void set_boneWeights(UnityEngine.BoneWeight[] value)
    // Offset: 0x1BFD854
    void set_boneWeights(::Array<UnityEngine::BoneWeight>* value);
    // public System.Void Clear(System.Boolean keepVertexLayout)
    // Offset: 0x1BFD8A4
    void Clear(bool keepVertexLayout);
    // public System.Void Clear()
    // Offset: 0x1BFD8F4
    void Clear();
    // public System.Void RecalculateBounds()
    // Offset: 0x1BFD938
    void RecalculateBounds();
    // public System.Void RecalculateNormals()
    // Offset: 0x1BFDA28
    void RecalculateNormals();
    // public System.Void RecalculateTangents()
    // Offset: 0x1BFDB18
    void RecalculateTangents();
    // public System.Void MarkDynamic()
    // Offset: 0x1BFDC08
    void MarkDynamic();
    // public System.Void UploadMeshData(System.Boolean markNoLongerReadable)
    // Offset: 0x1BFDC80
    void UploadMeshData(bool markNoLongerReadable);
    // public System.Void Optimize()
    // Offset: 0x1BFDD0C
    void Optimize();
    // public System.Void OptimizeIndexBuffers()
    // Offset: 0x1BFDDFC
    void OptimizeIndexBuffers();
    // public System.Void OptimizeReorderVertexBuffer()
    // Offset: 0x1BFDEEC
    void OptimizeReorderVertexBuffer();
    // public UnityEngine.MeshTopology GetTopology(System.Int32 submesh)
    // Offset: 0x1BFDFDC
    UnityEngine::MeshTopology GetTopology(int submesh);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x1BFE100
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices)
    // Offset: 0x1BFE170
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes)
    // Offset: 0x1BFE1DC
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine)
    // Offset: 0x1BFE23C
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine);
    // private System.Void GetVertexAttribute_Injected(System.Int32 index, out UnityEngine.Rendering.VertexAttributeDescriptor ret)
    // Offset: 0x1BF7904
    void GetVertexAttribute_Injected(int index, UnityEngine::Rendering::VertexAttributeDescriptor& ret);
    // private System.Void SetSubMesh_Injected(System.Int32 index, ref UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1BF8CB8
    void SetSubMesh_Injected(int index, UnityEngine::Rendering::SubMeshDescriptor& desc, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void GetSubMesh_Injected(System.Int32 index, out UnityEngine.Rendering.SubMeshDescriptor ret)
    // Offset: 0x1BF8DA0
    void GetSubMesh_Injected(int index, UnityEngine::Rendering::SubMeshDescriptor& ret);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x1BF8E64
    void get_bounds_Injected(UnityEngine::Bounds& ret);
    // private System.Void set_bounds_Injected(ref UnityEngine.Bounds value)
    // Offset: 0x1BF8F04
    void set_bounds_Injected(UnityEngine::Bounds& value);
    // public System.Void .ctor()
    // Offset: 0x1BF732C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mesh*, creationType>()));
    }
  }; // UnityEngine.Mesh
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Mesh*, "UnityEngine", "Mesh");
