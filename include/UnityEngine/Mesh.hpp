// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Rendering.VertexAttribute
#include "UnityEngine/Rendering/VertexAttribute.hpp"
// Including type: UnityEngine.Rendering.VertexAttributeFormat
#include "UnityEngine/Rendering/VertexAttributeFormat.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IndexFormat
  struct IndexFormat;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshTopology
  struct MeshTopology;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Mesh
  // [] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: CA75B0
  // [NativeHeaderAttribute] Offset: CA75B0
  class Mesh : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Mesh
    Mesh() noexcept {}
    // static private System.Void Internal_Create(UnityEngine.Mesh mono)
    // Offset: 0x1A711F0
    static void Internal_Create(UnityEngine::Mesh* mono);
    // public System.Void set_indexFormat(UnityEngine.Rendering.IndexFormat value)
    // Offset: 0x1A712C8
    void set_indexFormat(UnityEngine::Rendering::IndexFormat value);
    // private System.UInt32 GetIndexCountImpl(System.Int32 submesh)
    // Offset: 0x1A71318
    uint GetIndexCountImpl(int submesh);
    // private System.Int32[] GetTrianglesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1A71368
    ::Array<int>* GetTrianglesImpl(int submesh, bool applyBaseVertex);
    // private System.Int32[] GetIndicesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1A713C0
    ::Array<int>* GetIndicesImpl(int submesh, bool applyBaseVertex);
    // private System.Void SetIndicesImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A71418
    void SetIndicesImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch)
    // Offset: 0x1A714B8
    void PrintErrorCantAccessChannel(UnityEngine::Rendering::VertexAttribute ch);
    // public System.Boolean HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1A71508
    bool HasVertexAttribute(UnityEngine::Rendering::VertexAttribute attr);
    // private System.Void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1A71558
    void SetArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int arraySize, int valuesStart, int valuesCount);
    // private System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0x1A715F0
    System::Array* GetAllocArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim);
    // private System.Void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values)
    // Offset: 0x1A71658
    void GetArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values);
    // private System.Void SetBoneWeightsImpl(UnityEngine.BoneWeight[] weights)
    // Offset: 0x1A716C8
    void SetBoneWeightsImpl(::Array<UnityEngine::BoneWeight>* weights);
    // public System.Void set_bindposes(UnityEngine.Matrix4x4[] value)
    // Offset: 0x1A71718
    void set_bindposes(::Array<UnityEngine::Matrix4x4>* value);
    // System.Boolean get_canAccess()
    // Offset: 0x1A71768
    bool get_canAccess();
    // public System.Int32 get_vertexCount()
    // Offset: 0x1A717A8
    int get_vertexCount();
    // public System.Int32 get_subMeshCount()
    // Offset: 0x1A717E8
    int get_subMeshCount();
    // public System.Void set_subMeshCount(System.Int32 value)
    // Offset: 0x1A71828
    void set_subMeshCount(int value);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1A71878
    UnityEngine::Bounds get_bounds();
    // public System.Void set_bounds(UnityEngine.Bounds value)
    // Offset: 0x1A71934
    void set_bounds(UnityEngine::Bounds value);
    // private System.Void ClearImpl(System.Boolean keepVertexLayout)
    // Offset: 0x1A719D4
    void ClearImpl(bool keepVertexLayout);
    // private System.Void RecalculateBoundsImpl()
    // Offset: 0x1A71A24
    void RecalculateBoundsImpl();
    // private System.Void MarkDynamicImpl()
    // Offset: 0x1A71A64
    void MarkDynamicImpl();
    // private System.Void UploadMeshDataImpl(System.Boolean markNoLongerReadable)
    // Offset: 0x1A71AA4
    void UploadMeshDataImpl(bool markNoLongerReadable);
    // private UnityEngine.MeshTopology GetTopologyImpl(System.Int32 submesh)
    // Offset: 0x1A71AF4
    UnityEngine::MeshTopology GetTopologyImpl(int submesh);
    // UnityEngine.Rendering.VertexAttribute GetUVChannel(System.Int32 uvIndex)
    // Offset: 0x1A71B44
    UnityEngine::Rendering::VertexAttribute GetUVChannel(int uvIndex);
    // static System.Int32 DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0x1A71BD8
    static int DefaultDimensionForChannel(UnityEngine::Rendering::VertexAttribute channel);
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(channel, format, dim)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method, channel, format, dim);
    }
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(channel)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method, channel);
    }
    // private System.Void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1A71C94
    void SetSizedArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(channel, format, dim, values)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, format, dim, values);
    }
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(channel, values)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, values);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(channel, format, dim, values, start, length)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, format, dim, values, start, length);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(channel, values, start, length)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, values, start, length);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(buffer, capacity, channel, dim)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim, UnityEngine.Rendering.VertexAttributeFormat channelType)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim, UnityEngine::Rendering::VertexAttributeFormat channelType) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(buffer, capacity, channel, dim, channelType)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim, channelType);
    }
    // public UnityEngine.Vector3[] get_vertices()
    // Offset: 0x1A71F20
    ::Array<UnityEngine::Vector3>* get_vertices();
    // public System.Void set_vertices(UnityEngine.Vector3[] value)
    // Offset: 0x1A71F74
    void set_vertices(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector3[] get_normals()
    // Offset: 0x1A71FD8
    ::Array<UnityEngine::Vector3>* get_normals();
    // public System.Void set_normals(UnityEngine.Vector3[] value)
    // Offset: 0x1A7202C
    void set_normals(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector4[] get_tangents()
    // Offset: 0x1A72090
    ::Array<UnityEngine::Vector4>* get_tangents();
    // public System.Void set_tangents(UnityEngine.Vector4[] value)
    // Offset: 0x1A720E4
    void set_tangents(::Array<UnityEngine::Vector4>* value);
    // public UnityEngine.Vector2[] get_uv()
    // Offset: 0x1A72148
    ::Array<UnityEngine::Vector2>* get_uv();
    // public System.Void set_uv(UnityEngine.Vector2[] value)
    // Offset: 0x1A7219C
    void set_uv(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv2()
    // Offset: 0x1A72200
    ::Array<UnityEngine::Vector2>* get_uv2();
    // public System.Void set_uv2(UnityEngine.Vector2[] value)
    // Offset: 0x1A72254
    void set_uv2(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv3()
    // Offset: 0x1A722B8
    ::Array<UnityEngine::Vector2>* get_uv3();
    // public System.Void set_uv3(UnityEngine.Vector2[] value)
    // Offset: 0x1A7230C
    void set_uv3(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv4()
    // Offset: 0x1A72370
    ::Array<UnityEngine::Vector2>* get_uv4();
    // public UnityEngine.Color[] get_colors()
    // Offset: 0x1A723C4
    ::Array<UnityEngine::Color>* get_colors();
    // public System.Void set_colors(UnityEngine.Color[] value)
    // Offset: 0x1A72418
    void set_colors(::Array<UnityEngine::Color>* value);
    // public UnityEngine.Color32[] get_colors32()
    // Offset: 0x1A7247C
    ::Array<UnityEngine::Color32>* get_colors32();
    // public System.Void set_colors32(UnityEngine.Color32[] value)
    // Offset: 0x1A724D8
    void set_colors32(::Array<UnityEngine::Color32>* value);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices)
    // Offset: 0x1A72544
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1A725B4
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals)
    // Offset: 0x1A72630
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1A726A0
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents)
    // Offset: 0x1A7271C
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1A7278C
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors)
    // Offset: 0x1A72808
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1A72878
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors, int start, int length);
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Collections.Generic.List`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUvsImpl(int uvIndex, int dim, System::Collections::Generic::List_1<T>* uvs, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUvsImpl");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetUvsImpl", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(uvIndex, dim, uvs, start, length)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, uvIndex, dim, uvs, start, length);
    }
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1A728FC
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1A729F8
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1A72AF4
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1A72974
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1A72A70
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1A72B6C
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs, int start, int length);
    // private System.Void GetUVsImpl(System.Int32 uvIndex, System.Collections.Generic.List`1<T> uvs, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetUVsImpl(int uvIndex, System::Collections::Generic::List_1<T>* uvs, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetUVsImpl");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetUVsImpl", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(uvIndex, uvs, dim)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, uvIndex, uvs, dim);
    }
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1A72BF0
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // private System.Void PrintErrorCantAccessIndices()
    // Offset: 0x1A72C5C
    void PrintErrorCantAccessIndices();
    // private System.Boolean CheckCanAccessSubmesh(System.Int32 submesh, System.Boolean errorAboutTriangles)
    // Offset: 0x1A72D74
    bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles);
    // private System.Boolean CheckCanAccessSubmeshTriangles(System.Int32 submesh)
    // Offset: 0x1A72EA4
    bool CheckCanAccessSubmeshTriangles(int submesh);
    // private System.Boolean CheckCanAccessSubmeshIndices(System.Int32 submesh)
    // Offset: 0x1A72EAC
    bool CheckCanAccessSubmeshIndices(int submesh);
    // public System.Int32[] get_triangles()
    // Offset: 0x1A72EB4
    ::Array<int>* get_triangles();
    // public System.Void set_triangles(System.Int32[] value)
    // Offset: 0x1A72F70
    void set_triangles(::Array<int>* value);
    // public System.Int32[] GetTriangles(System.Int32 submesh)
    // Offset: 0x1A730F4
    ::Array<int>* GetTriangles(int submesh);
    // public System.Int32[] GetTriangles(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1A730FC
    ::Array<int>* GetTriangles(int submesh, bool applyBaseVertex);
    // public System.Int32[] GetIndices(System.Int32 submesh)
    // Offset: 0x1A731AC
    ::Array<int>* GetIndices(int submesh);
    // public System.Int32[] GetIndices(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1A731B4
    ::Array<int>* GetIndices(int submesh, bool applyBaseVertex);
    // public System.UInt32 GetIndexCount(System.Int32 submesh)
    // Offset: 0x1A73264
    uint GetIndexCount(int submesh);
    // private System.Void CheckIndicesArrayRange(System.Int32 valuesLength, System.Int32 start, System.Int32 length)
    // Offset: 0x1A73348
    void CheckIndicesArrayRange(int valuesLength, int start, int length);
    // private System.Void SetTrianglesImpl(System.Int32 submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, System.Int32 trianglesArrayLength, System.Int32 start, System.Int32 length, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73048
    void SetTrianglesImpl(int submesh, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh)
    // Offset: 0x1A734F8
    void SetTriangles(::Array<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73504
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73574
    void SetTriangles(::Array<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1A73618
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73624
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A736B4
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh)
    // Offset: 0x1A737E8
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1A73878
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A737F4
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73884
    void SetIndices(::Array<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73974
    void SetIndices(System::Collections::Generic::List_1<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1A73A20
    void SetIndices(System::Collections::Generic::List_1<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void set_boneWeights(UnityEngine.BoneWeight[] value)
    // Offset: 0x1A73B60
    void set_boneWeights(::Array<UnityEngine::BoneWeight>* value);
    // public System.Void Clear()
    // Offset: 0x1A73BB0
    void Clear();
    // public System.Void RecalculateBounds()
    // Offset: 0x1A73BF4
    void RecalculateBounds();
    // public System.Void MarkDynamic()
    // Offset: 0x1A73CE4
    void MarkDynamic();
    // public System.Void UploadMeshData(System.Boolean markNoLongerReadable)
    // Offset: 0x1A73D5C
    void UploadMeshData(bool markNoLongerReadable);
    // public UnityEngine.MeshTopology GetTopology(System.Int32 submesh)
    // Offset: 0x1A73DE8
    UnityEngine::MeshTopology GetTopology(int submesh);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x1A718E4
    void get_bounds_Injected(UnityEngine::Bounds& ret);
    // private System.Void set_bounds_Injected(ref UnityEngine.Bounds value)
    // Offset: 0x1A71984
    void set_bounds_Injected(UnityEngine::Bounds& value);
    // public System.Void .ctor()
    // Offset: 0x1A71230
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mesh*, creationType>()));
    }
  }; // UnityEngine.Mesh
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Mesh*, "UnityEngine", "Mesh");
