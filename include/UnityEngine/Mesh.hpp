// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.BoneWeight
#include "UnityEngine/BoneWeight.hpp"
// Including type: UnityEngine.BoneWeight1
#include "UnityEngine/BoneWeight1.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.CombineInstance
#include "UnityEngine/CombineInstance.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.Rendering.MeshUpdateFlags
#include "UnityEngine/Rendering/MeshUpdateFlags.hpp"
// Including type: UnityEngine.MeshTopology
#include "UnityEngine/MeshTopology.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: IndexFormat
  struct IndexFormat;
  // Forward declaring type: SubMeshDescriptor
  struct SubMeshDescriptor;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IntPtr because it is already included!
  // Forward declaring type: Array
  class Array;
  // Skipping declaration: ValueType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Mesh
  // [RequiredByNativeCodeAttribute] Offset: D8F110
  // [NativeHeaderAttribute] Offset: D8F110
  class Mesh : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Mesh
    Mesh() noexcept {}
    // static private System.Void Internal_Create(UnityEngine.Mesh mono)
    // Offset: 0x1C12FFC
    static void Internal_Create(UnityEngine::Mesh* mono);
    // static UnityEngine.Mesh FromInstanceID(System.Int32 id)
    // Offset: 0x1C130CC
    static UnityEngine::Mesh* FromInstanceID(int id);
    // public UnityEngine.Rendering.IndexFormat get_indexFormat()
    // Offset: 0x1C1310C
    UnityEngine::Rendering::IndexFormat get_indexFormat();
    // public System.Void set_indexFormat(UnityEngine.Rendering.IndexFormat value)
    // Offset: 0x1C1314C
    void set_indexFormat(UnityEngine::Rendering::IndexFormat value);
    // public System.Void SetIndexBufferParams(System.Int32 indexCount, UnityEngine.Rendering.IndexFormat format)
    // Offset: 0x1C1319C
    void SetIndexBufferParams(int indexCount, UnityEngine::Rendering::IndexFormat format);
    // private System.Void InternalSetIndexBufferData(System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1C131F4
    void InternalSetIndexBufferData(System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetIndexBufferDataFromArray(System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1C1327C
    void InternalSetIndexBufferDataFromArray(System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // public System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1C13304
    void SetVertexBufferParams(int vertexCount, ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // Creating initializer_list -> params proxy for: System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    void SetVertexBufferParams(int vertexCount, std::initializer_list<UnityEngine::Rendering::VertexAttributeDescriptor> attributes);
    // Creating TArgs -> initializer_list proxy for: System.Void SetVertexBufferParams(System.Int32 vertexCount, params UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    template<class ...TParams>
    void SetVertexBufferParams(int vertexCount, TParams&&... attributes) {
      SetVertexBufferParams(vertexCount, {attributes...});
    }
    // private System.Void InternalSetVertexBufferData(System.Int32 stream, System.IntPtr data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1C1335C
    void InternalSetVertexBufferData(int stream, System::IntPtr data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void InternalSetVertexBufferDataFromArray(System.Int32 stream, System.Array data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 elemSize, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1C133F4
    void InternalSetVertexBufferDataFromArray(int stream, System::Array* data, int dataStart, int meshBufferStart, int count, int elemSize, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Array GetVertexAttributesAlloc()
    // Offset: 0x1C1348C
    System::Array* GetVertexAttributesAlloc();
    // private System.Int32 GetVertexAttributesArray(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1C134CC
    int GetVertexAttributesArray(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributesList(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x1C1351C
    int GetVertexAttributesList(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // private System.Int32 GetVertexAttributeCountImpl()
    // Offset: 0x1C1356C
    int GetVertexAttributeCountImpl();
    // public UnityEngine.Rendering.VertexAttributeDescriptor GetVertexAttribute(System.Int32 index)
    // Offset: 0x1C135AC
    UnityEngine::Rendering::VertexAttributeDescriptor GetVertexAttribute(int index);
    // private System.UInt32 GetIndexStartImpl(System.Int32 submesh)
    // Offset: 0x1C1366C
    uint GetIndexStartImpl(int submesh);
    // private System.UInt32 GetIndexCountImpl(System.Int32 submesh)
    // Offset: 0x1C136BC
    uint GetIndexCountImpl(int submesh);
    // private System.UInt32 GetTrianglesCountImpl(System.Int32 submesh)
    // Offset: 0x1C1370C
    uint GetTrianglesCountImpl(int submesh);
    // private System.UInt32 GetBaseVertexImpl(System.Int32 submesh)
    // Offset: 0x1C1375C
    uint GetBaseVertexImpl(int submesh);
    // private System.Int32[] GetTrianglesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C137AC
    ::Array<int>* GetTrianglesImpl(int submesh, bool applyBaseVertex);
    // private System.Int32[] GetIndicesImpl(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C13804
    ::Array<int>* GetIndicesImpl(int submesh, bool applyBaseVertex);
    // private System.Void SetIndicesImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C1385C
    void SetIndicesImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void SetIndicesNativeArrayImpl(System.Int32 submesh, UnityEngine.MeshTopology topology, UnityEngine.Rendering.IndexFormat indicesFormat, System.IntPtr indices, System.Int32 arrayStart, System.Int32 arraySize, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C138FC
    void SetIndicesNativeArrayImpl(int submesh, UnityEngine::MeshTopology topology, UnityEngine::Rendering::IndexFormat indicesFormat, System::IntPtr indices, int arrayStart, int arraySize, bool calculateBounds, int baseVertex);
    // private System.Void GetTrianglesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C1399C
    void GetTrianglesNonAllocImpl(::Array<int>*& values, int submesh, bool applyBaseVertex);
    // private System.Void GetTrianglesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C13A04
    void GetTrianglesNonAllocImpl16(::Array<uint16_t>*& values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl(out System.Int32[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C13A6C
    void GetIndicesNonAllocImpl(::Array<int>*& values, int submesh, bool applyBaseVertex);
    // private System.Void GetIndicesNonAllocImpl16(out System.UInt16[] values, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C13AD4
    void GetIndicesNonAllocImpl16(::Array<uint16_t>*& values, int submesh, bool applyBaseVertex);
    // private System.Void PrintErrorCantAccessChannel(UnityEngine.Rendering.VertexAttribute ch)
    // Offset: 0x1C13B3C
    void PrintErrorCantAccessChannel(UnityEngine::Rendering::VertexAttribute ch);
    // public System.Boolean HasVertexAttribute(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1C13B8C
    bool HasVertexAttribute(UnityEngine::Rendering::VertexAttribute attr);
    // public System.Int32 GetVertexAttributeDimension(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1C13BDC
    int GetVertexAttributeDimension(UnityEngine::Rendering::VertexAttribute attr);
    // public UnityEngine.Rendering.VertexAttributeFormat GetVertexAttributeFormat(UnityEngine.Rendering.VertexAttribute attr)
    // Offset: 0x1C13C2C
    UnityEngine::Rendering::VertexAttributeFormat GetVertexAttributeFormat(UnityEngine::Rendering::VertexAttribute attr);
    // private System.Void SetArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1C13C7C
    void SetArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int arraySize, int valuesStart, int valuesCount);
    // private System.Void SetNativeArrayForChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 arraySize, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1C13D14
    void SetNativeArrayForChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::IntPtr values, int arraySize, int valuesStart, int valuesCount);
    // private System.Array GetAllocArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0x1C13DAC
    System::Array* GetAllocArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim);
    // private System.Void GetArrayFromChannelImpl(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values)
    // Offset: 0x1C13E14
    void GetArrayFromChannelImpl(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values);
    // public System.Int32 get_vertexBufferCount()
    // Offset: 0x1C13E84
    int get_vertexBufferCount();
    // public System.IntPtr GetNativeVertexBufferPtr(System.Int32 index)
    // Offset: 0x1C13EC4
    System::IntPtr GetNativeVertexBufferPtr(int index);
    // public System.IntPtr GetNativeIndexBufferPtr()
    // Offset: 0x1C13F14
    System::IntPtr GetNativeIndexBufferPtr();
    // public System.Int32 get_blendShapeCount()
    // Offset: 0x1C13F54
    int get_blendShapeCount();
    // public System.Void ClearBlendShapes()
    // Offset: 0x1C13F94
    void ClearBlendShapes();
    // public System.String GetBlendShapeName(System.Int32 shapeIndex)
    // Offset: 0x1C13FD4
    ::Il2CppString* GetBlendShapeName(int shapeIndex);
    // public System.Int32 GetBlendShapeIndex(System.String blendShapeName)
    // Offset: 0x1C14024
    int GetBlendShapeIndex(::Il2CppString* blendShapeName);
    // public System.Int32 GetBlendShapeFrameCount(System.Int32 shapeIndex)
    // Offset: 0x1C14074
    int GetBlendShapeFrameCount(int shapeIndex);
    // public System.Single GetBlendShapeFrameWeight(System.Int32 shapeIndex, System.Int32 frameIndex)
    // Offset: 0x1C140C4
    float GetBlendShapeFrameWeight(int shapeIndex, int frameIndex);
    // public System.Void GetBlendShapeFrameVertices(System.Int32 shapeIndex, System.Int32 frameIndex, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x1C1411C
    void GetBlendShapeFrameVertices(int shapeIndex, int frameIndex, ::Array<UnityEngine::Vector3>* deltaVertices, ::Array<UnityEngine::Vector3>* deltaNormals, ::Array<UnityEngine::Vector3>* deltaTangents);
    // public System.Void AddBlendShapeFrame(System.String shapeName, System.Single frameWeight, UnityEngine.Vector3[] deltaVertices, UnityEngine.Vector3[] deltaNormals, UnityEngine.Vector3[] deltaTangents)
    // Offset: 0x1C1419C
    void AddBlendShapeFrame(::Il2CppString* shapeName, float frameWeight, ::Array<UnityEngine::Vector3>* deltaVertices, ::Array<UnityEngine::Vector3>* deltaNormals, ::Array<UnityEngine::Vector3>* deltaTangents);
    // private System.Boolean HasBoneWeights()
    // Offset: 0x1C1421C
    bool HasBoneWeights();
    // private UnityEngine.BoneWeight[] GetBoneWeightsImpl()
    // Offset: 0x1C1425C
    ::Array<UnityEngine::BoneWeight>* GetBoneWeightsImpl();
    // private System.Void SetBoneWeightsImpl(UnityEngine.BoneWeight[] weights)
    // Offset: 0x1C1429C
    void SetBoneWeightsImpl(::Array<UnityEngine::BoneWeight>* weights);
    // public System.Void SetBoneWeights(Unity.Collections.NativeArray`1<System.Byte> bonesPerVertex, Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> weights)
    // Offset: 0x1C142EC
    void SetBoneWeights(Unity::Collections::NativeArray_1<uint8_t> bonesPerVertex, Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> weights);
    // private System.Void InternalSetBoneWeights(System.IntPtr bonesPerVertex, System.Int32 bonesPerVertexSize, System.IntPtr weights, System.Int32 weightsSize)
    // Offset: 0x1C143C8
    void InternalSetBoneWeights(System::IntPtr bonesPerVertex, int bonesPerVertexSize, System::IntPtr weights, int weightsSize);
    // public Unity.Collections.NativeArray`1<UnityEngine.BoneWeight1> GetAllBoneWeights()
    // Offset: 0x1C14438
    Unity::Collections::NativeArray_1<UnityEngine::BoneWeight1> GetAllBoneWeights();
    // public Unity.Collections.NativeArray`1<System.Byte> GetBonesPerVertex()
    // Offset: 0x1C14574
    Unity::Collections::NativeArray_1<uint8_t> GetBonesPerVertex();
    // private System.Int32 GetAllBoneWeightsArraySize()
    // Offset: 0x1C14534
    int GetAllBoneWeightsArraySize();
    // private System.IntPtr GetAllBoneWeightsArray()
    // Offset: 0x1C144F4
    System::IntPtr GetAllBoneWeightsArray();
    // private System.IntPtr GetBonesPerVertexArray()
    // Offset: 0x1C146A0
    System::IntPtr GetBonesPerVertexArray();
    // private System.Int32 GetBindposeCount()
    // Offset: 0x1C146E0
    int GetBindposeCount();
    // public UnityEngine.Matrix4x4[] get_bindposes()
    // Offset: 0x1C14720
    ::Array<UnityEngine::Matrix4x4>* get_bindposes();
    // public System.Void set_bindposes(UnityEngine.Matrix4x4[] value)
    // Offset: 0x1C14760
    void set_bindposes(::Array<UnityEngine::Matrix4x4>* value);
    // private System.Void GetBoneWeightsNonAllocImpl(out UnityEngine.BoneWeight[] values)
    // Offset: 0x1C147B0
    void GetBoneWeightsNonAllocImpl(::Array<UnityEngine::BoneWeight>*& values);
    // private System.Void GetBindposesNonAllocImpl(out UnityEngine.Matrix4x4[] values)
    // Offset: 0x1C14800
    void GetBindposesNonAllocImpl(::Array<UnityEngine::Matrix4x4>*& values);
    // public System.Boolean get_isReadable()
    // Offset: 0x1C14850
    bool get_isReadable();
    // System.Boolean get_canAccess()
    // Offset: 0x1C14890
    bool get_canAccess();
    // public System.Int32 get_vertexCount()
    // Offset: 0x1C14660
    int get_vertexCount();
    // public System.Int32 get_subMeshCount()
    // Offset: 0x1C148D0
    int get_subMeshCount();
    // public System.Void set_subMeshCount(System.Int32 value)
    // Offset: 0x1C14910
    void set_subMeshCount(int value);
    // public System.Void SetSubMesh(System.Int32 index, UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1C14960
    void SetSubMesh(int index, UnityEngine::Rendering::SubMeshDescriptor desc, UnityEngine::Rendering::MeshUpdateFlags flags);
    // public UnityEngine.Rendering.SubMeshDescriptor GetSubMesh(System.Int32 index)
    // Offset: 0x1C14A30
    UnityEngine::Rendering::SubMeshDescriptor GetSubMesh(int index);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1C14B08
    UnityEngine::Bounds get_bounds();
    // public System.Void set_bounds(UnityEngine.Bounds value)
    // Offset: 0x1C14BC4
    void set_bounds(UnityEngine::Bounds value);
    // private System.Void ClearImpl(System.Boolean keepVertexLayout)
    // Offset: 0x1C14C64
    void ClearImpl(bool keepVertexLayout);
    // private System.Void RecalculateBoundsImpl()
    // Offset: 0x1C14CB4
    void RecalculateBoundsImpl();
    // private System.Void RecalculateNormalsImpl()
    // Offset: 0x1C14CF4
    void RecalculateNormalsImpl();
    // private System.Void RecalculateTangentsImpl()
    // Offset: 0x1C14D34
    void RecalculateTangentsImpl();
    // private System.Void MarkDynamicImpl()
    // Offset: 0x1C14D74
    void MarkDynamicImpl();
    // public System.Void MarkModified()
    // Offset: 0x1C14DB4
    void MarkModified();
    // private System.Void UploadMeshDataImpl(System.Boolean markNoLongerReadable)
    // Offset: 0x1C14DF4
    void UploadMeshDataImpl(bool markNoLongerReadable);
    // private UnityEngine.MeshTopology GetTopologyImpl(System.Int32 submesh)
    // Offset: 0x1C14E44
    UnityEngine::MeshTopology GetTopologyImpl(int submesh);
    // public System.Single GetUVDistributionMetric(System.Int32 uvSetIndex)
    // Offset: 0x1C14E94
    float GetUVDistributionMetric(int uvSetIndex);
    // private System.Void CombineMeshesImpl(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x1C14EE4
    void CombineMeshesImpl(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // private System.Void OptimizeImpl()
    // Offset: 0x1C14F54
    void OptimizeImpl();
    // private System.Void OptimizeIndexBuffersImpl()
    // Offset: 0x1C14F94
    void OptimizeIndexBuffersImpl();
    // private System.Void OptimizeReorderVertexBufferImpl()
    // Offset: 0x1C14FD4
    void OptimizeReorderVertexBufferImpl();
    // UnityEngine.Rendering.VertexAttribute GetUVChannel(System.Int32 uvIndex)
    // Offset: 0x1C15014
    UnityEngine::Rendering::VertexAttribute GetUVChannel(int uvIndex);
    // static System.Int32 DefaultDimensionForChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0x1C150A8
    static int DefaultDimensionForChannel(UnityEngine::Rendering::VertexAttribute channel);
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method, channel, format, dim);
    }
    // private T[] GetAllocArrayFromChannel(UnityEngine.Rendering.VertexAttribute channel)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<T>* GetAllocArrayFromChannel(UnityEngine::Rendering::VertexAttribute channel) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetAllocArrayFromChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllocArrayFromChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___generic__method, channel);
    }
    // private System.Void SetSizedArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Array values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1C15164
    void SetSizedArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Array* values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetSizedNativeArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.IntPtr values, System.Int32 valuesArrayLength, System.Int32 valuesStart, System.Int32 valuesCount)
    // Offset: 0x1C153F0
    void SetSizedNativeArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::IntPtr values, int valuesArrayLength, int valuesStart, int valuesCount);
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, format, dim, values);
    }
    // private System.Void SetArrayForChannel(UnityEngine.Rendering.VertexAttribute channel, T[] values)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetArrayForChannel(UnityEngine::Rendering::VertexAttribute channel, ::Array<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetArrayForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArrayForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, values);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, UnityEngine.Rendering.VertexAttributeFormat format, System.Int32 dim, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, UnityEngine::Rendering::VertexAttributeFormat format, int dim, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, format, dim, values, start, length);
    }
    // private System.Void SetListForChannel(UnityEngine.Rendering.VertexAttribute channel, System.Collections.Generic.List`1<T> values, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetListForChannel(UnityEngine::Rendering::VertexAttribute channel, System::Collections::Generic::List_1<T>* values, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, values, start, length);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim);
    }
    // private System.Void GetListForChannel(System.Collections.Generic.List`1<T> buffer, System.Int32 capacity, UnityEngine.Rendering.VertexAttribute channel, System.Int32 dim, UnityEngine.Rendering.VertexAttributeFormat channelType)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetListForChannel(System::Collections::Generic::List_1<T>* buffer, int capacity, UnityEngine::Rendering::VertexAttribute channel, int dim, UnityEngine::Rendering::VertexAttributeFormat channelType) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetListForChannel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetListForChannel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(channelType)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, buffer, capacity, channel, dim, channelType);
    }
    // public UnityEngine.Vector3[] get_vertices()
    // Offset: 0x1C15674
    ::Array<UnityEngine::Vector3>* get_vertices();
    // public System.Void set_vertices(UnityEngine.Vector3[] value)
    // Offset: 0x1C156C8
    void set_vertices(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector3[] get_normals()
    // Offset: 0x1C1572C
    ::Array<UnityEngine::Vector3>* get_normals();
    // public System.Void set_normals(UnityEngine.Vector3[] value)
    // Offset: 0x1C15780
    void set_normals(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector4[] get_tangents()
    // Offset: 0x1C157E4
    ::Array<UnityEngine::Vector4>* get_tangents();
    // public System.Void set_tangents(UnityEngine.Vector4[] value)
    // Offset: 0x1C15838
    void set_tangents(::Array<UnityEngine::Vector4>* value);
    // public UnityEngine.Vector2[] get_uv()
    // Offset: 0x1C1589C
    ::Array<UnityEngine::Vector2>* get_uv();
    // public System.Void set_uv(UnityEngine.Vector2[] value)
    // Offset: 0x1C158F0
    void set_uv(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv2()
    // Offset: 0x1C15954
    ::Array<UnityEngine::Vector2>* get_uv2();
    // public System.Void set_uv2(UnityEngine.Vector2[] value)
    // Offset: 0x1C159A8
    void set_uv2(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv3()
    // Offset: 0x1C15A0C
    ::Array<UnityEngine::Vector2>* get_uv3();
    // public System.Void set_uv3(UnityEngine.Vector2[] value)
    // Offset: 0x1C15A60
    void set_uv3(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv4()
    // Offset: 0x1C15AC4
    ::Array<UnityEngine::Vector2>* get_uv4();
    // public System.Void set_uv4(UnityEngine.Vector2[] value)
    // Offset: 0x1C15B18
    void set_uv4(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv5()
    // Offset: 0x1C15B7C
    ::Array<UnityEngine::Vector2>* get_uv5();
    // public System.Void set_uv5(UnityEngine.Vector2[] value)
    // Offset: 0x1C15BD0
    void set_uv5(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv6()
    // Offset: 0x1C15C34
    ::Array<UnityEngine::Vector2>* get_uv6();
    // public System.Void set_uv6(UnityEngine.Vector2[] value)
    // Offset: 0x1C15C88
    void set_uv6(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv7()
    // Offset: 0x1C15CEC
    ::Array<UnityEngine::Vector2>* get_uv7();
    // public System.Void set_uv7(UnityEngine.Vector2[] value)
    // Offset: 0x1C15D40
    void set_uv7(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Vector2[] get_uv8()
    // Offset: 0x1C15DA4
    ::Array<UnityEngine::Vector2>* get_uv8();
    // public System.Void set_uv8(UnityEngine.Vector2[] value)
    // Offset: 0x1C15DF8
    void set_uv8(::Array<UnityEngine::Vector2>* value);
    // public UnityEngine.Color[] get_colors()
    // Offset: 0x1C15E5C
    ::Array<UnityEngine::Color>* get_colors();
    // public System.Void set_colors(UnityEngine.Color[] value)
    // Offset: 0x1C15EB0
    void set_colors(::Array<UnityEngine::Color>* value);
    // public UnityEngine.Color32[] get_colors32()
    // Offset: 0x1C15F14
    ::Array<UnityEngine::Color32>* get_colors32();
    // public System.Void set_colors32(UnityEngine.Color32[] value)
    // Offset: 0x1C15F70
    void set_colors32(::Array<UnityEngine::Color32>* value);
    // public System.Void GetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> vertices)
    // Offset: 0x1C15FDC
    void GetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* vertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices)
    // Offset: 0x1C160E4
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(System.Collections.Generic.List`1<UnityEngine.Vector3> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16154
    void SetVertices(System::Collections::Generic::List_1<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices)
    // Offset: 0x1C161D0
    void SetVertices(::Array<UnityEngine::Vector3>* inVertices);
    // public System.Void SetVertices(UnityEngine.Vector3[] inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16228
    void SetVertices(::Array<UnityEngine::Vector3>* inVertices, int start, int length);
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertices(Unity::Collections::NativeArray_1<T> inVertices) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inVertices);
    }
    // public System.Void SetVertices(Unity.Collections.NativeArray`1<T> inVertices, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertices(Unity::Collections::NativeArray_1<T> inVertices, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inVertices), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inVertices, start, length);
    }
    // public System.Void GetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> normals)
    // Offset: 0x1C162C8
    void GetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* normals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals)
    // Offset: 0x1C163D0
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(System.Collections.Generic.List`1<UnityEngine.Vector3> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16440
    void SetNormals(System::Collections::Generic::List_1<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals)
    // Offset: 0x1C164BC
    void SetNormals(::Array<UnityEngine::Vector3>* inNormals);
    // public System.Void SetNormals(UnityEngine.Vector3[] inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16504
    void SetNormals(::Array<UnityEngine::Vector3>* inNormals, int start, int length);
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetNormals(Unity::Collections::NativeArray_1<T> inNormals) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inNormals);
    }
    // public System.Void SetNormals(Unity.Collections.NativeArray`1<T> inNormals, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetNormals(Unity::Collections::NativeArray_1<T> inNormals, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetNormals");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNormals", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inNormals), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inNormals, start, length);
    }
    // public System.Void GetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> tangents)
    // Offset: 0x1C165A4
    void GetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* tangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents)
    // Offset: 0x1C166AC
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(System.Collections.Generic.List`1<UnityEngine.Vector4> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1C1671C
    void SetTangents(System::Collections::Generic::List_1<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents)
    // Offset: 0x1C16798
    void SetTangents(::Array<UnityEngine::Vector4>* inTangents);
    // public System.Void SetTangents(UnityEngine.Vector4[] inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0x1C167E0
    void SetTangents(::Array<UnityEngine::Vector4>* inTangents, int start, int length);
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetTangents(Unity::Collections::NativeArray_1<T> inTangents) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inTangents);
    }
    // public System.Void SetTangents(Unity.Collections.NativeArray`1<T> inTangents, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetTangents(Unity::Collections::NativeArray_1<T> inTangents, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetTangents");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTangents", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inTangents), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inTangents, start, length);
    }
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color> colors)
    // Offset: 0x1C16880
    void GetColors(System::Collections::Generic::List_1<UnityEngine::Color>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors)
    // Offset: 0x1C16988
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1C169F8
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color>* inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color[] inColors)
    // Offset: 0x1C16A74
    void SetColors(::Array<UnityEngine::Color>* inColors);
    // public System.Void SetColors(UnityEngine.Color[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16ABC
    void SetColors(::Array<UnityEngine::Color>* inColors, int start, int length);
    // public System.Void GetColors(System.Collections.Generic.List`1<UnityEngine.Color32> colors)
    // Offset: 0x1C16B5C
    void GetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* colors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors)
    // Offset: 0x1C16C40
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(System.Collections.Generic.List`1<UnityEngine.Color32> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16CB0
    void SetColors(System::Collections::Generic::List_1<UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(UnityEngine.Color32[] inColors)
    // Offset: 0x1C16D34
    void SetColors(::Array<UnityEngine::Color32>* inColors);
    // public System.Void SetColors(UnityEngine.Color32[] inColors, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16D7C
    void SetColors(::Array<UnityEngine::Color32>* inColors, int start, int length);
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetColors(Unity::Collections::NativeArray_1<T> inColors) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inColors);
    }
    // public System.Void SetColors(Unity.Collections.NativeArray`1<T> inColors, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetColors(Unity::Collections::NativeArray_1<T> inColors, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetColors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inColors), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, inColors, start, length);
    }
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Collections.Generic.List`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUvsImpl(int uvIndex, int dim, System::Collections::Generic::List_1<T>* uvs, int start, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUvsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUvsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(dim), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, uvIndex, dim, uvs, start, length);
    }
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1C16DF0
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1C16EEC
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1C16FE8
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16E68
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1C16F64
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1C17060
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs, int start, int length);
    // private System.Void SetUvsImpl(System.Int32 uvIndex, System.Int32 dim, System.Array uvs, System.Int32 arrayStart, System.Int32 arraySize)
    // Offset: 0x1C170E4
    void SetUvsImpl(int uvIndex, int dim, System::Array* uvs, int arrayStart, int arraySize);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs)
    // Offset: 0x1C17214
    void SetUVs(int channel, ::Array<UnityEngine::Vector2>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs)
    // Offset: 0x1C17284
    void SetUVs(int channel, ::Array<UnityEngine::Vector3>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs)
    // Offset: 0x1C172F4
    void SetUVs(int channel, ::Array<UnityEngine::Vector4>* uvs);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector2[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1C17270
    void SetUVs(int channel, ::Array<UnityEngine::Vector2>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector3[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1C172E0
    void SetUVs(int channel, ::Array<UnityEngine::Vector3>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, UnityEngine.Vector4[] uvs, System.Int32 start, System.Int32 length)
    // Offset: 0x1C17350
    void SetUVs(int channel, ::Array<UnityEngine::Vector4>* uvs, int start, int length);
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUVs(int channel, Unity::Collections::NativeArray_1<T> uvs) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, uvs);
    }
    // public System.Void SetUVs(System.Int32 channel, Unity.Collections.NativeArray`1<T> uvs, System.Int32 start, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetUVs(int channel, Unity::Collections::NativeArray_1<T> uvs, int start, int length) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetUVs");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetUVs", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channel), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, channel, uvs, start, length);
    }
    // private System.Void GetUVsImpl(System.Int32 uvIndex, System.Collections.Generic.List`1<T> uvs, System.Int32 dim)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetUVsImpl(int uvIndex, System::Collections::Generic::List_1<T>* uvs, int dim) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::GetUVsImpl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUVsImpl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uvIndex), ::il2cpp_utils::ExtractType(uvs), ::il2cpp_utils::ExtractType(dim)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, uvIndex, uvs, dim);
    }
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x1C17364
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector2>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector3> uvs)
    // Offset: 0x1C173D0
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector3>* uvs);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1C1743C
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Int32 get_vertexAttributeCount()
    // Offset: 0x1C174A8
    int get_vertexAttributeCount();
    // public UnityEngine.Rendering.VertexAttributeDescriptor[] GetVertexAttributes()
    // Offset: 0x1C174E8
    ::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* GetVertexAttributes();
    // public System.Int32 GetVertexAttributes(UnityEngine.Rendering.VertexAttributeDescriptor[] attributes)
    // Offset: 0x1C1757C
    int GetVertexAttributes(::Array<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Int32 GetVertexAttributes(System.Collections.Generic.List`1<UnityEngine.Rendering.VertexAttributeDescriptor> attributes)
    // Offset: 0x1C175CC
    int GetVertexAttributes(System::Collections::Generic::List_1<UnityEngine::Rendering::VertexAttributeDescriptor>* attributes);
    // public System.Void SetVertexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(::Array<T>* data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // public System.Void SetVertexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, System.Int32 stream, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetVertexBufferData(System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, int stream, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetVertexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, stream, flags);
    }
    // private System.Void PrintErrorCantAccessIndices()
    // Offset: 0x1C1761C
    void PrintErrorCantAccessIndices();
    // private System.Boolean CheckCanAccessSubmesh(System.Int32 submesh, System.Boolean errorAboutTriangles)
    // Offset: 0x1C17734
    bool CheckCanAccessSubmesh(int submesh, bool errorAboutTriangles);
    // private System.Boolean CheckCanAccessSubmeshTriangles(System.Int32 submesh)
    // Offset: 0x1C17864
    bool CheckCanAccessSubmeshTriangles(int submesh);
    // private System.Boolean CheckCanAccessSubmeshIndices(System.Int32 submesh)
    // Offset: 0x1C1786C
    bool CheckCanAccessSubmeshIndices(int submesh);
    // public System.Int32[] get_triangles()
    // Offset: 0x1C17874
    ::Array<int>* get_triangles();
    // public System.Void set_triangles(System.Int32[] value)
    // Offset: 0x1C17930
    void set_triangles(::Array<int>* value);
    // public System.Int32[] GetTriangles(System.Int32 submesh)
    // Offset: 0x1C17AA4
    ::Array<int>* GetTriangles(int submesh);
    // public System.Int32[] GetTriangles(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C17AAC
    ::Array<int>* GetTriangles(int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1C17B5C
    void GetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C17B64
    void GetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool applyBaseVertex);
    // public System.Void GetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C17CF8
    void GetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool applyBaseVertex);
    // public System.Int32[] GetIndices(System.Int32 submesh)
    // Offset: 0x1C17E8C
    ::Array<int>* GetIndices(int submesh);
    // public System.Int32[] GetIndices(System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C17E94
    ::Array<int>* GetIndices(int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh)
    // Offset: 0x1C17F44
    void GetIndices(System::Collections::Generic::List_1<int>* indices, int submesh);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C17F4C
    void GetIndices(System::Collections::Generic::List_1<int>* indices, int submesh, bool applyBaseVertex);
    // public System.Void GetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 submesh, System.Boolean applyBaseVertex)
    // Offset: 0x1C181A4
    void GetIndices(System::Collections::Generic::List_1<uint16_t>* indices, int submesh, bool applyBaseVertex);
    // public System.Void SetIndexBufferData(Unity.Collections.NativeArray`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(Unity::Collections::NativeArray_1<T> data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(T[] data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(::Array<T>* data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.Void SetIndexBufferData(System.Collections.Generic.List`1<T> data, System.Int32 dataStart, System.Int32 meshBufferStart, System.Int32 count, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndexBufferData(System::Collections::Generic::List_1<T>* data, int dataStart, int meshBufferStart, int count, UnityEngine::Rendering::MeshUpdateFlags flags) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndexBufferData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndexBufferData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(dataStart), ::il2cpp_utils::ExtractType(meshBufferStart), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(flags)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, data, dataStart, meshBufferStart, count, flags);
    }
    // public System.UInt32 GetIndexStart(System.Int32 submesh)
    // Offset: 0x1C18318
    uint GetIndexStart(int submesh);
    // public System.UInt32 GetIndexCount(System.Int32 submesh)
    // Offset: 0x1C180C0
    uint GetIndexCount(int submesh);
    // public System.UInt32 GetBaseVertex(System.Int32 submesh)
    // Offset: 0x1C183FC
    uint GetBaseVertex(int submesh);
    // private System.Void CheckIndicesArrayRange(System.Int32 valuesLength, System.Int32 start, System.Int32 length)
    // Offset: 0x1C184E0
    void CheckIndicesArrayRange(int valuesLength, int start, int length);
    // private System.Void SetTrianglesImpl(System.Int32 submesh, UnityEngine.Rendering.IndexFormat indicesFormat, System.Array triangles, System.Int32 trianglesArrayLength, System.Int32 start, System.Int32 length, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C179F8
    void SetTrianglesImpl(int submesh, UnityEngine::Rendering::IndexFormat indicesFormat, System::Array* triangles, int trianglesArrayLength, int start, int length, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh)
    // Offset: 0x1C18690
    void SetTriangles(::Array<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1C1870C
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C1869C
    void SetTriangles(::Array<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Int32[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18718
    void SetTriangles(::Array<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C187BC
    void SetTriangles(::Array<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.UInt16[] triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C1882C
    void SetTriangles(::Array<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh)
    // Offset: 0x1C188D0
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1C1896C
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C188DC
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.Int32> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18978
    void SetTriangles(System::Collections::Generic::List_1<int>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18A6C
    void SetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetTriangles(System.Collections.Generic.List`1<System.UInt16> triangles, System.Int32 trianglesStart, System.Int32 trianglesLength, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18AFC
    void SetTriangles(System::Collections::Generic::List_1<uint16_t>* triangles, int trianglesStart, int trianglesLength, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh)
    // Offset: 0x1C18BF0
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds)
    // Offset: 0x1C18C80
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds);
    // public System.Void SetIndices(System.Int32[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18BFC
    void SetIndices(::Array<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Int32[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18C8C
    void SetIndices(::Array<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18D7C
    void SetIndices(::Array<uint16_t>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.UInt16[] indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18E00
    void SetIndices(::Array<uint16_t>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndices(Unity::Collections::NativeArray_1<T> indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, indices, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(Unity.Collections.NativeArray`1<T> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetIndices(Unity::Collections::NativeArray_1<T> indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex) {
      static_assert(is_value_type_v<T>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::SetIndices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIndices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices), ::il2cpp_utils::ExtractType(indicesStart), ::il2cpp_utils::ExtractType(indicesLength), ::il2cpp_utils::ExtractType(topology), ::il2cpp_utils::ExtractType(submesh), ::il2cpp_utils::ExtractType(calculateBounds), ::il2cpp_utils::ExtractType(baseVertex)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, indices, indicesStart, indicesLength, topology, submesh, calculateBounds, baseVertex);
    }
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18EF0
    void SetIndices(System::Collections::Generic::List_1<int>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.Int32> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C18F9C
    void SetIndices(System::Collections::Generic::List_1<int>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C190DC
    void SetIndices(System::Collections::Generic::List_1<uint16_t>* indices, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void SetIndices(System.Collections.Generic.List`1<System.UInt16> indices, System.Int32 indicesStart, System.Int32 indicesLength, UnityEngine.MeshTopology topology, System.Int32 submesh, System.Boolean calculateBounds, System.Int32 baseVertex)
    // Offset: 0x1C19188
    void SetIndices(System::Collections::Generic::List_1<uint16_t>* indices, int indicesStart, int indicesLength, UnityEngine::MeshTopology topology, int submesh, bool calculateBounds, int baseVertex);
    // public System.Void GetBindposes(System.Collections.Generic.List`1<UnityEngine.Matrix4x4> bindposes)
    // Offset: 0x1C192C8
    void GetBindposes(System::Collections::Generic::List_1<UnityEngine::Matrix4x4>* bindposes);
    // public System.Void GetBoneWeights(System.Collections.Generic.List`1<UnityEngine.BoneWeight> boneWeights)
    // Offset: 0x1C193E0
    void GetBoneWeights(System::Collections::Generic::List_1<UnityEngine::BoneWeight>* boneWeights);
    // public UnityEngine.BoneWeight[] get_boneWeights()
    // Offset: 0x1C19524
    ::Array<UnityEngine::BoneWeight>* get_boneWeights();
    // public System.Void set_boneWeights(UnityEngine.BoneWeight[] value)
    // Offset: 0x1C19564
    void set_boneWeights(::Array<UnityEngine::BoneWeight>* value);
    // public System.Void Clear(System.Boolean keepVertexLayout)
    // Offset: 0x1C195B4
    void Clear(bool keepVertexLayout);
    // public System.Void Clear()
    // Offset: 0x1C19604
    void Clear();
    // public System.Void RecalculateBounds()
    // Offset: 0x1C19648
    void RecalculateBounds();
    // public System.Void RecalculateNormals()
    // Offset: 0x1C19738
    void RecalculateNormals();
    // public System.Void RecalculateTangents()
    // Offset: 0x1C19828
    void RecalculateTangents();
    // public System.Void MarkDynamic()
    // Offset: 0x1C19918
    void MarkDynamic();
    // public System.Void UploadMeshData(System.Boolean markNoLongerReadable)
    // Offset: 0x1C19990
    void UploadMeshData(bool markNoLongerReadable);
    // public System.Void Optimize()
    // Offset: 0x1C19A1C
    void Optimize();
    // public System.Void OptimizeIndexBuffers()
    // Offset: 0x1C19B0C
    void OptimizeIndexBuffers();
    // public System.Void OptimizeReorderVertexBuffer()
    // Offset: 0x1C19BFC
    void OptimizeReorderVertexBuffer();
    // public UnityEngine.MeshTopology GetTopology(System.Int32 submesh)
    // Offset: 0x1C19CEC
    UnityEngine::MeshTopology GetTopology(int submesh);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices, System.Boolean hasLightmapData)
    // Offset: 0x1C19E10
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices, bool hasLightmapData);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes, System.Boolean useMatrices)
    // Offset: 0x1C19E80
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes, bool useMatrices);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine, System.Boolean mergeSubMeshes)
    // Offset: 0x1C19EEC
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine, bool mergeSubMeshes);
    // public System.Void CombineMeshes(UnityEngine.CombineInstance[] combine)
    // Offset: 0x1C19F4C
    void CombineMeshes(::Array<UnityEngine::CombineInstance>* combine);
    // private System.Void GetVertexAttribute_Injected(System.Int32 index, out UnityEngine.Rendering.VertexAttributeDescriptor ret)
    // Offset: 0x1C13614
    void GetVertexAttribute_Injected(int index, UnityEngine::Rendering::VertexAttributeDescriptor& ret);
    // private System.Void SetSubMesh_Injected(System.Int32 index, ref UnityEngine.Rendering.SubMeshDescriptor desc, UnityEngine.Rendering.MeshUpdateFlags flags)
    // Offset: 0x1C149C8
    void SetSubMesh_Injected(int index, UnityEngine::Rendering::SubMeshDescriptor& desc, UnityEngine::Rendering::MeshUpdateFlags flags);
    // private System.Void GetSubMesh_Injected(System.Int32 index, out UnityEngine.Rendering.SubMeshDescriptor ret)
    // Offset: 0x1C14AB0
    void GetSubMesh_Injected(int index, UnityEngine::Rendering::SubMeshDescriptor& ret);
    // private System.Void get_bounds_Injected(out UnityEngine.Bounds ret)
    // Offset: 0x1C14B74
    void get_bounds_Injected(UnityEngine::Bounds& ret);
    // private System.Void set_bounds_Injected(ref UnityEngine.Bounds value)
    // Offset: 0x1C14C14
    void set_bounds_Injected(UnityEngine::Bounds& value);
    // public System.Void .ctor()
    // Offset: 0x1C1303C
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mesh*, creationType>()));
    }
  }; // UnityEngine.Mesh
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Mesh*, "UnityEngine", "Mesh");
// Writing MetadataGetter for method: UnityEngine::Mesh::Internal_Create
// Il2CppName: Internal_Create
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::FromInstanceID
// Il2CppName: FromInstanceID
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_indexFormat
// Il2CppName: get_indexFormat
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_indexFormat
// Il2CppName: set_indexFormat
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferParams
// Il2CppName: SetIndexBufferParams
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetIndexBufferData
// Il2CppName: InternalSetIndexBufferData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetIndexBufferDataFromArray
// Il2CppName: InternalSetIndexBufferDataFromArray
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferParams
// Il2CppName: SetVertexBufferParams
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetVertexBufferData
// Il2CppName: InternalSetVertexBufferData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetVertexBufferDataFromArray
// Il2CppName: InternalSetVertexBufferDataFromArray
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesAlloc
// Il2CppName: GetVertexAttributesAlloc
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesArray
// Il2CppName: GetVertexAttributesArray
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributesList
// Il2CppName: GetVertexAttributesList
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeCountImpl
// Il2CppName: GetVertexAttributeCountImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttribute
// Il2CppName: GetVertexAttribute
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexStartImpl
// Il2CppName: GetIndexStartImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexCountImpl
// Il2CppName: GetIndexCountImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesCountImpl
// Il2CppName: GetTrianglesCountImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBaseVertexImpl
// Il2CppName: GetBaseVertexImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesImpl
// Il2CppName: GetTrianglesImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesImpl
// Il2CppName: GetIndicesImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndicesImpl
// Il2CppName: SetIndicesImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndicesNativeArrayImpl
// Il2CppName: SetIndicesNativeArrayImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesNonAllocImpl
// Il2CppName: GetTrianglesNonAllocImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTrianglesNonAllocImpl16
// Il2CppName: GetTrianglesNonAllocImpl16
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesNonAllocImpl
// Il2CppName: GetIndicesNonAllocImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndicesNonAllocImpl16
// Il2CppName: GetIndicesNonAllocImpl16
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::PrintErrorCantAccessChannel
// Il2CppName: PrintErrorCantAccessChannel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::HasVertexAttribute
// Il2CppName: HasVertexAttribute
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeDimension
// Il2CppName: GetVertexAttributeDimension
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributeFormat
// Il2CppName: GetVertexAttributeFormat
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannelImpl
// Il2CppName: SetArrayForChannelImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNativeArrayForChannelImpl
// Il2CppName: SetNativeArrayForChannelImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannelImpl
// Il2CppName: GetAllocArrayFromChannelImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetArrayFromChannelImpl
// Il2CppName: GetArrayFromChannelImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexBufferCount
// Il2CppName: get_vertexBufferCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNativeVertexBufferPtr
// Il2CppName: GetNativeVertexBufferPtr
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNativeIndexBufferPtr
// Il2CppName: GetNativeIndexBufferPtr
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_blendShapeCount
// Il2CppName: get_blendShapeCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::ClearBlendShapes
// Il2CppName: ClearBlendShapes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeName
// Il2CppName: GetBlendShapeName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeIndex
// Il2CppName: GetBlendShapeIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameCount
// Il2CppName: GetBlendShapeFrameCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameWeight
// Il2CppName: GetBlendShapeFrameWeight
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBlendShapeFrameVertices
// Il2CppName: GetBlendShapeFrameVertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::AddBlendShapeFrame
// Il2CppName: AddBlendShapeFrame
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::HasBoneWeights
// Il2CppName: HasBoneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightsImpl
// Il2CppName: GetBoneWeightsImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetBoneWeightsImpl
// Il2CppName: SetBoneWeightsImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetBoneWeights
// Il2CppName: SetBoneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::InternalSetBoneWeights
// Il2CppName: InternalSetBoneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeights
// Il2CppName: GetAllBoneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBonesPerVertex
// Il2CppName: GetBonesPerVertex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeightsArraySize
// Il2CppName: GetAllBoneWeightsArraySize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllBoneWeightsArray
// Il2CppName: GetAllBoneWeightsArray
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBonesPerVertexArray
// Il2CppName: GetBonesPerVertexArray
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposeCount
// Il2CppName: GetBindposeCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bindposes
// Il2CppName: get_bindposes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bindposes
// Il2CppName: set_bindposes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeightsNonAllocImpl
// Il2CppName: GetBoneWeightsNonAllocImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposesNonAllocImpl
// Il2CppName: GetBindposesNonAllocImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_isReadable
// Il2CppName: get_isReadable
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_canAccess
// Il2CppName: get_canAccess
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexCount
// Il2CppName: get_vertexCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_subMeshCount
// Il2CppName: get_subMeshCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_subMeshCount
// Il2CppName: set_subMeshCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMesh
// Il2CppName: SetSubMesh
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetSubMesh
// Il2CppName: GetSubMesh
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bounds
// Il2CppName: get_bounds
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bounds
// Il2CppName: set_bounds
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::ClearImpl
// Il2CppName: ClearImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBoundsImpl
// Il2CppName: RecalculateBoundsImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormalsImpl
// Il2CppName: RecalculateNormalsImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangentsImpl
// Il2CppName: RecalculateTangentsImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkDynamicImpl
// Il2CppName: MarkDynamicImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkModified
// Il2CppName: MarkModified
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::UploadMeshDataImpl
// Il2CppName: UploadMeshDataImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTopologyImpl
// Il2CppName: GetTopologyImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVDistributionMetric
// Il2CppName: GetUVDistributionMetric
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshesImpl
// Il2CppName: CombineMeshesImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeImpl
// Il2CppName: OptimizeImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeIndexBuffersImpl
// Il2CppName: OptimizeIndexBuffersImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeReorderVertexBufferImpl
// Il2CppName: OptimizeReorderVertexBufferImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVChannel
// Il2CppName: GetUVChannel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::DefaultDimensionForChannel
// Il2CppName: DefaultDimensionForChannel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannel
// Il2CppName: GetAllocArrayFromChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetAllocArrayFromChannel
// Il2CppName: GetAllocArrayFromChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSizedArrayForChannel
// Il2CppName: SetSizedArrayForChannel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSizedNativeArrayForChannel
// Il2CppName: SetSizedNativeArrayForChannel
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannel
// Il2CppName: SetArrayForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetArrayForChannel
// Il2CppName: SetArrayForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetListForChannel
// Il2CppName: SetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetListForChannel
// Il2CppName: SetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetListForChannel
// Il2CppName: GetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetListForChannel
// Il2CppName: GetListForChannel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertices
// Il2CppName: get_vertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_vertices
// Il2CppName: set_vertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_normals
// Il2CppName: get_normals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_normals
// Il2CppName: set_normals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_tangents
// Il2CppName: get_tangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_tangents
// Il2CppName: set_tangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv
// Il2CppName: get_uv
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv
// Il2CppName: set_uv
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv2
// Il2CppName: get_uv2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv2
// Il2CppName: set_uv2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv3
// Il2CppName: get_uv3
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv3
// Il2CppName: set_uv3
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv4
// Il2CppName: get_uv4
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv4
// Il2CppName: set_uv4
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv5
// Il2CppName: get_uv5
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv5
// Il2CppName: set_uv5
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv6
// Il2CppName: get_uv6
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv6
// Il2CppName: set_uv6
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv7
// Il2CppName: get_uv7
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv7
// Il2CppName: set_uv7
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_uv8
// Il2CppName: get_uv8
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_uv8
// Il2CppName: set_uv8
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_colors
// Il2CppName: get_colors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_colors
// Il2CppName: set_colors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_colors32
// Il2CppName: get_colors32
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_colors32
// Il2CppName: set_colors32
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertices
// Il2CppName: GetVertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertices
// Il2CppName: SetVertices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetNormals
// Il2CppName: GetNormals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetNormals
// Il2CppName: SetNormals
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTangents
// Il2CppName: GetTangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTangents
// Il2CppName: SetTangents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetColors
// Il2CppName: GetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetColors
// Il2CppName: GetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetColors
// Il2CppName: SetColors
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUvsImpl
// Il2CppName: SetUvsImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUvsImpl
// Il2CppName: SetUvsImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetUVs
// Il2CppName: SetUVs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVsImpl
// Il2CppName: GetUVsImpl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetUVs
// Il2CppName: GetUVs
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_vertexAttributeCount
// Il2CppName: get_vertexAttributeCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttributes
// Il2CppName: GetVertexAttributes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetVertexBufferData
// Il2CppName: SetVertexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::PrintErrorCantAccessIndices
// Il2CppName: PrintErrorCantAccessIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmesh
// Il2CppName: CheckCanAccessSubmesh
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmeshTriangles
// Il2CppName: CheckCanAccessSubmeshTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckCanAccessSubmeshIndices
// Il2CppName: CheckCanAccessSubmeshIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_triangles
// Il2CppName: get_triangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_triangles
// Il2CppName: set_triangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTriangles
// Il2CppName: GetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndices
// Il2CppName: GetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndexBufferData
// Il2CppName: SetIndexBufferData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexStart
// Il2CppName: GetIndexStart
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetIndexCount
// Il2CppName: GetIndexCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBaseVertex
// Il2CppName: GetBaseVertex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CheckIndicesArrayRange
// Il2CppName: CheckIndicesArrayRange
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTrianglesImpl
// Il2CppName: SetTrianglesImpl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetTriangles
// Il2CppName: SetTriangles
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetIndices
// Il2CppName: SetIndices
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBindposes
// Il2CppName: GetBindposes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetBoneWeights
// Il2CppName: GetBoneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_boneWeights
// Il2CppName: get_boneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_boneWeights
// Il2CppName: set_boneWeights
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::Clear
// Il2CppName: Clear
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::Clear
// Il2CppName: Clear
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateBounds
// Il2CppName: RecalculateBounds
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateNormals
// Il2CppName: RecalculateNormals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::RecalculateTangents
// Il2CppName: RecalculateTangents
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::MarkDynamic
// Il2CppName: MarkDynamic
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::UploadMeshData
// Il2CppName: UploadMeshData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::Optimize
// Il2CppName: Optimize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeIndexBuffers
// Il2CppName: OptimizeIndexBuffers
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::OptimizeReorderVertexBuffer
// Il2CppName: OptimizeReorderVertexBuffer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetTopology
// Il2CppName: GetTopology
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::CombineMeshes
// Il2CppName: CombineMeshes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetVertexAttribute_Injected
// Il2CppName: GetVertexAttribute_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::SetSubMesh_Injected
// Il2CppName: SetSubMesh_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::GetSubMesh_Injected
// Il2CppName: GetSubMesh_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::get_bounds_Injected
// Il2CppName: get_bounds_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::set_bounds_Injected
// Il2CppName: set_bounds_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Mesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
