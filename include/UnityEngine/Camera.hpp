// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RenderingPath
  struct RenderingPath;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: CameraClearFlags
  struct CameraClearFlags;
  // Forward declaring type: DepthTextureMode
  struct DepthTextureMode;
  // Forward declaring type: Rect
  struct Rect;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector4
  struct Vector4;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: StereoTargetEyeMask
  struct StereoTargetEyeMask;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Shader
  class Shader;
}
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CameraEvent
  struct CameraEvent;
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Camera
  // [NativeHeaderAttribute] Offset: D8E0A0
  // [UsedByNativeCodeAttribute] Offset: D8E0A0
  // [NativeHeaderAttribute] Offset: D8E0A0
  // [NativeHeaderAttribute] Offset: D8E0A0
  // [NativeHeaderAttribute] Offset: D8E0A0
  // [RequireComponent] Offset: D8E0A0
  // [NativeHeaderAttribute] Offset: D8E0A0
  // [NativeHeaderAttribute] Offset: D8E0A0
  // [NativeHeaderAttribute] Offset: D8E0A0
  class Camera : public UnityEngine::Behaviour {
    public:
    // Nested type: UnityEngine::Camera::StereoscopicEye
    struct StereoscopicEye;
    // Nested type: UnityEngine::Camera::MonoOrStereoscopicEye
    struct MonoOrStereoscopicEye;
    // Nested type: UnityEngine::Camera::CameraCallback
    class CameraCallback;
    // Creating value type constructor for type: Camera
    Camera() noexcept {}
    // Get static field: static public UnityEngine.Camera/CameraCallback onPreCull
    static UnityEngine::Camera::CameraCallback* _get_onPreCull();
    // Set static field: static public UnityEngine.Camera/CameraCallback onPreCull
    static void _set_onPreCull(UnityEngine::Camera::CameraCallback* value);
    // Get static field: static public UnityEngine.Camera/CameraCallback onPreRender
    static UnityEngine::Camera::CameraCallback* _get_onPreRender();
    // Set static field: static public UnityEngine.Camera/CameraCallback onPreRender
    static void _set_onPreRender(UnityEngine::Camera::CameraCallback* value);
    // Get static field: static public UnityEngine.Camera/CameraCallback onPostRender
    static UnityEngine::Camera::CameraCallback* _get_onPostRender();
    // Set static field: static public UnityEngine.Camera/CameraCallback onPostRender
    static void _set_onPostRender(UnityEngine::Camera::CameraCallback* value);
    // public System.Single get_nearClipPlane()
    // Offset: 0x1B8DE44
    float get_nearClipPlane();
    // public System.Void set_nearClipPlane(System.Single value)
    // Offset: 0x1B8DE84
    void set_nearClipPlane(float value);
    // public System.Single get_farClipPlane()
    // Offset: 0x1B8DED4
    float get_farClipPlane();
    // public System.Void set_farClipPlane(System.Single value)
    // Offset: 0x1B8DF14
    void set_farClipPlane(float value);
    // public System.Single get_fieldOfView()
    // Offset: 0x1B8DF64
    float get_fieldOfView();
    // public System.Void set_fieldOfView(System.Single value)
    // Offset: 0x1B8DFA4
    void set_fieldOfView(float value);
    // public System.Void set_renderingPath(UnityEngine.RenderingPath value)
    // Offset: 0x1B8DFF4
    void set_renderingPath(UnityEngine::RenderingPath value);
    // public System.Void set_allowHDR(System.Boolean value)
    // Offset: 0x1B8E044
    void set_allowHDR(bool value);
    // public System.Void set_allowMSAA(System.Boolean value)
    // Offset: 0x1B8E094
    void set_allowMSAA(bool value);
    // public System.Void set_forceIntoRenderTexture(System.Boolean value)
    // Offset: 0x1B8E0E4
    void set_forceIntoRenderTexture(bool value);
    // public System.Void set_orthographicSize(System.Single value)
    // Offset: 0x1B8E134
    void set_orthographicSize(float value);
    // public System.Boolean get_orthographic()
    // Offset: 0x1B8E184
    bool get_orthographic();
    // public System.Void set_orthographic(System.Boolean value)
    // Offset: 0x1B8E1C4
    void set_orthographic(bool value);
    // public System.Single get_depth()
    // Offset: 0x1B8E214
    float get_depth();
    // public System.Void set_depth(System.Single value)
    // Offset: 0x1B8E254
    void set_depth(float value);
    // public System.Single get_aspect()
    // Offset: 0x1B8E2A4
    float get_aspect();
    // public System.Void set_aspect(System.Single value)
    // Offset: 0x1B8E2E4
    void set_aspect(float value);
    // public System.Int32 get_cullingMask()
    // Offset: 0x1B8E334
    int get_cullingMask();
    // public System.Void set_cullingMask(System.Int32 value)
    // Offset: 0x1B8E374
    void set_cullingMask(int value);
    // public System.Int32 get_eventMask()
    // Offset: 0x1B8E3C4
    int get_eventMask();
    // public System.Void set_useOcclusionCulling(System.Boolean value)
    // Offset: 0x1B8E404
    void set_useOcclusionCulling(bool value);
    // public UnityEngine.Color get_backgroundColor()
    // Offset: 0x1B8E454
    UnityEngine::Color get_backgroundColor();
    // public System.Void set_backgroundColor(UnityEngine.Color value)
    // Offset: 0x1B8E500
    void set_backgroundColor(UnityEngine::Color value);
    // public UnityEngine.CameraClearFlags get_clearFlags()
    // Offset: 0x1B8E5A8
    UnityEngine::CameraClearFlags get_clearFlags();
    // public System.Void set_clearFlags(UnityEngine.CameraClearFlags value)
    // Offset: 0x1B8E5E8
    void set_clearFlags(UnityEngine::CameraClearFlags value);
    // public UnityEngine.DepthTextureMode get_depthTextureMode()
    // Offset: 0x1B8E638
    UnityEngine::DepthTextureMode get_depthTextureMode();
    // public System.Void set_depthTextureMode(UnityEngine.DepthTextureMode value)
    // Offset: 0x1B8E678
    void set_depthTextureMode(UnityEngine::DepthTextureMode value);
    // public UnityEngine.Rect get_rect()
    // Offset: 0x1B8E6C8
    UnityEngine::Rect get_rect();
    // public System.Void set_rect(UnityEngine.Rect value)
    // Offset: 0x1B8E774
    void set_rect(UnityEngine::Rect value);
    // public UnityEngine.Rect get_pixelRect()
    // Offset: 0x1B8E81C
    UnityEngine::Rect get_pixelRect();
    // public System.Int32 get_pixelWidth()
    // Offset: 0x1B8E8C8
    int get_pixelWidth();
    // public System.Int32 get_pixelHeight()
    // Offset: 0x1B8E908
    int get_pixelHeight();
    // public UnityEngine.RenderTexture get_targetTexture()
    // Offset: 0x1B8E948
    UnityEngine::RenderTexture* get_targetTexture();
    // public System.Void set_targetTexture(UnityEngine.RenderTexture value)
    // Offset: 0x1B8E988
    void set_targetTexture(UnityEngine::RenderTexture* value);
    // public System.Int32 get_targetDisplay()
    // Offset: 0x1B8E9D8
    int get_targetDisplay();
    // public System.Void set_targetDisplay(System.Int32 value)
    // Offset: 0x1B8EA18
    void set_targetDisplay(int value);
    // public UnityEngine.Matrix4x4 get_worldToCameraMatrix()
    // Offset: 0x1B8EA68
    UnityEngine::Matrix4x4 get_worldToCameraMatrix();
    // public System.Void set_worldToCameraMatrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x1B8EB30
    void set_worldToCameraMatrix(UnityEngine::Matrix4x4 value);
    // public UnityEngine.Matrix4x4 get_projectionMatrix()
    // Offset: 0x1B8EBD0
    UnityEngine::Matrix4x4 get_projectionMatrix();
    // public System.Void set_projectionMatrix(UnityEngine.Matrix4x4 value)
    // Offset: 0x1B8EC98
    void set_projectionMatrix(UnityEngine::Matrix4x4 value);
    // public System.Void ResetWorldToCameraMatrix()
    // Offset: 0x1B8ED38
    void ResetWorldToCameraMatrix();
    // public UnityEngine.Matrix4x4 CalculateObliqueMatrix(UnityEngine.Vector4 clipPlane)
    // Offset: 0x1B8ED78
    UnityEngine::Matrix4x4 CalculateObliqueMatrix(UnityEngine::Vector4 clipPlane);
    // public UnityEngine.Vector3 WorldToScreenPoint(UnityEngine.Vector3 position, UnityEngine.Camera/MonoOrStereoscopicEye eye)
    // Offset: 0x1B8EE54
    UnityEngine::Vector3 WorldToScreenPoint(UnityEngine::Vector3 position, UnityEngine::Camera::MonoOrStereoscopicEye eye);
    // public UnityEngine.Vector3 ViewportToWorldPoint(UnityEngine.Vector3 position, UnityEngine.Camera/MonoOrStereoscopicEye eye)
    // Offset: 0x1B8EF38
    UnityEngine::Vector3 ViewportToWorldPoint(UnityEngine::Vector3 position, UnityEngine::Camera::MonoOrStereoscopicEye eye);
    // public UnityEngine.Vector3 WorldToScreenPoint(UnityEngine.Vector3 position)
    // Offset: 0x1B8F01C
    UnityEngine::Vector3 WorldToScreenPoint(UnityEngine::Vector3 position);
    // public UnityEngine.Vector3 ScreenToViewportPoint(UnityEngine.Vector3 position)
    // Offset: 0x1B8F024
    UnityEngine::Vector3 ScreenToViewportPoint(UnityEngine::Vector3 position);
    // private UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector2 pos, UnityEngine.Camera/MonoOrStereoscopicEye eye)
    // Offset: 0x1B8F0E8
    UnityEngine::Ray ScreenPointToRay(UnityEngine::Vector2 pos, UnityEngine::Camera::MonoOrStereoscopicEye eye);
    // public UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector3 pos, UnityEngine.Camera/MonoOrStereoscopicEye eye)
    // Offset: 0x1B8F1D4
    UnityEngine::Ray ScreenPointToRay(UnityEngine::Vector3 pos, UnityEngine::Camera::MonoOrStereoscopicEye eye);
    // public UnityEngine.Ray ScreenPointToRay(UnityEngine.Vector3 pos)
    // Offset: 0x1B8F2A4
    UnityEngine::Ray ScreenPointToRay(UnityEngine::Vector3 pos);
    // static public UnityEngine.Camera get_main()
    // Offset: 0x1B8F2E8
    static UnityEngine::Camera* get_main();
    // static public UnityEngine.Camera get_current()
    // Offset: 0x1B8F31C
    static UnityEngine::Camera* get_current();
    // public System.Boolean get_stereoEnabled()
    // Offset: 0x1B8F350
    bool get_stereoEnabled();
    // public UnityEngine.StereoTargetEyeMask get_stereoTargetEye()
    // Offset: 0x1B8F390
    UnityEngine::StereoTargetEyeMask get_stereoTargetEye();
    // public System.Void set_stereoTargetEye(UnityEngine.StereoTargetEyeMask value)
    // Offset: 0x1B8F3D0
    void set_stereoTargetEye(UnityEngine::StereoTargetEyeMask value);
    // public UnityEngine.Matrix4x4 GetStereoProjectionMatrix(UnityEngine.Camera/StereoscopicEye eye)
    // Offset: 0x1B8F420
    UnityEngine::Matrix4x4 GetStereoProjectionMatrix(UnityEngine::Camera::StereoscopicEye eye);
    // static private System.Int32 GetAllCamerasCount()
    // Offset: 0x1B8F4F8
    static int GetAllCamerasCount();
    // static private System.Int32 GetAllCamerasImpl(out UnityEngine.Camera[] cam)
    // Offset: 0x1B8F52C
    static int GetAllCamerasImpl(::Array<UnityEngine::Camera*>*& cam);
    // static public System.Int32 get_allCamerasCount()
    // Offset: 0x1B8F56C
    static int get_allCamerasCount();
    // static public System.Int32 GetAllCameras(UnityEngine.Camera[] cameras)
    // Offset: 0x1B8F5A0
    static int GetAllCameras(::Array<UnityEngine::Camera*>* cameras);
    // private System.Boolean RenderToCubemapImpl(UnityEngine.Texture tex, System.Int32 faceMask)
    // Offset: 0x1B8F694
    bool RenderToCubemapImpl(UnityEngine::Texture* tex, int faceMask);
    // public System.Boolean RenderToCubemap(UnityEngine.RenderTexture cubemap)
    // Offset: 0x1B8F6EC
    bool RenderToCubemap(UnityEngine::RenderTexture* cubemap);
    // public System.Void Render()
    // Offset: 0x1B8F740
    void Render();
    // public System.Void RenderWithShader(UnityEngine.Shader shader, System.String replacementTag)
    // Offset: 0x1B8F780
    void RenderWithShader(UnityEngine::Shader* shader, ::Il2CppString* replacementTag);
    // public System.Void CopyFrom(UnityEngine.Camera other)
    // Offset: 0x1B8F7D8
    void CopyFrom(UnityEngine::Camera* other);
    // private System.Void AddCommandBufferImpl(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x1B8F828
    void AddCommandBufferImpl(UnityEngine::Rendering::CameraEvent evt, UnityEngine::Rendering::CommandBuffer* buffer);
    // private System.Void RemoveCommandBufferImpl(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x1B8F880
    void RemoveCommandBufferImpl(UnityEngine::Rendering::CameraEvent evt, UnityEngine::Rendering::CommandBuffer* buffer);
    // public System.Void AddCommandBuffer(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x1B8F8D8
    void AddCommandBuffer(UnityEngine::Rendering::CameraEvent evt, UnityEngine::Rendering::CommandBuffer* buffer);
    // public System.Void RemoveCommandBuffer(UnityEngine.Rendering.CameraEvent evt, UnityEngine.Rendering.CommandBuffer buffer)
    // Offset: 0x1B8FA28
    void RemoveCommandBuffer(UnityEngine::Rendering::CameraEvent evt, UnityEngine::Rendering::CommandBuffer* buffer);
    // static private System.Void FireOnPreCull(UnityEngine.Camera cam)
    // Offset: 0x1B8FB78
    static void FireOnPreCull(UnityEngine::Camera* cam);
    // static private System.Void FireOnPreRender(UnityEngine.Camera cam)
    // Offset: 0x1B8FF74
    static void FireOnPreRender(UnityEngine::Camera* cam);
    // static private System.Void FireOnPostRender(UnityEngine.Camera cam)
    // Offset: 0x1B8FFDC
    static void FireOnPostRender(UnityEngine::Camera* cam);
    // private System.Void get_backgroundColor_Injected(out UnityEngine.Color ret)
    // Offset: 0x1B8E4B0
    void get_backgroundColor_Injected(UnityEngine::Color& ret);
    // private System.Void set_backgroundColor_Injected(ref UnityEngine.Color value)
    // Offset: 0x1B8E558
    void set_backgroundColor_Injected(UnityEngine::Color& value);
    // private System.Void get_rect_Injected(out UnityEngine.Rect ret)
    // Offset: 0x1B8E724
    void get_rect_Injected(UnityEngine::Rect& ret);
    // private System.Void set_rect_Injected(ref UnityEngine.Rect value)
    // Offset: 0x1B8E7CC
    void set_rect_Injected(UnityEngine::Rect& value);
    // private System.Void get_pixelRect_Injected(out UnityEngine.Rect ret)
    // Offset: 0x1B8E878
    void get_pixelRect_Injected(UnityEngine::Rect& ret);
    // private System.Void get_worldToCameraMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1B8EAE0
    void get_worldToCameraMatrix_Injected(UnityEngine::Matrix4x4& ret);
    // private System.Void set_worldToCameraMatrix_Injected(ref UnityEngine.Matrix4x4 value)
    // Offset: 0x1B8EB80
    void set_worldToCameraMatrix_Injected(UnityEngine::Matrix4x4& value);
    // private System.Void get_projectionMatrix_Injected(out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1B8EC48
    void get_projectionMatrix_Injected(UnityEngine::Matrix4x4& ret);
    // private System.Void set_projectionMatrix_Injected(ref UnityEngine.Matrix4x4 value)
    // Offset: 0x1B8ECE8
    void set_projectionMatrix_Injected(UnityEngine::Matrix4x4& value);
    // private System.Void CalculateObliqueMatrix_Injected(ref UnityEngine.Vector4 clipPlane, out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1B8EDFC
    void CalculateObliqueMatrix_Injected(UnityEngine::Vector4& clipPlane, UnityEngine::Matrix4x4& ret);
    // private System.Void WorldToScreenPoint_Injected(ref UnityEngine.Vector3 position, UnityEngine.Camera/MonoOrStereoscopicEye eye, out UnityEngine.Vector3 ret)
    // Offset: 0x1B8EED0
    void WorldToScreenPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Camera::MonoOrStereoscopicEye eye, UnityEngine::Vector3& ret);
    // private System.Void ViewportToWorldPoint_Injected(ref UnityEngine.Vector3 position, UnityEngine.Camera/MonoOrStereoscopicEye eye, out UnityEngine.Vector3 ret)
    // Offset: 0x1B8EFB4
    void ViewportToWorldPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Camera::MonoOrStereoscopicEye eye, UnityEngine::Vector3& ret);
    // private System.Void ScreenToViewportPoint_Injected(ref UnityEngine.Vector3 position, out UnityEngine.Vector3 ret)
    // Offset: 0x1B8F090
    void ScreenToViewportPoint_Injected(UnityEngine::Vector3& position, UnityEngine::Vector3& ret);
    // private System.Void ScreenPointToRay_Injected(ref UnityEngine.Vector2 pos, UnityEngine.Camera/MonoOrStereoscopicEye eye, out UnityEngine.Ray ret)
    // Offset: 0x1B8F16C
    void ScreenPointToRay_Injected(UnityEngine::Vector2& pos, UnityEngine::Camera::MonoOrStereoscopicEye eye, UnityEngine::Ray& ret);
    // private System.Void GetStereoProjectionMatrix_Injected(UnityEngine.Camera/StereoscopicEye eye, out UnityEngine.Matrix4x4 ret)
    // Offset: 0x1B8F4A0
    void GetStereoProjectionMatrix_Injected(UnityEngine::Camera::StereoscopicEye eye, UnityEngine::Matrix4x4& ret);
    // public System.Void .ctor()
    // Offset: 0x1B90044
    // Implemented from: UnityEngine.Behaviour
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Camera* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Camera::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Camera*, creationType>()));
    }
  }; // UnityEngine.Camera
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Camera*, "UnityEngine", "Camera");
// Writing MetadataGetter for method: Camera::get_nearClipPlane
// Il2CppName: get_nearClipPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Camera::*)()>(&Camera::get_nearClipPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_nearClipPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_nearClipPlane
// Il2CppName: set_nearClipPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(float)>(&Camera::set_nearClipPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_nearClipPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Camera::get_farClipPlane
// Il2CppName: get_farClipPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Camera::*)()>(&Camera::get_farClipPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_farClipPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_farClipPlane
// Il2CppName: set_farClipPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(float)>(&Camera::set_farClipPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_farClipPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Camera::get_fieldOfView
// Il2CppName: get_fieldOfView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Camera::*)()>(&Camera::get_fieldOfView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_fieldOfView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_fieldOfView
// Il2CppName: set_fieldOfView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(float)>(&Camera::set_fieldOfView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_fieldOfView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Camera::set_renderingPath
// Il2CppName: set_renderingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::RenderingPath)>(&Camera::set_renderingPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_renderingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderingPath>()});
  }
};
// Writing MetadataGetter for method: Camera::set_allowHDR
// Il2CppName: set_allowHDR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(bool)>(&Camera::set_allowHDR)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_allowHDR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Camera::set_allowMSAA
// Il2CppName: set_allowMSAA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(bool)>(&Camera::set_allowMSAA)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_allowMSAA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Camera::set_forceIntoRenderTexture
// Il2CppName: set_forceIntoRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(bool)>(&Camera::set_forceIntoRenderTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_forceIntoRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Camera::set_orthographicSize
// Il2CppName: set_orthographicSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(float)>(&Camera::set_orthographicSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_orthographicSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Camera::get_orthographic
// Il2CppName: get_orthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Camera::*)()>(&Camera::get_orthographic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_orthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_orthographic
// Il2CppName: set_orthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(bool)>(&Camera::set_orthographic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_orthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Camera::get_depth
// Il2CppName: get_depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Camera::*)()>(&Camera::get_depth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_depth
// Il2CppName: set_depth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(float)>(&Camera::set_depth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_depth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Camera::get_aspect
// Il2CppName: get_aspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Camera::*)()>(&Camera::get_aspect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_aspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_aspect
// Il2CppName: set_aspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(float)>(&Camera::set_aspect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_aspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Camera::get_cullingMask
// Il2CppName: get_cullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Camera::*)()>(&Camera::get_cullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_cullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_cullingMask
// Il2CppName: set_cullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(int)>(&Camera::set_cullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_cullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Camera::get_eventMask
// Il2CppName: get_eventMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Camera::*)()>(&Camera::get_eventMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_eventMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_useOcclusionCulling
// Il2CppName: set_useOcclusionCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(bool)>(&Camera::set_useOcclusionCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_useOcclusionCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Camera::get_backgroundColor
// Il2CppName: get_backgroundColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (Camera::*)()>(&Camera::get_backgroundColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_backgroundColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_backgroundColor
// Il2CppName: set_backgroundColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Color)>(&Camera::set_backgroundColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_backgroundColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: Camera::get_clearFlags
// Il2CppName: get_clearFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::CameraClearFlags (Camera::*)()>(&Camera::get_clearFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_clearFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_clearFlags
// Il2CppName: set_clearFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::CameraClearFlags)>(&Camera::set_clearFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_clearFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::CameraClearFlags>()});
  }
};
// Writing MetadataGetter for method: Camera::get_depthTextureMode
// Il2CppName: get_depthTextureMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::DepthTextureMode (Camera::*)()>(&Camera::get_depthTextureMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_depthTextureMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_depthTextureMode
// Il2CppName: set_depthTextureMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::DepthTextureMode)>(&Camera::set_depthTextureMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_depthTextureMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::DepthTextureMode>()});
  }
};
// Writing MetadataGetter for method: Camera::get_rect
// Il2CppName: get_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rect (Camera::*)()>(&Camera::get_rect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_rect
// Il2CppName: set_rect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rect)>(&Camera::set_rect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_rect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>()});
  }
};
// Writing MetadataGetter for method: Camera::get_pixelRect
// Il2CppName: get_pixelRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rect (Camera::*)()>(&Camera::get_pixelRect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_pixelRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::get_pixelWidth
// Il2CppName: get_pixelWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Camera::*)()>(&Camera::get_pixelWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_pixelWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::get_pixelHeight
// Il2CppName: get_pixelHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Camera::*)()>(&Camera::get_pixelHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_pixelHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::get_targetTexture
// Il2CppName: get_targetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (Camera::*)()>(&Camera::get_targetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_targetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_targetTexture
// Il2CppName: set_targetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::RenderTexture*)>(&Camera::set_targetTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_targetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: Camera::get_targetDisplay
// Il2CppName: get_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Camera::*)()>(&Camera::get_targetDisplay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_targetDisplay
// Il2CppName: set_targetDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(int)>(&Camera::set_targetDisplay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_targetDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Camera::get_worldToCameraMatrix
// Il2CppName: get_worldToCameraMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Camera::*)()>(&Camera::get_worldToCameraMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_worldToCameraMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_worldToCameraMatrix
// Il2CppName: set_worldToCameraMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Matrix4x4)>(&Camera::set_worldToCameraMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_worldToCameraMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: Camera::get_projectionMatrix
// Il2CppName: get_projectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Camera::*)()>(&Camera::get_projectionMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_projectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_projectionMatrix
// Il2CppName: set_projectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Matrix4x4)>(&Camera::set_projectionMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_projectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: Camera::ResetWorldToCameraMatrix
// Il2CppName: ResetWorldToCameraMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)()>(&Camera::ResetWorldToCameraMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ResetWorldToCameraMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::CalculateObliqueMatrix
// Il2CppName: CalculateObliqueMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Camera::*)(UnityEngine::Vector4)>(&Camera::CalculateObliqueMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "CalculateObliqueMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Camera::WorldToScreenPoint
// Il2CppName: WorldToScreenPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Camera::*)(UnityEngine::Vector3, UnityEngine::Camera::MonoOrStereoscopicEye)>(&Camera::WorldToScreenPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "WorldToScreenPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>()});
  }
};
// Writing MetadataGetter for method: Camera::ViewportToWorldPoint
// Il2CppName: ViewportToWorldPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Camera::*)(UnityEngine::Vector3, UnityEngine::Camera::MonoOrStereoscopicEye)>(&Camera::ViewportToWorldPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ViewportToWorldPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>()});
  }
};
// Writing MetadataGetter for method: Camera::WorldToScreenPoint
// Il2CppName: WorldToScreenPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Camera::*)(UnityEngine::Vector3)>(&Camera::WorldToScreenPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "WorldToScreenPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Camera::ScreenToViewportPoint
// Il2CppName: ScreenToViewportPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Camera::*)(UnityEngine::Vector3)>(&Camera::ScreenToViewportPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ScreenToViewportPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Camera::ScreenPointToRay
// Il2CppName: ScreenPointToRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Ray (Camera::*)(UnityEngine::Vector2, UnityEngine::Camera::MonoOrStereoscopicEye)>(&Camera::ScreenPointToRay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ScreenPointToRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>()});
  }
};
// Writing MetadataGetter for method: Camera::ScreenPointToRay
// Il2CppName: ScreenPointToRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Ray (Camera::*)(UnityEngine::Vector3, UnityEngine::Camera::MonoOrStereoscopicEye)>(&Camera::ScreenPointToRay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ScreenPointToRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>()});
  }
};
// Writing MetadataGetter for method: Camera::ScreenPointToRay
// Il2CppName: ScreenPointToRay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Ray (Camera::*)(UnityEngine::Vector3)>(&Camera::ScreenPointToRay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ScreenPointToRay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Camera::get_main
// Il2CppName: get_main
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (*)()>(&Camera::get_main)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_main", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::get_current
// Il2CppName: get_current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (*)()>(&Camera::get_current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::get_stereoEnabled
// Il2CppName: get_stereoEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Camera::*)()>(&Camera::get_stereoEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_stereoEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::get_stereoTargetEye
// Il2CppName: get_stereoTargetEye
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::StereoTargetEyeMask (Camera::*)()>(&Camera::get_stereoTargetEye)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_stereoTargetEye", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::set_stereoTargetEye
// Il2CppName: set_stereoTargetEye
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::StereoTargetEyeMask)>(&Camera::set_stereoTargetEye)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_stereoTargetEye", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::StereoTargetEyeMask>()});
  }
};
// Writing MetadataGetter for method: Camera::GetStereoProjectionMatrix
// Il2CppName: GetStereoProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Camera::*)(UnityEngine::Camera::StereoscopicEye)>(&Camera::GetStereoProjectionMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "GetStereoProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::StereoscopicEye>()});
  }
};
// Writing MetadataGetter for method: Camera::GetAllCamerasCount
// Il2CppName: GetAllCamerasCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Camera::GetAllCamerasCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "GetAllCamerasCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::GetAllCamerasImpl
// Il2CppName: GetAllCamerasImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<UnityEngine::Camera*>*&)>(&Camera::GetAllCamerasImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "GetAllCamerasImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Camera*>*&>()});
  }
};
// Writing MetadataGetter for method: Camera::get_allCamerasCount
// Il2CppName: get_allCamerasCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Camera::get_allCamerasCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_allCamerasCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::GetAllCameras
// Il2CppName: GetAllCameras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<UnityEngine::Camera*>*)>(&Camera::GetAllCameras)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "GetAllCameras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Camera*>*>()});
  }
};
// Writing MetadataGetter for method: Camera::RenderToCubemapImpl
// Il2CppName: RenderToCubemapImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Camera::*)(UnityEngine::Texture*, int)>(&Camera::RenderToCubemapImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "RenderToCubemapImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Camera::RenderToCubemap
// Il2CppName: RenderToCubemap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Camera::*)(UnityEngine::RenderTexture*)>(&Camera::RenderToCubemap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "RenderToCubemap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: Camera::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)()>(&Camera::Render)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Camera::RenderWithShader
// Il2CppName: RenderWithShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Shader*, ::Il2CppString*)>(&Camera::RenderWithShader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "RenderWithShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Shader*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Camera::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Camera*)>(&Camera::CopyFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: Camera::AddCommandBufferImpl
// Il2CppName: AddCommandBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rendering::CameraEvent, UnityEngine::Rendering::CommandBuffer*)>(&Camera::AddCommandBufferImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "AddCommandBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CameraEvent>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CommandBuffer*>()});
  }
};
// Writing MetadataGetter for method: Camera::RemoveCommandBufferImpl
// Il2CppName: RemoveCommandBufferImpl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rendering::CameraEvent, UnityEngine::Rendering::CommandBuffer*)>(&Camera::RemoveCommandBufferImpl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "RemoveCommandBufferImpl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CameraEvent>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CommandBuffer*>()});
  }
};
// Writing MetadataGetter for method: Camera::AddCommandBuffer
// Il2CppName: AddCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rendering::CameraEvent, UnityEngine::Rendering::CommandBuffer*)>(&Camera::AddCommandBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "AddCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CameraEvent>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CommandBuffer*>()});
  }
};
// Writing MetadataGetter for method: Camera::RemoveCommandBuffer
// Il2CppName: RemoveCommandBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rendering::CameraEvent, UnityEngine::Rendering::CommandBuffer*)>(&Camera::RemoveCommandBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "RemoveCommandBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CameraEvent>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::CommandBuffer*>()});
  }
};
// Writing MetadataGetter for method: Camera::FireOnPreCull
// Il2CppName: FireOnPreCull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Camera*)>(&Camera::FireOnPreCull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "FireOnPreCull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: Camera::FireOnPreRender
// Il2CppName: FireOnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Camera*)>(&Camera::FireOnPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "FireOnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: Camera::FireOnPostRender
// Il2CppName: FireOnPostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Camera*)>(&Camera::FireOnPostRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "FireOnPostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: Camera::get_backgroundColor_Injected
// Il2CppName: get_backgroundColor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Color&)>(&Camera::get_backgroundColor_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_backgroundColor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Camera::set_backgroundColor_Injected
// Il2CppName: set_backgroundColor_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Color&)>(&Camera::set_backgroundColor_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_backgroundColor_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Camera::get_rect_Injected
// Il2CppName: get_rect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rect&)>(&Camera::get_rect_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_rect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect&>()});
  }
};
// Writing MetadataGetter for method: Camera::set_rect_Injected
// Il2CppName: set_rect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rect&)>(&Camera::set_rect_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_rect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect&>()});
  }
};
// Writing MetadataGetter for method: Camera::get_pixelRect_Injected
// Il2CppName: get_pixelRect_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Rect&)>(&Camera::get_pixelRect_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_pixelRect_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect&>()});
  }
};
// Writing MetadataGetter for method: Camera::get_worldToCameraMatrix_Injected
// Il2CppName: get_worldToCameraMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Matrix4x4&)>(&Camera::get_worldToCameraMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_worldToCameraMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Camera::set_worldToCameraMatrix_Injected
// Il2CppName: set_worldToCameraMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Matrix4x4&)>(&Camera::set_worldToCameraMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_worldToCameraMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Camera::get_projectionMatrix_Injected
// Il2CppName: get_projectionMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Matrix4x4&)>(&Camera::get_projectionMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "get_projectionMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Camera::set_projectionMatrix_Injected
// Il2CppName: set_projectionMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Matrix4x4&)>(&Camera::set_projectionMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "set_projectionMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Camera::CalculateObliqueMatrix_Injected
// Il2CppName: CalculateObliqueMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Vector4&, UnityEngine::Matrix4x4&)>(&Camera::CalculateObliqueMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "CalculateObliqueMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Camera::WorldToScreenPoint_Injected
// Il2CppName: WorldToScreenPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Vector3&, UnityEngine::Camera::MonoOrStereoscopicEye, UnityEngine::Vector3&)>(&Camera::WorldToScreenPoint_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "WorldToScreenPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Camera::ViewportToWorldPoint_Injected
// Il2CppName: ViewportToWorldPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Vector3&, UnityEngine::Camera::MonoOrStereoscopicEye, UnityEngine::Vector3&)>(&Camera::ViewportToWorldPoint_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ViewportToWorldPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Camera::ScreenToViewportPoint_Injected
// Il2CppName: ScreenToViewportPoint_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Camera::ScreenToViewportPoint_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ScreenToViewportPoint_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Camera::ScreenPointToRay_Injected
// Il2CppName: ScreenPointToRay_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Vector2&, UnityEngine::Camera::MonoOrStereoscopicEye, UnityEngine::Ray&)>(&Camera::ScreenPointToRay_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "ScreenPointToRay_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::MonoOrStereoscopicEye>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Ray&>()});
  }
};
// Writing MetadataGetter for method: Camera::GetStereoProjectionMatrix_Injected
// Il2CppName: GetStereoProjectionMatrix_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)(UnityEngine::Camera::StereoscopicEye, UnityEngine::Matrix4x4&)>(&Camera::GetStereoProjectionMatrix_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), "GetStereoProjectionMatrix_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera::StereoscopicEye>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Camera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)()>(&Camera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Camera::*)()>(&Camera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Camera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
