// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.BuiltinRenderTextureType
#include "UnityEngine/Rendering/BuiltinRenderTextureType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.CubemapFace
#include "UnityEngine/CubemapFace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.RenderTargetIdentifier
  struct RenderTargetIdentifier/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Rendering::RenderTargetIdentifier>*/ {
    public:
    // private UnityEngine.Rendering.BuiltinRenderTextureType m_Type
    // Size: 0x4
    // Offset: 0x0
    UnityEngine::Rendering::BuiltinRenderTextureType m_Type;
    // Field size check
    static_assert(sizeof(UnityEngine::Rendering::BuiltinRenderTextureType) == 0x4);
    // private System.Int32 m_NameID
    // Size: 0x4
    // Offset: 0x4
    int m_NameID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_InstanceID
    // Size: 0x4
    // Offset: 0x8
    int m_InstanceID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_InstanceID and: m_BufferPointer
    char __padding2[0x4] = {};
    // private System.IntPtr m_BufferPointer
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_BufferPointer;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.Int32 m_MipLevel
    // Size: 0x4
    // Offset: 0x18
    int m_MipLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.CubemapFace m_CubeFace
    // Size: 0x4
    // Offset: 0x1C
    UnityEngine::CubemapFace m_CubeFace;
    // Field size check
    static_assert(sizeof(UnityEngine::CubemapFace) == 0x4);
    // private System.Int32 m_DepthSlice
    // Size: 0x4
    // Offset: 0x20
    int m_DepthSlice;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: RenderTargetIdentifier
    constexpr RenderTargetIdentifier(UnityEngine::Rendering::BuiltinRenderTextureType m_Type_ = {}, int m_NameID_ = {}, int m_InstanceID_ = {}, System::IntPtr m_BufferPointer_ = {}, int m_MipLevel_ = {}, UnityEngine::CubemapFace m_CubeFace_ = {}, int m_DepthSlice_ = {}) noexcept : m_Type{m_Type_}, m_NameID{m_NameID_}, m_InstanceID{m_InstanceID_}, m_BufferPointer{m_BufferPointer_}, m_MipLevel{m_MipLevel_}, m_CubeFace{m_CubeFace_}, m_DepthSlice{m_DepthSlice_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Rendering::RenderTargetIdentifier>
    operator System::IEquatable_1<UnityEngine::Rendering::RenderTargetIdentifier>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Rendering::RenderTargetIdentifier>*>(this);
    }
    // public System.Void .ctor(UnityEngine.Rendering.BuiltinRenderTextureType type)
    // Offset: 0xF06764
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RenderTargetIdentifier(UnityEngine::Rendering::BuiltinRenderTextureType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, type);
    }
    // public System.Void .ctor(System.Int32 nameID)
    // Offset: 0xF067CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RenderTargetIdentifier(int nameID) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nameID)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, nameID);
    }
    // public System.Void .ctor(UnityEngine.Texture tex)
    // Offset: 0xF06834
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RenderTargetIdentifier(UnityEngine::Texture* tex) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Rendering::RenderTargetIdentifier::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tex)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, tex);
    }
    // public System.Boolean Equals(UnityEngine.Rendering.RenderTargetIdentifier rhs)
    // Offset: 0xF0684C
    bool Equals(UnityEngine::Rendering::RenderTargetIdentifier rhs);
    // public override System.String ToString()
    // Offset: 0xF0683C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0xF06844
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xF06884
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // UnityEngine.Rendering.RenderTargetIdentifier
  #pragma pack(pop)
  static check_size<sizeof(RenderTargetIdentifier), 32 + sizeof(int)> __UnityEngine_Rendering_RenderTargetIdentifierSizeCheck;
  static_assert(sizeof(RenderTargetIdentifier) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Rendering::RenderTargetIdentifier, "UnityEngine.Rendering", "RenderTargetIdentifier");
// Writing MetadataGetter for method: RenderTargetIdentifier::RenderTargetIdentifier
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Rendering::BuiltinRenderTextureType)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinRenderTextureType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Rendering::BuiltinRenderTextureType)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::BuiltinRenderTextureType>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::RenderTargetIdentifier
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(int)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(int)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::RenderTargetIdentifier
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Texture*)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RenderTargetIdentifier::*)(UnityEngine::Texture*)>(&RenderTargetIdentifier::RenderTargetIdentifier<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RenderTargetIdentifier::*)(UnityEngine::Rendering::RenderTargetIdentifier)>(&RenderTargetIdentifier::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rendering::RenderTargetIdentifier>()});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RenderTargetIdentifier::*)()>(&RenderTargetIdentifier::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RenderTargetIdentifier::*)()>(&RenderTargetIdentifier::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RenderTargetIdentifier::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RenderTargetIdentifier::*)(::Il2CppObject*)>(&RenderTargetIdentifier::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RenderTargetIdentifier), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
