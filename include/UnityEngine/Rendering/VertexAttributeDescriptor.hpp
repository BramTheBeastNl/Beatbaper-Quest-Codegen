// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Rendering.VertexAttribute
#include "UnityEngine/Rendering/VertexAttribute.hpp"
// Including type: UnityEngine.Rendering.VertexAttributeFormat
#include "UnityEngine/Rendering/VertexAttributeFormat.hpp"
// Completed includes
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.VertexAttributeDescriptor
  // [UsedByNativeCodeAttribute] Offset: D91D90
  struct VertexAttributeDescriptor/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Rendering::VertexAttributeDescriptor>*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD94AB8
    // [DebuggerBrowsableAttribute] Offset: 0xD94AB8
    // private UnityEngine.Rendering.VertexAttribute <attribute>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    UnityEngine::Rendering::VertexAttribute attribute;
    // Field size check
    static_assert(sizeof(UnityEngine::Rendering::VertexAttribute) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD94AF4
    // [DebuggerBrowsableAttribute] Offset: 0xD94AF4
    // private UnityEngine.Rendering.VertexAttributeFormat <format>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    UnityEngine::Rendering::VertexAttributeFormat format;
    // Field size check
    static_assert(sizeof(UnityEngine::Rendering::VertexAttributeFormat) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD94B30
    // [DebuggerBrowsableAttribute] Offset: 0xD94B30
    // private System.Int32 <dimension>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int dimension;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xD94B6C
    // [CompilerGeneratedAttribute] Offset: 0xD94B6C
    // private System.Int32 <stream>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    int stream;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: VertexAttributeDescriptor
    constexpr VertexAttributeDescriptor(UnityEngine::Rendering::VertexAttribute attribute_ = {}, UnityEngine::Rendering::VertexAttributeFormat format_ = {}, int dimension_ = {}, int stream_ = {}) noexcept : attribute{attribute_}, format{format_}, dimension{dimension_}, stream{stream_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Rendering::VertexAttributeDescriptor>
    operator System::IEquatable_1<UnityEngine::Rendering::VertexAttributeDescriptor>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Rendering::VertexAttributeDescriptor>*>(this);
    }
    // public UnityEngine.Rendering.VertexAttribute get_attribute()
    // Offset: 0xF05AB4
    UnityEngine::Rendering::VertexAttribute get_attribute();
    // public UnityEngine.Rendering.VertexAttributeFormat get_format()
    // Offset: 0xF05ABC
    UnityEngine::Rendering::VertexAttributeFormat get_format();
    // public System.Int32 get_dimension()
    // Offset: 0xF05AC4
    int get_dimension();
    // public System.Int32 get_stream()
    // Offset: 0xF05ACC
    int get_stream();
    // public System.Boolean Equals(UnityEngine.Rendering.VertexAttributeDescriptor other)
    // Offset: 0xF05B0C
    bool Equals(UnityEngine::Rendering::VertexAttributeDescriptor other);
    // public override System.String ToString()
    // Offset: 0xF05AD4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0xF05ADC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xF05B04
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
  }; // UnityEngine.Rendering.VertexAttributeDescriptor
  #pragma pack(pop)
  static check_size<sizeof(VertexAttributeDescriptor), 12 + sizeof(int)> __UnityEngine_Rendering_VertexAttributeDescriptorSizeCheck;
  static_assert(sizeof(VertexAttributeDescriptor) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Rendering::VertexAttributeDescriptor, "UnityEngine.Rendering", "VertexAttributeDescriptor");
