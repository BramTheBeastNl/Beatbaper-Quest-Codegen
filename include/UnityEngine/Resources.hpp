// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: ResourceRequest
  class ResourceRequest;
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Resources
  // [NativeHeaderAttribute] Offset: D8FDC0
  // [NativeHeaderAttribute] Offset: D8FDC0
  class Resources : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Resources
    Resources() noexcept {}
    // static T[] ConvertObjects(UnityEngine.Object[] rawObjects)
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* ConvertObjects(::Array<UnityEngine::Object*>* rawObjects) {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::ConvertObjects");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "ConvertObjects", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawObjects)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, rawObjects);
    }
    // static public UnityEngine.Object[] FindObjectsOfTypeAll(System.Type type)
    // Offset: 0x1B31C50
    static ::Array<UnityEngine::Object*>* FindObjectsOfTypeAll(System::Type* type);
    // static public T[] FindObjectsOfTypeAll()
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* FindObjectsOfTypeAll() {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::FindObjectsOfTypeAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "FindObjectsOfTypeAll", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public UnityEngine.Object Load(System.String path)
    // Offset: 0x1B31C90
    static UnityEngine::Object* Load(::Il2CppString* path);
    // static public T Load(System.String path)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Load(::Il2CppString* path) {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::Load");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "Load", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, path);
    }
    // static public UnityEngine.Object Load(System.String path, System.Type systemTypeInstance)
    // Offset: 0x1B31BF8
    static UnityEngine::Object* Load(::Il2CppString* path, System::Type* systemTypeInstance);
    // static public UnityEngine.ResourceRequest LoadAsync(System.String path, System.Type type)
    // Offset: 0x1B31D3C
    static UnityEngine::ResourceRequest* LoadAsync(::Il2CppString* path, System::Type* type);
    // static UnityEngine.ResourceRequest LoadAsyncInternal(System.String path, System.Type type)
    // Offset: 0x1B31D9C
    static UnityEngine::ResourceRequest* LoadAsyncInternal(::Il2CppString* path, System::Type* type);
    // static public UnityEngine.Object[] LoadAll(System.String path, System.Type systemTypeInstance)
    // Offset: 0x1B31DEC
    static ::Array<UnityEngine::Object*>* LoadAll(::Il2CppString* path, System::Type* systemTypeInstance);
    // static public UnityEngine.Object[] LoadAll(System.String path)
    // Offset: 0x1B31E3C
    static ::Array<UnityEngine::Object*>* LoadAll(::Il2CppString* path);
    // static public UnityEngine.Object GetBuiltinResource(System.Type type, System.String path)
    // Offset: 0x1B31EE8
    static UnityEngine::Object* GetBuiltinResource(System::Type* type, ::Il2CppString* path);
    // static public T GetBuiltinResource(System.String path)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T GetBuiltinResource(::Il2CppString* path) {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::GetBuiltinResource");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "GetBuiltinResource", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, path);
    }
    // static public System.Void UnloadAsset(UnityEngine.Object assetToUnload)
    // Offset: 0x1B31F38
    static void UnloadAsset(UnityEngine::Object* assetToUnload);
    // static public UnityEngine.AsyncOperation UnloadUnusedAssets()
    // Offset: 0x1B31F78
    static UnityEngine::AsyncOperation* UnloadUnusedAssets();
  }; // UnityEngine.Resources
  #pragma pack(pop)
  // Writing MetadataGetter for method: Resources::ConvertObjects
  // Il2CppName: ConvertObjects
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: Resources::FindObjectsOfTypeAll
  // Il2CppName: FindObjectsOfTypeAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(System::Type*)>(&Resources::FindObjectsOfTypeAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "FindObjectsOfTypeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::FindObjectsOfTypeAll
  // Il2CppName: FindObjectsOfTypeAll
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: Resources::Load
  // Il2CppName: Load
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*)>(&Resources::Load)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::Load
  // Il2CppName: Load
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: Resources::Load
  // Il2CppName: Load
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*, System::Type*)>(&Resources::Load)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::LoadAsync
  // Il2CppName: LoadAsync
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ResourceRequest* (*)(::Il2CppString*, System::Type*)>(&Resources::LoadAsync)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::LoadAsyncInternal
  // Il2CppName: LoadAsyncInternal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ResourceRequest* (*)(::Il2CppString*, System::Type*)>(&Resources::LoadAsyncInternal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::LoadAll
  // Il2CppName: LoadAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(::Il2CppString*, System::Type*)>(&Resources::LoadAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::LoadAll
  // Il2CppName: LoadAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(::Il2CppString*)>(&Resources::LoadAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::GetBuiltinResource
  // Il2CppName: GetBuiltinResource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(System::Type*, ::Il2CppString*)>(&Resources::GetBuiltinResource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "GetBuiltinResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::GetBuiltinResource
  // Il2CppName: GetBuiltinResource
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: Resources::UnloadAsset
  // Il2CppName: UnloadAsset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&Resources::UnloadAsset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "UnloadAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
    }
  };
  // Writing MetadataGetter for method: Resources::UnloadUnusedAssets
  // Il2CppName: UnloadUnusedAssets
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AsyncOperation* (*)()>(&Resources::UnloadUnusedAssets)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Resources*), "UnloadUnusedAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Resources*, "UnityEngine", "Resources");
