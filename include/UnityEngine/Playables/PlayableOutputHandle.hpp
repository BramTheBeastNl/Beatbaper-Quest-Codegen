// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableHandle
  struct PlayableHandle;
  // Forward declaring type: INotification
  class INotification;
  // Forward declaring type: INotificationReceiver
  class INotificationReceiver;
}
// Completed forward declares
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Playables.PlayableOutputHandle
  // [UsedByNativeCodeAttribute] Offset: D92398
  // [NativeHeaderAttribute] Offset: D92398
  // [NativeHeaderAttribute] Offset: D92398
  // [NativeHeaderAttribute] Offset: D92398
  struct PlayableOutputHandle/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Playables::PlayableOutputHandle>*/ {
    public:
    // System.IntPtr m_Handle
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr m_Handle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0x8
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Creating value type constructor for type: PlayableOutputHandle
    constexpr PlayableOutputHandle(System::IntPtr m_Handle_ = {}, uint m_Version_ = {}) noexcept : m_Handle{m_Handle_}, m_Version{m_Version_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Playables::PlayableOutputHandle>
    operator System::IEquatable_1<UnityEngine::Playables::PlayableOutputHandle>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Playables::PlayableOutputHandle>*>(this);
    }
    // Get static field: static private readonly UnityEngine.Playables.PlayableOutputHandle m_Null
    static UnityEngine::Playables::PlayableOutputHandle _get_m_Null();
    // Set static field: static private readonly UnityEngine.Playables.PlayableOutputHandle m_Null
    static void _set_m_Null(UnityEngine::Playables::PlayableOutputHandle value);
    // static public UnityEngine.Playables.PlayableOutputHandle get_Null()
    // Offset: 0x1C21294
    static UnityEngine::Playables::PlayableOutputHandle get_Null();
    // System.Boolean IsPlayableOutputOfType()
    // Offset: 0xFFFFFFFF
    template<class T>
    bool IsPlayableOutputOfType() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableOutputHandle::IsPlayableOutputOfType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsPlayableOutputOfType", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___generic__method);
    }
    // public System.Boolean Equals(UnityEngine.Playables.PlayableOutputHandle other)
    // Offset: 0xF087C8
    bool Equals(UnityEngine::Playables::PlayableOutputHandle other);
    // static System.Boolean CompareVersion(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs)
    // Offset: 0x1C21334
    static bool CompareVersion(UnityEngine::Playables::PlayableOutputHandle lhs, UnityEngine::Playables::PlayableOutputHandle rhs);
    // System.Boolean IsValid()
    // Offset: 0xF087D0
    bool IsValid();
    // System.Type GetPlayableOutputType()
    // Offset: 0xF087D8
    System::Type* GetPlayableOutputType();
    // System.Void SetReferenceObject(UnityEngine.Object target)
    // Offset: 0xF087E0
    void SetReferenceObject(UnityEngine::Object* target);
    // System.Void SetUserData(UnityEngine.Object target)
    // Offset: 0xF087E8
    void SetUserData(UnityEngine::Object* target);
    // UnityEngine.Playables.PlayableHandle GetSourcePlayable()
    // Offset: 0xF087F0
    UnityEngine::Playables::PlayableHandle GetSourcePlayable();
    // System.Void SetSourcePlayable(UnityEngine.Playables.PlayableHandle target, System.Int32 port)
    // Offset: 0xF087F8
    void SetSourcePlayable(UnityEngine::Playables::PlayableHandle target, int port);
    // System.Int32 GetSourceOutputPort()
    // Offset: 0xF08800
    int GetSourceOutputPort();
    // System.Void SetWeight(System.Single weight)
    // Offset: 0xF08808
    void SetWeight(float weight);
    // System.Void PushNotification(UnityEngine.Playables.PlayableHandle origin, UnityEngine.Playables.INotification notification, System.Object context)
    // Offset: 0xF08810
    void PushNotification(UnityEngine::Playables::PlayableHandle origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context);
    // System.Void AddNotificationReceiver(UnityEngine.Playables.INotificationReceiver receiver)
    // Offset: 0xF08818
    void AddNotificationReceiver(UnityEngine::Playables::INotificationReceiver* receiver);
    // static private System.Void .cctor()
    // Offset: 0x1C21D68
    static void _cctor();
    // static private System.Boolean IsValid_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self)
    // Offset: 0x1C2150C
    static bool IsValid_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self);
    // static private System.Type GetPlayableOutputType_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self)
    // Offset: 0x1C215D0
    static System::Type* GetPlayableOutputType_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self);
    // static private System.Void SetReferenceObject_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Object target)
    // Offset: 0x1C216A4
    static void SetReferenceObject_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Object* target);
    // static private System.Void SetUserData_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Object target)
    // Offset: 0x1C21788
    static void SetUserData_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Object* target);
    // static private System.Void GetSourcePlayable_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, out UnityEngine.Playables.PlayableHandle ret)
    // Offset: 0x1C21874
    static void GetSourcePlayable_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::PlayableHandle& ret);
    // static private System.Void SetSourcePlayable_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, ref UnityEngine.Playables.PlayableHandle target, System.Int32 port)
    // Offset: 0x1C2196C
    static void SetSourcePlayable_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::PlayableHandle& target, int port);
    // static private System.Int32 GetSourceOutputPort_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self)
    // Offset: 0x1C21A48
    static int GetSourceOutputPort_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self);
    // static private System.Void SetWeight_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, System.Single weight)
    // Offset: 0x1C21B1C
    static void SetWeight_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, float weight);
    // static private System.Void PushNotification_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, ref UnityEngine.Playables.PlayableHandle origin, UnityEngine.Playables.INotification notification, System.Object context)
    // Offset: 0x1C21C1C
    static void PushNotification_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::PlayableHandle& origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context);
    // static private System.Void AddNotificationReceiver_Injected(ref UnityEngine.Playables.PlayableOutputHandle _unity_self, UnityEngine.Playables.INotificationReceiver receiver)
    // Offset: 0x1C21D18
    static void AddNotificationReceiver_Injected(UnityEngine::Playables::PlayableOutputHandle& _unity_self, UnityEngine::Playables::INotificationReceiver* receiver);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF08784
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object p)
    // Offset: 0xF087C0
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object p)
    bool Equals(::Il2CppObject* p);
  }; // UnityEngine.Playables.PlayableOutputHandle
  #pragma pack(pop)
  static check_size<sizeof(PlayableOutputHandle), 8 + sizeof(uint)> __UnityEngine_Playables_PlayableOutputHandleSizeCheck;
  static_assert(sizeof(PlayableOutputHandle) == 0xC);
  // static public System.Boolean op_Equality(UnityEngine.Playables.PlayableOutputHandle lhs, UnityEngine.Playables.PlayableOutputHandle rhs)
  // Offset: 0x1C21188
  bool operator ==(const UnityEngine::Playables::PlayableOutputHandle& lhs, const UnityEngine::Playables::PlayableOutputHandle& rhs);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Playables::PlayableOutputHandle, "UnityEngine.Playables", "PlayableOutputHandle");
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::get_Null
// Il2CppName: get_Null
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::IsPlayableOutputOfType
// Il2CppName: IsPlayableOutputOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::CompareVersion
// Il2CppName: CompareVersion
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::IsValid
// Il2CppName: IsValid
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetPlayableOutputType
// Il2CppName: GetPlayableOutputType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetReferenceObject
// Il2CppName: SetReferenceObject
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetUserData
// Il2CppName: SetUserData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetSourcePlayable
// Il2CppName: GetSourcePlayable
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetSourcePlayable
// Il2CppName: SetSourcePlayable
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetSourceOutputPort
// Il2CppName: GetSourceOutputPort
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetWeight
// Il2CppName: SetWeight
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::PushNotification
// Il2CppName: PushNotification
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::AddNotificationReceiver
// Il2CppName: AddNotificationReceiver
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::IsValid_Injected
// Il2CppName: IsValid_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetPlayableOutputType_Injected
// Il2CppName: GetPlayableOutputType_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetReferenceObject_Injected
// Il2CppName: SetReferenceObject_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetUserData_Injected
// Il2CppName: SetUserData_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetSourcePlayable_Injected
// Il2CppName: GetSourcePlayable_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetSourcePlayable_Injected
// Il2CppName: SetSourcePlayable_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetSourceOutputPort_Injected
// Il2CppName: GetSourceOutputPort_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::SetWeight_Injected
// Il2CppName: SetWeight_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::PushNotification_Injected
// Il2CppName: PushNotification_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::AddNotificationReceiver_Injected
// Il2CppName: AddNotificationReceiver_Injected
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::GetHashCode
// Il2CppName: GetHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Playables::PlayableOutputHandle::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
