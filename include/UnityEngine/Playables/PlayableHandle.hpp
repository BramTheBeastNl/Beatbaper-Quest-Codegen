// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: IPlayableBehaviour
  class IPlayableBehaviour;
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayState
  struct PlayState;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: PlayableTraversalMode
  struct PlayableTraversalMode;
  // Forward declaring type: DirectorWrapMode
  struct DirectorWrapMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Playables.PlayableHandle
  // [NativeHeaderAttribute] Offset: CBCABC
  // [UsedByNativeCodeAttribute] Offset: CBCABC
  // [NativeHeaderAttribute] Offset: CBCABC
  // [NativeHeaderAttribute] Offset: CBCABC
  struct PlayableHandle/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Playables::PlayableHandle>*/ {
    public:
    // System.IntPtr m_Handle
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr m_Handle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0x8
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Creating value type constructor for type: PlayableHandle
    constexpr PlayableHandle(System::IntPtr m_Handle_ = {}, uint m_Version_ = {}) noexcept : m_Handle{m_Handle_}, m_Version{m_Version_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Playables::PlayableHandle>
    operator System::IEquatable_1<UnityEngine::Playables::PlayableHandle>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Playables::PlayableHandle>*>(this);
    }
    // Get static field: static private readonly UnityEngine.Playables.PlayableHandle m_Null
    static UnityEngine::Playables::PlayableHandle _get_m_Null();
    // Set static field: static private readonly UnityEngine.Playables.PlayableHandle m_Null
    static void _set_m_Null(UnityEngine::Playables::PlayableHandle value);
    // T GetObject()
    // Offset: 0xFFFFFFFF
    template<class T>
    T GetObject() {
      static_assert(std::is_base_of_v<UnityEngine::Playables::IPlayableBehaviour, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___generic__method);
    }
    // System.Boolean IsPlayableOfType()
    // Offset: 0xFFFFFFFF
    template<class T>
    bool IsPlayableOfType() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::IsPlayableOfType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsPlayableOfType", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___generic__method);
    }
    // static public UnityEngine.Playables.PlayableHandle get_Null()
    // Offset: 0x1AB84FC
    static UnityEngine::Playables::PlayableHandle get_Null();
    // UnityEngine.Playables.Playable GetInput(System.Int32 inputPort)
    // Offset: 0xE134F0
    UnityEngine::Playables::Playable GetInput(int inputPort);
    // System.Boolean SetInputWeight(System.Int32 inputIndex, System.Single weight)
    // Offset: 0xE134F8
    bool SetInputWeight(int inputIndex, float weight);
    // System.Single GetInputWeight(System.Int32 inputIndex)
    // Offset: 0xE13544
    float GetInputWeight(int inputIndex);
    // public System.Boolean Equals(UnityEngine.Playables.PlayableHandle other)
    // Offset: 0xE13580
    bool Equals(UnityEngine::Playables::PlayableHandle other);
    // static System.Boolean CompareVersion(UnityEngine.Playables.PlayableHandle lhs, UnityEngine.Playables.PlayableHandle rhs)
    // Offset: 0x1AB9434
    static bool CompareVersion(UnityEngine::Playables::PlayableHandle lhs, UnityEngine::Playables::PlayableHandle rhs);
    // System.Boolean CheckInputBounds(System.Int32 inputIndex)
    // Offset: 0xE135C4
    bool CheckInputBounds(int inputIndex);
    // System.Boolean CheckInputBounds(System.Int32 inputIndex, System.Boolean acceptAny)
    // Offset: 0xE135E4
    bool CheckInputBounds(int inputIndex, bool acceptAny);
    // System.Boolean IsValid()
    // Offset: 0xE13604
    bool IsValid();
    // System.Type GetPlayableType()
    // Offset: 0xE1360C
    System::Type* GetPlayableType();
    // System.Void SetScriptInstance(System.Object scriptInstance)
    // Offset: 0xE13614
    void SetScriptInstance(::Il2CppObject* scriptInstance);
    // UnityEngine.Playables.PlayState GetPlayState()
    // Offset: 0xE1361C
    UnityEngine::Playables::PlayState GetPlayState();
    // System.Void Play()
    // Offset: 0xE13624
    void Play();
    // System.Void Pause()
    // Offset: 0xE1362C
    void Pause();
    // System.Void SetSpeed(System.Double value)
    // Offset: 0xE13634
    void SetSpeed(double value);
    // System.Double GetTime()
    // Offset: 0xE1363C
    double GetTime();
    // System.Void SetTime(System.Double value)
    // Offset: 0xE13644
    void SetTime(double value);
    // System.Boolean IsDone()
    // Offset: 0xE1364C
    bool IsDone();
    // System.Double GetDuration()
    // Offset: 0xE13654
    double GetDuration();
    // System.Void SetDuration(System.Double value)
    // Offset: 0xE1365C
    void SetDuration(double value);
    // System.Void SetPropagateSetTime(System.Boolean value)
    // Offset: 0xE13664
    void SetPropagateSetTime(bool value);
    // UnityEngine.Playables.PlayableGraph GetGraph()
    // Offset: 0xE13670
    UnityEngine::Playables::PlayableGraph GetGraph();
    // System.Int32 GetInputCount()
    // Offset: 0xE13678
    int GetInputCount();
    // System.Void SetInputCount(System.Int32 value)
    // Offset: 0xE13680
    void SetInputCount(int value);
    // System.Void SetInputWeight(UnityEngine.Playables.PlayableHandle input, System.Single weight)
    // Offset: 0xE13688
    void SetInputWeight(UnityEngine::Playables::PlayableHandle input, float weight);
    // System.Double GetPreviousTime()
    // Offset: 0xE13690
    double GetPreviousTime();
    // System.Void SetTraversalMode(UnityEngine.Playables.PlayableTraversalMode mode)
    // Offset: 0xE13698
    void SetTraversalMode(UnityEngine::Playables::PlayableTraversalMode mode);
    // UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode()
    // Offset: 0xE136A0
    UnityEngine::Playables::DirectorWrapMode GetTimeWrapMode();
    // System.Void SetTimeWrapMode(UnityEngine.Playables.DirectorWrapMode mode)
    // Offset: 0xE136A8
    void SetTimeWrapMode(UnityEngine::Playables::DirectorWrapMode mode);
    // private System.Object GetScriptInstance()
    // Offset: 0xE136B0
    ::Il2CppObject* GetScriptInstance();
    // private UnityEngine.Playables.PlayableHandle GetInputHandle(System.Int32 index)
    // Offset: 0xE136B8
    UnityEngine::Playables::PlayableHandle GetInputHandle(int index);
    // private System.Void SetInputWeightFromIndex(System.Int32 index, System.Single weight)
    // Offset: 0xE136C0
    void SetInputWeightFromIndex(int index, float weight);
    // private System.Single GetInputWeightFromIndex(System.Int32 index)
    // Offset: 0xE136C8
    float GetInputWeightFromIndex(int index);
    // static private System.Void .cctor()
    // Offset: 0x1ABAAA8
    static void _cctor();
    // static private System.Boolean IsValid_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB98E8
    static bool IsValid_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Type GetPlayableType_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB9928
    static System::Type* GetPlayableType_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetScriptInstance_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Object scriptInstance)
    // Offset: 0x1AB99FC
    static void SetScriptInstance_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, ::Il2CppObject* scriptInstance);
    // static private UnityEngine.Playables.PlayState GetPlayState_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB9AD0
    static UnityEngine::Playables::PlayState GetPlayState_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void Play_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB9B94
    static void Play_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void Pause_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB9C58
    static void Pause_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetSpeed_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Double value)
    // Offset: 0x1AB9D2C
    static void SetSpeed_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value);
    // static private System.Double GetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB9E00
    static double GetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Double value)
    // Offset: 0x1AB9ED4
    static void SetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value);
    // static private System.Boolean IsDone_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1AB9FA8
    static bool IsDone_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Double GetDuration_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1ABA06C
    static double GetDuration_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetDuration_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Double value)
    // Offset: 0x1ABA140
    static void SetDuration_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value);
    // static private System.Void SetPropagateSetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Boolean value)
    // Offset: 0x1ABA224
    static void SetPropagateSetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, bool value);
    // static private System.Void GetGraph_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, out UnityEngine.Playables.PlayableGraph ret)
    // Offset: 0x1ABA310
    static void GetGraph_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableGraph& ret);
    // static private System.Int32 GetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1ABA360
    static int GetInputCount_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 value)
    // Offset: 0x1ABA434
    static void SetInputCount_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int value);
    // static private System.Void SetInputWeight_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, ref UnityEngine.Playables.PlayableHandle input, System.Single weight)
    // Offset: 0x1ABA52C
    static void SetInputWeight_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableHandle& input, float weight);
    // static private System.Double GetPreviousTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1ABA610
    static double GetPreviousTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetTraversalMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, UnityEngine.Playables.PlayableTraversalMode mode)
    // Offset: 0x1ABA6E4
    static void SetTraversalMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableTraversalMode mode);
    // static private UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1ABA7B8
    static UnityEngine::Playables::DirectorWrapMode GetTimeWrapMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetTimeWrapMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, UnityEngine.Playables.DirectorWrapMode mode)
    // Offset: 0x1ABA88C
    static void SetTimeWrapMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::DirectorWrapMode mode);
    // static private System.Object GetScriptInstance_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1ABA960
    static ::Il2CppObject* GetScriptInstance_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void GetInputHandle_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index, out UnityEngine.Playables.PlayableHandle ret)
    // Offset: 0x1ABA9A0
    static void GetInputHandle_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index, UnityEngine::Playables::PlayableHandle& ret);
    // static private System.Void SetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index, System.Single weight)
    // Offset: 0x1ABA9F8
    static void SetInputWeightFromIndex_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index, float weight);
    // static private System.Single GetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index)
    // Offset: 0x1ABAA58
    static float GetInputWeightFromIndex_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index);
    // public override System.Boolean Equals(System.Object p)
    // Offset: 0xE13578
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object p)
    bool Equals(::Il2CppObject* p);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE13588
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Playables.PlayableHandle
  #pragma pack(pop)
  static check_size<sizeof(PlayableHandle), 8 + sizeof(uint)> __UnityEngine_Playables_PlayableHandleSizeCheck;
  static_assert(sizeof(PlayableHandle) == 0xC);
  // static public System.Boolean op_Equality(UnityEngine.Playables.PlayableHandle x, UnityEngine.Playables.PlayableHandle y)
  // Offset: 0x1AB83F0
  bool operator ==(const UnityEngine::Playables::PlayableHandle& x, const UnityEngine::Playables::PlayableHandle& y);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Playables::PlayableHandle, "UnityEngine.Playables", "PlayableHandle");
