// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: IPlayableBehaviour
  class IPlayableBehaviour;
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayState
  struct PlayState;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: PlayableTraversalMode
  struct PlayableTraversalMode;
  // Forward declaring type: DirectorWrapMode
  struct DirectorWrapMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Playables.PlayableHandle
  // [NativeHeaderAttribute] Offset: D922E4
  // [UsedByNativeCodeAttribute] Offset: D922E4
  // [NativeHeaderAttribute] Offset: D922E4
  // [NativeHeaderAttribute] Offset: D922E4
  struct PlayableHandle/*, public System::ValueType, public System::IEquatable_1<UnityEngine::Playables::PlayableHandle>*/ {
    public:
    // System.IntPtr m_Handle
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr m_Handle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0x8
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Creating value type constructor for type: PlayableHandle
    constexpr PlayableHandle(System::IntPtr m_Handle_ = {}, uint m_Version_ = {}) noexcept : m_Handle{m_Handle_}, m_Version{m_Version_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::Playables::PlayableHandle>
    operator System::IEquatable_1<UnityEngine::Playables::PlayableHandle>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::Playables::PlayableHandle>*>(this);
    }
    // Get static field: static private readonly UnityEngine.Playables.PlayableHandle m_Null
    static UnityEngine::Playables::PlayableHandle _get_m_Null();
    // Set static field: static private readonly UnityEngine.Playables.PlayableHandle m_Null
    static void _set_m_Null(UnityEngine::Playables::PlayableHandle value);
    // T GetObject()
    // Offset: 0xFFFFFFFF
    template<class T>
    T GetObject() {
      static_assert(std::is_base_of_v<UnityEngine::Playables::IPlayableBehaviour, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::GetObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___generic__method);
    }
    // System.Boolean IsPlayableOfType()
    // Offset: 0xFFFFFFFF
    template<class T>
    bool IsPlayableOfType() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Playables::PlayableHandle::IsPlayableOfType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "IsPlayableOfType", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___generic__method);
    }
    // static public UnityEngine.Playables.PlayableHandle get_Null()
    // Offset: 0x1C1EAF4
    static UnityEngine::Playables::PlayableHandle get_Null();
    // UnityEngine.Playables.Playable GetInput(System.Int32 inputPort)
    // Offset: 0xF08588
    UnityEngine::Playables::Playable GetInput(int inputPort);
    // System.Boolean SetInputWeight(System.Int32 inputIndex, System.Single weight)
    // Offset: 0xF08590
    bool SetInputWeight(int inputIndex, float weight);
    // System.Single GetInputWeight(System.Int32 inputIndex)
    // Offset: 0xF085DC
    float GetInputWeight(int inputIndex);
    // public System.Boolean Equals(UnityEngine.Playables.PlayableHandle other)
    // Offset: 0xF08618
    bool Equals(UnityEngine::Playables::PlayableHandle other);
    // static System.Boolean CompareVersion(UnityEngine.Playables.PlayableHandle lhs, UnityEngine.Playables.PlayableHandle rhs)
    // Offset: 0x1C1FA2C
    static bool CompareVersion(UnityEngine::Playables::PlayableHandle lhs, UnityEngine::Playables::PlayableHandle rhs);
    // System.Boolean CheckInputBounds(System.Int32 inputIndex)
    // Offset: 0xF0865C
    bool CheckInputBounds(int inputIndex);
    // System.Boolean CheckInputBounds(System.Int32 inputIndex, System.Boolean acceptAny)
    // Offset: 0xF0867C
    bool CheckInputBounds(int inputIndex, bool acceptAny);
    // System.Boolean IsValid()
    // Offset: 0xF0869C
    bool IsValid();
    // System.Type GetPlayableType()
    // Offset: 0xF086A4
    System::Type* GetPlayableType();
    // System.Void SetScriptInstance(System.Object scriptInstance)
    // Offset: 0xF086AC
    void SetScriptInstance(::Il2CppObject* scriptInstance);
    // UnityEngine.Playables.PlayState GetPlayState()
    // Offset: 0xF086B4
    UnityEngine::Playables::PlayState GetPlayState();
    // System.Void Play()
    // Offset: 0xF086BC
    void Play();
    // System.Void Pause()
    // Offset: 0xF086C4
    void Pause();
    // System.Void SetSpeed(System.Double value)
    // Offset: 0xF086CC
    void SetSpeed(double value);
    // System.Double GetTime()
    // Offset: 0xF086D4
    double GetTime();
    // System.Void SetTime(System.Double value)
    // Offset: 0xF086DC
    void SetTime(double value);
    // System.Boolean IsDone()
    // Offset: 0xF086E4
    bool IsDone();
    // System.Double GetDuration()
    // Offset: 0xF086EC
    double GetDuration();
    // System.Void SetDuration(System.Double value)
    // Offset: 0xF086F4
    void SetDuration(double value);
    // System.Void SetPropagateSetTime(System.Boolean value)
    // Offset: 0xF086FC
    void SetPropagateSetTime(bool value);
    // UnityEngine.Playables.PlayableGraph GetGraph()
    // Offset: 0xF08708
    UnityEngine::Playables::PlayableGraph GetGraph();
    // System.Int32 GetInputCount()
    // Offset: 0xF08710
    int GetInputCount();
    // System.Void SetInputCount(System.Int32 value)
    // Offset: 0xF08718
    void SetInputCount(int value);
    // System.Void SetInputWeight(UnityEngine.Playables.PlayableHandle input, System.Single weight)
    // Offset: 0xF08720
    void SetInputWeight(UnityEngine::Playables::PlayableHandle input, float weight);
    // System.Double GetPreviousTime()
    // Offset: 0xF08728
    double GetPreviousTime();
    // System.Void SetTraversalMode(UnityEngine.Playables.PlayableTraversalMode mode)
    // Offset: 0xF08730
    void SetTraversalMode(UnityEngine::Playables::PlayableTraversalMode mode);
    // UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode()
    // Offset: 0xF08738
    UnityEngine::Playables::DirectorWrapMode GetTimeWrapMode();
    // System.Void SetTimeWrapMode(UnityEngine.Playables.DirectorWrapMode mode)
    // Offset: 0xF08740
    void SetTimeWrapMode(UnityEngine::Playables::DirectorWrapMode mode);
    // private System.Object GetScriptInstance()
    // Offset: 0xF08748
    ::Il2CppObject* GetScriptInstance();
    // private UnityEngine.Playables.PlayableHandle GetInputHandle(System.Int32 index)
    // Offset: 0xF08750
    UnityEngine::Playables::PlayableHandle GetInputHandle(int index);
    // private System.Void SetInputWeightFromIndex(System.Int32 index, System.Single weight)
    // Offset: 0xF08758
    void SetInputWeightFromIndex(int index, float weight);
    // private System.Single GetInputWeightFromIndex(System.Int32 index)
    // Offset: 0xF08760
    float GetInputWeightFromIndex(int index);
    // static private System.Void .cctor()
    // Offset: 0x1C210A0
    static void _cctor();
    // static private System.Boolean IsValid_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C1FEE0
    static bool IsValid_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Type GetPlayableType_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C1FF20
    static System::Type* GetPlayableType_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetScriptInstance_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Object scriptInstance)
    // Offset: 0x1C1FFF4
    static void SetScriptInstance_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, ::Il2CppObject* scriptInstance);
    // static private UnityEngine.Playables.PlayState GetPlayState_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C200C8
    static UnityEngine::Playables::PlayState GetPlayState_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void Play_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C2018C
    static void Play_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void Pause_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C20250
    static void Pause_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetSpeed_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Double value)
    // Offset: 0x1C20324
    static void SetSpeed_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value);
    // static private System.Double GetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C203F8
    static double GetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Double value)
    // Offset: 0x1C204CC
    static void SetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value);
    // static private System.Boolean IsDone_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C205A0
    static bool IsDone_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Double GetDuration_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C20664
    static double GetDuration_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetDuration_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Double value)
    // Offset: 0x1C20738
    static void SetDuration_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, double value);
    // static private System.Void SetPropagateSetTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Boolean value)
    // Offset: 0x1C2081C
    static void SetPropagateSetTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, bool value);
    // static private System.Void GetGraph_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, out UnityEngine.Playables.PlayableGraph ret)
    // Offset: 0x1C20908
    static void GetGraph_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableGraph& ret);
    // static private System.Int32 GetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C20958
    static int GetInputCount_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetInputCount_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 value)
    // Offset: 0x1C20A2C
    static void SetInputCount_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int value);
    // static private System.Void SetInputWeight_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, ref UnityEngine.Playables.PlayableHandle input, System.Single weight)
    // Offset: 0x1C20B24
    static void SetInputWeight_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableHandle& input, float weight);
    // static private System.Double GetPreviousTime_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C20C08
    static double GetPreviousTime_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetTraversalMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, UnityEngine.Playables.PlayableTraversalMode mode)
    // Offset: 0x1C20CDC
    static void SetTraversalMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::PlayableTraversalMode mode);
    // static private UnityEngine.Playables.DirectorWrapMode GetTimeWrapMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C20DB0
    static UnityEngine::Playables::DirectorWrapMode GetTimeWrapMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void SetTimeWrapMode_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, UnityEngine.Playables.DirectorWrapMode mode)
    // Offset: 0x1C20E84
    static void SetTimeWrapMode_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, UnityEngine::Playables::DirectorWrapMode mode);
    // static private System.Object GetScriptInstance_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self)
    // Offset: 0x1C20F58
    static ::Il2CppObject* GetScriptInstance_Injected(UnityEngine::Playables::PlayableHandle& _unity_self);
    // static private System.Void GetInputHandle_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index, out UnityEngine.Playables.PlayableHandle ret)
    // Offset: 0x1C20F98
    static void GetInputHandle_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index, UnityEngine::Playables::PlayableHandle& ret);
    // static private System.Void SetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index, System.Single weight)
    // Offset: 0x1C20FF0
    static void SetInputWeightFromIndex_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index, float weight);
    // static private System.Single GetInputWeightFromIndex_Injected(ref UnityEngine.Playables.PlayableHandle _unity_self, System.Int32 index)
    // Offset: 0x1C21050
    static float GetInputWeightFromIndex_Injected(UnityEngine::Playables::PlayableHandle& _unity_self, int index);
    // public override System.Boolean Equals(System.Object p)
    // Offset: 0xF08610
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object p)
    bool Equals(::Il2CppObject* p);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF08620
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.Playables.PlayableHandle
  #pragma pack(pop)
  static check_size<sizeof(PlayableHandle), 8 + sizeof(uint)> __UnityEngine_Playables_PlayableHandleSizeCheck;
  static_assert(sizeof(PlayableHandle) == 0xC);
  // static public System.Boolean op_Equality(UnityEngine.Playables.PlayableHandle x, UnityEngine.Playables.PlayableHandle y)
  // Offset: 0x1C1E9E8
  bool operator ==(const UnityEngine::Playables::PlayableHandle& x, const UnityEngine::Playables::PlayableHandle& y);
  // Writing MetadataGetter for method: PlayableHandle::GetObject
  // Il2CppName: GetObject
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: PlayableHandle::IsPlayableOfType
  // Il2CppName: IsPlayableOfType
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: PlayableHandle::get_Null
  // Il2CppName: get_Null
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (*)()>(&PlayableHandle::get_Null)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "get_Null", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInput
  // Il2CppName: GetInput
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (PlayableHandle::*)(int)>(&PlayableHandle::GetInput)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputWeight
  // Il2CppName: SetInputWeight
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(int, float)>(&PlayableHandle::SetInputWeight)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputWeight
  // Il2CppName: GetInputWeight
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayableHandle::*)(int)>(&PlayableHandle::GetInputWeight)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(UnityEngine::Playables::PlayableHandle)>(&PlayableHandle::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::CompareVersion
  // Il2CppName: CompareVersion
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableHandle, UnityEngine::Playables::PlayableHandle)>(&PlayableHandle::CompareVersion)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "CompareVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::CheckInputBounds
  // Il2CppName: CheckInputBounds
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(int)>(&PlayableHandle::CheckInputBounds)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "CheckInputBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::CheckInputBounds
  // Il2CppName: CheckInputBounds
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(int, bool)>(&PlayableHandle::CheckInputBounds)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "CheckInputBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::IsValid
  // Il2CppName: IsValid
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)()>(&PlayableHandle::IsValid)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetPlayableType
  // Il2CppName: GetPlayableType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (PlayableHandle::*)()>(&PlayableHandle::GetPlayableType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayableType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetScriptInstance
  // Il2CppName: SetScriptInstance
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(::Il2CppObject*)>(&PlayableHandle::SetScriptInstance)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetScriptInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetPlayState
  // Il2CppName: GetPlayState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayState (PlayableHandle::*)()>(&PlayableHandle::GetPlayState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::Play
  // Il2CppName: Play
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)()>(&PlayableHandle::Play)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::Pause
  // Il2CppName: Pause
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)()>(&PlayableHandle::Pause)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetSpeed
  // Il2CppName: SetSpeed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(double)>(&PlayableHandle::SetSpeed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetTime
  // Il2CppName: GetTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableHandle::*)()>(&PlayableHandle::GetTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetTime
  // Il2CppName: SetTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(double)>(&PlayableHandle::SetTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::IsDone
  // Il2CppName: IsDone
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)()>(&PlayableHandle::IsDone)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetDuration
  // Il2CppName: GetDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableHandle::*)()>(&PlayableHandle::GetDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetDuration
  // Il2CppName: SetDuration
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(double)>(&PlayableHandle::SetDuration)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetPropagateSetTime
  // Il2CppName: SetPropagateSetTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(bool)>(&PlayableHandle::SetPropagateSetTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetPropagateSetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetGraph
  // Il2CppName: GetGraph
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableGraph (PlayableHandle::*)()>(&PlayableHandle::GetGraph)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetGraph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputCount
  // Il2CppName: GetInputCount
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableHandle::*)()>(&PlayableHandle::GetInputCount)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputCount
  // Il2CppName: SetInputCount
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(int)>(&PlayableHandle::SetInputCount)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputWeight
  // Il2CppName: SetInputWeight
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(UnityEngine::Playables::PlayableHandle, float)>(&PlayableHandle::SetInputWeight)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetPreviousTime
  // Il2CppName: GetPreviousTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (PlayableHandle::*)()>(&PlayableHandle::GetPreviousTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPreviousTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetTraversalMode
  // Il2CppName: SetTraversalMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(UnityEngine::Playables::PlayableTraversalMode)>(&PlayableHandle::SetTraversalMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTraversalMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableTraversalMode>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetTimeWrapMode
  // Il2CppName: GetTimeWrapMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::DirectorWrapMode (PlayableHandle::*)()>(&PlayableHandle::GetTimeWrapMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTimeWrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetTimeWrapMode
  // Il2CppName: SetTimeWrapMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(UnityEngine::Playables::DirectorWrapMode)>(&PlayableHandle::SetTimeWrapMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTimeWrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::DirectorWrapMode>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetScriptInstance
  // Il2CppName: GetScriptInstance
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (PlayableHandle::*)()>(&PlayableHandle::GetScriptInstance)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetScriptInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputHandle
  // Il2CppName: GetInputHandle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayableHandle (PlayableHandle::*)(int)>(&PlayableHandle::GetInputHandle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputWeightFromIndex
  // Il2CppName: SetInputWeightFromIndex
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableHandle::*)(int, float)>(&PlayableHandle::SetInputWeightFromIndex)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeightFromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputWeightFromIndex
  // Il2CppName: GetInputWeightFromIndex
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PlayableHandle::*)(int)>(&PlayableHandle::GetInputWeightFromIndex)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputWeightFromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayableHandle::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::IsValid_Injected
  // Il2CppName: IsValid_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::IsValid_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsValid_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetPlayableType_Injected
  // Il2CppName: GetPlayableType_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetPlayableType_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayableType_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetScriptInstance_Injected
  // Il2CppName: SetScriptInstance_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, ::Il2CppObject*)>(&PlayableHandle::SetScriptInstance_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetScriptInstance_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetPlayState_Injected
  // Il2CppName: GetPlayState_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::PlayState (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetPlayState_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPlayState_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::Play_Injected
  // Il2CppName: Play_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::Play_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Play_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::Pause_Injected
  // Il2CppName: Pause_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::Pause_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Pause_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetSpeed_Injected
  // Il2CppName: SetSpeed_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&PlayableHandle::SetSpeed_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetSpeed_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetTime_Injected
  // Il2CppName: GetTime_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetTime_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetTime_Injected
  // Il2CppName: SetTime_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&PlayableHandle::SetTime_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::IsDone_Injected
  // Il2CppName: IsDone_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::IsDone_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "IsDone_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetDuration_Injected
  // Il2CppName: GetDuration_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetDuration_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetDuration_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetDuration_Injected
  // Il2CppName: SetDuration_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, double)>(&PlayableHandle::SetDuration_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetDuration_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetPropagateSetTime_Injected
  // Il2CppName: SetPropagateSetTime_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, bool)>(&PlayableHandle::SetPropagateSetTime_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetPropagateSetTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetGraph_Injected
  // Il2CppName: GetGraph_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::PlayableGraph&)>(&PlayableHandle::GetGraph_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetGraph_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputCount_Injected
  // Il2CppName: GetInputCount_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetInputCount_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputCount_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputCount_Injected
  // Il2CppName: SetInputCount_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, int)>(&PlayableHandle::SetInputCount_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputCount_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputWeight_Injected
  // Il2CppName: SetInputWeight_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::PlayableHandle&, float)>(&PlayableHandle::SetInputWeight_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeight_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetPreviousTime_Injected
  // Il2CppName: GetPreviousTime_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetPreviousTime_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetPreviousTime_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetTraversalMode_Injected
  // Il2CppName: SetTraversalMode_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::PlayableTraversalMode)>(&PlayableHandle::SetTraversalMode_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTraversalMode_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableTraversalMode>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetTimeWrapMode_Injected
  // Il2CppName: GetTimeWrapMode_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::DirectorWrapMode (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetTimeWrapMode_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetTimeWrapMode_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetTimeWrapMode_Injected
  // Il2CppName: SetTimeWrapMode_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, UnityEngine::Playables::DirectorWrapMode)>(&PlayableHandle::SetTimeWrapMode_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetTimeWrapMode_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::DirectorWrapMode>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetScriptInstance_Injected
  // Il2CppName: GetScriptInstance_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetScriptInstance_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetScriptInstance_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputHandle_Injected
  // Il2CppName: GetInputHandle_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, int, UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::GetInputHandle_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputHandle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::SetInputWeightFromIndex_Injected
  // Il2CppName: SetInputWeightFromIndex_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Playables::PlayableHandle&, int, float)>(&PlayableHandle::SetInputWeightFromIndex_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "SetInputWeightFromIndex_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetInputWeightFromIndex_Injected
  // Il2CppName: GetInputWeightFromIndex_Injected
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Playables::PlayableHandle&, int)>(&PlayableHandle::GetInputWeightFromIndex_Injected)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetInputWeightFromIndex_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayableHandle::*)(::Il2CppObject*)>(&PlayableHandle::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PlayableHandle::*)()>(&PlayableHandle::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PlayableHandle::operator ==
  // Il2CppName: op_Equality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Playables::PlayableHandle&, const UnityEngine::Playables::PlayableHandle&)>(&PlayableHandle::operator ==)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PlayableHandle), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Playables::PlayableHandle&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Playables::PlayableHandle&>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Playables::PlayableHandle, "UnityEngine.Playables", "PlayableHandle");
