// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: UnityEngine::ProBuilder
namespace UnityEngine::ProBuilder {
  // Forward declaring type: ProBuilderMesh
  class ProBuilderMesh;
  // Skipping declaration: PolyEditMode because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x32
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ProBuilder.PolyShape
  // [AddComponentMenu] Offset: E39EFC
  // [DisallowMultipleComponent] Offset: E39EFC
  // [ExcludeFromPresetAttribute] Offset: E39EFC
  // [ExcludeFromObjectFactoryAttribute] Offset: E39EFC
  // [ProGridsConditionalSnapAttribute] Offset: E39EFC
  class PolyShape : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: UnityEngine::ProBuilder::PolyShape::PolyEditMode
    struct PolyEditMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.ProBuilder.PolyShape/PolyEditMode
    struct PolyEditMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: PolyEditMode
      constexpr PolyEditMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode None
      static UnityEngine::ProBuilder::PolyShape::PolyEditMode _get_None();
      // Set static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode None
      static void _set_None(UnityEngine::ProBuilder::PolyShape::PolyEditMode value);
      // static field const value: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Path
      static constexpr const int Path = 1;
      // Get static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Path
      static UnityEngine::ProBuilder::PolyShape::PolyEditMode _get_Path();
      // Set static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Path
      static void _set_Path(UnityEngine::ProBuilder::PolyShape::PolyEditMode value);
      // static field const value: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Height
      static constexpr const int Height = 2;
      // Get static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Height
      static UnityEngine::ProBuilder::PolyShape::PolyEditMode _get_Height();
      // Set static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Height
      static void _set_Height(UnityEngine::ProBuilder::PolyShape::PolyEditMode value);
      // static field const value: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Edit
      static constexpr const int Edit = 3;
      // Get static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Edit
      static UnityEngine::ProBuilder::PolyShape::PolyEditMode _get_Edit();
      // Set static field: static public UnityEngine.ProBuilder.PolyShape/PolyEditMode Edit
      static void _set_Edit(UnityEngine::ProBuilder::PolyShape::PolyEditMode value);
    }; // UnityEngine.ProBuilder.PolyShape/PolyEditMode
    #pragma pack(pop)
    static check_size<sizeof(PolyShape::PolyEditMode), 0 + sizeof(int)> __UnityEngine_ProBuilder_PolyShape_PolyEditModeSizeCheck;
    static_assert(sizeof(PolyShape::PolyEditMode) == 0x4);
    // private UnityEngine.ProBuilder.ProBuilderMesh m_Mesh
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::ProBuilder::ProBuilderMesh* m_Mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::ProBuilder::ProBuilderMesh*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xE3ABA4
    // System.Collections.Generic.List`1<UnityEngine.Vector3> m_Points
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<UnityEngine::Vector3>* m_Points;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Vector3>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xE3ABF0
    // private System.Single m_Extrude
    // Size: 0x4
    // Offset: 0x28
    float m_Extrude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xE3AC3C
    // private UnityEngine.ProBuilder.PolyShape/PolyEditMode m_EditMode
    // Size: 0x4
    // Offset: 0x2C
    UnityEngine::ProBuilder::PolyShape::PolyEditMode m_EditMode;
    // Field size check
    static_assert(sizeof(UnityEngine::ProBuilder::PolyShape::PolyEditMode) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xE3AC88
    // private System.Boolean m_FlipNormals
    // Size: 0x1
    // Offset: 0x30
    bool m_FlipNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean isOnGrid
    // Size: 0x1
    // Offset: 0x31
    bool isOnGrid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: PolyShape
    PolyShape(UnityEngine::ProBuilder::ProBuilderMesh* m_Mesh_ = {}, System::Collections::Generic::List_1<UnityEngine::Vector3>* m_Points_ = {}, float m_Extrude_ = {}, UnityEngine::ProBuilder::PolyShape::PolyEditMode m_EditMode_ = {}, bool m_FlipNormals_ = {}, bool isOnGrid_ = {}) noexcept : m_Mesh{m_Mesh_}, m_Points{m_Points_}, m_Extrude{m_Extrude_}, m_EditMode{m_EditMode_}, m_FlipNormals{m_FlipNormals_}, isOnGrid{isOnGrid_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Vector3> get_controlPoints()
    // Offset: 0x171C2E8
    System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::Vector3>* get_controlPoints();
    // public System.Void SetControlPoints(System.Collections.Generic.IList`1<UnityEngine.Vector3> points)
    // Offset: 0x171C358
    void SetControlPoints(System::Collections::Generic::IList_1<UnityEngine::Vector3>* points);
    // public System.Single get_extrude()
    // Offset: 0x171C3BC
    float get_extrude();
    // public System.Void set_extrude(System.Single value)
    // Offset: 0x171C3C4
    void set_extrude(float value);
    // UnityEngine.ProBuilder.PolyShape/PolyEditMode get_polyEditMode()
    // Offset: 0x171C3CC
    UnityEngine::ProBuilder::PolyShape::PolyEditMode get_polyEditMode();
    // System.Void set_polyEditMode(UnityEngine.ProBuilder.PolyShape/PolyEditMode value)
    // Offset: 0x171C3D4
    void set_polyEditMode(UnityEngine::ProBuilder::PolyShape::PolyEditMode value);
    // public System.Boolean get_flipNormals()
    // Offset: 0x171C3DC
    bool get_flipNormals();
    // public System.Void set_flipNormals(System.Boolean value)
    // Offset: 0x171C3E4
    void set_flipNormals(bool value);
    // UnityEngine.ProBuilder.ProBuilderMesh get_mesh()
    // Offset: 0x171C3F0
    UnityEngine::ProBuilder::ProBuilderMesh* get_mesh();
    // System.Void set_mesh(UnityEngine.ProBuilder.ProBuilderMesh value)
    // Offset: 0x171C488
    void set_mesh(UnityEngine::ProBuilder::ProBuilderMesh* value);
    // private System.Boolean IsSnapEnabled()
    // Offset: 0x171C490
    bool IsSnapEnabled();
    // public System.Void .ctor()
    // Offset: 0x171C498
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PolyShape* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::PolyShape::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PolyShape*, creationType>()));
    }
  }; // UnityEngine.ProBuilder.PolyShape
  #pragma pack(pop)
  static check_size<sizeof(PolyShape), 49 + sizeof(bool)> __UnityEngine_ProBuilder_PolyShapeSizeCheck;
  static_assert(sizeof(PolyShape) == 0x32);
  // Writing MetadataGetter for method: PolyShape::get_controlPoints
  // Il2CppName: get_controlPoints
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::Vector3>* (PolyShape::*)()>(&PolyShape::get_controlPoints)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "get_controlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PolyShape::SetControlPoints
  // Il2CppName: SetControlPoints
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)(System::Collections::Generic::IList_1<UnityEngine::Vector3>*)>(&PolyShape::SetControlPoints)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "SetControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<UnityEngine::Vector3>*>()});
    }
  };
  // Writing MetadataGetter for method: PolyShape::get_extrude
  // Il2CppName: get_extrude
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (PolyShape::*)()>(&PolyShape::get_extrude)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "get_extrude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PolyShape::set_extrude
  // Il2CppName: set_extrude
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)(float)>(&PolyShape::set_extrude)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "set_extrude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: PolyShape::get_polyEditMode
  // Il2CppName: get_polyEditMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ProBuilder::PolyShape::PolyEditMode (PolyShape::*)()>(&PolyShape::get_polyEditMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "get_polyEditMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PolyShape::set_polyEditMode
  // Il2CppName: set_polyEditMode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)(UnityEngine::ProBuilder::PolyShape::PolyEditMode)>(&PolyShape::set_polyEditMode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "set_polyEditMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ProBuilder::PolyShape::PolyEditMode>()});
    }
  };
  // Writing MetadataGetter for method: PolyShape::get_flipNormals
  // Il2CppName: get_flipNormals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PolyShape::*)()>(&PolyShape::get_flipNormals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "get_flipNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PolyShape::set_flipNormals
  // Il2CppName: set_flipNormals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)(bool)>(&PolyShape::set_flipNormals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "set_flipNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: PolyShape::get_mesh
  // Il2CppName: get_mesh
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ProBuilder::ProBuilderMesh* (PolyShape::*)()>(&PolyShape::get_mesh)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PolyShape::set_mesh
  // Il2CppName: set_mesh
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)(UnityEngine::ProBuilder::ProBuilderMesh*)>(&PolyShape::set_mesh)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "set_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ProBuilder::ProBuilderMesh*>()});
    }
  };
  // Writing MetadataGetter for method: PolyShape::IsSnapEnabled
  // Il2CppName: IsSnapEnabled
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PolyShape::*)()>(&PolyShape::IsSnapEnabled)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), "IsSnapEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: PolyShape::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)()>(&PolyShape::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PolyShape::*)()>(&PolyShape::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(PolyShape*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::PolyShape*, "UnityEngine.ProBuilder", "PolyShape");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::PolyShape::PolyEditMode, "UnityEngine.ProBuilder", "PolyShape/PolyEditMode");
