// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.ProBuilder.KdTree
namespace UnityEngine::ProBuilder::KdTree {
  // Autogenerated type: UnityEngine.ProBuilder.KdTree.ITypeMath`1
  template<typename T>
  class ITypeMath_1 {
    public:
    // public System.Int32 Compare(T a, T b)
    // Offset: 0xFFFFFFFF
    int Compare(T a, T b) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("Compare");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<int>(), "Compare", {}, ::il2cpp_utils::ExtractTypes(a, b)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, a, b);
    }
    // public T get_MinValue()
    // Offset: 0xFFFFFFFF
    T get_MinValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("get_MinValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<T>(), "get_MinValue", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public System.Boolean AreEqual(T[] a, T[] b)
    // Offset: 0xFFFFFFFF
    bool AreEqual(::Array<T>* a, ::Array<T>* b) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("AreEqual");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "AreEqual", {}, ::il2cpp_utils::ExtractTypes(a, b)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, a, b);
    }
    // public T Multiply(T a, T b)
    // Offset: 0xFFFFFFFF
    T Multiply(T a, T b) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("Multiply");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<T>(), "Multiply", {}, ::il2cpp_utils::ExtractTypes(a, b)));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method, a, b);
    }
    // public T get_NegativeInfinity()
    // Offset: 0xFFFFFFFF
    T get_NegativeInfinity() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("get_NegativeInfinity");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<T>(), "get_NegativeInfinity", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public T get_PositiveInfinity()
    // Offset: 0xFFFFFFFF
    T get_PositiveInfinity() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("get_PositiveInfinity");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<T>(), "get_PositiveInfinity", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public T DistanceSquaredBetweenPoints(T[] a, T[] b)
    // Offset: 0xFFFFFFFF
    T DistanceSquaredBetweenPoints(::Array<T>* a, ::Array<T>* b) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder::KdTree").WithContext("ITypeMath_1").WithContext("DistanceSquaredBetweenPoints");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<T>(), "DistanceSquaredBetweenPoints", {}, ::il2cpp_utils::ExtractTypes(a, b)));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method, a, b);
    }
  }; // UnityEngine.ProBuilder.KdTree.ITypeMath`1
  // Could not write size check! Type: UnityEngine.ProBuilder.KdTree.ITypeMath`1 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(UnityEngine::ProBuilder::KdTree::ITypeMath_1, "UnityEngine.ProBuilder.KdTree", "ITypeMath`1");
#pragma pack(pop)
