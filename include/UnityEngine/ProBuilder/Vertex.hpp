// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.ProBuilder.MeshArrays
#include "UnityEngine/ProBuilder/MeshArrays.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ProBuilder.Vertex
  class Vertex : public ::Il2CppObject/*, public System::IEquatable_1<UnityEngine::ProBuilder::Vertex*>*/ {
    public:
    // private UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0x10
    UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Color m_Color
    // Size: 0x10
    // Offset: 0x1C
    UnityEngine::Color m_Color;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Vector3 m_Normal
    // Size: 0xC
    // Offset: 0x2C
    UnityEngine::Vector3 m_Normal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector4 m_Tangent
    // Size: 0x10
    // Offset: 0x38
    UnityEngine::Vector4 m_Tangent;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector2 m_UV0
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Vector2 m_UV0;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_UV2
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Vector2 m_UV2;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector4 m_UV3
    // Size: 0x10
    // Offset: 0x58
    UnityEngine::Vector4 m_UV3;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Vector4 m_UV4
    // Size: 0x10
    // Offset: 0x68
    UnityEngine::Vector4 m_UV4;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // private UnityEngine.ProBuilder.MeshArrays m_Attributes
    // Size: 0x4
    // Offset: 0x78
    UnityEngine::ProBuilder::MeshArrays m_Attributes;
    // Field size check
    static_assert(sizeof(UnityEngine::ProBuilder::MeshArrays) == 0x4);
    // Creating value type constructor for type: Vertex
    Vertex(UnityEngine::Vector3 m_Position_ = {}, UnityEngine::Color m_Color_ = {}, UnityEngine::Vector3 m_Normal_ = {}, UnityEngine::Vector4 m_Tangent_ = {}, UnityEngine::Vector2 m_UV0_ = {}, UnityEngine::Vector2 m_UV2_ = {}, UnityEngine::Vector4 m_UV3_ = {}, UnityEngine::Vector4 m_UV4_ = {}, UnityEngine::ProBuilder::MeshArrays m_Attributes_ = {}) noexcept : m_Position{m_Position_}, m_Color{m_Color_}, m_Normal{m_Normal_}, m_Tangent{m_Tangent_}, m_UV0{m_UV0_}, m_UV2{m_UV2_}, m_UV3{m_UV3_}, m_UV4{m_UV4_}, m_Attributes{m_Attributes_} {}
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::ProBuilder::Vertex*>
    operator System::IEquatable_1<UnityEngine::ProBuilder::Vertex*>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::ProBuilder::Vertex*>*>(this);
    }
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x20A494C
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x20A189C
    void set_position(UnityEngine::Vector3 value);
    // public UnityEngine.Color get_color()
    // Offset: 0x20A4984
    UnityEngine::Color get_color();
    // public System.Void set_color(UnityEngine.Color value)
    // Offset: 0x20A18C4
    void set_color(UnityEngine::Color value);
    // public UnityEngine.Vector3 get_normal()
    // Offset: 0x20A49BC
    UnityEngine::Vector3 get_normal();
    // public System.Void set_normal(UnityEngine.Vector3 value)
    // Offset: 0x20A18EC
    void set_normal(UnityEngine::Vector3 value);
    // public UnityEngine.Vector4 get_tangent()
    // Offset: 0x20A49F4
    UnityEngine::Vector4 get_tangent();
    // public System.Void set_tangent(UnityEngine.Vector4 value)
    // Offset: 0x20A1914
    void set_tangent(UnityEngine::Vector4 value);
    // public UnityEngine.Vector2 get_uv0()
    // Offset: 0x20A4A2C
    UnityEngine::Vector2 get_uv0();
    // public System.Void set_uv0(UnityEngine.Vector2 value)
    // Offset: 0x20A193C
    void set_uv0(UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_uv2()
    // Offset: 0x20A4A60
    UnityEngine::Vector2 get_uv2();
    // public System.Void set_uv2(UnityEngine.Vector2 value)
    // Offset: 0x20A1960
    void set_uv2(UnityEngine::Vector2 value);
    // public UnityEngine.Vector4 get_uv3()
    // Offset: 0x20A4A94
    UnityEngine::Vector4 get_uv3();
    // public System.Void set_uv3(UnityEngine.Vector4 value)
    // Offset: 0x20A1984
    void set_uv3(UnityEngine::Vector4 value);
    // public UnityEngine.Vector4 get_uv4()
    // Offset: 0x20A4ACC
    UnityEngine::Vector4 get_uv4();
    // public System.Void set_uv4(UnityEngine.Vector4 value)
    // Offset: 0x20A19AC
    void set_uv4(UnityEngine::Vector4 value);
    // UnityEngine.ProBuilder.MeshArrays get_attributes()
    // Offset: 0x20A4B04
    UnityEngine::ProBuilder::MeshArrays get_attributes();
    // public System.Boolean HasArrays(UnityEngine.ProBuilder.MeshArrays attribute)
    // Offset: 0x20A188C
    bool HasArrays(UnityEngine::ProBuilder::MeshArrays attribute);
    // private System.Boolean get_hasPosition()
    // Offset: 0x20A4B0C
    bool get_hasPosition();
    // private System.Void set_hasPosition(System.Boolean value)
    // Offset: 0x20A4958
    void set_hasPosition(bool value);
    // private System.Boolean get_hasColor()
    // Offset: 0x20A4B18
    bool get_hasColor();
    // private System.Void set_hasColor(System.Boolean value)
    // Offset: 0x20A4990
    void set_hasColor(bool value);
    // private System.Boolean get_hasNormal()
    // Offset: 0x20A4B24
    bool get_hasNormal();
    // private System.Void set_hasNormal(System.Boolean value)
    // Offset: 0x20A49C8
    void set_hasNormal(bool value);
    // private System.Boolean get_hasTangent()
    // Offset: 0x20A4B30
    bool get_hasTangent();
    // private System.Void set_hasTangent(System.Boolean value)
    // Offset: 0x20A4A00
    void set_hasTangent(bool value);
    // private System.Boolean get_hasUV0()
    // Offset: 0x20A4B3C
    bool get_hasUV0();
    // private System.Void set_hasUV0(System.Boolean value)
    // Offset: 0x20A4A34
    void set_hasUV0(bool value);
    // private System.Boolean get_hasUV2()
    // Offset: 0x20A4B48
    bool get_hasUV2();
    // private System.Void set_hasUV2(System.Boolean value)
    // Offset: 0x20A4A68
    void set_hasUV2(bool value);
    // private System.Boolean get_hasUV3()
    // Offset: 0x20A4B54
    bool get_hasUV3();
    // private System.Void set_hasUV3(System.Boolean value)
    // Offset: 0x20A4AA0
    void set_hasUV3(bool value);
    // private System.Boolean get_hasUV4()
    // Offset: 0x20A4B60
    bool get_hasUV4();
    // private System.Void set_hasUV4(System.Boolean value)
    // Offset: 0x20A4AD8
    void set_hasUV4(bool value);
    // public System.Boolean Equals(UnityEngine.ProBuilder.Vertex other)
    // Offset: 0x20A4BF0
    bool Equals(UnityEngine::ProBuilder::Vertex* other);
    // public System.Boolean Equals(UnityEngine.ProBuilder.Vertex other, UnityEngine.ProBuilder.MeshArrays mask)
    // Offset: 0x20A4D44
    bool Equals(UnityEngine::ProBuilder::Vertex* other, UnityEngine::ProBuilder::MeshArrays mask);
    // public System.Void .ctor(UnityEngine.ProBuilder.Vertex vertex)
    // Offset: 0x20A4F9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vertex* New_ctor(UnityEngine::ProBuilder::Vertex* vertex) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Vertex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vertex*, creationType>(vertex)));
    }
    // static public UnityEngine.ProBuilder.Vertex Add(UnityEngine.ProBuilder.Vertex a, UnityEngine.ProBuilder.Vertex b)
    // Offset: 0x20A51B8
    static UnityEngine::ProBuilder::Vertex* Add(UnityEngine::ProBuilder::Vertex* a, UnityEngine::ProBuilder::Vertex* b);
    // public System.Void Add(UnityEngine.ProBuilder.Vertex b)
    // Offset: 0x20A5238
    void Add(UnityEngine::ProBuilder::Vertex* b);
    // static public UnityEngine.ProBuilder.Vertex Subtract(UnityEngine.ProBuilder.Vertex a, UnityEngine.ProBuilder.Vertex b)
    // Offset: 0x20A5478
    static UnityEngine::ProBuilder::Vertex* Subtract(UnityEngine::ProBuilder::Vertex* a, UnityEngine::ProBuilder::Vertex* b);
    // public System.Void Subtract(UnityEngine.ProBuilder.Vertex b)
    // Offset: 0x20A54F8
    void Subtract(UnityEngine::ProBuilder::Vertex* b);
    // static public UnityEngine.ProBuilder.Vertex Multiply(UnityEngine.ProBuilder.Vertex a, System.Single value)
    // Offset: 0x20A5738
    static UnityEngine::ProBuilder::Vertex* Multiply(UnityEngine::ProBuilder::Vertex* a, float value);
    // public System.Void Multiply(System.Single value)
    // Offset: 0x20A57B8
    void Multiply(float value);
    // static public UnityEngine.ProBuilder.Vertex Divide(UnityEngine.ProBuilder.Vertex a, System.Single value)
    // Offset: 0x20A59A4
    static UnityEngine::ProBuilder::Vertex* Divide(UnityEngine::ProBuilder::Vertex* a, float value);
    // public System.Void Divide(System.Single value)
    // Offset: 0x20A5A24
    void Divide(float value);
    // public System.Void Normalize()
    // Offset: 0x20A5C0C
    void Normalize();
    // public System.String ToString(System.String args)
    // Offset: 0x20A5CC0
    ::Il2CppString* ToString(::Il2CppString* args);
    // static public System.Void GetArrays(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, out UnityEngine.Vector3[] position, out UnityEngine.Color[] color, out UnityEngine.Vector2[] uv0, out UnityEngine.Vector3[] normal, out UnityEngine.Vector4[] tangent, out UnityEngine.Vector2[] uv2, out System.Collections.Generic.List`1<UnityEngine.Vector4> uv3, out System.Collections.Generic.List`1<UnityEngine.Vector4> uv4)
    // Offset: 0x20A5F80
    static void GetArrays(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, ::Array<UnityEngine::Vector3>*& position, ::Array<UnityEngine::Color>*& color, ::Array<UnityEngine::Vector2>*& uv0, ::Array<UnityEngine::Vector3>*& normal, ::Array<UnityEngine::Vector4>*& tangent, ::Array<UnityEngine::Vector2>*& uv2, System::Collections::Generic::List_1<UnityEngine::Vector4>*& uv3, System::Collections::Generic::List_1<UnityEngine::Vector4>*& uv4);
    // static public System.Void GetArrays(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, out UnityEngine.Vector3[] position, out UnityEngine.Color[] color, out UnityEngine.Vector2[] uv0, out UnityEngine.Vector3[] normal, out UnityEngine.Vector4[] tangent, out UnityEngine.Vector2[] uv2, out System.Collections.Generic.List`1<UnityEngine.Vector4> uv3, out System.Collections.Generic.List`1<UnityEngine.Vector4> uv4, UnityEngine.ProBuilder.MeshArrays attributes)
    // Offset: 0x20A5FAC
    static void GetArrays(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, ::Array<UnityEngine::Vector3>*& position, ::Array<UnityEngine::Color>*& color, ::Array<UnityEngine::Vector2>*& uv0, ::Array<UnityEngine::Vector3>*& normal, ::Array<UnityEngine::Vector4>*& tangent, ::Array<UnityEngine::Vector2>*& uv2, System::Collections::Generic::List_1<UnityEngine::Vector4>*& uv3, System::Collections::Generic::List_1<UnityEngine::Vector4>*& uv4, UnityEngine::ProBuilder::MeshArrays attributes);
    // static public System.Void SetMesh(UnityEngine.Mesh mesh, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices)
    // Offset: 0x20A6894
    static void SetMesh(UnityEngine::Mesh* mesh, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices);
    // static public UnityEngine.ProBuilder.Vertex Average(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Collections.Generic.IList`1<System.Int32> indexes)
    // Offset: 0x20A6B48
    static UnityEngine::ProBuilder::Vertex* Average(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, System::Collections::Generic::IList_1<int>* indexes);
    // static public UnityEngine.ProBuilder.Vertex Mix(UnityEngine.ProBuilder.Vertex x, UnityEngine.ProBuilder.Vertex y, System.Single weight)
    // Offset: 0x20A7A9C
    static UnityEngine::ProBuilder::Vertex* Mix(UnityEngine::ProBuilder::Vertex* x, UnityEngine::ProBuilder::Vertex* y, float weight);
    // public System.Void .ctor()
    // Offset: 0x20A1884
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Vertex* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Vertex::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Vertex*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x20A4B6C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x20A4ECC
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.ProBuilder.Vertex
  #pragma pack(pop)
  static check_size<sizeof(Vertex), 120 + sizeof(UnityEngine::ProBuilder::MeshArrays)> __UnityEngine_ProBuilder_VertexSizeCheck;
  static_assert(sizeof(Vertex) == 0x7C);
  // static public System.Boolean op_Equality(UnityEngine.ProBuilder.Vertex a, UnityEngine.ProBuilder.Vertex b)
  // Offset: 0x20A5150
  bool operator ==(UnityEngine::ProBuilder::Vertex* a, UnityEngine::ProBuilder::Vertex& b);
  // static public System.Boolean op_Inequality(UnityEngine.ProBuilder.Vertex a, UnityEngine.ProBuilder.Vertex b)
  // Offset: 0x20A517C
  bool operator !=(UnityEngine::ProBuilder::Vertex* a, UnityEngine::ProBuilder::Vertex& b);
  // static public UnityEngine.ProBuilder.Vertex op_Addition(UnityEngine.ProBuilder.Vertex a, UnityEngine.ProBuilder.Vertex b)
  // Offset: 0x20A51B4
  UnityEngine::ProBuilder::Vertex* operator+(UnityEngine::ProBuilder::Vertex* a, UnityEngine::ProBuilder::Vertex& b);
  // static public UnityEngine.ProBuilder.Vertex op_Subtraction(UnityEngine.ProBuilder.Vertex a, UnityEngine.ProBuilder.Vertex b)
  // Offset: 0x20A5474
  UnityEngine::ProBuilder::Vertex* operator-(UnityEngine::ProBuilder::Vertex* a, UnityEngine::ProBuilder::Vertex& b);
  // static public UnityEngine.ProBuilder.Vertex op_Multiply(UnityEngine.ProBuilder.Vertex a, System.Single value)
  // Offset: 0x20A5734
  UnityEngine::ProBuilder::Vertex* operator*(UnityEngine::ProBuilder::Vertex& a, const float& value);
  // static public UnityEngine.ProBuilder.Vertex op_Division(UnityEngine.ProBuilder.Vertex a, System.Single value)
  // Offset: 0x20A59A0
  UnityEngine::ProBuilder::Vertex* operator/(UnityEngine::ProBuilder::Vertex& a, const float& value);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::Vertex*, "UnityEngine.ProBuilder", "Vertex");
