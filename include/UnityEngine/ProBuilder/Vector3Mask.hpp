// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ProBuilder.Vector3Mask
  // [DefaultMemberAttribute] Offset: E3A194
  struct Vector3Mask/*, public System::ValueType, public System::IEquatable_1<UnityEngine::ProBuilder::Vector3Mask>*/ {
    public:
    // private System.Byte m_Mask
    // Size: 0x1
    // Offset: 0x0
    uint8_t m_Mask;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Creating value type constructor for type: Vector3Mask
    constexpr Vector3Mask(uint8_t m_Mask_ = {}) noexcept : m_Mask{m_Mask_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::ProBuilder::Vector3Mask>
    operator System::IEquatable_1<UnityEngine::ProBuilder::Vector3Mask>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::ProBuilder::Vector3Mask>*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return m_Mask;
    }
    // static field const value: static private System.Byte X
    static constexpr const uint8_t X = 1u;
    // Get static field: static private System.Byte X
    static uint8_t _get_X();
    // Set static field: static private System.Byte X
    static void _set_X(uint8_t value);
    // static field const value: static private System.Byte Y
    static constexpr const uint8_t Y = 2u;
    // Get static field: static private System.Byte Y
    static uint8_t _get_Y();
    // Set static field: static private System.Byte Y
    static void _set_Y(uint8_t value);
    // static field const value: static private System.Byte Z
    static constexpr const uint8_t Z = 4u;
    // Get static field: static private System.Byte Z
    static uint8_t _get_Z();
    // Set static field: static private System.Byte Z
    static void _set_Z(uint8_t value);
    // Get static field: static public readonly UnityEngine.ProBuilder.Vector3Mask XYZ
    static UnityEngine::ProBuilder::Vector3Mask _get_XYZ();
    // Set static field: static public readonly UnityEngine.ProBuilder.Vector3Mask XYZ
    static void _set_XYZ(UnityEngine::ProBuilder::Vector3Mask value);
    // public System.Single get_x()
    // Offset: 0xF192BC
    float get_x();
    // public System.Single get_y()
    // Offset: 0xF192D4
    float get_y();
    // public System.Single get_z()
    // Offset: 0xF192EC
    float get_z();
    // public System.Void .ctor(UnityEngine.Vector3 v, System.Single epsilon)
    // Offset: 0xF19304
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Vector3Mask(UnityEngine::Vector3 v, float epsilon) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Vector3Mask::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(epsilon)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, v, epsilon);
    }
    // public System.Void .ctor(System.Byte mask)
    // Offset: 0xF1930C
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  Vector3Mask(uint8_t mask)
    // public System.Int32 get_active()
    // Offset: 0xF1931C
    int get_active();
    // static public UnityEngine.ProBuilder.Vector3Mask op_Explicit(UnityEngine.Vector3 v)
    // Offset: 0x22C2094
    explicit Vector3Mask(UnityEngine::Vector3& v);
    // public System.Single get_Item(System.Int32 i)
    // Offset: 0xF19338
    float get_Item(int i);
    // public System.Void set_Item(System.Int32 i, System.Single value)
    // Offset: 0xF19340
    void set_Item(int i, float value);
    // public System.Boolean Equals(UnityEngine.ProBuilder.Vector3Mask other)
    // Offset: 0xF19348
    bool Equals(UnityEngine::ProBuilder::Vector3Mask other);
    // static private System.Void .cctor()
    // Offset: 0x22C25E0
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0xF19314
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xF19358
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF19360
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.ProBuilder.Vector3Mask
  #pragma pack(pop)
  static check_size<sizeof(Vector3Mask), 0 + sizeof(uint8_t)> __UnityEngine_ProBuilder_Vector3MaskSizeCheck;
  static_assert(sizeof(Vector3Mask) == 0x1);
  // static public UnityEngine.ProBuilder.Vector3Mask op_BitwiseOr(UnityEngine.ProBuilder.Vector3Mask left, UnityEngine.ProBuilder.Vector3Mask right)
  // Offset: 0x22C20C4
  UnityEngine::ProBuilder::Vector3Mask operator|(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right);
  // static public UnityEngine.ProBuilder.Vector3Mask op_BitwiseAnd(UnityEngine.ProBuilder.Vector3Mask left, UnityEngine.ProBuilder.Vector3Mask right)
  // Offset: 0x22C20D0
  UnityEngine::ProBuilder::Vector3Mask operator&(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right);
  // static public UnityEngine.ProBuilder.Vector3Mask op_ExclusiveOr(UnityEngine.ProBuilder.Vector3Mask left, UnityEngine.ProBuilder.Vector3Mask right)
  // Offset: 0x22C20DC
  UnityEngine::ProBuilder::Vector3Mask operator^(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right);
  // static public UnityEngine.Vector3 op_Multiply(UnityEngine.ProBuilder.Vector3Mask mask, System.Single value)
  // Offset: 0x22C20E8
  UnityEngine::Vector3 operator*(const UnityEngine::ProBuilder::Vector3Mask& mask, const float& value);
  // static public UnityEngine.Vector3 op_Multiply(UnityEngine.ProBuilder.Vector3Mask mask, UnityEngine.Vector3 value)
  // Offset: 0x22C214C
  UnityEngine::Vector3 operator*(const UnityEngine::ProBuilder::Vector3Mask& mask, const UnityEngine::Vector3& value);
  // static public UnityEngine.Vector3 op_Multiply(UnityEngine.Quaternion rotation, UnityEngine.ProBuilder.Vector3Mask mask)
  // Offset: 0x22C21AC
  UnityEngine::Vector3 operator*(const UnityEngine::Quaternion& rotation, const UnityEngine::ProBuilder::Vector3Mask& mask);
  // static public System.Boolean op_Equality(UnityEngine.ProBuilder.Vector3Mask left, UnityEngine.ProBuilder.Vector3Mask right)
  // Offset: 0x22C2370
  bool operator ==(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right);
  // static public System.Boolean op_Inequality(UnityEngine.ProBuilder.Vector3Mask left, UnityEngine.ProBuilder.Vector3Mask right)
  // Offset: 0x22C2380
  bool operator !=(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::Vector3Mask, "UnityEngine.ProBuilder", "Vector3Mask");
// Writing MetadataGetter for method: Vector3Mask::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3Mask::*)()>(&Vector3Mask::get_x)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3Mask::*)()>(&Vector3Mask::get_y)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::get_z
// Il2CppName: get_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3Mask::*)()>(&Vector3Mask::get_z)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "get_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::Vector3Mask
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Mask::*)(UnityEngine::Vector3, float)>(&Vector3Mask::Vector3Mask<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Mask::*)(UnityEngine::Vector3, float)>(&Vector3Mask::Vector3Mask<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::Vector3Mask
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Mask::*)(uint8_t)>(&Vector3Mask::Vector3Mask<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Mask::*)(uint8_t)>(&Vector3Mask::Vector3Mask<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector3Mask::*)()>(&Vector3Mask::get_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::Vector3Mask
// Il2CppName: op_Explicit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ProBuilder::Vector3Mask (*)(UnityEngine::Vector3&)>(&Vector3Mask::Vector3Mask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_Explicit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3Mask::*)(int)>(&Vector3Mask::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3Mask::*)(int, float)>(&Vector3Mask::set_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3Mask::*)(UnityEngine::ProBuilder::Vector3Mask)>(&Vector3Mask::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ProBuilder::Vector3Mask>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vector3Mask::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector3Mask::*)()>(&Vector3Mask::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3Mask::*)(::Il2CppObject*)>(&Vector3Mask::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector3Mask::*)()>(&Vector3Mask::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator|
// Il2CppName: op_BitwiseOr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ProBuilder::Vector3Mask (*)(const UnityEngine::ProBuilder::Vector3Mask&, const UnityEngine::ProBuilder::Vector3Mask&)>(&Vector3Mask::operator|)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_BitwiseOr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator&
// Il2CppName: op_BitwiseAnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ProBuilder::Vector3Mask (*)(const UnityEngine::ProBuilder::Vector3Mask&, const UnityEngine::ProBuilder::Vector3Mask&)>(&Vector3Mask::operator&)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_BitwiseAnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator^
// Il2CppName: op_ExclusiveOr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ProBuilder::Vector3Mask (*)(const UnityEngine::ProBuilder::Vector3Mask&, const UnityEngine::ProBuilder::Vector3Mask&)>(&Vector3Mask::operator^)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_ExclusiveOr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::ProBuilder::Vector3Mask&, const float&)>(&Vector3Mask::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::ProBuilder::Vector3Mask&, const UnityEngine::Vector3&)>(&Vector3Mask::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Quaternion&, const UnityEngine::ProBuilder::Vector3Mask&)>(&Vector3Mask::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::ProBuilder::Vector3Mask&, const UnityEngine::ProBuilder::Vector3Mask&)>(&Vector3Mask::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>()});
  }
};
// Writing MetadataGetter for method: Vector3Mask::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::ProBuilder::Vector3Mask&, const UnityEngine::ProBuilder::Vector3Mask&)>(&Vector3Mask::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3Mask), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::ProBuilder::Vector3Mask&>()});
  }
};
