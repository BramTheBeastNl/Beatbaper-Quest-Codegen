// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ProBuilder.AutoUnwrapSettings
#include "UnityEngine/ProBuilder/AutoUnwrapSettings.hpp"
// Including type: UnityEngine.ProBuilder.Edge
#include "UnityEngine/ProBuilder/Edge.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ProBuilder.Face
  // [DefaultMemberAttribute] Offset: E38E40
  class Face : public ::Il2CppObject {
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xE399A4
    // private System.Int32[] m_Indexes
    // Size: 0x8
    // Offset: 0x10
    ::Array<int>* m_Indexes;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xE399F0
    // private System.Int32 m_SmoothingGroup
    // Size: 0x4
    // Offset: 0x18
    int m_SmoothingGroup;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xE39A3C
    // private UnityEngine.ProBuilder.AutoUnwrapSettings m_Uv
    // Size: 0x20
    // Offset: 0x1C
    UnityEngine::ProBuilder::AutoUnwrapSettings m_Uv;
    // Field size check
    static_assert(sizeof(UnityEngine::ProBuilder::AutoUnwrapSettings) == 0x20);
    // Padding between fields: m_Uv and: m_Material
    char __padding2[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xE39A88
    // private UnityEngine.Material m_Material
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Material* m_Material;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private System.Int32 m_SubmeshIndex
    // Size: 0x4
    // Offset: 0x48
    int m_SubmeshIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xE39AE4
    // private System.Boolean m_ManualUV
    // Size: 0x1
    // Offset: 0x4C
    bool m_ManualUV;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ManualUV and: elementGroup
    char __padding5[0x3] = {};
    // System.Int32 elementGroup
    // Size: 0x4
    // Offset: 0x50
    int elementGroup;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_TextureGroup
    // Size: 0x4
    // Offset: 0x54
    int m_TextureGroup;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32[] m_DistinctIndexes
    // Size: 0x8
    // Offset: 0x58
    ::Array<int>* m_DistinctIndexes;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private UnityEngine.ProBuilder.Edge[] m_Edges
    // Size: 0x8
    // Offset: 0x60
    ::Array<UnityEngine::ProBuilder::Edge>* m_Edges;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ProBuilder::Edge>*) == 0x8);
    // Creating value type constructor for type: Face
    Face(::Array<int>* m_Indexes_ = {}, int m_SmoothingGroup_ = {}, UnityEngine::ProBuilder::AutoUnwrapSettings m_Uv_ = {}, UnityEngine::Material* m_Material_ = {}, int m_SubmeshIndex_ = {}, bool m_ManualUV_ = {}, int elementGroup_ = {}, int m_TextureGroup_ = {}, ::Array<int>* m_DistinctIndexes_ = {}, ::Array<UnityEngine::ProBuilder::Edge>* m_Edges_ = {}) noexcept : m_Indexes{m_Indexes_}, m_SmoothingGroup{m_SmoothingGroup_}, m_Uv{m_Uv_}, m_Material{m_Material_}, m_SubmeshIndex{m_SubmeshIndex_}, m_ManualUV{m_ManualUV_}, elementGroup{elementGroup_}, m_TextureGroup{m_TextureGroup_}, m_DistinctIndexes{m_DistinctIndexes_}, m_Edges{m_Edges_} {}
    // public System.Boolean get_manualUV()
    // Offset: 0x1A9DB54
    bool get_manualUV();
    // public System.Void set_manualUV(System.Boolean value)
    // Offset: 0x1A9DB5C
    void set_manualUV(bool value);
    // public System.Int32 get_textureGroup()
    // Offset: 0x1A9DB68
    int get_textureGroup();
    // public System.Void set_textureGroup(System.Int32 value)
    // Offset: 0x1A9DB70
    void set_textureGroup(int value);
    // System.Int32[] get_indexesInternal()
    // Offset: 0x1A9DB78
    ::Array<int>* get_indexesInternal();
    // System.Void set_indexesInternal(System.Int32[] value)
    // Offset: 0x1A9DB80
    void set_indexesInternal(::Array<int>* value);
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_indexes()
    // Offset: 0x1A9DC74
    System::Collections::ObjectModel::ReadOnlyCollection_1<int>* get_indexes();
    // public System.Void SetIndexes(System.Collections.Generic.IEnumerable`1<System.Int32> indices)
    // Offset: 0x1A9DCE4
    void SetIndexes(System::Collections::Generic::IEnumerable_1<int>* indices);
    // System.Int32[] get_distinctIndexesInternal()
    // Offset: 0x1A9D4B0
    ::Array<int>* get_distinctIndexesInternal();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_distinctIndexes()
    // Offset: 0x1A9DE6C
    System::Collections::ObjectModel::ReadOnlyCollection_1<int>* get_distinctIndexes();
    // UnityEngine.ProBuilder.Edge[] get_edgesInternal()
    // Offset: 0x1A9D974
    ::Array<UnityEngine::ProBuilder::Edge>* get_edgesInternal();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.ProBuilder.Edge> get_edges()
    // Offset: 0x1A9E158
    System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::ProBuilder::Edge>* get_edges();
    // public System.Int32 get_smoothingGroup()
    // Offset: 0x1A9E1D8
    int get_smoothingGroup();
    // public System.Void set_smoothingGroup(System.Int32 value)
    // Offset: 0x1A9E1E0
    void set_smoothingGroup(int value);
    // public UnityEngine.Material get_material()
    // Offset: 0x1A9E1E8
    UnityEngine::Material* get_material();
    // public System.Void set_material(UnityEngine.Material value)
    // Offset: 0x1A9E1F0
    void set_material(UnityEngine::Material* value);
    // public System.Int32 get_submeshIndex()
    // Offset: 0x1A9E1F8
    int get_submeshIndex();
    // public System.Void set_submeshIndex(System.Int32 value)
    // Offset: 0x1A9E200
    void set_submeshIndex(int value);
    // public UnityEngine.ProBuilder.AutoUnwrapSettings get_uv()
    // Offset: 0x1A9E208
    UnityEngine::ProBuilder::AutoUnwrapSettings get_uv();
    // public System.Void set_uv(UnityEngine.ProBuilder.AutoUnwrapSettings value)
    // Offset: 0x1A9E218
    void set_uv(UnityEngine::ProBuilder::AutoUnwrapSettings value);
    // public System.Int32 get_Item(System.Int32 i)
    // Offset: 0x1A9E228
    int get_Item(int i);
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<System.Int32> indices)
    // Offset: 0x1A9E28C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Face* New_ctor(System::Collections::Generic::IEnumerable_1<int>* indices) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Face::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Face*, creationType>(indices)));
    }
    // System.Void .ctor(System.Int32[] triangles, UnityEngine.Material m, UnityEngine.ProBuilder.AutoUnwrapSettings u, System.Int32 smoothing, System.Int32 texture, System.Int32 element, System.Boolean manualUVs)
    // Offset: 0x1A9E34C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Face* New_ctor(::Array<int>* triangles, UnityEngine::Material* m, UnityEngine::ProBuilder::AutoUnwrapSettings u, int smoothing, int texture, int element, bool manualUVs) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Face::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Face*, creationType>(triangles, m, u, smoothing, texture, element, manualUVs)));
    }
    // System.Void .ctor(System.Collections.Generic.IEnumerable`1<System.Int32> triangles, System.Int32 submeshIndex, UnityEngine.ProBuilder.AutoUnwrapSettings u, System.Int32 smoothing, System.Int32 texture, System.Int32 element, System.Boolean manualUVs)
    // Offset: 0x1A9E3FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Face* New_ctor(System::Collections::Generic::IEnumerable_1<int>* triangles, int submeshIndex, UnityEngine::ProBuilder::AutoUnwrapSettings u, int smoothing, int texture, int element, bool manualUVs) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Face::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Face*, creationType>(triangles, submeshIndex, u, smoothing, texture, element, manualUVs)));
    }
    // public System.Void .ctor(UnityEngine.ProBuilder.Face other)
    // Offset: 0x1A9E4A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Face* New_ctor(UnityEngine::ProBuilder::Face* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Face::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Face*, creationType>(other)));
    }
    // public System.Void CopyFrom(UnityEngine.ProBuilder.Face other)
    // Offset: 0x1A9E4D8
    void CopyFrom(UnityEngine::ProBuilder::Face* other);
    // System.Void InvalidateCache()
    // Offset: 0x1A9DC6C
    void InvalidateCache();
    // private UnityEngine.ProBuilder.Edge[] CacheEdges()
    // Offset: 0x1A9DEEC
    ::Array<UnityEngine::ProBuilder::Edge>* CacheEdges();
    // private System.Int32[] CacheDistinctIndexes()
    // Offset: 0x1A9DDE8
    ::Array<int>* CacheDistinctIndexes();
    // public System.Boolean Contains(System.Int32 a, System.Int32 b, System.Int32 c)
    // Offset: 0x1A9E60C
    bool Contains(int a, int b, int c);
    // public System.Boolean IsQuad()
    // Offset: 0x1A9E6AC
    bool IsQuad();
    // public System.Int32[] ToQuad()
    // Offset: 0x1A9E700
    ::Array<int>* ToQuad();
    // public System.Void ShiftIndexes(System.Int32 offset)
    // Offset: 0x1A9EC44
    void ShiftIndexes(int offset);
    // private System.Int32 SmallestIndexValue()
    // Offset: 0x1A9ECB4
    int SmallestIndexValue();
    // public System.Void ShiftIndexesToZero()
    // Offset: 0x1A9ED14
    void ShiftIndexesToZero();
    // public System.Void Reverse()
    // Offset: 0x1A9ED84
    void Reverse();
    // static System.Void GetIndices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.List`1<System.Int32> indices)
    // Offset: 0x1A9EDB0
    static void GetIndices(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::List_1<int>* indices);
    // static System.Void GetDistinctIndices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.List`1<System.Int32> indices)
    // Offset: 0x1A9F0A8
    static void GetDistinctIndices(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::List_1<int>* indices);
    // System.Boolean TryGetNextEdge(UnityEngine.ProBuilder.Edge source, System.Int32 index, ref UnityEngine.ProBuilder.Edge nextEdge, ref System.Int32 nextIndex)
    // Offset: 0x1A9F3C4
    bool TryGetNextEdge(UnityEngine::ProBuilder::Edge source, int index, UnityEngine::ProBuilder::Edge& nextEdge, int& nextIndex);
    // public System.Void .ctor()
    // Offset: 0x1A9E264
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Face* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::Face::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Face*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1A9EA84
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // UnityEngine.ProBuilder.Face
  #pragma pack(pop)
  static check_size<sizeof(Face), 96 + sizeof(::Array<UnityEngine::ProBuilder::Edge>*)> __UnityEngine_ProBuilder_FaceSizeCheck;
  static_assert(sizeof(Face) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::Face*, "UnityEngine.ProBuilder", "Face");
