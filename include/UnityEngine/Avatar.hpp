// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: HumanDescription
  struct HumanDescription;
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Avatar
  // [UsedByNativeCodeAttribute] Offset: DA8F58
  // [NativeHeaderAttribute] Offset: DA8F58
  class Avatar : public UnityEngine::Object {
    public:
    // Creating value type constructor for type: Avatar
    Avatar() noexcept {}
    // public System.Boolean get_isValid()
    // Offset: 0x23427F0
    bool get_isValid();
    // public System.Boolean get_isHuman()
    // Offset: 0x2342830
    bool get_isHuman();
    // public UnityEngine.HumanDescription get_humanDescription()
    // Offset: 0x2342870
    UnityEngine::HumanDescription get_humanDescription();
    // System.Void SetMuscleMinMax(System.Int32 muscleId, System.Single min, System.Single max)
    // Offset: 0x2342938
    void SetMuscleMinMax(int muscleId, float min, float max);
    // System.Void SetParameter(System.Int32 parameterId, System.Single value)
    // Offset: 0x23429A0
    void SetParameter(int parameterId, float value);
    // System.Single GetAxisLength(System.Int32 humanId)
    // Offset: 0x2342A00
    float GetAxisLength(int humanId);
    // UnityEngine.Quaternion GetPreRotation(System.Int32 humanId)
    // Offset: 0x2342ACC
    UnityEngine::Quaternion GetPreRotation(int humanId);
    // UnityEngine.Quaternion GetPostRotation(System.Int32 humanId)
    // Offset: 0x2342B90
    UnityEngine::Quaternion GetPostRotation(int humanId);
    // UnityEngine.Quaternion GetZYPostQ(System.Int32 humanId, UnityEngine.Quaternion parentQ, UnityEngine.Quaternion q)
    // Offset: 0x2342C54
    UnityEngine::Quaternion GetZYPostQ(int humanId, UnityEngine::Quaternion parentQ, UnityEngine::Quaternion q);
    // UnityEngine.Quaternion GetZYRoll(System.Int32 humanId, UnityEngine.Vector3 uvw)
    // Offset: 0x2342D90
    UnityEngine::Quaternion GetZYRoll(int humanId, UnityEngine::Vector3 uvw);
    // UnityEngine.Vector3 GetLimitSign(System.Int32 humanId)
    // Offset: 0x2342E88
    UnityEngine::Vector3 GetLimitSign(int humanId);
    // System.Single Internal_GetAxisLength(System.Int32 humanId)
    // Offset: 0x2342A7C
    float Internal_GetAxisLength(int humanId);
    // UnityEngine.Quaternion Internal_GetPreRotation(System.Int32 humanId)
    // Offset: 0x2342B24
    UnityEngine::Quaternion Internal_GetPreRotation(int humanId);
    // UnityEngine.Quaternion Internal_GetPostRotation(System.Int32 humanId)
    // Offset: 0x2342BE8
    UnityEngine::Quaternion Internal_GetPostRotation(int humanId);
    // UnityEngine.Quaternion Internal_GetZYPostQ(System.Int32 humanId, UnityEngine.Quaternion parentQ, UnityEngine.Quaternion q)
    // Offset: 0x2342D0C
    UnityEngine::Quaternion Internal_GetZYPostQ(int humanId, UnityEngine::Quaternion parentQ, UnityEngine::Quaternion q);
    // UnityEngine.Quaternion Internal_GetZYRoll(System.Int32 humanId, UnityEngine.Vector3 uvw)
    // Offset: 0x2342E10
    UnityEngine::Quaternion Internal_GetZYRoll(int humanId, UnityEngine::Vector3 uvw);
    // UnityEngine.Vector3 Internal_GetLimitSign(System.Int32 humanId)
    // Offset: 0x2342EE0
    UnityEngine::Vector3 Internal_GetLimitSign(int humanId);
    // private System.Void get_humanDescription_Injected(out UnityEngine.HumanDescription ret)
    // Offset: 0x23428E8
    void get_humanDescription_Injected(UnityEngine::HumanDescription& ret);
    // private System.Void Internal_GetPreRotation_Injected(System.Int32 humanId, out UnityEngine.Quaternion ret)
    // Offset: 0x2342F50
    void Internal_GetPreRotation_Injected(int humanId, UnityEngine::Quaternion& ret);
    // private System.Void Internal_GetPostRotation_Injected(System.Int32 humanId, out UnityEngine.Quaternion ret)
    // Offset: 0x2342FA8
    void Internal_GetPostRotation_Injected(int humanId, UnityEngine::Quaternion& ret);
    // private System.Void Internal_GetZYPostQ_Injected(System.Int32 humanId, ref UnityEngine.Quaternion parentQ, ref UnityEngine.Quaternion q, out UnityEngine.Quaternion ret)
    // Offset: 0x2343000
    void Internal_GetZYPostQ_Injected(int humanId, UnityEngine::Quaternion& parentQ, UnityEngine::Quaternion& q, UnityEngine::Quaternion& ret);
    // private System.Void Internal_GetZYRoll_Injected(System.Int32 humanId, ref UnityEngine.Vector3 uvw, out UnityEngine.Quaternion ret)
    // Offset: 0x2343070
    void Internal_GetZYRoll_Injected(int humanId, UnityEngine::Vector3& uvw, UnityEngine::Quaternion& ret);
    // private System.Void Internal_GetLimitSign_Injected(System.Int32 humanId, out UnityEngine.Vector3 ret)
    // Offset: 0x23430D8
    void Internal_GetLimitSign_Injected(int humanId, UnityEngine::Vector3& ret);
    // private System.Void .ctor()
    // Offset: 0x2342788
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Avatar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Avatar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Avatar*, creationType>()));
    }
  }; // UnityEngine.Avatar
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Avatar*, "UnityEngine", "Avatar");
