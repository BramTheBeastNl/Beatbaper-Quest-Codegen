// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ContactFilter2D
  // [NativeClassAttribute] Offset: DB2AF4
  // [NativeHeaderAttribute] Offset: DB2AF4
  // [RequiredByNativeCodeAttribute] Offset: DB2AF4
  struct ContactFilter2D/*, public System::ValueType*/ {
    public:
    // [NativeNameAttribute] Offset: 0xDB2DF4
    // public System.Boolean useTriggers
    // Size: 0x1
    // Offset: 0x0
    bool useTriggers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [NativeNameAttribute] Offset: 0xDB2E2C
    // public System.Boolean useLayerMask
    // Size: 0x1
    // Offset: 0x1
    bool useLayerMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [NativeNameAttribute] Offset: 0xDB2E64
    // public System.Boolean useDepth
    // Size: 0x1
    // Offset: 0x2
    bool useDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [NativeNameAttribute] Offset: 0xDB2E9C
    // public System.Boolean useOutsideDepth
    // Size: 0x1
    // Offset: 0x3
    bool useOutsideDepth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [NativeNameAttribute] Offset: 0xDB2ED4
    // public System.Boolean useNormalAngle
    // Size: 0x1
    // Offset: 0x4
    bool useNormalAngle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [NativeNameAttribute] Offset: 0xDB2F0C
    // public System.Boolean useOutsideNormalAngle
    // Size: 0x1
    // Offset: 0x5
    bool useOutsideNormalAngle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useOutsideNormalAngle and: layerMask
    char __padding5[0x2] = {};
    // [NativeNameAttribute] Offset: 0xDB2F44
    // public UnityEngine.LayerMask layerMask
    // Size: 0x4
    // Offset: 0x8
    UnityEngine::LayerMask layerMask;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // [NativeNameAttribute] Offset: 0xDB2F7C
    // public System.Single minDepth
    // Size: 0x4
    // Offset: 0xC
    float minDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xDB2FB4
    // public System.Single maxDepth
    // Size: 0x4
    // Offset: 0x10
    float maxDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xDB2FEC
    // public System.Single minNormalAngle
    // Size: 0x4
    // Offset: 0x14
    float minNormalAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xDB3024
    // public System.Single maxNormalAngle
    // Size: 0x4
    // Offset: 0x18
    float maxNormalAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: ContactFilter2D
    constexpr ContactFilter2D(bool useTriggers_ = {}, bool useLayerMask_ = {}, bool useDepth_ = {}, bool useOutsideDepth_ = {}, bool useNormalAngle_ = {}, bool useOutsideNormalAngle_ = {}, UnityEngine::LayerMask layerMask_ = {}, float minDepth_ = {}, float maxDepth_ = {}, float minNormalAngle_ = {}, float maxNormalAngle_ = {}) noexcept : useTriggers{useTriggers_}, useLayerMask{useLayerMask_}, useDepth{useDepth_}, useOutsideDepth{useOutsideDepth_}, useNormalAngle{useNormalAngle_}, useOutsideNormalAngle{useOutsideNormalAngle_}, layerMask{layerMask_}, minDepth{minDepth_}, maxDepth{maxDepth_}, minNormalAngle{minNormalAngle_}, maxNormalAngle{maxNormalAngle_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // private System.Void CheckConsistency()
    // Offset: 0xF24CE8
    void CheckConsistency();
    // public System.Void SetLayerMask(UnityEngine.LayerMask layerMask)
    // Offset: 0xF24D28
    void SetLayerMask(UnityEngine::LayerMask layerMask);
    // public System.Void SetDepth(System.Single minDepth, System.Single maxDepth)
    // Offset: 0xF24D38
    void SetDepth(float minDepth, float maxDepth);
    // static UnityEngine.ContactFilter2D CreateLegacyFilter(System.Int32 layerMask, System.Single minDepth, System.Single maxDepth)
    // Offset: 0x23EA0D0
    static UnityEngine::ContactFilter2D CreateLegacyFilter(int layerMask, float minDepth, float maxDepth);
    // static private System.Void CheckConsistency_Injected(ref UnityEngine.ContactFilter2D _unity_self)
    // Offset: 0x23EA034
    static void CheckConsistency_Injected(UnityEngine::ContactFilter2D& _unity_self);
  }; // UnityEngine.ContactFilter2D
  #pragma pack(pop)
  static check_size<sizeof(ContactFilter2D), 24 + sizeof(float)> __UnityEngine_ContactFilter2DSizeCheck;
  static_assert(sizeof(ContactFilter2D) == 0x1C);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ContactFilter2D, "UnityEngine", "ContactFilter2D");
// Writing includes for template specializations
// Writing MetadataGetter for method: UnityEngine::ContactFilter2D::CheckConsistency
// Il2CppName: CheckConsistency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ContactFilter2D::*)()>(&UnityEngine::ContactFilter2D::CheckConsistency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactFilter2D), "CheckConsistency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactFilter2D::SetLayerMask
// Il2CppName: SetLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ContactFilter2D::*)(UnityEngine::LayerMask)>(&UnityEngine::ContactFilter2D::SetLayerMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactFilter2D), "SetLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::LayerMask>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactFilter2D::SetDepth
// Il2CppName: SetDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::ContactFilter2D::*)(float, float)>(&UnityEngine::ContactFilter2D::SetDepth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactFilter2D), "SetDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactFilter2D::CreateLegacyFilter
// Il2CppName: CreateLegacyFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ContactFilter2D (*)(int, float, float)>(&UnityEngine::ContactFilter2D::CreateLegacyFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactFilter2D), "CreateLegacyFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: UnityEngine::ContactFilter2D::CheckConsistency_Injected
// Il2CppName: CheckConsistency_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::ContactFilter2D&)>(&UnityEngine::ContactFilter2D::CheckConsistency_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::ContactFilter2D), "CheckConsistency_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ContactFilter2D&>()});
  }
};
