// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerReliableResponse
#include "GlobalNamespace/BaseMasterServerReliableResponse.hpp"
// Including type: MasterServer.IUserServerToClientMessage
#include "MasterServer/IUserServerToClientMessage.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Skipping declaration: Result because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.GetPublicUserServersResponse
  class GetPublicUserServersResponse : public GlobalNamespace::BaseMasterServerReliableResponse/*, public MasterServer::IUserServerToClientMessage*/ {
    public:
    // Nested type: MasterServer::GetPublicUserServersResponse::Result
    struct Result;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: MasterServer.GetPublicUserServersResponse/Result
    struct Result/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: Result
      constexpr Result(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.GetPublicUserServersResponse/Result Success
      static constexpr const uint8_t Success = 0u;
      // Get static field: static public MasterServer.GetPublicUserServersResponse/Result Success
      static MasterServer::GetPublicUserServersResponse::Result _get_Success();
      // Set static field: static public MasterServer.GetPublicUserServersResponse/Result Success
      static void _set_Success(MasterServer::GetPublicUserServersResponse::Result value);
      // static field const value: static public MasterServer.GetPublicUserServersResponse/Result UnknownError
      static constexpr const uint8_t UnknownError = 1u;
      // Get static field: static public MasterServer.GetPublicUserServersResponse/Result UnknownError
      static MasterServer::GetPublicUserServersResponse::Result _get_UnknownError();
      // Set static field: static public MasterServer.GetPublicUserServersResponse/Result UnknownError
      static void _set_UnknownError(MasterServer::GetPublicUserServersResponse::Result value);
    }; // MasterServer.GetPublicUserServersResponse/Result
    #pragma pack(pop)
    static check_size<sizeof(GetPublicUserServersResponse::Result), 0 + sizeof(uint8_t)> __MasterServer_GetPublicUserServersResponse_ResultSizeCheck;
    static_assert(sizeof(GetPublicUserServersResponse::Result) == 0x1);
    // public MasterServer.GetPublicUserServersResponse/Result result
    // Size: 0x1
    // Offset: 0x18
    MasterServer::GetPublicUserServersResponse::Result result;
    // Field size check
    static_assert(sizeof(MasterServer::GetPublicUserServersResponse::Result) == 0x1);
    // Padding between fields: result and: publicServers
    char __padding0[0x7] = {};
    // public readonly System.Collections.Generic.List`1<PublicServerInfo> publicServers
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<GlobalNamespace::PublicServerInfo>* publicServers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::PublicServerInfo>*) == 0x8);
    // Creating value type constructor for type: GetPublicUserServersResponse
    GetPublicUserServersResponse(MasterServer::GetPublicUserServersResponse::Result result_ = {}, System::Collections::Generic::List_1<GlobalNamespace::PublicServerInfo>* publicServers_ = {}) noexcept : result{result_}, publicServers{publicServers_} {}
    // Creating interface conversion operator: operator MasterServer::IUserServerToClientMessage
    operator MasterServer::IUserServerToClientMessage() noexcept {
      return *reinterpret_cast<MasterServer::IUserServerToClientMessage*>(this);
    }
    // static public PacketPool`1<MasterServer.GetPublicUserServersResponse> get_pool()
    // Offset: 0x12DB940
    static GlobalNamespace::PacketPool_1<MasterServer::GetPublicUserServersResponse*>* get_pool();
    // public MasterServer.GetPublicUserServersResponse InitForFailure(MasterServer.GetPublicUserServersResponse/Result result)
    // Offset: 0x12DBA20
    MasterServer::GetPublicUserServersResponse* InitForFailure(MasterServer::GetPublicUserServersResponse::Result result);
    // public MasterServer.GetPublicUserServersResponse InitForSuccess(System.Collections.Generic.IEnumerable`1<PublicServerInfo> publicServers)
    // Offset: 0x12DBAB8
    MasterServer::GetPublicUserServersResponse* InitForSuccess(System::Collections::Generic::IEnumerable_1<GlobalNamespace::PublicServerInfo>* publicServers);
    // public override System.Byte get_resultCode()
    // Offset: 0x12DB988
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Byte BaseMasterServerReliableResponse::get_resultCode()
    uint8_t get_resultCode();
    // public override System.String get_resultCodeString()
    // Offset: 0x12DB990
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.String BaseMasterServerReliableResponse::get_resultCodeString()
    ::Il2CppString* get_resultCodeString();
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x12DBB84
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x12DBCA8
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x12DBDC4
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0x12DBE38
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GetPublicUserServersResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::GetPublicUserServersResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GetPublicUserServersResponse*, creationType>()));
    }
  }; // MasterServer.GetPublicUserServersResponse
  #pragma pack(pop)
  static check_size<sizeof(GetPublicUserServersResponse), 32 + sizeof(System::Collections::Generic::List_1<GlobalNamespace::PublicServerInfo>*)> __MasterServer_GetPublicUserServersResponseSizeCheck;
  static_assert(sizeof(GetPublicUserServersResponse) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::GetPublicUserServersResponse*, "MasterServer", "GetPublicUserServersResponse");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::GetPublicUserServersResponse::Result, "MasterServer", "GetPublicUserServersResponse/Result");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::GetPublicUserServersResponse*>* (*)()>(&MasterServer::GetPublicUserServersResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::InitForFailure
// Il2CppName: InitForFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::GetPublicUserServersResponse* (MasterServer::GetPublicUserServersResponse::*)(MasterServer::GetPublicUserServersResponse::Result)>(&MasterServer::GetPublicUserServersResponse::InitForFailure)> {
  const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("MasterServer", "GetPublicUserServersResponse/Result")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "InitForFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::InitForSuccess
// Il2CppName: InitForSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::GetPublicUserServersResponse* (MasterServer::GetPublicUserServersResponse::*)(System::Collections::Generic::IEnumerable_1<GlobalNamespace::PublicServerInfo>*)>(&MasterServer::GetPublicUserServersResponse::InitForSuccess)> {
  const MethodInfo* get() {
    static auto* publicServers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PublicServerInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "InitForSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{publicServers});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::get_resultCode
// Il2CppName: get_resultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (MasterServer::GetPublicUserServersResponse::*)()>(&MasterServer::GetPublicUserServersResponse::get_resultCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "get_resultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::get_resultCodeString
// Il2CppName: get_resultCodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MasterServer::GetPublicUserServersResponse::*)()>(&MasterServer::GetPublicUserServersResponse::get_resultCodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "get_resultCodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::GetPublicUserServersResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&MasterServer::GetPublicUserServersResponse::Serialize)> {
  const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::GetPublicUserServersResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&MasterServer::GetPublicUserServersResponse::Deserialize)> {
  const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::GetPublicUserServersResponse::*)()>(&MasterServer::GetPublicUserServersResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::GetPublicUserServersResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::GetPublicUserServersResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
