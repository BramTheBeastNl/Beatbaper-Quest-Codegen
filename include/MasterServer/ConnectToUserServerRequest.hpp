// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: MasterServer.BaseConnectToServerRequest
#include "MasterServer/BaseConnectToServerRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.ConnectToUserServerRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class ConnectToUserServerRequest : public MasterServer::BaseConnectToServerRequest {
    public:
    // public System.String secret
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String code
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* code;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String password
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* password;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Boolean useRelay
    // Size: 0x1
    // Offset: 0x50
    bool useRelay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ConnectToUserServerRequest
    ConnectToUserServerRequest(::Il2CppString* secret_ = {}, ::Il2CppString* code_ = {}, ::Il2CppString* password_ = {}, bool useRelay_ = {}) noexcept : secret{secret_}, code{code_}, password{password_}, useRelay{useRelay_} {}
    // Get instance field: public System.String secret
    ::Il2CppString* _get_secret();
    // Set instance field: public System.String secret
    void _set_secret(::Il2CppString* value);
    // Get instance field: public System.String code
    ::Il2CppString* _get_code();
    // Set instance field: public System.String code
    void _set_code(::Il2CppString* value);
    // Get instance field: public System.String password
    ::Il2CppString* _get_password();
    // Set instance field: public System.String password
    void _set_password(::Il2CppString* value);
    // Get instance field: public System.Boolean useRelay
    bool _get_useRelay();
    // Set instance field: public System.Boolean useRelay
    void _set_useRelay(bool value);
    // static public PacketPool`1<MasterServer.ConnectToUserServerRequest> get_pool()
    // Offset: 0x208B248
    static GlobalNamespace::PacketPool_1<MasterServer::ConnectToUserServerRequest*>* get_pool();
    // public MasterServer.ConnectToUserServerRequest Init(System.String userId, System.String userName, System.String secret, System.String code, System.String password, System.Boolean useRelay)
    // Offset: 0x208B290
    MasterServer::ConnectToUserServerRequest* Init(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, bool useRelay);
    // public System.Void .ctor()
    // Offset: 0x208B3E4
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::.ctor()
    // Base method: System.Void BaseMasterServerReliableRequest::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectToUserServerRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ConnectToUserServerRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectToUserServerRequest*, creationType>()));
    }
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x208B2A8
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x208B310
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x208B380
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::Release()
    void Release();
  }; // MasterServer.ConnectToUserServerRequest
  #pragma pack(pop)
  static check_size<sizeof(ConnectToUserServerRequest), 80 + sizeof(bool)> __MasterServer_ConnectToUserServerRequestSizeCheck;
  static_assert(sizeof(ConnectToUserServerRequest) == 0x51);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::ConnectToUserServerRequest*, "MasterServer", "ConnectToUserServerRequest");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: MasterServer::ConnectToUserServerRequest::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::ConnectToUserServerRequest*>* (*)()>(&MasterServer::ConnectToUserServerRequest::get_pool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ConnectToUserServerRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MasterServer::ConnectToUserServerRequest::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::ConnectToUserServerRequest* (MasterServer::ConnectToUserServerRequest::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&MasterServer::ConnectToUserServerRequest::Init)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* useRelay = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ConnectToUserServerRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, userName, secret, code, password, useRelay});
  }
};
// Writing MetadataGetter for method: MasterServer::ConnectToUserServerRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MasterServer::ConnectToUserServerRequest::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::ConnectToUserServerRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&MasterServer::ConnectToUserServerRequest::Serialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ConnectToUserServerRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: MasterServer::ConnectToUserServerRequest::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::ConnectToUserServerRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&MasterServer::ConnectToUserServerRequest::Deserialize)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ConnectToUserServerRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: MasterServer::ConnectToUserServerRequest::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MasterServer::ConnectToUserServerRequest::*)()>(&MasterServer::ConnectToUserServerRequest::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MasterServer::ConnectToUserServerRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
