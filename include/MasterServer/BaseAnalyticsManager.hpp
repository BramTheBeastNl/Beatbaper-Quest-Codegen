// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IAnalyticsManager
#include "MasterServer/IAnalyticsManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: AnalyticsMetricUnit
  struct AnalyticsMetricUnit;
  // Forward declaring type: IMasterServerReliableRequest
  class IMasterServerReliableRequest;
  // Forward declaring type: IMasterServerReliableResponse
  class IMasterServerReliableResponse;
  // Forward declaring type: IMasterServerUnreliableMessage
  class IMasterServerUnreliableMessage;
  // Forward declaring type: IMasterServerResponse
  class IMasterServerResponse;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Autogenerated type: MasterServer.BaseAnalyticsManager
  class BaseAnalyticsManager : public ::Il2CppObject, public MasterServer::IAnalyticsManager {
    public:
    // Nested type: MasterServer::BaseAnalyticsManager::IMetric
    class IMetric;
    // Nested type: MasterServer::BaseAnalyticsManager::AnalyticsMetric
    class AnalyticsMetric;
    // Nested type: MasterServer::BaseAnalyticsManager::StateMetric
    class StateMetric;
    // Nested type: MasterServer::BaseAnalyticsManager::AverageMetric
    class AverageMetric;
    // Nested type: MasterServer::BaseAnalyticsManager::CounterMetric
    class CounterMetric;
    // private readonly System.Collections.Generic.List`1<MasterServer.BaseAnalyticsManager/AnalyticsMetric> _metrics
    // Offset: 0x10
    System::Collections::Generic::List_1<MasterServer::BaseAnalyticsManager::AnalyticsMetric*>* metrics;
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MasterServer.BaseAnalyticsManager/StateMetric> _states
    // Offset: 0x18
    System::Collections::Generic::Dictionary_2<::Il2CppString*, MasterServer::BaseAnalyticsManager::StateMetric*>* states;
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MasterServer.BaseAnalyticsManager/AverageMetric> _averages
    // Offset: 0x20
    System::Collections::Generic::Dictionary_2<::Il2CppString*, MasterServer::BaseAnalyticsManager::AverageMetric*>* averages;
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MasterServer.BaseAnalyticsManager/CounterMetric> _counters
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<::Il2CppString*, MasterServer::BaseAnalyticsManager::CounterMetric*>* counters;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,MasterServer.BaseAnalyticsManager/CounterMetric> _receivedReliableRequests
    // Offset: 0x30
    System::Collections::Generic::Dictionary_2<System::Type*, MasterServer::BaseAnalyticsManager::CounterMetric*>* receivedReliableRequests;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,MasterServer.BaseAnalyticsManager/CounterMetric> _sentReliableRequests
    // Offset: 0x38
    System::Collections::Generic::Dictionary_2<System::Type*, MasterServer::BaseAnalyticsManager::CounterMetric*>* sentReliableRequests;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Dictionary`2<System.Byte,MasterServer.BaseAnalyticsManager/CounterMetric>> _receivedReliableResponses
    // Offset: 0x40
    System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::Dictionary_2<uint8_t, MasterServer::BaseAnalyticsManager::CounterMetric*>*>* receivedReliableResponses;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Dictionary`2<System.Byte,MasterServer.BaseAnalyticsManager/CounterMetric>> _sentReliableResponses
    // Offset: 0x48
    System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::Dictionary_2<uint8_t, MasterServer::BaseAnalyticsManager::CounterMetric*>*>* sentReliableResponses;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,MasterServer.BaseAnalyticsManager/CounterMetric> _receivedUnreliableMessages
    // Offset: 0x50
    System::Collections::Generic::Dictionary_2<System::Type*, MasterServer::BaseAnalyticsManager::CounterMetric*>* receivedUnreliableMessages;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,MasterServer.BaseAnalyticsManager/CounterMetric> _sentUnreliableMessages
    // Offset: 0x58
    System::Collections::Generic::Dictionary_2<System::Type*, MasterServer::BaseAnalyticsManager::CounterMetric*>* sentUnreliableMessages;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Dictionary`2<System.Byte,MasterServer.BaseAnalyticsManager/CounterMetric>> _receivedUnreliableResponses
    // Offset: 0x60
    System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::Dictionary_2<uint8_t, MasterServer::BaseAnalyticsManager::CounterMetric*>*>* receivedUnreliableResponses;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Dictionary`2<System.Byte,MasterServer.BaseAnalyticsManager/CounterMetric>> _sentUnreliableResponses
    // Offset: 0x68
    System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::Dictionary_2<uint8_t, MasterServer::BaseAnalyticsManager::CounterMetric*>*>* sentUnreliableResponses;
    // static field const value: static private System.String kReceivedMessagesMetricName
    static constexpr const char* kReceivedMessagesMetricName = "ReceivedMessages";
    // Get static field: static private System.String kReceivedMessagesMetricName
    static ::Il2CppString* _get_kReceivedMessagesMetricName();
    // Set static field: static private System.String kReceivedMessagesMetricName
    static void _set_kReceivedMessagesMetricName(::Il2CppString* value);
    // static field const value: static private System.String kSentMessagesMetricName
    static constexpr const char* kSentMessagesMetricName = "SentMessages";
    // Get static field: static private System.String kSentMessagesMetricName
    static ::Il2CppString* _get_kSentMessagesMetricName();
    // Set static field: static private System.String kSentMessagesMetricName
    static void _set_kSentMessagesMetricName(::Il2CppString* value);
    // static field const value: static private System.String kDeliveryTypeKey
    static constexpr const char* kDeliveryTypeKey = "DeliveryType";
    // Get static field: static private System.String kDeliveryTypeKey
    static ::Il2CppString* _get_kDeliveryTypeKey();
    // Set static field: static private System.String kDeliveryTypeKey
    static void _set_kDeliveryTypeKey(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryKey
    static constexpr const char* kMessageCategoryKey = "MessageCategory";
    // Get static field: static private System.String kMessageCategoryKey
    static ::Il2CppString* _get_kMessageCategoryKey();
    // Set static field: static private System.String kMessageCategoryKey
    static void _set_kMessageCategoryKey(::Il2CppString* value);
    // static field const value: static private System.String kMessageTypeKey
    static constexpr const char* kMessageTypeKey = "MessageType";
    // Get static field: static private System.String kMessageTypeKey
    static ::Il2CppString* _get_kMessageTypeKey();
    // Set static field: static private System.String kMessageTypeKey
    static void _set_kMessageTypeKey(::Il2CppString* value);
    // static field const value: static private System.String kResultKey
    static constexpr const char* kResultKey = "Result";
    // Get static field: static private System.String kResultKey
    static ::Il2CppString* _get_kResultKey();
    // Set static field: static private System.String kResultKey
    static void _set_kResultKey(::Il2CppString* value);
    // static field const value: static private System.String kDeliveryTypeReliable
    static constexpr const char* kDeliveryTypeReliable = "Reliable";
    // Get static field: static private System.String kDeliveryTypeReliable
    static ::Il2CppString* _get_kDeliveryTypeReliable();
    // Set static field: static private System.String kDeliveryTypeReliable
    static void _set_kDeliveryTypeReliable(::Il2CppString* value);
    // static field const value: static private System.String kDeliveryTypeUnreliable
    static constexpr const char* kDeliveryTypeUnreliable = "Unreliable";
    // Get static field: static private System.String kDeliveryTypeUnreliable
    static ::Il2CppString* _get_kDeliveryTypeUnreliable();
    // Set static field: static private System.String kDeliveryTypeUnreliable
    static void _set_kDeliveryTypeUnreliable(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryRequest
    static constexpr const char* kMessageCategoryRequest = "Request";
    // Get static field: static private System.String kMessageCategoryRequest
    static ::Il2CppString* _get_kMessageCategoryRequest();
    // Set static field: static private System.String kMessageCategoryRequest
    static void _set_kMessageCategoryRequest(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryResponse
    static constexpr const char* kMessageCategoryResponse = "Response";
    // Get static field: static private System.String kMessageCategoryResponse
    static ::Il2CppString* _get_kMessageCategoryResponse();
    // Set static field: static private System.String kMessageCategoryResponse
    static void _set_kMessageCategoryResponse(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryMessage
    static constexpr const char* kMessageCategoryMessage = "Message";
    // Get static field: static private System.String kMessageCategoryMessage
    static ::Il2CppString* _get_kMessageCategoryMessage();
    // Set static field: static private System.String kMessageCategoryMessage
    static void _set_kMessageCategoryMessage(::Il2CppString* value);
    // protected System.Collections.Generic.IEnumerable`1<MasterServer.BaseAnalyticsManager/IMetric> GetMetrics()
    // Offset: 0x11696F0
    System::Collections::Generic::IEnumerable_1<MasterServer::BaseAnalyticsManager::IMetric*>* GetMetrics();
    // public System.Void PollUpdate()
    // Offset: 0xFFFFFFFF
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::PollUpdate()
    void PollUpdate();
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Void UpdateState(System.String metricName, System.Int64 state)
    // Offset: 0x11696F8
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::UpdateState(System.String metricName, System.Int64 state)
    void UpdateState(::Il2CppString* metricName, int64_t state);
    // public System.Void UpdateAverage(System.String metricName, System.Double value, MasterServer.AnalyticsMetricUnit unit)
    // Offset: 0x11697F8
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::UpdateAverage(System.String metricName, System.Double value, MasterServer.AnalyticsMetricUnit unit)
    void UpdateAverage(::Il2CppString* metricName, double value, MasterServer::AnalyticsMetricUnit unit);
    // public System.Void IncrementCounter(System.String metricName)
    // Offset: 0x116994C
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::IncrementCounter(System.String metricName)
    void IncrementCounter(::Il2CppString* metricName);
    // public System.Void ReceivedReliableRequestEvent(MasterServer.IMasterServerReliableRequest request)
    // Offset: 0x1169A54
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::ReceivedReliableRequestEvent(MasterServer.IMasterServerReliableRequest request)
    void ReceivedReliableRequestEvent(MasterServer::IMasterServerReliableRequest* request);
    // public System.Void SentReliableRequestEvent(MasterServer.IMasterServerReliableRequest request)
    // Offset: 0x1169C28
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::SentReliableRequestEvent(MasterServer.IMasterServerReliableRequest request)
    void SentReliableRequestEvent(MasterServer::IMasterServerReliableRequest* request);
    // public System.Void ReceivedReliableResponseEvent(MasterServer.IMasterServerReliableResponse response)
    // Offset: 0x1169DFC
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::ReceivedReliableResponseEvent(MasterServer.IMasterServerReliableResponse response)
    void ReceivedReliableResponseEvent(MasterServer::IMasterServerReliableResponse* response);
    // public System.Void SentReliableResponseEvent(MasterServer.IMasterServerReliableResponse response)
    // Offset: 0x116A1A0
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::SentReliableResponseEvent(MasterServer.IMasterServerReliableResponse response)
    void SentReliableResponseEvent(MasterServer::IMasterServerReliableResponse* response);
    // public System.Void ReceivedUnreliableMessageEvent(MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0x116A544
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::ReceivedUnreliableMessageEvent(MasterServer.IMasterServerUnreliableMessage message)
    void ReceivedUnreliableMessageEvent(MasterServer::IMasterServerUnreliableMessage* message);
    // public System.Void SentUnreliableMessageEvent(MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0x116A718
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::SentUnreliableMessageEvent(MasterServer.IMasterServerUnreliableMessage message)
    void SentUnreliableMessageEvent(MasterServer::IMasterServerUnreliableMessage* message);
    // public System.Void ReceivedUnreliableResponseEvent(MasterServer.IMasterServerResponse response)
    // Offset: 0x116A8EC
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::ReceivedUnreliableResponseEvent(MasterServer.IMasterServerResponse response)
    void ReceivedUnreliableResponseEvent(MasterServer::IMasterServerResponse* response);
    // public System.Void SentUnreliableResponseEvent(MasterServer.IMasterServerResponse response)
    // Offset: 0x116AC90
    // Implemented from: MasterServer.IAnalyticsManager
    // Base method: System.Void IAnalyticsManager::SentUnreliableResponseEvent(MasterServer.IMasterServerResponse response)
    void SentUnreliableResponseEvent(MasterServer::IMasterServerResponse* response);
    // protected System.Void .ctor()
    // Offset: 0x116B034
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static BaseAnalyticsManager* New_ctor();
  }; // MasterServer.BaseAnalyticsManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(MasterServer::BaseAnalyticsManager*, "MasterServer", "BaseAnalyticsManager");
#pragma pack(pop)
