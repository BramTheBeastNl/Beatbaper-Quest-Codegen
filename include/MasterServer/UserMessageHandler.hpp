// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseClientMessageHandler
#include "MasterServer/BaseClientMessageHandler.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
  // Forward declaring type: BaseConnectToServerRequest
  class BaseConnectToServerRequest;
  // Forward declaring type: IUserMessage
  class IUserMessage;
  // Forward declaring type: IMasterServerAuthenticateRequest
  class IMasterServerAuthenticateRequest;
  // Forward declaring type: UserServerHeartbeatResponse
  class UserServerHeartbeatResponse;
  // Forward declaring type: PrepareForConnectionRequest
  class PrepareForConnectionRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Forward declaring type: IDiffieHellmanKeyPair
  class IDiffieHellmanKeyPair;
  // Forward declaring type: IUnconnectedSenderReceiver
  class IUnconnectedSenderReceiver;
  // Forward declaring type: MasterServerEndPoint
  class MasterServerEndPoint;
  // Forward declaring type: ICertificateValidator
  class ICertificateValidator;
  // Forward declaring type: DiscoveryPolicy
  struct DiscoveryPolicy;
  // Forward declaring type: InvitePolicy
  struct InvitePolicy;
  // Skipping declaration: GameplayServerConfiguration because it is already included!
  // Forward declaring type: GameplayServerFilter
  struct GameplayServerFilter;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Skipping declaration: CancellationToken because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x118
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.UserMessageHandler
  class UserMessageHandler : public MasterServer::BaseClientMessageHandler {
    public:
    // Nested type: MasterServer::UserMessageHandler::ConnectToClientDelegate
    class ConnectToClientDelegate;
    // Nested type: MasterServer::UserMessageHandler::ConnectToServerDelegate
    class ConnectToServerDelegate;
    // Nested type: MasterServer::UserMessageHandler::$GetAuthenticationRequest$d__28
    struct $GetAuthenticationRequest$d__28;
    // Nested type: MasterServer::UserMessageHandler::$HandlePrepareForConnectionRequest$d__30
    struct $HandlePrepareForConnectionRequest$d__30;
    // Nested type: MasterServer::UserMessageHandler::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: MasterServer::UserMessageHandler::$$c__DisplayClass38_0
    class $$c__DisplayClass38_0;
    // Nested type: MasterServer::UserMessageHandler::$$c__DisplayClass39_0
    class $$c__DisplayClass39_0;
    // Nested type: MasterServer::UserMessageHandler::$WithFailureHandler$d__40
    struct $WithFailureHandler$d__40;
    // [CompilerGeneratedAttribute] Offset: 0xDF11D0
    // private MasterServer.UserMessageHandler/ConnectToClientDelegate connectToClientEvent
    // Size: 0x8
    // Offset: 0xB0
    MasterServer::UserMessageHandler::ConnectToClientDelegate* connectToClientEvent;
    // Field size check
    static_assert(sizeof(MasterServer::UserMessageHandler::ConnectToClientDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDF11E0
    // private System.Action broadcastingStoppedEvent
    // Size: 0x8
    // Offset: 0xB8
    System::Action* broadcastingStoppedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Int64 _lastHeartbeatResponseTime
    // Size: 0x8
    // Offset: 0xC0
    int64_t lastHeartbeatResponseTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _lastHeartbeatRequestTime
    // Size: 0x8
    // Offset: 0xC8
    int64_t lastHeartbeatRequestTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _lastKeepaliveTime
    // Size: 0x8
    // Offset: 0xD0
    int64_t lastKeepaliveTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly IAuthenticationTokenProvider _authenticationTokenProvider
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAuthenticationTokenProvider*) == 0x8);
    // private System.Boolean _isServerActive
    // Size: 0x1
    // Offset: 0xE0
    bool isServerActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isServerWaitingForBroadcastResult
    // Size: 0x1
    // Offset: 0xE1
    bool isServerWaitingForBroadcastResult;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isServerWaitingForBroadcastResult and: serverUserId
    char __padding7[0x6] = {};
    // private System.String _serverUserId
    // Size: 0x8
    // Offset: 0xE8
    ::Il2CppString* serverUserId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _serverUserName
    // Size: 0x8
    // Offset: 0xF0
    ::Il2CppString* serverUserName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _serverSecret
    // Size: 0x8
    // Offset: 0xF8
    ::Il2CppString* serverSecret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _serverCurrentPlayerCount
    // Size: 0x4
    // Offset: 0x100
    int serverCurrentPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: serverCurrentPlayerCount and: serverRandom
    char __padding11[0x4] = {};
    // private System.Byte[] _serverRandom
    // Size: 0x8
    // Offset: 0x108
    ::Array<uint8_t>* serverRandom;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Threading.Tasks.Task`1<IDiffieHellmanKeyPair> _serverKeysTask
    // Size: 0x8
    // Offset: 0x110
    System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* serverKeysTask;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*) == 0x8);
    // Creating value type constructor for type: UserMessageHandler
    UserMessageHandler(MasterServer::UserMessageHandler::ConnectToClientDelegate* connectToClientEvent_ = {}, System::Action* broadcastingStoppedEvent_ = {}, int64_t lastHeartbeatResponseTime_ = {}, int64_t lastHeartbeatRequestTime_ = {}, int64_t lastKeepaliveTime_ = {}, GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider_ = {}, bool isServerActive_ = {}, bool isServerWaitingForBroadcastResult_ = {}, ::Il2CppString* serverUserId_ = {}, ::Il2CppString* serverUserName_ = {}, ::Il2CppString* serverSecret_ = {}, int serverCurrentPlayerCount_ = {}, ::Array<uint8_t>* serverRandom_ = {}, System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* serverKeysTask_ = {}) noexcept : connectToClientEvent{connectToClientEvent_}, broadcastingStoppedEvent{broadcastingStoppedEvent_}, lastHeartbeatResponseTime{lastHeartbeatResponseTime_}, lastHeartbeatRequestTime{lastHeartbeatRequestTime_}, lastKeepaliveTime{lastKeepaliveTime_}, authenticationTokenProvider{authenticationTokenProvider_}, isServerActive{isServerActive_}, isServerWaitingForBroadcastResult{isServerWaitingForBroadcastResult_}, serverUserId{serverUserId_}, serverUserName{serverUserName_}, serverSecret{serverSecret_}, serverCurrentPlayerCount{serverCurrentPlayerCount_}, serverRandom{serverRandom_}, serverKeysTask{serverKeysTask_} {}
    // static field const value: static private System.Int64 kHeartbeatRequestIntervalMs
    static constexpr const int64_t kHeartbeatRequestIntervalMs = 5000;
    // Get static field: static private System.Int64 kHeartbeatRequestIntervalMs
    static int64_t _get_kHeartbeatRequestIntervalMs();
    // Set static field: static private System.Int64 kHeartbeatRequestIntervalMs
    static void _set_kHeartbeatRequestIntervalMs(int64_t value);
    // static field const value: static private System.Int64 kHeartbeatResponseTimeoutMs
    static constexpr const int64_t kHeartbeatResponseTimeoutMs = 20000;
    // Get static field: static private System.Int64 kHeartbeatResponseTimeoutMs
    static int64_t _get_kHeartbeatResponseTimeoutMs();
    // Set static field: static private System.Int64 kHeartbeatResponseTimeoutMs
    static void _set_kHeartbeatResponseTimeoutMs(int64_t value);
    // static field const value: static private System.Int64 kKeepaliveRequestIntervalMs
    static constexpr const int64_t kKeepaliveRequestIntervalMs = 60000;
    // Get static field: static private System.Int64 kKeepaliveRequestIntervalMs
    static int64_t _get_kKeepaliveRequestIntervalMs();
    // Set static field: static private System.Int64 kKeepaliveRequestIntervalMs
    static void _set_kKeepaliveRequestIntervalMs(int64_t value);
    // public System.Void add_connectToClientEvent(MasterServer.UserMessageHandler/ConnectToClientDelegate value)
    // Offset: 0x12E4E18
    void add_connectToClientEvent(MasterServer::UserMessageHandler::ConnectToClientDelegate* value);
    // public System.Void remove_connectToClientEvent(MasterServer.UserMessageHandler/ConnectToClientDelegate value)
    // Offset: 0x12E4EBC
    void remove_connectToClientEvent(MasterServer::UserMessageHandler::ConnectToClientDelegate* value);
    // public System.Void add_broadcastingStoppedEvent(System.Action value)
    // Offset: 0x12E4F60
    void add_broadcastingStoppedEvent(System::Action* value);
    // public System.Void remove_broadcastingStoppedEvent(System.Action value)
    // Offset: 0x12E5004
    void remove_broadcastingStoppedEvent(System::Action* value);
    // public IAuthenticationTokenProvider get_authenticationTokenProvider()
    // Offset: 0x12E50A8
    GlobalNamespace::IAuthenticationTokenProvider* get_authenticationTokenProvider();
    // public System.Void .ctor(IUnconnectedSenderReceiver sender, MasterServerEndPoint endPoint, IAuthenticationTokenProvider authenticationTokenProvider, MasterServer.ITimeProvider timeProvider, ICertificateValidator certificateValidator)
    // Offset: 0x12E50B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserMessageHandler* New_ctor(GlobalNamespace::IUnconnectedSenderReceiver* sender, GlobalNamespace::MasterServerEndPoint* endPoint, GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider, MasterServer::ITimeProvider* timeProvider, GlobalNamespace::ICertificateValidator* certificateValidator) {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserMessageHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserMessageHandler*, creationType>(sender, endPoint, authenticationTokenProvider, timeProvider, certificateValidator)));
    }
    // private System.Void UpdateServerHeartbeat()
    // Offset: 0x12E5120
    void UpdateServerHeartbeat();
    // private System.Void UpdateKeepalive()
    // Offset: 0x12E53DC
    void UpdateKeepalive();
    // public System.Void SetCurrentPlayerCount(System.Int32 currentPlayerCount)
    // Offset: 0x12E587C
    void SetCurrentPlayerCount(int currentPlayerCount);
    // public System.Void StartBroadcastingServer(System.String serverName, System.String userId, System.String userName, System.String secret, System.String password, System.Int32 currentPlayerCount, System.Int32 maxPlayerCount, DiscoveryPolicy discoveryPolicy, InvitePolicy invitePolicy, GameplayServerConfiguration configuration, System.Action`2<System.Net.IPEndPoint,System.String> onSuccess, System.Action`1<ConnectionFailedReason> onBroadcastFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E588C
    void StartBroadcastingServer(::Il2CppString* serverName, ::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* password, int currentPlayerCount, int maxPlayerCount, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, GlobalNamespace::GameplayServerConfiguration configuration, System::Action_2<System::Net::IPEndPoint*, ::Il2CppString*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onBroadcastFailed, System::Threading::CancellationToken cancellationToken);
    // public System.Void StopBroadcastingServer()
    // Offset: 0x12E5AD4
    void StopBroadcastingServer();
    // public System.Void ConnectToServer(System.String userId, System.String userName, System.String secret, System.String code, System.String password, System.Boolean useRelay, MasterServer.UserMessageHandler/ConnectToServerDelegate onSuccess, System.Action`1<ConnectionFailedReason> onConnectionFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E5BF4
    void ConnectToServer(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, bool useRelay, MasterServer::UserMessageHandler::ConnectToServerDelegate* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, System::Threading::CancellationToken cancellationToken);
    // public System.Void ConnectToMatchmaking(System.String userId, System.String userName, GameplayServerConfiguration configuration, DiscoveryPolicy discoveryPolicy, System.String secret, System.String code, MasterServer.UserMessageHandler/ConnectToServerDelegate onSuccess, System.Action`1<ConnectionFailedReason> onConnectionFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E5D90
    void ConnectToMatchmaking(::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::GameplayServerConfiguration configuration, GlobalNamespace::DiscoveryPolicy discoveryPolicy, ::Il2CppString* secret, ::Il2CppString* code, MasterServer::UserMessageHandler::ConnectToServerDelegate* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Void SendConnectToServerRequest(MasterServer.BaseConnectToServerRequest request, MasterServer.UserMessageHandler/ConnectToServerDelegate onSuccess, System.Action`1<ConnectionFailedReason> onConnectionFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E5CC4
    void SendConnectToServerRequest(MasterServer::BaseConnectToServerRequest* request, MasterServer::UserMessageHandler::ConnectToServerDelegate* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailed, System::Threading::CancellationToken cancellationToken);
    // public System.Void GetPublicServers(System.String userId, System.String userName, System.Int32 offset, System.Int32 count, GameplayServerFilter filter, System.Action`1<System.Collections.Generic.IReadOnlyList`1<PublicServerInfo>> onSuccess, System.Action`1<ConnectionFailedReason> onFailure, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E5EE0
    void GetPublicServers(::Il2CppString* userId, ::Il2CppString* userName, int offset, int count, GlobalNamespace::GameplayServerFilter filter, System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, System::Threading::CancellationToken cancellationToken);
    // private System.Void WithFailureHandler(System.Action`1<ConnectionFailedReason> onFailure, System.Func`1<System.Threading.Tasks.Task> performTask)
    // Offset: 0x12E5A10
    void WithFailureHandler(System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, System::Func_1<System::Threading::Tasks::Task*>* performTask);
    // private System.Byte[] GetServerRandom()
    // Offset: 0x12E5FE8
    ::Array<uint8_t>* GetServerRandom();
    // private System.Threading.Tasks.Task`1<IDiffieHellmanKeyPair> GetServerKeys(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12E6060
    System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* GetServerKeys(System::Threading::CancellationToken cancellationToken);
    // public override System.Void PollUpdate()
    // Offset: 0x12E50F4
    // Implemented from: MasterServer.MessageHandler
    // Base method: System.Void MessageHandler::PollUpdate()
    void PollUpdate();
    // protected override System.Boolean ShouldHandleUserMessage(MasterServer.IUserMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12E5570
    // Implemented from: MasterServer.MessageHandler
    // Base method: System.Boolean MessageHandler::ShouldHandleUserMessage(MasterServer.IUserMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    bool ShouldHandleUserMessage(MasterServer::IUserMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected override System.Threading.Tasks.Task`1<MasterServer.IMasterServerAuthenticateRequest> GetAuthenticationRequest()
    // Offset: 0x12E55CC
    // Implemented from: MasterServer.BaseClientMessageHandler
    // Base method: System.Threading.Tasks.Task`1<MasterServer.IMasterServerAuthenticateRequest> BaseClientMessageHandler::GetAuthenticationRequest()
    System::Threading::Tasks::Task_1<MasterServer::IMasterServerAuthenticateRequest*>* GetAuthenticationRequest();
    // protected override System.Void HandleUserServerHeartbeatResponse(MasterServer.UserServerHeartbeatResponse packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12E56CC
    // Implemented from: MasterServer.MessageHandler
    // Base method: System.Void MessageHandler::HandleUserServerHeartbeatResponse(MasterServer.UserServerHeartbeatResponse packet, MasterServer.MessageHandler/MessageOrigin origin)
    void HandleUserServerHeartbeatResponse(MasterServer::UserServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected override System.Void HandlePrepareForConnectionRequest(MasterServer.PrepareForConnectionRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x12E57B8
    // Implemented from: MasterServer.MessageHandler
    // Base method: System.Void MessageHandler::HandlePrepareForConnectionRequest(MasterServer.PrepareForConnectionRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    void HandlePrepareForConnectionRequest(MasterServer::PrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Void HandshakeLog(System.String message)
    // Offset: 0x12E610C
    // Implemented from: MasterServer.BaseClientMessageHandler
    // Base method: System.Void BaseClientMessageHandler::HandshakeLog(System.String message)
    void HandshakeLog(::Il2CppString* message);
  }; // MasterServer.UserMessageHandler
  #pragma pack(pop)
  static check_size<sizeof(UserMessageHandler), 272 + sizeof(System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>*)> __MasterServer_UserMessageHandlerSizeCheck;
  static_assert(sizeof(UserMessageHandler) == 0x118);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::UserMessageHandler*, "MasterServer", "UserMessageHandler");
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::add_connectToClientEvent
// Il2CppName: add_connectToClientEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::remove_connectToClientEvent
// Il2CppName: remove_connectToClientEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::add_broadcastingStoppedEvent
// Il2CppName: add_broadcastingStoppedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::remove_broadcastingStoppedEvent
// Il2CppName: remove_broadcastingStoppedEvent
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::get_authenticationTokenProvider
// Il2CppName: get_authenticationTokenProvider
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::UpdateServerHeartbeat
// Il2CppName: UpdateServerHeartbeat
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::UpdateKeepalive
// Il2CppName: UpdateKeepalive
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::SetCurrentPlayerCount
// Il2CppName: SetCurrentPlayerCount
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::StartBroadcastingServer
// Il2CppName: StartBroadcastingServer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::StopBroadcastingServer
// Il2CppName: StopBroadcastingServer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::ConnectToServer
// Il2CppName: ConnectToServer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::ConnectToMatchmaking
// Il2CppName: ConnectToMatchmaking
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::SendConnectToServerRequest
// Il2CppName: SendConnectToServerRequest
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::GetPublicServers
// Il2CppName: GetPublicServers
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::WithFailureHandler
// Il2CppName: WithFailureHandler
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::GetServerRandom
// Il2CppName: GetServerRandom
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::GetServerKeys
// Il2CppName: GetServerKeys
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::PollUpdate
// Il2CppName: PollUpdate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::ShouldHandleUserMessage
// Il2CppName: ShouldHandleUserMessage
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::GetAuthenticationRequest
// Il2CppName: GetAuthenticationRequest
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::HandleUserServerHeartbeatResponse
// Il2CppName: HandleUserServerHeartbeatResponse
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::HandlePrepareForConnectionRequest
// Il2CppName: HandlePrepareForConnectionRequest
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: MasterServer::UserMessageHandler::HandshakeLog
// Il2CppName: HandshakeLog
// Cannot perform method pointer template specialization from operators!
