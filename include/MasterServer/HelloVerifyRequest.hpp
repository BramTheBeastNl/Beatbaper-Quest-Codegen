// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerReliableResponse
#include "GlobalNamespace/BaseMasterServerReliableResponse.hpp"
// Including type: MasterServer.IHandshakeServerToClientMessage
#include "MasterServer/IHandshakeServerToClientMessage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ByteArrayNetSerializable
  class ByteArrayNetSerializable;
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.HelloVerifyRequest
  class HelloVerifyRequest : public GlobalNamespace::BaseMasterServerReliableResponse/*, public MasterServer::IHandshakeServerToClientMessage*/ {
    public:
    // public readonly ByteArrayNetSerializable cookie
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::ByteArrayNetSerializable* cookie;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ByteArrayNetSerializable*) == 0x8);
    // Creating value type constructor for type: HelloVerifyRequest
    HelloVerifyRequest(GlobalNamespace::ByteArrayNetSerializable* cookie_ = {}) noexcept : cookie{cookie_} {}
    // Creating interface conversion operator: operator MasterServer::IHandshakeServerToClientMessage
    operator MasterServer::IHandshakeServerToClientMessage() noexcept {
      return *reinterpret_cast<MasterServer::IHandshakeServerToClientMessage*>(this);
    }
    // Creating conversion operator: operator GlobalNamespace::ByteArrayNetSerializable*
    constexpr operator GlobalNamespace::ByteArrayNetSerializable*() const noexcept {
      return cookie;
    }
    // static public PacketPool`1<MasterServer.HelloVerifyRequest> get_pool()
    // Offset: 0x12DBFFC
    static GlobalNamespace::PacketPool_1<MasterServer::HelloVerifyRequest*>* get_pool();
    // public MasterServer.HelloVerifyRequest Init(System.Byte[] cookie)
    // Offset: 0x12DC044
    MasterServer::HelloVerifyRequest* Init(::Array<uint8_t>* cookie);
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x12DC078
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x12DC0B4
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x12DC0F0
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0x12DC15C
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HelloVerifyRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::HelloVerifyRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HelloVerifyRequest*, creationType>()));
    }
  }; // MasterServer.HelloVerifyRequest
  #pragma pack(pop)
  static check_size<sizeof(HelloVerifyRequest), 24 + sizeof(GlobalNamespace::ByteArrayNetSerializable*)> __MasterServer_HelloVerifyRequestSizeCheck;
  static_assert(sizeof(HelloVerifyRequest) == 0x20);
  // Writing MetadataGetter for method: HelloVerifyRequest::get_pool
  // Il2CppName: get_pool
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::HelloVerifyRequest*>* (*)()>(&HelloVerifyRequest::get_pool)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: HelloVerifyRequest::Init
  // Il2CppName: Init
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::HelloVerifyRequest* (HelloVerifyRequest::*)(::Array<uint8_t>*)>(&HelloVerifyRequest::Init)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: HelloVerifyRequest::Serialize
  // Il2CppName: Serialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)(LiteNetLib::Utils::NetDataWriter*)>(&HelloVerifyRequest::Serialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
    }
  };
  // Writing MetadataGetter for method: HelloVerifyRequest::Deserialize
  // Il2CppName: Deserialize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)(LiteNetLib::Utils::NetDataReader*)>(&HelloVerifyRequest::Deserialize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
    }
  };
  // Writing MetadataGetter for method: HelloVerifyRequest::Release
  // Il2CppName: Release
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)()>(&HelloVerifyRequest::Release)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: HelloVerifyRequest::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)()>(&HelloVerifyRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelloVerifyRequest::*)()>(&HelloVerifyRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HelloVerifyRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::HelloVerifyRequest*, "MasterServer", "HelloVerifyRequest");
