// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.IMasterServerUnreliableMessage
#include "MasterServer/IMasterServerUnreliableMessage.hpp"
// Including type: MasterServer.IUserServerToClientMessage
#include "MasterServer/IUserServerToClientMessage.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Skipping declaration: Result because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.UserServerHeartbeatResponse
  class UserServerHeartbeatResponse : public ::Il2CppObject/*, public MasterServer::IMasterServerUnreliableMessage, public MasterServer::IUserServerToClientMessage*/ {
    public:
    // Nested type: MasterServer::UserServerHeartbeatResponse::Result
    struct Result;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServer.UserServerHeartbeatResponse/Result
    struct Result/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Result
      constexpr Result(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.UserServerHeartbeatResponse/Result Success
      static constexpr const int Success = 0;
      // Get static field: static public MasterServer.UserServerHeartbeatResponse/Result Success
      static MasterServer::UserServerHeartbeatResponse::Result _get_Success();
      // Set static field: static public MasterServer.UserServerHeartbeatResponse/Result Success
      static void _set_Success(MasterServer::UserServerHeartbeatResponse::Result value);
      // static field const value: static public MasterServer.UserServerHeartbeatResponse/Result ServerDoesNotExist
      static constexpr const int ServerDoesNotExist = 1;
      // Get static field: static public MasterServer.UserServerHeartbeatResponse/Result ServerDoesNotExist
      static MasterServer::UserServerHeartbeatResponse::Result _get_ServerDoesNotExist();
      // Set static field: static public MasterServer.UserServerHeartbeatResponse/Result ServerDoesNotExist
      static void _set_ServerDoesNotExist(MasterServer::UserServerHeartbeatResponse::Result value);
      // static field const value: static public MasterServer.UserServerHeartbeatResponse/Result UnknownError
      static constexpr const int UnknownError = 2;
      // Get static field: static public MasterServer.UserServerHeartbeatResponse/Result UnknownError
      static MasterServer::UserServerHeartbeatResponse::Result _get_UnknownError();
      // Set static field: static public MasterServer.UserServerHeartbeatResponse/Result UnknownError
      static void _set_UnknownError(MasterServer::UserServerHeartbeatResponse::Result value);
    }; // MasterServer.UserServerHeartbeatResponse/Result
    #pragma pack(pop)
    static check_size<sizeof(UserServerHeartbeatResponse::Result), 0 + sizeof(int)> __MasterServer_UserServerHeartbeatResponse_ResultSizeCheck;
    static_assert(sizeof(UserServerHeartbeatResponse::Result) == 0x4);
    // public MasterServer.UserServerHeartbeatResponse/Result result
    // Size: 0x4
    // Offset: 0x10
    MasterServer::UserServerHeartbeatResponse::Result result;
    // Field size check
    static_assert(sizeof(MasterServer::UserServerHeartbeatResponse::Result) == 0x4);
    // Creating value type constructor for type: UserServerHeartbeatResponse
    UserServerHeartbeatResponse(MasterServer::UserServerHeartbeatResponse::Result result_ = {}) noexcept : result{result_} {}
    // Creating interface conversion operator: operator MasterServer::IMasterServerUnreliableMessage
    operator MasterServer::IMasterServerUnreliableMessage() noexcept {
      return *reinterpret_cast<MasterServer::IMasterServerUnreliableMessage*>(this);
    }
    // Creating interface conversion operator: operator MasterServer::IUserServerToClientMessage
    operator MasterServer::IUserServerToClientMessage() noexcept {
      return *reinterpret_cast<MasterServer::IUserServerToClientMessage*>(this);
    }
    // Creating conversion operator: operator MasterServer::UserServerHeartbeatResponse::Result
    constexpr operator MasterServer::UserServerHeartbeatResponse::Result() const noexcept {
      return result;
    }
    // static public PacketPool`1<MasterServer.UserServerHeartbeatResponse> get_pool()
    // Offset: 0x14F8D08
    static GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatResponse*>* get_pool();
    // public MasterServer.UserServerHeartbeatResponse Init(MasterServer.UserServerHeartbeatResponse/Result result)
    // Offset: 0x14F8D50
    MasterServer::UserServerHeartbeatResponse* Init(MasterServer::UserServerHeartbeatResponse::Result result);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x14F8D58
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x14F8D7C
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Void Release()
    // Offset: 0x14F8DB4
    void Release();
    // public System.Void .ctor()
    // Offset: 0x14F8E10
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserServerHeartbeatResponse* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::UserServerHeartbeatResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserServerHeartbeatResponse*, creationType>()));
    }
  }; // MasterServer.UserServerHeartbeatResponse
  #pragma pack(pop)
  static check_size<sizeof(UserServerHeartbeatResponse), 16 + sizeof(MasterServer::UserServerHeartbeatResponse::Result)> __MasterServer_UserServerHeartbeatResponseSizeCheck;
  static_assert(sizeof(UserServerHeartbeatResponse) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::UserServerHeartbeatResponse*, "MasterServer", "UserServerHeartbeatResponse");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::UserServerHeartbeatResponse::Result, "MasterServer", "UserServerHeartbeatResponse/Result");
// Writing MetadataGetter for method: UserServerHeartbeatResponse::get_pool
// Il2CppName: get_pool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PacketPool_1<MasterServer::UserServerHeartbeatResponse*>* (*)()>(&UserServerHeartbeatResponse::get_pool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "get_pool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<MasterServer::UserServerHeartbeatResponse* (UserServerHeartbeatResponse::*)(MasterServer::UserServerHeartbeatResponse::Result)>(&UserServerHeartbeatResponse::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<MasterServer::UserServerHeartbeatResponse::Result>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)(LiteNetLib::Utils::NetDataWriter*)>(&UserServerHeartbeatResponse::Serialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataWriter*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)(LiteNetLib::Utils::NetDataReader*)>(&UserServerHeartbeatResponse::Deserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<LiteNetLib::Utils::NetDataReader*>()});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)()>(&UserServerHeartbeatResponse::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UserServerHeartbeatResponse::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)()>(&UserServerHeartbeatResponse::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UserServerHeartbeatResponse::*)()>(&UserServerHeartbeatResponse::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UserServerHeartbeatResponse*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
