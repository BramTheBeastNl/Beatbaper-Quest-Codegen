// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include <stdint.h>
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: AnalyticsMetricUnit
  struct AnalyticsMetricUnit;
  // Forward declaring type: IMasterServerReliableRequest
  class IMasterServerReliableRequest;
  // Forward declaring type: IMasterServerReliableResponse
  class IMasterServerReliableResponse;
  // Forward declaring type: IMasterServerUnreliableMessage
  class IMasterServerUnreliableMessage;
  // Forward declaring type: IMasterServerResponse
  class IMasterServerResponse;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Autogenerated type: MasterServer.IAnalyticsManager
  class IAnalyticsManager : public System::IDisposable {
    public:
    // public System.Void PollUpdate()
    // Offset: 0xFFFFFFFF
    void PollUpdate();
    // public System.Void UpdateState(System.String metricName, System.Int64 state)
    // Offset: 0xFFFFFFFF
    void UpdateState(::Il2CppString* metricName, int64_t state);
    // public System.Void UpdateAverage(System.String metricName, System.Double value, MasterServer.AnalyticsMetricUnit unit)
    // Offset: 0xFFFFFFFF
    void UpdateAverage(::Il2CppString* metricName, double value, MasterServer::AnalyticsMetricUnit unit);
    // public System.Void IncrementCounter(System.String metricName)
    // Offset: 0xFFFFFFFF
    void IncrementCounter(::Il2CppString* metricName);
    // public System.Void ReceivedReliableRequestEvent(MasterServer.IMasterServerReliableRequest request)
    // Offset: 0xFFFFFFFF
    void ReceivedReliableRequestEvent(MasterServer::IMasterServerReliableRequest* request);
    // public System.Void SentReliableRequestEvent(MasterServer.IMasterServerReliableRequest request)
    // Offset: 0xFFFFFFFF
    void SentReliableRequestEvent(MasterServer::IMasterServerReliableRequest* request);
    // public System.Void ReceivedReliableResponseEvent(MasterServer.IMasterServerReliableResponse request)
    // Offset: 0xFFFFFFFF
    void ReceivedReliableResponseEvent(MasterServer::IMasterServerReliableResponse* request);
    // public System.Void SentReliableResponseEvent(MasterServer.IMasterServerReliableResponse response)
    // Offset: 0xFFFFFFFF
    void SentReliableResponseEvent(MasterServer::IMasterServerReliableResponse* response);
    // public System.Void ReceivedUnreliableMessageEvent(MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0xFFFFFFFF
    void ReceivedUnreliableMessageEvent(MasterServer::IMasterServerUnreliableMessage* message);
    // public System.Void SentUnreliableMessageEvent(MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0xFFFFFFFF
    void SentUnreliableMessageEvent(MasterServer::IMasterServerUnreliableMessage* message);
    // public System.Void SentUnreliableResponseEvent(MasterServer.IMasterServerResponse response)
    // Offset: 0xFFFFFFFF
    void SentUnreliableResponseEvent(MasterServer::IMasterServerResponse* response);
    // public System.Void ReceivedUnreliableResponseEvent(MasterServer.IMasterServerResponse response)
    // Offset: 0xFFFFFFFF
    void ReceivedUnreliableResponseEvent(MasterServer::IMasterServerResponse* response);
  }; // MasterServer.IAnalyticsManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(MasterServer::IAnalyticsManager*, "MasterServer", "IAnalyticsManager");
#pragma pack(pop)
