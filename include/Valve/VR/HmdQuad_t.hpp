// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.HmdVector3_t
#include "Valve/VR/HmdVector3_t.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.HmdQuad_t
  // [TokenAttribute] Offset: FFFFFFFF
  struct HmdQuad_t/*, public System::ValueType*/ {
    public:
    // public Valve.VR.HmdVector3_t vCorners0
    // Size: 0xC
    // Offset: 0x0
    Valve::VR::HmdVector3_t vCorners0;
    // Field size check
    static_assert(sizeof(Valve::VR::HmdVector3_t) == 0xC);
    // public Valve.VR.HmdVector3_t vCorners1
    // Size: 0xC
    // Offset: 0xC
    Valve::VR::HmdVector3_t vCorners1;
    // Field size check
    static_assert(sizeof(Valve::VR::HmdVector3_t) == 0xC);
    // public Valve.VR.HmdVector3_t vCorners2
    // Size: 0xC
    // Offset: 0x18
    Valve::VR::HmdVector3_t vCorners2;
    // Field size check
    static_assert(sizeof(Valve::VR::HmdVector3_t) == 0xC);
    // public Valve.VR.HmdVector3_t vCorners3
    // Size: 0xC
    // Offset: 0x24
    Valve::VR::HmdVector3_t vCorners3;
    // Field size check
    static_assert(sizeof(Valve::VR::HmdVector3_t) == 0xC);
    // Creating value type constructor for type: HmdQuad_t
    constexpr HmdQuad_t(Valve::VR::HmdVector3_t vCorners0_ = {}, Valve::VR::HmdVector3_t vCorners1_ = {}, Valve::VR::HmdVector3_t vCorners2_ = {}, Valve::VR::HmdVector3_t vCorners3_ = {}) noexcept : vCorners0{vCorners0_}, vCorners1{vCorners1_}, vCorners2{vCorners2_}, vCorners3{vCorners3_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public Valve.VR.HmdVector3_t vCorners0
    Valve::VR::HmdVector3_t _get_vCorners0();
    // Set instance field: public Valve.VR.HmdVector3_t vCorners0
    void _set_vCorners0(Valve::VR::HmdVector3_t value);
    // Get instance field: public Valve.VR.HmdVector3_t vCorners1
    Valve::VR::HmdVector3_t _get_vCorners1();
    // Set instance field: public Valve.VR.HmdVector3_t vCorners1
    void _set_vCorners1(Valve::VR::HmdVector3_t value);
    // Get instance field: public Valve.VR.HmdVector3_t vCorners2
    Valve::VR::HmdVector3_t _get_vCorners2();
    // Set instance field: public Valve.VR.HmdVector3_t vCorners2
    void _set_vCorners2(Valve::VR::HmdVector3_t value);
    // Get instance field: public Valve.VR.HmdVector3_t vCorners3
    Valve::VR::HmdVector3_t _get_vCorners3();
    // Set instance field: public Valve.VR.HmdVector3_t vCorners3
    void _set_vCorners3(Valve::VR::HmdVector3_t value);
  }; // Valve.VR.HmdQuad_t
  #pragma pack(pop)
  static check_size<sizeof(HmdQuad_t), 36 + sizeof(Valve::VR::HmdVector3_t)> __Valve_VR_HmdQuad_tSizeCheck;
  static_assert(sizeof(HmdQuad_t) == 0x30);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::HmdQuad_t, "Valve.VR", "HmdQuad_t");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
