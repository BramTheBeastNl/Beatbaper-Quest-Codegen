// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor
#include "Valve/VR/IVRCompositor.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: EVRCompositorTimingMode
  struct EVRCompositorTimingMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.IVRCompositor/_SetExplicitTimingMode
  // [UnmanagedFunctionPointerAttribute] Offset: DD3EB0
  class IVRCompositor::_SetExplicitTimingMode : public System::MulticastDelegate {
    public:
    // Creating value type constructor for type: _SetExplicitTimingMode
    _SetExplicitTimingMode() noexcept {}
    // public System.Void .ctor(System.Object object, System.IntPtr method)
    // Offset: 0x1FC00BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IVRCompositor::_SetExplicitTimingMode* New_ctor(::Il2CppObject* object, System::IntPtr method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::IVRCompositor::_SetExplicitTimingMode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IVRCompositor::_SetExplicitTimingMode*, creationType>(object, method)));
    }
    // public System.Void Invoke(Valve.VR.EVRCompositorTimingMode eTimingMode)
    // Offset: 0x1FC00CC
    void Invoke(Valve::VR::EVRCompositorTimingMode eTimingMode);
    // public System.IAsyncResult BeginInvoke(Valve.VR.EVRCompositorTimingMode eTimingMode, System.AsyncCallback callback, System.Object object)
    // Offset: 0x1FC033C
    System::IAsyncResult* BeginInvoke(Valve::VR::EVRCompositorTimingMode eTimingMode, System::AsyncCallback* callback, ::Il2CppObject* object);
    // public System.Void EndInvoke(System.IAsyncResult result)
    // Offset: 0x1FC03C8
    void EndInvoke(System::IAsyncResult* result);
  }; // Valve.VR.IVRCompositor/_SetExplicitTimingMode
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::IVRCompositor::_SetExplicitTimingMode*, "Valve.VR", "IVRCompositor/_SetExplicitTimingMode");
// Writing MetadataGetter for method: Valve::VR::IVRCompositor::_SetExplicitTimingMode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::IVRCompositor::_SetExplicitTimingMode::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::IVRCompositor::_SetExplicitTimingMode::*)(Valve::VR::EVRCompositorTimingMode)>(&Valve::VR::IVRCompositor::_SetExplicitTimingMode::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::IVRCompositor::_SetExplicitTimingMode*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRCompositorTimingMode>()});
  }
};
// Writing MetadataGetter for method: Valve::VR::IVRCompositor::_SetExplicitTimingMode::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Valve::VR::IVRCompositor::_SetExplicitTimingMode::*)(Valve::VR::EVRCompositorTimingMode, System::AsyncCallback*, ::Il2CppObject*)>(&Valve::VR::IVRCompositor::_SetExplicitTimingMode::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::IVRCompositor::_SetExplicitTimingMode*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Valve::VR::EVRCompositorTimingMode>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Valve::VR::IVRCompositor::_SetExplicitTimingMode::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::IVRCompositor::_SetExplicitTimingMode::*)(System::IAsyncResult*)>(&Valve::VR::IVRCompositor::_SetExplicitTimingMode::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::IVRCompositor::_SetExplicitTimingMode*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
