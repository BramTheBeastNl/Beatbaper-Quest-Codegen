// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x68
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Valve.VR.COpenVRContext
  // [TokenAttribute] Offset: FFFFFFFF
  struct COpenVRContext/*, public System::ValueType*/ {
    public:
    // public System.IntPtr m_pVRSystem
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr m_pVRSystem;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRChaperone
    // Size: 0x8
    // Offset: 0x8
    System::IntPtr m_pVRChaperone;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRChaperoneSetup
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_pVRChaperoneSetup;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRCompositor
    // Size: 0x8
    // Offset: 0x18
    System::IntPtr m_pVRCompositor;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVROverlay
    // Size: 0x8
    // Offset: 0x20
    System::IntPtr m_pVROverlay;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRResources
    // Size: 0x8
    // Offset: 0x28
    System::IntPtr m_pVRResources;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRRenderModels
    // Size: 0x8
    // Offset: 0x30
    System::IntPtr m_pVRRenderModels;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRExtendedDisplay
    // Size: 0x8
    // Offset: 0x38
    System::IntPtr m_pVRExtendedDisplay;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRSettings
    // Size: 0x8
    // Offset: 0x40
    System::IntPtr m_pVRSettings;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRApplications
    // Size: 0x8
    // Offset: 0x48
    System::IntPtr m_pVRApplications;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRTrackedCamera
    // Size: 0x8
    // Offset: 0x50
    System::IntPtr m_pVRTrackedCamera;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRScreenshots
    // Size: 0x8
    // Offset: 0x58
    System::IntPtr m_pVRScreenshots;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr m_pVRDriverManager
    // Size: 0x8
    // Offset: 0x60
    System::IntPtr m_pVRDriverManager;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: COpenVRContext
    constexpr COpenVRContext(System::IntPtr m_pVRSystem_ = {}, System::IntPtr m_pVRChaperone_ = {}, System::IntPtr m_pVRChaperoneSetup_ = {}, System::IntPtr m_pVRCompositor_ = {}, System::IntPtr m_pVROverlay_ = {}, System::IntPtr m_pVRResources_ = {}, System::IntPtr m_pVRRenderModels_ = {}, System::IntPtr m_pVRExtendedDisplay_ = {}, System::IntPtr m_pVRSettings_ = {}, System::IntPtr m_pVRApplications_ = {}, System::IntPtr m_pVRTrackedCamera_ = {}, System::IntPtr m_pVRScreenshots_ = {}, System::IntPtr m_pVRDriverManager_ = {}) noexcept : m_pVRSystem{m_pVRSystem_}, m_pVRChaperone{m_pVRChaperone_}, m_pVRChaperoneSetup{m_pVRChaperoneSetup_}, m_pVRCompositor{m_pVRCompositor_}, m_pVROverlay{m_pVROverlay_}, m_pVRResources{m_pVRResources_}, m_pVRRenderModels{m_pVRRenderModels_}, m_pVRExtendedDisplay{m_pVRExtendedDisplay_}, m_pVRSettings{m_pVRSettings_}, m_pVRApplications{m_pVRApplications_}, m_pVRTrackedCamera{m_pVRTrackedCamera_}, m_pVRScreenshots{m_pVRScreenshots_}, m_pVRDriverManager{m_pVRDriverManager_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: public System.IntPtr m_pVRSystem
    System::IntPtr _get_m_pVRSystem();
    // Set instance field: public System.IntPtr m_pVRSystem
    void _set_m_pVRSystem(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRChaperone
    System::IntPtr _get_m_pVRChaperone();
    // Set instance field: public System.IntPtr m_pVRChaperone
    void _set_m_pVRChaperone(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRChaperoneSetup
    System::IntPtr _get_m_pVRChaperoneSetup();
    // Set instance field: public System.IntPtr m_pVRChaperoneSetup
    void _set_m_pVRChaperoneSetup(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRCompositor
    System::IntPtr _get_m_pVRCompositor();
    // Set instance field: public System.IntPtr m_pVRCompositor
    void _set_m_pVRCompositor(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVROverlay
    System::IntPtr _get_m_pVROverlay();
    // Set instance field: public System.IntPtr m_pVROverlay
    void _set_m_pVROverlay(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRResources
    System::IntPtr _get_m_pVRResources();
    // Set instance field: public System.IntPtr m_pVRResources
    void _set_m_pVRResources(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRRenderModels
    System::IntPtr _get_m_pVRRenderModels();
    // Set instance field: public System.IntPtr m_pVRRenderModels
    void _set_m_pVRRenderModels(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRExtendedDisplay
    System::IntPtr _get_m_pVRExtendedDisplay();
    // Set instance field: public System.IntPtr m_pVRExtendedDisplay
    void _set_m_pVRExtendedDisplay(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRSettings
    System::IntPtr _get_m_pVRSettings();
    // Set instance field: public System.IntPtr m_pVRSettings
    void _set_m_pVRSettings(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRApplications
    System::IntPtr _get_m_pVRApplications();
    // Set instance field: public System.IntPtr m_pVRApplications
    void _set_m_pVRApplications(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRTrackedCamera
    System::IntPtr _get_m_pVRTrackedCamera();
    // Set instance field: public System.IntPtr m_pVRTrackedCamera
    void _set_m_pVRTrackedCamera(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRScreenshots
    System::IntPtr _get_m_pVRScreenshots();
    // Set instance field: public System.IntPtr m_pVRScreenshots
    void _set_m_pVRScreenshots(System::IntPtr value);
    // Get instance field: public System.IntPtr m_pVRDriverManager
    System::IntPtr _get_m_pVRDriverManager();
    // Set instance field: public System.IntPtr m_pVRDriverManager
    void _set_m_pVRDriverManager(System::IntPtr value);
  }; // Valve.VR.COpenVRContext
  #pragma pack(pop)
  static check_size<sizeof(COpenVRContext), 96 + sizeof(System::IntPtr)> __Valve_VR_COpenVRContextSizeCheck;
  static_assert(sizeof(COpenVRContext) == 0x68);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::COpenVRContext, "Valve.VR", "COpenVRContext");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
