// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRCompositor
#include "Valve/VR/IVRCompositor.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: ETrackingUniverseOrigin
  struct ETrackingUniverseOrigin;
  // Forward declaring type: EVRCompositorError
  struct EVRCompositorError;
  // Forward declaring type: EVREye
  struct EVREye;
  // Forward declaring type: VRTextureBounds_t
  struct VRTextureBounds_t;
  // Forward declaring type: EVRSubmitFlags
  struct EVRSubmitFlags;
  // Forward declaring type: Compositor_FrameTiming
  struct Compositor_FrameTiming;
  // Forward declaring type: Compositor_CumulativeStats
  struct Compositor_CumulativeStats;
  // Forward declaring type: HmdColor_t
  struct HmdColor_t;
  // Forward declaring type: EVRCompositorTimingMode
  struct EVRCompositorTimingMode;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x168
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.CVRCompositor
  class CVRCompositor : public ::Il2CppObject {
    public:
    // private Valve.VR.IVRCompositor FnTable
    // Size: 0x158
    // Offset: 0x10
    Valve::VR::IVRCompositor FnTable;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRCompositor) == 0x158);
    // Creating value type constructor for type: CVRCompositor
    CVRCompositor(Valve::VR::IVRCompositor FnTable_ = {}) noexcept : FnTable{FnTable_} {}
    // Creating conversion operator: operator Valve::VR::IVRCompositor
    constexpr operator Valve::VR::IVRCompositor() const noexcept {
      return FnTable;
    }
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0x16D37F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CVRCompositor* New_ctor(System::IntPtr pInterface) {
      static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRCompositor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CVRCompositor*, creationType>(pInterface)));
    }
    // public System.Void SetTrackingSpace(Valve.VR.ETrackingUniverseOrigin eOrigin)
    // Offset: 0x16D3900
    void SetTrackingSpace(Valve::VR::ETrackingUniverseOrigin eOrigin);
    // public Valve.VR.ETrackingUniverseOrigin GetTrackingSpace()
    // Offset: 0x16D391C
    Valve::VR::ETrackingUniverseOrigin GetTrackingSpace();
    // public Valve.VR.EVRCompositorError WaitGetPoses(Valve.VR.TrackedDevicePose_t[] pRenderPoseArray, Valve.VR.TrackedDevicePose_t[] pGamePoseArray)
    // Offset: 0x16D3938
    Valve::VR::EVRCompositorError WaitGetPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray);
    // public Valve.VR.EVRCompositorError GetLastPoses(Valve.VR.TrackedDevicePose_t[] pRenderPoseArray, Valve.VR.TrackedDevicePose_t[] pGamePoseArray)
    // Offset: 0x16D396C
    Valve::VR::EVRCompositorError GetLastPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray);
    // public Valve.VR.EVRCompositorError GetLastPoseForTrackedDeviceIndex(System.UInt32 unDeviceIndex, ref Valve.VR.TrackedDevicePose_t pOutputPose, ref Valve.VR.TrackedDevicePose_t pOutputGamePose)
    // Offset: 0x16D39A0
    Valve::VR::EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pOutputGamePose);
    // public Valve.VR.EVRCompositorError Submit(Valve.VR.EVREye eEye, ref Valve.VR.Texture_t pTexture, ref Valve.VR.VRTextureBounds_t pBounds, Valve.VR.EVRSubmitFlags nSubmitFlags)
    // Offset: 0x16D39BC
    Valve::VR::EVRCompositorError Submit(Valve::VR::EVREye eEye, Valve::VR::Texture_t& pTexture, Valve::VR::VRTextureBounds_t& pBounds, Valve::VR::EVRSubmitFlags nSubmitFlags);
    // public System.Void ClearLastSubmittedFrame()
    // Offset: 0x16D39D8
    void ClearLastSubmittedFrame();
    // public System.Void PostPresentHandoff()
    // Offset: 0x16D39F4
    void PostPresentHandoff();
    // public System.Boolean GetFrameTiming(ref Valve.VR.Compositor_FrameTiming pTiming, System.UInt32 unFramesAgo)
    // Offset: 0x16D3A10
    bool GetFrameTiming(Valve::VR::Compositor_FrameTiming& pTiming, uint unFramesAgo);
    // public System.UInt32 GetFrameTimings(ref Valve.VR.Compositor_FrameTiming pTiming, System.UInt32 nFrames)
    // Offset: 0x16D3A2C
    uint GetFrameTimings(Valve::VR::Compositor_FrameTiming& pTiming, uint nFrames);
    // public System.Single GetFrameTimeRemaining()
    // Offset: 0x16D3A48
    float GetFrameTimeRemaining();
    // public System.Void GetCumulativeStats(ref Valve.VR.Compositor_CumulativeStats pStats, System.UInt32 nStatsSizeInBytes)
    // Offset: 0x16D3A64
    void GetCumulativeStats(Valve::VR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes);
    // public System.Void FadeToColor(System.Single fSeconds, System.Single fRed, System.Single fGreen, System.Single fBlue, System.Single fAlpha, System.Boolean bBackground)
    // Offset: 0x16D3A80
    void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);
    // public Valve.VR.HmdColor_t GetCurrentFadeColor(System.Boolean bBackground)
    // Offset: 0x16D3AA0
    Valve::VR::HmdColor_t GetCurrentFadeColor(bool bBackground);
    // public System.Void FadeGrid(System.Single fSeconds, System.Boolean bFadeIn)
    // Offset: 0x16D3AC0
    void FadeGrid(float fSeconds, bool bFadeIn);
    // public System.Single GetCurrentGridAlpha()
    // Offset: 0x16D3AE0
    float GetCurrentGridAlpha();
    // public Valve.VR.EVRCompositorError SetSkyboxOverride(Valve.VR.Texture_t[] pTextures)
    // Offset: 0x16D3AFC
    Valve::VR::EVRCompositorError SetSkyboxOverride(::Array<Valve::VR::Texture_t>* pTextures);
    // public System.Void ClearSkyboxOverride()
    // Offset: 0x16D3B24
    void ClearSkyboxOverride();
    // public System.Void CompositorBringToFront()
    // Offset: 0x16D3B40
    void CompositorBringToFront();
    // public System.Void CompositorGoToBack()
    // Offset: 0x16D3B5C
    void CompositorGoToBack();
    // public System.Void CompositorQuit()
    // Offset: 0x16D3B78
    void CompositorQuit();
    // public System.Boolean IsFullscreen()
    // Offset: 0x16D3B94
    bool IsFullscreen();
    // public System.UInt32 GetCurrentSceneFocusProcess()
    // Offset: 0x16D3BB0
    uint GetCurrentSceneFocusProcess();
    // public System.UInt32 GetLastFrameRenderer()
    // Offset: 0x16D3BCC
    uint GetLastFrameRenderer();
    // public System.Boolean CanRenderScene()
    // Offset: 0x16D3BE8
    bool CanRenderScene();
    // public System.Void ShowMirrorWindow()
    // Offset: 0x16D3C04
    void ShowMirrorWindow();
    // public System.Void HideMirrorWindow()
    // Offset: 0x16D3C20
    void HideMirrorWindow();
    // public System.Boolean IsMirrorWindowVisible()
    // Offset: 0x16D3C3C
    bool IsMirrorWindowVisible();
    // public System.Void CompositorDumpImages()
    // Offset: 0x16D3C58
    void CompositorDumpImages();
    // public System.Boolean ShouldAppRenderWithLowResources()
    // Offset: 0x16D3C74
    bool ShouldAppRenderWithLowResources();
    // public System.Void ForceInterleavedReprojectionOn(System.Boolean bOverride)
    // Offset: 0x16D3C90
    void ForceInterleavedReprojectionOn(bool bOverride);
    // public System.Void ForceReconnectProcess()
    // Offset: 0x16D3CB0
    void ForceReconnectProcess();
    // public System.Void SuspendRendering(System.Boolean bSuspend)
    // Offset: 0x16D3CCC
    void SuspendRendering(bool bSuspend);
    // public Valve.VR.EVRCompositorError GetMirrorTextureD3D11(Valve.VR.EVREye eEye, System.IntPtr pD3D11DeviceOrResource, ref System.IntPtr ppD3D11ShaderResourceView)
    // Offset: 0x16D3CEC
    Valve::VR::EVRCompositorError GetMirrorTextureD3D11(Valve::VR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView);
    // public System.Void ReleaseMirrorTextureD3D11(System.IntPtr pD3D11ShaderResourceView)
    // Offset: 0x16D3D08
    void ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView);
    // public Valve.VR.EVRCompositorError GetMirrorTextureGL(Valve.VR.EVREye eEye, ref System.UInt32 pglTextureId, System.IntPtr pglSharedTextureHandle)
    // Offset: 0x16D3D24
    Valve::VR::EVRCompositorError GetMirrorTextureGL(Valve::VR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle);
    // public System.Boolean ReleaseSharedGLTexture(System.UInt32 glTextureId, System.IntPtr glSharedTextureHandle)
    // Offset: 0x16D3D44
    bool ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle);
    // public System.Void LockGLSharedTextureForAccess(System.IntPtr glSharedTextureHandle)
    // Offset: 0x16D3D60
    void LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle);
    // public System.Void UnlockGLSharedTextureForAccess(System.IntPtr glSharedTextureHandle)
    // Offset: 0x16D3D7C
    void UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle);
    // public System.UInt32 GetVulkanInstanceExtensionsRequired(System.Text.StringBuilder pchValue, System.UInt32 unBufferSize)
    // Offset: 0x16D3D98
    uint GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize);
    // public System.UInt32 GetVulkanDeviceExtensionsRequired(System.IntPtr pPhysicalDevice, System.Text.StringBuilder pchValue, System.UInt32 unBufferSize)
    // Offset: 0x16D3DB4
    uint GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize);
    // public System.Void SetExplicitTimingMode(Valve.VR.EVRCompositorTimingMode eTimingMode)
    // Offset: 0x16D3DD0
    void SetExplicitTimingMode(Valve::VR::EVRCompositorTimingMode eTimingMode);
    // public Valve.VR.EVRCompositorError SubmitExplicitTimingData()
    // Offset: 0x16D3DEC
    Valve::VR::EVRCompositorError SubmitExplicitTimingData();
  }; // Valve.VR.CVRCompositor
  #pragma pack(pop)
  static check_size<sizeof(CVRCompositor), 16 + sizeof(Valve::VR::IVRCompositor)> __Valve_VR_CVRCompositorSizeCheck;
  static_assert(sizeof(CVRCompositor) == 0x168);
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::CVRCompositor*, "Valve.VR", "CVRCompositor");
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::SetTrackingSpace
// Il2CppName: SetTrackingSpace
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetTrackingSpace
// Il2CppName: GetTrackingSpace
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::WaitGetPoses
// Il2CppName: WaitGetPoses
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetLastPoses
// Il2CppName: GetLastPoses
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex
// Il2CppName: GetLastPoseForTrackedDeviceIndex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::Submit
// Il2CppName: Submit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ClearLastSubmittedFrame
// Il2CppName: ClearLastSubmittedFrame
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::PostPresentHandoff
// Il2CppName: PostPresentHandoff
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetFrameTiming
// Il2CppName: GetFrameTiming
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetFrameTimings
// Il2CppName: GetFrameTimings
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetFrameTimeRemaining
// Il2CppName: GetFrameTimeRemaining
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetCumulativeStats
// Il2CppName: GetCumulativeStats
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::FadeToColor
// Il2CppName: FadeToColor
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetCurrentFadeColor
// Il2CppName: GetCurrentFadeColor
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::FadeGrid
// Il2CppName: FadeGrid
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetCurrentGridAlpha
// Il2CppName: GetCurrentGridAlpha
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::SetSkyboxOverride
// Il2CppName: SetSkyboxOverride
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ClearSkyboxOverride
// Il2CppName: ClearSkyboxOverride
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::CompositorBringToFront
// Il2CppName: CompositorBringToFront
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::CompositorGoToBack
// Il2CppName: CompositorGoToBack
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::CompositorQuit
// Il2CppName: CompositorQuit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::IsFullscreen
// Il2CppName: IsFullscreen
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess
// Il2CppName: GetCurrentSceneFocusProcess
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetLastFrameRenderer
// Il2CppName: GetLastFrameRenderer
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::CanRenderScene
// Il2CppName: CanRenderScene
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ShowMirrorWindow
// Il2CppName: ShowMirrorWindow
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::HideMirrorWindow
// Il2CppName: HideMirrorWindow
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::IsMirrorWindowVisible
// Il2CppName: IsMirrorWindowVisible
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::CompositorDumpImages
// Il2CppName: CompositorDumpImages
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources
// Il2CppName: ShouldAppRenderWithLowResources
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn
// Il2CppName: ForceInterleavedReprojectionOn
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ForceReconnectProcess
// Il2CppName: ForceReconnectProcess
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::SuspendRendering
// Il2CppName: SuspendRendering
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetMirrorTextureD3D11
// Il2CppName: GetMirrorTextureD3D11
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11
// Il2CppName: ReleaseMirrorTextureD3D11
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetMirrorTextureGL
// Il2CppName: GetMirrorTextureGL
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::ReleaseSharedGLTexture
// Il2CppName: ReleaseSharedGLTexture
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::LockGLSharedTextureForAccess
// Il2CppName: LockGLSharedTextureForAccess
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess
// Il2CppName: UnlockGLSharedTextureForAccess
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired
// Il2CppName: GetVulkanInstanceExtensionsRequired
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired
// Il2CppName: GetVulkanDeviceExtensionsRequired
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::SetExplicitTimingMode
// Il2CppName: SetExplicitTimingMode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Valve::VR::CVRCompositor::SubmitExplicitTimingData
// Il2CppName: SubmitExplicitTimingData
// Cannot perform method pointer template specialization from operators!
