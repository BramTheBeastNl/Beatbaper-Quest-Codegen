// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: Valve.VR.OpenVR
#include "Valve/VR/OpenVR.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
  // Forward declaring type: CVRChaperone
  class CVRChaperone;
  // Forward declaring type: CVRChaperoneSetup
  class CVRChaperoneSetup;
  // Forward declaring type: CVRCompositor
  class CVRCompositor;
  // Forward declaring type: CVROverlay
  class CVROverlay;
  // Forward declaring type: CVRRenderModels
  class CVRRenderModels;
  // Forward declaring type: CVRExtendedDisplay
  class CVRExtendedDisplay;
  // Forward declaring type: CVRSettings
  class CVRSettings;
  // Forward declaring type: CVRApplications
  class CVRApplications;
  // Forward declaring type: CVRScreenshots
  class CVRScreenshots;
  // Forward declaring type: CVRTrackedCamera
  class CVRTrackedCamera;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.OpenVR/Valve.VR.COpenVRContext
  // [TokenAttribute] Offset: FFFFFFFF
  class OpenVR::COpenVRContext : public ::Il2CppObject {
    public:
    // private Valve.VR.CVRSystem m_pVRSystem
    // Size: 0x8
    // Offset: 0x10
    Valve::VR::CVRSystem* m_pVRSystem;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRSystem*) == 0x8);
    // private Valve.VR.CVRChaperone m_pVRChaperone
    // Size: 0x8
    // Offset: 0x18
    Valve::VR::CVRChaperone* m_pVRChaperone;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRChaperone*) == 0x8);
    // private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
    // Size: 0x8
    // Offset: 0x20
    Valve::VR::CVRChaperoneSetup* m_pVRChaperoneSetup;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRChaperoneSetup*) == 0x8);
    // private Valve.VR.CVRCompositor m_pVRCompositor
    // Size: 0x8
    // Offset: 0x28
    Valve::VR::CVRCompositor* m_pVRCompositor;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRCompositor*) == 0x8);
    // private Valve.VR.CVROverlay m_pVROverlay
    // Size: 0x8
    // Offset: 0x30
    Valve::VR::CVROverlay* m_pVROverlay;
    // Field size check
    static_assert(sizeof(Valve::VR::CVROverlay*) == 0x8);
    // private Valve.VR.CVRRenderModels m_pVRRenderModels
    // Size: 0x8
    // Offset: 0x38
    Valve::VR::CVRRenderModels* m_pVRRenderModels;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRRenderModels*) == 0x8);
    // private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
    // Size: 0x8
    // Offset: 0x40
    Valve::VR::CVRExtendedDisplay* m_pVRExtendedDisplay;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRExtendedDisplay*) == 0x8);
    // private Valve.VR.CVRSettings m_pVRSettings
    // Size: 0x8
    // Offset: 0x48
    Valve::VR::CVRSettings* m_pVRSettings;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRSettings*) == 0x8);
    // private Valve.VR.CVRApplications m_pVRApplications
    // Size: 0x8
    // Offset: 0x50
    Valve::VR::CVRApplications* m_pVRApplications;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRApplications*) == 0x8);
    // private Valve.VR.CVRScreenshots m_pVRScreenshots
    // Size: 0x8
    // Offset: 0x58
    Valve::VR::CVRScreenshots* m_pVRScreenshots;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRScreenshots*) == 0x8);
    // private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
    // Size: 0x8
    // Offset: 0x60
    Valve::VR::CVRTrackedCamera* m_pVRTrackedCamera;
    // Field size check
    static_assert(sizeof(Valve::VR::CVRTrackedCamera*) == 0x8);
    // Creating value type constructor for type: COpenVRContext
    COpenVRContext(Valve::VR::CVRSystem* m_pVRSystem_ = {}, Valve::VR::CVRChaperone* m_pVRChaperone_ = {}, Valve::VR::CVRChaperoneSetup* m_pVRChaperoneSetup_ = {}, Valve::VR::CVRCompositor* m_pVRCompositor_ = {}, Valve::VR::CVROverlay* m_pVROverlay_ = {}, Valve::VR::CVRRenderModels* m_pVRRenderModels_ = {}, Valve::VR::CVRExtendedDisplay* m_pVRExtendedDisplay_ = {}, Valve::VR::CVRSettings* m_pVRSettings_ = {}, Valve::VR::CVRApplications* m_pVRApplications_ = {}, Valve::VR::CVRScreenshots* m_pVRScreenshots_ = {}, Valve::VR::CVRTrackedCamera* m_pVRTrackedCamera_ = {}) noexcept : m_pVRSystem{m_pVRSystem_}, m_pVRChaperone{m_pVRChaperone_}, m_pVRChaperoneSetup{m_pVRChaperoneSetup_}, m_pVRCompositor{m_pVRCompositor_}, m_pVROverlay{m_pVROverlay_}, m_pVRRenderModels{m_pVRRenderModels_}, m_pVRExtendedDisplay{m_pVRExtendedDisplay_}, m_pVRSettings{m_pVRSettings_}, m_pVRApplications{m_pVRApplications_}, m_pVRScreenshots{m_pVRScreenshots_}, m_pVRTrackedCamera{m_pVRTrackedCamera_} {}
    // Get instance field: private Valve.VR.CVRSystem m_pVRSystem
    Valve::VR::CVRSystem* _get_m_pVRSystem();
    // Set instance field: private Valve.VR.CVRSystem m_pVRSystem
    void _set_m_pVRSystem(Valve::VR::CVRSystem* value);
    // Get instance field: private Valve.VR.CVRChaperone m_pVRChaperone
    Valve::VR::CVRChaperone* _get_m_pVRChaperone();
    // Set instance field: private Valve.VR.CVRChaperone m_pVRChaperone
    void _set_m_pVRChaperone(Valve::VR::CVRChaperone* value);
    // Get instance field: private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
    Valve::VR::CVRChaperoneSetup* _get_m_pVRChaperoneSetup();
    // Set instance field: private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
    void _set_m_pVRChaperoneSetup(Valve::VR::CVRChaperoneSetup* value);
    // Get instance field: private Valve.VR.CVRCompositor m_pVRCompositor
    Valve::VR::CVRCompositor* _get_m_pVRCompositor();
    // Set instance field: private Valve.VR.CVRCompositor m_pVRCompositor
    void _set_m_pVRCompositor(Valve::VR::CVRCompositor* value);
    // Get instance field: private Valve.VR.CVROverlay m_pVROverlay
    Valve::VR::CVROverlay* _get_m_pVROverlay();
    // Set instance field: private Valve.VR.CVROverlay m_pVROverlay
    void _set_m_pVROverlay(Valve::VR::CVROverlay* value);
    // Get instance field: private Valve.VR.CVRRenderModels m_pVRRenderModels
    Valve::VR::CVRRenderModels* _get_m_pVRRenderModels();
    // Set instance field: private Valve.VR.CVRRenderModels m_pVRRenderModels
    void _set_m_pVRRenderModels(Valve::VR::CVRRenderModels* value);
    // Get instance field: private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
    Valve::VR::CVRExtendedDisplay* _get_m_pVRExtendedDisplay();
    // Set instance field: private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
    void _set_m_pVRExtendedDisplay(Valve::VR::CVRExtendedDisplay* value);
    // Get instance field: private Valve.VR.CVRSettings m_pVRSettings
    Valve::VR::CVRSettings* _get_m_pVRSettings();
    // Set instance field: private Valve.VR.CVRSettings m_pVRSettings
    void _set_m_pVRSettings(Valve::VR::CVRSettings* value);
    // Get instance field: private Valve.VR.CVRApplications m_pVRApplications
    Valve::VR::CVRApplications* _get_m_pVRApplications();
    // Set instance field: private Valve.VR.CVRApplications m_pVRApplications
    void _set_m_pVRApplications(Valve::VR::CVRApplications* value);
    // Get instance field: private Valve.VR.CVRScreenshots m_pVRScreenshots
    Valve::VR::CVRScreenshots* _get_m_pVRScreenshots();
    // Set instance field: private Valve.VR.CVRScreenshots m_pVRScreenshots
    void _set_m_pVRScreenshots(Valve::VR::CVRScreenshots* value);
    // Get instance field: private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
    Valve::VR::CVRTrackedCamera* _get_m_pVRTrackedCamera();
    // Set instance field: private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
    void _set_m_pVRTrackedCamera(Valve::VR::CVRTrackedCamera* value);
    // public System.Void Clear()
    // Offset: 0x23C9798
    void Clear();
    // private System.Void CheckClear()
    // Offset: 0x23C97B8
    void CheckClear();
    // public Valve.VR.CVRSystem VRSystem()
    // Offset: 0x23C98F4
    Valve::VR::CVRSystem* VRSystem();
    // public Valve.VR.CVRChaperone VRChaperone()
    // Offset: 0x23C9A5C
    Valve::VR::CVRChaperone* VRChaperone();
    // public Valve.VR.CVRChaperoneSetup VRChaperoneSetup()
    // Offset: 0x23C9B1C
    Valve::VR::CVRChaperoneSetup* VRChaperoneSetup();
    // public Valve.VR.CVRCompositor VRCompositor()
    // Offset: 0x23C9BDC
    Valve::VR::CVRCompositor* VRCompositor();
    // public Valve.VR.CVROverlay VROverlay()
    // Offset: 0x23C9C9C
    Valve::VR::CVROverlay* VROverlay();
    // public Valve.VR.CVRRenderModels VRRenderModels()
    // Offset: 0x23C9D5C
    Valve::VR::CVRRenderModels* VRRenderModels();
    // public Valve.VR.CVRExtendedDisplay VRExtendedDisplay()
    // Offset: 0x23C9E1C
    Valve::VR::CVRExtendedDisplay* VRExtendedDisplay();
    // public Valve.VR.CVRSettings VRSettings()
    // Offset: 0x23C9EDC
    Valve::VR::CVRSettings* VRSettings();
    // public Valve.VR.CVRApplications VRApplications()
    // Offset: 0x23C9F9C
    Valve::VR::CVRApplications* VRApplications();
    // public Valve.VR.CVRScreenshots VRScreenshots()
    // Offset: 0x23CA05C
    Valve::VR::CVRScreenshots* VRScreenshots();
    // public Valve.VR.CVRTrackedCamera VRTrackedCamera()
    // Offset: 0x23CA11C
    Valve::VR::CVRTrackedCamera* VRTrackedCamera();
    // public System.Void .ctor()
    // Offset: 0x23C9768
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OpenVR::COpenVRContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::OpenVR::COpenVRContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OpenVR::COpenVRContext*, creationType>()));
    }
  }; // Valve.VR.OpenVR/Valve.VR.COpenVRContext
  #pragma pack(pop)
  static check_size<sizeof(OpenVR::COpenVRContext), 96 + sizeof(Valve::VR::CVRTrackedCamera*)> __Valve_VR_OpenVR_COpenVRContextSizeCheck;
  static_assert(sizeof(OpenVR::COpenVRContext) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::OpenVR::COpenVRContext*, "Valve.VR", "OpenVR/COpenVRContext");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::CheckClear
// Il2CppName: CheckClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::CheckClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "CheckClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRSystem
// Il2CppName: VRSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRSystem* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRChaperone
// Il2CppName: VRChaperone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRChaperone* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRChaperone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRChaperone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup
// Il2CppName: VRChaperoneSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRChaperoneSetup* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRChaperoneSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRCompositor
// Il2CppName: VRCompositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRCompositor* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRCompositor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRCompositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VROverlay
// Il2CppName: VROverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVROverlay* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VROverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VROverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRRenderModels
// Il2CppName: VRRenderModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRRenderModels* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRRenderModels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRRenderModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay
// Il2CppName: VRExtendedDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRExtendedDisplay* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRExtendedDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRSettings
// Il2CppName: VRSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRSettings* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRApplications
// Il2CppName: VRApplications
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRApplications* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRApplications)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRApplications", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRScreenshots
// Il2CppName: VRScreenshots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRScreenshots* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRScreenshots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRScreenshots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera
// Il2CppName: VRTrackedCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Valve::VR::CVRTrackedCamera* (Valve::VR::OpenVR::COpenVRContext::*)()>(&Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Valve::VR::OpenVR::COpenVRContext*), "VRTrackedCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Valve::VR::OpenVR::COpenVRContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
