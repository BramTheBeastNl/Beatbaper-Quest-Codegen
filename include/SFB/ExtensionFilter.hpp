// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <initializer_list>
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: SFB
namespace SFB {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: SFB.ExtensionFilter
  // [TokenAttribute] Offset: FFFFFFFF
  struct ExtensionFilter/*, public System::ValueType*/ {
    public:
    // public readonly System.String _name
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public readonly System.String[] _extensions
    // Size: 0x8
    // Offset: 0x8
    ::ArrayWrapper<::Il2CppString*> extensions;
    // Field size check
    static_assert(sizeof(::ArrayWrapper<::Il2CppString*>) == 0x8);
    // Creating value type constructor for type: ExtensionFilter
    constexpr ExtensionFilter(::Il2CppString* name_ = {}, ::ArrayWrapper<::Il2CppString*> extensions_ = ::ArrayWrapper<::Il2CppString*>(nullptr)) noexcept : name{name_}, extensions{extensions_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.String _name
    ::Il2CppString*& dyn__name();
    // Get instance field reference: public readonly System.String[] _extensions
    ::ArrayWrapper<::Il2CppString*>& dyn__extensions();
    // public System.Void .ctor(System.String filterName, params System.String[] filterExtensions)
    // Offset: 0x11C52AC
    // ABORTED: conflicts with another method.  ExtensionFilter(::Il2CppString* filterName, ::ArrayWrapper<::Il2CppString*> filterExtensions);
  }; // SFB.ExtensionFilter
  #pragma pack(pop)
  static check_size<sizeof(ExtensionFilter), 8 + sizeof(::ArrayWrapper<::Il2CppString*>)> __SFB_ExtensionFilterSizeCheck;
  static_assert(sizeof(ExtensionFilter) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(SFB::ExtensionFilter, "SFB", "ExtensionFilter");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: SFB::ExtensionFilter::ExtensionFilter
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
