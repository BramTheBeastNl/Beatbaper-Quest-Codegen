// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: Unity.Jobs
namespace Unity::Jobs {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Unity.Jobs.JobHandle
  // [NativeTypeAttribute] Offset: D8D5E0
  struct JobHandle/*, public System::ValueType*/ {
    public:
    // System.IntPtr jobGroup
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr jobGroup;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // System.Int32 version
    // Size: 0x4
    // Offset: 0x8
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: JobHandle
    constexpr JobHandle(System::IntPtr jobGroup_ = {}, int version_ = {}) noexcept : jobGroup{jobGroup_}, version{version_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // static public System.Void ScheduleBatchedJobs()
    // Offset: 0x1B88140
    static void ScheduleBatchedJobs();
  }; // Unity.Jobs.JobHandle
  #pragma pack(pop)
  static check_size<sizeof(JobHandle), 8 + sizeof(int)> __Unity_Jobs_JobHandleSizeCheck;
  static_assert(sizeof(JobHandle) == 0xC);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Unity::Jobs::JobHandle, "Unity.Jobs", "JobHandle");
// Writing MetadataGetter for method: Unity::Jobs::JobHandle::ScheduleBatchedJobs
// Il2CppName: ScheduleBatchedJobs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Unity::Jobs::JobHandle::ScheduleBatchedJobs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Unity::Jobs::JobHandle), "ScheduleBatchedJobs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
