// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: Unity.Collections.Allocator
#include "Unity/Collections/Allocator.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Unity::Collections
namespace Unity::Collections {
  // Skipping declaration: Enumerator because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Unity.Collections
namespace Unity::Collections {
  // Autogenerated type: Unity.Collections.NativeArray`1
  template<typename T>
  struct NativeArray_1 : public System::ValueType/*, public System::IDisposable, public System::Collections::Generic::IEnumerable_1<T>, public System::IEquatable_1<Unity::Collections::NativeArray_1<T>>*/ {
    public:
    // Nested type: Unity::Collections::NativeArray_1::Enumerator<T>
    struct Enumerator;
    // Autogenerated type: Unity.Collections.NativeArray`1/Enumerator
    struct Enumerator : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = NativeArray_1<T>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      // private Unity.Collections.NativeArray`1<T> m_Array
      // Offset: 0x0
      Unity::Collections::NativeArray_1<T> m_Array;
      // private System.Int32 m_Index
      // Offset: 0x0
      int m_Index;
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(Unity::Collections::NativeArray_1<T> m_Array_ = {}, int m_Index_ = {}) noexcept : m_Array{m_Array_}, m_Index{m_Index_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<T>
      operator System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // public System.Void .ctor(ref Unity.Collections.NativeArray`1<T> array)
      // Offset: 0xFFFFFFFF
      Enumerator(Unity::Collections::NativeArray_1<T>& array) {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("Enumerator").WithContext(".ctor");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<typename NativeArray_1<T>::Enumerator>(), ".ctor", {}, ::il2cpp_utils::ExtractTypes(array)));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, array);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("Enumerator").WithContext("Dispose");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Dispose", {}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_IDisposable_Dispose
      // Maps to method: Dispose
      void System_IDisposable_Dispose() {
        Dispose();
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("Enumerator").WithContext("MoveNext");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<bool>(), "MoveNext", {}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("Enumerator").WithContext("Reset");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Reset", {}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_Collections_IEnumerator_Reset
      // Maps to method: Reset
      void System_Collections_IEnumerator_Reset() {
        Reset();
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      T get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("Enumerator").WithContext("get_Current");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "get_Current", {}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
      // Maps to method: get_Current
      T System_Collections_Generic_IEnumerator_1_get_Current() {
        return get_Current();
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("Enumerator").WithContext("System.Collections.IEnumerator.get_Current");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<::Il2CppObject*>(), "System.Collections.IEnumerator.get_Current", {}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
      }
    }; // Unity.Collections.NativeArray`1/Enumerator
    // Could not write size check! Type: Unity.Collections.NativeArray`1/Enumerator is generic!
    // System.Void* m_Buffer
    // Offset: 0x0
    void* m_Buffer;
    // System.Int32 m_Length
    // Offset: 0x0
    int m_Length;
    // Unity.Collections.Allocator m_AllocatorLabel
    // Offset: 0x0
    Unity::Collections::Allocator m_AllocatorLabel;
    // Creating value type constructor for type: NativeArray_1
    constexpr NativeArray_1(void* m_Buffer_ = {}, int m_Length_ = {}, Unity::Collections::Allocator m_AllocatorLabel_ = {}) noexcept : m_Buffer{m_Buffer_}, m_Length{m_Length_}, m_AllocatorLabel{m_AllocatorLabel_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<T>
    operator System::Collections::Generic::IEnumerable_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<T>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<Unity::Collections::NativeArray_1<T>>
    operator System::IEquatable_1<Unity::Collections::NativeArray_1<T>>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<Unity::Collections::NativeArray_1<T>>*>(this);
    }
    // public System.Int32 get_Length()
    // Offset: 0xFFFFFFFF
    int get_Length() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("get_Length");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<int>(), "get_Length", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    T get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("get_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<T>(), "get_Item", {}, ::il2cpp_utils::ExtractTypes(index)));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method, index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFF
    void set_Item(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("set_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "set_Item", {}, ::il2cpp_utils::ExtractTypes(index, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, value);
    }
    // private System.Void Deallocate()
    // Offset: 0xFFFFFFFF
    void Deallocate() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("Deallocate");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Deallocate", {}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
    }
    // public Unity.Collections.NativeArray`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    typename Unity::Collections::NativeArray_1<T>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<typename Unity::Collections::NativeArray_1<T>::Enumerator>(), "GetEnumerator", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<typename Unity::Collections::NativeArray_1<T>::Enumerator, false>(*this, ___internal__method);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("Dispose");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<void>(), "Dispose", {}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
    }
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose() {
      Dispose();
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("System.Collections.Generic.IEnumerable<T>.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<System::Collections::Generic::IEnumerator_1<T>*>(), "System.Collections.Generic.IEnumerable<T>.GetEnumerator", {}, ::il2cpp_utils::ExtractTypes())));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<T>*, false>(*this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("System.Collections.IEnumerable.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<System::Collections::IEnumerator*>(), "System.Collections.IEnumerable.GetEnumerator", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(*this, ___internal__method);
    }
    // public System.Boolean Equals(Unity.Collections.NativeArray`1<T> other)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(Unity.Collections.NativeArray`1<T> other)
    bool Equals(Unity::Collections::NativeArray_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("Equals");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<bool>(), "Equals", {}, ::il2cpp_utils::ExtractTypes(other)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("Equals");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<bool>(), "Equals", {}, ::il2cpp_utils::ExtractTypes(obj)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Unity::Collections").WithContext("NativeArray_1").WithContext("GetHashCode");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, il2cpp_utils::NoArgClass<int>(), "GetHashCode", {}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
    }
  }; // Unity.Collections.NativeArray`1
  // Could not write size check! Type: Unity.Collections.NativeArray`1 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(Unity::Collections::NativeArray_1, "Unity.Collections", "NativeArray`1");
#pragma pack(pop)
