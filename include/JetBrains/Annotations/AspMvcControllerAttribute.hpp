// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: JetBrains.Annotations
namespace JetBrains::Annotations {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: JetBrains.Annotations.AspMvcControllerAttribute
  // [AttributeUsageAttribute] Offset: DCAD1C
  class AspMvcControllerAttribute : public System::Attribute {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDCB3B8
    // private System.String <AnonymousProperty>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* AnonymousProperty;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: AspMvcControllerAttribute
    AspMvcControllerAttribute(::Il2CppString* AnonymousProperty_ = {}) noexcept : AnonymousProperty{AnonymousProperty_} {}
    // Creating conversion operator: operator ::Il2CppString*
    constexpr operator ::Il2CppString*() const noexcept {
      return AnonymousProperty;
    }
    // public System.Void .ctor(System.String anonymousProperty)
    // Offset: 0x23DB054
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AspMvcControllerAttribute* New_ctor(::Il2CppString* anonymousProperty) {
      static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AspMvcControllerAttribute*, creationType>(anonymousProperty)));
    }
    // public System.String get_AnonymousProperty()
    // Offset: 0x23DB080
    ::Il2CppString* get_AnonymousProperty();
    // private System.Void set_AnonymousProperty(System.String value)
    // Offset: 0x23DB088
    void set_AnonymousProperty(::Il2CppString* value);
    // public System.Void .ctor()
    // Offset: 0x23DB04C
    // Implemented from: System.Attribute
    // Base method: System.Void Attribute::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AspMvcControllerAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AspMvcControllerAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AspMvcControllerAttribute*, creationType>()));
    }
  }; // JetBrains.Annotations.AspMvcControllerAttribute
  #pragma pack(pop)
  static check_size<sizeof(AspMvcControllerAttribute), 16 + sizeof(::Il2CppString*)> __JetBrains_Annotations_AspMvcControllerAttributeSizeCheck;
  static_assert(sizeof(AspMvcControllerAttribute) == 0x18);
  // Writing MetadataGetter for method: AspMvcControllerAttribute::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)(::Il2CppString*)>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)(::Il2CppString*)>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: AspMvcControllerAttribute::get_AnonymousProperty
  // Il2CppName: get_AnonymousProperty
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AspMvcControllerAttribute::*)()>(&AspMvcControllerAttribute::get_AnonymousProperty)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), "get_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: AspMvcControllerAttribute::set_AnonymousProperty
  // Il2CppName: set_AnonymousProperty
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)(::Il2CppString*)>(&AspMvcControllerAttribute::set_AnonymousProperty)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), "set_AnonymousProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: AspMvcControllerAttribute::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)()>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AspMvcControllerAttribute::*)()>(&AspMvcControllerAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(AspMvcControllerAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(JetBrains::Annotations::AspMvcControllerAttribute*, "JetBrains.Annotations", "AspMvcControllerAttribute");
