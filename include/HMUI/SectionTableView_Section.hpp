// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
// Including type: HMUI.SectionTableView
#include "HMUI/SectionTableView.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: HMUI
namespace HMUI {
  // Size: 0xC
  // Autogenerated type: HMUI.SectionTableView/Section
  // [] Offset: FFFFFFFF
  struct SectionTableView::Section/*, public System::ValueType*/ {
    public:
    // public System.Boolean unfolded
    // Size: 0x1
    // Offset: 0x0
    bool unfolded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: unfolded and: startBaseRow
    char __padding0[0x3] = {};
    // public System.Int32 startBaseRow
    // Size: 0x4
    // Offset: 0x4
    int startBaseRow;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 numberOfBaseRows
    // Size: 0x4
    // Offset: 0x8
    int numberOfBaseRows;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Section
    constexpr Section(bool unfolded_ = {}, int startBaseRow_ = {}, int numberOfBaseRows_ = {}) noexcept : unfolded{unfolded_}, startBaseRow{startBaseRow_}, numberOfBaseRows{numberOfBaseRows_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // HMUI.SectionTableView/Section
  static check_size<sizeof(SectionTableView::Section), 8 + sizeof(int)> __HMUI_SectionTableView_SectionSizeCheck;
  static_assert(sizeof(SectionTableView::Section) == 0xC);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HMUI::SectionTableView::Section, "HMUI", "SectionTableView/Section");
#pragma pack(pop)
