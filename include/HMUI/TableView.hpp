// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
// Including type: HMUI.TableViewScroller
#include "HMUI/TableViewScroller.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: VerticalScrollIndicator
  class VerticalScrollIndicator;
  // Forward declaring type: TableCell
  class TableCell;
  // Skipping declaration: TableType because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
  // Forward declaring type: ScrollRect
  class ScrollRect;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Autogenerated type: HMUI.TableView
  class TableView : public UnityEngine::MonoBehaviour, public HMUI::ITableCellOwner {
    public:
    // Nested type: HMUI::TableView::TableType
    struct TableType;
    // Nested type: HMUI::TableView::CellsGroup
    class CellsGroup;
    // Nested type: HMUI::TableView::IDataSource
    class IDataSource;
    // Autogenerated type: HMUI.TableView/TableType
    struct TableType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: TableType
      constexpr TableType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.TableView/TableType Vertical
      static constexpr const int Vertical = 0;
      // Get static field: static public HMUI.TableView/TableType Vertical
      static HMUI::TableView::TableType _get_Vertical();
      // Set static field: static public HMUI.TableView/TableType Vertical
      static void _set_Vertical(HMUI::TableView::TableType value);
      // static field const value: static public HMUI.TableView/TableType Horizontal
      static constexpr const int Horizontal = 1;
      // Get static field: static public HMUI.TableView/TableType Horizontal
      static HMUI::TableView::TableType _get_Horizontal();
      // Set static field: static public HMUI.TableView/TableType Horizontal
      static void _set_Horizontal(HMUI::TableView::TableType value);
    }; // HMUI.TableView/TableType
    // private System.Boolean _hideScrollButtonsIfNotNeeded
    // Offset: 0x18
    bool hideScrollButtonsIfNotNeeded;
    // private UnityEngine.UI.Button _pageUpButton
    // Offset: 0x20
    UnityEngine::UI::Button* pageUpButton;
    // private UnityEngine.UI.Button _pageDownButton
    // Offset: 0x28
    UnityEngine::UI::Button* pageDownButton;
    // private System.Boolean _hideScrollIndicatorIfNotNeeded
    // Offset: 0x30
    bool hideScrollIndicatorIfNotNeeded;
    // private HMUI.VerticalScrollIndicator _verticalScrollIndicator
    // Offset: 0x38
    HMUI::VerticalScrollIndicator* verticalScrollIndicator;
    // private System.Boolean _alignToCenter
    // Offset: 0x40
    bool alignToCenter;
    // private HMUI.TableView/TableType _tableType
    // Offset: 0x44
    HMUI::TableView::TableType tableType;
    // private System.Boolean _scrollToTopOnEnable
    // Offset: 0x48
    bool scrollToTopOnEnable;
    // private HMUI.TableViewSelectionType _selectionType
    // Offset: 0x4C
    HMUI::TableViewSelectionType selectionType;
    // private System.Boolean _canSelectSelectedCell
    // Offset: 0x50
    bool canSelectSelectedCell;
    // private HMUI.TableView/CellsGroup[] _preallocatedCells
    // Offset: 0x58
    ::Array<HMUI::TableView::CellsGroup*>* preallocatedCells;
    // private readonly IVRPlatformHelper _platformHelper
    // Offset: 0x60
    GlobalNamespace::IVRPlatformHelper* platformHelper;
    // private System.Action`2<HMUI.TableView,System.Int32> didSelectCellWithIdxEvent
    // Offset: 0x68
    System::Action_2<HMUI::TableView*, int>* didSelectCellWithIdxEvent;
    // private System.Action`1<HMUI.TableView> didReloadDataEvent
    // Offset: 0x70
    System::Action_1<HMUI::TableView*>* didReloadDataEvent;
    // private System.Action`1<HMUI.TableView> didInsertCellsEvent
    // Offset: 0x78
    System::Action_1<HMUI::TableView*>* didInsertCellsEvent;
    // private System.Action`1<HMUI.TableView> didDeleteCellsEvent
    // Offset: 0x80
    System::Action_1<HMUI::TableView*>* didDeleteCellsEvent;
    // private System.Action`1<HMUI.TableView> didChangeRectSize
    // Offset: 0x88
    System::Action_1<HMUI::TableView*>* didChangeRectSize;
    // private UnityEngine.RectTransform _viewportTransform
    // Offset: 0x90
    UnityEngine::RectTransform* viewportTransform;
    // private UnityEngine.RectTransform _contentTransform
    // Offset: 0x98
    UnityEngine::RectTransform* contentTransform;
    // private UnityEngine.UI.ScrollRect _scrollRect
    // Offset: 0xA0
    UnityEngine::UI::ScrollRect* scrollRect;
    // protected HMUI.TableView/IDataSource _dataSource
    // Offset: 0xA8
    HMUI::TableView::IDataSource* dataSource;
    // private System.Int32 _numberOfCells
    // Offset: 0xB0
    int numberOfCells;
    // private System.Single _cellSize
    // Offset: 0xB4
    float cellSize;
    // private readonly System.Collections.Generic.List`1<HMUI.TableCell> _visibleCells
    // Offset: 0xB8
    System::Collections::Generic::List_1<HMUI::TableCell*>* visibleCells;
    // private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<HMUI.TableCell>> _reusableCells
    // Offset: 0xC0
    System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::List_1<HMUI::TableCell*>*>* reusableCells;
    // private System.Collections.Generic.HashSet`1<System.Int32> _selectedCellIdxs
    // Offset: 0xC8
    System::Collections::Generic::HashSet_1<int>* selectedCellIdxs;
    // private System.Int32 _prevMinIdx
    // Offset: 0xD0
    int prevMinIdx;
    // private System.Int32 _prevMaxIdx
    // Offset: 0xD4
    int prevMaxIdx;
    // private System.Boolean _isInitialized
    // Offset: 0xD8
    bool isInitialized;
    // private System.Boolean _refreshCellsOnEnable
    // Offset: 0xD9
    bool refreshCellsOnEnable;
    // protected HMUI.TableViewScroller scroller
    // Offset: 0xE0
    HMUI::TableViewScroller* scroller;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void set_selectionType(HMUI.TableViewSelectionType value)
    // Offset: 0x117DA48
    void set_selectionType(HMUI::TableViewSelectionType value);
    // public System.Void add_didSelectCellWithIdxEvent(System.Action`2<HMUI.TableView,System.Int32> value)
    // Offset: 0x117DA58
    void add_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value);
    // public System.Void remove_didSelectCellWithIdxEvent(System.Action`2<HMUI.TableView,System.Int32> value)
    // Offset: 0x117DAFC
    void remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value);
    // public System.Void add_didReloadDataEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DBA0
    void add_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didReloadDataEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DC44
    void remove_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void add_didInsertCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DCE8
    void add_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didInsertCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DD8C
    void remove_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void add_didDeleteCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DE30
    void add_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didDeleteCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DED4
    void remove_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void add_didChangeRectSize(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117DF78
    void add_didChangeRectSize(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didChangeRectSize(System.Action`1<HMUI.TableView> value)
    // Offset: 0x117E01C
    void remove_didChangeRectSize(System::Action_1<HMUI::TableView*>* value);
    // public HMUI.TableView/IDataSource get_dataSource()
    // Offset: 0x117E0C0
    HMUI::TableView::IDataSource* get_dataSource();
    // public System.Void SetDataSource(HMUI.TableView/IDataSource newDataSource, System.Boolean reloadData)
    // Offset: 0x117E0C8
    void SetDataSource(HMUI::TableView::IDataSource* newDataSource, bool reloadData);
    // public System.Collections.Generic.IEnumerable`1<HMUI.TableCell> get_visibleCells()
    // Offset: 0x117E10C
    System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>* get_visibleCells();
    // public UnityEngine.RectTransform get_viewportTransform()
    // Offset: 0x117E114
    UnityEngine::RectTransform* get_viewportTransform();
    // public UnityEngine.RectTransform get_contentTransform()
    // Offset: 0x117E11C
    UnityEngine::RectTransform* get_contentTransform();
    // public UnityEngine.UI.ScrollRect get_scrollRect()
    // Offset: 0x117E124
    UnityEngine::UI::ScrollRect* get_scrollRect();
    // public System.Single get_cellSize()
    // Offset: 0x117E134
    float get_cellSize();
    // public HMUI.TableView/TableType get_tableType()
    // Offset: 0x117E13C
    HMUI::TableView::TableType get_tableType();
    // protected System.Void Awake()
    // Offset: 0x117E144
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x117E7D4
    void OnEnable();
    // private System.Void LazyInit()
    // Offset: 0x117E154
    void LazyInit();
    // public System.Void Hide()
    // Offset: 0x117F330
    void Hide();
    // public System.Void Show()
    // Offset: 0x117F358
    void Show();
    // private System.Void RefreshContentSize()
    // Offset: 0x117F380
    void RefreshContentSize();
    // public System.Void RefreshCellsContent()
    // Offset: 0x117F3F8
    void RefreshCellsContent();
    // protected System.Tuple`2<System.Int32,System.Int32> GetVisibleCellsIdRange()
    // Offset: 0x117F404
    System::Tuple_2<int, int>* GetVisibleCellsIdRange();
    // private System.Void RefreshCells(System.Boolean forcedVisualsRefresh, System.Boolean forcedContentRefresh)
    // Offset: 0x117E838
    void RefreshCells(bool forcedVisualsRefresh, bool forcedContentRefresh);
    // private System.Void LayoutCellForIdx(HMUI.TableCell cell, System.Int32 idx, System.Single offset)
    // Offset: 0x117F6C4
    void LayoutCellForIdx(HMUI::TableCell* cell, int idx, float offset);
    // private System.Void AddCellToReusableCells(HMUI.TableCell cell)
    // Offset: 0x117F5D0
    void AddCellToReusableCells(HMUI::TableCell* cell);
    // private System.Void HandleScrollRectValueChanged(UnityEngine.Vector2 pos)
    // Offset: 0x117F910
    void HandleScrollRectValueChanged(UnityEngine::Vector2 pos);
    // private System.Void HandleCellSelectionDidChange(HMUI.SelectableCell selectableCell, HMUI.SelectableCell/TransitionType transitionType, System.Object changeOwner)
    // Offset: 0x117F91C
    void HandleCellSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner);
    // protected System.Void DidSelectCellWithIdx(System.Int32 idx)
    // Offset: 0x117FB60
    void DidSelectCellWithIdx(int idx);
    // public System.Void ReloadData()
    // Offset: 0x1178CB8
    void ReloadData();
    // public System.Void InsertCells(System.Int32 idx, System.Int32 count)
    // Offset: 0x1179288
    void InsertCells(int idx, int count);
    // public System.Void DeleteCells(System.Int32 idx, System.Int32 count)
    // Offset: 0x1179674
    void DeleteCells(int idx, int count);
    // public HMUI.TableCell DequeueReusableCellForIdentifier(System.String identifier)
    // Offset: 0x117B7BC
    HMUI::TableCell* DequeueReusableCellForIdentifier(::Il2CppString* identifier);
    // public System.Void SelectCellWithIdx(System.Int32 idx, System.Boolean callbackTable)
    // Offset: 0x117FBD8
    void SelectCellWithIdx(int idx, bool callbackTable);
    // public System.Void ClearSelection()
    // Offset: 0x117FD48
    void ClearSelection();
    // public System.Void ClearHighlights()
    // Offset: 0x117ED98
    void ClearHighlights();
    // public System.Void ScrollToCellWithIdx(System.Int32 idx, HMUI.TableViewScroller/ScrollPositionType scrollPositionType, System.Boolean animated)
    // Offset: 0x11799D4
    void ScrollToCellWithIdx(int idx, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated);
    // public System.Void ChangeRectSize(UnityEngine.RectTransform/Axis axis, System.Single size)
    // Offset: 0x118004C
    void ChangeRectSize(UnityEngine::RectTransform::Axis axis, float size);
    // public HMUI.TableViewSelectionType get_selectionType()
    // Offset: 0x117DA40
    // Implemented from: HMUI.ITableCellOwner
    // Base method: HMUI.TableViewSelectionType ITableCellOwner::get_selectionType()
    HMUI::TableViewSelectionType get_selectionType();
    // public System.Boolean get_canSelectSelectedCell()
    // Offset: 0x117DA50
    // Implemented from: HMUI.ITableCellOwner
    // Base method: System.Boolean ITableCellOwner::get_canSelectSelectedCell()
    bool get_canSelectSelectedCell();
    // public System.Int32 get_numberOfCells()
    // Offset: 0x117E12C
    // Implemented from: HMUI.ITableCellOwner
    // Base method: System.Int32 ITableCellOwner::get_numberOfCells()
    int get_numberOfCells();
    // public System.Void .ctor()
    // Offset: 0x1179A28
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static TableView* New_ctor();
  }; // HMUI.TableView
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HMUI::TableView*, "HMUI", "TableView");
DEFINE_IL2CPP_ARG_TYPE(HMUI::TableView::TableType, "HMUI", "TableView/TableType");
#pragma pack(pop)
