// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.ITableCellOwner
#include "HMUI/ITableCellOwner.hpp"
// Including type: HMUI.TableViewSelectionType
#include "HMUI/TableViewSelectionType.hpp"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScrollView
  class ScrollView;
  // Forward declaring type: TableCell
  class TableCell;
  // Skipping declaration: TableType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0xA2
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.TableView
  // [RequireComponent] Offset: DF5BF0
  class TableView : public UnityEngine::MonoBehaviour/*, public HMUI::ITableCellOwner*/ {
    public:
    // Nested type: HMUI::TableView::TableType
    struct TableType;
    // Nested type: HMUI::TableView::ScrollPositionType
    struct ScrollPositionType;
    // Nested type: HMUI::TableView::CellsGroup
    class CellsGroup;
    // Nested type: HMUI::TableView::IDataSource
    class IDataSource;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.TableView/TableType
    struct TableType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: TableType
      constexpr TableType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.TableView/TableType Vertical
      static constexpr const int Vertical = 0;
      // Get static field: static public HMUI.TableView/TableType Vertical
      static HMUI::TableView::TableType _get_Vertical();
      // Set static field: static public HMUI.TableView/TableType Vertical
      static void _set_Vertical(HMUI::TableView::TableType value);
      // static field const value: static public HMUI.TableView/TableType Horizontal
      static constexpr const int Horizontal = 1;
      // Get static field: static public HMUI.TableView/TableType Horizontal
      static HMUI::TableView::TableType _get_Horizontal();
      // Set static field: static public HMUI.TableView/TableType Horizontal
      static void _set_Horizontal(HMUI::TableView::TableType value);
    }; // HMUI.TableView/TableType
    #pragma pack(pop)
    static check_size<sizeof(TableView::TableType), 0 + sizeof(int)> __HMUI_TableView_TableTypeSizeCheck;
    static_assert(sizeof(TableView::TableType) == 0x4);
    // private HMUI.ScrollView _scrollView
    // Size: 0x8
    // Offset: 0x18
    HMUI::ScrollView* scrollView;
    // Field size check
    static_assert(sizeof(HMUI::ScrollView*) == 0x8);
    // [SpaceAttribute] Offset: 0xDF7D14
    // private System.Boolean _scrollToTopOnEnable
    // Size: 0x1
    // Offset: 0x20
    bool scrollToTopOnEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _alignToCenter
    // Size: 0x1
    // Offset: 0x21
    bool alignToCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alignToCenter and: tableType
    char __padding2[0x2] = {};
    // private HMUI.TableView/TableType _tableType
    // Size: 0x4
    // Offset: 0x24
    HMUI::TableView::TableType tableType;
    // Field size check
    static_assert(sizeof(HMUI::TableView::TableType) == 0x4);
    // [SpaceAttribute] Offset: 0xDF7D6C
    // private HMUI.TableViewSelectionType _selectionType
    // Size: 0x4
    // Offset: 0x28
    HMUI::TableViewSelectionType selectionType;
    // Field size check
    static_assert(sizeof(HMUI::TableViewSelectionType) == 0x4);
    // private System.Boolean _canSelectSelectedCell
    // Size: 0x1
    // Offset: 0x2C
    bool canSelectSelectedCell;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canSelectSelectedCell and: preallocatedCells
    char __padding5[0x3] = {};
    // [SpaceAttribute] Offset: 0xDF7DB4
    // [NullAllowed] Offset: 0xDF7DB4
    // private HMUI.TableView/CellsGroup[] _preallocatedCells
    // Size: 0x8
    // Offset: 0x30
    ::Array<HMUI::TableView::CellsGroup*>* preallocatedCells;
    // Field size check
    static_assert(sizeof(::Array<HMUI::TableView::CellsGroup*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDF7DFC
    // private System.Action`2<HMUI.TableView,System.Int32> didSelectCellWithIdxEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_2<HMUI::TableView*, int>* didSelectCellWithIdxEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<HMUI::TableView*, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDF7E0C
    // private System.Action`1<HMUI.TableView> didReloadDataEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<HMUI::TableView*>* didReloadDataEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<HMUI::TableView*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDF7E1C
    // private System.Action`1<HMUI.TableView> didInsertCellsEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<HMUI::TableView*>* didInsertCellsEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<HMUI::TableView*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDF7E2C
    // private System.Action`1<HMUI.TableView> didDeleteCellsEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<HMUI::TableView*>* didDeleteCellsEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<HMUI::TableView*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDF7E3C
    // private System.Action`1<HMUI.TableView> didChangeRectSizeEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<HMUI::TableView*>* didChangeRectSizeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<HMUI::TableView*>*) == 0x8);
    // private UnityEngine.RectTransform _contentTransform
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::RectTransform* contentTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _viewportTransform
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::RectTransform* viewportTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // protected HMUI.TableView/IDataSource _dataSource
    // Size: 0x8
    // Offset: 0x70
    HMUI::TableView::IDataSource* dataSource;
    // Field size check
    static_assert(sizeof(HMUI::TableView::IDataSource*) == 0x8);
    // private System.Int32 _numberOfCells
    // Size: 0x4
    // Offset: 0x78
    int numberOfCells;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _cellSize
    // Size: 0x4
    // Offset: 0x7C
    float cellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Collections.Generic.List`1<HMUI.TableCell> _visibleCells
    // Size: 0x8
    // Offset: 0x80
    System::Collections::Generic::List_1<HMUI::TableCell*>* visibleCells;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<HMUI::TableCell*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<HMUI.TableCell>> _reusableCells
    // Size: 0x8
    // Offset: 0x88
    System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::List_1<HMUI::TableCell*>*>* reusableCells;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::List_1<HMUI::TableCell*>*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> _selectedCellIdxs
    // Size: 0x8
    // Offset: 0x90
    System::Collections::Generic::HashSet_1<int>* selectedCellIdxs;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Int32 _prevMinIdx
    // Size: 0x4
    // Offset: 0x98
    int prevMinIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevMaxIdx
    // Size: 0x4
    // Offset: 0x9C
    int prevMaxIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0xA0
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _refreshCellsOnEnable
    // Size: 0x1
    // Offset: 0xA1
    bool refreshCellsOnEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TableView
    TableView(HMUI::ScrollView* scrollView_ = {}, bool scrollToTopOnEnable_ = {}, bool alignToCenter_ = {}, HMUI::TableView::TableType tableType_ = {}, HMUI::TableViewSelectionType selectionType_ = {}, bool canSelectSelectedCell_ = {}, ::Array<HMUI::TableView::CellsGroup*>* preallocatedCells_ = {}, System::Action_2<HMUI::TableView*, int>* didSelectCellWithIdxEvent_ = {}, System::Action_1<HMUI::TableView*>* didReloadDataEvent_ = {}, System::Action_1<HMUI::TableView*>* didInsertCellsEvent_ = {}, System::Action_1<HMUI::TableView*>* didDeleteCellsEvent_ = {}, System::Action_1<HMUI::TableView*>* didChangeRectSizeEvent_ = {}, UnityEngine::RectTransform* contentTransform_ = {}, UnityEngine::RectTransform* viewportTransform_ = {}, HMUI::TableView::IDataSource* dataSource_ = {}, int numberOfCells_ = {}, float cellSize_ = {}, System::Collections::Generic::List_1<HMUI::TableCell*>* visibleCells_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Collections::Generic::List_1<HMUI::TableCell*>*>* reusableCells_ = {}, System::Collections::Generic::HashSet_1<int>* selectedCellIdxs_ = {}, int prevMinIdx_ = {}, int prevMaxIdx_ = {}, bool isInitialized_ = {}, bool refreshCellsOnEnable_ = {}) noexcept : scrollView{scrollView_}, scrollToTopOnEnable{scrollToTopOnEnable_}, alignToCenter{alignToCenter_}, tableType{tableType_}, selectionType{selectionType_}, canSelectSelectedCell{canSelectSelectedCell_}, preallocatedCells{preallocatedCells_}, didSelectCellWithIdxEvent{didSelectCellWithIdxEvent_}, didReloadDataEvent{didReloadDataEvent_}, didInsertCellsEvent{didInsertCellsEvent_}, didDeleteCellsEvent{didDeleteCellsEvent_}, didChangeRectSizeEvent{didChangeRectSizeEvent_}, contentTransform{contentTransform_}, viewportTransform{viewportTransform_}, dataSource{dataSource_}, numberOfCells{numberOfCells_}, cellSize{cellSize_}, visibleCells{visibleCells_}, reusableCells{reusableCells_}, selectedCellIdxs{selectedCellIdxs_}, prevMinIdx{prevMinIdx_}, prevMaxIdx{prevMaxIdx_}, isInitialized{isInitialized_}, refreshCellsOnEnable{refreshCellsOnEnable_} {}
    // Creating interface conversion operator: operator HMUI::ITableCellOwner
    operator HMUI::ITableCellOwner() noexcept {
      return *reinterpret_cast<HMUI::ITableCellOwner*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public HMUI.TableViewSelectionType get_selectionType()
    // Offset: 0x12A3314
    HMUI::TableViewSelectionType get_selectionType();
    // public System.Void set_selectionType(HMUI.TableViewSelectionType value)
    // Offset: 0x12A331C
    void set_selectionType(HMUI::TableViewSelectionType value);
    // public System.Boolean get_canSelectSelectedCell()
    // Offset: 0x12A3324
    bool get_canSelectSelectedCell();
    // public System.Void add_didSelectCellWithIdxEvent(System.Action`2<HMUI.TableView,System.Int32> value)
    // Offset: 0x12A332C
    void add_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value);
    // public System.Void remove_didSelectCellWithIdxEvent(System.Action`2<HMUI.TableView,System.Int32> value)
    // Offset: 0x12A33D0
    void remove_didSelectCellWithIdxEvent(System::Action_2<HMUI::TableView*, int>* value);
    // public System.Void add_didReloadDataEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A3474
    void add_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didReloadDataEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A3518
    void remove_didReloadDataEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void add_didInsertCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A35BC
    void add_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didInsertCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A3660
    void remove_didInsertCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void add_didDeleteCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A3704
    void add_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didDeleteCellsEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A37A8
    void remove_didDeleteCellsEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void add_didChangeRectSizeEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A384C
    void add_didChangeRectSizeEvent(System::Action_1<HMUI::TableView*>* value);
    // public System.Void remove_didChangeRectSizeEvent(System.Action`1<HMUI.TableView> value)
    // Offset: 0x12A38F0
    void remove_didChangeRectSizeEvent(System::Action_1<HMUI::TableView*>* value);
    // public HMUI.TableView/IDataSource get_dataSource()
    // Offset: 0x12A3994
    HMUI::TableView::IDataSource* get_dataSource();
    // public System.Void SetDataSource(HMUI.TableView/IDataSource newDataSource, System.Boolean reloadData)
    // Offset: 0x12A399C
    void SetDataSource(HMUI::TableView::IDataSource* newDataSource, bool reloadData);
    // public System.Collections.Generic.IEnumerable`1<HMUI.TableCell> get_visibleCells()
    // Offset: 0x12A39B4
    System::Collections::Generic::IEnumerable_1<HMUI::TableCell*>* get_visibleCells();
    // public UnityEngine.RectTransform get_viewportTransform()
    // Offset: 0x12A39BC
    UnityEngine::RectTransform* get_viewportTransform();
    // public UnityEngine.RectTransform get_contentTransform()
    // Offset: 0x12A39C4
    UnityEngine::RectTransform* get_contentTransform();
    // public System.Int32 get_numberOfCells()
    // Offset: 0x12A39CC
    int get_numberOfCells();
    // public System.Single get_cellSize()
    // Offset: 0x12A39D4
    float get_cellSize();
    // public HMUI.TableView/TableType get_tableType()
    // Offset: 0x12A39DC
    HMUI::TableView::TableType get_tableType();
    // protected HMUI.ScrollView get_scrollView()
    // Offset: 0x12A39E4
    HMUI::ScrollView* get_scrollView();
    // protected System.Void Awake()
    // Offset: 0x12A39EC
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x12A3DAC
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0x12A3E3C
    void OnEnable();
    // private System.Void LazyInit()
    // Offset: 0x12A39FC
    void LazyInit();
    // public System.Void Hide()
    // Offset: 0x12A4504
    void Hide();
    // public System.Void Show()
    // Offset: 0x12A452C
    void Show();
    // private System.Void RefreshContentSize()
    // Offset: 0x12A4554
    void RefreshContentSize();
    // public System.Void RefreshCellsContent()
    // Offset: 0x12A45E4
    void RefreshCellsContent();
    // protected System.Tuple`2<System.Int32,System.Int32> GetVisibleCellsIdRange()
    // Offset: 0x12A45F0
    System::Tuple_2<int, int>* GetVisibleCellsIdRange();
    // private System.Void RefreshCells(System.Boolean forcedVisualsRefresh, System.Boolean forcedContentRefresh)
    // Offset: 0x12A3EA0
    void RefreshCells(bool forcedVisualsRefresh, bool forcedContentRefresh);
    // private System.Void LayoutCellForIdx(HMUI.TableCell cell, System.Int32 idx, System.Single offset)
    // Offset: 0x12A4864
    void LayoutCellForIdx(HMUI::TableCell* cell, int idx, float offset);
    // private System.Void AddCellToReusableCells(HMUI.TableCell cell)
    // Offset: 0x12A4770
    void AddCellToReusableCells(HMUI::TableCell* cell);
    // private System.Void HandleScrollRectValueChanged(System.Single f)
    // Offset: 0x12A4AB0
    void HandleScrollRectValueChanged(float f);
    // private System.Void HandleCellSelectionDidChange(HMUI.SelectableCell selectableCell, HMUI.SelectableCell/TransitionType transitionType, System.Object changeOwner)
    // Offset: 0x12A4ABC
    void HandleCellSelectionDidChange(HMUI::SelectableCell* selectableCell, HMUI::SelectableCell::TransitionType transitionType, ::Il2CppObject* changeOwner);
    // protected System.Void DidSelectCellWithIdx(System.Int32 idx)
    // Offset: 0x12A4D00
    void DidSelectCellWithIdx(int idx);
    // public System.Void ReloadDataKeepingPosition()
    // Offset: 0x12A4D78
    void ReloadDataKeepingPosition();
    // public System.Void ReloadData()
    // Offset: 0x129E5E0
    void ReloadData();
    // public System.Void InsertCells(System.Int32 idx, System.Int32 count)
    // Offset: 0x129EBC4
    void InsertCells(int idx, int count);
    // public System.Void DeleteCells(System.Int32 idx, System.Int32 count)
    // Offset: 0x129EF98
    void DeleteCells(int idx, int count);
    // public HMUI.TableCell DequeueReusableCellForIdentifier(System.String identifier)
    // Offset: 0x12A10B4
    HMUI::TableCell* DequeueReusableCellForIdentifier(::Il2CppString* identifier);
    // public System.Void SelectCellWithIdx(System.Int32 idx, System.Boolean callbackTable)
    // Offset: 0x12A4E4C
    void SelectCellWithIdx(int idx, bool callbackTable);
    // public System.Void ClearSelection()
    // Offset: 0x12A4FBC
    void ClearSelection();
    // public System.Void ClearHighlights()
    // Offset: 0x12A4404
    void ClearHighlights();
    // public System.Void ScrollToCellWithIdx(System.Int32 idx, HMUI.TableView/ScrollPositionType scrollPositionType, System.Boolean animated)
    // Offset: 0x129F2E8
    void ScrollToCellWithIdx(int idx, HMUI::TableView::ScrollPositionType scrollPositionType, bool animated);
    // public System.Void ChangeRectSize(UnityEngine.RectTransform/Axis axis, System.Single size)
    // Offset: 0x12A5108
    void ChangeRectSize(UnityEngine::RectTransform::Axis axis, float size);
    // public System.Void .ctor()
    // Offset: 0x129F3D0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TableView*, creationType>()));
    }
  }; // HMUI.TableView
  #pragma pack(pop)
  static check_size<sizeof(TableView), 161 + sizeof(bool)> __HMUI_TableViewSizeCheck;
  static_assert(sizeof(TableView) == 0xA2);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::TableView*, "HMUI", "TableView");
DEFINE_IL2CPP_ARG_TYPE(HMUI::TableView::TableType, "HMUI", "TableView/TableType");
