// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: SegmentedControl
  class SegmentedControl;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.SegmentedControlCell
  // [RequireComponent] Offset: DF7630
  class SegmentedControlCell : public HMUI::SelectableCell {
    public:
    // Writing base type padding for base size: 0x3A to desired offset: 0x3C
    char ___base_padding[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xDF8510
    // private System.Int32 <cellNumber>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    int cellNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private HMUI.SegmentedControl _segmentedControl
    // Size: 0x8
    // Offset: 0x40
    HMUI::SegmentedControl* segmentedControl;
    // Field size check
    static_assert(sizeof(HMUI::SegmentedControl*) == 0x8);
    // Creating value type constructor for type: SegmentedControlCell
    SegmentedControlCell(int cellNumber_ = {}, HMUI::SegmentedControl* segmentedControl_ = {}) noexcept : cellNumber{cellNumber_}, segmentedControl{segmentedControl_} {}
    // public System.Int32 get_cellNumber()
    // Offset: 0x12BAF5C
    int get_cellNumber();
    // private System.Void set_cellNumber(System.Int32 value)
    // Offset: 0x12BAF64
    void set_cellNumber(int value);
    // public System.Void SegmentedControlSetup(HMUI.SegmentedControl segmentedControl, System.Int32 cellNumber)
    // Offset: 0x12BA9E4
    void SegmentedControlSetup(HMUI::SegmentedControl* segmentedControl, int cellNumber);
    // protected override System.Void InternalToggle()
    // Offset: 0x12BAF6C
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::InternalToggle()
    void InternalToggle();
    // public System.Void .ctor()
    // Offset: 0x12BAF8C
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SegmentedControlCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SegmentedControlCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SegmentedControlCell*, creationType>()));
    }
  }; // HMUI.SegmentedControlCell
  #pragma pack(pop)
  static check_size<sizeof(SegmentedControlCell), 64 + sizeof(HMUI::SegmentedControl*)> __HMUI_SegmentedControlCellSizeCheck;
  static_assert(sizeof(SegmentedControlCell) == 0x48);
  // Writing MetadataGetter for method: SegmentedControlCell::get_cellNumber
  // Il2CppName: get_cellNumber
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SegmentedControlCell::*)()>(&SegmentedControlCell::get_cellNumber)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SegmentedControlCell*), "get_cellNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SegmentedControlCell::set_cellNumber
  // Il2CppName: set_cellNumber
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SegmentedControlCell::*)(int)>(&SegmentedControlCell::set_cellNumber)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SegmentedControlCell*), "set_cellNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SegmentedControlCell::SegmentedControlSetup
  // Il2CppName: SegmentedControlSetup
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SegmentedControlCell::*)(HMUI::SegmentedControl*, int)>(&SegmentedControlCell::SegmentedControlSetup)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SegmentedControlCell*), "SegmentedControlSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::SegmentedControl*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SegmentedControlCell::InternalToggle
  // Il2CppName: InternalToggle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SegmentedControlCell::*)()>(&SegmentedControlCell::InternalToggle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SegmentedControlCell*), "InternalToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SegmentedControlCell::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SegmentedControlCell::*)()>(&SegmentedControlCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SegmentedControlCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SegmentedControlCell::*)()>(&SegmentedControlCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SegmentedControlCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::SegmentedControlCell*, "HMUI", "SegmentedControlCell");
