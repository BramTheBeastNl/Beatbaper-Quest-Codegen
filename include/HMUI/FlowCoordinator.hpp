// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScreenSystem
  class ScreenSystem;
  // Forward declaring type: NavigationController
  class NavigationController;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseInputModule
  class BaseInputModule;
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.FlowCoordinator
  class FlowCoordinator : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass35_0
    class $$c__DisplayClass35_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass38_0
    class $$c__DisplayClass38_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass38_1
    class $$c__DisplayClass38_1;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass39_0
    class $$c__DisplayClass39_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass41_0
    class $$c__DisplayClass41_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass45_0
    class $$c__DisplayClass45_0;
    // Nested type: HMUI::FlowCoordinator::$$c__DisplayClass46_0
    class $$c__DisplayClass46_0;
    // [InjectAttribute] Offset: 0xDF8A48
    // private readonly UnityEngine.EventSystems.BaseInputModule _baseInputModule
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::EventSystems::BaseInputModule* baseInputModule;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::BaseInputModule*) == 0x8);
    // private HMUI.ScreenSystem _screenSystem
    // Size: 0x8
    // Offset: 0x20
    HMUI::ScreenSystem* screenSystem;
    // Field size check
    static_assert(sizeof(HMUI::ScreenSystem*) == 0x8);
    // private HMUI.FlowCoordinator _parentFlowCoordinator
    // Size: 0x8
    // Offset: 0x28
    HMUI::FlowCoordinator* parentFlowCoordinator;
    // Field size check
    static_assert(sizeof(HMUI::FlowCoordinator*) == 0x8);
    // private HMUI.FlowCoordinator _childFlowCoordinator
    // Size: 0x8
    // Offset: 0x30
    HMUI::FlowCoordinator* childFlowCoordinator;
    // Field size check
    static_assert(sizeof(HMUI::FlowCoordinator*) == 0x8);
    // private System.Collections.Generic.List`1<HMUI.ViewController> _mainScreenViewControllers
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::List_1<HMUI::ViewController*>* mainScreenViewControllers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<HMUI::ViewController*>*) == 0x8);
    // private HMUI.ViewController _leftScreenViewController
    // Size: 0x8
    // Offset: 0x40
    HMUI::ViewController* leftScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _rightScreenViewController
    // Size: 0x8
    // Offset: 0x48
    HMUI::ViewController* rightScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _bottomScreenViewController
    // Size: 0x8
    // Offset: 0x50
    HMUI::ViewController* bottomScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _topScreenViewController
    // Size: 0x8
    // Offset: 0x58
    HMUI::ViewController* topScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private System.Boolean _wasActivatedBefore
    // Size: 0x1
    // Offset: 0x60
    bool wasActivatedBefore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasActivatedBefore and: title
    char __padding9[0x7] = {};
    // private System.String _title
    // Size: 0x8
    // Offset: 0x68
    ::Il2CppString* title;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private HMUI.ViewController _providedMainViewController
    // Size: 0x8
    // Offset: 0x70
    HMUI::ViewController* providedMainViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _providedLeftScreenViewController
    // Size: 0x8
    // Offset: 0x78
    HMUI::ViewController* providedLeftScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _providedRightScreenViewController
    // Size: 0x8
    // Offset: 0x80
    HMUI::ViewController* providedRightScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _providedBottomScreenViewController
    // Size: 0x8
    // Offset: 0x88
    HMUI::ViewController* providedBottomScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private HMUI.ViewController _providedTopScreenViewController
    // Size: 0x8
    // Offset: 0x90
    HMUI::ViewController* providedTopScreenViewController;
    // Field size check
    static_assert(sizeof(HMUI::ViewController*) == 0x8);
    // private System.Boolean _viewControllersWereProvided
    // Size: 0x1
    // Offset: 0x98
    bool viewControllersWereProvided;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInDidActivatePhase
    // Size: 0x1
    // Offset: 0x99
    bool isInDidActivatePhase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isActivated
    // Size: 0x1
    // Offset: 0x9A
    bool isActivated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInTransition
    // Size: 0x1
    // Offset: 0x9B
    bool isInTransition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showBackButton
    // Size: 0x1
    // Offset: 0x9C
    bool showBackButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showBackButton and: prevEventSystem
    char __padding20[0x3] = {};
    // private UnityEngine.EventSystems.EventSystem _prevEventSystem
    // Size: 0x8
    // Offset: 0xA0
    UnityEngine::EventSystems::EventSystem* prevEventSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::EventSystem*) == 0x8);
    // Creating value type constructor for type: FlowCoordinator
    FlowCoordinator(UnityEngine::EventSystems::BaseInputModule* baseInputModule_ = {}, HMUI::ScreenSystem* screenSystem_ = {}, HMUI::FlowCoordinator* parentFlowCoordinator_ = {}, HMUI::FlowCoordinator* childFlowCoordinator_ = {}, System::Collections::Generic::List_1<HMUI::ViewController*>* mainScreenViewControllers_ = {}, HMUI::ViewController* leftScreenViewController_ = {}, HMUI::ViewController* rightScreenViewController_ = {}, HMUI::ViewController* bottomScreenViewController_ = {}, HMUI::ViewController* topScreenViewController_ = {}, bool wasActivatedBefore_ = {}, ::Il2CppString* title_ = {}, HMUI::ViewController* providedMainViewController_ = {}, HMUI::ViewController* providedLeftScreenViewController_ = {}, HMUI::ViewController* providedRightScreenViewController_ = {}, HMUI::ViewController* providedBottomScreenViewController_ = {}, HMUI::ViewController* providedTopScreenViewController_ = {}, bool viewControllersWereProvided_ = {}, bool isInDidActivatePhase_ = {}, bool isActivated_ = {}, bool isInTransition_ = {}, bool showBackButton_ = {}, UnityEngine::EventSystems::EventSystem* prevEventSystem_ = {}) noexcept : baseInputModule{baseInputModule_}, screenSystem{screenSystem_}, parentFlowCoordinator{parentFlowCoordinator_}, childFlowCoordinator{childFlowCoordinator_}, mainScreenViewControllers{mainScreenViewControllers_}, leftScreenViewController{leftScreenViewController_}, rightScreenViewController{rightScreenViewController_}, bottomScreenViewController{bottomScreenViewController_}, topScreenViewController{topScreenViewController_}, wasActivatedBefore{wasActivatedBefore_}, title{title_}, providedMainViewController{providedMainViewController_}, providedLeftScreenViewController{providedLeftScreenViewController_}, providedRightScreenViewController{providedRightScreenViewController_}, providedBottomScreenViewController{providedBottomScreenViewController_}, providedTopScreenViewController{providedTopScreenViewController_}, viewControllersWereProvided{viewControllersWereProvided_}, isInDidActivatePhase{isInDidActivatePhase_}, isActivated{isActivated_}, isInTransition{isInTransition_}, showBackButton{showBackButton_}, prevEventSystem{prevEventSystem_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public HMUI.ViewController get_topViewController()
    // Offset: 0x1310C98
    HMUI::ViewController* get_topViewController();
    // public HMUI.FlowCoordinator get_childFlowCoordinator()
    // Offset: 0x1310D04
    HMUI::FlowCoordinator* get_childFlowCoordinator();
    // public System.Boolean get_isActivated()
    // Offset: 0x1310D0C
    bool get_isActivated();
    // protected System.String get_title()
    // Offset: 0x1310D14
    ::Il2CppString* get_title();
    // protected System.Void SetTitle(System.String value, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x1310D1C
    void SetTitle(::Il2CppString* value, HMUI::ViewController::AnimationType animationType);
    // protected System.Void set_showBackButton(System.Boolean value)
    // Offset: 0x1310EBC
    void set_showBackButton(bool value);
    // protected System.Boolean get_showBackButton()
    // Offset: 0x1310EC8
    bool get_showBackButton();
    // public System.Void __StartOnScreenSystem(HMUI.ScreenSystem screenSystem)
    // Offset: 0x1310ED0
    void __StartOnScreenSystem(HMUI::ScreenSystem* screenSystem);
    // protected System.Void PresentFlowCoordinator(HMUI.FlowCoordinator flowCoordinator, System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately, System.Boolean replaceTopViewController)
    // Offset: 0x13117E0
    void PresentFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately, bool replaceTopViewController);
    // protected System.Void DismissFlowCoordinator(HMUI.FlowCoordinator flowCoordinator, HMUI.ViewController/AnimationDirection animationDirection, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x1311DFC
    void DismissFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, HMUI::ViewController::AnimationDirection animationDirection, System::Action* finishedCallback, bool immediately);
    // protected System.Void ReplaceChildFlowCoordinator(HMUI.FlowCoordinator flowCoordinator, System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately)
    // Offset: 0x1312104
    void ReplaceChildFlowCoordinator(HMUI::FlowCoordinator* flowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately);
    // protected System.Void PresentViewController(HMUI.ViewController viewController, System.Action finishedCallback, HMUI.ViewController/AnimationDirection animationDirection, System.Boolean immediately)
    // Offset: 0x13114D0
    void PresentViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationDirection animationDirection, bool immediately);
    // protected System.Void DismissViewController(HMUI.ViewController viewController, HMUI.ViewController/AnimationDirection animationDirection, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x1312418
    void DismissViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationDirection animationDirection, System::Action* finishedCallback, bool immediately);
    // protected System.Void ReplaceTopViewController(HMUI.ViewController viewController, System.Action finishedCallback, HMUI.ViewController/AnimationType animationType, HMUI.ViewController/AnimationDirection animationDirection)
    // Offset: 0x13125C8
    void ReplaceTopViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection);
    // private System.Void ReplaceTopViewController(HMUI.ViewController viewController, HMUI.FlowCoordinator originalOwnerFlowCoordinator, HMUI.FlowCoordinator newOwnerFlowCoordinator, System.Action finishedCallback, HMUI.ViewController/AnimationType animationType, HMUI.ViewController/AnimationDirection animationDirection)
    // Offset: 0x1311C68
    void ReplaceTopViewController(HMUI::ViewController* viewController, HMUI::FlowCoordinator* originalOwnerFlowCoordinator, HMUI::FlowCoordinator* newOwnerFlowCoordinator, System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType, HMUI::ViewController::AnimationDirection animationDirection);
    // protected System.Void PushViewControllerToNavigationController(HMUI.NavigationController navigationController, HMUI.ViewController viewController, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x13126B4
    void PushViewControllerToNavigationController(HMUI::NavigationController* navigationController, HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately);
    // protected System.Void SetViewControllersToNavigationController(HMUI.NavigationController navigationController, params HMUI.ViewController[] viewControllers)
    // Offset: 0x13127D8
    void SetViewControllersToNavigationController(HMUI::NavigationController* navigationController, ::Array<HMUI::ViewController*>* viewControllers);
    // Creating initializer_list -> params proxy for: System.Void SetViewControllersToNavigationController(HMUI.NavigationController navigationController, params HMUI.ViewController[] viewControllers)
    void SetViewControllersToNavigationController(HMUI::NavigationController* navigationController, std::initializer_list<HMUI::ViewController*> viewControllers);
    // Creating TArgs -> initializer_list proxy for: System.Void SetViewControllersToNavigationController(HMUI.NavigationController navigationController, params HMUI.ViewController[] viewControllers)
    template<class ...TParams>
    void SetViewControllersToNavigationController(HMUI::NavigationController* navigationController, TParams&&... viewControllers) {
      SetViewControllersToNavigationController(navigationController, {viewControllers...});
    }
    // protected System.Void SetViewControllerToNavigationController(HMUI.NavigationController navigationController, HMUI.ViewController viewController)
    // Offset: 0x13127F4
    void SetViewControllerToNavigationController(HMUI::NavigationController* navigationController, HMUI::ViewController* viewController);
    // protected System.Void PopViewControllerFromNavigationController(HMUI.NavigationController navigationController, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x1312810
    void PopViewControllerFromNavigationController(HMUI::NavigationController* navigationController, System::Action* finishedCallback, bool immediately);
    // protected System.Void PopViewControllersFromNavigationController(HMUI.NavigationController navigationController, System.Int32 numberOfControllers, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x131292C
    void PopViewControllersFromNavigationController(HMUI::NavigationController* navigationController, int numberOfControllers, System::Action* finishedCallback, bool immediately);
    // protected System.Void SetLeftScreenViewController(HMUI.ViewController viewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x13110E0
    void SetLeftScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType);
    // protected System.Void SetRightScreenViewController(HMUI.ViewController viewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x13111DC
    void SetRightScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType);
    // protected System.Void SetBottomScreenViewController(HMUI.ViewController viewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x13112D8
    void SetBottomScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType);
    // protected System.Void SetTopScreenViewController(HMUI.ViewController viewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x13113D4
    void SetTopScreenViewController(HMUI::ViewController* viewController, HMUI::ViewController::AnimationType animationType);
    // private System.Void PresentTitle(System.String title, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x1310E40
    void PresentTitle(::Il2CppString* title, HMUI::ViewController::AnimationType animationType);
    // public System.Boolean IsFlowCoordinatorInHierarchy(HMUI.FlowCoordinator flowCoordinator)
    // Offset: 0x1310D7C
    bool IsFlowCoordinatorInHierarchy(HMUI::FlowCoordinator* flowCoordinator);
    // public HMUI.FlowCoordinator YoungestChildFlowCoordinatorOrSelf()
    // Offset: 0x1312A50
    HMUI::FlowCoordinator* YoungestChildFlowCoordinatorOrSelf();
    // protected System.Void ProvideInitialViewControllers(HMUI.ViewController mainViewController, HMUI.ViewController leftScreenViewController, HMUI.ViewController rightScreenViewController, HMUI.ViewController bottomScreenViewController, HMUI.ViewController topScreenViewController)
    // Offset: 0x1312AE4
    void ProvideInitialViewControllers(HMUI::ViewController* mainViewController, HMUI::ViewController* leftScreenViewController, HMUI::ViewController* rightScreenViewController, HMUI::ViewController* bottomScreenViewController, HMUI::ViewController* topScreenViewController);
    // private System.Void Activate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x131101C
    void Activate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // private System.Void Deactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1311BB0
    void Deactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // public System.Void __ExternalActivate()
    // Offset: 0x1312AFC
    void __ExternalActivate();
    // public System.Void __ExternalDeactivate()
    // Offset: 0x1312D30
    void __ExternalDeactivate();
    // private System.Void HandleScreenSystemBackButtonWasPressed()
    // Offset: 0x1312F74
    void HandleScreenSystemBackButtonWasPressed();
    // protected System.Void SetGlobalUserInteraction(System.Boolean value)
    // Offset: 0x13120E4
    void SetGlobalUserInteraction(bool value);
    // protected System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xFFFFFFFF
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1312FA4
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected System.Void TransitionDidStart()
    // Offset: 0x1312FA8
    void TransitionDidStart();
    // protected System.Void TransitionDidFinish()
    // Offset: 0x1312FB4
    void TransitionDidFinish();
    // protected System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x1312FBC
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected System.Void InitialViewControllerWasPresented()
    // Offset: 0x1312FC0
    void InitialViewControllerWasPresented();
    // protected System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0x1312FC4
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // static private System.Void Log(System.String message)
    // Offset: 0x1312FC8
    static void Log(::Il2CppString* message);
    // protected System.Void .ctor()
    // Offset: 0x1313030
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::FlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlowCoordinator*, creationType>()));
    }
  }; // HMUI.FlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(FlowCoordinator), 160 + sizeof(UnityEngine::EventSystems::EventSystem*)> __HMUI_FlowCoordinatorSizeCheck;
  static_assert(sizeof(FlowCoordinator) == 0xA8);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::FlowCoordinator*, "HMUI", "FlowCoordinator");
// Writing MetadataGetter for method: HMUI::FlowCoordinator::get_topViewController
// Il2CppName: get_topViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::get_topViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "get_topViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::get_childFlowCoordinator
// Il2CppName: get_childFlowCoordinator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::FlowCoordinator* (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::get_childFlowCoordinator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "get_childFlowCoordinator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::get_isActivated
// Il2CppName: get_isActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::get_isActivated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "get_isActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::get_title
// Il2CppName: get_title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::get_title)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "get_title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetTitle
// Il2CppName: SetTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(::Il2CppString*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::SetTitle)> {
  const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::set_showBackButton
// Il2CppName: set_showBackButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(bool)>(&HMUI::FlowCoordinator::set_showBackButton)> {
  const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "set_showBackButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::get_showBackButton
// Il2CppName: get_showBackButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::get_showBackButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "get_showBackButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::__StartOnScreenSystem
// Il2CppName: __StartOnScreenSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ScreenSystem*)>(&HMUI::FlowCoordinator::__StartOnScreenSystem)> {
  const MethodInfo* get() {
    static auto* screenSystem = &::il2cpp_utils::GetClassFromName("HMUI", "ScreenSystem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "__StartOnScreenSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenSystem});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::PresentFlowCoordinator
// Il2CppName: PresentFlowCoordinator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::FlowCoordinator*, System::Action*, HMUI::ViewController::AnimationDirection, bool, bool)>(&HMUI::FlowCoordinator::PresentFlowCoordinator)> {
  const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* replaceTopViewController = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "PresentFlowCoordinator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator, finishedCallback, animationDirection, immediately, replaceTopViewController});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::DismissFlowCoordinator
// Il2CppName: DismissFlowCoordinator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::FlowCoordinator*, HMUI::ViewController::AnimationDirection, System::Action*, bool)>(&HMUI::FlowCoordinator::DismissFlowCoordinator)> {
  const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "DismissFlowCoordinator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator, animationDirection, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::ReplaceChildFlowCoordinator
// Il2CppName: ReplaceChildFlowCoordinator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::FlowCoordinator*, System::Action*, HMUI::ViewController::AnimationDirection, bool)>(&HMUI::FlowCoordinator::ReplaceChildFlowCoordinator)> {
  const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "ReplaceChildFlowCoordinator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator, finishedCallback, animationDirection, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::PresentViewController
// Il2CppName: PresentViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, System::Action*, HMUI::ViewController::AnimationDirection, bool)>(&HMUI::FlowCoordinator::PresentViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "PresentViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, finishedCallback, animationDirection, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::DismissViewController
// Il2CppName: DismissViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController::AnimationDirection, System::Action*, bool)>(&HMUI::FlowCoordinator::DismissViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "DismissViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, animationDirection, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::ReplaceTopViewController
// Il2CppName: ReplaceTopViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, System::Action*, HMUI::ViewController::AnimationType, HMUI::ViewController::AnimationDirection)>(&HMUI::FlowCoordinator::ReplaceTopViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "ReplaceTopViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, finishedCallback, animationType, animationDirection});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::ReplaceTopViewController
// Il2CppName: ReplaceTopViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::FlowCoordinator*, HMUI::FlowCoordinator*, System::Action*, HMUI::ViewController::AnimationType, HMUI::ViewController::AnimationDirection)>(&HMUI::FlowCoordinator::ReplaceTopViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* originalOwnerFlowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    static auto* newOwnerFlowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    static auto* animationDirection = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "ReplaceTopViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, originalOwnerFlowCoordinator, newOwnerFlowCoordinator, finishedCallback, animationType, animationDirection});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::PushViewControllerToNavigationController
// Il2CppName: PushViewControllerToNavigationController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::NavigationController*, HMUI::ViewController*, System::Action*, bool)>(&HMUI::FlowCoordinator::PushViewControllerToNavigationController)> {
  const MethodInfo* get() {
    static auto* navigationController = &::il2cpp_utils::GetClassFromName("HMUI", "NavigationController")->byval_arg;
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "PushViewControllerToNavigationController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navigationController, viewController, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetViewControllersToNavigationController
// Il2CppName: SetViewControllersToNavigationController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::NavigationController*, ::Array<HMUI::ViewController*>*)>(&HMUI::FlowCoordinator::SetViewControllersToNavigationController)> {
  const MethodInfo* get() {
    static auto* navigationController = &::il2cpp_utils::GetClassFromName("HMUI", "NavigationController")->byval_arg;
    static auto* viewControllers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HMUI", "ViewController"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetViewControllersToNavigationController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navigationController, viewControllers});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetViewControllerToNavigationController
// Il2CppName: SetViewControllerToNavigationController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::NavigationController*, HMUI::ViewController*)>(&HMUI::FlowCoordinator::SetViewControllerToNavigationController)> {
  const MethodInfo* get() {
    static auto* navigationController = &::il2cpp_utils::GetClassFromName("HMUI", "NavigationController")->byval_arg;
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetViewControllerToNavigationController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navigationController, viewController});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::PopViewControllerFromNavigationController
// Il2CppName: PopViewControllerFromNavigationController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::NavigationController*, System::Action*, bool)>(&HMUI::FlowCoordinator::PopViewControllerFromNavigationController)> {
  const MethodInfo* get() {
    static auto* navigationController = &::il2cpp_utils::GetClassFromName("HMUI", "NavigationController")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "PopViewControllerFromNavigationController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navigationController, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::PopViewControllersFromNavigationController
// Il2CppName: PopViewControllersFromNavigationController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::NavigationController*, int, System::Action*, bool)>(&HMUI::FlowCoordinator::PopViewControllersFromNavigationController)> {
  const MethodInfo* get() {
    static auto* navigationController = &::il2cpp_utils::GetClassFromName("HMUI", "NavigationController")->byval_arg;
    static auto* numberOfControllers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* finishedCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* immediately = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "PopViewControllersFromNavigationController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navigationController, numberOfControllers, finishedCallback, immediately});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetLeftScreenViewController
// Il2CppName: SetLeftScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::SetLeftScreenViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetLeftScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetRightScreenViewController
// Il2CppName: SetRightScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::SetRightScreenViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetRightScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetBottomScreenViewController
// Il2CppName: SetBottomScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::SetBottomScreenViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetBottomScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetTopScreenViewController
// Il2CppName: SetTopScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::SetTopScreenViewController)> {
  const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetTopScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::PresentTitle
// Il2CppName: PresentTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(::Il2CppString*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::PresentTitle)> {
  const MethodInfo* get() {
    static auto* title = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "PresentTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{title, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy
// Il2CppName: IsFlowCoordinatorInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMUI::FlowCoordinator::*)(HMUI::FlowCoordinator*)>(&HMUI::FlowCoordinator::IsFlowCoordinatorInHierarchy)> {
  const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "IsFlowCoordinatorInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf
// Il2CppName: YoungestChildFlowCoordinatorOrSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::FlowCoordinator* (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::YoungestChildFlowCoordinatorOrSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "YoungestChildFlowCoordinatorOrSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::ProvideInitialViewControllers
// Il2CppName: ProvideInitialViewControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController*)>(&HMUI::FlowCoordinator::ProvideInitialViewControllers)> {
  const MethodInfo* get() {
    static auto* mainViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* leftScreenViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* rightScreenViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* bottomScreenViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* topScreenViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "ProvideInitialViewControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainViewController, leftScreenViewController, rightScreenViewController, bottomScreenViewController, topScreenViewController});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(bool, bool, bool)>(&HMUI::FlowCoordinator::Activate)> {
  const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(bool, bool)>(&HMUI::FlowCoordinator::Deactivate)> {
  const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::__ExternalActivate
// Il2CppName: __ExternalActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::__ExternalActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "__ExternalActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::__ExternalDeactivate
// Il2CppName: __ExternalDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::__ExternalDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "__ExternalDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed
// Il2CppName: HandleScreenSystemBackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::HandleScreenSystemBackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "HandleScreenSystemBackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::SetGlobalUserInteraction
// Il2CppName: SetGlobalUserInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(bool)>(&HMUI::FlowCoordinator::SetGlobalUserInteraction)> {
  const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "SetGlobalUserInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(bool, bool, bool)>(&HMUI::FlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(bool, bool)>(&HMUI::FlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::TransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::TransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HMUI::FlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    static auto* oldViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* newViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldViewController, newViewController, animationType});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::InitialViewControllerWasPresented
// Il2CppName: InitialViewControllerWasPresented
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)()>(&HMUI::FlowCoordinator::InitialViewControllerWasPresented)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "InitialViewControllerWasPresented", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::FlowCoordinator::*)(HMUI::ViewController*)>(&HMUI::FlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    static auto* topViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topViewController});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&HMUI::FlowCoordinator::Log)> {
  const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HMUI::FlowCoordinator*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: HMUI::FlowCoordinator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
