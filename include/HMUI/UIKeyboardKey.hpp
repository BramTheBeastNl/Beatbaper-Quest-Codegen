// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.UIKeyboardKey
  class UIKeyboardKey : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.KeyCode _keyCode
    // Size: 0x4
    // Offset: 0x18
    UnityEngine::KeyCode keyCode;
    // Field size check
    static_assert(sizeof(UnityEngine::KeyCode) == 0x4);
    // Padding between fields: keyCode and: text
    char __padding0[0x4] = {};
    // private TMPro.TextMeshProUGUI _text
    // Size: 0x8
    // Offset: 0x20
    TMPro::TextMeshProUGUI* text;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private System.String _overrideText
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* overrideText;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: UIKeyboardKey
    UIKeyboardKey(UnityEngine::KeyCode keyCode_ = {}, TMPro::TextMeshProUGUI* text_ = {}, ::Il2CppString* overrideText_ = {}) noexcept : keyCode{keyCode_}, text{text_}, overrideText{overrideText_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public UnityEngine.KeyCode get_keyCode()
    // Offset: 0x12C2594
    UnityEngine::KeyCode get_keyCode();
    // protected System.Void Awake()
    // Offset: 0x12C259C
    void Awake();
    // protected System.Void OnValidate()
    // Offset: 0x12C2660
    void OnValidate();
    // public System.Void .ctor()
    // Offset: 0x12C275C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UIKeyboardKey* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::UIKeyboardKey::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UIKeyboardKey*, creationType>()));
    }
  }; // HMUI.UIKeyboardKey
  #pragma pack(pop)
  static check_size<sizeof(UIKeyboardKey), 40 + sizeof(::Il2CppString*)> __HMUI_UIKeyboardKeySizeCheck;
  static_assert(sizeof(UIKeyboardKey) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::UIKeyboardKey*, "HMUI", "UIKeyboardKey");
// Writing MetadataGetter for method: HMUI::UIKeyboardKey::get_keyCode
// Il2CppName: get_keyCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::KeyCode (HMUI::UIKeyboardKey::*)()>(&HMUI::UIKeyboardKey::get_keyCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboardKey*), "get_keyCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboardKey::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboardKey::*)()>(&HMUI::UIKeyboardKey::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboardKey*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboardKey::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMUI::UIKeyboardKey::*)()>(&HMUI::UIKeyboardKey::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMUI::UIKeyboardKey*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMUI::UIKeyboardKey::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
