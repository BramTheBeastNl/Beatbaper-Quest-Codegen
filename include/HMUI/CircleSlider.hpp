// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IInitializePotentialDragHandler
#include "UnityEngine/EventSystems/IInitializePotentialDragHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.DrivenRectTransformTracker
#include "UnityEngine/DrivenRectTransformTracker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // WARNING Size may be invalid!
  // Autogenerated type: HMUI.CircleSlider
  // [RequireComponent] Offset: DF7694
  class CircleSlider : public UnityEngine::UI::Selectable/*, public UnityEngine::EventSystems::IBeginDragHandler, public UnityEngine::EventSystems::IDragHandler, public UnityEngine::EventSystems::IInitializePotentialDragHandler, public UnityEngine::UI::ICanvasElement*/ {
    public:
    // private UnityEngine.RectTransform _handleRect
    // Size: 0x8
    // Offset: 0xF8
    UnityEngine::RectTransform* handleRect;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // [SpaceAttribute] Offset: 0xDF86A0
    // private System.Single _cursorRadius
    // Size: 0x4
    // Offset: 0x100
    float cursorRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _normalizedValue
    // Size: 0x4
    // Offset: 0x104
    float normalizedValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xDF86E8
    // private System.Action`2<HMUI.CircleSlider,System.Single> normalizedValueDidChangeEvent
    // Size: 0x8
    // Offset: 0x108
    System::Action_2<HMUI::CircleSlider*, float>* normalizedValueDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<HMUI::CircleSlider*, float>*) == 0x8);
    // private UnityEngine.RectTransform _containerRect
    // Size: 0x8
    // Offset: 0x110
    UnityEngine::RectTransform* containerRect;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.UI.Graphic _handleGraphic
    // Size: 0x8
    // Offset: 0x118
    UnityEngine::UI::Graphic* handleGraphic;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Graphic*) == 0x8);
    // private UnityEngine.DrivenRectTransformTracker _tracker
    // Size: 0x1
    // Offset: 0x120
    UnityEngine::DrivenRectTransformTracker tracker;
    // Field size check
    static_assert(sizeof(UnityEngine::DrivenRectTransformTracker) == 0x1);
    // Creating value type constructor for type: CircleSlider
    CircleSlider(UnityEngine::RectTransform* handleRect_ = {}, float cursorRadius_ = {}, float normalizedValue_ = {}, System::Action_2<HMUI::CircleSlider*, float>* normalizedValueDidChangeEvent_ = {}, UnityEngine::RectTransform* containerRect_ = {}, UnityEngine::UI::Graphic* handleGraphic_ = {}, UnityEngine::DrivenRectTransformTracker tracker_ = {}) noexcept : handleRect{handleRect_}, cursorRadius{cursorRadius_}, normalizedValue{normalizedValue_}, normalizedValueDidChangeEvent{normalizedValueDidChangeEvent_}, containerRect{containerRect_}, handleGraphic{handleGraphic_}, tracker{tracker_} {}
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IBeginDragHandler
    operator UnityEngine::EventSystems::IBeginDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IDragHandler
    operator UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IInitializePotentialDragHandler
    operator UnityEngine::EventSystems::IInitializePotentialDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IInitializePotentialDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // public UnityEngine.RectTransform get_handleRect()
    // Offset: 0x130C0D0
    UnityEngine::RectTransform* get_handleRect();
    // public System.Void set_handleRect(UnityEngine.RectTransform value)
    // Offset: 0x130C0D8
    void set_handleRect(UnityEngine::RectTransform* value);
    // public System.Void set_handleColor(UnityEngine.Color value)
    // Offset: 0x130C2B0
    void set_handleColor(UnityEngine::Color value);
    // public System.Single get_normalizedValue()
    // Offset: 0x130C384
    float get_normalizedValue();
    // public System.Void set_normalizedValue(System.Single value)
    // Offset: 0x130C38C
    void set_normalizedValue(float value);
    // public System.Void add_normalizedValueDidChangeEvent(System.Action`2<HMUI.CircleSlider,System.Single> value)
    // Offset: 0x130C470
    void add_normalizedValueDidChangeEvent(System::Action_2<HMUI::CircleSlider*, float>* value);
    // public System.Void remove_normalizedValueDidChangeEvent(System.Action`2<HMUI.CircleSlider,System.Single> value)
    // Offset: 0x130C518
    void remove_normalizedValueDidChangeEvent(System::Action_2<HMUI::CircleSlider*, float>* value);
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)
    // Offset: 0x130C5C0
    void Rebuild(UnityEngine::UI::CanvasUpdate executing);
    // public System.Void LayoutComplete()
    // Offset: 0x130C5C4
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x130C5C8
    void GraphicUpdateComplete();
    // private System.Void UpdateCachedReferences()
    // Offset: 0x130C168
    void UpdateCachedReferences();
    // private System.Void SetNormalizedValue(System.Single input)
    // Offset: 0x130C648
    void SetNormalizedValue(float input);
    // private System.Void SetNormalizedValue(System.Single input, System.Boolean sendCallback)
    // Offset: 0x130C394
    void SetNormalizedValue(float input, bool sendCallback);
    // protected System.Void UpdateVisuals()
    // Offset: 0x130C6A4
    void UpdateVisuals();
    // private System.Void UpdateDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x130C8A8
    void UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x130CA40
    bool MayDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x130CAA8
    void OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x130CB44
    void OnDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x130CCAC
    void OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x130CD34
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // protected override System.Void OnEnable()
    // Offset: 0x130C5CC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x130C618
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x130C650
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x130CBF0
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void .ctor()
    // Offset: 0x130CCC4
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CircleSlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::CircleSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CircleSlider*, creationType>()));
    }
  }; // HMUI.CircleSlider
  // WARNING Not writing size check since size may be invalid!
  // Writing MetadataGetter for method: CircleSlider::get_handleRect
  // Il2CppName: get_handleRect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (CircleSlider::*)()>(&CircleSlider::get_handleRect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "get_handleRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::set_handleRect
  // Il2CppName: set_handleRect
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::RectTransform*)>(&CircleSlider::set_handleRect)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "set_handleRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RectTransform*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::set_handleColor
  // Il2CppName: set_handleColor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::Color)>(&CircleSlider::set_handleColor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "set_handleColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::get_normalizedValue
  // Il2CppName: get_normalizedValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CircleSlider::*)()>(&CircleSlider::get_normalizedValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "get_normalizedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::set_normalizedValue
  // Il2CppName: set_normalizedValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(float)>(&CircleSlider::set_normalizedValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "set_normalizedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::add_normalizedValueDidChangeEvent
  // Il2CppName: add_normalizedValueDidChangeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(System::Action_2<HMUI::CircleSlider*, float>*)>(&CircleSlider::add_normalizedValueDidChangeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "add_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<HMUI::CircleSlider*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::remove_normalizedValueDidChangeEvent
  // Il2CppName: remove_normalizedValueDidChangeEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(System::Action_2<HMUI::CircleSlider*, float>*)>(&CircleSlider::remove_normalizedValueDidChangeEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "remove_normalizedValueDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<HMUI::CircleSlider*, float>*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::Rebuild
  // Il2CppName: Rebuild
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::UI::CanvasUpdate)>(&CircleSlider::Rebuild)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::LayoutComplete
  // Il2CppName: LayoutComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::LayoutComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::GraphicUpdateComplete
  // Il2CppName: GraphicUpdateComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::GraphicUpdateComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::UpdateCachedReferences
  // Il2CppName: UpdateCachedReferences
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::UpdateCachedReferences)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "UpdateCachedReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::SetNormalizedValue
  // Il2CppName: SetNormalizedValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(float)>(&CircleSlider::SetNormalizedValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "SetNormalizedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::SetNormalizedValue
  // Il2CppName: SetNormalizedValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(float, bool)>(&CircleSlider::SetNormalizedValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "SetNormalizedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::UpdateVisuals
  // Il2CppName: UpdateVisuals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::UpdateVisuals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "UpdateVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::UpdateDrag
  // Il2CppName: UpdateDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&CircleSlider::UpdateDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "UpdateDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::MayDrag
  // Il2CppName: MayDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CircleSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&CircleSlider::MayDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "MayDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnBeginDrag
  // Il2CppName: OnBeginDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&CircleSlider::OnBeginDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnBeginDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnDrag
  // Il2CppName: OnDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&CircleSlider::OnDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnInitializePotentialDrag
  // Il2CppName: OnInitializePotentialDrag
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&CircleSlider::OnInitializePotentialDrag)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnInitializePotentialDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::UnityEngine_UI_ICanvasElement_get_transform
  // Il2CppName: UnityEngine.UI.ICanvasElement.get_transform
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (CircleSlider::*)()>(&CircleSlider::UnityEngine_UI_ICanvasElement_get_transform)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnEnable
  // Il2CppName: OnEnable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::OnEnable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnDisable
  // Il2CppName: OnDisable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::OnDisable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnRectTransformDimensionsChange
  // Il2CppName: OnRectTransformDimensionsChange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::OnRectTransformDimensionsChange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::OnPointerDown
  // Il2CppName: OnPointerDown
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)(UnityEngine::EventSystems::PointerEventData*)>(&CircleSlider::OnPointerDown)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
    }
  };
  // Writing MetadataGetter for method: CircleSlider::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CircleSlider::*)()>(&CircleSlider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(CircleSlider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::CircleSlider*, "HMUI", "CircleSlider");
