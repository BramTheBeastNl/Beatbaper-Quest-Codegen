// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OnlineServices.API.Response
#include "OnlineServices/API/Response.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: OnlineServices.API
namespace OnlineServices::API {
  // Forward declaring type: ApiResponse`1<T>
  template<typename T>
  struct ApiResponse_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::OnlineServices::API::ApiResponse_1, "OnlineServices.API", "ApiResponse`1");
// Type namespace: OnlineServices.API
namespace OnlineServices::API {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OnlineServices.API.ApiResponse`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  template<typename T>
  struct ApiResponse_1/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly OnlineServices.API.Response response
    // Size: 0x4
    // Offset: 0x0
    ::OnlineServices::API::Response response;
    // Field size check
    static_assert(sizeof(::OnlineServices::API::Response) == 0x4);
    // public readonly T responseDto
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T responseDto;
    public:
    // Creating value type constructor for type: ApiResponse_1
    constexpr ApiResponse_1(::OnlineServices::API::Response response_ = {}, T responseDto_ = {}) noexcept : response{response_}, responseDto{responseDto_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: public readonly OnlineServices.API.Response response
    [[deprecated("Use field access instead!")]] ::OnlineServices::API::Response& dyn_response() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OnlineServices::API::ApiResponse_1::dyn_response");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "response"))->offset;
      return *reinterpret_cast<::OnlineServices::API::Response*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public readonly T responseDto
    [[deprecated("Use field access instead!")]] T& dyn_responseDto() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OnlineServices::API::ApiResponse_1::dyn_responseDto");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "responseDto"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean get_isError()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isError() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OnlineServices::API::ApiResponse_1::get_isError");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_isError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor(OnlineServices.API.Response response, T responseDto)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  ApiResponse_1(::OnlineServices::API::Response response, T responseDto)
  }; // OnlineServices.API.ApiResponse`1
  // Could not write size check! Type: OnlineServices.API.ApiResponse`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
