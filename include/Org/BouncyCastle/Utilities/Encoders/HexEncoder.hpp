// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Utilities.Encoders
namespace Org::BouncyCastle::Utilities::Encoders {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Utilities.Encoders.HexEncoder
  class HexEncoder : public ::Il2CppObject {
    public:
    // protected readonly System.Byte[] encodingTable
    // Size: 0x8
    // Offset: 0x10
    ::Array<uint8_t>* encodingTable;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // protected readonly System.Byte[] decodingTable
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint8_t>* decodingTable;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: HexEncoder
    HexEncoder(::Array<uint8_t>* encodingTable_ = {}, ::Array<uint8_t>* decodingTable_ = {}) noexcept : encodingTable{encodingTable_}, decodingTable{decodingTable_} {}
    // protected System.Void InitialiseDecodingTable()
    // Offset: 0x1F8ADC0
    void InitialiseDecodingTable();
    // public System.Int32 Encode(System.Byte[] inBuf, System.Int32 inOff, System.Int32 inLen, System.Byte[] outBuf, System.Int32 outOff)
    // Offset: 0x1F8AF3C
    int Encode(::Array<uint8_t>* inBuf, int inOff, int inLen, ::Array<uint8_t>* outBuf, int outOff);
    // public System.Int32 Encode(System.Byte[] buf, System.Int32 off, System.Int32 len, System.IO.Stream outStream)
    // Offset: 0x1F8A50C
    int Encode(::Array<uint8_t>* buf, int off, int len, System::IO::Stream* outStream);
    // static private System.Boolean Ignore(System.Char c)
    // Offset: 0x1F8B020
    static bool Ignore(::Il2CppChar c);
    // public System.Int32 DecodeString(System.String data, System.IO.Stream outStream)
    // Offset: 0x1F8A6F4
    int DecodeString(::Il2CppString* data, System::IO::Stream* outStream);
    // System.Byte[] DecodeStrict(System.String str, System.Int32 off, System.Int32 len)
    // Offset: 0x1F8AA94
    ::Array<uint8_t>* DecodeStrict(::Il2CppString* str, int off, int len);
    // public System.Void .ctor()
    // Offset: 0x1F8AD28
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HexEncoder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Utilities::Encoders::HexEncoder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HexEncoder*, creationType>()));
    }
  }; // Org.BouncyCastle.Utilities.Encoders.HexEncoder
  #pragma pack(pop)
  static check_size<sizeof(HexEncoder), 24 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Utilities_Encoders_HexEncoderSizeCheck;
  static_assert(sizeof(HexEncoder) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Utilities::Encoders::HexEncoder*, "Org.BouncyCastle.Utilities.Encoders", "HexEncoder");
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::InitialiseDecodingTable
// Il2CppName: InitialiseDecodingTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Org::BouncyCastle::Utilities::Encoders::HexEncoder::*)()>(&Org::BouncyCastle::Utilities::Encoders::HexEncoder::InitialiseDecodingTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Encoders::HexEncoder*), "InitialiseDecodingTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Org::BouncyCastle::Utilities::Encoders::HexEncoder::*)(::Array<uint8_t>*, int, int, ::Array<uint8_t>*, int)>(&Org::BouncyCastle::Utilities::Encoders::HexEncoder::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Encoders::HexEncoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Org::BouncyCastle::Utilities::Encoders::HexEncoder::*)(::Array<uint8_t>*, int, int, System::IO::Stream*)>(&Org::BouncyCastle::Utilities::Encoders::HexEncoder::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Encoders::HexEncoder*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::Ignore
// Il2CppName: Ignore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&Org::BouncyCastle::Utilities::Encoders::HexEncoder::Ignore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Encoders::HexEncoder*), "Ignore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::DecodeString
// Il2CppName: DecodeString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Org::BouncyCastle::Utilities::Encoders::HexEncoder::*)(::Il2CppString*, System::IO::Stream*)>(&Org::BouncyCastle::Utilities::Encoders::HexEncoder::DecodeString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Encoders::HexEncoder*), "DecodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::DecodeStrict
// Il2CppName: DecodeStrict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (Org::BouncyCastle::Utilities::Encoders::HexEncoder::*)(::Il2CppString*, int, int)>(&Org::BouncyCastle::Utilities::Encoders::HexEncoder::DecodeStrict)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Encoders::HexEncoder*), "DecodeStrict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Encoders::HexEncoder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
