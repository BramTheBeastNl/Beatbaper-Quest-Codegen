// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Utilities::Encoders
namespace Org::BouncyCastle::Utilities::Encoders {
  // Forward declaring type: HexEncoder
  class HexEncoder;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Utilities.Encoders
namespace Org::BouncyCastle::Utilities::Encoders {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Utilities.Encoders.Hex
  class Hex : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Hex
    Hex() noexcept {}
    // Get static field: static private readonly Org.BouncyCastle.Utilities.Encoders.HexEncoder encoder
    static Org::BouncyCastle::Utilities::Encoders::HexEncoder* _get_encoder();
    // Set static field: static private readonly Org.BouncyCastle.Utilities.Encoders.HexEncoder encoder
    static void _set_encoder(Org::BouncyCastle::Utilities::Encoders::HexEncoder* value);
    // static public System.String ToHexString(System.Byte[] data)
    // Offset: 0x1F8A2FC
    static ::Il2CppString* ToHexString(::Array<uint8_t>* data);
    // static public System.String ToHexString(System.Byte[] data, System.Int32 off, System.Int32 length)
    // Offset: 0x1F8A370
    static ::Il2CppString* ToHexString(::Array<uint8_t>* data, int off, int length);
    // static public System.Byte[] Encode(System.Byte[] data, System.Int32 off, System.Int32 length)
    // Offset: 0x1F8A3F0
    static ::Array<uint8_t>* Encode(::Array<uint8_t>* data, int off, int length);
    // static public System.Byte[] Decode(System.String data)
    // Offset: 0x1F8A620
    static ::Array<uint8_t>* Decode(::Il2CppString* data);
    // static public System.Byte[] DecodeStrict(System.String str)
    // Offset: 0x1F8AA10
    static ::Array<uint8_t>* DecodeStrict(::Il2CppString* str);
    // static private System.Void .cctor()
    // Offset: 0x1F8ACC0
    static void _cctor();
  }; // Org.BouncyCastle.Utilities.Encoders.Hex
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Utilities::Encoders::Hex*, "Org.BouncyCastle.Utilities.Encoders", "Hex");
// Writing MetadataGetter for method: Hex::ToHexString
// Il2CppName: ToHexString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<uint8_t>*)>(&Hex::ToHexString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hex*), "ToHexString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: Hex::ToHexString
// Il2CppName: ToHexString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<uint8_t>*, int, int)>(&Hex::ToHexString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hex*), "ToHexString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Hex::Encode
// Il2CppName: Encode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, int, int)>(&Hex::Encode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hex*), "Encode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Hex::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Il2CppString*)>(&Hex::Decode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hex*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Hex::DecodeStrict
// Il2CppName: DecodeStrict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Il2CppString*)>(&Hex::DecodeStrict)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hex*), "DecodeStrict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Hex::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Hex::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Hex*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
