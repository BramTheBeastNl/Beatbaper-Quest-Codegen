// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Enum
  class Enum;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Utilities
namespace Org::BouncyCastle::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Utilities.Enums
  class Enums : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Enums
    Enums() noexcept {}
    // static System.Enum GetEnumValue(System.Type enumType, System.String s)
    // Offset: 0x1F8B058
    static System::Enum* GetEnumValue(System::Type* enumType, ::Il2CppString* s);
    // static System.Array GetEnumValues(System.Type enumType)
    // Offset: 0x1F8B250
    static System::Array* GetEnumValues(System::Type* enumType);
    // static System.Enum GetArbitraryValue(System.Type enumType)
    // Offset: 0x1F8B320
    static System::Enum* GetArbitraryValue(System::Type* enumType);
    // static System.Boolean IsEnumType(System.Type t)
    // Offset: 0x1F8B230
    static bool IsEnumType(System::Type* t);
  }; // Org.BouncyCastle.Utilities.Enums
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Utilities::Enums*, "Org.BouncyCastle.Utilities", "Enums");
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Enums::GetEnumValue
// Il2CppName: GetEnumValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Enum* (*)(System::Type*, ::Il2CppString*)>(&Org::BouncyCastle::Utilities::Enums::GetEnumValue)> {
  const MethodInfo* get() {
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Enums*), "GetEnumValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumType, s});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Enums::GetEnumValues
// Il2CppName: GetEnumValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (*)(System::Type*)>(&Org::BouncyCastle::Utilities::Enums::GetEnumValues)> {
  const MethodInfo* get() {
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Enums*), "GetEnumValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumType});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Enums::GetArbitraryValue
// Il2CppName: GetArbitraryValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Enum* (*)(System::Type*)>(&Org::BouncyCastle::Utilities::Enums::GetArbitraryValue)> {
  const MethodInfo* get() {
    static auto* enumType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Enums*), "GetArbitraryValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enumType});
  }
};
// Writing MetadataGetter for method: Org::BouncyCastle::Utilities::Enums::IsEnumType
// Il2CppName: IsEnumType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*)>(&Org::BouncyCastle::Utilities::Enums::IsEnumType)> {
  const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Org::BouncyCastle::Utilities::Enums*), "IsEnumType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
