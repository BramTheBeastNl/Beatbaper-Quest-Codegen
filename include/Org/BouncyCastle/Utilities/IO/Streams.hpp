// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: MemoryStream
  class MemoryStream;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Utilities.IO
namespace Org::BouncyCastle::Utilities::IO {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Utilities.IO.Streams
  class Streams : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Streams
    Streams() noexcept {}
    // static public System.Byte[] ReadAll(System.IO.Stream inStr)
    // Offset: 0x1F8C6CC
    static ::Array<uint8_t>* ReadAll(System::IO::Stream* inStr);
    // static public System.Int32 ReadFully(System.IO.Stream inStr, System.Byte[] buf)
    // Offset: 0x1F8C834
    static int ReadFully(System::IO::Stream* inStr, ::Array<uint8_t>* buf);
    // static public System.Int32 ReadFully(System.IO.Stream inStr, System.Byte[] buf, System.Int32 off, System.Int32 len)
    // Offset: 0x1F8C850
    static int ReadFully(System::IO::Stream* inStr, ::Array<uint8_t>* buf, int off, int len);
    // static public System.Void PipeAll(System.IO.Stream inStr, System.IO.Stream outStr)
    // Offset: 0x1F8C74C
    static void PipeAll(System::IO::Stream* inStr, System::IO::Stream* outStr);
    // static public System.Int32 WriteBufTo(System.IO.MemoryStream buf, System.Byte[] output, System.Int32 offset)
    // Offset: 0x1F8C8DC
    static int WriteBufTo(System::IO::MemoryStream* buf, ::Array<uint8_t>* output, int offset);
  }; // Org.BouncyCastle.Utilities.IO.Streams
  #pragma pack(pop)
  // Writing MetadataGetter for method: Streams::ReadAll
  // Il2CppName: ReadAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(System::IO::Stream*)>(&Streams::ReadAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Streams*), "ReadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
    }
  };
  // Writing MetadataGetter for method: Streams::ReadFully
  // Il2CppName: ReadFully
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IO::Stream*, ::Array<uint8_t>*)>(&Streams::ReadFully)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Streams*), "ReadFully", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: Streams::ReadFully
  // Il2CppName: ReadFully
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IO::Stream*, ::Array<uint8_t>*, int, int)>(&Streams::ReadFully)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Streams*), "ReadFully", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Streams::PipeAll
  // Il2CppName: PipeAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IO::Stream*, System::IO::Stream*)>(&Streams::PipeAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Streams*), "PipeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
    }
  };
  // Writing MetadataGetter for method: Streams::WriteBufTo
  // Il2CppName: WriteBufTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IO::MemoryStream*, ::Array<uint8_t>*, int)>(&Streams::WriteBufTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Streams*), "WriteBufTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::MemoryStream*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Utilities::IO::Streams*, "Org.BouncyCastle.Utilities.IO", "Streams");
