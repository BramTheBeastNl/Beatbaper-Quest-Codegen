// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.Raw
namespace Org::BouncyCastle::Math::Raw {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.Raw.Nat
  class Nat : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Nat
    Nat() noexcept {}
    // static public System.UInt32 Add(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x1335CD0
    static uint Add(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.UInt32 Add33To(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x1335D70
    static uint Add33To(int len, uint x, ::Array<uint>* z);
    // static public System.UInt32 AddBothTo(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x1335E4C
    static uint AddBothTo(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.UInt32 AddTo(System.Int32 len, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x1335EF4
    static uint AddTo(int len, ::Array<uint>* x, ::Array<uint>* z);
    // static public System.UInt32 AddTo(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x1335F80
    static uint AddTo(int len, ::Array<uint>* x, int xOff, ::Array<uint>* z, int zOff);
    // static public System.UInt32 AddWordAt(System.Int32 len, System.UInt32 x, System.UInt32[] z, System.Int32 zPos)
    // Offset: 0x1336028
    static uint AddWordAt(int len, uint x, ::Array<uint>* z, int zPos);
    // static public System.UInt32 AddWordTo(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x1336088
    static uint AddWordTo(int len, uint x, ::Array<uint>* z);
    // static public System.UInt32 CAdd(System.Int32 len, System.Int32 mask, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x13360E0
    static uint CAdd(int len, int mask, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.Int32 Compare(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x133618C
    static int Compare(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32[] Copy(System.Int32 len, System.UInt32[] x)
    // Offset: 0x1336208
    static ::Array<uint>* Copy(int len, ::Array<uint>* x);
    // static public System.Void Copy(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x133628C
    static void Copy(int len, ::Array<uint>* x, int xOff, ::Array<uint>* z, int zOff);
    // static public System.UInt32[] Create(System.Int32 len)
    // Offset: 0x13362AC
    static ::Array<uint>* Create(int len);
    // static public System.UInt64[] Create64(System.Int32 len)
    // Offset: 0x13362FC
    static ::Array<uint64_t>* Create64(int len);
    // static public System.Int32 Dec(System.Int32 len, System.UInt32[] z)
    // Offset: 0x133634C
    static int Dec(int len, ::Array<uint>* z);
    // static public System.Int32 DecAt(System.Int32 len, System.UInt32[] z, System.Int32 zPos)
    // Offset: 0x13363B4
    static int DecAt(int len, ::Array<uint>* z, int zPos);
    // static public System.Boolean Eq(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x1336420
    static bool Eq(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32[] FromBigInteger(System.Int32 bits, Org.BouncyCastle.Math.BigInteger x)
    // Offset: 0x1336490
    static ::Array<uint>* FromBigInteger(int bits, Org::BouncyCastle::Math::BigInteger* x);
    // static public System.UInt64[] FromBigInteger64(System.Int32 bits, Org.BouncyCastle.Math.BigInteger x)
    // Offset: 0x13365A0
    static ::Array<uint64_t>* FromBigInteger64(int bits, Org::BouncyCastle::Math::BigInteger* x);
    // static public System.UInt32 GetBit(System.UInt32[] x, System.Int32 bit)
    // Offset: 0x13366B0
    static uint GetBit(::Array<uint>* x, int bit);
    // static public System.Boolean Gte(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x1336720
    static bool Gte(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32 Inc(System.Int32 len, System.UInt32[] z)
    // Offset: 0x1336794
    static uint Inc(int len, ::Array<uint>* z);
    // static public System.UInt32 Inc(System.Int32 len, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x13367FC
    static uint Inc(int len, ::Array<uint>* x, ::Array<uint>* z);
    // static public System.UInt32 IncAt(System.Int32 len, System.UInt32[] z, System.Int32 zPos)
    // Offset: 0x1335DE0
    static uint IncAt(int len, ::Array<uint>* z, int zPos);
    // static public System.UInt32 IncAt(System.Int32 len, System.UInt32[] z, System.Int32 zOff, System.Int32 zPos)
    // Offset: 0x13368BC
    static uint IncAt(int len, ::Array<uint>* z, int zOff, int zPos);
    // static public System.Boolean IsOne(System.Int32 len, System.UInt32[] x)
    // Offset: 0x1336930
    static bool IsOne(int len, ::Array<uint>* x);
    // static public System.Boolean IsZero(System.Int32 len, System.UInt32[] x)
    // Offset: 0x13369A4
    static bool IsZero(int len, ::Array<uint>* x);
    // static public System.Int32 LessThan(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x1336A14
    static int LessThan(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32 MulAddTo(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] zz)
    // Offset: 0x1336A9C
    static uint MulAddTo(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* zz);
    // static public System.UInt32 Mul31BothAdd(System.Int32 len, System.UInt32 a, System.UInt32[] x, System.UInt32 b, System.UInt32[] y, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x1336C24
    static uint Mul31BothAdd(int len, uint a, ::Array<uint>* x, uint b, ::Array<uint>* y, ::Array<uint>* z, int zOff);
    // static public System.UInt32 MulWordAddTo(System.Int32 len, System.UInt32 x, System.UInt32[] y, System.Int32 yOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x1336B88
    static uint MulWordAddTo(int len, uint x, ::Array<uint>* y, int yOff, ::Array<uint>* z, int zOff);
    // static public System.UInt32 ShiftDownBit(System.Int32 len, System.UInt32[] z, System.UInt32 c)
    // Offset: 0x1336CDC
    static uint ShiftDownBit(int len, ::Array<uint>* z, uint c);
    // static public System.UInt32 ShiftDownBits(System.Int32 len, System.UInt32[] z, System.Int32 bits, System.UInt32 c)
    // Offset: 0x1336D40
    static uint ShiftDownBits(int len, ::Array<uint>* z, int bits, uint c);
    // static public System.UInt32 ShiftDownBits(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.Int32 bits, System.UInt32 c, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x1336DC0
    static uint ShiftDownBits(int len, ::Array<uint>* x, int xOff, int bits, uint c, ::Array<uint>* z, int zOff);
    // static public System.UInt32 ShiftDownWord(System.Int32 len, System.UInt32[] z, System.UInt32 c)
    // Offset: 0x1336E58
    static uint ShiftDownWord(int len, ::Array<uint>* z, uint c);
    // static public System.UInt32 ShiftUpBit(System.Int32 len, System.UInt32[] x, System.UInt32 c, System.UInt32[] z)
    // Offset: 0x1336EB4
    static uint ShiftUpBit(int len, ::Array<uint>* x, uint c, ::Array<uint>* z);
    // static public System.UInt32 ShiftUpBit(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32 c, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x1336F34
    static uint ShiftUpBit(int len, ::Array<uint>* x, int xOff, uint c, ::Array<uint>* z, int zOff);
    // static public System.UInt64 ShiftUpBit64(System.Int32 len, System.UInt64[] x, System.Int32 xOff, System.UInt64 c, System.UInt64[] z, System.Int32 zOff)
    // Offset: 0x1336FD0
    static uint64_t ShiftUpBit64(int len, ::Array<uint64_t>* x, int xOff, uint64_t c, ::Array<uint64_t>* z, int zOff);
    // static public System.UInt32 ShiftUpBits(System.Int32 len, System.UInt32[] z, System.Int32 bits, System.UInt32 c)
    // Offset: 0x133706C
    static uint ShiftUpBits(int len, ::Array<uint>* z, int bits, uint c);
    // static public System.UInt64 ShiftUpBits64(System.Int32 len, System.UInt64[] z, System.Int32 zOff, System.Int32 bits, System.UInt64 c)
    // Offset: 0x13370F4
    static uint64_t ShiftUpBits64(int len, ::Array<uint64_t>* z, int zOff, int bits, uint64_t c);
    // static public System.UInt32 ShiftUpBits(System.Int32 len, System.UInt32[] x, System.Int32 bits, System.UInt32 c, System.UInt32[] z)
    // Offset: 0x1337190
    static uint ShiftUpBits(int len, ::Array<uint>* x, int bits, uint c, ::Array<uint>* z);
    // static public System.UInt64 ShiftUpBits64(System.Int32 len, System.UInt64[] x, System.Int32 xOff, System.Int32 bits, System.UInt64 c, System.UInt64[] z, System.Int32 zOff)
    // Offset: 0x133722C
    static uint64_t ShiftUpBits64(int len, ::Array<uint64_t>* x, int xOff, int bits, uint64_t c, ::Array<uint64_t>* z, int zOff);
    // static public System.Int32 Sub(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x13372E4
    static int Sub(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.Int32 Sub33From(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x1337384
    static int Sub33From(int len, uint x, ::Array<uint>* z);
    // static public System.Int32 SubFrom(System.Int32 len, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x13373F4
    static int SubFrom(int len, ::Array<uint>* x, ::Array<uint>* z);
    // static public System.Int32 SubFrom(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x1337480
    static int SubFrom(int len, ::Array<uint>* x, int xOff, ::Array<uint>* z, int zOff);
    // static public System.Int32 SubWordFrom(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x1337528
    static int SubWordFrom(int len, uint x, ::Array<uint>* z);
    // static public Org.BouncyCastle.Math.BigInteger ToBigInteger(System.Int32 len, System.UInt32[] x)
    // Offset: 0x1337580
    static Org::BouncyCastle::Math::BigInteger* ToBigInteger(int len, ::Array<uint>* x);
    // static public System.Void Zero(System.Int32 len, System.UInt32[] z)
    // Offset: 0x1337674
    static void Zero(int len, ::Array<uint>* z);
  }; // Org.BouncyCastle.Math.Raw.Nat
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::Raw::Nat*, "Org.BouncyCastle.Math.Raw", "Nat");
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Add
// Il2CppName: Add
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Add33To
// Il2CppName: Add33To
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::AddBothTo
// Il2CppName: AddBothTo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::AddTo
// Il2CppName: AddTo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::AddTo
// Il2CppName: AddTo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::AddWordAt
// Il2CppName: AddWordAt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::AddWordTo
// Il2CppName: AddWordTo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::CAdd
// Il2CppName: CAdd
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Compare
// Il2CppName: Compare
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Copy
// Il2CppName: Copy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Copy
// Il2CppName: Copy
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Create
// Il2CppName: Create
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Create64
// Il2CppName: Create64
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Dec
// Il2CppName: Dec
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::DecAt
// Il2CppName: DecAt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Eq
// Il2CppName: Eq
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::FromBigInteger
// Il2CppName: FromBigInteger
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::FromBigInteger64
// Il2CppName: FromBigInteger64
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::GetBit
// Il2CppName: GetBit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Gte
// Il2CppName: Gte
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Inc
// Il2CppName: Inc
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Inc
// Il2CppName: Inc
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::IncAt
// Il2CppName: IncAt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::IncAt
// Il2CppName: IncAt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::IsOne
// Il2CppName: IsOne
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::IsZero
// Il2CppName: IsZero
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::LessThan
// Il2CppName: LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::MulAddTo
// Il2CppName: MulAddTo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Mul31BothAdd
// Il2CppName: Mul31BothAdd
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::MulWordAddTo
// Il2CppName: MulWordAddTo
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftDownBit
// Il2CppName: ShiftDownBit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftDownBits
// Il2CppName: ShiftDownBits
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftDownBits
// Il2CppName: ShiftDownBits
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftDownWord
// Il2CppName: ShiftDownWord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBit
// Il2CppName: ShiftUpBit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBit
// Il2CppName: ShiftUpBit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBit64
// Il2CppName: ShiftUpBit64
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBits
// Il2CppName: ShiftUpBits
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBits64
// Il2CppName: ShiftUpBits64
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBits
// Il2CppName: ShiftUpBits
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ShiftUpBits64
// Il2CppName: ShiftUpBits64
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Sub
// Il2CppName: Sub
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Sub33From
// Il2CppName: Sub33From
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::SubFrom
// Il2CppName: SubFrom
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::SubFrom
// Il2CppName: SubFrom
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::SubWordFrom
// Il2CppName: SubWordFrom
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::ToBigInteger
// Il2CppName: ToBigInteger
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::Raw::Nat::Zero
// Il2CppName: Zero
// Cannot perform method pointer template specialization from operators!
