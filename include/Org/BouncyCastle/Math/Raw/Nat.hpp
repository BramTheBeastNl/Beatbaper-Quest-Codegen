// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.Raw
namespace Org::BouncyCastle::Math::Raw {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.Raw.Nat
  class Nat : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Nat
    Nat() noexcept {}
    // static public System.UInt32 Add(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x131AFC0
    static uint Add(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.UInt32 Add33To(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x131B060
    static uint Add33To(int len, uint x, ::Array<uint>* z);
    // static public System.UInt32 AddBothTo(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x131B13C
    static uint AddBothTo(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.UInt32 AddTo(System.Int32 len, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x131B1E4
    static uint AddTo(int len, ::Array<uint>* x, ::Array<uint>* z);
    // static public System.UInt32 AddTo(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131B270
    static uint AddTo(int len, ::Array<uint>* x, int xOff, ::Array<uint>* z, int zOff);
    // static public System.UInt32 AddWordAt(System.Int32 len, System.UInt32 x, System.UInt32[] z, System.Int32 zPos)
    // Offset: 0x131B318
    static uint AddWordAt(int len, uint x, ::Array<uint>* z, int zPos);
    // static public System.UInt32 AddWordTo(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x131B378
    static uint AddWordTo(int len, uint x, ::Array<uint>* z);
    // static public System.UInt32 CAdd(System.Int32 len, System.Int32 mask, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x131B3D0
    static uint CAdd(int len, int mask, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.Int32 Compare(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x131B47C
    static int Compare(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32[] Copy(System.Int32 len, System.UInt32[] x)
    // Offset: 0x131B4F8
    static ::Array<uint>* Copy(int len, ::Array<uint>* x);
    // static public System.Void Copy(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131B57C
    static void Copy(int len, ::Array<uint>* x, int xOff, ::Array<uint>* z, int zOff);
    // static public System.UInt32[] Create(System.Int32 len)
    // Offset: 0x131B59C
    static ::Array<uint>* Create(int len);
    // static public System.UInt64[] Create64(System.Int32 len)
    // Offset: 0x131B5EC
    static ::Array<uint64_t>* Create64(int len);
    // static public System.Int32 Dec(System.Int32 len, System.UInt32[] z)
    // Offset: 0x131B63C
    static int Dec(int len, ::Array<uint>* z);
    // static public System.Int32 DecAt(System.Int32 len, System.UInt32[] z, System.Int32 zPos)
    // Offset: 0x131B6A4
    static int DecAt(int len, ::Array<uint>* z, int zPos);
    // static public System.Boolean Eq(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x131B710
    static bool Eq(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32[] FromBigInteger(System.Int32 bits, Org.BouncyCastle.Math.BigInteger x)
    // Offset: 0x131B780
    static ::Array<uint>* FromBigInteger(int bits, Org::BouncyCastle::Math::BigInteger* x);
    // static public System.UInt64[] FromBigInteger64(System.Int32 bits, Org.BouncyCastle.Math.BigInteger x)
    // Offset: 0x131B890
    static ::Array<uint64_t>* FromBigInteger64(int bits, Org::BouncyCastle::Math::BigInteger* x);
    // static public System.UInt32 GetBit(System.UInt32[] x, System.Int32 bit)
    // Offset: 0x131B9A0
    static uint GetBit(::Array<uint>* x, int bit);
    // static public System.Boolean Gte(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x131BA10
    static bool Gte(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32 Inc(System.Int32 len, System.UInt32[] z)
    // Offset: 0x131BA84
    static uint Inc(int len, ::Array<uint>* z);
    // static public System.UInt32 Inc(System.Int32 len, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x131BAEC
    static uint Inc(int len, ::Array<uint>* x, ::Array<uint>* z);
    // static public System.UInt32 IncAt(System.Int32 len, System.UInt32[] z, System.Int32 zPos)
    // Offset: 0x131B0D0
    static uint IncAt(int len, ::Array<uint>* z, int zPos);
    // static public System.UInt32 IncAt(System.Int32 len, System.UInt32[] z, System.Int32 zOff, System.Int32 zPos)
    // Offset: 0x131BBAC
    static uint IncAt(int len, ::Array<uint>* z, int zOff, int zPos);
    // static public System.Boolean IsOne(System.Int32 len, System.UInt32[] x)
    // Offset: 0x131BC20
    static bool IsOne(int len, ::Array<uint>* x);
    // static public System.Boolean IsZero(System.Int32 len, System.UInt32[] x)
    // Offset: 0x131BC94
    static bool IsZero(int len, ::Array<uint>* x);
    // static public System.Int32 LessThan(System.Int32 len, System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x131BD04
    static int LessThan(int len, ::Array<uint>* x, ::Array<uint>* y);
    // static public System.UInt32 MulAddTo(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] zz)
    // Offset: 0x131BD8C
    static uint MulAddTo(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* zz);
    // static public System.UInt32 Mul31BothAdd(System.Int32 len, System.UInt32 a, System.UInt32[] x, System.UInt32 b, System.UInt32[] y, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131BF14
    static uint Mul31BothAdd(int len, uint a, ::Array<uint>* x, uint b, ::Array<uint>* y, ::Array<uint>* z, int zOff);
    // static public System.UInt32 MulWordAddTo(System.Int32 len, System.UInt32 x, System.UInt32[] y, System.Int32 yOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131BE78
    static uint MulWordAddTo(int len, uint x, ::Array<uint>* y, int yOff, ::Array<uint>* z, int zOff);
    // static public System.UInt32 ShiftDownBit(System.Int32 len, System.UInt32[] z, System.UInt32 c)
    // Offset: 0x131BFCC
    static uint ShiftDownBit(int len, ::Array<uint>* z, uint c);
    // static public System.UInt32 ShiftDownBits(System.Int32 len, System.UInt32[] z, System.Int32 bits, System.UInt32 c)
    // Offset: 0x131C030
    static uint ShiftDownBits(int len, ::Array<uint>* z, int bits, uint c);
    // static public System.UInt32 ShiftDownBits(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.Int32 bits, System.UInt32 c, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131C0B0
    static uint ShiftDownBits(int len, ::Array<uint>* x, int xOff, int bits, uint c, ::Array<uint>* z, int zOff);
    // static public System.UInt32 ShiftDownWord(System.Int32 len, System.UInt32[] z, System.UInt32 c)
    // Offset: 0x131C148
    static uint ShiftDownWord(int len, ::Array<uint>* z, uint c);
    // static public System.UInt32 ShiftUpBit(System.Int32 len, System.UInt32[] x, System.UInt32 c, System.UInt32[] z)
    // Offset: 0x131C1A4
    static uint ShiftUpBit(int len, ::Array<uint>* x, uint c, ::Array<uint>* z);
    // static public System.UInt32 ShiftUpBit(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32 c, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131C224
    static uint ShiftUpBit(int len, ::Array<uint>* x, int xOff, uint c, ::Array<uint>* z, int zOff);
    // static public System.UInt64 ShiftUpBit64(System.Int32 len, System.UInt64[] x, System.Int32 xOff, System.UInt64 c, System.UInt64[] z, System.Int32 zOff)
    // Offset: 0x131C2C0
    static uint64_t ShiftUpBit64(int len, ::Array<uint64_t>* x, int xOff, uint64_t c, ::Array<uint64_t>* z, int zOff);
    // static public System.UInt32 ShiftUpBits(System.Int32 len, System.UInt32[] z, System.Int32 bits, System.UInt32 c)
    // Offset: 0x131C35C
    static uint ShiftUpBits(int len, ::Array<uint>* z, int bits, uint c);
    // static public System.UInt64 ShiftUpBits64(System.Int32 len, System.UInt64[] z, System.Int32 zOff, System.Int32 bits, System.UInt64 c)
    // Offset: 0x131C3E4
    static uint64_t ShiftUpBits64(int len, ::Array<uint64_t>* z, int zOff, int bits, uint64_t c);
    // static public System.UInt32 ShiftUpBits(System.Int32 len, System.UInt32[] x, System.Int32 bits, System.UInt32 c, System.UInt32[] z)
    // Offset: 0x131C480
    static uint ShiftUpBits(int len, ::Array<uint>* x, int bits, uint c, ::Array<uint>* z);
    // static public System.UInt64 ShiftUpBits64(System.Int32 len, System.UInt64[] x, System.Int32 xOff, System.Int32 bits, System.UInt64 c, System.UInt64[] z, System.Int32 zOff)
    // Offset: 0x131C51C
    static uint64_t ShiftUpBits64(int len, ::Array<uint64_t>* x, int xOff, int bits, uint64_t c, ::Array<uint64_t>* z, int zOff);
    // static public System.Int32 Sub(System.Int32 len, System.UInt32[] x, System.UInt32[] y, System.UInt32[] z)
    // Offset: 0x131C5D4
    static int Sub(int len, ::Array<uint>* x, ::Array<uint>* y, ::Array<uint>* z);
    // static public System.Int32 Sub33From(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x131C674
    static int Sub33From(int len, uint x, ::Array<uint>* z);
    // static public System.Int32 SubFrom(System.Int32 len, System.UInt32[] x, System.UInt32[] z)
    // Offset: 0x131C6E4
    static int SubFrom(int len, ::Array<uint>* x, ::Array<uint>* z);
    // static public System.Int32 SubFrom(System.Int32 len, System.UInt32[] x, System.Int32 xOff, System.UInt32[] z, System.Int32 zOff)
    // Offset: 0x131C770
    static int SubFrom(int len, ::Array<uint>* x, int xOff, ::Array<uint>* z, int zOff);
    // static public System.Int32 SubWordFrom(System.Int32 len, System.UInt32 x, System.UInt32[] z)
    // Offset: 0x131C818
    static int SubWordFrom(int len, uint x, ::Array<uint>* z);
    // static public Org.BouncyCastle.Math.BigInteger ToBigInteger(System.Int32 len, System.UInt32[] x)
    // Offset: 0x131C870
    static Org::BouncyCastle::Math::BigInteger* ToBigInteger(int len, ::Array<uint>* x);
    // static public System.Void Zero(System.Int32 len, System.UInt32[] z)
    // Offset: 0x131C964
    static void Zero(int len, ::Array<uint>* z);
  }; // Org.BouncyCastle.Math.Raw.Nat
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::Raw::Nat*, "Org.BouncyCastle.Math.Raw", "Nat");
