// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math::EC::Multiplier
namespace Org::BouncyCastle::Math::EC::Multiplier {
  // Forward declaring type: WNafPreCompInfo
  class WNafPreCompInfo;
}
// Forward declaring namespace: Org::BouncyCastle::Math::EC
namespace Org::BouncyCastle::Math::EC {
  // Forward declaring type: ECPoint
  class ECPoint;
  // Forward declaring type: ECPointMap
  class ECPointMap;
}
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.EC.Multiplier
namespace Org::BouncyCastle::Math::EC::Multiplier {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities
  class WNafUtilities : public ::Il2CppObject {
    public:
    // Nested type: Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::ConfigureBasepointCallback
    class ConfigureBasepointCallback;
    // Nested type: Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeCallback
    class PrecomputeCallback;
    // Nested type: Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback
    class PrecomputeWithPointMapCallback;
    // Creating value type constructor for type: WNafUtilities
    WNafUtilities() noexcept {}
    // Get static field: static public readonly System.String PRECOMP_NAME
    static ::Il2CppString* _get_PRECOMP_NAME();
    // Set static field: static public readonly System.String PRECOMP_NAME
    static void _set_PRECOMP_NAME(::Il2CppString* value);
    // Get static field: static private readonly System.Int32[] DEFAULT_WINDOW_SIZE_CUTOFFS
    static ::Array<int>* _get_DEFAULT_WINDOW_SIZE_CUTOFFS();
    // Set static field: static private readonly System.Int32[] DEFAULT_WINDOW_SIZE_CUTOFFS
    static void _set_DEFAULT_WINDOW_SIZE_CUTOFFS(::Array<int>* value);
    // Get static field: static private readonly System.Int32 MAX_WIDTH
    static int _get_MAX_WIDTH();
    // Set static field: static private readonly System.Int32 MAX_WIDTH
    static void _set_MAX_WIDTH(int value);
    // Get static field: static private readonly Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS
    static ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* _get_EMPTY_POINTS();
    // Set static field: static private readonly Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS
    static void _set_EMPTY_POINTS(::Array<Org::BouncyCastle::Math::EC::ECPoint*>* value);
    // static public System.Void ConfigureBasepoint(Org.BouncyCastle.Math.EC.ECPoint p)
    // Offset: 0x1D265CC
    static void ConfigureBasepoint(Org::BouncyCastle::Math::EC::ECPoint* p);
    // static public System.Int32[] GenerateCompactNaf(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1D26784
    static ::Array<int>* GenerateCompactNaf(Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Int32[] GenerateCompactWindowNaf(System.Int32 width, Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1D2617C
    static ::Array<int>* GenerateCompactWindowNaf(int width, Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Byte[] GenerateNaf(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1D26A78
    static ::Array<uint8_t>* GenerateNaf(Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Byte[] GenerateWindowNaf(System.Int32 width, Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1D26C14
    static ::Array<uint8_t>* GenerateWindowNaf(int width, Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Int32 GetNafWeight(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1D26F78
    static int GetNafWeight(Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Int32 GetWindowSize(System.Int32 bits)
    // Offset: 0x1D25FD8
    static int GetWindowSize(int bits);
    // static public System.Int32 GetWindowSize(System.Int32 bits, System.Int32 maxWidth)
    // Offset: 0x1D270C8
    static int GetWindowSize(int bits, int maxWidth);
    // static public System.Int32 GetWindowSize(System.Int32 bits, System.Int32[] windowSizeCutoffs, System.Int32 maxWidth)
    // Offset: 0x1D26FEC
    static int GetWindowSize(int bits, ::Array<int>* windowSizeCutoffs, int maxWidth);
    // static public Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo Precompute(Org.BouncyCastle.Math.EC.ECPoint p, System.Int32 minWidth, System.Boolean includeNegated)
    // Offset: 0x1D2604C
    static Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* Precompute(Org::BouncyCastle::Math::EC::ECPoint* p, int minWidth, bool includeNegated);
    // static public Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo PrecomputeWithPointMap(Org.BouncyCastle.Math.EC.ECPoint p, Org.BouncyCastle.Math.EC.ECPointMap pointMap, Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, System.Boolean includeNegated)
    // Offset: 0x1D27190
    static Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* PrecomputeWithPointMap(Org::BouncyCastle::Math::EC::ECPoint* p, Org::BouncyCastle::Math::EC::ECPointMap* pointMap, Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* fromWNaf, bool includeNegated);
    // static private System.Byte[] Trim(System.Byte[] a, System.Int32 length)
    // Offset: 0x1D26EEC
    static ::Array<uint8_t>* Trim(::Array<uint8_t>* a, int length);
    // static private System.Int32[] Trim(System.Int32[] a, System.Int32 length)
    // Offset: 0x1D269EC
    static ::Array<int>* Trim(::Array<int>* a, int length);
    // static private Org.BouncyCastle.Math.EC.ECPoint[] ResizeTable(Org.BouncyCastle.Math.EC.ECPoint[] a, System.Int32 length)
    // Offset: 0x1D27320
    static ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* ResizeTable(::Array<Org::BouncyCastle::Math::EC::ECPoint*>* a, int length);
    // static private System.Void .cctor()
    // Offset: 0x1D273AC
    static void _cctor();
  }; // Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities
  #pragma pack(pop)
  // Writing MetadataGetter for method: WNafUtilities::ConfigureBasepoint
  // Il2CppName: ConfigureBasepoint
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(Org::BouncyCastle::Math::EC::ECPoint*)>(&WNafUtilities::ConfigureBasepoint)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "ConfigureBasepoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::EC::ECPoint*>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GenerateCompactNaf
  // Il2CppName: GenerateCompactNaf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(Org::BouncyCastle::Math::BigInteger*)>(&WNafUtilities::GenerateCompactNaf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GenerateCompactNaf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::BigInteger*>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GenerateCompactWindowNaf
  // Il2CppName: GenerateCompactWindowNaf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(int, Org::BouncyCastle::Math::BigInteger*)>(&WNafUtilities::GenerateCompactWindowNaf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GenerateCompactWindowNaf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::BigInteger*>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GenerateNaf
  // Il2CppName: GenerateNaf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(Org::BouncyCastle::Math::BigInteger*)>(&WNafUtilities::GenerateNaf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GenerateNaf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::BigInteger*>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GenerateWindowNaf
  // Il2CppName: GenerateWindowNaf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(int, Org::BouncyCastle::Math::BigInteger*)>(&WNafUtilities::GenerateWindowNaf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GenerateWindowNaf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::BigInteger*>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GetNafWeight
  // Il2CppName: GetNafWeight
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(Org::BouncyCastle::Math::BigInteger*)>(&WNafUtilities::GetNafWeight)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GetNafWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::BigInteger*>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GetWindowSize
  // Il2CppName: GetWindowSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&WNafUtilities::GetWindowSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GetWindowSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GetWindowSize
  // Il2CppName: GetWindowSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&WNafUtilities::GetWindowSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GetWindowSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::GetWindowSize
  // Il2CppName: GetWindowSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::Array<int>*, int)>(&WNafUtilities::GetWindowSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "GetWindowSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::Precompute
  // Il2CppName: Precompute
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* (*)(Org::BouncyCastle::Math::EC::ECPoint*, int, bool)>(&WNafUtilities::Precompute)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "Precompute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::EC::ECPoint*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::PrecomputeWithPointMap
  // Il2CppName: PrecomputeWithPointMap
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* (*)(Org::BouncyCastle::Math::EC::ECPoint*, Org::BouncyCastle::Math::EC::ECPointMap*, Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo*, bool)>(&WNafUtilities::PrecomputeWithPointMap)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "PrecomputeWithPointMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::EC::ECPoint*>(), ::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::EC::ECPointMap*>(), ::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::Trim
  // Il2CppName: Trim
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, int)>(&WNafUtilities::Trim)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::Trim
  // Il2CppName: Trim
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(::Array<int>*, int)>(&WNafUtilities::Trim)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::ResizeTable
  // Il2CppName: ResizeTable
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<Org::BouncyCastle::Math::EC::ECPoint*>* (*)(::Array<Org::BouncyCastle::Math::EC::ECPoint*>*, int)>(&WNafUtilities::ResizeTable)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), "ResizeTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Org::BouncyCastle::Math::EC::ECPoint*>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: WNafUtilities::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&WNafUtilities::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WNafUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities*, "Org.BouncyCastle.Math.EC.Multiplier", "WNafUtilities");
