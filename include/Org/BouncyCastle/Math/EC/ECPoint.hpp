// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math::EC
namespace Org::BouncyCastle::Math::EC {
  // Forward declaring type: ECCurve
  class ECCurve;
  // Forward declaring type: ECFieldElement
  class ECFieldElement;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IDictionary
  class IDictionary;
}
// Forward declaring namespace: Org::BouncyCastle::Security
namespace Org::BouncyCastle::Security {
  // Forward declaring type: SecureRandom
  class SecureRandom;
}
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.EC
namespace Org::BouncyCastle::Math::EC {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.EC.ECPoint
  class ECPoint : public ::Il2CppObject {
    public:
    // Nested type: Org::BouncyCastle::Math::EC::ECPoint::ValidityCallback
    class ValidityCallback;
    // protected internal readonly Org.BouncyCastle.Math.EC.ECCurve m_curve
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Math::EC::ECCurve* m_curve;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Math::EC::ECCurve*) == 0x8);
    // protected internal readonly Org.BouncyCastle.Math.EC.ECFieldElement m_x
    // Size: 0x8
    // Offset: 0x18
    Org::BouncyCastle::Math::EC::ECFieldElement* m_x;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Math::EC::ECFieldElement*) == 0x8);
    // protected internal readonly Org.BouncyCastle.Math.EC.ECFieldElement m_y
    // Size: 0x8
    // Offset: 0x20
    Org::BouncyCastle::Math::EC::ECFieldElement* m_y;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Math::EC::ECFieldElement*) == 0x8);
    // protected internal readonly Org.BouncyCastle.Math.EC.ECFieldElement[] m_zs
    // Size: 0x8
    // Offset: 0x28
    ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* m_zs;
    // Field size check
    static_assert(sizeof(::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>*) == 0x8);
    // protected internal readonly System.Boolean m_withCompression
    // Size: 0x1
    // Offset: 0x30
    bool m_withCompression;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_withCompression and: m_preCompTable
    char __padding4[0x7] = {};
    // protected internal System.Collections.IDictionary m_preCompTable
    // Size: 0x8
    // Offset: 0x38
    System::Collections::IDictionary* m_preCompTable;
    // Field size check
    static_assert(sizeof(System::Collections::IDictionary*) == 0x8);
    // Creating value type constructor for type: ECPoint
    ECPoint(Org::BouncyCastle::Math::EC::ECCurve* m_curve_ = {}, Org::BouncyCastle::Math::EC::ECFieldElement* m_x_ = {}, Org::BouncyCastle::Math::EC::ECFieldElement* m_y_ = {}, ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* m_zs_ = {}, bool m_withCompression_ = {}, System::Collections::IDictionary* m_preCompTable_ = {}) noexcept : m_curve{m_curve_}, m_x{m_x_}, m_y{m_y_}, m_zs{m_zs_}, m_withCompression{m_withCompression_}, m_preCompTable{m_preCompTable_} {}
    // Get static field: static private readonly Org.BouncyCastle.Security.SecureRandom Random
    static Org::BouncyCastle::Security::SecureRandom* _get_Random();
    // Set static field: static private readonly Org.BouncyCastle.Security.SecureRandom Random
    static void _set_Random(Org::BouncyCastle::Security::SecureRandom* value);
    // Get static field: static protected Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS
    static ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* _get_EMPTY_ZS();
    // Set static field: static protected Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS
    static void _set_EMPTY_ZS(::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* value);
    // static protected Org.BouncyCastle.Math.EC.ECFieldElement[] GetInitialZCoords(Org.BouncyCastle.Math.EC.ECCurve curve)
    // Offset: 0x214FF74
    static ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* GetInitialZCoords(Org::BouncyCastle::Math::EC::ECCurve* curve);
    // protected System.Void .ctor(Org.BouncyCastle.Math.EC.ECCurve curve, Org.BouncyCastle.Math.EC.ECFieldElement x, Org.BouncyCastle.Math.EC.ECFieldElement y, System.Boolean withCompression)
    // Offset: 0x2150228
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ECPoint* New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, bool withCompression) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Math::EC::ECPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ECPoint*, creationType>(curve, x, y, withCompression)));
    }
    // System.Void .ctor(Org.BouncyCastle.Math.EC.ECCurve curve, Org.BouncyCastle.Math.EC.ECFieldElement x, Org.BouncyCastle.Math.EC.ECFieldElement y, Org.BouncyCastle.Math.EC.ECFieldElement[] zs, System.Boolean withCompression)
    // Offset: 0x21502D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ECPoint* New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* zs, bool withCompression) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Math::EC::ECPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ECPoint*, creationType>(curve, x, y, zs, withCompression)));
    }
    // protected System.Boolean SatisfiesCurveEquation()
    // Offset: 0xFFFFFFFF
    bool SatisfiesCurveEquation();
    // protected System.Boolean SatisfiesOrder()
    // Offset: 0x2150330
    bool SatisfiesOrder();
    // public Org.BouncyCastle.Math.EC.ECCurve get_Curve()
    // Offset: 0x215043C
    Org::BouncyCastle::Math::EC::ECCurve* get_Curve();
    // protected System.Int32 get_CurveCoordinateSystem()
    // Offset: 0x2150444
    int get_CurveCoordinateSystem();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_AffineXCoord()
    // Offset: 0x2150460
    Org::BouncyCastle::Math::EC::ECFieldElement* get_AffineXCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_AffineYCoord()
    // Offset: 0x2150498
    Org::BouncyCastle::Math::EC::ECFieldElement* get_AffineYCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_XCoord()
    // Offset: 0x21504D0
    Org::BouncyCastle::Math::EC::ECFieldElement* get_XCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord()
    // Offset: 0x21504D8
    Org::BouncyCastle::Math::EC::ECFieldElement* get_YCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(System.Int32 index)
    // Offset: 0x21504E0
    Org::BouncyCastle::Math::EC::ECFieldElement* GetZCoord(int index);
    // protected internal Org.BouncyCastle.Math.EC.ECFieldElement get_RawXCoord()
    // Offset: 0x215052C
    Org::BouncyCastle::Math::EC::ECFieldElement* get_RawXCoord();
    // protected internal Org.BouncyCastle.Math.EC.ECFieldElement get_RawYCoord()
    // Offset: 0x2150534
    Org::BouncyCastle::Math::EC::ECFieldElement* get_RawYCoord();
    // protected internal Org.BouncyCastle.Math.EC.ECFieldElement[] get_RawZCoords()
    // Offset: 0x215053C
    ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* get_RawZCoords();
    // protected System.Void CheckNormalized()
    // Offset: 0x2150544
    void CheckNormalized();
    // public System.Boolean IsNormalized()
    // Offset: 0x21505D8
    bool IsNormalized();
    // public Org.BouncyCastle.Math.EC.ECPoint Normalize()
    // Offset: 0x2150660
    Org::BouncyCastle::Math::EC::ECPoint* Normalize();
    // Org.BouncyCastle.Math.EC.ECPoint Normalize(Org.BouncyCastle.Math.EC.ECFieldElement zInv)
    // Offset: 0x2150804
    Org::BouncyCastle::Math::EC::ECPoint* Normalize(Org::BouncyCastle::Math::EC::ECFieldElement* zInv);
    // protected Org.BouncyCastle.Math.EC.ECPoint CreateScaledPoint(Org.BouncyCastle.Math.EC.ECFieldElement sx, Org.BouncyCastle.Math.EC.ECFieldElement sy)
    // Offset: 0x2150914
    Org::BouncyCastle::Math::EC::ECPoint* CreateScaledPoint(Org::BouncyCastle::Math::EC::ECFieldElement* sx, Org::BouncyCastle::Math::EC::ECFieldElement* sy);
    // public System.Boolean get_IsInfinity()
    // Offset: 0x214993C
    bool get_IsInfinity();
    // public System.Boolean get_IsCompressed()
    // Offset: 0x21509B0
    bool get_IsCompressed();
    // public System.Boolean IsValid()
    // Offset: 0x214E0A4
    bool IsValid();
    // System.Boolean IsValidPartial()
    // Offset: 0x214CF68
    bool IsValidPartial();
    // System.Boolean ImplIsValid(System.Boolean decompressed, System.Boolean checkOrder)
    // Offset: 0x214F534
    bool ImplIsValid(bool decompressed, bool checkOrder);
    // public Org.BouncyCastle.Math.EC.ECPoint ScaleX(Org.BouncyCastle.Math.EC.ECFieldElement scale)
    // Offset: 0x2150A04
    Org::BouncyCastle::Math::EC::ECPoint* ScaleX(Org::BouncyCastle::Math::EC::ECFieldElement* scale);
    // public Org.BouncyCastle.Math.EC.ECPoint ScaleY(Org.BouncyCastle.Math.EC.ECFieldElement scale)
    // Offset: 0x2150AA4
    Org::BouncyCastle::Math::EC::ECPoint* ScaleY(Org::BouncyCastle::Math::EC::ECFieldElement* scale);
    // public System.Boolean Equals(Org.BouncyCastle.Math.EC.ECPoint other)
    // Offset: 0x2150BE8
    bool Equals(Org::BouncyCastle::Math::EC::ECPoint* other);
    // public System.Byte[] GetEncoded(System.Boolean compressed)
    // Offset: 0xFFFFFFFF
    ::Array<uint8_t>* GetEncoded(bool compressed);
    // protected internal System.Boolean get_CompressionYTilde()
    // Offset: 0xFFFFFFFF
    bool get_CompressionYTilde();
    // public Org.BouncyCastle.Math.EC.ECPoint Add(Org.BouncyCastle.Math.EC.ECPoint b)
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Add(Org::BouncyCastle::Math::EC::ECPoint* b);
    // public Org.BouncyCastle.Math.EC.ECPoint Subtract(Org.BouncyCastle.Math.EC.ECPoint b)
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Subtract(Org::BouncyCastle::Math::EC::ECPoint* b);
    // public Org.BouncyCastle.Math.EC.ECPoint Negate()
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Negate();
    // public Org.BouncyCastle.Math.EC.ECPoint TimesPow2(System.Int32 e)
    // Offset: 0x21510D0
    Org::BouncyCastle::Math::EC::ECPoint* TimesPow2(int e);
    // public Org.BouncyCastle.Math.EC.ECPoint Twice()
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Twice();
    // public Org.BouncyCastle.Math.EC.ECPoint Multiply(Org.BouncyCastle.Math.BigInteger b)
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Multiply(Org::BouncyCastle::Math::BigInteger* b);
    // public Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Org.BouncyCastle.Math.EC.ECPoint b)
    // Offset: 0x215119C
    Org::BouncyCastle::Math::EC::ECPoint* TwicePlus(Org::BouncyCastle::Math::EC::ECPoint* b);
    // public Org.BouncyCastle.Math.EC.ECPoint ThreeTimes()
    // Offset: 0x21511E4
    Org::BouncyCastle::Math::EC::ECPoint* ThreeTimes();
    // static private System.Void .cctor()
    // Offset: 0x21511F8
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x2150B4C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x2150EA8
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x2150F78
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // Org.BouncyCastle.Math.EC.ECPoint
  #pragma pack(pop)
  static check_size<sizeof(ECPoint), 56 + sizeof(System::Collections::IDictionary*)> __Org_BouncyCastle_Math_EC_ECPointSizeCheck;
  static_assert(sizeof(ECPoint) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::EC::ECPoint*, "Org.BouncyCastle.Math.EC", "ECPoint");
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::GetInitialZCoords
// Il2CppName: GetInitialZCoords
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::SatisfiesCurveEquation
// Il2CppName: SatisfiesCurveEquation
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::SatisfiesOrder
// Il2CppName: SatisfiesOrder
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_Curve
// Il2CppName: get_Curve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_CurveCoordinateSystem
// Il2CppName: get_CurveCoordinateSystem
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_AffineXCoord
// Il2CppName: get_AffineXCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_AffineYCoord
// Il2CppName: get_AffineYCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_XCoord
// Il2CppName: get_XCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_YCoord
// Il2CppName: get_YCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::GetZCoord
// Il2CppName: GetZCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_RawXCoord
// Il2CppName: get_RawXCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_RawYCoord
// Il2CppName: get_RawYCoord
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_RawZCoords
// Il2CppName: get_RawZCoords
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::CheckNormalized
// Il2CppName: CheckNormalized
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::IsNormalized
// Il2CppName: IsNormalized
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Normalize
// Il2CppName: Normalize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Normalize
// Il2CppName: Normalize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::CreateScaledPoint
// Il2CppName: CreateScaledPoint
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_IsInfinity
// Il2CppName: get_IsInfinity
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_IsCompressed
// Il2CppName: get_IsCompressed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::IsValid
// Il2CppName: IsValid
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::IsValidPartial
// Il2CppName: IsValidPartial
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::ImplIsValid
// Il2CppName: ImplIsValid
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::ScaleX
// Il2CppName: ScaleX
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::ScaleY
// Il2CppName: ScaleY
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::GetEncoded
// Il2CppName: GetEncoded
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::get_CompressionYTilde
// Il2CppName: get_CompressionYTilde
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Add
// Il2CppName: Add
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Subtract
// Il2CppName: Subtract
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Negate
// Il2CppName: Negate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::TimesPow2
// Il2CppName: TimesPow2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Twice
// Il2CppName: Twice
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Multiply
// Il2CppName: Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::TwicePlus
// Il2CppName: TwicePlus
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::ThreeTimes
// Il2CppName: ThreeTimes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::GetHashCode
// Il2CppName: GetHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Math::EC::ECPoint::ToString
// Il2CppName: ToString
// Cannot perform method pointer template specialization from operators!
