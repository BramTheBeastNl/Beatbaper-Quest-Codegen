// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Random
#include "System/Random.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto::Prng
namespace Org::BouncyCastle::Crypto::Prng {
  // Forward declaring type: IRandomGenerator
  class IRandomGenerator;
  // Forward declaring type: DigestRandomGenerator
  class DigestRandomGenerator;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Security
namespace Org::BouncyCastle::Security {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Security.SecureRandom
  class SecureRandom : public System::Random {
    public:
    // protected readonly Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator
    // Size: 0x8
    // Offset: 0x20
    Org::BouncyCastle::Crypto::Prng::IRandomGenerator* generator;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::Prng::IRandomGenerator*) == 0x8);
    // Creating value type constructor for type: SecureRandom
    SecureRandom(Org::BouncyCastle::Crypto::Prng::IRandomGenerator* generator_ = {}) noexcept : generator{generator_} {}
    // Creating conversion operator: operator Org::BouncyCastle::Crypto::Prng::IRandomGenerator*
    constexpr operator Org::BouncyCastle::Crypto::Prng::IRandomGenerator*() const noexcept {
      return generator;
    }
    // Get static field: static private System.Int64 counter
    static int64_t _get_counter();
    // Set static field: static private System.Int64 counter
    static void _set_counter(int64_t value);
    // Get static field: static private readonly Org.BouncyCastle.Security.SecureRandom master
    static Org::BouncyCastle::Security::SecureRandom* _get_master();
    // Set static field: static private readonly Org.BouncyCastle.Security.SecureRandom master
    static void _set_master(Org::BouncyCastle::Security::SecureRandom* value);
    // Get static field: static private readonly System.Double DoubleScale
    static double _get_DoubleScale();
    // Set static field: static private readonly System.Double DoubleScale
    static void _set_DoubleScale(double value);
    // static private System.Int64 NextCounterValue()
    // Offset: 0x1371658
    static int64_t NextCounterValue();
    // static private Org.BouncyCastle.Security.SecureRandom get_Master()
    // Offset: 0x13716C0
    static Org::BouncyCastle::Security::SecureRandom* get_Master();
    // static private Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator CreatePrng(System.String digestName, System.Boolean autoSeed)
    // Offset: 0x1371728
    static Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator* CreatePrng(::Il2CppString* digestName, bool autoSeed);
    // static public System.Byte[] GetNextBytes(Org.BouncyCastle.Security.SecureRandom secureRandom, System.Int32 length)
    // Offset: 0x13718E0
    static ::Array<uint8_t>* GetNextBytes(Org::BouncyCastle::Security::SecureRandom* secureRandom, int length);
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator)
    // Offset: 0x13719F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecureRandom* New_ctor(Org::BouncyCastle::Crypto::Prng::IRandomGenerator* generator) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Security::SecureRandom::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecureRandom*, creationType>(generator)));
    }
    // public System.Int32 NextInt()
    // Offset: 0x1371DA8
    int NextInt();
    // public System.Int64 NextLong()
    // Offset: 0x1371E1C
    int64_t NextLong();
    // static private System.Void .cctor()
    // Offset: 0x1371E90
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1371964
    // Implemented from: System.Random
    // Base method: System.Void Random::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecureRandom* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Security::SecureRandom::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecureRandom*, creationType>()));
    }
    // public override System.Int32 Next()
    // Offset: 0x1371A20
    // Implemented from: System.Random
    // Base method: System.Int32 Random::Next()
    int Next();
    // public override System.Int32 Next(System.Int32 maxValue)
    // Offset: 0x1371A40
    // Implemented from: System.Random
    // Base method: System.Int32 Random::Next(System.Int32 maxValue)
    int Next(int maxValue);
    // public override System.Int32 Next(System.Int32 minValue, System.Int32 maxValue)
    // Offset: 0x1371B44
    // Implemented from: System.Random
    // Base method: System.Int32 Random::Next(System.Int32 minValue, System.Int32 maxValue)
    int Next(int minValue, int maxValue);
    // public override System.Void NextBytes(System.Byte[] buf)
    // Offset: 0x1371C28
    // Implemented from: System.Random
    // Base method: System.Void Random::NextBytes(System.Byte[] buf)
    void NextBytes(::Array<uint8_t>* buf);
    // public override System.Double NextDouble()
    // Offset: 0x1371CE8
    // Implemented from: System.Random
    // Base method: System.Double Random::NextDouble()
    double NextDouble();
  }; // Org.BouncyCastle.Security.SecureRandom
  #pragma pack(pop)
  static check_size<sizeof(SecureRandom), 32 + sizeof(Org::BouncyCastle::Crypto::Prng::IRandomGenerator*)> __Org_BouncyCastle_Security_SecureRandomSizeCheck;
  static_assert(sizeof(SecureRandom) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Security::SecureRandom*, "Org.BouncyCastle.Security", "SecureRandom");
// Writing MetadataGetter for method: SecureRandom::NextCounterValue
// Il2CppName: NextCounterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)()>(&SecureRandom::NextCounterValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "NextCounterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::get_Master
// Il2CppName: get_Master
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Security::SecureRandom* (*)()>(&SecureRandom::get_Master)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "get_Master", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::CreatePrng
// Il2CppName: CreatePrng
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator* (*)(::Il2CppString*, bool)>(&SecureRandom::CreatePrng)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "CreatePrng", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SecureRandom::GetNextBytes
// Il2CppName: GetNextBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(Org::BouncyCastle::Security::SecureRandom*, int)>(&SecureRandom::GetNextBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "GetNextBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Security::SecureRandom*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SecureRandom::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandom::*)(Org::BouncyCastle::Crypto::Prng::IRandomGenerator*)>(&SecureRandom::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Prng::IRandomGenerator*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandom::*)(Org::BouncyCastle::Crypto::Prng::IRandomGenerator*)>(&SecureRandom::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Prng::IRandomGenerator*>()});
  }
};
// Writing MetadataGetter for method: SecureRandom::NextInt
// Il2CppName: NextInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureRandom::*)()>(&SecureRandom::NextInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "NextInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::NextLong
// Il2CppName: NextLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (SecureRandom::*)()>(&SecureRandom::NextLong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "NextLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SecureRandom::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandom::*)()>(&SecureRandom::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandom::*)()>(&SecureRandom::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureRandom::*)()>(&SecureRandom::Next)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SecureRandom::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureRandom::*)(int)>(&SecureRandom::Next)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SecureRandom::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SecureRandom::*)(int, int)>(&SecureRandom::Next)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SecureRandom::NextBytes
// Il2CppName: NextBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SecureRandom::*)(::Array<uint8_t>*)>(&SecureRandom::NextBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "NextBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: SecureRandom::NextDouble
// Il2CppName: NextDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (SecureRandom::*)()>(&SecureRandom::NextDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SecureRandom*), "NextDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
