// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IDigest
#include "Org/BouncyCastle/Crypto/IDigest.hpp"
// Including type: Org.BouncyCastle.Utilities.IMemoable
#include "Org/BouncyCastle/Utilities/IMemoable.hpp"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Digests
namespace Org::BouncyCastle::Crypto::Digests {
  // Autogenerated type: Org.BouncyCastle.Crypto.Digests.TigerDigest
  class TigerDigest : public ::Il2CppObject, public Org::BouncyCastle::Crypto::IDigest, public Org::BouncyCastle::Utilities::IMemoable {
    public:
    // private System.Int64 a
    // Offset: 0x10
    int64_t a;
    // private System.Int64 b
    // Offset: 0x18
    int64_t b;
    // private System.Int64 c
    // Offset: 0x20
    int64_t c;
    // private System.Int64 byteCount
    // Offset: 0x28
    int64_t byteCount;
    // private System.Byte[] Buffer
    // Offset: 0x30
    ::Array<uint8_t>* Buffer;
    // private System.Int32 bOff
    // Offset: 0x38
    int bOff;
    // private System.Int64[] x
    // Offset: 0x40
    ::Array<int64_t>* x;
    // private System.Int32 xOff
    // Offset: 0x48
    int xOff;
    // Get static field: static private readonly System.Int64[] t1
    static ::Array<int64_t>* _get_t1();
    // Set static field: static private readonly System.Int64[] t1
    static void _set_t1(::Array<int64_t>* value);
    // Get static field: static private readonly System.Int64[] t2
    static ::Array<int64_t>* _get_t2();
    // Set static field: static private readonly System.Int64[] t2
    static void _set_t2(::Array<int64_t>* value);
    // Get static field: static private readonly System.Int64[] t3
    static ::Array<int64_t>* _get_t3();
    // Set static field: static private readonly System.Int64[] t3
    static void _set_t3(::Array<int64_t>* value);
    // Get static field: static private readonly System.Int64[] t4
    static ::Array<int64_t>* _get_t4();
    // Set static field: static private readonly System.Int64[] t4
    static void _set_t4(::Array<int64_t>* value);
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Digests.TigerDigest t)
    // Offset: 0x17103B4
    static TigerDigest* New_ctor(Org::BouncyCastle::Crypto::Digests::TigerDigest* t);
    // private System.Void ProcessWord(System.Byte[] b, System.Int32 off)
    // Offset: 0x17105B4
    void ProcessWord(::Array<uint8_t>* b, int off);
    // private System.Void RoundABC(System.Int64 x, System.Int64 mul)
    // Offset: 0x1710C8C
    void RoundABC(int64_t x, int64_t mul);
    // private System.Void RoundBCA(System.Int64 x, System.Int64 mul)
    // Offset: 0x1710E5C
    void RoundBCA(int64_t x, int64_t mul);
    // private System.Void RoundCAB(System.Int64 x, System.Int64 mul)
    // Offset: 0x1711028
    void RoundCAB(int64_t x, int64_t mul);
    // private System.Void KeySchedule()
    // Offset: 0x17111F4
    void KeySchedule();
    // private System.Void ProcessBlock()
    // Offset: 0x17106F0
    void ProcessBlock();
    // private System.Void UnpackWord(System.Int64 r, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1711484
    void UnpackWord(int64_t r, ::Array<uint8_t>* output, int outOff);
    // private System.Void ProcessLength(System.Int64 bitLength)
    // Offset: 0x1711580
    void ProcessLength(int64_t bitLength);
    // private System.Void Finish()
    // Offset: 0x17115B8
    void Finish();
    // static private System.Void .cctor()
    // Offset: 0x17116D4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x171026C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static TigerDigest* New_ctor();
    // public System.String get_AlgorithmName()
    // Offset: 0x171055C
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.String IDigest::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Int32 GetDigestSize()
    // Offset: 0x17105A4
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::GetDigestSize()
    int GetDigestSize();
    // public System.Int32 GetByteLength()
    // Offset: 0x17105AC
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::GetByteLength()
    int GetByteLength();
    // public System.Void Update(System.Byte input)
    // Offset: 0x1710ADC
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::Update(System.Byte input)
    void Update(uint8_t input);
    // public System.Void BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    // Offset: 0x1710B60
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    void BlockUpdate(::Array<uint8_t>* input, int inOff, int length);
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1711608
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::DoFinal(System.Byte[] output, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1710304
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::Reset()
    void Reset();
    // public Org.BouncyCastle.Utilities.IMemoable Copy()
    // Offset: 0x1711674
    // Implemented from: Org.BouncyCastle.Utilities.IMemoable
    // Base method: Org.BouncyCastle.Utilities.IMemoable IMemoable::Copy()
    Org::BouncyCastle::Utilities::IMemoable* Copy();
    // public System.Void Reset(Org.BouncyCastle.Utilities.IMemoable other)
    // Offset: 0x171045C
    // Implemented from: Org.BouncyCastle.Utilities.IMemoable
    // Base method: System.Void IMemoable::Reset(Org.BouncyCastle.Utilities.IMemoable other)
    void Reset(Org::BouncyCastle::Utilities::IMemoable* other);
  }; // Org.BouncyCastle.Crypto.Digests.TigerDigest
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Digests::TigerDigest*, "Org.BouncyCastle.Crypto.Digests", "TigerDigest");
#pragma pack(pop)
