// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IDigest
#include "Org/BouncyCastle/Crypto/IDigest.hpp"
// Including type: Org.BouncyCastle.Utilities.IMemoable
#include "Org/BouncyCastle/Utilities/IMemoable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Digests
namespace Org::BouncyCastle::Crypto::Digests {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Digests.KeccakDigest
  class KeccakDigest : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IDigest, public Org::BouncyCastle::Utilities::IMemoable*/ {
    public:
    // private System.UInt64[] state
    // Size: 0x8
    // Offset: 0x10
    ::Array<uint64_t>* state;
    // Field size check
    static_assert(sizeof(::Array<uint64_t>*) == 0x8);
    // protected System.Byte[] dataQueue
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint8_t>* dataQueue;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // protected System.Int32 rate
    // Size: 0x4
    // Offset: 0x20
    int rate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 bitsInQueue
    // Size: 0x4
    // Offset: 0x24
    int bitsInQueue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 fixedOutputLength
    // Size: 0x4
    // Offset: 0x28
    int fixedOutputLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean squeezing
    // Size: 0x1
    // Offset: 0x2C
    bool squeezing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: KeccakDigest
    KeccakDigest(::Array<uint64_t>* state_ = {}, ::Array<uint8_t>* dataQueue_ = {}, int rate_ = {}, int bitsInQueue_ = {}, int fixedOutputLength_ = {}, bool squeezing_ = {}) noexcept : state{state_}, dataQueue{dataQueue_}, rate{rate_}, bitsInQueue{bitsInQueue_}, fixedOutputLength{fixedOutputLength_}, squeezing{squeezing_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IDigest
    operator Org::BouncyCastle::Crypto::IDigest() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IDigest*>(this);
    }
    // Creating interface conversion operator: operator Org::BouncyCastle::Utilities::IMemoable
    operator Org::BouncyCastle::Utilities::IMemoable() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Utilities::IMemoable*>(this);
    }
    // Get static field: static private readonly System.UInt64[] KeccakRoundConstants
    static ::Array<uint64_t>* _get_KeccakRoundConstants();
    // Set static field: static private readonly System.UInt64[] KeccakRoundConstants
    static void _set_KeccakRoundConstants(::Array<uint64_t>* value);
    // public System.Void .ctor(System.Int32 bitLength)
    // Offset: 0x1CD5E10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeccakDigest* New_ctor(int bitLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Digests::KeccakDigest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeccakDigest*, creationType>(bitLength)));
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Digests.KeccakDigest source)
    // Offset: 0x1CD5F7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeccakDigest* New_ctor(Org::BouncyCastle::Crypto::Digests::KeccakDigest* source) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Digests::KeccakDigest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeccakDigest*, creationType>(source)));
    }
    // private System.Void CopyIn(Org.BouncyCastle.Crypto.Digests.KeccakDigest source)
    // Offset: 0x1CD600C
    void CopyIn(Org::BouncyCastle::Crypto::Digests::KeccakDigest* source);
    // public System.String get_AlgorithmName()
    // Offset: 0x1CD6094
    ::Il2CppString* get_AlgorithmName();
    // public System.Int32 GetDigestSize()
    // Offset: 0x1CD6114
    int GetDigestSize();
    // public System.Void Update(System.Byte input)
    // Offset: 0x1CD6120
    void Update(uint8_t input);
    // public System.Void BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 len)
    // Offset: 0x1CD6234
    void BlockUpdate(::Array<uint8_t>* input, int inOff, int len);
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1CD63C4
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1CD6558
    void Reset();
    // public System.Int32 GetByteLength()
    // Offset: 0x1CD6560
    int GetByteLength();
    // private System.Void Init(System.Int32 bitLength)
    // Offset: 0x1CD5EA0
    void Init(int bitLength);
    // private System.Void InitSponge(System.Int32 rate)
    // Offset: 0x1CD656C
    void InitSponge(int rate);
    // protected System.Void Absorb(System.Byte data)
    // Offset: 0x1CD6124
    void Absorb(uint8_t data);
    // protected System.Void Absorb(System.Byte[] data, System.Int32 off, System.Int32 len)
    // Offset: 0x1CD6238
    void Absorb(::Array<uint8_t>* data, int off, int len);
    // protected System.Void AbsorbBits(System.Int32 data, System.Int32 bits)
    // Offset: 0x1CD6728
    void AbsorbBits(int data, int bits);
    // private System.Void PadAndSwitchToSqueezingPhase()
    // Offset: 0x1CD6870
    void PadAndSwitchToSqueezingPhase();
    // protected System.Void Squeeze(System.Byte[] output, System.Int32 offset, System.Int64 outputLength)
    // Offset: 0x1CD640C
    void Squeeze(::Array<uint8_t>* output, int offset, int64_t outputLength);
    // private System.Void KeccakAbsorb(System.Byte[] data, System.Int32 off)
    // Offset: 0x1CD6670
    void KeccakAbsorb(::Array<uint8_t>* data, int off);
    // private System.Void KeccakExtract()
    // Offset: 0x1CD6A18
    void KeccakExtract();
    // private System.Void KeccakPermutation()
    // Offset: 0x1CD6A5C
    void KeccakPermutation();
    // public Org.BouncyCastle.Utilities.IMemoable Copy()
    // Offset: 0x1CD7040
    Org::BouncyCastle::Utilities::IMemoable* Copy();
    // public System.Void Reset(Org.BouncyCastle.Utilities.IMemoable other)
    // Offset: 0x1CD70A0
    void Reset(Org::BouncyCastle::Utilities::IMemoable* other);
    // static private System.Void .cctor()
    // Offset: 0x1CD7134
    static void _cctor();
  }; // Org.BouncyCastle.Crypto.Digests.KeccakDigest
  #pragma pack(pop)
  static check_size<sizeof(KeccakDigest), 44 + sizeof(bool)> __Org_BouncyCastle_Crypto_Digests_KeccakDigestSizeCheck;
  static_assert(sizeof(KeccakDigest) == 0x2D);
  // Writing MetadataGetter for method: KeccakDigest::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(int)>(&KeccakDigest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(int)>(&KeccakDigest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(Org::BouncyCastle::Crypto::Digests::KeccakDigest*)>(&KeccakDigest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Digests::KeccakDigest*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(Org::BouncyCastle::Crypto::Digests::KeccakDigest*)>(&KeccakDigest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Digests::KeccakDigest*>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::CopyIn
  // Il2CppName: CopyIn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(Org::BouncyCastle::Crypto::Digests::KeccakDigest*)>(&KeccakDigest::CopyIn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "CopyIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::Digests::KeccakDigest*>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::get_AlgorithmName
  // Il2CppName: get_AlgorithmName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (KeccakDigest::*)()>(&KeccakDigest::get_AlgorithmName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "get_AlgorithmName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::GetDigestSize
  // Il2CppName: GetDigestSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeccakDigest::*)()>(&KeccakDigest::GetDigestSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "GetDigestSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Update
  // Il2CppName: Update
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(uint8_t)>(&KeccakDigest::Update)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::BlockUpdate
  // Il2CppName: BlockUpdate
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(::Array<uint8_t>*, int, int)>(&KeccakDigest::BlockUpdate)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "BlockUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::DoFinal
  // Il2CppName: DoFinal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeccakDigest::*)(::Array<uint8_t>*, int)>(&KeccakDigest::DoFinal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "DoFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Reset
  // Il2CppName: Reset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)()>(&KeccakDigest::Reset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::GetByteLength
  // Il2CppName: GetByteLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeccakDigest::*)()>(&KeccakDigest::GetByteLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "GetByteLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Init
  // Il2CppName: Init
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(int)>(&KeccakDigest::Init)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::InitSponge
  // Il2CppName: InitSponge
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(int)>(&KeccakDigest::InitSponge)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "InitSponge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Absorb
  // Il2CppName: Absorb
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(uint8_t)>(&KeccakDigest::Absorb)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Absorb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Absorb
  // Il2CppName: Absorb
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(::Array<uint8_t>*, int, int)>(&KeccakDigest::Absorb)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Absorb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::AbsorbBits
  // Il2CppName: AbsorbBits
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(int, int)>(&KeccakDigest::AbsorbBits)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "AbsorbBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::PadAndSwitchToSqueezingPhase
  // Il2CppName: PadAndSwitchToSqueezingPhase
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)()>(&KeccakDigest::PadAndSwitchToSqueezingPhase)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "PadAndSwitchToSqueezingPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Squeeze
  // Il2CppName: Squeeze
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(::Array<uint8_t>*, int, int64_t)>(&KeccakDigest::Squeeze)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Squeeze", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::KeccakAbsorb
  // Il2CppName: KeccakAbsorb
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(::Array<uint8_t>*, int)>(&KeccakDigest::KeccakAbsorb)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "KeccakAbsorb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::KeccakExtract
  // Il2CppName: KeccakExtract
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)()>(&KeccakDigest::KeccakExtract)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "KeccakExtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::KeccakPermutation
  // Il2CppName: KeccakPermutation
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)()>(&KeccakDigest::KeccakPermutation)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "KeccakPermutation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Copy
  // Il2CppName: Copy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Utilities::IMemoable* (KeccakDigest::*)()>(&KeccakDigest::Copy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::Reset
  // Il2CppName: Reset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeccakDigest::*)(Org::BouncyCastle::Utilities::IMemoable*)>(&KeccakDigest::Reset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Utilities::IMemoable*>()});
    }
  };
  // Writing MetadataGetter for method: KeccakDigest::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KeccakDigest::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(KeccakDigest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Digests::KeccakDigest*, "Org.BouncyCastle.Crypto.Digests", "KeccakDigest");
