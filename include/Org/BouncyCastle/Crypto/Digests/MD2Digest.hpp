// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IDigest
#include "Org/BouncyCastle/Crypto/IDigest.hpp"
// Including type: Org.BouncyCastle.Utilities.IMemoable
#include "Org/BouncyCastle/Utilities/IMemoable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Digests
namespace Org::BouncyCastle::Crypto::Digests {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Digests.MD2Digest
  // [] Offset: FFFFFFFF
  class MD2Digest : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IDigest, public Org::BouncyCastle::Utilities::IMemoable*/ {
    public:
    // private System.Byte[] X
    // Size: 0x8
    // Offset: 0x10
    ::Array<uint8_t>* X;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 xOff
    // Size: 0x4
    // Offset: 0x18
    int xOff;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: xOff and: M
    char __padding1[0x4] = {};
    // private System.Byte[] M
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint8_t>* M;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 mOff
    // Size: 0x4
    // Offset: 0x28
    int mOff;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: mOff and: C
    char __padding3[0x4] = {};
    // private System.Byte[] C
    // Size: 0x8
    // Offset: 0x30
    ::Array<uint8_t>* C;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 COff
    // Size: 0x4
    // Offset: 0x38
    int COff;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: MD2Digest
    MD2Digest(::Array<uint8_t>* X_ = {}, int xOff_ = {}, ::Array<uint8_t>* M_ = {}, int mOff_ = {}, ::Array<uint8_t>* C_ = {}, int COff_ = {}) noexcept : X{X_}, xOff{xOff_}, M{M_}, mOff{mOff_}, C{C_}, COff{COff_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IDigest
    operator Org::BouncyCastle::Crypto::IDigest() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IDigest*>(this);
    }
    // Creating interface conversion operator: operator Org::BouncyCastle::Utilities::IMemoable
    operator Org::BouncyCastle::Utilities::IMemoable() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Utilities::IMemoable*>(this);
    }
    // Get static field: static private readonly System.Byte[] S
    static ::Array<uint8_t>* _get_S();
    // Set static field: static private readonly System.Byte[] S
    static void _set_S(::Array<uint8_t>* value);
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Digests.MD2Digest t)
    // Offset: 0x1AFAD98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MD2Digest* New_ctor(Org::BouncyCastle::Crypto::Digests::MD2Digest* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Digests::MD2Digest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MD2Digest*, creationType>(t)));
    }
    // private System.Void CopyIn(Org.BouncyCastle.Crypto.Digests.MD2Digest t)
    // Offset: 0x1AFAE30
    void CopyIn(Org::BouncyCastle::Crypto::Digests::MD2Digest* t);
    // public System.String get_AlgorithmName()
    // Offset: 0x1AFAED0
    ::Il2CppString* get_AlgorithmName();
    // public System.Int32 GetDigestSize()
    // Offset: 0x1AFAF18
    int GetDigestSize();
    // public System.Int32 GetByteLength()
    // Offset: 0x1AFAF20
    int GetByteLength();
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1AFAF28
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1AFACD4
    void Reset();
    // public System.Void Update(System.Byte input)
    // Offset: 0x1AFB2F4
    void Update(uint8_t input);
    // public System.Void BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    // Offset: 0x1AFB370
    void BlockUpdate(::Array<uint8_t>* input, int inOff, int length);
    // System.Void ProcessChecksum(System.Byte[] m)
    // Offset: 0x1AFAFF8
    void ProcessChecksum(::Array<uint8_t>* m);
    // System.Void ProcessBlock(System.Byte[] m)
    // Offset: 0x1AFB144
    void ProcessBlock(::Array<uint8_t>* m);
    // public Org.BouncyCastle.Utilities.IMemoable Copy()
    // Offset: 0x1AFB4B4
    Org::BouncyCastle::Utilities::IMemoable* Copy();
    // public System.Void Reset(Org.BouncyCastle.Utilities.IMemoable other)
    // Offset: 0x1AFB514
    void Reset(Org::BouncyCastle::Utilities::IMemoable* other);
    // static private System.Void .cctor()
    // Offset: 0x1AFB5A8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1AFAC4C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MD2Digest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Digests::MD2Digest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MD2Digest*, creationType>()));
    }
  }; // Org.BouncyCastle.Crypto.Digests.MD2Digest
  #pragma pack(pop)
  static check_size<sizeof(MD2Digest), 56 + sizeof(int)> __Org_BouncyCastle_Crypto_Digests_MD2DigestSizeCheck;
  static_assert(sizeof(MD2Digest) == 0x3C);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Digests::MD2Digest*, "Org.BouncyCastle.Crypto.Digests", "MD2Digest");
