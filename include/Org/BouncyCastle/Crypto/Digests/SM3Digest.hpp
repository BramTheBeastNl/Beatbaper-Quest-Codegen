// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Digests.GeneralDigest
#include "Org/BouncyCastle/Crypto/Digests/GeneralDigest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Utilities
namespace Org::BouncyCastle::Utilities {
  // Skipping declaration: IMemoable because it is already included!
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Digests
namespace Org::BouncyCastle::Crypto::Digests {
  // Size: 0x48
  // Autogenerated type: Org.BouncyCastle.Crypto.Digests.SM3Digest
  // [] Offset: FFFFFFFF
  class SM3Digest : public Org::BouncyCastle::Crypto::Digests::GeneralDigest {
    public:
    // private System.UInt32[] V
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint>* V;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.UInt32[] inwords
    // Size: 0x8
    // Offset: 0x30
    ::Array<uint>* inwords;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.Int32 xOff
    // Size: 0x4
    // Offset: 0x38
    int xOff;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: xOff and: W
    char __padding2[0x4] = {};
    // private System.UInt32[] W
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint>* W;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // Creating value type constructor for type: SM3Digest
    SM3Digest(::Array<uint>* V_ = {}, ::Array<uint>* inwords_ = {}, int xOff_ = {}, ::Array<uint>* W_ = {}) noexcept : V{V_}, inwords{inwords_}, xOff{xOff_}, W{W_} {}
    // Get static field: static private readonly System.UInt32[] T
    static ::Array<uint>* _get_T();
    // Set static field: static private readonly System.UInt32[] T
    static void _set_T(::Array<uint>* value);
    // static private System.Void .cctor()
    // Offset: 0x14B2B48
    static void _cctor();
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Digests.SM3Digest t)
    // Offset: 0x14B2D24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SM3Digest* New_ctor(Org::BouncyCastle::Crypto::Digests::SM3Digest* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Digests::SM3Digest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SM3Digest*, creationType>(t)));
    }
    // private System.Void CopyIn(Org.BouncyCastle.Crypto.Digests.SM3Digest t)
    // Offset: 0x14B2DE4
    void CopyIn(Org::BouncyCastle::Crypto::Digests::SM3Digest* t);
    // private System.UInt32 P0(System.UInt32 x)
    // Offset: 0x14B32D0
    uint P0(uint x);
    // private System.UInt32 P1(System.UInt32 x)
    // Offset: 0x14B32DC
    uint P1(uint x);
    // private System.UInt32 FF0(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x14B32E8
    uint FF0(uint x, uint y, uint z);
    // private System.UInt32 FF1(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x14B32F4
    uint FF1(uint x, uint y, uint z);
    // private System.UInt32 GG0(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x14B3308
    uint GG0(uint x, uint y, uint z);
    // private System.UInt32 GG1(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x14B3314
    uint GG1(uint x, uint y, uint z);
    // public System.Void .ctor()
    // Offset: 0x14B2C6C
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Void GeneralDigest::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SM3Digest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Digests::SM3Digest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SM3Digest*, creationType>()));
    }
    // public override System.String get_AlgorithmName()
    // Offset: 0x14B2E54
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.String GeneralDigest::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public override System.Int32 GetDigestSize()
    // Offset: 0x14B2E9C
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Int32 GeneralDigest::GetDigestSize()
    int GetDigestSize();
    // public override Org.BouncyCastle.Utilities.IMemoable Copy()
    // Offset: 0x14B2EA4
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: Org.BouncyCastle.Utilities.IMemoable GeneralDigest::Copy()
    Org::BouncyCastle::Utilities::IMemoable* Copy();
    // public override System.Void Reset(Org.BouncyCastle.Utilities.IMemoable other)
    // Offset: 0x14B2F04
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Void GeneralDigest::Reset(Org.BouncyCastle.Utilities.IMemoable other)
    void Reset(Org::BouncyCastle::Utilities::IMemoable* other);
    // public override System.Void Reset()
    // Offset: 0x14B2FA8
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Void GeneralDigest::Reset()
    void Reset();
    // public override System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x14B30DC
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Int32 GeneralDigest::DoFinal(System.Byte[] output, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // override System.Void ProcessWord(System.Byte[] input, System.Int32 inOff)
    // Offset: 0x14B313C
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Void GeneralDigest::ProcessWord(System.Byte[] input, System.Int32 inOff)
    void ProcessWord(::Array<uint8_t>* input, int inOff);
    // override System.Void ProcessLength(System.Int64 bitLength)
    // Offset: 0x14B31C8
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Void GeneralDigest::ProcessLength(System.Int64 bitLength)
    void ProcessLength(int64_t bitLength);
    // override System.Void ProcessBlock()
    // Offset: 0x14B3324
    // Implemented from: Org.BouncyCastle.Crypto.Digests.GeneralDigest
    // Base method: System.Void GeneralDigest::ProcessBlock()
    void ProcessBlock();
  }; // Org.BouncyCastle.Crypto.Digests.SM3Digest
  static check_size<sizeof(SM3Digest), 64 + sizeof(::Array<uint>*)> __Org_BouncyCastle_Crypto_Digests_SM3DigestSizeCheck;
  static_assert(sizeof(SM3Digest) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Digests::SM3Digest*, "Org.BouncyCastle.Crypto.Digests", "SM3Digest");
#pragma pack(pop)
