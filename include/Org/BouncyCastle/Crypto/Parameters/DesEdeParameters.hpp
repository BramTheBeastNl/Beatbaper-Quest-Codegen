// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Parameters.DesParameters
#include "Org/BouncyCastle/Crypto/Parameters/DesParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Parameters.DesEdeParameters
  class DesEdeParameters : public Org::BouncyCastle::Crypto::Parameters::DesParameters {
    public:
    // Creating value type constructor for type: DesEdeParameters
    DesEdeParameters() noexcept {}
    // static private System.Byte[] FixKey(System.Byte[] key, System.Int32 keyOff, System.Int32 keyLen)
    // Offset: 0x1258D2C
    static ::Array<uint8_t>* FixKey(::Array<uint8_t>* key, int keyOff, int keyLen);
    // static public System.Boolean IsWeakKey(System.Byte[] key, System.Int32 offset, System.Int32 length)
    // Offset: 0x125903C
    static bool IsWeakKey(::Array<uint8_t>* key, int offset, int length);
    // public System.Void .ctor(System.Byte[] key, System.Int32 keyOff, System.Int32 keyLen)
    // Offset: 0x1258EE0
    // Implemented from: Org.BouncyCastle.Crypto.Parameters.DesParameters
    // Base method: System.Void DesParameters::.ctor(System.Byte[] key, System.Int32 keyOff, System.Int32 keyLen)
    // Base method: System.Void KeyParameter::.ctor(System.Byte[] key, System.Int32 keyOff, System.Int32 keyLen)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DesEdeParameters* New_ctor(::Array<uint8_t>* key, int keyOff, int keyLen) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Parameters::DesEdeParameters::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DesEdeParameters*, creationType>(key, keyOff, keyLen)));
    }
    // static public System.Boolean IsWeakKey(System.Byte[] key)
    // Offset: 0x1258EC4
    // Implemented from: Org.BouncyCastle.Crypto.Parameters.DesParameters
    // Base method: System.Boolean DesParameters::IsWeakKey(System.Byte[] key)
    static bool IsWeakKey(::Array<uint8_t>* key);
  }; // Org.BouncyCastle.Crypto.Parameters.DesEdeParameters
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Parameters::DesEdeParameters*, "Org.BouncyCastle.Crypto.Parameters", "DesEdeParameters");
// Writing MetadataGetter for method: DesEdeParameters::FixKey
// Il2CppName: FixKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Array<uint8_t>*, int, int)>(&DesEdeParameters::FixKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesEdeParameters*), "FixKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DesEdeParameters::IsWeakKey
// Il2CppName: IsWeakKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<uint8_t>*, int, int)>(&DesEdeParameters::IsWeakKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesEdeParameters*), "IsWeakKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DesEdeParameters::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesEdeParameters::*)(::Array<uint8_t>*, int, int)>(&DesEdeParameters::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesEdeParameters*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DesEdeParameters::*)(::Array<uint8_t>*, int, int)>(&DesEdeParameters::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesEdeParameters*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DesEdeParameters::IsWeakKey
// Il2CppName: IsWeakKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<uint8_t>*)>(&DesEdeParameters::IsWeakKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DesEdeParameters*), "IsWeakKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
