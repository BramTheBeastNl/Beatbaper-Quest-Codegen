// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto
namespace Org::BouncyCastle::Crypto {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Check
  class Check : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Check
    Check() noexcept {}
    // static System.Void DataLength(System.Boolean condition, System.String msg)
    // Offset: 0x1CCDEF4
    static void DataLength(bool condition, ::Il2CppString* msg);
    // static System.Void DataLength(System.Byte[] buf, System.Int32 off, System.Int32 len, System.String msg)
    // Offset: 0x1CCDF74
    static void DataLength(::Array<uint8_t>* buf, int off, int len, ::Il2CppString* msg);
    // static System.Void OutputLength(System.Byte[] buf, System.Int32 off, System.Int32 len, System.String msg)
    // Offset: 0x1CCE018
    static void OutputLength(::Array<uint8_t>* buf, int off, int len, ::Il2CppString* msg);
  }; // Org.BouncyCastle.Crypto.Check
  #pragma pack(pop)
  // Writing MetadataGetter for method: Check::DataLength
  // Il2CppName: DataLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::Il2CppString*)>(&Check::DataLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Check*), "DataLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: Check::DataLength
  // Il2CppName: DataLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, int, ::Il2CppString*)>(&Check::DataLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Check*), "DataLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: Check::OutputLength
  // Il2CppName: OutputLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, int, ::Il2CppString*)>(&Check::OutputLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Check*), "OutputLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Check*, "Org.BouncyCastle.Crypto", "Check");
