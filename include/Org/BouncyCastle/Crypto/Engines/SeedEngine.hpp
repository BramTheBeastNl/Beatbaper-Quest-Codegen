// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.SeedEngine
  class SeedEngine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // private System.Int32[] wKey
    // Size: 0x8
    // Offset: 0x10
    ::Array<int>* wKey;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x18
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SeedEngine
    SeedEngine(::Array<int>* wKey_ = {}, bool forEncryption_ = {}) noexcept : wKey{wKey_}, forEncryption{forEncryption_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Get static field: static private readonly System.UInt32[] SS0
    static ::Array<uint>* _get_SS0();
    // Set static field: static private readonly System.UInt32[] SS0
    static void _set_SS0(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SS1
    static ::Array<uint>* _get_SS1();
    // Set static field: static private readonly System.UInt32[] SS1
    static void _set_SS1(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SS2
    static ::Array<uint>* _get_SS2();
    // Set static field: static private readonly System.UInt32[] SS2
    static void _set_SS2(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SS3
    static ::Array<uint>* _get_SS3();
    // Set static field: static private readonly System.UInt32[] SS3
    static void _set_SS3(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] KC
    static ::Array<uint>* _get_KC();
    // Set static field: static private readonly System.UInt32[] KC
    static void _set_KC(::Array<uint>* value);
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1E4A4E8
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x1E4A764
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x1E4A7AC
    bool get_IsPartialBlockOkay();
    // public System.Int32 GetBlockSize()
    // Offset: 0x1E4A7B4
    int GetBlockSize();
    // public System.Int32 ProcessBlock(System.Byte[] inBuf, System.Int32 inOff, System.Byte[] outBuf, System.Int32 outOff)
    // Offset: 0x1E4A7BC
    int ProcessBlock(::Array<uint8_t>* inBuf, int inOff, ::Array<uint8_t>* outBuf, int outOff);
    // public System.Void Reset()
    // Offset: 0x1E4AB04
    void Reset();
    // private System.Int32[] createWorkingKey(System.Byte[] inKey)
    // Offset: 0x1E4A5A0
    ::Array<int>* createWorkingKey(::Array<uint8_t>* inKey);
    // private System.Int32 extractW1(System.Int64 lVal)
    // Offset: 0x1E4AB10
    int extractW1(int64_t lVal);
    // private System.Int32 extractW0(System.Int64 lVal)
    // Offset: 0x1E4AB08
    int extractW0(int64_t lVal);
    // private System.Int64 rotateLeft8(System.Int64 x)
    // Offset: 0x1E4AC24
    int64_t rotateLeft8(int64_t x);
    // private System.Int64 rotateRight8(System.Int64 x)
    // Offset: 0x1E4AC1C
    int64_t rotateRight8(int64_t x);
    // private System.Int64 bytesToLong(System.Byte[] src, System.Int32 srcOff)
    // Offset: 0x1E4A9B8
    int64_t bytesToLong(::Array<uint8_t>* src, int srcOff);
    // private System.Void longToBytes(System.Byte[] dest, System.Int32 destOff, System.Int64 value)
    // Offset: 0x1E4AA94
    void longToBytes(::Array<uint8_t>* dest, int destOff, int64_t value);
    // private System.Int32 G(System.Int32 x)
    // Offset: 0x1E4AB18
    int G(int x);
    // private System.Int64 F(System.Int32 ki0, System.Int32 ki1, System.Int64 r)
    // Offset: 0x1E4AA24
    int64_t F(int ki0, int ki1, int64_t r);
    // private System.Int32 phaseCalc1(System.Int32 r0, System.Int32 ki0, System.Int32 r1, System.Int32 ki1)
    // Offset: 0x1E4AC70
    int phaseCalc1(int r0, int ki0, int r1, int ki1);
    // private System.Int32 phaseCalc2(System.Int32 r0, System.Int32 ki0, System.Int32 r1, System.Int32 ki1)
    // Offset: 0x1E4AC2C
    int phaseCalc2(int r0, int ki0, int r1, int ki1);
    // static private System.Void .cctor()
    // Offset: 0x1E4AC9C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1E4ADE0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SeedEngine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::SeedEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SeedEngine*, creationType>()));
    }
  }; // Org.BouncyCastle.Crypto.Engines.SeedEngine
  #pragma pack(pop)
  static check_size<sizeof(SeedEngine), 24 + sizeof(bool)> __Org_BouncyCastle_Crypto_Engines_SeedEngineSizeCheck;
  static_assert(sizeof(SeedEngine) == 0x19);
  // Writing MetadataGetter for method: SeedEngine::Init
  // Il2CppName: Init
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SeedEngine::*)(bool, Org::BouncyCastle::Crypto::ICipherParameters*)>(&SeedEngine::Init)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Crypto::ICipherParameters*>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::get_AlgorithmName
  // Il2CppName: get_AlgorithmName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SeedEngine::*)()>(&SeedEngine::get_AlgorithmName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "get_AlgorithmName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::get_IsPartialBlockOkay
  // Il2CppName: get_IsPartialBlockOkay
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SeedEngine::*)()>(&SeedEngine::get_IsPartialBlockOkay)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "get_IsPartialBlockOkay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::GetBlockSize
  // Il2CppName: GetBlockSize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)()>(&SeedEngine::GetBlockSize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "GetBlockSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::ProcessBlock
  // Il2CppName: ProcessBlock
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)(::Array<uint8_t>*, int, ::Array<uint8_t>*, int)>(&SeedEngine::ProcessBlock)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "ProcessBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::Reset
  // Il2CppName: Reset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SeedEngine::*)()>(&SeedEngine::Reset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::createWorkingKey
  // Il2CppName: createWorkingKey
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (SeedEngine::*)(::Array<uint8_t>*)>(&SeedEngine::createWorkingKey)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "createWorkingKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::extractW1
  // Il2CppName: extractW1
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)(int64_t)>(&SeedEngine::extractW1)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "extractW1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::extractW0
  // Il2CppName: extractW0
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)(int64_t)>(&SeedEngine::extractW0)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "extractW0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::rotateLeft8
  // Il2CppName: rotateLeft8
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (SeedEngine::*)(int64_t)>(&SeedEngine::rotateLeft8)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "rotateLeft8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::rotateRight8
  // Il2CppName: rotateRight8
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (SeedEngine::*)(int64_t)>(&SeedEngine::rotateRight8)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "rotateRight8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::bytesToLong
  // Il2CppName: bytesToLong
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (SeedEngine::*)(::Array<uint8_t>*, int)>(&SeedEngine::bytesToLong)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "bytesToLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::longToBytes
  // Il2CppName: longToBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SeedEngine::*)(::Array<uint8_t>*, int, int64_t)>(&SeedEngine::longToBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "longToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::G
  // Il2CppName: G
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)(int)>(&SeedEngine::G)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "G", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::F
  // Il2CppName: F
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (SeedEngine::*)(int, int, int64_t)>(&SeedEngine::F)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "F", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::phaseCalc1
  // Il2CppName: phaseCalc1
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)(int, int, int, int)>(&SeedEngine::phaseCalc1)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "phaseCalc1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::phaseCalc2
  // Il2CppName: phaseCalc2
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (SeedEngine::*)(int, int, int, int)>(&SeedEngine::phaseCalc2)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), "phaseCalc2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SeedEngine::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: SeedEngine::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SeedEngine::*)()>(&SeedEngine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SeedEngine::*)()>(&SeedEngine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(SeedEngine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::SeedEngine*, "Org.BouncyCastle.Crypto.Engines", "SeedEngine");
