// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IStreamCipher
#include "Org/BouncyCastle/Crypto/IStreamCipher.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
  class Salsa20Engine : public ::Il2CppObject, public Org::BouncyCastle::Crypto::IStreamCipher {
    public:
    // protected System.Int32 rounds
    // Offset: 0x10
    int rounds;
    // private System.Int32 index
    // Offset: 0x14
    int index;
    // System.UInt32[] engineState
    // Offset: 0x18
    ::Array<uint>* engineState;
    // System.UInt32[] x
    // Offset: 0x20
    ::Array<uint>* x;
    // private System.Byte[] keyStream
    // Offset: 0x28
    ::Array<uint8_t>* keyStream;
    // private System.Boolean initialised
    // Offset: 0x30
    bool initialised;
    // private System.UInt32 cW0
    // Offset: 0x34
    uint cW0;
    // private System.UInt32 cW1
    // Offset: 0x38
    uint cW1;
    // private System.UInt32 cW2
    // Offset: 0x3C
    uint cW2;
    // Get static field: static public readonly System.Int32 DEFAULT_ROUNDS
    static int _get_DEFAULT_ROUNDS();
    // Set static field: static public readonly System.Int32 DEFAULT_ROUNDS
    static void _set_DEFAULT_ROUNDS(int value);
    // Get static field: static private readonly System.UInt32[] TAU_SIGMA
    static ::Array<uint>* _get_TAU_SIGMA();
    // Set static field: static private readonly System.UInt32[] TAU_SIGMA
    static void _set_TAU_SIGMA(::Array<uint>* value);
    // Get static field: static protected readonly System.Byte[] sigma
    static ::Array<uint8_t>* _get_sigma();
    // Set static field: static protected readonly System.Byte[] sigma
    static void _set_sigma(::Array<uint8_t>* value);
    // Get static field: static protected readonly System.Byte[] tau
    static ::Array<uint8_t>* _get_tau();
    // Set static field: static protected readonly System.Byte[] tau
    static void _set_tau(::Array<uint8_t>* value);
    // System.Void PackTauOrSigma(System.Int32 keyLength, System.UInt32[] state, System.Int32 stateOffset)
    // Offset: 0x1C4B13C
    void PackTauOrSigma(int keyLength, ::Array<uint>* state, int stateOffset);
    // public System.Void .ctor(System.Int32 rounds)
    // Offset: 0x1C4B340
    static Salsa20Engine* New_ctor(int rounds);
    // protected System.Int32 get_NonceSize()
    // Offset: 0x1C4B7B0
    int get_NonceSize();
    // public System.String get_AlgorithmName()
    // Offset: 0x1C4B7B8
    ::Il2CppString* get_AlgorithmName();
    // protected System.Void AdvanceCounter()
    // Offset: 0x1C4B88C
    void AdvanceCounter();
    // protected System.Void ResetCounter()
    // Offset: 0x1C4BBB8
    void ResetCounter();
    // protected System.Void SetKey(System.Byte[] keyBytes, System.Byte[] ivBytes)
    // Offset: 0x1C4BBF0
    void SetKey(::Array<uint8_t>* keyBytes, ::Array<uint8_t>* ivBytes);
    // protected System.Void GenerateKeyStream(System.Byte[] output)
    // Offset: 0x1C4BE58
    void GenerateKeyStream(::Array<uint8_t>* output);
    // static System.Void SalsaCore(System.Int32 rounds, System.UInt32[] input, System.UInt32[] x)
    // Offset: 0x1C4BEF4
    static void SalsaCore(int rounds, ::Array<uint>* input, ::Array<uint>* x);
    // private System.Void ResetLimitCounter()
    // Offset: 0x1C4BBAC
    void ResetLimitCounter();
    // private System.Boolean LimitExceeded(System.UInt32 len)
    // Offset: 0x1C4BB54
    bool LimitExceeded(uint len);
    // static private System.Void .cctor()
    // Offset: 0x1C4C56C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1C4B2D0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Salsa20Engine* New_ctor();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1C4B450
    // Implemented from: Org.BouncyCastle.Crypto.IStreamCipher
    // Base method: System.Void IStreamCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Void ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x1C4B8F0
    // Implemented from: Org.BouncyCastle.Crypto.IStreamCipher
    // Base method: System.Void IStreamCipher::ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    void ProcessBytes(::Array<uint8_t>* inBytes, int inOff, int len, ::Array<uint8_t>* outBytes, int outOff);
    // public System.Void Reset()
    // Offset: 0x1C4BB90
    // Implemented from: Org.BouncyCastle.Crypto.IStreamCipher
    // Base method: System.Void IStreamCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Engines.Salsa20Engine
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*, "Org.BouncyCastle.Crypto.Engines", "Salsa20Engine");
#pragma pack(pop)
