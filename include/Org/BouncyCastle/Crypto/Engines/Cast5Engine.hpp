// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.Cast5Engine
  class Cast5Engine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // private System.Int32[] _Kr
    // Size: 0x8
    // Offset: 0x10
    ::Array<int>* Kr;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.UInt32[] _Km
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint>* Km;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.Boolean _encrypting
    // Size: 0x1
    // Offset: 0x20
    bool encrypting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: encrypting and: workingKey
    char __padding2[0x7] = {};
    // private System.Byte[] _workingKey
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* workingKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 _rounds
    // Size: 0x4
    // Offset: 0x30
    int rounds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Cast5Engine
    Cast5Engine(::Array<int>* Kr_ = {}, ::Array<uint>* Km_ = {}, bool encrypting_ = {}, ::Array<uint8_t>* workingKey_ = {}, int rounds_ = {}) noexcept : Kr{Kr_}, Km{Km_}, encrypting{encrypting_}, workingKey{workingKey_}, rounds{rounds_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Get static field: static private readonly System.UInt32[] S1
    static ::Array<uint>* _get_S1();
    // Set static field: static private readonly System.UInt32[] S1
    static void _set_S1(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S2
    static ::Array<uint>* _get_S2();
    // Set static field: static private readonly System.UInt32[] S2
    static void _set_S2(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S3
    static ::Array<uint>* _get_S3();
    // Set static field: static private readonly System.UInt32[] S3
    static void _set_S3(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S4
    static ::Array<uint>* _get_S4();
    // Set static field: static private readonly System.UInt32[] S4
    static void _set_S4(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S5
    static ::Array<uint>* _get_S5();
    // Set static field: static private readonly System.UInt32[] S5
    static void _set_S5(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S6
    static ::Array<uint>* _get_S6();
    // Set static field: static private readonly System.UInt32[] S6
    static void _set_S6(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S7
    static ::Array<uint>* _get_S7();
    // Set static field: static private readonly System.UInt32[] S7
    static void _set_S7(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] S8
    static ::Array<uint>* _get_S8();
    // Set static field: static private readonly System.UInt32[] S8
    static void _set_S8(::Array<uint>* value);
    // Get static field: static readonly System.Int32 MAX_ROUNDS
    static int _get_MAX_ROUNDS();
    // Set static field: static readonly System.Int32 MAX_ROUNDS
    static void _set_MAX_ROUNDS(int value);
    // Get static field: static readonly System.Int32 RED_ROUNDS
    static int _get_RED_ROUNDS();
    // Set static field: static readonly System.Int32 RED_ROUNDS
    static void _set_RED_ROUNDS(int value);
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1D97A00
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x1D97B90
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x1D97BD8
    bool get_IsPartialBlockOkay();
    // public System.Int32 ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1D97BE0
    int ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1D97D34
    void Reset();
    // public System.Int32 GetBlockSize()
    // Offset: 0x1D97D38
    int GetBlockSize();
    // System.Void SetKey(System.Byte[] key)
    // Offset: 0x1D97D40
    void SetKey(::Array<uint8_t>* key);
    // System.Int32 EncryptBlock(System.Byte[] src, System.Int32 srcIndex, System.Byte[] dst, System.Int32 dstIndex)
    // Offset: 0x1D9B8C0
    int EncryptBlock(::Array<uint8_t>* src, int srcIndex, ::Array<uint8_t>* dst, int dstIndex);
    // System.Int32 DecryptBlock(System.Byte[] src, System.Int32 srcIndex, System.Byte[] dst, System.Int32 dstIndex)
    // Offset: 0x1D9BC1C
    int DecryptBlock(::Array<uint8_t>* src, int srcIndex, ::Array<uint8_t>* dst, int dstIndex);
    // static System.UInt32 F1(System.UInt32 D, System.UInt32 Kmi, System.Int32 Kri)
    // Offset: 0x1D9BF94
    static uint F1(uint D, uint Kmi, int Kri);
    // static System.UInt32 F2(System.UInt32 D, System.UInt32 Kmi, System.Int32 Kri)
    // Offset: 0x1D9C0B4
    static uint F2(uint D, uint Kmi, int Kri);
    // static System.UInt32 F3(System.UInt32 D, System.UInt32 Kmi, System.Int32 Kri)
    // Offset: 0x1D9C1D4
    static uint F3(uint D, uint Kmi, int Kri);
    // System.Void CAST_Encipher(System.UInt32 L0, System.UInt32 R0, System.UInt32[] result)
    // Offset: 0x1D9B9CC
    void CAST_Encipher(uint L0, uint R0, ::Array<uint>* result);
    // System.Void CAST_Decipher(System.UInt32 L16, System.UInt32 R16, System.UInt32[] result)
    // Offset: 0x1D9BD28
    void CAST_Decipher(uint L16, uint R16, ::Array<uint>* result);
    // static System.Void Bits32ToInts(System.UInt32 inData, System.Int32[] b, System.Int32 offset)
    // Offset: 0x1D9B830
    static void Bits32ToInts(uint inData, ::Array<int>* b, int offset);
    // static System.UInt32 IntsTo32bits(System.Int32[] b, System.Int32 i)
    // Offset: 0x1D9B7AC
    static uint IntsTo32bits(::Array<int>* b, int i);
    // static private System.Void .cctor()
    // Offset: 0x1D9C2F4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1D97958
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cast5Engine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::Cast5Engine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cast5Engine*, creationType>()));
    }
  }; // Org.BouncyCastle.Crypto.Engines.Cast5Engine
  #pragma pack(pop)
  static check_size<sizeof(Cast5Engine), 48 + sizeof(int)> __Org_BouncyCastle_Crypto_Engines_Cast5EngineSizeCheck;
  static_assert(sizeof(Cast5Engine) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::Cast5Engine*, "Org.BouncyCastle.Crypto.Engines", "Cast5Engine");
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::Init
// Il2CppName: Init
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::get_AlgorithmName
// Il2CppName: get_AlgorithmName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::get_IsPartialBlockOkay
// Il2CppName: get_IsPartialBlockOkay
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::ProcessBlock
// Il2CppName: ProcessBlock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::Reset
// Il2CppName: Reset
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::GetBlockSize
// Il2CppName: GetBlockSize
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::SetKey
// Il2CppName: SetKey
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::EncryptBlock
// Il2CppName: EncryptBlock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::DecryptBlock
// Il2CppName: DecryptBlock
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::F1
// Il2CppName: F1
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::F2
// Il2CppName: F2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::F3
// Il2CppName: F3
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::CAST_Encipher
// Il2CppName: CAST_Encipher
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::CAST_Decipher
// Il2CppName: CAST_Decipher
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::Bits32ToInts
// Il2CppName: Bits32ToInts
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::IntsTo32bits
// Il2CppName: IntsTo32bits
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::Cast5Engine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
