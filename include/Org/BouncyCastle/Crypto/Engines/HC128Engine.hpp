// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IStreamCipher
#include "Org/BouncyCastle/Crypto/IStreamCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.HC128Engine
  class HC128Engine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IStreamCipher*/ {
    public:
    // private System.UInt32[] p
    // Size: 0x8
    // Offset: 0x10
    ::Array<uint>* p;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.UInt32[] q
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint>* q;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.UInt32 cnt
    // Size: 0x4
    // Offset: 0x20
    uint cnt;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: cnt and: key
    char __padding2[0x4] = {};
    // private System.Byte[] key
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* key;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] iv
    // Size: 0x8
    // Offset: 0x30
    ::Array<uint8_t>* iv;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Boolean initialised
    // Size: 0x1
    // Offset: 0x38
    bool initialised;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialised and: buf
    char __padding5[0x7] = {};
    // private System.Byte[] buf
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* buf;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 idx
    // Size: 0x4
    // Offset: 0x48
    int idx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: HC128Engine
    HC128Engine(::Array<uint>* p_ = {}, ::Array<uint>* q_ = {}, uint cnt_ = {}, ::Array<uint8_t>* key_ = {}, ::Array<uint8_t>* iv_ = {}, bool initialised_ = {}, ::Array<uint8_t>* buf_ = {}, int idx_ = {}) noexcept : p{p_}, q{q_}, cnt{cnt_}, key{key_}, iv{iv_}, initialised{initialised_}, buf{buf_}, idx{idx_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IStreamCipher
    operator Org::BouncyCastle::Crypto::IStreamCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IStreamCipher*>(this);
    }
    // static private System.UInt32 F1(System.UInt32 x)
    // Offset: 0x1DA1358
    static uint F1(uint x);
    // static private System.UInt32 F2(System.UInt32 x)
    // Offset: 0x1DA1370
    static uint F2(uint x);
    // private System.UInt32 G1(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x1DA1380
    uint G1(uint x, uint y, uint z);
    // private System.UInt32 G2(System.UInt32 x, System.UInt32 y, System.UInt32 z)
    // Offset: 0x1DA1394
    uint G2(uint x, uint y, uint z);
    // static private System.UInt32 RotateLeft(System.UInt32 x, System.Int32 bits)
    // Offset: 0x1DA13A8
    static uint RotateLeft(uint x, int bits);
    // static private System.UInt32 RotateRight(System.UInt32 x, System.Int32 bits)
    // Offset: 0x1DA1368
    static uint RotateRight(uint x, int bits);
    // private System.UInt32 H1(System.UInt32 x)
    // Offset: 0x1DA13B4
    uint H1(uint x);
    // private System.UInt32 H2(System.UInt32 x)
    // Offset: 0x1DA140C
    uint H2(uint x);
    // static private System.UInt32 Mod1024(System.UInt32 x)
    // Offset: 0x1DA1464
    static uint Mod1024(uint x);
    // static private System.UInt32 Mod512(System.UInt32 x)
    // Offset: 0x1DA146C
    static uint Mod512(uint x);
    // static private System.UInt32 Dim(System.UInt32 x, System.UInt32 y)
    // Offset: 0x1DA1474
    static uint Dim(uint x, uint y);
    // private System.UInt32 Step()
    // Offset: 0x1DA1480
    uint Step();
    // private System.Void Init()
    // Offset: 0x1DA164C
    void Init();
    // public System.String get_AlgorithmName()
    // Offset: 0x1DA1958
    ::Il2CppString* get_AlgorithmName();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1DA19A0
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // private System.Byte GetByte()
    // Offset: 0x1DA1B70
    uint8_t GetByte();
    // public System.Void ProcessBytes(System.Byte[] input, System.Int32 inOff, System.Int32 len, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1DA1BF0
    void ProcessBytes(::Array<uint8_t>* input, int inOff, int len, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1DA1D90
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x1DA1D94
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HC128Engine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::HC128Engine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HC128Engine*, creationType>()));
    }
  }; // Org.BouncyCastle.Crypto.Engines.HC128Engine
  #pragma pack(pop)
  static check_size<sizeof(HC128Engine), 72 + sizeof(int)> __Org_BouncyCastle_Crypto_Engines_HC128EngineSizeCheck;
  static_assert(sizeof(HC128Engine) == 0x4C);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::HC128Engine*, "Org.BouncyCastle.Crypto.Engines", "HC128Engine");
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::F1
// Il2CppName: F1
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::F2
// Il2CppName: F2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::G1
// Il2CppName: G1
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::G2
// Il2CppName: G2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::RotateLeft
// Il2CppName: RotateLeft
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::RotateRight
// Il2CppName: RotateRight
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::H1
// Il2CppName: H1
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::H2
// Il2CppName: H2
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Mod1024
// Il2CppName: Mod1024
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Mod512
// Il2CppName: Mod512
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Dim
// Il2CppName: Dim
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Step
// Il2CppName: Step
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Init
// Il2CppName: Init
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::get_AlgorithmName
// Il2CppName: get_AlgorithmName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Init
// Il2CppName: Init
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::GetByte
// Il2CppName: GetByte
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::ProcessBytes
// Il2CppName: ProcessBytes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::Reset
// Il2CppName: Reset
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Engines::HC128Engine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
