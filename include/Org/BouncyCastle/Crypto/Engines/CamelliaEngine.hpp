// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.CamelliaEngine
  class CamelliaEngine : public ::Il2CppObject, public Org::BouncyCastle::Crypto::IBlockCipher {
    public:
    // private System.Boolean initialised
    // Offset: 0x10
    bool initialised;
    // private System.Boolean _keyIs128
    // Offset: 0x11
    bool keyIs128;
    // private System.UInt32[] subkey
    // Offset: 0x18
    ::Array<uint>* subkey;
    // private System.UInt32[] kw
    // Offset: 0x20
    ::Array<uint>* kw;
    // private System.UInt32[] ke
    // Offset: 0x28
    ::Array<uint>* ke;
    // private System.UInt32[] state
    // Offset: 0x30
    ::Array<uint>* state;
    // Get static field: static private readonly System.UInt32[] SIGMA
    static ::Array<uint>* _get_SIGMA();
    // Set static field: static private readonly System.UInt32[] SIGMA
    static void _set_SIGMA(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SBOX1_1110
    static ::Array<uint>* _get_SBOX1_1110();
    // Set static field: static private readonly System.UInt32[] SBOX1_1110
    static void _set_SBOX1_1110(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SBOX4_4404
    static ::Array<uint>* _get_SBOX4_4404();
    // Set static field: static private readonly System.UInt32[] SBOX4_4404
    static void _set_SBOX4_4404(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SBOX2_0222
    static ::Array<uint>* _get_SBOX2_0222();
    // Set static field: static private readonly System.UInt32[] SBOX2_0222
    static void _set_SBOX2_0222(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SBOX3_3033
    static ::Array<uint>* _get_SBOX3_3033();
    // Set static field: static private readonly System.UInt32[] SBOX3_3033
    static void _set_SBOX3_3033(::Array<uint>* value);
    // static private System.UInt32 rightRotate(System.UInt32 x, System.Int32 s)
    // Offset: 0x19639D8
    static uint rightRotate(uint x, int s);
    // static private System.UInt32 leftRotate(System.UInt32 x, System.Int32 s)
    // Offset: 0x19639EC
    static uint leftRotate(uint x, int s);
    // static private System.Void roldq(System.Int32 rot, System.UInt32[] ki, System.Int32 ioff, System.UInt32[] ko, System.Int32 ooff)
    // Offset: 0x1963A00
    static void roldq(int rot, ::Array<uint>* ki, int ioff, ::Array<uint>* ko, int ooff);
    // static private System.Void decroldq(System.Int32 rot, System.UInt32[] ki, System.Int32 ioff, System.UInt32[] ko, System.Int32 ooff)
    // Offset: 0x1963BD0
    static void decroldq(int rot, ::Array<uint>* ki, int ioff, ::Array<uint>* ko, int ooff);
    // static private System.Void roldqo32(System.Int32 rot, System.UInt32[] ki, System.Int32 ioff, System.UInt32[] ko, System.Int32 ooff)
    // Offset: 0x1963DA0
    static void roldqo32(int rot, ::Array<uint>* ki, int ioff, ::Array<uint>* ko, int ooff);
    // static private System.Void decroldqo32(System.Int32 rot, System.UInt32[] ki, System.Int32 ioff, System.UInt32[] ko, System.Int32 ooff)
    // Offset: 0x1963F74
    static void decroldqo32(int rot, ::Array<uint>* ki, int ioff, ::Array<uint>* ko, int ooff);
    // static private System.UInt32 bytes2uint(System.Byte[] src, System.Int32 offset)
    // Offset: 0x1964148
    static uint bytes2uint(::Array<uint8_t>* src, int offset);
    // static private System.Void uint2bytes(System.UInt32 word, System.Byte[] dst, System.Int32 offset)
    // Offset: 0x19641B8
    static void uint2bytes(uint word, ::Array<uint8_t>* dst, int offset);
    // static private System.Void camelliaF2(System.UInt32[] s, System.UInt32[] skey, System.Int32 keyoff)
    // Offset: 0x196420C
    static void camelliaF2(::Array<uint>* s, ::Array<uint>* skey, int keyoff);
    // static private System.Void camelliaFLs(System.UInt32[] s, System.UInt32[] fkey, System.Int32 keyoff)
    // Offset: 0x1964548
    static void camelliaFLs(::Array<uint>* s, ::Array<uint>* fkey, int keyoff);
    // private System.Void setKey(System.Boolean forEncryption, System.Byte[] key)
    // Offset: 0x196469C
    void setKey(bool forEncryption, ::Array<uint8_t>* key);
    // private System.Int32 processBlock128(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x196589C
    int processBlock128(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // private System.Int32 processBlock192or256(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1965BDC
    int processBlock192or256(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // static private System.Void .cctor()
    // Offset: 0x1966284
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1965F58
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static CamelliaEngine* New_ctor();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x196601C
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x1966104
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.String IBlockCipher::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x196614C
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Boolean IBlockCipher::get_IsPartialBlockOkay()
    bool get_IsPartialBlockOkay();
    // public System.Int32 GetBlockSize()
    // Offset: 0x1966154
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Int32 ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x196615C
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    int ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1966280
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Engines.CamelliaEngine
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::CamelliaEngine*, "Org.BouncyCastle.Crypto.Engines", "CamelliaEngine");
#pragma pack(pop)
