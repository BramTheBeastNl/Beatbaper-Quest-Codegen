// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
#include "Org/BouncyCastle/Crypto/Engines/Salsa20Engine.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.ChaChaEngine
  class ChaChaEngine : public Org::BouncyCastle::Crypto::Engines::Salsa20Engine {
    public:
    // Creating value type constructor for type: ChaChaEngine
    ChaChaEngine() noexcept {}
    // static System.Void ChachaCore(System.Int32 rounds, System.UInt32[] input, System.UInt32[] x)
    // Offset: 0x1D9DDB4
    static void ChachaCore(int rounds, ::Array<uint>* input, ::Array<uint>* x);
    // public System.Void .ctor()
    // Offset: 0x1D9E488
    // Implemented from: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
    // Base method: System.Void Salsa20Engine::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChaChaEngine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::ChaChaEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChaChaEngine*, creationType>()));
    }
    // public override System.String get_AlgorithmName()
    // Offset: 0x1D9E4F0
    // Implemented from: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
    // Base method: System.String Salsa20Engine::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // protected override System.Void AdvanceCounter()
    // Offset: 0x1D9E570
    // Implemented from: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
    // Base method: System.Void Salsa20Engine::AdvanceCounter()
    void AdvanceCounter();
    // protected override System.Void ResetCounter()
    // Offset: 0x1D9E5D4
    // Implemented from: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
    // Base method: System.Void Salsa20Engine::ResetCounter()
    void ResetCounter();
    // protected override System.Void SetKey(System.Byte[] keyBytes, System.Byte[] ivBytes)
    // Offset: 0x1D9E60C
    // Implemented from: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
    // Base method: System.Void Salsa20Engine::SetKey(System.Byte[] keyBytes, System.Byte[] ivBytes)
    void SetKey(::Array<uint8_t>* keyBytes, ::Array<uint8_t>* ivBytes);
    // protected override System.Void GenerateKeyStream(System.Byte[] output)
    // Offset: 0x1D9E748
    // Implemented from: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
    // Base method: System.Void Salsa20Engine::GenerateKeyStream(System.Byte[] output)
    void GenerateKeyStream(::Array<uint8_t>* output);
  }; // Org.BouncyCastle.Crypto.Engines.ChaChaEngine
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::ChaChaEngine*, "Org.BouncyCastle.Crypto.Engines", "ChaChaEngine");
// Writing MetadataGetter for method: ChaChaEngine::ChachaCore
// Il2CppName: ChachaCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ::Array<uint>*, ::Array<uint>*)>(&ChaChaEngine::ChachaCore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), "ChachaCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: ChaChaEngine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChaChaEngine::*)()>(&ChaChaEngine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChaChaEngine::*)()>(&ChaChaEngine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ChaChaEngine::get_AlgorithmName
// Il2CppName: get_AlgorithmName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ChaChaEngine::*)()>(&ChaChaEngine::get_AlgorithmName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), "get_AlgorithmName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ChaChaEngine::AdvanceCounter
// Il2CppName: AdvanceCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChaChaEngine::*)()>(&ChaChaEngine::AdvanceCounter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), "AdvanceCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ChaChaEngine::ResetCounter
// Il2CppName: ResetCounter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChaChaEngine::*)()>(&ChaChaEngine::ResetCounter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), "ResetCounter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ChaChaEngine::SetKey
// Il2CppName: SetKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChaChaEngine::*)(::Array<uint8_t>*, ::Array<uint8_t>*)>(&ChaChaEngine::SetKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), "SetKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: ChaChaEngine::GenerateKeyStream
// Il2CppName: GenerateKeyStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ChaChaEngine::*)(::Array<uint8_t>*)>(&ChaChaEngine::GenerateKeyStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ChaChaEngine*), "GenerateKeyStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
