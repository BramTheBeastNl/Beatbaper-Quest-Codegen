// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Modes.Gcm
namespace Org::BouncyCastle::Crypto::Modes::Gcm {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities
  class GcmUtilities : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: GcmUtilities
    GcmUtilities() noexcept {}
    // Get static field: static private readonly System.UInt32[] LOOKUP
    static ::Array<uint>* _get_LOOKUP();
    // Set static field: static private readonly System.UInt32[] LOOKUP
    static void _set_LOOKUP(::Array<uint>* value);
    // static private System.UInt32[] GenerateLookup()
    // Offset: 0x18D02C0
    static ::Array<uint>* GenerateLookup();
    // static System.UInt32[] OneAsUints()
    // Offset: 0x18D03B0
    static ::Array<uint>* OneAsUints();
    // static System.Void AsBytes(System.UInt32[] x, System.Byte[] z)
    // Offset: 0x18D0424
    static void AsBytes(::Array<uint>* x, ::Array<uint8_t>* z);
    // static System.UInt32[] AsUints(System.Byte[] bs)
    // Offset: 0x18D0430
    static ::Array<uint>* AsUints(::Array<uint8_t>* bs);
    // static System.Void Multiply(System.Byte[] x, System.Byte[] y)
    // Offset: 0x18D04A0
    static void Multiply(::Array<uint8_t>* x, ::Array<uint8_t>* y);
    // static System.Void Multiply(System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x18D053C
    static void Multiply(::Array<uint>* x, ::Array<uint>* y);
    // static System.Void MultiplyP(System.UInt32[] x)
    // Offset: 0x18D0614
    static void MultiplyP(::Array<uint>* x);
    // static System.Void MultiplyP8(System.UInt32[] x)
    // Offset: 0x18D072C
    static void MultiplyP8(::Array<uint>* x);
    // static System.UInt32 ShiftRight(System.UInt32[] x)
    // Offset: 0x18D06B0
    static uint ShiftRight(::Array<uint>* x);
    // static System.UInt32 ShiftRightN(System.UInt32[] x, System.Int32 n)
    // Offset: 0x18D07E8
    static uint ShiftRightN(::Array<uint>* x, int n);
    // static System.Void Xor(System.Byte[] x, System.Byte[] y)
    // Offset: 0x18D0888
    static void Xor(::Array<uint8_t>* x, ::Array<uint8_t>* y);
    // static System.Void Xor(System.Byte[] x, System.Byte[] y, System.Int32 yOff)
    // Offset: 0x18D0980
    static void Xor(::Array<uint8_t>* x, ::Array<uint8_t>* y, int yOff);
    // static System.Void Xor(System.Byte[] x, System.Int32 xOff, System.Byte[] y, System.Int32 yOff, System.Byte[] z, System.Int32 zOff)
    // Offset: 0x18D0A98
    static void Xor(::Array<uint8_t>* x, int xOff, ::Array<uint8_t>* y, int yOff, ::Array<uint8_t>* z, int zOff);
    // static System.Void Xor(System.Byte[] x, System.Byte[] y, System.Int32 yOff, System.Int32 yLen)
    // Offset: 0x18D0C34
    static void Xor(::Array<uint8_t>* x, ::Array<uint8_t>* y, int yOff, int yLen);
    // static System.Void Xor(System.Byte[] x, System.Int32 xOff, System.Byte[] y, System.Int32 yOff, System.Int32 len)
    // Offset: 0x18D0CA8
    static void Xor(::Array<uint8_t>* x, int xOff, ::Array<uint8_t>* y, int yOff, int len);
    // static System.Void Xor(System.UInt32[] x, System.UInt32[] y)
    // Offset: 0x18D0D18
    static void Xor(::Array<uint>* x, ::Array<uint>* y);
    // static private System.Void .cctor()
    // Offset: 0x18D0DCC
    static void _cctor();
  }; // Org.BouncyCastle.Crypto.Modes.Gcm.GcmUtilities
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Modes::Gcm::GcmUtilities*, "Org.BouncyCastle.Crypto.Modes.Gcm", "GcmUtilities");
// Writing MetadataGetter for method: GcmUtilities::GenerateLookup
// Il2CppName: GenerateLookup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint>* (*)()>(&GcmUtilities::GenerateLookup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "GenerateLookup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GcmUtilities::OneAsUints
// Il2CppName: OneAsUints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint>* (*)()>(&GcmUtilities::OneAsUints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "OneAsUints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GcmUtilities::AsBytes
// Il2CppName: AsBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint>*, ::Array<uint8_t>*)>(&GcmUtilities::AsBytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "AsBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::AsUints
// Il2CppName: AsUints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint>* (*)(::Array<uint8_t>*)>(&GcmUtilities::AsUints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "AsUints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, ::Array<uint8_t>*)>(&GcmUtilities::Multiply)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint>*, ::Array<uint>*)>(&GcmUtilities::Multiply)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::MultiplyP
// Il2CppName: MultiplyP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint>*)>(&GcmUtilities::MultiplyP)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "MultiplyP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::MultiplyP8
// Il2CppName: MultiplyP8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint>*)>(&GcmUtilities::MultiplyP8)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "MultiplyP8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::ShiftRight
// Il2CppName: ShiftRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Array<uint>*)>(&GcmUtilities::ShiftRight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "ShiftRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::ShiftRightN
// Il2CppName: ShiftRightN
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Array<uint>*, int)>(&GcmUtilities::ShiftRightN)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "ShiftRightN", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Xor
// Il2CppName: Xor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, ::Array<uint8_t>*)>(&GcmUtilities::Xor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Xor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Xor
// Il2CppName: Xor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, ::Array<uint8_t>*, int)>(&GcmUtilities::Xor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Xor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Xor
// Il2CppName: Xor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, ::Array<uint8_t>*, int, ::Array<uint8_t>*, int)>(&GcmUtilities::Xor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Xor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Xor
// Il2CppName: Xor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, ::Array<uint8_t>*, int, int)>(&GcmUtilities::Xor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Xor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Xor
// Il2CppName: Xor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, ::Array<uint8_t>*, int, int)>(&GcmUtilities::Xor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Xor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::Xor
// Il2CppName: Xor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint>*, ::Array<uint>*)>(&GcmUtilities::Xor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), "Xor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: GcmUtilities::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GcmUtilities::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GcmUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
