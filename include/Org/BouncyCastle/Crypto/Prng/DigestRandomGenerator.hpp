// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Prng.IRandomGenerator
#include "Org/BouncyCastle/Crypto/Prng/IRandomGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IDigest
  class IDigest;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Prng
namespace Org::BouncyCastle::Crypto::Prng {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator
  class DigestRandomGenerator : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::Prng::IRandomGenerator*/ {
    public:
    // private System.Int64 stateCounter
    // Size: 0x8
    // Offset: 0x10
    int64_t stateCounter;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 seedCounter
    // Size: 0x8
    // Offset: 0x18
    int64_t seedCounter;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private Org.BouncyCastle.Crypto.IDigest digest
    // Size: 0x8
    // Offset: 0x20
    Org::BouncyCastle::Crypto::IDigest* digest;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::IDigest*) == 0x8);
    // private System.Byte[] state
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* state;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] seed
    // Size: 0x8
    // Offset: 0x30
    ::Array<uint8_t>* seed;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: DigestRandomGenerator
    DigestRandomGenerator(int64_t stateCounter_ = {}, int64_t seedCounter_ = {}, Org::BouncyCastle::Crypto::IDigest* digest_ = {}, ::Array<uint8_t>* state_ = {}, ::Array<uint8_t>* seed_ = {}) noexcept : stateCounter{stateCounter_}, seedCounter{seedCounter_}, digest{digest_}, state{state_}, seed{seed_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::Prng::IRandomGenerator
    operator Org::BouncyCastle::Crypto::Prng::IRandomGenerator() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::Prng::IRandomGenerator*>(this);
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IDigest digest)
    // Offset: 0x125EDC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DigestRandomGenerator* New_ctor(Org::BouncyCastle::Crypto::IDigest* digest) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DigestRandomGenerator*, creationType>(digest)));
    }
    // public System.Void AddSeedMaterial(System.Byte[] inSeed)
    // Offset: 0x125EF34
    void AddSeedMaterial(::Array<uint8_t>* inSeed);
    // public System.Void AddSeedMaterial(System.Int64 rSeed)
    // Offset: 0x125F16C
    void AddSeedMaterial(int64_t rSeed);
    // public System.Void NextBytes(System.Byte[] bytes)
    // Offset: 0x125F310
    void NextBytes(::Array<uint8_t>* bytes);
    // public System.Void NextBytes(System.Byte[] bytes, System.Int32 start, System.Int32 len)
    // Offset: 0x125F32C
    void NextBytes(::Array<uint8_t>* bytes, int start, int len);
    // private System.Void CycleSeed()
    // Offset: 0x125F50C
    void CycleSeed();
    // private System.Void GenerateState()
    // Offset: 0x125F488
    void GenerateState();
    // private System.Void DigestAddCounter(System.Int64 seedVal)
    // Offset: 0x125F208
    void DigestAddCounter(int64_t seedVal);
    // private System.Void DigestUpdate(System.Byte[] inSeed)
    // Offset: 0x125EFD0
    void DigestUpdate(::Array<uint8_t>* inSeed);
    // private System.Void DigestDoFinal(System.Byte[] result)
    // Offset: 0x125F0A4
    void DigestDoFinal(::Array<uint8_t>* result);
  }; // Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator
  #pragma pack(pop)
  static check_size<sizeof(DigestRandomGenerator), 48 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Crypto_Prng_DigestRandomGeneratorSizeCheck;
  static_assert(sizeof(DigestRandomGenerator) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator*, "Org.BouncyCastle.Crypto.Prng", "DigestRandomGenerator");
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::AddSeedMaterial
// Il2CppName: AddSeedMaterial
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::AddSeedMaterial
// Il2CppName: AddSeedMaterial
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::NextBytes
// Il2CppName: NextBytes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::NextBytes
// Il2CppName: NextBytes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::CycleSeed
// Il2CppName: CycleSeed
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::GenerateState
// Il2CppName: GenerateState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::DigestAddCounter
// Il2CppName: DigestAddCounter
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::DigestUpdate
// Il2CppName: DigestUpdate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator::DigestDoFinal
// Il2CppName: DigestDoFinal
// Cannot perform method pointer template specialization from operators!
