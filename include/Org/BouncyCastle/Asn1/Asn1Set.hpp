// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Asn1.Asn1Object
#include "Org/BouncyCastle/Asn1/Asn1Object.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Skipping declaration: Asn1Encodable because it is already included!
  // Forward declaring type: Asn1TaggedObject
  class Asn1TaggedObject;
  // Forward declaring type: Asn1EncodableVector
  class Asn1EncodableVector;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1
namespace Org::BouncyCastle::Asn1 {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Asn1.Asn1Set
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: CFE8D0
  class Asn1Set : public Org::BouncyCastle::Asn1::Asn1Object/*, public System::Collections::IEnumerable*/ {
    public:
    // Nested type: Org::BouncyCastle::Asn1::Asn1Set::DerComparer
    class DerComparer;
    // Org.BouncyCastle.Asn1.Asn1Encodable[] elements
    // Size: 0x8
    // Offset: 0x10
    ::Array<Org::BouncyCastle::Asn1::Asn1Encodable*>* elements;
    // Field size check
    static_assert(sizeof(::Array<Org::BouncyCastle::Asn1::Asn1Encodable*>*) == 0x8);
    // Creating value type constructor for type: Asn1Set
    Asn1Set(::Array<Org::BouncyCastle::Asn1::Asn1Encodable*>* elements_ = {}) noexcept : elements{elements_} {}
    // Creating interface conversion operator: operator System::Collections::IEnumerable
    operator System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerable*>(this);
    }
    // Creating conversion operator: operator ::Array<Org::BouncyCastle::Asn1::Asn1Encodable*>*
    constexpr operator ::Array<Org::BouncyCastle::Asn1::Asn1Encodable*>*() const noexcept {
      return elements;
    }
    // static public Org.BouncyCastle.Asn1.Asn1Set GetInstance(System.Object obj)
    // Offset: 0x1543060
    static Org::BouncyCastle::Asn1::Asn1Set* GetInstance(::Il2CppObject* obj);
    // static public Org.BouncyCastle.Asn1.Asn1Set GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject obj, System.Boolean explicitly)
    // Offset: 0x15433EC
    static Org::BouncyCastle::Asn1::Asn1Set* GetInstance(Org::BouncyCastle::Asn1::Asn1TaggedObject* obj, bool explicitly);
    // protected internal System.Void .ctor(Org.BouncyCastle.Asn1.Asn1Encodable element)
    // Offset: 0x154392C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Asn1Set* New_ctor(Org::BouncyCastle::Asn1::Asn1Encodable* element) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Asn1::Asn1Set::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Asn1Set*, creationType>(element)));
    }
    // protected internal System.Void .ctor(Org.BouncyCastle.Asn1.Asn1EncodableVector elementVector)
    // Offset: 0x1543A20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Asn1Set* New_ctor(Org::BouncyCastle::Asn1::Asn1EncodableVector* elementVector) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Asn1::Asn1Set::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Asn1Set*, creationType>(elementVector)));
    }
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1543AC4
    System::Collections::IEnumerator* GetEnumerator_NEW();
    // public Org.BouncyCastle.Asn1.Asn1Encodable get_Item(System.Int32 index)
    // Offset: 0x1543AE0
    Org::BouncyCastle::Asn1::Asn1Encodable* get_Item_NEW(int index);
    // public System.Int32 get_Count()
    // Offset: 0x1543B1C
    int get_Count_NEW();
    // protected internal System.Void Sort()
    // Offset: 0x1543D58
    void Sort();
    // protected internal System.Void .ctor()
    // Offset: 0x15438B0
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Object
    // Base method: System.Void Asn1Object::.ctor()
    // Base method: System.Void Asn1Encodable::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Asn1Set* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Asn1::Asn1Set::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Asn1Set*, creationType>()));
    }
    // protected override System.Int32 Asn1GetHashCode()
    // Offset: 0x1543B38
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Object
    // Base method: System.Int32 Asn1Object::Asn1GetHashCode_NEW()
    int Asn1GetHashCode();
    // protected override System.Boolean Asn1Equals(Org.BouncyCastle.Asn1.Asn1Object asn1Object)
    // Offset: 0x1543BDC
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Object
    // Base method: System.Boolean Asn1Object::Asn1Equals_NEW(Org.BouncyCastle.Asn1.Asn1Object asn1Object)
    bool Asn1Equals(Org::BouncyCastle::Asn1::Asn1Object* asn1Object);
    // public override System.String ToString()
    // Offset: 0x1543EBC
    // Implemented from: System.Object
    // Base method: System.String Object::ToString_NEW()
    ::Il2CppString* ToString();
  }; // Org.BouncyCastle.Asn1.Asn1Set
  #pragma pack(pop)
  static check_size<sizeof(Asn1Set), 16 + sizeof(::Array<Org::BouncyCastle::Asn1::Asn1Encodable*>*)> __Org_BouncyCastle_Asn1_Asn1SetSizeCheck;
  static_assert(sizeof(Asn1Set) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Asn1::Asn1Set*, "Org.BouncyCastle.Asn1", "Asn1Set");
