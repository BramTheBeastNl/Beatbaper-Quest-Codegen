// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Asn1.Asn1Encodable
#include "Org/BouncyCastle/Asn1/Asn1Encodable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1::X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Forward declaring type: DistributionPointName
  class DistributionPointName;
  // Forward declaring type: ReasonFlags
  class ReasonFlags;
  // Forward declaring type: GeneralNames
  class GeneralNames;
}
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Forward declaring type: Asn1Sequence
  class Asn1Sequence;
  // Forward declaring type: Asn1Object
  class Asn1Object;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1.X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Asn1.X509.DistributionPoint
  class DistributionPoint : public Org::BouncyCastle::Asn1::Asn1Encodable {
    public:
    // readonly Org.BouncyCastle.Asn1.X509.DistributionPointName distributionPoint
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Asn1::X509::DistributionPointName* distributionPoint;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Asn1::X509::DistributionPointName*) == 0x8);
    // readonly Org.BouncyCastle.Asn1.X509.ReasonFlags reasons
    // Size: 0x8
    // Offset: 0x18
    Org::BouncyCastle::Asn1::X509::ReasonFlags* reasons;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Asn1::X509::ReasonFlags*) == 0x8);
    // readonly Org.BouncyCastle.Asn1.X509.GeneralNames cRLIssuer
    // Size: 0x8
    // Offset: 0x20
    Org::BouncyCastle::Asn1::X509::GeneralNames* cRLIssuer;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Asn1::X509::GeneralNames*) == 0x8);
    // Creating value type constructor for type: DistributionPoint
    DistributionPoint(Org::BouncyCastle::Asn1::X509::DistributionPointName* distributionPoint_ = {}, Org::BouncyCastle::Asn1::X509::ReasonFlags* reasons_ = {}, Org::BouncyCastle::Asn1::X509::GeneralNames* cRLIssuer_ = {}) noexcept : distributionPoint{distributionPoint_}, reasons{reasons_}, cRLIssuer{cRLIssuer_} {}
    // static public Org.BouncyCastle.Asn1.X509.DistributionPoint GetInstance(System.Object obj)
    // Offset: 0x1A0568C
    static Org::BouncyCastle::Asn1::X509::DistributionPoint* GetInstance(::Il2CppObject* obj);
    // private System.Void .ctor(Org.BouncyCastle.Asn1.Asn1Sequence seq)
    // Offset: 0x1A06310
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DistributionPoint* New_ctor(Org::BouncyCastle::Asn1::Asn1Sequence* seq) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Asn1::X509::DistributionPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DistributionPoint*, creationType>(seq)));
    }
    // private System.Void appendObject(System.Text.StringBuilder buf, System.String sep, System.String name, System.String val)
    // Offset: 0x1A067B4
    void appendObject(System::Text::StringBuilder* buf, ::Il2CppString* sep, ::Il2CppString* name, ::Il2CppString* val);
    // public override Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object()
    // Offset: 0x1A06564
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Encodable
    // Base method: Org.BouncyCastle.Asn1.Asn1Object Asn1Encodable::ToAsn1Object()
    Org::BouncyCastle::Asn1::Asn1Object* ToAsn1Object();
    // public override System.String ToString()
    // Offset: 0x1A06634
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // Org.BouncyCastle.Asn1.X509.DistributionPoint
  #pragma pack(pop)
  static check_size<sizeof(DistributionPoint), 32 + sizeof(Org::BouncyCastle::Asn1::X509::GeneralNames*)> __Org_BouncyCastle_Asn1_X509_DistributionPointSizeCheck;
  static_assert(sizeof(DistributionPoint) == 0x28);
  // Writing MetadataGetter for method: DistributionPoint::GetInstance
  // Il2CppName: GetInstance
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Asn1::X509::DistributionPoint* (*)(::Il2CppObject*)>(&DistributionPoint::GetInstance)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(DistributionPoint*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: DistributionPoint::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DistributionPoint::*)(Org::BouncyCastle::Asn1::Asn1Sequence*)>(&DistributionPoint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(DistributionPoint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Asn1::Asn1Sequence*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DistributionPoint::*)(Org::BouncyCastle::Asn1::Asn1Sequence*)>(&DistributionPoint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(DistributionPoint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Org::BouncyCastle::Asn1::Asn1Sequence*>()});
    }
  };
  // Writing MetadataGetter for method: DistributionPoint::appendObject
  // Il2CppName: appendObject
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DistributionPoint::*)(System::Text::StringBuilder*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&DistributionPoint::appendObject)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(DistributionPoint*), "appendObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: DistributionPoint::ToAsn1Object
  // Il2CppName: ToAsn1Object
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Org::BouncyCastle::Asn1::Asn1Object* (DistributionPoint::*)()>(&DistributionPoint::ToAsn1Object)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(DistributionPoint*), "ToAsn1Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: DistributionPoint::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (DistributionPoint::*)()>(&DistributionPoint::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(DistributionPoint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Asn1::X509::DistributionPoint*, "Org.BouncyCastle.Asn1.X509", "DistributionPoint");
