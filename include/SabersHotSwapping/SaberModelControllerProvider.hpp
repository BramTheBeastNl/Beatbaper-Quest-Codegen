// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: SabersHotSwapping
namespace SabersHotSwapping {
  // Forward declaring type: SabersLibrarySO
  class SabersLibrarySO;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberModelController
  class SaberModelController;
}
// Completed forward declares
// Type namespace: SabersHotSwapping
namespace SabersHotSwapping {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: SabersHotSwapping.SaberModelControllerProvider
  class SaberModelControllerProvider : public UnityEngine::MonoBehaviour {
    public:
    // private SabersHotSwapping.SabersLibrarySO _sabersLibrary
    // Size: 0x8
    // Offset: 0x18
    SabersHotSwapping::SabersLibrarySO* sabersLibrary;
    // Field size check
    static_assert(sizeof(SabersHotSwapping::SabersLibrarySO*) == 0x8);
    // [InjectAttribute] Offset: 0xE29920
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x20
    Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(Zenject::DiContainer*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xE29930
    // private System.Action controllerChangedEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action* controllerChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Int32 _currentIndex
    // Size: 0x4
    // Offset: 0x30
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: SaberModelControllerProvider
    SaberModelControllerProvider(SabersHotSwapping::SabersLibrarySO* sabersLibrary_ = {}, Zenject::DiContainer* container_ = {}, System::Action* controllerChangedEvent_ = {}, int currentIndex_ = {}) noexcept : sabersLibrary{sabersLibrary_}, container{container_}, controllerChangedEvent{controllerChangedEvent_}, currentIndex{currentIndex_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_controllerChangedEvent(System.Action value)
    // Offset: 0x10DE018
    void add_controllerChangedEvent(System::Action* value);
    // public System.Void remove_controllerChangedEvent(System.Action value)
    // Offset: 0x10DE23C
    void remove_controllerChangedEvent(System::Action* value);
    // public SaberModelController GetSaber()
    // Offset: 0x10DE2E4
    GlobalNamespace::SaberModelController* GetSaber();
    // protected System.Void Awake()
    // Offset: 0x10E1D44
    void Awake();
    // protected System.Void Update()
    // Offset: 0x10E1D84
    void Update();
    // private System.Void GetNext()
    // Offset: 0x10E1D48
    void GetNext();
    // private System.Void GetPrev()
    // Offset: 0x10E1E84
    void GetPrev();
    // private SaberModelController InstantiatePrefab(SaberModelController prefab)
    // Offset: 0x10E1CD0
    GlobalNamespace::SaberModelController* InstantiatePrefab(GlobalNamespace::SaberModelController* prefab);
    // public System.Void .ctor()
    // Offset: 0x10E1ED8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberModelControllerProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("SabersHotSwapping::SaberModelControllerProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberModelControllerProvider*, creationType>()));
    }
  }; // SabersHotSwapping.SaberModelControllerProvider
  #pragma pack(pop)
  static check_size<sizeof(SaberModelControllerProvider), 48 + sizeof(int)> __SabersHotSwapping_SaberModelControllerProviderSizeCheck;
  static_assert(sizeof(SaberModelControllerProvider) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(SabersHotSwapping::SaberModelControllerProvider*, "SabersHotSwapping", "SaberModelControllerProvider");
