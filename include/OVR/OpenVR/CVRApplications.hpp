// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications
#include "OVR/OpenVR/IVRApplications.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
  // Forward declaring type: EVRApplicationError
  struct EVRApplicationError;
  // Forward declaring type: AppOverrideKeys_t
  struct AppOverrideKeys_t;
  // Forward declaring type: EVRApplicationProperty
  struct EVRApplicationProperty;
  // Forward declaring type: EVRApplicationTransitionState
  struct EVRApplicationTransitionState;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Autogenerated type: OVR.OpenVR.CVRApplications
  class CVRApplications : public ::CsObject {
    public:
    // private OVR.OpenVR.IVRApplications FnTable
    // Offset: 0x10
    OVR::OpenVR::IVRApplications FnTable;
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0xEBE354
    static CVRApplications* New_ctor(System::IntPtr pInterface);
    // public OVR.OpenVR.EVRApplicationError AddApplicationManifest(System.String pchApplicationManifestFullPath, System.Boolean bTemporary)
    // Offset: 0xEBE468
    OVR::OpenVR::EVRApplicationError AddApplicationManifest(::CsString* pchApplicationManifestFullPath, bool bTemporary);
    // public OVR.OpenVR.EVRApplicationError RemoveApplicationManifest(System.String pchApplicationManifestFullPath)
    // Offset: 0xEBE8D4
    OVR::OpenVR::EVRApplicationError RemoveApplicationManifest(::CsString* pchApplicationManifestFullPath);
    // public System.Boolean IsApplicationInstalled(System.String pchAppKey)
    // Offset: 0xEBECAC
    bool IsApplicationInstalled(::CsString* pchAppKey);
    // public System.UInt32 GetApplicationCount()
    // Offset: 0xEBF088
    uint GetApplicationCount();
    // public OVR.OpenVR.EVRApplicationError GetApplicationKeyByIndex(System.UInt32 unApplicationIndex, System.Text.StringBuilder pchAppKeyBuffer, System.UInt32 unAppKeyBufferLen)
    // Offset: 0xEBF2B4
    OVR::OpenVR::EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen);
    // public OVR.OpenVR.EVRApplicationError GetApplicationKeyByProcessId(System.UInt32 unProcessId, System.Text.StringBuilder pchAppKeyBuffer, System.UInt32 unAppKeyBufferLen)
    // Offset: 0xEBF578
    OVR::OpenVR::EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen);
    // public OVR.OpenVR.EVRApplicationError LaunchApplication(System.String pchAppKey)
    // Offset: 0xEBF83C
    OVR::OpenVR::EVRApplicationError LaunchApplication(::CsString* pchAppKey);
    // public OVR.OpenVR.EVRApplicationError LaunchTemplateApplication(System.String pchTemplateAppKey, System.String pchNewAppKey, OVR.OpenVR.AppOverrideKeys_t[] pKeys)
    // Offset: 0xEBFC14
    OVR::OpenVR::EVRApplicationError LaunchTemplateApplication(::CsString* pchTemplateAppKey, ::CsString* pchNewAppKey, ::Array<OVR::OpenVR::AppOverrideKeys_t>* pKeys);
    // public OVR.OpenVR.EVRApplicationError LaunchApplicationFromMimeType(System.String pchMimeType, System.String pchArgs)
    // Offset: 0xEC008C
    OVR::OpenVR::EVRApplicationError LaunchApplicationFromMimeType(::CsString* pchMimeType, ::CsString* pchArgs);
    // public OVR.OpenVR.EVRApplicationError LaunchDashboardOverlay(System.String pchAppKey)
    // Offset: 0xEC04B0
    OVR::OpenVR::EVRApplicationError LaunchDashboardOverlay(::CsString* pchAppKey);
    // public System.Boolean CancelApplicationLaunch(System.String pchAppKey)
    // Offset: 0xEC0888
    bool CancelApplicationLaunch(::CsString* pchAppKey);
    // public OVR.OpenVR.EVRApplicationError IdentifyApplication(System.UInt32 unProcessId, System.String pchAppKey)
    // Offset: 0xEC0C64
    OVR::OpenVR::EVRApplicationError IdentifyApplication(uint unProcessId, ::CsString* pchAppKey);
    // public System.UInt32 GetApplicationProcessId(System.String pchAppKey)
    // Offset: 0xEC0F0C
    uint GetApplicationProcessId(::CsString* pchAppKey);
    // public System.String GetApplicationsErrorNameFromEnum(OVR.OpenVR.EVRApplicationError error)
    // Offset: 0xEC12E4
    ::CsString* GetApplicationsErrorNameFromEnum(OVR::OpenVR::EVRApplicationError error);
    // public System.UInt32 GetApplicationPropertyString(System.String pchAppKey, OVR.OpenVR.EVRApplicationProperty eProperty, System.Text.StringBuilder pchPropertyValueBuffer, System.UInt32 unPropertyValueBufferLen, OVR.OpenVR.EVRApplicationError peError)
    // Offset: 0xEC15E8
    uint GetApplicationPropertyString(::CsString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, OVR::OpenVR::EVRApplicationError& peError);
    // public System.Boolean GetApplicationPropertyBool(System.String pchAppKey, OVR.OpenVR.EVRApplicationProperty eProperty, OVR.OpenVR.EVRApplicationError peError)
    // Offset: 0xEC1AA4
    bool GetApplicationPropertyBool(::CsString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, OVR::OpenVR::EVRApplicationError& peError);
    // public System.UInt64 GetApplicationPropertyUint64(System.String pchAppKey, OVR.OpenVR.EVRApplicationProperty eProperty, OVR.OpenVR.EVRApplicationError peError)
    // Offset: 0xEC1F18
    uint64_t GetApplicationPropertyUint64(::CsString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, OVR::OpenVR::EVRApplicationError& peError);
    // public OVR.OpenVR.EVRApplicationError SetApplicationAutoLaunch(System.String pchAppKey, System.Boolean bAutoLaunch)
    // Offset: 0xEC2388
    OVR::OpenVR::EVRApplicationError SetApplicationAutoLaunch(::CsString* pchAppKey, bool bAutoLaunch);
    // public System.Boolean GetApplicationAutoLaunch(System.String pchAppKey)
    // Offset: 0xEC27F4
    bool GetApplicationAutoLaunch(::CsString* pchAppKey);
    // public OVR.OpenVR.EVRApplicationError SetDefaultApplicationForMimeType(System.String pchAppKey, System.String pchMimeType)
    // Offset: 0xEC2BD0
    OVR::OpenVR::EVRApplicationError SetDefaultApplicationForMimeType(::CsString* pchAppKey, ::CsString* pchMimeType);
    // public System.Boolean GetDefaultApplicationForMimeType(System.String pchMimeType, System.Text.StringBuilder pchAppKeyBuffer, System.UInt32 unAppKeyBufferLen)
    // Offset: 0xEC2FF4
    bool GetDefaultApplicationForMimeType(::CsString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen);
    // public System.Boolean GetApplicationSupportedMimeTypes(System.String pchAppKey, System.Text.StringBuilder pchMimeTypesBuffer, System.UInt32 unMimeTypesBuffer)
    // Offset: 0xEC3440
    bool GetApplicationSupportedMimeTypes(::CsString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer);
    // public System.UInt32 GetApplicationsThatSupportMimeType(System.String pchMimeType, System.Text.StringBuilder pchAppKeysThatSupportBuffer, System.UInt32 unAppKeysThatSupportBuffer)
    // Offset: 0xEC388C
    uint GetApplicationsThatSupportMimeType(::CsString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);
    // public System.UInt32 GetApplicationLaunchArguments(System.UInt32 unHandle, System.Text.StringBuilder pchArgs, System.UInt32 unArgs)
    // Offset: 0xEC3CD4
    uint GetApplicationLaunchArguments(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs);
    // public OVR.OpenVR.EVRApplicationError GetStartingApplication(System.Text.StringBuilder pchAppKeyBuffer, System.UInt32 unAppKeyBufferLen)
    // Offset: 0xEC3F98
    OVR::OpenVR::EVRApplicationError GetStartingApplication(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen);
    // public OVR.OpenVR.EVRApplicationTransitionState GetTransitionState()
    // Offset: 0xEC43E4
    OVR::OpenVR::EVRApplicationTransitionState GetTransitionState();
    // public OVR.OpenVR.EVRApplicationError PerformApplicationPrelaunchCheck(System.String pchAppKey)
    // Offset: 0xEC4610
    OVR::OpenVR::EVRApplicationError PerformApplicationPrelaunchCheck(::CsString* pchAppKey);
    // public System.String GetApplicationsTransitionStateNameFromEnum(OVR.OpenVR.EVRApplicationTransitionState state)
    // Offset: 0xEC49E8
    ::CsString* GetApplicationsTransitionStateNameFromEnum(OVR::OpenVR::EVRApplicationTransitionState state);
    // public System.Boolean IsQuitUserPromptRequested()
    // Offset: 0xEC4CEC
    bool IsQuitUserPromptRequested();
    // public OVR.OpenVR.EVRApplicationError LaunchInternalProcess(System.String pchBinaryPath, System.String pchArguments, System.String pchWorkingDirectory)
    // Offset: 0xEC4F1C
    OVR::OpenVR::EVRApplicationError LaunchInternalProcess(::CsString* pchBinaryPath, ::CsString* pchArguments, ::CsString* pchWorkingDirectory);
    // public System.UInt32 GetCurrentSceneProcessId()
    // Offset: 0xEC5364
    uint GetCurrentSceneProcessId();
  }; // OVR.OpenVR.CVRApplications
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(OVR::OpenVR::CVRApplications*, "OVR.OpenVR", "CVRApplications");
#pragma pack(pop)
