// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.ParseFlags
#include "System/ParseFlags.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.ParseFailureKind
#include "System/ParseFailureKind.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: Calendar
  class Calendar;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.DateTimeResult
  // [TokenAttribute] Offset: FFFFFFFF
  struct DateTimeResult/*, public System::ValueType*/ {
    public:
    // System.Int32 Year
    // Size: 0x4
    // Offset: 0x0
    int Year;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 Month
    // Size: 0x4
    // Offset: 0x4
    int Month;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 Day
    // Size: 0x4
    // Offset: 0x8
    int Day;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 Hour
    // Size: 0x4
    // Offset: 0xC
    int Hour;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 Minute
    // Size: 0x4
    // Offset: 0x10
    int Minute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 Second
    // Size: 0x4
    // Offset: 0x14
    int Second;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Double fraction
    // Size: 0x8
    // Offset: 0x18
    double fraction;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // System.Int32 era
    // Size: 0x4
    // Offset: 0x20
    int era;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.ParseFlags flags
    // Size: 0x4
    // Offset: 0x24
    System::ParseFlags flags;
    // Field size check
    static_assert(sizeof(System::ParseFlags) == 0x4);
    // System.TimeSpan timeZoneOffset
    // Size: 0x8
    // Offset: 0x28
    System::TimeSpan timeZoneOffset;
    // Field size check
    static_assert(sizeof(System::TimeSpan) == 0x8);
    // System.Globalization.Calendar calendar
    // Size: 0x8
    // Offset: 0x30
    System::Globalization::Calendar* calendar;
    // Field size check
    static_assert(sizeof(System::Globalization::Calendar*) == 0x8);
    // System.DateTime parsedDate
    // Size: 0x8
    // Offset: 0x38
    System::DateTime parsedDate;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // System.ParseFailureKind failure
    // Size: 0x4
    // Offset: 0x40
    System::ParseFailureKind failure;
    // Field size check
    static_assert(sizeof(System::ParseFailureKind) == 0x4);
    // Padding between fields: failure and: failureMessageID
    char __padding12[0x4] = {};
    // System.String failureMessageID
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* failureMessageID;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Object failureMessageFormatArgument
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* failureMessageFormatArgument;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.String failureArgumentName
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* failureArgumentName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: DateTimeResult
    constexpr DateTimeResult(int Year_ = {}, int Month_ = {}, int Day_ = {}, int Hour_ = {}, int Minute_ = {}, int Second_ = {}, double fraction_ = {}, int era_ = {}, System::ParseFlags flags_ = {}, System::TimeSpan timeZoneOffset_ = {}, System::Globalization::Calendar* calendar_ = {}, System::DateTime parsedDate_ = {}, System::ParseFailureKind failure_ = {}, ::Il2CppString* failureMessageID_ = {}, ::Il2CppObject* failureMessageFormatArgument_ = {}, ::Il2CppString* failureArgumentName_ = {}) noexcept : Year{Year_}, Month{Month_}, Day{Day_}, Hour{Hour_}, Minute{Minute_}, Second{Second_}, fraction{fraction_}, era{era_}, flags{flags_}, timeZoneOffset{timeZoneOffset_}, calendar{calendar_}, parsedDate{parsedDate_}, failure{failure_}, failureMessageID{failureMessageID_}, failureMessageFormatArgument{failureMessageFormatArgument_}, failureArgumentName{failureArgumentName_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: System.Int32 Year
    int _get_Year();
    // Set instance field: System.Int32 Year
    void _set_Year(int value);
    // Get instance field: System.Int32 Month
    int _get_Month();
    // Set instance field: System.Int32 Month
    void _set_Month(int value);
    // Get instance field: System.Int32 Day
    int _get_Day();
    // Set instance field: System.Int32 Day
    void _set_Day(int value);
    // Get instance field: System.Int32 Hour
    int _get_Hour();
    // Set instance field: System.Int32 Hour
    void _set_Hour(int value);
    // Get instance field: System.Int32 Minute
    int _get_Minute();
    // Set instance field: System.Int32 Minute
    void _set_Minute(int value);
    // Get instance field: System.Int32 Second
    int _get_Second();
    // Set instance field: System.Int32 Second
    void _set_Second(int value);
    // Get instance field: System.Double fraction
    double _get_fraction();
    // Set instance field: System.Double fraction
    void _set_fraction(double value);
    // Get instance field: System.Int32 era
    int _get_era();
    // Set instance field: System.Int32 era
    void _set_era(int value);
    // Get instance field: System.ParseFlags flags
    System::ParseFlags _get_flags();
    // Set instance field: System.ParseFlags flags
    void _set_flags(System::ParseFlags value);
    // Get instance field: System.TimeSpan timeZoneOffset
    System::TimeSpan _get_timeZoneOffset();
    // Set instance field: System.TimeSpan timeZoneOffset
    void _set_timeZoneOffset(System::TimeSpan value);
    // Get instance field: System.Globalization.Calendar calendar
    System::Globalization::Calendar* _get_calendar();
    // Set instance field: System.Globalization.Calendar calendar
    void _set_calendar(System::Globalization::Calendar* value);
    // Get instance field: System.DateTime parsedDate
    System::DateTime _get_parsedDate();
    // Set instance field: System.DateTime parsedDate
    void _set_parsedDate(System::DateTime value);
    // Get instance field: System.ParseFailureKind failure
    System::ParseFailureKind _get_failure();
    // Set instance field: System.ParseFailureKind failure
    void _set_failure(System::ParseFailureKind value);
    // Get instance field: System.String failureMessageID
    ::Il2CppString* _get_failureMessageID();
    // Set instance field: System.String failureMessageID
    void _set_failureMessageID(::Il2CppString* value);
    // Get instance field: System.Object failureMessageFormatArgument
    ::Il2CppObject* _get_failureMessageFormatArgument();
    // Set instance field: System.Object failureMessageFormatArgument
    void _set_failureMessageFormatArgument(::Il2CppObject* value);
    // Get instance field: System.String failureArgumentName
    ::Il2CppString* _get_failureArgumentName();
    // Set instance field: System.String failureArgumentName
    void _set_failureArgumentName(::Il2CppString* value);
    // System.Void Init()
    // Offset: 0x1B5154C
    void Init();
    // System.Void SetDate(System.Int32 year, System.Int32 month, System.Int32 day)
    // Offset: 0x1B54160
    void SetDate(int year, int month, int day);
    // System.Void SetFailure(System.ParseFailureKind failure, System.String failureMessageID, System.Object failureMessageFormatArgument)
    // Offset: 0x1B5182C
    void SetFailure(System::ParseFailureKind failure, ::Il2CppString* failureMessageID, ::Il2CppObject* failureMessageFormatArgument);
    // System.Void SetFailure(System.ParseFailureKind failure, System.String failureMessageID, System.Object failureMessageFormatArgument, System.String failureArgumentName)
    // Offset: 0x1B5181C
    void SetFailure(System::ParseFailureKind failure, ::Il2CppString* failureMessageID, ::Il2CppObject* failureMessageFormatArgument, ::Il2CppString* failureArgumentName);
  }; // System.DateTimeResult
  #pragma pack(pop)
  static check_size<sizeof(DateTimeResult), 88 + sizeof(::Il2CppString*)> __System_DateTimeResultSizeCheck;
  static_assert(sizeof(DateTimeResult) == 0x60);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::DateTimeResult, "System", "DateTimeResult");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::DateTimeResult::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::DateTimeResult::*)()>(&System::DateTimeResult::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeResult), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::DateTimeResult::SetDate
// Il2CppName: SetDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::DateTimeResult::*)(int, int, int)>(&System::DateTimeResult::SetDate)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* day = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeResult), "SetDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, day});
  }
};
// Writing MetadataGetter for method: System::DateTimeResult::SetFailure
// Il2CppName: SetFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::DateTimeResult::*)(System::ParseFailureKind, ::Il2CppString*, ::Il2CppObject*)>(&System::DateTimeResult::SetFailure)> {
  static const MethodInfo* get() {
    static auto* failure = &::il2cpp_utils::GetClassFromName("System", "ParseFailureKind")->byval_arg;
    static auto* failureMessageID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* failureMessageFormatArgument = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeResult), "SetFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failure, failureMessageID, failureMessageFormatArgument});
  }
};
// Writing MetadataGetter for method: System::DateTimeResult::SetFailure
// Il2CppName: SetFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::DateTimeResult::*)(System::ParseFailureKind, ::Il2CppString*, ::Il2CppObject*, ::Il2CppString*)>(&System::DateTimeResult::SetFailure)> {
  static const MethodInfo* get() {
    static auto* failure = &::il2cpp_utils::GetClassFromName("System", "ParseFailureKind")->byval_arg;
    static auto* failureMessageID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* failureMessageFormatArgument = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* failureArgumentName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::DateTimeResult), "SetFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failure, failureMessageID, failureMessageFormatArgument, failureArgumentName});
  }
};
