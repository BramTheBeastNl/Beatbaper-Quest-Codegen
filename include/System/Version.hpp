// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Version
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: C93DEC
  class Version : public ::Il2CppObject/*, public System::ICloneable, public System::IComparable, public System::IComparable_1<System::Version*>, public System::IEquatable_1<System::Version*>*/ {
    public:
    // Nested type: System::Version::ParseFailureKind
    struct ParseFailureKind;
    // Nested type: System::Version::VersionResult
    struct VersionResult;
    // private System.Int32 _Major
    // Size: 0x4
    // Offset: 0x10
    int Major;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _Minor
    // Size: 0x4
    // Offset: 0x14
    int Minor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _Build
    // Size: 0x4
    // Offset: 0x18
    int Build;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _Revision
    // Size: 0x4
    // Offset: 0x1C
    int Revision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Version
    Version(int Major_ = {}, int Minor_ = {}, int Build_ = {}, int Revision_ = {}) noexcept : Major{Major_}, Minor{Minor_}, Build{Build_}, Revision{Revision_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<System::Version*>
    operator System::IComparable_1<System::Version*>() noexcept {
      return *reinterpret_cast<System::IComparable_1<System::Version*>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<System::Version*>
    operator System::IEquatable_1<System::Version*>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<System::Version*>*>(this);
    }
    // Get static field: static private readonly System.Char[] SeparatorsArray
    static ::Array<::Il2CppChar>* _get_SeparatorsArray();
    // Set static field: static private readonly System.Char[] SeparatorsArray
    static void _set_SeparatorsArray(::Array<::Il2CppChar>* value);
    // static field const value: static private System.Int32 ZERO_CHAR_VALUE
    static constexpr const int ZERO_CHAR_VALUE = 48;
    // Get static field: static private System.Int32 ZERO_CHAR_VALUE
    static int _get_ZERO_CHAR_VALUE();
    // Set static field: static private System.Int32 ZERO_CHAR_VALUE
    static void _set_ZERO_CHAR_VALUE(int value);
    // public System.Void .ctor(System.Int32 major, System.Int32 minor, System.Int32 build, System.Int32 revision)
    // Offset: 0x20E1080
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Version* New_ctor(int major, int minor, int build, int revision) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Version::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Version*, creationType>(major, minor, build, revision)));
    }
    // public System.Void .ctor(System.Int32 major, System.Int32 minor, System.Int32 build)
    // Offset: 0x20E1210
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Version* New_ctor(int major, int minor, int build) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Version::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Version*, creationType>(major, minor, build)));
    }
    // public System.Void .ctor(System.Int32 major, System.Int32 minor)
    // Offset: 0x20E1360
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Version* New_ctor(int major, int minor) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Version::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Version*, creationType>(major, minor)));
    }
    // public System.Void .ctor(System.String version)
    // Offset: 0x20E1464
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Version* New_ctor(::Il2CppString* version) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Version::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Version*, creationType>(version)));
    }
    // public System.Int32 get_Major()
    // Offset: 0x20E164C
    int get_Major();
    // public System.Int32 get_Minor()
    // Offset: 0x20E1654
    int get_Minor();
    // public System.Int32 get_Build()
    // Offset: 0x20E165C
    int get_Build();
    // public System.Int32 get_Revision()
    // Offset: 0x20E1664
    int get_Revision();
    // public System.Object Clone()
    // Offset: 0x20E166C
    ::Il2CppObject* Clone();
    // public System.Int32 CompareTo(System.Object version)
    // Offset: 0x20E1700
    int CompareTo(::Il2CppObject* version);
    // public System.Int32 CompareTo(System.Version value)
    // Offset: 0x20E184C
    int CompareTo(System::Version* value);
    // public System.Boolean Equals(System.Version obj)
    // Offset: 0x20E1A08
    bool Equals(System::Version* obj);
    // public System.String ToString(System.Int32 fieldCount)
    // Offset: 0x20E1B18
    ::Il2CppString* ToString(int fieldCount);
    // static private System.Void AppendPositiveNumber(System.Int32 num, System.Text.StringBuilder sb)
    // Offset: 0x20E1ED4
    static void AppendPositiveNumber(int num, System::Text::StringBuilder* sb);
    // static public System.Version Parse(System.String input)
    // Offset: 0x20E1514
    static System::Version* Parse(::Il2CppString* input);
    // static private System.Boolean TryParseVersion(System.String version, ref System.Version/VersionResult result)
    // Offset: 0x20E1F6C
    static bool TryParseVersion(::Il2CppString* version, System::Version::VersionResult& result);
    // static private System.Boolean TryParseComponent(System.String component, System.String componentName, ref System.Version/VersionResult result, out System.Int32 parsedComponent)
    // Offset: 0x20E2488
    static bool TryParseComponent(::Il2CppString* component, ::Il2CppString* componentName, System::Version::VersionResult& result, int& parsedComponent);
    // static private System.Void .cctor()
    // Offset: 0x20E288C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x20E161C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Version* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Version::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Version*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x20E192C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x20E1AD4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x20E1AF0
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.Version
  #pragma pack(pop)
  static check_size<sizeof(Version), 28 + sizeof(int)> __System_VersionSizeCheck;
  static_assert(sizeof(Version) == 0x20);
  // static public System.Boolean op_Equality(System.Version v1, System.Version v2)
  // Offset: 0x20E1838
  bool operator ==(System::Version* v1, System::Version& v2);
  // static public System.Boolean op_Inequality(System.Version v1, System.Version v2)
  // Offset: 0x20E25D4
  bool operator !=(System::Version* v1, System::Version& v2);
  // static public System.Boolean op_LessThan(System.Version v1, System.Version v2)
  // Offset: 0x20E2668
  bool operator <(System::Version* v1, System::Version& v2);
  // static public System.Boolean op_LessThanOrEqual(System.Version v1, System.Version v2)
  // Offset: 0x20E2704
  bool operator <=(System::Version* v1, System::Version& v2);
  // static public System.Boolean op_GreaterThan(System.Version v1, System.Version v2)
  // Offset: 0x20E27A4
  bool operator >(System::Version* v1, System::Version& v2);
  // static public System.Boolean op_GreaterThanOrEqual(System.Version v1, System.Version v2)
  // Offset: 0x20E2818
  bool operator >=(System::Version* v1, System::Version& v2);
}
DEFINE_IL2CPP_ARG_TYPE(System::Version*, "System", "Version");
