// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberStyles
  struct NumberStyles;
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Double
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: C92E30
  struct Double/*, public System::ValueType, public System::IComparable, public System::IFormattable, public System::IConvertible, public System::IComparable_1<double>, public System::IEquatable_1<double>*/ {
    public:
    // System.Double m_value
    // Size: 0x8
    // Offset: 0x0
    double m_value;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // Creating value type constructor for type: Double
    constexpr Double(double m_value_ = {}) noexcept : m_value{m_value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormattable
    operator System::IFormattable() noexcept {
      return *reinterpret_cast<System::IFormattable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<double>
    operator System::IComparable_1<double>() noexcept {
      return *reinterpret_cast<System::IComparable_1<double>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<double>
    operator System::IEquatable_1<double>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<double>*>(this);
    }
    // Creating conversion operator: operator double
    constexpr operator double() const noexcept {
      return m_value;
    }
    // static field const value: static public System.Double MinValue
    static constexpr const double MinValue = -1.7976931348623157e+308;
    // Get static field: static public System.Double MinValue
    static double _get_MinValue();
    // Set static field: static public System.Double MinValue
    static void _set_MinValue(double value);
    // static field const value: static public System.Double MaxValue
    static constexpr const double MaxValue = 1.7976931348623157e+308;
    // Get static field: static public System.Double MaxValue
    static double _get_MaxValue();
    // Set static field: static public System.Double MaxValue
    static void _set_MaxValue(double value);
    // static field const value: static public System.Double Epsilon
    static constexpr const double Epsilon = 5e-324;
    // Get static field: static public System.Double Epsilon
    static double _get_Epsilon();
    // Set static field: static public System.Double Epsilon
    static void _set_Epsilon(double value);
    // Get static field: static public System.Double NegativeInfinity
    static double _get_NegativeInfinity();
    // Set static field: static public System.Double NegativeInfinity
    static void _set_NegativeInfinity(double value);
    // Get static field: static public System.Double PositiveInfinity
    static double _get_PositiveInfinity();
    // Set static field: static public System.Double PositiveInfinity
    static void _set_PositiveInfinity(double value);
    // Get static field: static public System.Double NaN
    static double _get_NaN();
    // Set static field: static public System.Double NaN
    static void _set_NaN(double value);
    // Get static field: static System.Double NegativeZero
    static double _get_NegativeZero();
    // Set static field: static System.Double NegativeZero
    static void _set_NegativeZero(double value);
    // static public System.Boolean IsInfinity(System.Double d)
    // Offset: 0x1647484
    static bool IsInfinity(double d);
    // static public System.Boolean IsPositiveInfinity(System.Double d)
    // Offset: 0x164749C
    static bool IsPositiveInfinity(double d);
    // static public System.Boolean IsNegativeInfinity(System.Double d)
    // Offset: 0x16474B0
    static bool IsNegativeInfinity(double d);
    // static public System.Boolean IsNaN(System.Double d)
    // Offset: 0x16474C4
    static bool IsNaN(double d);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0xDF3AA8
    int CompareTo_NEW(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Double value)
    // Offset: 0xDF3AB0
    int CompareTo_NEW(double value);
    // public System.Boolean Equals(System.Double obj)
    // Offset: 0xDF3AC0
    bool Equals_NEW(double obj);
    // public System.String ToString(System.String format)
    // Offset: 0xDF3B08
    ::Il2CppString* ToString(::Il2CppString* format);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xDF3B48
    ::Il2CppString* ToString_NEW(System::IFormatProvider* provider);
    // public System.String ToString(System.String format, System.IFormatProvider provider)
    // Offset: 0xDF3B80
    ::Il2CppString* ToString_NEW(::Il2CppString* format, System::IFormatProvider* provider);
    // static public System.Double Parse(System.String s)
    // Offset: 0x16479C4
    static double Parse(::Il2CppString* s);
    // static public System.Double Parse(System.String s, System.IFormatProvider provider)
    // Offset: 0x1647A4C
    static double Parse(::Il2CppString* s, System::IFormatProvider* provider);
    // static public System.Double Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)
    // Offset: 0x1647ADC
    static double Parse(::Il2CppString* s, System::Globalization::NumberStyles style, System::IFormatProvider* provider);
    // static private System.Double Parse(System.String s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info)
    // Offset: 0x1647A44
    static double Parse(::Il2CppString* s, System::Globalization::NumberStyles style, System::Globalization::NumberFormatInfo* info);
    // static public System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Double result)
    // Offset: 0x1647B7C
    static bool TryParse(::Il2CppString* s, System::Globalization::NumberStyles style, System::IFormatProvider* provider, double& result);
    // static private System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, out System.Double result)
    // Offset: 0x1647C28
    static bool TryParse(::Il2CppString* s, System::Globalization::NumberStyles style, System::Globalization::NumberFormatInfo* info, double& result);
    // public System.TypeCode GetTypeCode()
    // Offset: 0xDF3BC4
    System::TypeCode GetTypeCode_NEW();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0xDF3BCC
    bool System_IConvertible_ToBoolean_NEW(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0xDF3BD4
    ::Il2CppChar System_IConvertible_ToChar_NEW(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0xDF3BE0
    int8_t System_IConvertible_ToSByte_NEW(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0xDF3BE8
    uint8_t System_IConvertible_ToByte_NEW(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0xDF3BF0
    int16_t System_IConvertible_ToInt16_NEW(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0xDF3BF8
    uint16_t System_IConvertible_ToUInt16_NEW(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0xDF3C00
    int System_IConvertible_ToInt32_NEW(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0xDF3C08
    uint System_IConvertible_ToUInt32_NEW(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0xDF3C10
    int64_t System_IConvertible_ToInt64_NEW(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0xDF3C18
    uint64_t System_IConvertible_ToUInt64_NEW(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0xDF3C20
    float System_IConvertible_ToSingle_NEW(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0xDF3C28
    double System_IConvertible_ToDouble_NEW(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0xDF3C30
    System::Decimal System_IConvertible_ToDecimal_NEW(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0xDF3C38
    System::DateTime System_IConvertible_ToDateTime_NEW(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0xDF3C44
    ::Il2CppObject* System_IConvertible_ToType_NEW(System::Type* type, System::IFormatProvider* provider);
    // static private System.Void .cctor()
    // Offset: 0x16484FC
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xDF3AB8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDF3AC8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xDF3AD4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.Double
  #pragma pack(pop)
  static check_size<sizeof(Double), 0 + sizeof(double)> __System_DoubleSizeCheck;
  static_assert(sizeof(Double) == 0x8);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Double, "System", "Double");
