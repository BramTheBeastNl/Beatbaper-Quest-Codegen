// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.TypeConverter
#include "System/ComponentModel/TypeConverter.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: ColumnTypeConverter
  class ColumnTypeConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(System::Data::ColumnTypeConverter);
DEFINE_IL2CPP_ARG_TYPE(System::Data::ColumnTypeConverter*, "System.Data", "ColumnTypeConverter");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.ColumnTypeConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class ColumnTypeConverter : public System::ComponentModel::TypeConverter {
    public:
    // Get static field: static private readonly System.Type[] s_types
    static ::ArrayW<System::Type*> _get_s_types();
    // Set static field: static private readonly System.Type[] s_types
    static void _set_s_types(::ArrayW<System::Type*> value);
    // static private System.Void .cctor()
    // Offset: 0x1D0F7F0
    static void _cctor();
  }; // System.Data.ColumnTypeConverter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::ColumnTypeConverter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::ColumnTypeConverter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ColumnTypeConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
