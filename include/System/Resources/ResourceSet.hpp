// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Resources
namespace System::Resources {
  // Forward declaring type: IResourceReader
  class IResourceReader;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Resources
namespace System::Resources {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Resources.ResourceSet
  // [ComVisibleAttribute] Offset: D7B62C
  class ResourceSet : public ::Il2CppObject/*, public System::IDisposable, public System::Collections::IEnumerable*/ {
    public:
    // protected System.Resources.IResourceReader Reader
    // Size: 0x8
    // Offset: 0x10
    System::Resources::IResourceReader* Reader;
    // Field size check
    static_assert(sizeof(System::Resources::IResourceReader*) == 0x8);
    // protected System.Collections.Hashtable Table
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Hashtable* Table;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _caseInsensitiveTable
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Hashtable* caseInsensitiveTable;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // Creating value type constructor for type: ResourceSet
    ResourceSet(System::Resources::IResourceReader* Reader_ = {}, System::Collections::Hashtable* Table_ = {}, System::Collections::Hashtable* caseInsensitiveTable_ = {}) noexcept : Reader{Reader_}, Table{Table_}, caseInsensitiveTable{caseInsensitiveTable_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IEnumerable
    operator System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerable*>(this);
    }
    // System.Void .ctor(System.Boolean junk)
    // Offset: 0x1419710
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResourceSet* New_ctor(bool junk) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Resources::ResourceSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResourceSet*, creationType>(junk)));
    }
    // private System.Void CommonInit()
    // Offset: 0x14196B0
    void CommonInit();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1419718
    void Dispose(bool disposing);
    // public System.Void Dispose()
    // Offset: 0x14197E4
    void Dispose();
    // public System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x14197F4
    System::Collections::IDictionaryEnumerator* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x14198A0
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Collections.IDictionaryEnumerator GetEnumeratorHelper()
    // Offset: 0x14197F8
    System::Collections::IDictionaryEnumerator* GetEnumeratorHelper();
    // public System.String GetString(System.String name)
    // Offset: 0x14198A4
    ::Il2CppString* GetString(::Il2CppString* name);
    // public System.String GetString(System.String name, System.Boolean ignoreCase)
    // Offset: 0x1419B0C
    ::Il2CppString* GetString(::Il2CppString* name, bool ignoreCase);
    // public System.Object GetObject(System.String name)
    // Offset: 0x1419FF4
    ::Il2CppObject* GetObject(::Il2CppString* name);
    // public System.Object GetObject(System.String name, System.Boolean ignoreCase)
    // Offset: 0x1419FF8
    ::Il2CppObject* GetObject(::Il2CppString* name, bool ignoreCase);
    // private System.Object GetObjectInternal(System.String name)
    // Offset: 0x1419A14
    ::Il2CppObject* GetObjectInternal(::Il2CppString* name);
    // private System.Object GetCaseInsensitiveObjectInternal(System.String name)
    // Offset: 0x1419D10
    ::Il2CppObject* GetCaseInsensitiveObjectInternal(::Il2CppString* name);
    // protected System.Void .ctor()
    // Offset: 0x1419688
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResourceSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Resources::ResourceSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResourceSet*, creationType>()));
    }
  }; // System.Resources.ResourceSet
  #pragma pack(pop)
  static check_size<sizeof(ResourceSet), 32 + sizeof(System::Collections::Hashtable*)> __System_Resources_ResourceSetSizeCheck;
  static_assert(sizeof(ResourceSet) == 0x28);
  // Writing MetadataGetter for method: ResourceSet::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)(bool)>(&ResourceSet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)(bool)>(&ResourceSet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::CommonInit
  // Il2CppName: CommonInit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)()>(&ResourceSet::CommonInit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "CommonInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::Dispose
  // Il2CppName: Dispose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)(bool)>(&ResourceSet::Dispose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::Dispose
  // Il2CppName: Dispose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)()>(&ResourceSet::Dispose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetEnumerator
  // Il2CppName: GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IDictionaryEnumerator* (ResourceSet::*)()>(&ResourceSet::GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::System_Collections_IEnumerable_GetEnumerator
  // Il2CppName: System.Collections.IEnumerable.GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ResourceSet::*)()>(&ResourceSet::System_Collections_IEnumerable_GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetEnumeratorHelper
  // Il2CppName: GetEnumeratorHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IDictionaryEnumerator* (ResourceSet::*)()>(&ResourceSet::GetEnumeratorHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetEnumeratorHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetString
  // Il2CppName: GetString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResourceSet::*)(::Il2CppString*)>(&ResourceSet::GetString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetString
  // Il2CppName: GetString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResourceSet::*)(::Il2CppString*, bool)>(&ResourceSet::GetString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetObject
  // Il2CppName: GetObject
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceSet::*)(::Il2CppString*)>(&ResourceSet::GetObject)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetObject
  // Il2CppName: GetObject
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceSet::*)(::Il2CppString*, bool)>(&ResourceSet::GetObject)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetObjectInternal
  // Il2CppName: GetObjectInternal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceSet::*)(::Il2CppString*)>(&ResourceSet::GetObjectInternal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetObjectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::GetCaseInsensitiveObjectInternal
  // Il2CppName: GetCaseInsensitiveObjectInternal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceSet::*)(::Il2CppString*)>(&ResourceSet::GetCaseInsensitiveObjectInternal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), "GetCaseInsensitiveObjectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ResourceSet::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)()>(&ResourceSet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceSet::*)()>(&ResourceSet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ResourceSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Resources::ResourceSet*, "System.Resources", "ResourceSet");
