// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Resources.IResourceReader
#include "System/Resources/IResourceReader.hpp"
// Including type: System.Resources.ResourceLocator
#include "System/Resources/ResourceLocator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Resources
namespace System::Resources {
  // Forward declaring type: ResourceTypeCode
  struct ResourceTypeCode;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryReader
  class BinaryReader;
  // Forward declaring type: UnmanagedMemoryStream
  class UnmanagedMemoryStream;
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: RuntimeType
  class RuntimeType;
}
// Forward declaring namespace: System::Runtime::Serialization::Formatters::Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Forward declaring type: BinaryFormatter
  class BinaryFormatter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
}
// Completed forward declares
// Type namespace: System.Resources
namespace System::Resources {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: System.Resources.ResourceReader
  // [ComVisibleAttribute] Offset: D7B618
  class ResourceReader : public ::Il2CppObject/*, public System::Resources::IResourceReader*/ {
    public:
    // Nested type: System::Resources::ResourceReader::ResourceEnumerator
    class ResourceEnumerator;
    // private System.IO.BinaryReader _store
    // Size: 0x8
    // Offset: 0x10
    System::IO::BinaryReader* store;
    // Field size check
    static_assert(sizeof(System::IO::BinaryReader*) == 0x8);
    // System.Collections.Generic.Dictionary`2<System.String,System.Resources.ResourceLocator> _resCache
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>* resCache;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>*) == 0x8);
    // private System.Int64 _nameSectionOffset
    // Size: 0x8
    // Offset: 0x20
    int64_t nameSectionOffset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _dataSectionOffset
    // Size: 0x8
    // Offset: 0x28
    int64_t dataSectionOffset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32[] _nameHashes
    // Size: 0x8
    // Offset: 0x30
    ::Array<int>* nameHashes;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32* _nameHashesPtr
    // Size: 0x8
    // Offset: 0x38
    int* nameHashesPtr;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.Int32[] _namePositions
    // Size: 0x8
    // Offset: 0x40
    ::Array<int>* namePositions;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32* _namePositionsPtr
    // Size: 0x8
    // Offset: 0x48
    int* namePositionsPtr;
    // Field size check
    static_assert(sizeof(int*) == 0x8);
    // private System.RuntimeType[] _typeTable
    // Size: 0x8
    // Offset: 0x50
    ::Array<System::RuntimeType*>* typeTable;
    // Field size check
    static_assert(sizeof(::Array<System::RuntimeType*>*) == 0x8);
    // private System.Int32[] _typeNamePositions
    // Size: 0x8
    // Offset: 0x58
    ::Array<int>* typeNamePositions;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _objFormatter
    // Size: 0x8
    // Offset: 0x60
    System::Runtime::Serialization::Formatters::Binary::BinaryFormatter* objFormatter;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryFormatter*) == 0x8);
    // private System.Int32 _numResources
    // Size: 0x4
    // Offset: 0x68
    int numResources;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numResources and: ums
    char __padding11[0x4] = {};
    // private System.IO.UnmanagedMemoryStream _ums
    // Size: 0x8
    // Offset: 0x70
    System::IO::UnmanagedMemoryStream* ums;
    // Field size check
    static_assert(sizeof(System::IO::UnmanagedMemoryStream*) == 0x8);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x78
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ResourceReader
    ResourceReader(System::IO::BinaryReader* store_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>* resCache_ = {}, int64_t nameSectionOffset_ = {}, int64_t dataSectionOffset_ = {}, ::Array<int>* nameHashes_ = {}, int* nameHashesPtr_ = {}, ::Array<int>* namePositions_ = {}, int* namePositionsPtr_ = {}, ::Array<System::RuntimeType*>* typeTable_ = {}, ::Array<int>* typeNamePositions_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryFormatter* objFormatter_ = {}, int numResources_ = {}, System::IO::UnmanagedMemoryStream* ums_ = {}, int version_ = {}) noexcept : store{store_}, resCache{resCache_}, nameSectionOffset{nameSectionOffset_}, dataSectionOffset{dataSectionOffset_}, nameHashes{nameHashes_}, nameHashesPtr{nameHashesPtr_}, namePositions{namePositions_}, namePositionsPtr{namePositionsPtr_}, typeTable{typeTable_}, typeNamePositions{typeNamePositions_}, objFormatter{objFormatter_}, numResources{numResources_}, ums{ums_}, version{version_} {}
    // Creating interface conversion operator: operator System::Resources::IResourceReader
    operator System::Resources::IResourceReader() noexcept {
      return *reinterpret_cast<System::Resources::IResourceReader*>(this);
    }
    // System.Void .ctor(System.IO.Stream stream, System.Collections.Generic.Dictionary`2<System.String,System.Resources.ResourceLocator> resCache)
    // Offset: 0x1415888
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResourceReader* New_ctor(System::IO::Stream* stream, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>* resCache) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Resources::ResourceReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResourceReader*, creationType>(stream, resCache)));
    }
    // public System.Void Close()
    // Offset: 0x1415AD8
    void Close();
    // public System.Void Dispose()
    // Offset: 0x1415B6C
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1415B20
    void Dispose(bool disposing);
    // static System.Int32 ReadUnalignedI4(System.Int32* p)
    // Offset: 0x1415BB4
    static int ReadUnalignedI4(int* p);
    // private System.Void SkipString()
    // Offset: 0x1415BBC
    void SkipString();
    // private System.Int32 GetNameHash(System.Int32 index)
    // Offset: 0x1415C94
    int GetNameHash(int index);
    // private System.Int32 GetNamePosition(System.Int32 index)
    // Offset: 0x1415CE4
    int GetNamePosition(int index);
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1415E38
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x1415E3C
    System::Collections::IDictionaryEnumerator* GetEnumerator();
    // System.Resources.ResourceReader/ResourceEnumerator GetEnumeratorInternal()
    // Offset: 0x1415F3C
    System::Resources::ResourceReader::ResourceEnumerator* GetEnumeratorInternal();
    // System.Int32 FindPosForResource(System.String name)
    // Offset: 0x1415FAC
    int FindPosForResource(::Il2CppString* name);
    // private System.Boolean CompareStringEqualsName(System.String name)
    // Offset: 0x1416370
    bool CompareStringEqualsName(::Il2CppString* name);
    // private System.String AllocateStringForNameIndex(System.Int32 index, out System.Int32 dataOffset)
    // Offset: 0x1416588
    ::Il2CppString* AllocateStringForNameIndex(int index, int& dataOffset);
    // private System.Object GetValueForNameIndex(System.Int32 index)
    // Offset: 0x1416E3C
    ::Il2CppObject* GetValueForNameIndex(int index);
    // System.String LoadString(System.Int32 pos)
    // Offset: 0x141734C
    ::Il2CppString* LoadString(int pos);
    // System.Object LoadObject(System.Int32 pos)
    // Offset: 0x1417968
    ::Il2CppObject* LoadObject(int pos);
    // System.Object LoadObject(System.Int32 pos, out System.Resources.ResourceTypeCode typeCode)
    // Offset: 0x14179A0
    ::Il2CppObject* LoadObject(int pos, System::Resources::ResourceTypeCode& typeCode);
    // System.Object LoadObjectV1(System.Int32 pos)
    // Offset: 0x14170DC
    ::Il2CppObject* LoadObjectV1(int pos);
    // private System.Object _LoadObjectV1(System.Int32 pos)
    // Offset: 0x1417A40
    ::Il2CppObject* _LoadObjectV1(int pos);
    // System.Object LoadObjectV2(System.Int32 pos, out System.Resources.ResourceTypeCode typeCode)
    // Offset: 0x1417210
    ::Il2CppObject* LoadObjectV2(int pos, System::Resources::ResourceTypeCode& typeCode);
    // private System.Object _LoadObjectV2(System.Int32 pos, out System.Resources.ResourceTypeCode typeCode)
    // Offset: 0x1418390
    ::Il2CppObject* _LoadObjectV2(int pos, System::Resources::ResourceTypeCode& typeCode);
    // private System.Object DeserializeObject(System.Int32 typeIndex)
    // Offset: 0x14181A8
    ::Il2CppObject* DeserializeObject(int typeIndex);
    // private System.Void ReadResources()
    // Offset: 0x1415968
    void ReadResources();
    // private System.Void _ReadResources()
    // Offset: 0x14189F8
    void _ReadResources();
    // private System.RuntimeType FindType(System.Int32 typeIndex)
    // Offset: 0x1417608
    System::RuntimeType* FindType(int typeIndex);
  }; // System.Resources.ResourceReader
  #pragma pack(pop)
  static check_size<sizeof(ResourceReader), 120 + sizeof(int)> __System_Resources_ResourceReaderSizeCheck;
  static_assert(sizeof(ResourceReader) == 0x7C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Resources::ResourceReader*, "System.Resources", "ResourceReader");
// Writing MetadataGetter for method: ResourceReader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)(System::IO::Stream*, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>*)>(&ResourceReader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)(System::IO::Stream*, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>*)>(&ResourceReader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Resources::ResourceLocator>*>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)()>(&ResourceReader::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)()>(&ResourceReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)(bool)>(&ResourceReader::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::ReadUnalignedI4
// Il2CppName: ReadUnalignedI4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int*)>(&ResourceReader::ReadUnalignedI4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "ReadUnalignedI4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int*>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::SkipString
// Il2CppName: SkipString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)()>(&ResourceReader::SkipString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "SkipString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::GetNameHash
// Il2CppName: GetNameHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ResourceReader::*)(int)>(&ResourceReader::GetNameHash)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "GetNameHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::GetNamePosition
// Il2CppName: GetNamePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ResourceReader::*)(int)>(&ResourceReader::GetNamePosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "GetNamePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ResourceReader::*)()>(&ResourceReader::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IDictionaryEnumerator* (ResourceReader::*)()>(&ResourceReader::GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::GetEnumeratorInternal
// Il2CppName: GetEnumeratorInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Resources::ResourceReader::ResourceEnumerator* (ResourceReader::*)()>(&ResourceReader::GetEnumeratorInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "GetEnumeratorInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::FindPosForResource
// Il2CppName: FindPosForResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ResourceReader::*)(::Il2CppString*)>(&ResourceReader::FindPosForResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "FindPosForResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::CompareStringEqualsName
// Il2CppName: CompareStringEqualsName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResourceReader::*)(::Il2CppString*)>(&ResourceReader::CompareStringEqualsName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "CompareStringEqualsName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::AllocateStringForNameIndex
// Il2CppName: AllocateStringForNameIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResourceReader::*)(int, int&)>(&ResourceReader::AllocateStringForNameIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "AllocateStringForNameIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::GetValueForNameIndex
// Il2CppName: GetValueForNameIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int)>(&ResourceReader::GetValueForNameIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "GetValueForNameIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::LoadString
// Il2CppName: LoadString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResourceReader::*)(int)>(&ResourceReader::LoadString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "LoadString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::LoadObject
// Il2CppName: LoadObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int)>(&ResourceReader::LoadObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "LoadObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::LoadObject
// Il2CppName: LoadObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int, System::Resources::ResourceTypeCode&)>(&ResourceReader::LoadObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "LoadObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Resources::ResourceTypeCode&>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::LoadObjectV1
// Il2CppName: LoadObjectV1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int)>(&ResourceReader::LoadObjectV1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "LoadObjectV1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::_LoadObjectV1
// Il2CppName: _LoadObjectV1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int)>(&ResourceReader::_LoadObjectV1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "_LoadObjectV1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::LoadObjectV2
// Il2CppName: LoadObjectV2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int, System::Resources::ResourceTypeCode&)>(&ResourceReader::LoadObjectV2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "LoadObjectV2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Resources::ResourceTypeCode&>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::_LoadObjectV2
// Il2CppName: _LoadObjectV2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int, System::Resources::ResourceTypeCode&)>(&ResourceReader::_LoadObjectV2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "_LoadObjectV2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Resources::ResourceTypeCode&>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::DeserializeObject
// Il2CppName: DeserializeObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ResourceReader::*)(int)>(&ResourceReader::DeserializeObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "DeserializeObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResourceReader::ReadResources
// Il2CppName: ReadResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)()>(&ResourceReader::ReadResources)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "ReadResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::_ReadResources
// Il2CppName: _ReadResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceReader::*)()>(&ResourceReader::_ReadResources)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "_ReadResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceReader::FindType
// Il2CppName: FindType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (ResourceReader::*)(int)>(&ResourceReader::FindType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceReader*), "FindType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
