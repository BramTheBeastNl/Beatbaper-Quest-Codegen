// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: RuntimeType
  class RuntimeType;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Array
  class Array;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.Enum
  // [ComVisibleAttribute] Offset: D7A5E0
  class Enum/*, public System::ValueType, public System::IComparable, public System::IFormattable, public System::IConvertible*/ {
    public:
    // Nested type: System::Enum::ParseFailureKind
    struct ParseFailureKind;
    // Nested type: System::Enum::EnumResult
    struct EnumResult;
    // Nested type: System::Enum::ValuesAndNames
    class ValuesAndNames;
    // Creating value type constructor for type: Enum
    Enum() noexcept {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormattable
    operator System::IFormattable() noexcept {
      return *reinterpret_cast<System::IFormattable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Get static field: static private readonly System.Char[] enumSeperatorCharArray
    static ::Array<::Il2CppChar>* _get_enumSeperatorCharArray();
    // Set static field: static private readonly System.Char[] enumSeperatorCharArray
    static void _set_enumSeperatorCharArray(::Array<::Il2CppChar>* value);
    // static field const value: static private System.String enumSeperator
    static constexpr const char* enumSeperator = ", ";
    // Get static field: static private System.String enumSeperator
    static ::Il2CppString* _get_enumSeperator();
    // Set static field: static private System.String enumSeperator
    static void _set_enumSeperator(::Il2CppString* value);
    // static private System.Enum/ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, System.Boolean getNames)
    // Offset: 0x17A8AB8
    static System::Enum::ValuesAndNames* GetCachedValuesAndNames(System::RuntimeType* enumType, bool getNames);
    // static private System.String InternalFormattedHexString(System.Object value)
    // Offset: 0x17A8C44
    static ::Il2CppString* InternalFormattedHexString(::Il2CppObject* value);
    // static private System.String InternalFormat(System.RuntimeType eT, System.Object value)
    // Offset: 0x17A9050
    static ::Il2CppString* InternalFormat(System::RuntimeType* eT, ::Il2CppObject* value);
    // static private System.String InternalFlagsFormat(System.RuntimeType eT, System.Object value)
    // Offset: 0x17A9250
    static ::Il2CppString* InternalFlagsFormat(System::RuntimeType* eT, ::Il2CppObject* value);
    // static System.UInt64 ToUInt64(System.Object value)
    // Offset: 0x17A9448
    static uint64_t ToUInt64(::Il2CppObject* value);
    // static private System.Int32 InternalCompareTo(System.Object o1, System.Object o2)
    // Offset: 0x17A9638
    static int InternalCompareTo(::Il2CppObject* o1, ::Il2CppObject* o2);
    // static System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType)
    // Offset: 0x17A963C
    static System::RuntimeType* InternalGetUnderlyingType(System::RuntimeType* enumType);
    // static private System.Boolean GetEnumValuesAndNames(System.RuntimeType enumType, out System.UInt64[] values, out System.String[] names)
    // Offset: 0x17A8C08
    static bool GetEnumValuesAndNames(System::RuntimeType* enumType, ::Array<uint64_t>*& values, ::Array<::Il2CppString*>*& names);
    // static private System.Object InternalBoxEnum(System.RuntimeType enumType, System.Int64 value)
    // Offset: 0x17A9640
    static ::Il2CppObject* InternalBoxEnum(System::RuntimeType* enumType, int64_t value);
    // static public System.Object Parse(System.Type enumType, System.String value)
    // Offset: 0x17A9644
    static ::Il2CppObject* Parse(System::Type* enumType, ::Il2CppString* value);
    // static public System.Object Parse(System.Type enumType, System.String value, System.Boolean ignoreCase)
    // Offset: 0x17A96BC
    static ::Il2CppObject* Parse(System::Type* enumType, ::Il2CppString* value, bool ignoreCase);
    // static private System.Boolean TryParseEnum(System.Type enumType, System.String value, System.Boolean ignoreCase, ref System.Enum/EnumResult parseResult)
    // Offset: 0x17A97F0
    static bool TryParseEnum(System::Type* enumType, ::Il2CppString* value, bool ignoreCase, System::Enum::EnumResult& parseResult);
    // static public System.Type GetUnderlyingType(System.Type enumType)
    // Offset: 0x17AA0D8
    static System::Type* GetUnderlyingType(System::Type* enumType);
    // static public System.Array GetValues(System.Type enumType)
    // Offset: 0x17AA86C
    static System::Array* GetValues(System::Type* enumType);
    // static System.UInt64[] InternalGetValues(System.RuntimeType enumType)
    // Offset: 0x17AA934
    static ::Array<uint64_t>* InternalGetValues(System::RuntimeType* enumType);
    // static public System.String GetName(System.Type enumType, System.Object value)
    // Offset: 0x17A9178
    static ::Il2CppString* GetName(System::Type* enumType, ::Il2CppObject* value);
    // static public System.String[] GetNames(System.Type enumType)
    // Offset: 0x17AA9AC
    static ::Array<::Il2CppString*>* GetNames(System::Type* enumType);
    // static System.String[] InternalGetNames(System.RuntimeType enumType)
    // Offset: 0x17AAA74
    static ::Array<::Il2CppString*>* InternalGetNames(System::RuntimeType* enumType);
    // static public System.Object ToObject(System.Type enumType, System.Object value)
    // Offset: 0x17AA1A0
    static ::Il2CppObject* ToObject(System::Type* enumType, ::Il2CppObject* value);
    // static public System.Boolean IsDefined(System.Type enumType, System.Object value)
    // Offset: 0x17ABAB0
    static bool IsDefined(System::Type* enumType, ::Il2CppObject* value);
    // private System.Object get_value()
    // Offset: 0x17ABB88
    ::Il2CppObject* get_value();
    // System.Object GetValue()
    // Offset: 0x17ABB8C
    ::Il2CppObject* GetValue();
    // private System.Boolean InternalHasFlag(System.Enum flags)
    // Offset: 0x17ABB90
    bool InternalHasFlag(System::Enum* flags);
    // private System.Int32 get_hashcode()
    // Offset: 0x17ABB94
    int get_hashcode();
    // public System.String ToString(System.String format, System.IFormatProvider provider)
    // Offset: 0x17ABC74
    ::Il2CppString* ToString(::Il2CppString* format, System::IFormatProvider* provider);
    // public System.Int32 CompareTo(System.Object target)
    // Offset: 0x17ABEA0
    int CompareTo(::Il2CppObject* target);
    // public System.String ToString(System.String format)
    // Offset: 0x17ABC78
    ::Il2CppString* ToString(::Il2CppString* format);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0x17AC0CC
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // public System.Boolean HasFlag(System.Enum flag)
    // Offset: 0x17AC0D8
    bool HasFlag(System::Enum* flag);
    // public System.TypeCode GetTypeCode()
    // Offset: 0x17AC284
    System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0x17AC64C
    bool System_IConvertible_ToBoolean(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0x17AC718
    ::Il2CppChar System_IConvertible_ToChar(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0x17AC7C0
    int8_t System_IConvertible_ToSByte(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0x17AC868
    uint8_t System_IConvertible_ToByte(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0x17AC910
    int16_t System_IConvertible_ToInt16(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0x17AC9B8
    uint16_t System_IConvertible_ToUInt16(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0x17ACA60
    int System_IConvertible_ToInt32(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0x17ACB08
    uint System_IConvertible_ToUInt32(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0x17ACBB0
    int64_t System_IConvertible_ToInt64(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0x17ACC58
    uint64_t System_IConvertible_ToUInt64(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0x17ACD00
    float System_IConvertible_ToSingle(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0x17ACDA8
    double System_IConvertible_ToDouble(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0x17ACE50
    System::Decimal System_IConvertible_ToDecimal(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0x17ACEF8
    System::DateTime System_IConvertible_ToDateTime(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0x17ACFE4
    ::Il2CppObject* System_IConvertible_ToType(System::Type* type, System::IFormatProvider* provider);
    // static public System.Object ToObject(System.Type enumType, System.SByte value)
    // Offset: 0x17AACAC
    static ::Il2CppObject* ToObject(System::Type* enumType, int8_t value);
    // static public System.Object ToObject(System.Type enumType, System.Int16 value)
    // Offset: 0x17AAE6C
    static ::Il2CppObject* ToObject(System::Type* enumType, int16_t value);
    // static public System.Object ToObject(System.Type enumType, System.Int32 value)
    // Offset: 0x17AAAEC
    static ::Il2CppObject* ToObject(System::Type* enumType, int value);
    // static public System.Object ToObject(System.Type enumType, System.Byte value)
    // Offset: 0x17AB3AC
    static ::Il2CppObject* ToObject(System::Type* enumType, uint8_t value);
    // static public System.Object ToObject(System.Type enumType, System.UInt16 value)
    // Offset: 0x17AB56C
    static ::Il2CppObject* ToObject(System::Type* enumType, uint16_t value);
    // static public System.Object ToObject(System.Type enumType, System.UInt32 value)
    // Offset: 0x17AB1EC
    static ::Il2CppObject* ToObject(System::Type* enumType, uint value);
    // static public System.Object ToObject(System.Type enumType, System.Int64 value)
    // Offset: 0x17AB02C
    static ::Il2CppObject* ToObject(System::Type* enumType, int64_t value);
    // static public System.Object ToObject(System.Type enumType, System.UInt64 value)
    // Offset: 0x17AA6AC
    static ::Il2CppObject* ToObject(System::Type* enumType, uint64_t value);
    // static private System.Object ToObject(System.Type enumType, System.Char value)
    // Offset: 0x17AB72C
    static ::Il2CppObject* ToObject(System::Type* enumType, ::Il2CppChar value);
    // static private System.Object ToObject(System.Type enumType, System.Boolean value)
    // Offset: 0x17AB8EC
    static ::Il2CppObject* ToObject(System::Type* enumType, bool value);
    // static private System.Void .cctor()
    // Offset: 0x17AD06C
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x17ABB98
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x17ABBA0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x17ABBA4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // protected System.Void .ctor()
    // Offset: 0x17AD064
    // Implemented from: System.ValueType
    // Base method: System.Void ValueType::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Enum* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Enum::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Enum*, creationType>()));
    }
  }; // System.Enum
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(System::Enum*, "System", "Enum");
// Writing MetadataGetter for method: Enum::GetCachedValuesAndNames
// Il2CppName: GetCachedValuesAndNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Enum::ValuesAndNames* (*)(System::RuntimeType*, bool)>(&Enum::GetCachedValuesAndNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetCachedValuesAndNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalFormattedHexString
// Il2CppName: InternalFormattedHexString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*)>(&Enum::InternalFormattedHexString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalFormattedHexString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalFormat
// Il2CppName: InternalFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::RuntimeType*, ::Il2CppObject*)>(&Enum::InternalFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalFlagsFormat
// Il2CppName: InternalFlagsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::RuntimeType*, ::Il2CppObject*)>(&Enum::InternalFlagsFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalFlagsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::ToUInt64
// Il2CppName: ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::Il2CppObject*)>(&Enum::ToUInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalCompareTo
// Il2CppName: InternalCompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppObject*, ::Il2CppObject*)>(&Enum::InternalCompareTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalCompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalGetUnderlyingType
// Il2CppName: InternalGetUnderlyingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (*)(System::RuntimeType*)>(&Enum::InternalGetUnderlyingType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalGetUnderlyingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: Enum::GetEnumValuesAndNames
// Il2CppName: GetEnumValuesAndNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*, ::Array<uint64_t>*&, ::Array<::Il2CppString*>*&)>(&Enum::GetEnumValuesAndNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetEnumValuesAndNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint64_t>*&>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*&>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalBoxEnum
// Il2CppName: InternalBoxEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::RuntimeType*, int64_t)>(&Enum::InternalBoxEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalBoxEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Enum::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, ::Il2CppString*)>(&Enum::Parse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Enum::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, ::Il2CppString*, bool)>(&Enum::Parse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Enum::TryParseEnum
// Il2CppName: TryParseEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, ::Il2CppString*, bool, System::Enum::EnumResult&)>(&Enum::TryParseEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "TryParseEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Enum::EnumResult&>()});
  }
};
// Writing MetadataGetter for method: Enum::GetUnderlyingType
// Il2CppName: GetUnderlyingType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::Type*)>(&Enum::GetUnderlyingType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetUnderlyingType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Enum::GetValues
// Il2CppName: GetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (*)(System::Type*)>(&Enum::GetValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalGetValues
// Il2CppName: InternalGetValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint64_t>* (*)(System::RuntimeType*)>(&Enum::InternalGetValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalGetValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: Enum::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Type*, ::Il2CppObject*)>(&Enum::GetName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::GetNames
// Il2CppName: GetNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(System::Type*)>(&Enum::GetNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Enum::InternalGetNames
// Il2CppName: InternalGetNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(System::RuntimeType*)>(&Enum::InternalGetNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalGetNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, ::Il2CppObject*)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::IsDefined
// Il2CppName: IsDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, ::Il2CppObject*)>(&Enum::IsDefined)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "IsDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Enum::*)()>(&Enum::get_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Enum::*)()>(&Enum::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::InternalHasFlag
// Il2CppName: InternalHasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Enum::*)(System::Enum*)>(&Enum::InternalHasFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "InternalHasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Enum*>()});
  }
};
// Writing MetadataGetter for method: Enum::get_hashcode
// Il2CppName: get_hashcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Enum::*)()>(&Enum::get_hashcode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "get_hashcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Enum::*)(::Il2CppString*, System::IFormatProvider*)>(&Enum::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Enum::*)(::Il2CppObject*)>(&Enum::CompareTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Enum::*)(::Il2CppString*)>(&Enum::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Enum::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Enum::*)(System::IFormatProvider*)>(&Enum::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::HasFlag
// Il2CppName: HasFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Enum::*)(System::Enum*)>(&Enum::HasFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "HasFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Enum*>()});
  }
};
// Writing MetadataGetter for method: Enum::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TypeCode (Enum::*)()>(&Enum::GetTypeCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToBoolean
// Il2CppName: System.IConvertible.ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToBoolean)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToChar
// Il2CppName: System.IConvertible.ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToSByte
// Il2CppName: System.IConvertible.ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToSByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToByte
// Il2CppName: System.IConvertible.ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToInt16
// Il2CppName: System.IConvertible.ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToUInt16
// Il2CppName: System.IConvertible.ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToUInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToInt32
// Il2CppName: System.IConvertible.ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToUInt32
// Il2CppName: System.IConvertible.ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToUInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToInt64
// Il2CppName: System.IConvertible.ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToUInt64
// Il2CppName: System.IConvertible.ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToUInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToSingle
// Il2CppName: System.IConvertible.ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToSingle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToDouble
// Il2CppName: System.IConvertible.ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToDecimal
// Il2CppName: System.IConvertible.ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Decimal (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToDecimal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToDateTime
// Il2CppName: System.IConvertible.ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (Enum::*)(System::IFormatProvider*)>(&Enum::System_IConvertible_ToDateTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::System_IConvertible_ToType
// Il2CppName: System.IConvertible.ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Enum::*)(System::Type*, System::IFormatProvider*)>(&Enum::System_IConvertible_ToType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, int8_t)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int8_t>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, int16_t)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int16_t>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, int)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, uint8_t)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, uint16_t)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<uint16_t>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, uint)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, int64_t)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, uint64_t)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, ::Il2CppChar)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: Enum::ToObject
// Il2CppName: ToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(System::Type*, bool)>(&Enum::ToObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Enum::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Enum::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Enum::*)(::Il2CppObject*)>(&Enum::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Enum::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Enum::*)()>(&Enum::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Enum::*)()>(&Enum::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Enum::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Enum::*)()>(&Enum::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Enum::*)()>(&Enum::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Enum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
