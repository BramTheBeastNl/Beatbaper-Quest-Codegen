// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: DateTimeStyles
  struct DateTimeStyles;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0xA
  #pragma pack(push, 1)
  // Autogenerated type: System.DateTimeOffset
  // [] Offset: FFFFFFFF
  struct DateTimeOffset/*, public System::ValueType, public System::IComparable, public System::IFormattable, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback, public System::IComparable_1<System::DateTimeOffset>, public System::IEquatable_1<System::DateTimeOffset>*/ {
    public:
    // private System.DateTime m_dateTime
    // Size: 0x8
    // Offset: 0x0
    System::DateTime m_dateTime;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.Int16 m_offsetMinutes
    // Size: 0x2
    // Offset: 0x8
    int16_t m_offsetMinutes;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Creating value type constructor for type: DateTimeOffset
    constexpr DateTimeOffset(System::DateTime m_dateTime_ = {}, int16_t m_offsetMinutes_ = {}) noexcept : m_dateTime{m_dateTime_}, m_offsetMinutes{m_offsetMinutes_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormattable
    operator System::IFormattable() noexcept {
      return *reinterpret_cast<System::IFormattable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<System::DateTimeOffset>
    operator System::IComparable_1<System::DateTimeOffset>() noexcept {
      return *reinterpret_cast<System::IComparable_1<System::DateTimeOffset>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<System::DateTimeOffset>
    operator System::IEquatable_1<System::DateTimeOffset>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<System::DateTimeOffset>*>(this);
    }
    // Get static field: static public readonly System.DateTimeOffset MinValue
    static System::DateTimeOffset _get_MinValue();
    // Set static field: static public readonly System.DateTimeOffset MinValue
    static void _set_MinValue(System::DateTimeOffset value);
    // Get static field: static public readonly System.DateTimeOffset MaxValue
    static System::DateTimeOffset _get_MaxValue();
    // Set static field: static public readonly System.DateTimeOffset MaxValue
    static void _set_MaxValue(System::DateTimeOffset value);
    // public System.Void .ctor(System.Int64 ticks, System.TimeSpan offset)
    // Offset: 0xDFE1BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    DateTimeOffset(int64_t ticks, System::TimeSpan offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::DateTimeOffset::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ticks, offset)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, ticks, offset);
    }
    // public System.Void .ctor(System.DateTime dateTime)
    // Offset: 0xDFE1C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    DateTimeOffset(System::DateTime dateTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::DateTimeOffset::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dateTime)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, dateTime);
    }
    // public System.DateTime get_UtcDateTime()
    // Offset: 0xDFE1CC
    System::DateTime get_UtcDateTime();
    // private System.DateTime get_ClockDateTime()
    // Offset: 0xDFE1D4
    System::DateTime get_ClockDateTime();
    // public System.TimeSpan get_Offset()
    // Offset: 0xDFE1DC
    System::TimeSpan get_Offset();
    // private System.Int32 System.IComparable.CompareTo(System.Object obj)
    // Offset: 0xDFE214
    int System_IComparable_CompareTo(::Il2CppObject* obj);
    // public System.Int32 CompareTo(System.DateTimeOffset other)
    // Offset: 0xDFE21C
    int CompareTo(System::DateTimeOffset other);
    // public System.Boolean Equals(System.DateTimeOffset other)
    // Offset: 0xDFE22C
    bool Equals(System::DateTimeOffset other);
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0xDFE234
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xDFE23C
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xDFE244
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    DateTimeOffset(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::DateTimeOffset::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(info, context)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, info, context);
    }
    // public System.Int64 ToUnixTimeMilliseconds()
    // Offset: 0xDFE27C
    int64_t ToUnixTimeMilliseconds();
    // public System.String ToString(System.String format, System.IFormatProvider formatProvider)
    // Offset: 0xDFE2E0
    ::Il2CppString* ToString(::Il2CppString* format, System::IFormatProvider* formatProvider);
    // static public System.Boolean TryParseExact(System.String input, System.String[] formats, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out System.DateTimeOffset result)
    // Offset: 0x1990CE8
    static bool TryParseExact(::Il2CppString* input, ::Array<::Il2CppString*>* formats, System::IFormatProvider* formatProvider, System::Globalization::DateTimeStyles styles, System::DateTimeOffset& result);
    // static private System.Int16 ValidateOffset(System.TimeSpan offset)
    // Offset: 0x198FF50
    static int16_t ValidateOffset(System::TimeSpan offset);
    // static private System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset)
    // Offset: 0x1990070
    static System::DateTime ValidateDate(System::DateTime dateTime, System::TimeSpan offset);
    // static private System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, System.String parameterName)
    // Offset: 0x1990E30
    static System::Globalization::DateTimeStyles ValidateStyles(System::Globalization::DateTimeStyles style, ::Il2CppString* parameterName);
    // static private System.Void .cctor()
    // Offset: 0x19911A0
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xDFE224
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDFE24C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xDFE2D8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.DateTimeOffset
  #pragma pack(pop)
  static check_size<sizeof(DateTimeOffset), 8 + sizeof(int16_t)> __System_DateTimeOffsetSizeCheck;
  static_assert(sizeof(DateTimeOffset) == 0xA);
  // static public System.TimeSpan op_Subtraction(System.DateTimeOffset left, System.DateTimeOffset right)
  // Offset: 0x1991078
  System::TimeSpan operator-(const System::DateTimeOffset& left, const System::DateTimeOffset& right);
  // static public System.Boolean op_Equality(System.DateTimeOffset left, System.DateTimeOffset right)
  // Offset: 0x199110C
  bool operator ==(const System::DateTimeOffset& left, const System::DateTimeOffset& right);
}
DEFINE_IL2CPP_ARG_TYPE(System::DateTimeOffset, "System", "DateTimeOffset");
