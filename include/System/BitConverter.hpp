// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.BitConverter
  class BitConverter : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: BitConverter
    BitConverter() noexcept {}
    // Get static field: static public readonly System.Boolean IsLittleEndian
    static bool _get_IsLittleEndian();
    // Set static field: static public readonly System.Boolean IsLittleEndian
    static void _set_IsLittleEndian(bool value);
    // static private System.Boolean AmILittleEndian()
    // Offset: 0x177BB28
    static bool AmILittleEndian();
    // static public System.Byte[] GetBytes(System.Int16 value)
    // Offset: 0x177BB30
    static ::Array<uint8_t>* GetBytes(int16_t value);
    // static public System.Byte[] GetBytes(System.Int32 value)
    // Offset: 0x177BBA4
    static ::Array<uint8_t>* GetBytes(int value);
    // static public System.Byte[] GetBytes(System.Int64 value)
    // Offset: 0x177BC18
    static ::Array<uint8_t>* GetBytes(int64_t value);
    // static public System.Byte[] GetBytes(System.UInt16 value)
    // Offset: 0x177BC8C
    static ::Array<uint8_t>* GetBytes(uint16_t value);
    // static public System.Byte[] GetBytes(System.UInt32 value)
    // Offset: 0x177BCF0
    static ::Array<uint8_t>* GetBytes(uint value);
    // static public System.Char ToChar(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177BD54
    static ::Il2CppChar ToChar(::Array<uint8_t>* value, int startIndex);
    // static public System.Int16 ToInt16(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177BE18
    static int16_t ToInt16(::Array<uint8_t>* value, int startIndex);
    // static public System.Int32 ToInt32(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177BF28
    static int ToInt32(::Array<uint8_t>* value, int startIndex);
    // static public System.Int64 ToInt64(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177C054
    static int64_t ToInt64(::Array<uint8_t>* value, int startIndex);
    // static public System.UInt16 ToUInt16(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177C1AC
    static uint16_t ToUInt16(::Array<uint8_t>* value, int startIndex);
    // static public System.UInt32 ToUInt32(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177C270
    static uint ToUInt32(::Array<uint8_t>* value, int startIndex);
    // static public System.UInt64 ToUInt64(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177C334
    static uint64_t ToUInt64(::Array<uint8_t>* value, int startIndex);
    // static public System.Single ToSingle(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177C3F8
    static float ToSingle(::Array<uint8_t>* value, int startIndex);
    // static public System.Double ToDouble(System.Byte[] value, System.Int32 startIndex)
    // Offset: 0x177C4C4
    static double ToDouble(::Array<uint8_t>* value, int startIndex);
    // static private System.Char GetHexValue(System.Int32 i)
    // Offset: 0x177C590
    static ::Il2CppChar GetHexValue(int i);
    // static public System.String ToString(System.Byte[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x177C5A8
    static ::Il2CppString* ToString(::Array<uint8_t>* value, int startIndex, int length);
    // static public System.String ToString(System.Byte[] value)
    // Offset: 0x177C914
    static ::Il2CppString* ToString(::Array<uint8_t>* value);
    // static public System.Int64 DoubleToInt64Bits(System.Double value)
    // Offset: 0x177C9BC
    static int64_t DoubleToInt64Bits(double value);
    // static public System.Double Int64BitsToDouble(System.Int64 value)
    // Offset: 0x177C9C4
    static double Int64BitsToDouble(int64_t value);
    // static private System.Void .cctor()
    // Offset: 0x177C9CC
    static void _cctor();
  }; // System.BitConverter
  #pragma pack(pop)
  // Writing MetadataGetter for method: BitConverter::AmILittleEndian
  // Il2CppName: AmILittleEndian
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&BitConverter::AmILittleEndian)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "AmILittleEndian", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: BitConverter::GetBytes
  // Il2CppName: GetBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(int16_t)>(&BitConverter::GetBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int16_t>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::GetBytes
  // Il2CppName: GetBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(int)>(&BitConverter::GetBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::GetBytes
  // Il2CppName: GetBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(int64_t)>(&BitConverter::GetBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::GetBytes
  // Il2CppName: GetBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(uint16_t)>(&BitConverter::GetBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint16_t>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::GetBytes
  // Il2CppName: GetBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(uint)>(&BitConverter::GetBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToChar
  // Il2CppName: ToChar
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Array<uint8_t>*, int)>(&BitConverter::ToChar)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToInt16
  // Il2CppName: ToInt16
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(::Array<uint8_t>*, int)>(&BitConverter::ToInt16)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToInt32
  // Il2CppName: ToInt32
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<uint8_t>*, int)>(&BitConverter::ToInt32)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToInt64
  // Il2CppName: ToInt64
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::Array<uint8_t>*, int)>(&BitConverter::ToInt64)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToUInt16
  // Il2CppName: ToUInt16
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(::Array<uint8_t>*, int)>(&BitConverter::ToUInt16)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToUInt32
  // Il2CppName: ToUInt32
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Array<uint8_t>*, int)>(&BitConverter::ToUInt32)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToUInt64
  // Il2CppName: ToUInt64
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::Array<uint8_t>*, int)>(&BitConverter::ToUInt64)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToSingle
  // Il2CppName: ToSingle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Array<uint8_t>*, int)>(&BitConverter::ToSingle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToDouble
  // Il2CppName: ToDouble
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::Array<uint8_t>*, int)>(&BitConverter::ToDouble)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::GetHexValue
  // Il2CppName: GetHexValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(int)>(&BitConverter::GetHexValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "GetHexValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<uint8_t>*, int, int)>(&BitConverter::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<uint8_t>*)>(&BitConverter::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::DoubleToInt64Bits
  // Il2CppName: DoubleToInt64Bits
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(double)>(&BitConverter::DoubleToInt64Bits)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "DoubleToInt64Bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::Int64BitsToDouble
  // Il2CppName: Int64BitsToDouble
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(int64_t)>(&BitConverter::Int64BitsToDouble)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), "Int64BitsToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: BitConverter::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BitConverter::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(BitConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::BitConverter*, "System", "BitConverter");
