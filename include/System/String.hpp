// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: StringComparison
  struct StringComparison;
  // Forward declaring type: StringSplitOptions
  struct StringSplitOptions;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: ParamsArray
  struct ParamsArray;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
  // Forward declaring type: NormalizationForm
  struct NormalizationForm;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: CompareOptions
  struct CompareOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Autogenerated type: System.String
  class String : public ::Il2CppObject, public System::IComparable, public System::ICloneable, public System::IConvertible, public System::Collections::IEnumerable, public System::IComparable_1<::Il2CppString*>, public System::Collections::Generic::IEnumerable_1<::Il2CppChar>, public System::IEquatable_1<::Il2CppString*> {
    public:
    // private System.Int32 m_stringLength
    // Offset: 0x10
    int m_stringLength;
    // private System.Char m_firstChar
    // Offset: 0x14
    ::Il2CppChar m_firstChar;
    // static field const value: static private System.Int32 TrimHead
    static constexpr const int TrimHead = 0;
    // Get static field: static private System.Int32 TrimHead
    static int _get_TrimHead();
    // Set static field: static private System.Int32 TrimHead
    static void _set_TrimHead(int value);
    // static field const value: static private System.Int32 TrimTail
    static constexpr const int TrimTail = 1;
    // Get static field: static private System.Int32 TrimTail
    static int _get_TrimTail();
    // Set static field: static private System.Int32 TrimTail
    static void _set_TrimTail(int value);
    // static field const value: static private System.Int32 TrimBoth
    static constexpr const int TrimBoth = 2;
    // Get static field: static private System.Int32 TrimBoth
    static int _get_TrimBoth();
    // Set static field: static private System.Int32 TrimBoth
    static void _set_TrimBoth(int value);
    // Get static field: static public readonly System.String Empty
    static ::Il2CppString* _get_Empty();
    // Set static field: static public readonly System.String Empty
    static void _set_Empty(::Il2CppString* value);
    // static field const value: static private System.Int32 charPtrAlignConst
    static constexpr const int charPtrAlignConst = 1;
    // Get static field: static private System.Int32 charPtrAlignConst
    static int _get_charPtrAlignConst();
    // Set static field: static private System.Int32 charPtrAlignConst
    static void _set_charPtrAlignConst(int value);
    // static field const value: static private System.Int32 alignConst
    static constexpr const int alignConst = 3;
    // Get static field: static private System.Int32 alignConst
    static int _get_alignConst();
    // Set static field: static private System.Int32 alignConst
    static void _set_alignConst(int value);
    // static public System.String Join(System.String separator, System.String[] value)
    // Offset: 0xDECDB4
    static ::Il2CppString* Join(::Il2CppString* separator, ::Array<::Il2CppString*>* value);
    // static public System.String Join(System.String separator, System.String[] value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDECE50
    static ::Il2CppString* Join(::Il2CppString* separator, ::Array<::Il2CppString*>* value, int startIndex, int count);
    // static private System.Int32 CompareOrdinalIgnoreCaseHelper(System.String strA, System.String strB)
    // Offset: 0xDED0F4
    static int CompareOrdinalIgnoreCaseHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // static private System.Boolean EqualsHelper(System.String strA, System.String strB)
    // Offset: 0xDED1E0
    static bool EqualsHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // static private System.Int32 CompareOrdinalHelper(System.String strA, System.String strB)
    // Offset: 0xDED32C
    static int CompareOrdinalHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // public System.Boolean Equals(System.String value, System.StringComparison comparisonType)
    // Offset: 0xDED59C
    bool Equals(::Il2CppString* value, System::StringComparison comparisonType);
    // static public System.Boolean Equals(System.String a, System.String b)
    // Offset: 0xDED890
    static bool Equals(::Il2CppString* a, ::Il2CppString* b);
    // static public System.Boolean Equals(System.String a, System.String b, System.StringComparison comparisonType)
    // Offset: 0xDE3CC4
    static bool Equals(::Il2CppString* a, ::Il2CppString* b, System::StringComparison comparisonType);
    // public System.Char get_Chars(System.Int32 index)
    // Offset: 0xDE0F48
    ::Il2CppChar get_Chars(int index);
    // public System.Void CopyTo(System.Int32 sourceIndex, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0xDED8CC
    void CopyTo(int sourceIndex, ::Array<::Il2CppChar>* destination, int destinationIndex, int count);
    // public System.Char[] ToCharArray()
    // Offset: 0xDEDAB8
    ::Array<::Il2CppChar>* ToCharArray();
    // static public System.Boolean IsNullOrEmpty(System.String value)
    // Offset: 0xDE1AEC
    static bool IsNullOrEmpty(::Il2CppString* value);
    // static public System.Boolean IsNullOrWhiteSpace(System.String value)
    // Offset: 0xDEDB50
    static bool IsNullOrWhiteSpace(::Il2CppString* value);
    // System.Int32 GetLegacyNonRandomizedHashCode()
    // Offset: 0xDEDC84
    int GetLegacyNonRandomizedHashCode();
    // public System.String[] Split(System.Char[] separator)
    // Offset: 0xDE6B24
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator);
    // public System.String[] Split(System.Char[] separator, System.Int32 count)
    // Offset: 0xDEDF68
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator, int count);
    // public System.String[] Split(System.Char[] separator, System.StringSplitOptions options)
    // Offset: 0xDEDF70
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator, System::StringSplitOptions options);
    // System.String[] SplitInternal(System.Char[] separator, System.Int32 count, System.StringSplitOptions options)
    // Offset: 0xDEDCFC
    ::Array<::Il2CppString*>* SplitInternal(::Array<::Il2CppChar>* separator, int count, System::StringSplitOptions options);
    // private System.String[] InternalSplitKeepEmptyEntries(System.Int32[] sepList, System.Int32[] lengthList, System.Int32 numReplaces, System.Int32 count)
    // Offset: 0xDEE45C
    ::Array<::Il2CppString*>* InternalSplitKeepEmptyEntries(::Array<int>* sepList, ::Array<int>* lengthList, int numReplaces, int count);
    // private System.String[] InternalSplitOmitEmptyEntries(System.Int32[] sepList, System.Int32[] lengthList, System.Int32 numReplaces, System.Int32 count)
    // Offset: 0xDEE148
    ::Array<::Il2CppString*>* InternalSplitOmitEmptyEntries(::Array<int>* sepList, ::Array<int>* lengthList, int numReplaces, int count);
    // private System.Int32 MakeSeparatorList(System.Char[] separator, System.Int32[] sepList)
    // Offset: 0xDEDF7C
    int MakeSeparatorList(::Array<::Il2CppChar>* separator, ::Array<int>*& sepList);
    // public System.String Substring(System.Int32 startIndex)
    // Offset: 0xDDDA00
    ::Il2CppString* Substring(int startIndex);
    // public System.String Substring(System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDD63FC
    ::Il2CppString* Substring(int startIndex, int length);
    // private System.String InternalSubString(System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDEE698
    ::Il2CppString* InternalSubString(int startIndex, int length);
    // public System.String Trim(System.Char[] trimChars)
    // Offset: 0xDEE6F4
    ::Il2CppString* Trim(::Array<::Il2CppChar>* trimChars);
    // public System.String TrimStart(System.Char[] trimChars)
    // Offset: 0xDEE9C0
    ::Il2CppString* TrimStart(::Array<::Il2CppChar>* trimChars);
    // public System.String TrimEnd(System.Char[] trimChars)
    // Offset: 0xDEE9DC
    ::Il2CppString* TrimEnd(::Array<::Il2CppChar>* trimChars);
    // public System.Void .ctor(System.Char* value)
    // Offset: 0xDEE9F8
    static ::Il2CppString* New_ctor(::Il2CppChar* value);
    // public System.Void .ctor(System.Char* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDEE9FC
    static ::Il2CppString* New_ctor(::Il2CppChar* value, int startIndex, int length);
    // public System.Void .ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)
    // Offset: 0xDEEA00
    static ::Il2CppString* New_ctor(int8_t* value, int startIndex, int length, System::Text::Encoding* enc);
    // static System.String CreateStringFromEncoding(System.Byte* bytes, System.Int32 byteLength, System.Text.Encoding encoding)
    // Offset: 0xDEEA04
    static ::Il2CppString* CreateStringFromEncoding(uint8_t* bytes, int byteLength, System::Text::Encoding* encoding);
    // public System.String Normalize(System.Text.NormalizationForm normalizationForm)
    // Offset: 0xDEEADC
    ::Il2CppString* Normalize(System::Text::NormalizationForm normalizationForm);
    // static System.String FastAllocateString(System.Int32 length)
    // Offset: 0xDED0F0
    static ::Il2CppString* FastAllocateString(int length);
    // static private System.Void FillStringChecked(System.String dest, System.Int32 destPos, System.String src)
    // Offset: 0xDEEBB4
    static void FillStringChecked(::Il2CppString* dest, int destPos, ::Il2CppString* src);
    // public System.Void .ctor(System.Char[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDEEC68
    static ::Il2CppString* New_ctor(::Array<::Il2CppChar>* value, int startIndex, int length);
    // public System.Void .ctor(System.Char[] value)
    // Offset: 0xDEEC6C
    static ::Il2CppString* New_ctor(::Array<::Il2CppChar>* value);
    // static System.Void wstrcpy(System.Char* dmem, System.Char* smem, System.Int32 charCount)
    // Offset: 0xDEDAAC
    static void wstrcpy(::Il2CppChar* dmem, ::Il2CppChar* smem, int charCount);
    // private System.String CtorCharArray(System.Char[] value)
    // Offset: 0xDEEC70
    ::Il2CppString* CtorCharArray(::Array<::Il2CppChar>* value);
    // private System.String CtorCharArrayStartLength(System.Char[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDEED14
    ::Il2CppString* CtorCharArrayStartLength(::Array<::Il2CppChar>* value, int startIndex, int length);
    // static private System.Int32 wcslen(System.Char* ptr)
    // Offset: 0xDEEEC4
    static int wcslen(::Il2CppChar* ptr);
    // private System.String CtorCharPtr(System.Char* ptr)
    // Offset: 0xDEEF3C
    ::Il2CppString* CtorCharPtr(::Il2CppChar* ptr);
    // private System.String CtorCharPtrStartLength(System.Char* ptr, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDEF0F0
    ::Il2CppString* CtorCharPtrStartLength(::Il2CppChar* ptr, int startIndex, int length);
    // public System.Void .ctor(System.Char c, System.Int32 count)
    // Offset: 0xDEF320
    static ::Il2CppString* New_ctor(::Il2CppChar c, int count);
    // static public System.Int32 Compare(System.String strA, System.String strB)
    // Offset: 0xDEF324
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase)
    // Offset: 0xDEF3C4
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, bool ignoreCase);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.StringComparison comparisonType)
    // Offset: 0xDEF4AC
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, System::StringComparison comparisonType);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase, System.Globalization.CultureInfo culture)
    // Offset: 0xDEF7B4
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, bool ignoreCase, System::Globalization::CultureInfo* culture);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length)
    // Offset: 0xDEF87C
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options)
    // Offset: 0xDEF97C
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length, System::Globalization::CultureInfo* culture, System::Globalization::CompareOptions options);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.StringComparison comparisonType)
    // Offset: 0xDEFAA4
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length, System::StringComparison comparisonType);
    // static public System.Int32 CompareOrdinal(System.String strA, System.String strB)
    // Offset: 0xDF01C0
    static int CompareOrdinal(::Il2CppString* strA, ::Il2CppString* strB);
    // static public System.Int32 CompareOrdinal(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length)
    // Offset: 0xDF0208
    static int CompareOrdinal(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length);
    // public System.Boolean Contains(System.String value)
    // Offset: 0xDF0234
    bool Contains(::Il2CppString* value);
    // public System.Boolean EndsWith(System.String value)
    // Offset: 0xDF026C
    bool EndsWith(::Il2CppString* value);
    // public System.Boolean EndsWith(System.String value, System.StringComparison comparisonType)
    // Offset: 0xDD6744
    bool EndsWith(::Il2CppString* value, System::StringComparison comparisonType);
    // System.Boolean EndsWith(System.Char value)
    // Offset: 0xDF0274
    bool EndsWith(::Il2CppChar value);
    // public System.Int32 IndexOf(System.Char value)
    // Offset: 0xDF02B8
    int IndexOf(::Il2CppChar value);
    // public System.Int32 IndexOf(System.Char value, System.Int32 startIndex)
    // Offset: 0xDF040C
    int IndexOf(::Il2CppChar value, int startIndex);
    // public System.Int32 IndexOfAny(System.Char[] anyOf)
    // Offset: 0xDEB1D0
    int IndexOfAny(::Array<::Il2CppChar>* anyOf);
    // public System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex)
    // Offset: 0xDF0530
    int IndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex);
    // public System.Int32 IndexOf(System.String value)
    // Offset: 0xDF053C
    int IndexOf(::Il2CppString* value);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex)
    // Offset: 0xDF054C
    int IndexOf(::Il2CppString* value, int startIndex);
    // public System.Int32 IndexOf(System.String value, System.StringComparison comparisonType)
    // Offset: 0xDF025C
    int IndexOf(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.StringComparison comparisonType)
    // Offset: 0xDF055C
    int IndexOf(::Il2CppString* value, int startIndex, System::StringComparison comparisonType);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)
    // Offset: 0xDF056C
    int IndexOf(::Il2CppString* value, int startIndex, int count, System::StringComparison comparisonType);
    // public System.Int32 LastIndexOf(System.Char value)
    // Offset: 0xDF0910
    int LastIndexOf(::Il2CppChar value);
    // public System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex)
    // Offset: 0xDF0A64
    int LastIndexOf(::Il2CppChar value, int startIndex);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf)
    // Offset: 0xDF0A6C
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex)
    // Offset: 0xDF0BDC
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex);
    // public System.Int32 LastIndexOf(System.String value)
    // Offset: 0xDF0BE4
    int LastIndexOf(::Il2CppString* value);
    // public System.Int32 LastIndexOf(System.String value, System.StringComparison comparisonType)
    // Offset: 0xDD63EC
    int LastIndexOf(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.Int32 LastIndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)
    // Offset: 0xDF0BF4
    int LastIndexOf(::Il2CppString* value, int startIndex, int count, System::StringComparison comparisonType);
    // public System.String PadLeft(System.Int32 totalWidth, System.Char paddingChar)
    // Offset: 0xDF1008
    ::Il2CppString* PadLeft(int totalWidth, ::Il2CppChar paddingChar);
    // public System.String PadRight(System.Int32 totalWidth, System.Char paddingChar)
    // Offset: 0xDF1160
    ::Il2CppString* PadRight(int totalWidth, ::Il2CppChar paddingChar);
    // public System.Boolean StartsWith(System.String value)
    // Offset: 0xDF1168
    bool StartsWith(::Il2CppString* value);
    // public System.Boolean StartsWith(System.String value, System.StringComparison comparisonType)
    // Offset: 0xDD6AD4
    bool StartsWith(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.String ToLower()
    // Offset: 0xDF1200
    ::Il2CppString* ToLower();
    // public System.String ToLower(System.Globalization.CultureInfo culture)
    // Offset: 0xDD6694
    ::Il2CppString* ToLower(System::Globalization::CultureInfo* culture);
    // public System.String ToLowerInvariant()
    // Offset: 0xDF1270
    ::Il2CppString* ToLowerInvariant();
    // public System.String ToUpper()
    // Offset: 0xDF12E0
    ::Il2CppString* ToUpper();
    // public System.String ToUpper(System.Globalization.CultureInfo culture)
    // Offset: 0xDF1350
    ::Il2CppString* ToUpper(System::Globalization::CultureInfo* culture);
    // public System.String ToUpperInvariant()
    // Offset: 0xDF1400
    ::Il2CppString* ToUpperInvariant();
    // static private System.Boolean IsBOMWhitespace(System.Char c)
    // Offset: 0xDF147C
    static bool IsBOMWhitespace(::Il2CppChar c);
    // public System.String Trim()
    // Offset: 0xDEC560
    ::Il2CppString* Trim();
    // private System.String TrimHelper(System.Int32 trimType)
    // Offset: 0xDEE710
    ::Il2CppString* TrimHelper(int trimType);
    // private System.String TrimHelper(System.Char[] trimChars, System.Int32 trimType)
    // Offset: 0xDEE874
    ::Il2CppString* TrimHelper(::Array<::Il2CppChar>* trimChars, int trimType);
    // private System.String CreateTrimmedString(System.Int32 start, System.Int32 end)
    // Offset: 0xDF1484
    ::Il2CppString* CreateTrimmedString(int start, int end);
    // public System.String Insert(System.Int32 startIndex, System.String value)
    // Offset: 0xDF151C
    ::Il2CppString* Insert(int startIndex, ::Il2CppString* value);
    // public System.String Replace(System.Char oldChar, System.Char newChar)
    // Offset: 0xDF167C
    ::Il2CppString* Replace(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // public System.String Replace(System.String oldValue, System.String newValue)
    // Offset: 0xDF1770
    ::Il2CppString* Replace(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // public System.String Remove(System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF1910
    ::Il2CppString* Remove(int startIndex, int count);
    // public System.String Remove(System.Int32 startIndex)
    // Offset: 0xDF1A90
    ::Il2CppString* Remove(int startIndex);
    // static public System.String Format(System.String format, System.Object arg0)
    // Offset: 0xDF1B60
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0);
    // static public System.String Format(System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0xDF1C98
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Format(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0xDF1CE8
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Format(System.String format, System.Object[] args)
    // Offset: 0xDF1D38
    static ::Il2CppString* Format(::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0)
    // Offset: 0xDF1E10
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0xDDF354
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0xDF1E68
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object[] args)
    // Offset: 0xDDE6DC
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // static private System.String FormatHelper(System.IFormatProvider provider, System.String format, System.ParamsArray args)
    // Offset: 0xDF1BB0
    static ::Il2CppString* FormatHelper(System::IFormatProvider* provider, ::Il2CppString* format, System::ParamsArray args);
    // static public System.String Copy(System.String str)
    // Offset: 0xDF1EC8
    static ::Il2CppString* Copy(::Il2CppString* str);
    // static public System.String Concat(System.Object arg0)
    // Offset: 0xDF1F80
    static ::Il2CppString* Concat(::Il2CppObject* arg0);
    // static public System.String Concat(System.Object arg0, System.Object arg1)
    // Offset: 0xDF1FF0
    static ::Il2CppString* Concat(::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Concat(System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0xDF20B4
    static ::Il2CppString* Concat(::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Concat(System.Object[] args)
    // Offset: 0xDF21B4
    static ::Il2CppString* Concat(::Array<::Il2CppObject*>* args);
    // static public System.String Concat(System.String str0, System.String str1)
    // Offset: 0xDDEE7C
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1);
    // static public System.String Concat(System.String str0, System.String str1, System.String str2)
    // Offset: 0xDEA284
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1, ::Il2CppString* str2);
    // static public System.String Concat(System.String str0, System.String str1, System.String str2, System.String str3)
    // Offset: 0xDF246C
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1, ::Il2CppString* str2, ::Il2CppString* str3);
    // static private System.String ConcatArray(System.String[] values, System.Int32 totalLength)
    // Offset: 0xDF23C4
    static ::Il2CppString* ConcatArray(::Array<::Il2CppString*>* values, int totalLength);
    // static public System.String Concat(System.String[] values)
    // Offset: 0xDF25D8
    static ::Il2CppString* Concat(::Array<::Il2CppString*>* values);
    // public System.Int32 get_Length()
    // Offset: 0xDF2F60
    int get_Length();
    // static System.Int32 CompareOrdinalUnchecked(System.String strA, System.Int32 indexA, System.Int32 lenA, System.String strB, System.Int32 indexB, System.Int32 lenB)
    // Offset: 0xDF2F68
    static int CompareOrdinalUnchecked(::Il2CppString* strA, int indexA, int lenA, ::Il2CppString* strB, int indexB, int lenB);
    // public System.Int32 IndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF02C4
    int IndexOf(::Il2CppChar value, int startIndex, int count);
    // System.Int32 IndexOfUnchecked(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF30EC
    int IndexOfUnchecked(::Il2CppChar value, int startIndex, int count);
    // System.Int32 IndexOfUnchecked(System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF32A8
    int IndexOfUnchecked(::Il2CppString* value, int startIndex, int count);
    // public System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF0418
    int IndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // private System.Int32 IndexOfAnyUnchecked(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF33C8
    int IndexOfAnyUnchecked(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // public System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF091C
    int LastIndexOf(::Il2CppChar value, int startIndex, int count);
    // System.Int32 LastIndexOfUnchecked(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF34B8
    int LastIndexOfUnchecked(::Il2CppChar value, int startIndex, int count);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF0A78
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // private System.Int32 LastIndexOfAnyUnchecked(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xDF367C
    int LastIndexOfAnyUnchecked(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // static System.Int32 nativeCompareOrdinalEx(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 count)
    // Offset: 0xDEFEBC
    static int nativeCompareOrdinalEx(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int count);
    // private System.String ReplaceInternal(System.Char oldChar, System.Char newChar)
    // Offset: 0xDF1680
    ::Il2CppString* ReplaceInternal(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // System.String ReplaceInternal(System.String oldValue, System.String newValue)
    // Offset: 0xDF180C
    ::Il2CppString* ReplaceInternal(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // private System.String ReplaceUnchecked(System.String oldValue, System.String newValue)
    // Offset: 0xDF3768
    ::Il2CppString* ReplaceUnchecked(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // private System.String ReplaceFallback(System.String oldValue, System.String newValue, System.Int32 testedCount)
    // Offset: 0xDF3AF4
    ::Il2CppString* ReplaceFallback(::Il2CppString* oldValue, ::Il2CppString* newValue, int testedCount);
    // private System.String PadHelper(System.Int32 totalWidth, System.Char paddingChar, System.Boolean isRightPadded)
    // Offset: 0xDF1010
    ::Il2CppString* PadHelper(int totalWidth, ::Il2CppChar paddingChar, bool isRightPadded);
    // System.Boolean StartsWithOrdinalUnchecked(System.String value)
    // Offset: 0xDF3C48
    bool StartsWithOrdinalUnchecked(::Il2CppString* value);
    // System.Boolean IsAscii()
    // Offset: 0xDED850
    bool IsAscii();
    // static System.Void CharCopy(System.Char* dest, System.Char* src, System.Int32 count)
    // Offset: 0xDF3720
    static void CharCopy(::Il2CppChar* dest, ::Il2CppChar* src, int count);
    // static private System.Void memset(System.Byte* dest, System.Int32 val, System.Int32 len)
    // Offset: 0xDF3C94
    static void memset(uint8_t* dest, int val, int len);
    // static private System.Void memcpy(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0xDF3D50
    static void memcpy(uint8_t* dest, uint8_t* src, int size);
    // static System.Void bzero(System.Byte* dest, System.Int32 len)
    // Offset: 0xDF3D58
    static void bzero_(uint8_t* dest, int len);
    // static System.Void bzero_aligned_1(System.Byte* dest, System.Int32 len)
    // Offset: 0xDF3D64
    static void bzero_aligned_1(uint8_t* dest, int len);
    // static System.Void bzero_aligned_2(System.Byte* dest, System.Int32 len)
    // Offset: 0xDF3D6C
    static void bzero_aligned_2(uint8_t* dest, int len);
    // static System.Void bzero_aligned_4(System.Byte* dest, System.Int32 len)
    // Offset: 0xDF3D74
    static void bzero_aligned_4(uint8_t* dest, int len);
    // static System.Void bzero_aligned_8(System.Byte* dest, System.Int32 len)
    // Offset: 0xDF3D7C
    static void bzero_aligned_8(uint8_t* dest, int len);
    // static System.Void memcpy_aligned_1(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0xDF3D84
    static void memcpy_aligned_1(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_2(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0xDF3D90
    static void memcpy_aligned_2(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_4(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0xDF3D9C
    static void memcpy_aligned_4(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_8(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0xDF3DA8
    static void memcpy_aligned_8(uint8_t* dest, uint8_t* src, int size);
    // private System.String CreateString(System.SByte* value)
    // Offset: 0xDF3DB4
    ::Il2CppString* CreateString(int8_t* value);
    // private System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDF411C
    ::Il2CppString* CreateString(int8_t* value, int startIndex, int length);
    // private System.String CreateString(System.Char* value)
    // Offset: 0xDF4124
    ::Il2CppString* CreateString(::Il2CppChar* value);
    // private System.String CreateString(System.Char* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDF4128
    ::Il2CppString* CreateString(::Il2CppChar* value, int startIndex, int length);
    // private System.String CreateString(System.Char[] val, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xDF412C
    ::Il2CppString* CreateString(::Array<::Il2CppChar>* val, int startIndex, int length);
    // private System.String CreateString(System.Char[] val)
    // Offset: 0xDF4130
    ::Il2CppString* CreateString(::Array<::Il2CppChar>* val);
    // private System.String CreateString(System.Char c, System.Int32 count)
    // Offset: 0xDF4134
    ::Il2CppString* CreateString(::Il2CppChar c, int count);
    // private System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)
    // Offset: 0xDF3E48
    ::Il2CppString* CreateString(int8_t* value, int startIndex, int length, System::Text::Encoding* enc);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xDED4BC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public System.Boolean Equals(System.String value)
    // Offset: 0xDD7088
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable`1::Equals(System.String value)
    bool Equals(::Il2CppString* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDEDC0C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0xDF0030
    // Implemented from: System.IComparable
    // Base method: System.Int32 IComparable::CompareTo(System.Object value)
    int CompareTo(::Il2CppObject* value);
    // Creating proxy method: System_IComparable_CompareTo
    // Maps to method: CompareTo
    int System_IComparable_CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.String strB)
    // Offset: 0xDF0108
    // Implemented from: System.IComparable`1
    // Base method: System.Int32 IComparable`1::CompareTo(System.String strB)
    int CompareTo(::Il2CppString* strB);
    // public override System.String ToString()
    // Offset: 0xDF1470
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xDF1474
    // Implemented from: System.IConvertible
    // Base method: System.String IConvertible::ToString(System.IFormatProvider provider)
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // public System.Object Clone()
    // Offset: 0xDF1478
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // public System.TypeCode GetTypeCode()
    // Offset: 0xDF2780
    // Implemented from: System.IConvertible
    // Base method: System.TypeCode IConvertible::GetTypeCode()
    System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0xDF2788
    // Implemented from: System.IConvertible
    // Base method: System.Boolean IConvertible::ToBoolean(System.IFormatProvider provider)
    bool System_IConvertible_ToBoolean(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0xDF2800
    // Implemented from: System.IConvertible
    // Base method: System.Char IConvertible::ToChar(System.IFormatProvider provider)
    ::Il2CppChar System_IConvertible_ToChar(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0xDF2878
    // Implemented from: System.IConvertible
    // Base method: System.SByte IConvertible::ToSByte(System.IFormatProvider provider)
    int8_t System_IConvertible_ToSByte(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0xDF28F0
    // Implemented from: System.IConvertible
    // Base method: System.Byte IConvertible::ToByte(System.IFormatProvider provider)
    uint8_t System_IConvertible_ToByte(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0xDF2968
    // Implemented from: System.IConvertible
    // Base method: System.Int16 IConvertible::ToInt16(System.IFormatProvider provider)
    int16_t System_IConvertible_ToInt16(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0xDF29E0
    // Implemented from: System.IConvertible
    // Base method: System.UInt16 IConvertible::ToUInt16(System.IFormatProvider provider)
    uint16_t System_IConvertible_ToUInt16(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0xDF2A58
    // Implemented from: System.IConvertible
    // Base method: System.Int32 IConvertible::ToInt32(System.IFormatProvider provider)
    int System_IConvertible_ToInt32(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0xDF2AD0
    // Implemented from: System.IConvertible
    // Base method: System.UInt32 IConvertible::ToUInt32(System.IFormatProvider provider)
    uint System_IConvertible_ToUInt32(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0xDF2B48
    // Implemented from: System.IConvertible
    // Base method: System.Int64 IConvertible::ToInt64(System.IFormatProvider provider)
    int64_t System_IConvertible_ToInt64(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0xDF2BC0
    // Implemented from: System.IConvertible
    // Base method: System.UInt64 IConvertible::ToUInt64(System.IFormatProvider provider)
    uint64_t System_IConvertible_ToUInt64(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0xDF2C38
    // Implemented from: System.IConvertible
    // Base method: System.Single IConvertible::ToSingle(System.IFormatProvider provider)
    float System_IConvertible_ToSingle(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0xDF2CB0
    // Implemented from: System.IConvertible
    // Base method: System.Double IConvertible::ToDouble(System.IFormatProvider provider)
    double System_IConvertible_ToDouble(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0xDF2D28
    // Implemented from: System.IConvertible
    // Base method: System.Decimal IConvertible::ToDecimal(System.IFormatProvider provider)
    System::Decimal System_IConvertible_ToDecimal(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0xDF2DA0
    // Implemented from: System.IConvertible
    // Base method: System.DateTime IConvertible::ToDateTime(System.IFormatProvider provider)
    System::DateTime System_IConvertible_ToDateTime(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0xDF2E18
    // Implemented from: System.IConvertible
    // Base method: System.Object IConvertible::ToType(System.Type type, System.IFormatProvider provider)
    ::Il2CppObject* System_IConvertible_ToType(System::Type* type, System::IFormatProvider* provider);
    // private System.Collections.Generic.IEnumerator`1<System.Char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
    // Offset: 0xDF2E98
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable`1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<::Il2CppChar>* System_Collections_Generic_IEnumerable_1_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xDF2EFC
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // System.String
  // static public System.Boolean op_Equality(System.String a, System.String b)
  // Offset: 0xDE4B10
  bool operator ==(::Il2CppString* a, ::Il2CppString& b);
  // static public System.Boolean op_Inequality(System.String a, System.String b)
  // Offset: 0xDD7FA4
  bool operator !=(::Il2CppString* a, ::Il2CppString& b);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::String*, "System", "String");
#pragma pack(pop)
