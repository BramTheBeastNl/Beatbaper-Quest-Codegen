// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
  // Forward declaring type: NormalizationForm
  struct NormalizationForm;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: StringComparison
  struct StringComparison;
  // Forward declaring type: StringSplitOptions
  struct StringSplitOptions;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: ParamsArray
  struct ParamsArray;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: CompareOptions
  struct CompareOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x16
  #pragma pack(push, 1)
  // Autogenerated type: System.String
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: D68434
  // [ComVisibleAttribute] Offset: D68434
  class String : public ::Il2CppObject/*, public System::IComparable_1<::Il2CppString*>, public System::Collections::Generic::IEnumerable_1<::Il2CppChar>, public System::IEquatable_1<::Il2CppString*>, public System::ICloneable, public System::IComparable, public System::IConvertible*/ {
    public:
    // private System.Int32 m_stringLength
    // Size: 0x4
    // Offset: 0x10
    int m_stringLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char m_firstChar
    // Size: 0x2
    // Offset: 0x14
    ::Il2CppChar m_firstChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Creating value type constructor for type: String
    String(int m_stringLength_ = {}, ::Il2CppChar m_firstChar_ = {}) noexcept : m_stringLength{m_stringLength_}, m_firstChar{m_firstChar_} {}
    // Creating interface conversion operator: operator System::IComparable_1<::Il2CppString*>
    operator System::IComparable_1<::Il2CppString*>() noexcept {
      return *reinterpret_cast<System::IComparable_1<::Il2CppString*>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<::Il2CppChar>
    operator System::Collections::Generic::IEnumerable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<::Il2CppString*>
    operator System::IEquatable_1<::Il2CppString*>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<::Il2CppString*>*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // static field const value: static private System.Int32 TrimHead
    static constexpr const int TrimHead = 0;
    // Get static field: static private System.Int32 TrimHead
    static int _get_TrimHead();
    // Set static field: static private System.Int32 TrimHead
    static void _set_TrimHead(int value);
    // static field const value: static private System.Int32 TrimTail
    static constexpr const int TrimTail = 1;
    // Get static field: static private System.Int32 TrimTail
    static int _get_TrimTail();
    // Set static field: static private System.Int32 TrimTail
    static void _set_TrimTail(int value);
    // static field const value: static private System.Int32 TrimBoth
    static constexpr const int TrimBoth = 2;
    // Get static field: static private System.Int32 TrimBoth
    static int _get_TrimBoth();
    // Set static field: static private System.Int32 TrimBoth
    static void _set_TrimBoth(int value);
    // Get static field: static public readonly System.String Empty
    static ::Il2CppString* _get_Empty();
    // Set static field: static public readonly System.String Empty
    static void _set_Empty(::Il2CppString* value);
    // static field const value: static private System.Int32 charPtrAlignConst
    static constexpr const int charPtrAlignConst = 1;
    // Get static field: static private System.Int32 charPtrAlignConst
    static int _get_charPtrAlignConst();
    // Set static field: static private System.Int32 charPtrAlignConst
    static void _set_charPtrAlignConst(int value);
    // static field const value: static private System.Int32 alignConst
    static constexpr const int alignConst = 3;
    // Get static field: static private System.Int32 alignConst
    static int _get_alignConst();
    // Set static field: static private System.Int32 alignConst
    static void _set_alignConst(int value);
    // Get instance field: private System.Int32 m_stringLength
    int _get_m_stringLength();
    // Set instance field: private System.Int32 m_stringLength
    void _set_m_stringLength(int value);
    // Get instance field: private System.Char m_firstChar
    ::Il2CppChar _get_m_firstChar();
    // Set instance field: private System.Char m_firstChar
    void _set_m_firstChar(::Il2CppChar value);
    // public System.Char get_Chars(System.Int32 index)
    // Offset: 0x1BC3004
    ::Il2CppChar get_Chars(int index);
    // public System.Int32 get_Length()
    // Offset: 0x1BCC328
    int get_Length();
    // public System.Void .ctor(System.Char* value)
    // Offset: 0x1BC7A1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Il2CppChar* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value)));
    }
    // public System.Void .ctor(System.Char* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC7A20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Il2CppChar* value, int startIndex, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value, startIndex, length)));
    }
    // public System.Void .ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)
    // Offset: 0x1BC7A24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(int8_t* value, int startIndex, int length, System::Text::Encoding* enc) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value, startIndex, length, enc)));
    }
    // public System.Void .ctor(System.Char[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC7C8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Array<::Il2CppChar>* value, int startIndex, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value, startIndex, length)));
    }
    // public System.Void .ctor(System.Char[] value)
    // Offset: 0x1BC7C90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Array<::Il2CppChar>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value)));
    }
    // public System.Void .ctor(System.Char c, System.Int32 count)
    // Offset: 0x1BC8344
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Il2CppChar c, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(c, count)));
    }
    // static public System.String Join(System.String separator, params System.String[] value)
    // Offset: 0x1BC5074
    static ::Il2CppString* Join(::Il2CppString* separator, ::Array<::Il2CppString*>* value);
    // Creating initializer_list -> params proxy for: System.String Join(System.String separator, params System.String[] value)
    static ::Il2CppString* Join(::Il2CppString* separator, std::initializer_list<::Il2CppString*> value);
    // Creating TArgs -> initializer_list proxy for: System.String Join(System.String separator, params System.String[] value)
    template<class ...TParams>
    static ::Il2CppString* Join(::Il2CppString* separator, TParams&&... value) {
      return Join(separator, {value...});
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Il2CppString* Join(::Il2CppString* separator, System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "String", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<System.String> values)
    // Offset: 0x1BC53B0
    static ::Il2CppString* Join(::Il2CppString* separator, System::Collections::Generic::IEnumerable_1<::Il2CppString*>* values);
    // static public System.String Join(System.String separator, System.String[] value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BC5110
    static ::Il2CppString* Join(::Il2CppString* separator, ::Array<::Il2CppString*>* value, int startIndex, int count);
    // static private System.Int32 CompareOrdinalIgnoreCaseHelper(System.String strA, System.String strB)
    // Offset: 0x1BC5888
    static int CompareOrdinalIgnoreCaseHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // static private System.Boolean EqualsHelper(System.String strA, System.String strB)
    // Offset: 0x1BC5974
    static bool EqualsHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // static private System.Int32 CompareOrdinalHelper(System.String strA, System.String strB)
    // Offset: 0x1BC5AC0
    static int CompareOrdinalHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // public System.Boolean Equals(System.String value)
    // Offset: 0x1BC4774
    bool Equals(::Il2CppString* value);
    // public System.Boolean Equals(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1BC5D30
    bool Equals(::Il2CppString* value, System::StringComparison comparisonType);
    // static public System.Boolean Equals(System.String a, System.String b)
    // Offset: 0x1BC6024
    static bool Equals(::Il2CppString* a, ::Il2CppString* b);
    // static public System.Boolean Equals(System.String a, System.String b, System.StringComparison comparisonType)
    // Offset: 0x1BC6060
    static bool Equals(::Il2CppString* a, ::Il2CppString* b, System::StringComparison comparisonType);
    // public System.Void CopyTo(System.Int32 sourceIndex, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0x1BC633C
    void CopyTo(int sourceIndex, ::Array<::Il2CppChar>* destination, int destinationIndex, int count);
    // public System.Char[] ToCharArray()
    // Offset: 0x1BC6528
    ::Array<::Il2CppChar>* ToCharArray();
    // static public System.Boolean IsNullOrEmpty(System.String value)
    // Offset: 0x1BC65C0
    static bool IsNullOrEmpty(::Il2CppString* value);
    // static public System.Boolean IsNullOrWhiteSpace(System.String value)
    // Offset: 0x1BC65DC
    static bool IsNullOrWhiteSpace(::Il2CppString* value);
    // System.Int32 GetLegacyNonRandomizedHashCode()
    // Offset: 0x1BC6710
    int GetLegacyNonRandomizedHashCode();
    // public System.String[] Split(params System.Char[] separator)
    // Offset: 0x1BC6788
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator);
    // Creating initializer_list -> params proxy for: System.String[] Split(params System.Char[] separator)
    ::Array<::Il2CppString*>* Split(std::initializer_list<::Il2CppChar> separator);
    // Creating TArgs -> initializer_list proxy for: System.String[] Split(params System.Char[] separator)
    template<class ...TParams>
    ::Array<::Il2CppString*>* Split(TParams&&... separator) {
      return Split({separator...});
    }
    // public System.String[] Split(System.Char[] separator, System.Int32 count)
    // Offset: 0x1BC69F4
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator, int count);
    // public System.String[] Split(System.Char[] separator, System.StringSplitOptions options)
    // Offset: 0x1BC69FC
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator, System::StringSplitOptions options);
    // System.String[] SplitInternal(System.Char[] separator, System.Int32 count, System.StringSplitOptions options)
    // Offset: 0x1BC6794
    ::Array<::Il2CppString*>* SplitInternal(::Array<::Il2CppChar>* separator, int count, System::StringSplitOptions options);
    // public System.String[] Split(System.String[] separator, System.StringSplitOptions options)
    // Offset: 0x1BC70E0
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppString*>* separator, System::StringSplitOptions options);
    // public System.String[] Split(System.String[] separator, System.Int32 count, System.StringSplitOptions options)
    // Offset: 0x1BC70EC
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppString*>* separator, int count, System::StringSplitOptions options);
    // private System.String[] InternalSplitKeepEmptyEntries(System.Int32[] sepList, System.Int32[] lengthList, System.Int32 numReplaces, System.Int32 count)
    // Offset: 0x1BC6EBC
    ::Array<::Il2CppString*>* InternalSplitKeepEmptyEntries(::Array<int>* sepList, ::Array<int>* lengthList, int numReplaces, int count);
    // private System.String[] InternalSplitOmitEmptyEntries(System.Int32[] sepList, System.Int32[] lengthList, System.Int32 numReplaces, System.Int32 count)
    // Offset: 0x1BC6BD4
    ::Array<::Il2CppString*>* InternalSplitOmitEmptyEntries(::Array<int>* sepList, ::Array<int>* lengthList, int numReplaces, int count);
    // private System.Int32 MakeSeparatorList(System.Char[] separator, ref System.Int32[] sepList)
    // Offset: 0x1BC6A08
    int MakeSeparatorList(::Array<::Il2CppChar>* separator, ::Array<int>*& sepList);
    // private System.Int32 MakeSeparatorList(System.String[] separators, ref System.Int32[] sepList, ref System.Int32[] lengthList)
    // Offset: 0x1BC7380
    int MakeSeparatorList(::Array<::Il2CppString*>* separators, ::Array<int>*& sepList, ::Array<int>*& lengthList);
    // public System.String Substring(System.Int32 startIndex)
    // Offset: 0x1BC7684
    ::Il2CppString* Substring(int startIndex);
    // public System.String Substring(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC7524
    ::Il2CppString* Substring(int startIndex, int length);
    // private System.String InternalSubString(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC76BC
    ::Il2CppString* InternalSubString(int startIndex, int length);
    // public System.String Trim(params System.Char[] trimChars)
    // Offset: 0x1BC7718
    ::Il2CppString* Trim(::Array<::Il2CppChar>* trimChars);
    // Creating initializer_list -> params proxy for: System.String Trim(params System.Char[] trimChars)
    ::Il2CppString* Trim(std::initializer_list<::Il2CppChar> trimChars);
    // Creating TArgs -> initializer_list proxy for: System.String Trim(params System.Char[] trimChars)
    template<class ...TParams>
    ::Il2CppString* Trim(TParams&&... trimChars) {
      return Trim({trimChars...});
    }
    // public System.String TrimStart(params System.Char[] trimChars)
    // Offset: 0x1BC79E4
    ::Il2CppString* TrimStart(::Array<::Il2CppChar>* trimChars);
    // Creating initializer_list -> params proxy for: System.String TrimStart(params System.Char[] trimChars)
    ::Il2CppString* TrimStart(std::initializer_list<::Il2CppChar> trimChars);
    // Creating TArgs -> initializer_list proxy for: System.String TrimStart(params System.Char[] trimChars)
    template<class ...TParams>
    ::Il2CppString* TrimStart(TParams&&... trimChars) {
      return TrimStart({trimChars...});
    }
    // public System.String TrimEnd(params System.Char[] trimChars)
    // Offset: 0x1BC7A00
    ::Il2CppString* TrimEnd(::Array<::Il2CppChar>* trimChars);
    // Creating initializer_list -> params proxy for: System.String TrimEnd(params System.Char[] trimChars)
    ::Il2CppString* TrimEnd(std::initializer_list<::Il2CppChar> trimChars);
    // Creating TArgs -> initializer_list proxy for: System.String TrimEnd(params System.Char[] trimChars)
    template<class ...TParams>
    ::Il2CppString* TrimEnd(TParams&&... trimChars) {
      return TrimEnd({trimChars...});
    }
    // static System.String CreateStringFromEncoding(System.Byte* bytes, System.Int32 byteLength, System.Text.Encoding encoding)
    // Offset: 0x1BC7A28
    static ::Il2CppString* CreateStringFromEncoding(uint8_t* bytes, int byteLength, System::Text::Encoding* encoding);
    // public System.String Normalize(System.Text.NormalizationForm normalizationForm)
    // Offset: 0x1BC7B00
    ::Il2CppString* Normalize(System::Text::NormalizationForm normalizationForm);
    // static System.String FastAllocateString(System.Int32 length)
    // Offset: 0x1BC5884
    static ::Il2CppString* FastAllocateString(int length);
    // static private System.Void FillStringChecked(System.String dest, System.Int32 destPos, System.String src)
    // Offset: 0x1BC7BD8
    static void FillStringChecked(::Il2CppString* dest, int destPos, ::Il2CppString* src);
    // static System.Void wstrcpy(System.Char* dmem, System.Char* smem, System.Int32 charCount)
    // Offset: 0x1BC651C
    static void wstrcpy(::Il2CppChar* dmem, ::Il2CppChar* smem, int charCount);
    // private System.String CtorCharArray(System.Char[] value)
    // Offset: 0x1BC7C94
    ::Il2CppString* CtorCharArray(::Array<::Il2CppChar>* value);
    // private System.String CtorCharArrayStartLength(System.Char[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC7D38
    ::Il2CppString* CtorCharArrayStartLength(::Array<::Il2CppChar>* value, int startIndex, int length);
    // static private System.Int32 wcslen(System.Char* ptr)
    // Offset: 0x1BC7EE8
    static int wcslen(::Il2CppChar* ptr);
    // private System.String CtorCharPtr(System.Char* ptr)
    // Offset: 0x1BC7F60
    ::Il2CppString* CtorCharPtr(::Il2CppChar* ptr);
    // private System.String CtorCharPtrStartLength(System.Char* ptr, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC8114
    ::Il2CppString* CtorCharPtrStartLength(::Il2CppChar* ptr, int startIndex, int length);
    // static public System.Int32 Compare(System.String strA, System.String strB)
    // Offset: 0x1BC8348
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase)
    // Offset: 0x1BC83E8
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, bool ignoreCase);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.StringComparison comparisonType)
    // Offset: 0x1BC84D0
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, System::StringComparison comparisonType);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase, System.Globalization.CultureInfo culture)
    // Offset: 0x1BC87D8
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, bool ignoreCase, System::Globalization::CultureInfo* culture);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options)
    // Offset: 0x1BC88A0
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length, System::Globalization::CultureInfo* culture, System::Globalization::CompareOptions options);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.StringComparison comparisonType)
    // Offset: 0x1BC3098
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length, System::StringComparison comparisonType);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0x1BC8B3C
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.String strB)
    // Offset: 0x1BC8C14
    int CompareTo(::Il2CppString* strB);
    // static public System.Int32 CompareOrdinal(System.String strA, System.String strB)
    // Offset: 0x1BC8CCC
    static int CompareOrdinal(::Il2CppString* strA, ::Il2CppString* strB);
    // static public System.Int32 CompareOrdinal(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length)
    // Offset: 0x1BC7690
    static int CompareOrdinal(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length);
    // public System.Boolean Contains(System.String value)
    // Offset: 0x1BC8D14
    bool Contains(::Il2CppString* value);
    // public System.Boolean EndsWith(System.String value)
    // Offset: 0x1BC8D4C
    bool EndsWith(::Il2CppString* value);
    // public System.Boolean EndsWith(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1BC8D54
    bool EndsWith(::Il2CppString* value, System::StringComparison comparisonType);
    // System.Boolean EndsWith(System.Char value)
    // Offset: 0x1BC8FE8
    bool EndsWith(::Il2CppChar value);
    // public System.Int32 IndexOf(System.Char value)
    // Offset: 0x1BC902C
    int IndexOf(::Il2CppChar value);
    // public System.Int32 IndexOf(System.Char value, System.Int32 startIndex)
    // Offset: 0x1BC9180
    int IndexOf(::Il2CppChar value, int startIndex);
    // public System.Int32 IndexOfAny(System.Char[] anyOf)
    // Offset: 0x1BC918C
    int IndexOfAny(::Array<::Il2CppChar>* anyOf);
    // public System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex)
    // Offset: 0x1BC92B0
    int IndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex);
    // public System.Int32 IndexOf(System.String value)
    // Offset: 0x1BC92BC
    int IndexOf(::Il2CppString* value);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex)
    // Offset: 0x1BC92CC
    int IndexOf(::Il2CppString* value, int startIndex);
    // public System.Int32 IndexOf(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1BC8D3C
    int IndexOf(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.StringComparison comparisonType)
    // Offset: 0x1BC92DC
    int IndexOf(::Il2CppString* value, int startIndex, System::StringComparison comparisonType);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)
    // Offset: 0x1BC92EC
    int IndexOf(::Il2CppString* value, int startIndex, int count, System::StringComparison comparisonType);
    // public System.Int32 LastIndexOf(System.Char value)
    // Offset: 0x1BC9690
    int LastIndexOf(::Il2CppChar value);
    // public System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex)
    // Offset: 0x1BC97E4
    int LastIndexOf(::Il2CppChar value, int startIndex);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf)
    // Offset: 0x1BC97EC
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex)
    // Offset: 0x1BC995C
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex);
    // public System.Int32 LastIndexOf(System.String value)
    // Offset: 0x1BC9964
    int LastIndexOf(::Il2CppString* value);
    // public System.Int32 LastIndexOf(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1BC9D90
    int LastIndexOf(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.Int32 LastIndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)
    // Offset: 0x1BC9974
    int LastIndexOf(::Il2CppString* value, int startIndex, int count, System::StringComparison comparisonType);
    // public System.String PadLeft(System.Int32 totalWidth, System.Char paddingChar)
    // Offset: 0x1BC9DA0
    ::Il2CppString* PadLeft(int totalWidth, ::Il2CppChar paddingChar);
    // public System.String PadRight(System.Int32 totalWidth, System.Char paddingChar)
    // Offset: 0x1BC9EF8
    ::Il2CppString* PadRight(int totalWidth, ::Il2CppChar paddingChar);
    // public System.Boolean StartsWith(System.String value)
    // Offset: 0x1BC9F00
    bool StartsWith(::Il2CppString* value);
    // public System.Boolean StartsWith(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1BC9F98
    bool StartsWith(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.String ToLower()
    // Offset: 0x1BCA234
    ::Il2CppString* ToLower();
    // public System.String ToLower(System.Globalization.CultureInfo culture)
    // Offset: 0x1BCA2A4
    ::Il2CppString* ToLower(System::Globalization::CultureInfo* culture);
    // public System.String ToLowerInvariant()
    // Offset: 0x1BCA354
    ::Il2CppString* ToLowerInvariant();
    // public System.String ToUpper()
    // Offset: 0x1BCA3C4
    ::Il2CppString* ToUpper();
    // public System.String ToUpper(System.Globalization.CultureInfo culture)
    // Offset: 0x1BCA434
    ::Il2CppString* ToUpper(System::Globalization::CultureInfo* culture);
    // public System.String ToUpperInvariant()
    // Offset: 0x1BCA4E4
    ::Il2CppString* ToUpperInvariant();
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0x1BCA558
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // public System.Object Clone()
    // Offset: 0x1BCA55C
    ::Il2CppObject* Clone();
    // static private System.Boolean IsBOMWhitespace(System.Char c)
    // Offset: 0x1BCA560
    static bool IsBOMWhitespace(::Il2CppChar c);
    // public System.String Trim()
    // Offset: 0x1BC476C
    ::Il2CppString* Trim();
    // private System.String TrimHelper(System.Int32 trimType)
    // Offset: 0x1BC7734
    ::Il2CppString* TrimHelper(int trimType);
    // private System.String TrimHelper(System.Char[] trimChars, System.Int32 trimType)
    // Offset: 0x1BC7898
    ::Il2CppString* TrimHelper(::Array<::Il2CppChar>* trimChars, int trimType);
    // private System.String CreateTrimmedString(System.Int32 start, System.Int32 end)
    // Offset: 0x1BCA568
    ::Il2CppString* CreateTrimmedString(int start, int end);
    // public System.String Insert(System.Int32 startIndex, System.String value)
    // Offset: 0x1BCA600
    ::Il2CppString* Insert(int startIndex, ::Il2CppString* value);
    // public System.String Replace(System.Char oldChar, System.Char newChar)
    // Offset: 0x1BCA760
    ::Il2CppString* Replace(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // public System.String Replace(System.String oldValue, System.String newValue)
    // Offset: 0x1BCA854
    ::Il2CppString* Replace(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // public System.String Remove(System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BCA9F4
    ::Il2CppString* Remove(int startIndex, int count);
    // public System.String Remove(System.Int32 startIndex)
    // Offset: 0x1BCAB74
    ::Il2CppString* Remove(int startIndex);
    // static public System.String Format(System.String format, System.Object arg0)
    // Offset: 0x1BC3EB4
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0);
    // static public System.String Format(System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0x1BC3F90
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Format(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1BCAD2C
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Format(System.String format, params System.Object[] args)
    // Offset: 0x1BCAD7C
    static ::Il2CppString* Format(::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.String Format(System.String format, params System.Object[] args)
    static ::Il2CppString* Format(::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.String Format(System.String format, params System.Object[] args)
    template<class ...TParams>
    static ::Il2CppString* Format(::Il2CppString* format, TParams&&... args) {
      return Format(format, {args...});
    }
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0)
    // Offset: 0x1BCAE54
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0x1BCAEAC
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1BCAF08
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Format(System.IFormatProvider provider, System.String format, params System.Object[] args)
    // Offset: 0x1BCAF68
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.String Format(System.IFormatProvider provider, System.String format, params System.Object[] args)
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.String Format(System.IFormatProvider provider, System.String format, params System.Object[] args)
    template<class ...TParams>
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, TParams&&... args) {
      return Format(provider, format, {args...});
    }
    // static private System.String FormatHelper(System.IFormatProvider provider, System.String format, System.ParamsArray args)
    // Offset: 0x1BCAC44
    static ::Il2CppString* FormatHelper(System::IFormatProvider* provider, ::Il2CppString* format, System::ParamsArray args);
    // static public System.String Copy(System.String str)
    // Offset: 0x1BCB044
    static ::Il2CppString* Copy(::Il2CppString* str);
    // static public System.String Concat(System.Object arg0)
    // Offset: 0x1BCB0FC
    static ::Il2CppString* Concat(::Il2CppObject* arg0);
    // static public System.String Concat(System.Object arg0, System.Object arg1)
    // Offset: 0x1BCB16C
    static ::Il2CppString* Concat(::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Concat(System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1BCB31C
    static ::Il2CppString* Concat(::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Concat(params System.Object[] args)
    // Offset: 0x1BCB52C
    static ::Il2CppString* Concat(::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.String Concat(params System.Object[] args)
    static ::Il2CppString* Concat(std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.String Concat(params System.Object[] args)
    template<class ...TParams>
    static ::Il2CppString* Concat(TParams&&... args) {
      return Concat({args...});
    }
    // static public System.String Concat(System.String str0, System.String str1)
    // Offset: 0x1BCB230
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1);
    // static public System.String Concat(System.String str0, System.String str1, System.String str2)
    // Offset: 0x1BCB41C
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1, ::Il2CppString* str2);
    // static public System.String Concat(System.String str0, System.String str1, System.String str2, System.String str3)
    // Offset: 0x1BCB7C0
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1, ::Il2CppString* str2, ::Il2CppString* str3);
    // static private System.String ConcatArray(System.String[] values, System.Int32 totalLength)
    // Offset: 0x1BCB718
    static ::Il2CppString* ConcatArray(::Array<::Il2CppString*>* values, int totalLength);
    // static public System.String Concat(params System.String[] values)
    // Offset: 0x1BCB92C
    static ::Il2CppString* Concat(::Array<::Il2CppString*>* values);
    // Creating initializer_list -> params proxy for: System.String Concat(params System.String[] values)
    static ::Il2CppString* Concat(std::initializer_list<::Il2CppString*> values);
    // static public System.String IsInterned(System.String str)
    // Offset: 0x1BCBAC0
    static ::Il2CppString* IsInterned(::Il2CppString* str);
    // public System.TypeCode GetTypeCode()
    // Offset: 0x1BCBB48
    System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0x1BCBB50
    bool System_IConvertible_ToBoolean(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0x1BCBBC8
    ::Il2CppChar System_IConvertible_ToChar(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0x1BCBC40
    int8_t System_IConvertible_ToSByte(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0x1BCBCB8
    uint8_t System_IConvertible_ToByte(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0x1BCBD30
    int16_t System_IConvertible_ToInt16(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0x1BCBDA8
    uint16_t System_IConvertible_ToUInt16(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0x1BCBE20
    int System_IConvertible_ToInt32(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0x1BCBE98
    uint System_IConvertible_ToUInt32(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0x1BCBF10
    int64_t System_IConvertible_ToInt64(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0x1BCBF88
    uint64_t System_IConvertible_ToUInt64(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0x1BCC000
    float System_IConvertible_ToSingle(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0x1BCC078
    double System_IConvertible_ToDouble(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0x1BCC0F0
    System::Decimal System_IConvertible_ToDecimal(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0x1BCC168
    System::DateTime System_IConvertible_ToDateTime(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0x1BCC1E0
    ::Il2CppObject* System_IConvertible_ToType(System::Type* type, System::IFormatProvider* provider);
    // private System.Collections.Generic.IEnumerator`1<System.Char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
    // Offset: 0x1BCC260
    System::Collections::Generic::IEnumerator_1<::Il2CppChar>* System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1BCC2C4
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // static System.Int32 CompareOrdinalUnchecked(System.String strA, System.Int32 indexA, System.Int32 lenA, System.String strB, System.Int32 indexB, System.Int32 lenB)
    // Offset: 0x1BCC330
    static int CompareOrdinalUnchecked(::Il2CppString* strA, int indexA, int lenA, ::Il2CppString* strB, int indexB, int lenB);
    // public System.Int32 IndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BC9038
    int IndexOf(::Il2CppChar value, int startIndex, int count);
    // System.Int32 IndexOfUnchecked(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BCC4B4
    int IndexOfUnchecked(::Il2CppChar value, int startIndex, int count);
    // System.Int32 IndexOfUnchecked(System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BCC670
    int IndexOfUnchecked(::Il2CppString* value, int startIndex, int count);
    // public System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BC9198
    int IndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // private System.Int32 IndexOfAnyUnchecked(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BCC790
    int IndexOfAnyUnchecked(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // public System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BC969C
    int LastIndexOf(::Il2CppChar value, int startIndex, int count);
    // System.Int32 LastIndexOfUnchecked(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BCC880
    int LastIndexOfUnchecked(::Il2CppChar value, int startIndex, int count);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BC97F8
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // private System.Int32 LastIndexOfAnyUnchecked(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1BCCA44
    int LastIndexOfAnyUnchecked(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // static System.Int32 nativeCompareOrdinalEx(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 count)
    // Offset: 0x1BC89C8
    static int nativeCompareOrdinalEx(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int count);
    // private System.String ReplaceInternal(System.Char oldChar, System.Char newChar)
    // Offset: 0x1BCA764
    ::Il2CppString* ReplaceInternal(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // System.String ReplaceInternal(System.String oldValue, System.String newValue)
    // Offset: 0x1BCA8F0
    ::Il2CppString* ReplaceInternal(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // private System.String ReplaceUnchecked(System.String oldValue, System.String newValue)
    // Offset: 0x1BCCB30
    ::Il2CppString* ReplaceUnchecked(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // private System.String ReplaceFallback(System.String oldValue, System.String newValue, System.Int32 testedCount)
    // Offset: 0x1BCCEBC
    ::Il2CppString* ReplaceFallback(::Il2CppString* oldValue, ::Il2CppString* newValue, int testedCount);
    // private System.String PadHelper(System.Int32 totalWidth, System.Char paddingChar, System.Boolean isRightPadded)
    // Offset: 0x1BC9DA8
    ::Il2CppString* PadHelper(int totalWidth, ::Il2CppChar paddingChar, bool isRightPadded);
    // System.Boolean StartsWithOrdinalUnchecked(System.String value)
    // Offset: 0x1BCD010
    bool StartsWithOrdinalUnchecked(::Il2CppString* value);
    // System.Boolean IsAscii()
    // Offset: 0x1BC5FE4
    bool IsAscii();
    // static private System.String InternalIsInterned(System.String str)
    // Offset: 0x1BCBB44
    static ::Il2CppString* InternalIsInterned(::Il2CppString* str);
    // static System.Void CharCopy(System.Char* dest, System.Char* src, System.Int32 count)
    // Offset: 0x1BCCAE8
    static void CharCopy(::Il2CppChar* dest, ::Il2CppChar* src, int count);
    // static private System.Void memset(System.Byte* dest, System.Int32 val, System.Int32 len)
    // Offset: 0x1BCD05C
    static void memset(uint8_t* dest, int val, int len);
    // static private System.Void memcpy(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1BCD118
    static void memcpy(uint8_t* dest, uint8_t* src, int size);
    // static System.Void bzero(System.Byte* dest, System.Int32 len)
    // Offset: 0x1BCD120
    static void bzero_(uint8_t* dest, int len);
    // static System.Void bzero_aligned_1(System.Byte* dest, System.Int32 len)
    // Offset: 0x1BCD12C
    static void bzero_aligned_1(uint8_t* dest, int len);
    // static System.Void bzero_aligned_2(System.Byte* dest, System.Int32 len)
    // Offset: 0x1BCD134
    static void bzero_aligned_2(uint8_t* dest, int len);
    // static System.Void bzero_aligned_4(System.Byte* dest, System.Int32 len)
    // Offset: 0x1BCD13C
    static void bzero_aligned_4(uint8_t* dest, int len);
    // static System.Void bzero_aligned_8(System.Byte* dest, System.Int32 len)
    // Offset: 0x1BCD144
    static void bzero_aligned_8(uint8_t* dest, int len);
    // static System.Void memcpy_aligned_1(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1BCD14C
    static void memcpy_aligned_1(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_2(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1BCD158
    static void memcpy_aligned_2(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_4(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1BCD164
    static void memcpy_aligned_4(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_8(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1BCD170
    static void memcpy_aligned_8(uint8_t* dest, uint8_t* src, int size);
    // private System.String CreateString(System.SByte* value)
    // Offset: 0x1BCD17C
    ::Il2CppString* CreateString(int8_t* value);
    // private System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BCD4E4
    ::Il2CppString* CreateString(int8_t* value, int startIndex, int length);
    // private System.String CreateString(System.Char* value)
    // Offset: 0x1BCD4EC
    ::Il2CppString* CreateString(::Il2CppChar* value);
    // private System.String CreateString(System.Char* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BCD4F0
    ::Il2CppString* CreateString(::Il2CppChar* value, int startIndex, int length);
    // private System.String CreateString(System.Char[] val, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1BC3AA0
    ::Il2CppString* CreateString(::Array<::Il2CppChar>* val, int startIndex, int length);
    // private System.String CreateString(System.Char[] val)
    // Offset: 0x1BCD4F4
    ::Il2CppString* CreateString(::Array<::Il2CppChar>* val);
    // private System.String CreateString(System.Char c, System.Int32 count)
    // Offset: 0x1BC2454
    ::Il2CppString* CreateString(::Il2CppChar c, int count);
    // private System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)
    // Offset: 0x1BCD210
    ::Il2CppString* CreateString(int8_t* value, int startIndex, int length, System::Text::Encoding* enc);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1BC5C50
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1BC6698
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1BCA554
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.String
  #pragma pack(pop)
  static check_size<sizeof(String), 20 + sizeof(::Il2CppChar)> __System_StringSizeCheck;
  static_assert(sizeof(String) == 0x16);
  // static public System.Boolean op_Equality(System.String a, System.String b)
  // Offset: 0x1BC631C
  bool operator ==(::Il2CppString* a, ::Il2CppString& b);
  // static public System.Boolean op_Inequality(System.String a, System.String b)
  // Offset: 0x1BC6320
  bool operator !=(::Il2CppString* a, ::Il2CppString& b);
}
DEFINE_IL2CPP_ARG_TYPE(System::String*, "System", "String");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::String::get_Chars
// Il2CppName: get_Chars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::String::*)(int)>(&System::String::get_Chars)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "get_Chars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::String::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)()>(&System::String::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::String::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::String::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::String::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::String::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::String::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::String::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&System::String::Join)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, value});
  }
};
// Writing MetadataGetter for method: System::String::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::String::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&System::String::Join)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* values = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, values});
  }
};
// Writing MetadataGetter for method: System::String::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppString*>*, int, int)>(&System::String::Join)> {
  static const MethodInfo* get() {
    static auto* separator = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::CompareOrdinalIgnoreCaseHelper
// Il2CppName: CompareOrdinalIgnoreCaseHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::CompareOrdinalIgnoreCaseHelper)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareOrdinalIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB});
  }
};
// Writing MetadataGetter for method: System::String::EqualsHelper
// Il2CppName: EqualsHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::EqualsHelper)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "EqualsHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB});
  }
};
// Writing MetadataGetter for method: System::String::CompareOrdinalHelper
// Il2CppName: CompareOrdinalHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::CompareOrdinalHelper)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareOrdinalHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB});
  }
};
// Writing MetadataGetter for method: System::String::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*)>(&System::String::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*, System::StringComparison)>(&System::String::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::Equals)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: System::String::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*, System::StringComparison)>(&System::String::Equals)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::String::*)(int, ::Array<::Il2CppChar>*, int, int)>(&System::String::CopyTo)> {
  static const MethodInfo* get() {
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* destination = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* destinationIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceIndex, destination, destinationIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::ToCharArray
// Il2CppName: ToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppChar>* (System::String::*)()>(&System::String::ToCharArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::IsNullOrEmpty
// Il2CppName: IsNullOrEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&System::String::IsNullOrEmpty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IsNullOrEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::IsNullOrWhiteSpace
// Il2CppName: IsNullOrWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&System::String::IsNullOrWhiteSpace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IsNullOrWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::GetLegacyNonRandomizedHashCode
// Il2CppName: GetLegacyNonRandomizedHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)()>(&System::String::GetLegacyNonRandomizedHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "GetLegacyNonRandomizedHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::Split)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator});
  }
};
// Writing MetadataGetter for method: System::String::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<::Il2CppChar>*, int)>(&System::String::Split)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, count});
  }
};
// Writing MetadataGetter for method: System::String::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<::Il2CppChar>*, System::StringSplitOptions)>(&System::String::Split)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System", "StringSplitOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, options});
  }
};
// Writing MetadataGetter for method: System::String::SplitInternal
// Il2CppName: SplitInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<::Il2CppChar>*, int, System::StringSplitOptions)>(&System::String::SplitInternal)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System", "StringSplitOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "SplitInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, count, options});
  }
};
// Writing MetadataGetter for method: System::String::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<::Il2CppString*>*, System::StringSplitOptions)>(&System::String::Split)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System", "StringSplitOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, options});
  }
};
// Writing MetadataGetter for method: System::String::Split
// Il2CppName: Split
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<::Il2CppString*>*, int, System::StringSplitOptions)>(&System::String::Split)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System", "StringSplitOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, count, options});
  }
};
// Writing MetadataGetter for method: System::String::InternalSplitKeepEmptyEntries
// Il2CppName: InternalSplitKeepEmptyEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<int>*, ::Array<int>*, int, int)>(&System::String::InternalSplitKeepEmptyEntries)> {
  static const MethodInfo* get() {
    static auto* sepList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lengthList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* numReplaces = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "InternalSplitKeepEmptyEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sepList, lengthList, numReplaces, count});
  }
};
// Writing MetadataGetter for method: System::String::InternalSplitOmitEmptyEntries
// Il2CppName: InternalSplitOmitEmptyEntries
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (System::String::*)(::Array<int>*, ::Array<int>*, int, int)>(&System::String::InternalSplitOmitEmptyEntries)> {
  static const MethodInfo* get() {
    static auto* sepList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* lengthList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* numReplaces = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "InternalSplitOmitEmptyEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sepList, lengthList, numReplaces, count});
  }
};
// Writing MetadataGetter for method: System::String::MakeSeparatorList
// Il2CppName: MakeSeparatorList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, ::Array<int>*&)>(&System::String::MakeSeparatorList)> {
  static const MethodInfo* get() {
    static auto* separator = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* sepList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "MakeSeparatorList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separator, sepList});
  }
};
// Writing MetadataGetter for method: System::String::MakeSeparatorList
// Il2CppName: MakeSeparatorList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppString*>*, ::Array<int>*&, ::Array<int>*&)>(&System::String::MakeSeparatorList)> {
  static const MethodInfo* get() {
    static auto* separators = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* sepList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* lengthList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "MakeSeparatorList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{separators, sepList, lengthList});
  }
};
// Writing MetadataGetter for method: System::String::Substring
// Il2CppName: Substring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int)>(&System::String::Substring)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Substring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex});
  }
};
// Writing MetadataGetter for method: System::String::Substring
// Il2CppName: Substring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, int)>(&System::String::Substring)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Substring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::InternalSubString
// Il2CppName: InternalSubString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, int)>(&System::String::InternalSubString)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "InternalSubString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::Trim
// Il2CppName: Trim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::Trim)> {
  static const MethodInfo* get() {
    static auto* trimChars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trimChars});
  }
};
// Writing MetadataGetter for method: System::String::TrimStart
// Il2CppName: TrimStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::TrimStart)> {
  static const MethodInfo* get() {
    static auto* trimChars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "TrimStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trimChars});
  }
};
// Writing MetadataGetter for method: System::String::TrimEnd
// Il2CppName: TrimEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::TrimEnd)> {
  static const MethodInfo* get() {
    static auto* trimChars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "TrimEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trimChars});
  }
};
// Writing MetadataGetter for method: System::String::CreateStringFromEncoding
// Il2CppName: CreateStringFromEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(uint8_t*, int, System::Text::Encoding*)>(&System::String::CreateStringFromEncoding)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* byteLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateStringFromEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, byteLength, encoding});
  }
};
// Writing MetadataGetter for method: System::String::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(System::Text::NormalizationForm)>(&System::String::Normalize)> {
  static const MethodInfo* get() {
    static auto* normalizationForm = &::il2cpp_utils::GetClassFromName("System.Text", "NormalizationForm")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normalizationForm});
  }
};
// Writing MetadataGetter for method: System::String::FastAllocateString
// Il2CppName: FastAllocateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&System::String::FastAllocateString)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "FastAllocateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: System::String::FillStringChecked
// Il2CppName: FillStringChecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, int, ::Il2CppString*)>(&System::String::FillStringChecked)> {
  static const MethodInfo* get() {
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* src = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "FillStringChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, destPos, src});
  }
};
// Writing MetadataGetter for method: System::String::wstrcpy
// Il2CppName: wstrcpy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, ::Il2CppChar*, int)>(&System::String::wstrcpy)> {
  static const MethodInfo* get() {
    static auto* dmem = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* smem = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* charCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "wstrcpy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dmem, smem, charCount});
  }
};
// Writing MetadataGetter for method: System::String::CtorCharArray
// Il2CppName: CtorCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::CtorCharArray)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CtorCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::CtorCharArrayStartLength
// Il2CppName: CtorCharArrayStartLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*, int, int)>(&System::String::CtorCharArrayStartLength)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CtorCharArrayStartLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::wcslen
// Il2CppName: wcslen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar*)>(&System::String::wcslen)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "wcslen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: System::String::CtorCharPtr
// Il2CppName: CtorCharPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar*)>(&System::String::CtorCharPtr)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CtorCharPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr});
  }
};
// Writing MetadataGetter for method: System::String::CtorCharPtrStartLength
// Il2CppName: CtorCharPtrStartLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar*, int, int)>(&System::String::CtorCharPtrStartLength)> {
  static const MethodInfo* get() {
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CtorCharPtrStartLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ptr, startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::Compare)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB});
  }
};
// Writing MetadataGetter for method: System::String::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, bool)>(&System::String::Compare)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB, ignoreCase});
  }
};
// Writing MetadataGetter for method: System::String::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, System::StringComparison)>(&System::String::Compare)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, bool, System::Globalization::CultureInfo*)>(&System::String::Compare)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ignoreCase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB, ignoreCase, culture});
  }
};
// Writing MetadataGetter for method: System::String::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int, System::Globalization::CultureInfo*, System::Globalization::CompareOptions)>(&System::String::Compare)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, indexA, strB, indexB, length, culture, options});
  }
};
// Writing MetadataGetter for method: System::String::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int, System::StringComparison)>(&System::String::Compare)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, indexA, strB, indexB, length, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppObject*)>(&System::String::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*)>(&System::String::CompareTo)> {
  static const MethodInfo* get() {
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strB});
  }
};
// Writing MetadataGetter for method: System::String::CompareOrdinal
// Il2CppName: CompareOrdinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::CompareOrdinal)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareOrdinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, strB});
  }
};
// Writing MetadataGetter for method: System::String::CompareOrdinal
// Il2CppName: CompareOrdinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int)>(&System::String::CompareOrdinal)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareOrdinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, indexA, strB, indexB, length});
  }
};
// Writing MetadataGetter for method: System::String::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*)>(&System::String::Contains)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::EndsWith
// Il2CppName: EndsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*)>(&System::String::EndsWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::EndsWith
// Il2CppName: EndsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*, System::StringComparison)>(&System::String::EndsWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::EndsWith
// Il2CppName: EndsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppChar)>(&System::String::EndsWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar, int)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex});
  }
};
// Writing MetadataGetter for method: System::String::IndexOfAny
// Il2CppName: IndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::IndexOfAny)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf});
  }
};
// Writing MetadataGetter for method: System::String::IndexOfAny
// Il2CppName: IndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, int)>(&System::String::IndexOfAny)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf, startIndex});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, int)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, System::StringComparison)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, int, System::StringComparison)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, int, int, System::StringComparison)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar)>(&System::String::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar, int)>(&System::String::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOfAny
// Il2CppName: LastIndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::LastIndexOfAny)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOfAny
// Il2CppName: LastIndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, int)>(&System::String::LastIndexOfAny)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf, startIndex});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*)>(&System::String::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, System::StringComparison)>(&System::String::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, int, int, System::StringComparison)>(&System::String::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::PadLeft
// Il2CppName: PadLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, ::Il2CppChar)>(&System::String::PadLeft)> {
  static const MethodInfo* get() {
    static auto* totalWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paddingChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "PadLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalWidth, paddingChar});
  }
};
// Writing MetadataGetter for method: System::String::PadRight
// Il2CppName: PadRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, ::Il2CppChar)>(&System::String::PadRight)> {
  static const MethodInfo* get() {
    static auto* totalWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paddingChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "PadRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalWidth, paddingChar});
  }
};
// Writing MetadataGetter for method: System::String::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*)>(&System::String::StartsWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*, System::StringComparison)>(&System::String::StartsWith)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparisonType = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, comparisonType});
  }
};
// Writing MetadataGetter for method: System::String::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)()>(&System::String::ToLower)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(System::Globalization::CultureInfo*)>(&System::String::ToLower)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture});
  }
};
// Writing MetadataGetter for method: System::String::ToLowerInvariant
// Il2CppName: ToLowerInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)()>(&System::String::ToLowerInvariant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToLowerInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)()>(&System::String::ToUpper)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(System::Globalization::CultureInfo*)>(&System::String::ToUpper)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture});
  }
};
// Writing MetadataGetter for method: System::String::ToUpperInvariant
// Il2CppName: ToUpperInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)()>(&System::String::ToUpperInvariant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToUpperInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(System::IFormatProvider*)>(&System::String::ToString)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::String::*)()>(&System::String::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::IsBOMWhitespace
// Il2CppName: IsBOMWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::String::IsBOMWhitespace)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IsBOMWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::String::Trim
// Il2CppName: Trim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)()>(&System::String::Trim)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::TrimHelper
// Il2CppName: TrimHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int)>(&System::String::TrimHelper)> {
  static const MethodInfo* get() {
    static auto* trimType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "TrimHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trimType});
  }
};
// Writing MetadataGetter for method: System::String::TrimHelper
// Il2CppName: TrimHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*, int)>(&System::String::TrimHelper)> {
  static const MethodInfo* get() {
    static auto* trimChars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* trimType = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "TrimHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trimChars, trimType});
  }
};
// Writing MetadataGetter for method: System::String::CreateTrimmedString
// Il2CppName: CreateTrimmedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, int)>(&System::String::CreateTrimmedString)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateTrimmedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end});
  }
};
// Writing MetadataGetter for method: System::String::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, ::Il2CppString*)>(&System::String::Insert)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, value});
  }
};
// Writing MetadataGetter for method: System::String::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar, ::Il2CppChar)>(&System::String::Replace)> {
  static const MethodInfo* get() {
    static auto* oldChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* newChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldChar, newChar});
  }
};
// Writing MetadataGetter for method: System::String::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppString*, ::Il2CppString*)>(&System::String::Replace)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: System::String::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, int)>(&System::String::Remove)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int)>(&System::String::Remove)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppObject*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, arg0});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, arg0, arg1});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, arg0, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, args});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider, format, arg0});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider, format, arg0, arg1});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider, format, arg0, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::String::Format
// Il2CppName: Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Array<::Il2CppObject*>*)>(&System::String::Format)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider, format, args});
  }
};
// Writing MetadataGetter for method: System::String::FormatHelper
// Il2CppName: FormatHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, System::ParamsArray)>(&System::String::FormatHelper)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &::il2cpp_utils::GetClassFromName("System", "ParamsArray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "FormatHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider, format, args});
  }
};
// Writing MetadataGetter for method: System::String::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&System::String::Copy)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg0});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*, ::Il2CppObject*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg0, arg1});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg0, arg1, arg2});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppObject*>*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* str0 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str0, str1});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* str0 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str0, str1, str2});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* str0 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* str3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str0, str1, str2, str3});
  }
};
// Writing MetadataGetter for method: System::String::ConcatArray
// Il2CppName: ConcatArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppString*>*, int)>(&System::String::ConcatArray)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* totalLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ConcatArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values, totalLength});
  }
};
// Writing MetadataGetter for method: System::String::Concat
// Il2CppName: Concat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppString*>*)>(&System::String::Concat)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: System::String::IsInterned
// Il2CppName: IsInterned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&System::String::IsInterned)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IsInterned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::String::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TypeCode (System::String::*)()>(&System::String::GetTypeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToBoolean
// Il2CppName: System.IConvertible.ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToBoolean)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToChar
// Il2CppName: System.IConvertible.ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToChar)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToSByte
// Il2CppName: System.IConvertible.ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToSByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToByte
// Il2CppName: System.IConvertible.ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToInt16
// Il2CppName: System.IConvertible.ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToUInt16
// Il2CppName: System.IConvertible.ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToUInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToInt32
// Il2CppName: System.IConvertible.ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToUInt32
// Il2CppName: System.IConvertible.ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToUInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToInt64
// Il2CppName: System.IConvertible.ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToUInt64
// Il2CppName: System.IConvertible.ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToUInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToSingle
// Il2CppName: System.IConvertible.ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToSingle)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToDouble
// Il2CppName: System.IConvertible.ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToDouble)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToDecimal
// Il2CppName: System.IConvertible.ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Decimal (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToDecimal)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToDateTime
// Il2CppName: System.IConvertible.ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (System::String::*)(System::IFormatProvider*)>(&System::String::System_IConvertible_ToDateTime)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::String::System_IConvertible_ToType
// Il2CppName: System.IConvertible.ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::String::*)(System::Type*, System::IFormatProvider*)>(&System::String::System_IConvertible_ToType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, provider});
  }
};
// Writing MetadataGetter for method: System::String::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<::Il2CppChar>* (System::String::*)()>(&System::String::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (System::String::*)()>(&System::String::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::CompareOrdinalUnchecked
// Il2CppName: CompareOrdinalUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, int, ::Il2CppString*, int, int)>(&System::String::CompareOrdinalUnchecked)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lenA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lenB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CompareOrdinalUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, indexA, lenA, strB, indexB, lenB});
  }
};
// Writing MetadataGetter for method: System::String::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar, int, int)>(&System::String::IndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::IndexOfUnchecked
// Il2CppName: IndexOfUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar, int, int)>(&System::String::IndexOfUnchecked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOfUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::IndexOfUnchecked
// Il2CppName: IndexOfUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppString*, int, int)>(&System::String::IndexOfUnchecked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOfUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::IndexOfAny
// Il2CppName: IndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, int, int)>(&System::String::IndexOfAny)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::IndexOfAnyUnchecked
// Il2CppName: IndexOfAnyUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, int, int)>(&System::String::IndexOfAnyUnchecked)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IndexOfAnyUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOf
// Il2CppName: LastIndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar, int, int)>(&System::String::LastIndexOf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOfUnchecked
// Il2CppName: LastIndexOfUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Il2CppChar, int, int)>(&System::String::LastIndexOfUnchecked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOfUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOfAny
// Il2CppName: LastIndexOfAny
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, int, int)>(&System::String::LastIndexOfAny)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::LastIndexOfAnyUnchecked
// Il2CppName: LastIndexOfAnyUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)(::Array<::Il2CppChar>*, int, int)>(&System::String::LastIndexOfAnyUnchecked)> {
  static const MethodInfo* get() {
    static auto* anyOf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "LastIndexOfAnyUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyOf, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::String::nativeCompareOrdinalEx
// Il2CppName: nativeCompareOrdinalEx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int)>(&System::String::nativeCompareOrdinalEx)> {
  static const MethodInfo* get() {
    static auto* strA = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strB = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "nativeCompareOrdinalEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strA, indexA, strB, indexB, count});
  }
};
// Writing MetadataGetter for method: System::String::ReplaceInternal
// Il2CppName: ReplaceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar, ::Il2CppChar)>(&System::String::ReplaceInternal)> {
  static const MethodInfo* get() {
    static auto* oldChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* newChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ReplaceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldChar, newChar});
  }
};
// Writing MetadataGetter for method: System::String::ReplaceInternal
// Il2CppName: ReplaceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppString*, ::Il2CppString*)>(&System::String::ReplaceInternal)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ReplaceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: System::String::ReplaceUnchecked
// Il2CppName: ReplaceUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppString*, ::Il2CppString*)>(&System::String::ReplaceUnchecked)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ReplaceUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: System::String::ReplaceFallback
// Il2CppName: ReplaceFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppString*, ::Il2CppString*, int)>(&System::String::ReplaceFallback)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* testedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ReplaceFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue, testedCount});
  }
};
// Writing MetadataGetter for method: System::String::PadHelper
// Il2CppName: PadHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int, ::Il2CppChar, bool)>(&System::String::PadHelper)> {
  static const MethodInfo* get() {
    static auto* totalWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paddingChar = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* isRightPadded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "PadHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalWidth, paddingChar, isRightPadded});
  }
};
// Writing MetadataGetter for method: System::String::StartsWithOrdinalUnchecked
// Il2CppName: StartsWithOrdinalUnchecked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppString*)>(&System::String::StartsWithOrdinalUnchecked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "StartsWithOrdinalUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::IsAscii
// Il2CppName: IsAscii
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)()>(&System::String::IsAscii)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "IsAscii", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::InternalIsInterned
// Il2CppName: InternalIsInterned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&System::String::InternalIsInterned)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "InternalIsInterned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::String::CharCopy
// Il2CppName: CharCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, ::Il2CppChar*, int)>(&System::String::CharCopy)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* src = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CharCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src, count});
  }
};
// Writing MetadataGetter for method: System::String::memset
// Il2CppName: memset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int, int)>(&System::String::memset)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "memset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, val, len});
  }
};
// Writing MetadataGetter for method: System::String::memcpy
// Il2CppName: memcpy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&System::String::memcpy)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* src = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "memcpy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src, size});
  }
};
// Writing MetadataGetter for method: System::String::bzero_
// Il2CppName: bzero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&System::String::bzero_)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "bzero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, len});
  }
};
// Writing MetadataGetter for method: System::String::bzero_aligned_1
// Il2CppName: bzero_aligned_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&System::String::bzero_aligned_1)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "bzero_aligned_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, len});
  }
};
// Writing MetadataGetter for method: System::String::bzero_aligned_2
// Il2CppName: bzero_aligned_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&System::String::bzero_aligned_2)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "bzero_aligned_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, len});
  }
};
// Writing MetadataGetter for method: System::String::bzero_aligned_4
// Il2CppName: bzero_aligned_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&System::String::bzero_aligned_4)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "bzero_aligned_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, len});
  }
};
// Writing MetadataGetter for method: System::String::bzero_aligned_8
// Il2CppName: bzero_aligned_8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&System::String::bzero_aligned_8)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "bzero_aligned_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, len});
  }
};
// Writing MetadataGetter for method: System::String::memcpy_aligned_1
// Il2CppName: memcpy_aligned_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&System::String::memcpy_aligned_1)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* src = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "memcpy_aligned_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src, size});
  }
};
// Writing MetadataGetter for method: System::String::memcpy_aligned_2
// Il2CppName: memcpy_aligned_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&System::String::memcpy_aligned_2)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* src = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "memcpy_aligned_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src, size});
  }
};
// Writing MetadataGetter for method: System::String::memcpy_aligned_4
// Il2CppName: memcpy_aligned_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&System::String::memcpy_aligned_4)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* src = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "memcpy_aligned_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src, size});
  }
};
// Writing MetadataGetter for method: System::String::memcpy_aligned_8
// Il2CppName: memcpy_aligned_8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&System::String::memcpy_aligned_8)> {
  static const MethodInfo* get() {
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* src = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "memcpy_aligned_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dest, src, size});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int8_t*)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "SByte"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int8_t*, int, int)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "SByte"))->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar*)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar*, int, int)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*, int, int)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* val = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val, startIndex, length});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Array<::Il2CppChar>*)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* val = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(::Il2CppChar, int)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c, count});
  }
};
// Writing MetadataGetter for method: System::String::CreateString
// Il2CppName: CreateString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)(int8_t*, int, int, System::Text::Encoding*)>(&System::String::CreateString)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "SByte"))->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* enc = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, startIndex, length, enc});
  }
};
// Writing MetadataGetter for method: System::String::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::String::*)(::Il2CppObject*)>(&System::String::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::String*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::String::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::String::*)()>(&System::String::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::String::*)()>(&System::String::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::String*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::String::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::String::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
