// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: StringComparison
  struct StringComparison;
  // Forward declaring type: StringSplitOptions
  struct StringSplitOptions;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: ParamsArray
  struct ParamsArray;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
  // Forward declaring type: NormalizationForm
  struct NormalizationForm;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: CompareOptions
  struct CompareOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x16
  #pragma pack(push, 1)
  // Autogenerated type: System.String
  // [DefaultMemberAttribute] Offset: D7ACC4
  // [ComVisibleAttribute] Offset: D7ACC4
  class String : public ::Il2CppObject/*, public System::IComparable, public System::ICloneable, public System::IConvertible, public System::IComparable_1<::Il2CppString*>, public System::Collections::Generic::IEnumerable_1<::Il2CppChar>, public System::IEquatable_1<::Il2CppString*>*/ {
    public:
    // private System.Int32 m_stringLength
    // Size: 0x4
    // Offset: 0x10
    int m_stringLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char m_firstChar
    // Size: 0x2
    // Offset: 0x14
    ::Il2CppChar m_firstChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Creating value type constructor for type: String
    String(int m_stringLength_ = {}, ::Il2CppChar m_firstChar_ = {}) noexcept : m_stringLength{m_stringLength_}, m_firstChar{m_firstChar_} {}
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<::Il2CppString*>
    operator System::IComparable_1<::Il2CppString*>() noexcept {
      return *reinterpret_cast<System::IComparable_1<::Il2CppString*>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<::Il2CppChar>
    operator System::Collections::Generic::IEnumerable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<::Il2CppString*>
    operator System::IEquatable_1<::Il2CppString*>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<::Il2CppString*>*>(this);
    }
    // static field const value: static private System.Int32 TrimHead
    static constexpr const int TrimHead = 0;
    // Get static field: static private System.Int32 TrimHead
    static int _get_TrimHead();
    // Set static field: static private System.Int32 TrimHead
    static void _set_TrimHead(int value);
    // static field const value: static private System.Int32 TrimTail
    static constexpr const int TrimTail = 1;
    // Get static field: static private System.Int32 TrimTail
    static int _get_TrimTail();
    // Set static field: static private System.Int32 TrimTail
    static void _set_TrimTail(int value);
    // static field const value: static private System.Int32 TrimBoth
    static constexpr const int TrimBoth = 2;
    // Get static field: static private System.Int32 TrimBoth
    static int _get_TrimBoth();
    // Set static field: static private System.Int32 TrimBoth
    static void _set_TrimBoth(int value);
    // Get static field: static public readonly System.String Empty
    static ::Il2CppString* _get_Empty();
    // Set static field: static public readonly System.String Empty
    static void _set_Empty(::Il2CppString* value);
    // static field const value: static private System.Int32 charPtrAlignConst
    static constexpr const int charPtrAlignConst = 1;
    // Get static field: static private System.Int32 charPtrAlignConst
    static int _get_charPtrAlignConst();
    // Set static field: static private System.Int32 charPtrAlignConst
    static void _set_charPtrAlignConst(int value);
    // static field const value: static private System.Int32 alignConst
    static constexpr const int alignConst = 3;
    // Get static field: static private System.Int32 alignConst
    static int _get_alignConst();
    // Set static field: static private System.Int32 alignConst
    static void _set_alignConst(int value);
    // static public System.String Join(System.String separator, params System.String[] value)
    // Offset: 0x1B51960
    static ::Il2CppString* Join(::Il2CppString* separator, ::Array<::Il2CppString*>* value);
    // Creating initializer_list -> params proxy for: System.String Join(System.String separator, params System.String[] value)
    static ::Il2CppString* Join(::Il2CppString* separator, std::initializer_list<::Il2CppString*> value);
    // Creating TArgs -> initializer_list proxy for: System.String Join(System.String separator, params System.String[] value)
    template<class ...TParams>
    static ::Il2CppString* Join(::Il2CppString* separator, TParams&&... value) {
      return Join(separator, {value...});
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<T> values)
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Il2CppString* Join(::Il2CppString* separator, System::Collections::Generic::IEnumerable_1<T>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "String", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(separator), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, separator, values);
    }
    // static public System.String Join(System.String separator, System.Collections.Generic.IEnumerable`1<System.String> values)
    // Offset: 0x1B51C9C
    static ::Il2CppString* Join(::Il2CppString* separator, System::Collections::Generic::IEnumerable_1<::Il2CppString*>* values);
    // static public System.String Join(System.String separator, System.String[] value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B519FC
    static ::Il2CppString* Join(::Il2CppString* separator, ::Array<::Il2CppString*>* value, int startIndex, int count);
    // static private System.Int32 CompareOrdinalIgnoreCaseHelper(System.String strA, System.String strB)
    // Offset: 0x1B52174
    static int CompareOrdinalIgnoreCaseHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // static private System.Boolean EqualsHelper(System.String strA, System.String strB)
    // Offset: 0x1B52260
    static bool EqualsHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // static private System.Int32 CompareOrdinalHelper(System.String strA, System.String strB)
    // Offset: 0x1B523AC
    static int CompareOrdinalHelper(::Il2CppString* strA, ::Il2CppString* strB);
    // public System.Boolean Equals(System.String value)
    // Offset: 0x1B51060
    bool Equals(::Il2CppString* value);
    // public System.Boolean Equals(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1B5261C
    bool Equals(::Il2CppString* value, System::StringComparison comparisonType);
    // static public System.Boolean Equals(System.String a, System.String b)
    // Offset: 0x1B52910
    static bool Equals(::Il2CppString* a, ::Il2CppString* b);
    // static public System.Boolean Equals(System.String a, System.String b, System.StringComparison comparisonType)
    // Offset: 0x1B5294C
    static bool Equals(::Il2CppString* a, ::Il2CppString* b, System::StringComparison comparisonType);
    // public System.Char get_Chars(System.Int32 index)
    // Offset: 0x1B4F8F0
    ::Il2CppChar get_Chars(int index);
    // public System.Void CopyTo(System.Int32 sourceIndex, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0x1B52C28
    void CopyTo(int sourceIndex, ::Array<::Il2CppChar>* destination, int destinationIndex, int count);
    // public System.Char[] ToCharArray()
    // Offset: 0x1B52E14
    ::Array<::Il2CppChar>* ToCharArray();
    // static public System.Boolean IsNullOrEmpty(System.String value)
    // Offset: 0x1B52EAC
    static bool IsNullOrEmpty(::Il2CppString* value);
    // static public System.Boolean IsNullOrWhiteSpace(System.String value)
    // Offset: 0x1B52EC8
    static bool IsNullOrWhiteSpace(::Il2CppString* value);
    // System.Int32 GetLegacyNonRandomizedHashCode()
    // Offset: 0x1B52FFC
    int GetLegacyNonRandomizedHashCode();
    // public System.String[] Split(params System.Char[] separator)
    // Offset: 0x1B53074
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator);
    // Creating initializer_list -> params proxy for: System.String[] Split(params System.Char[] separator)
    ::Array<::Il2CppString*>* Split(std::initializer_list<::Il2CppChar> separator);
    // Creating TArgs -> initializer_list proxy for: System.String[] Split(params System.Char[] separator)
    template<class ...TParams>
    ::Array<::Il2CppString*>* Split(TParams&&... separator) {
      return Split({separator...});
    }
    // public System.String[] Split(System.Char[] separator, System.Int32 count)
    // Offset: 0x1B532E0
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator, int count);
    // public System.String[] Split(System.Char[] separator, System.StringSplitOptions options)
    // Offset: 0x1B532E8
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppChar>* separator, System::StringSplitOptions options);
    // System.String[] SplitInternal(System.Char[] separator, System.Int32 count, System.StringSplitOptions options)
    // Offset: 0x1B53080
    ::Array<::Il2CppString*>* SplitInternal(::Array<::Il2CppChar>* separator, int count, System::StringSplitOptions options);
    // public System.String[] Split(System.String[] separator, System.StringSplitOptions options)
    // Offset: 0x1B539CC
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppString*>* separator, System::StringSplitOptions options);
    // public System.String[] Split(System.String[] separator, System.Int32 count, System.StringSplitOptions options)
    // Offset: 0x1B539D8
    ::Array<::Il2CppString*>* Split(::Array<::Il2CppString*>* separator, int count, System::StringSplitOptions options);
    // private System.String[] InternalSplitKeepEmptyEntries(System.Int32[] sepList, System.Int32[] lengthList, System.Int32 numReplaces, System.Int32 count)
    // Offset: 0x1B537A8
    ::Array<::Il2CppString*>* InternalSplitKeepEmptyEntries(::Array<int>* sepList, ::Array<int>* lengthList, int numReplaces, int count);
    // private System.String[] InternalSplitOmitEmptyEntries(System.Int32[] sepList, System.Int32[] lengthList, System.Int32 numReplaces, System.Int32 count)
    // Offset: 0x1B534C0
    ::Array<::Il2CppString*>* InternalSplitOmitEmptyEntries(::Array<int>* sepList, ::Array<int>* lengthList, int numReplaces, int count);
    // private System.Int32 MakeSeparatorList(System.Char[] separator, ref System.Int32[] sepList)
    // Offset: 0x1B532F4
    int MakeSeparatorList(::Array<::Il2CppChar>* separator, ::Array<int>*& sepList);
    // private System.Int32 MakeSeparatorList(System.String[] separators, ref System.Int32[] sepList, ref System.Int32[] lengthList)
    // Offset: 0x1B53C6C
    int MakeSeparatorList(::Array<::Il2CppString*>* separators, ::Array<int>*& sepList, ::Array<int>*& lengthList);
    // public System.String Substring(System.Int32 startIndex)
    // Offset: 0x1B53F70
    ::Il2CppString* Substring(int startIndex);
    // public System.String Substring(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B53E10
    ::Il2CppString* Substring(int startIndex, int length);
    // private System.String InternalSubString(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B53FA8
    ::Il2CppString* InternalSubString(int startIndex, int length);
    // public System.String Trim(params System.Char[] trimChars)
    // Offset: 0x1B54004
    ::Il2CppString* Trim(::Array<::Il2CppChar>* trimChars);
    // Creating initializer_list -> params proxy for: System.String Trim(params System.Char[] trimChars)
    ::Il2CppString* Trim(std::initializer_list<::Il2CppChar> trimChars);
    // Creating TArgs -> initializer_list proxy for: System.String Trim(params System.Char[] trimChars)
    template<class ...TParams>
    ::Il2CppString* Trim(TParams&&... trimChars) {
      return Trim({trimChars...});
    }
    // public System.String TrimStart(params System.Char[] trimChars)
    // Offset: 0x1B542D0
    ::Il2CppString* TrimStart(::Array<::Il2CppChar>* trimChars);
    // Creating initializer_list -> params proxy for: System.String TrimStart(params System.Char[] trimChars)
    ::Il2CppString* TrimStart(std::initializer_list<::Il2CppChar> trimChars);
    // Creating TArgs -> initializer_list proxy for: System.String TrimStart(params System.Char[] trimChars)
    template<class ...TParams>
    ::Il2CppString* TrimStart(TParams&&... trimChars) {
      return TrimStart({trimChars...});
    }
    // public System.String TrimEnd(params System.Char[] trimChars)
    // Offset: 0x1B542EC
    ::Il2CppString* TrimEnd(::Array<::Il2CppChar>* trimChars);
    // Creating initializer_list -> params proxy for: System.String TrimEnd(params System.Char[] trimChars)
    ::Il2CppString* TrimEnd(std::initializer_list<::Il2CppChar> trimChars);
    // Creating TArgs -> initializer_list proxy for: System.String TrimEnd(params System.Char[] trimChars)
    template<class ...TParams>
    ::Il2CppString* TrimEnd(TParams&&... trimChars) {
      return TrimEnd({trimChars...});
    }
    // public System.Void .ctor(System.Char* value)
    // Offset: 0x1B54308
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Il2CppChar* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value)));
    }
    // public System.Void .ctor(System.Char* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B5430C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Il2CppChar* value, int startIndex, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value, startIndex, length)));
    }
    // public System.Void .ctor(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)
    // Offset: 0x1B54310
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(int8_t* value, int startIndex, int length, System::Text::Encoding* enc) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value, startIndex, length, enc)));
    }
    // static System.String CreateStringFromEncoding(System.Byte* bytes, System.Int32 byteLength, System.Text.Encoding encoding)
    // Offset: 0x1B54314
    static ::Il2CppString* CreateStringFromEncoding(uint8_t* bytes, int byteLength, System::Text::Encoding* encoding);
    // public System.String Normalize(System.Text.NormalizationForm normalizationForm)
    // Offset: 0x1B543EC
    ::Il2CppString* Normalize(System::Text::NormalizationForm normalizationForm);
    // static System.String FastAllocateString(System.Int32 length)
    // Offset: 0x1B52170
    static ::Il2CppString* FastAllocateString(int length);
    // static private System.Void FillStringChecked(System.String dest, System.Int32 destPos, System.String src)
    // Offset: 0x1B544C4
    static void FillStringChecked(::Il2CppString* dest, int destPos, ::Il2CppString* src);
    // public System.Void .ctor(System.Char[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B54578
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Array<::Il2CppChar>* value, int startIndex, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value, startIndex, length)));
    }
    // public System.Void .ctor(System.Char[] value)
    // Offset: 0x1B5457C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Array<::Il2CppChar>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(value)));
    }
    // static System.Void wstrcpy(System.Char* dmem, System.Char* smem, System.Int32 charCount)
    // Offset: 0x1B52E08
    static void wstrcpy(::Il2CppChar* dmem, ::Il2CppChar* smem, int charCount);
    // private System.String CtorCharArray(System.Char[] value)
    // Offset: 0x1B54580
    ::Il2CppString* CtorCharArray(::Array<::Il2CppChar>* value);
    // private System.String CtorCharArrayStartLength(System.Char[] value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B54624
    ::Il2CppString* CtorCharArrayStartLength(::Array<::Il2CppChar>* value, int startIndex, int length);
    // static private System.Int32 wcslen(System.Char* ptr)
    // Offset: 0x1B547D4
    static int wcslen(::Il2CppChar* ptr);
    // private System.String CtorCharPtr(System.Char* ptr)
    // Offset: 0x1B5484C
    ::Il2CppString* CtorCharPtr(::Il2CppChar* ptr);
    // private System.String CtorCharPtrStartLength(System.Char* ptr, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B54A00
    ::Il2CppString* CtorCharPtrStartLength(::Il2CppChar* ptr, int startIndex, int length);
    // public System.Void .ctor(System.Char c, System.Int32 count)
    // Offset: 0x1B54C30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ::Il2CppString* New_ctor(::Il2CppChar c, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::String::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<::Il2CppString*, creationType>(c, count)));
    }
    // static public System.Int32 Compare(System.String strA, System.String strB)
    // Offset: 0x1B54C34
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase)
    // Offset: 0x1B54CD4
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, bool ignoreCase);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.StringComparison comparisonType)
    // Offset: 0x1B54DBC
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, System::StringComparison comparisonType);
    // static public System.Int32 Compare(System.String strA, System.String strB, System.Boolean ignoreCase, System.Globalization.CultureInfo culture)
    // Offset: 0x1B550C4
    static int Compare(::Il2CppString* strA, ::Il2CppString* strB, bool ignoreCase, System::Globalization::CultureInfo* culture);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options)
    // Offset: 0x1B5518C
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length, System::Globalization::CultureInfo* culture, System::Globalization::CompareOptions options);
    // static public System.Int32 Compare(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length, System.StringComparison comparisonType)
    // Offset: 0x1B4F984
    static int Compare(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length, System::StringComparison comparisonType);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0x1B55428
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.String strB)
    // Offset: 0x1B55500
    int CompareTo(::Il2CppString* strB);
    // static public System.Int32 CompareOrdinal(System.String strA, System.String strB)
    // Offset: 0x1B555B8
    static int CompareOrdinal(::Il2CppString* strA, ::Il2CppString* strB);
    // static public System.Int32 CompareOrdinal(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 length)
    // Offset: 0x1B53F7C
    static int CompareOrdinal(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int length);
    // public System.Boolean Contains(System.String value)
    // Offset: 0x1B55600
    bool Contains(::Il2CppString* value);
    // public System.Boolean EndsWith(System.String value)
    // Offset: 0x1B55638
    bool EndsWith(::Il2CppString* value);
    // public System.Boolean EndsWith(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1B55640
    bool EndsWith(::Il2CppString* value, System::StringComparison comparisonType);
    // System.Boolean EndsWith(System.Char value)
    // Offset: 0x1B558D4
    bool EndsWith(::Il2CppChar value);
    // public System.Int32 IndexOf(System.Char value)
    // Offset: 0x1B55918
    int IndexOf(::Il2CppChar value);
    // public System.Int32 IndexOf(System.Char value, System.Int32 startIndex)
    // Offset: 0x1B55A6C
    int IndexOf(::Il2CppChar value, int startIndex);
    // public System.Int32 IndexOfAny(System.Char[] anyOf)
    // Offset: 0x1B55A78
    int IndexOfAny(::Array<::Il2CppChar>* anyOf);
    // public System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex)
    // Offset: 0x1B55B9C
    int IndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex);
    // public System.Int32 IndexOf(System.String value)
    // Offset: 0x1B55BA8
    int IndexOf(::Il2CppString* value);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex)
    // Offset: 0x1B55BB8
    int IndexOf(::Il2CppString* value, int startIndex);
    // public System.Int32 IndexOf(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1B55628
    int IndexOf(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.StringComparison comparisonType)
    // Offset: 0x1B55BC8
    int IndexOf(::Il2CppString* value, int startIndex, System::StringComparison comparisonType);
    // public System.Int32 IndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)
    // Offset: 0x1B55BD8
    int IndexOf(::Il2CppString* value, int startIndex, int count, System::StringComparison comparisonType);
    // public System.Int32 LastIndexOf(System.Char value)
    // Offset: 0x1B55F7C
    int LastIndexOf(::Il2CppChar value);
    // public System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex)
    // Offset: 0x1B560D0
    int LastIndexOf(::Il2CppChar value, int startIndex);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf)
    // Offset: 0x1B560D8
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex)
    // Offset: 0x1B56248
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex);
    // public System.Int32 LastIndexOf(System.String value)
    // Offset: 0x1B56250
    int LastIndexOf(::Il2CppString* value);
    // public System.Int32 LastIndexOf(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1B5667C
    int LastIndexOf(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.Int32 LastIndexOf(System.String value, System.Int32 startIndex, System.Int32 count, System.StringComparison comparisonType)
    // Offset: 0x1B56260
    int LastIndexOf(::Il2CppString* value, int startIndex, int count, System::StringComparison comparisonType);
    // public System.String PadLeft(System.Int32 totalWidth, System.Char paddingChar)
    // Offset: 0x1B5668C
    ::Il2CppString* PadLeft(int totalWidth, ::Il2CppChar paddingChar);
    // public System.String PadRight(System.Int32 totalWidth, System.Char paddingChar)
    // Offset: 0x1B567E4
    ::Il2CppString* PadRight(int totalWidth, ::Il2CppChar paddingChar);
    // public System.Boolean StartsWith(System.String value)
    // Offset: 0x1B567EC
    bool StartsWith(::Il2CppString* value);
    // public System.Boolean StartsWith(System.String value, System.StringComparison comparisonType)
    // Offset: 0x1B56884
    bool StartsWith(::Il2CppString* value, System::StringComparison comparisonType);
    // public System.String ToLower()
    // Offset: 0x1B56B20
    ::Il2CppString* ToLower();
    // public System.String ToLower(System.Globalization.CultureInfo culture)
    // Offset: 0x1B56B90
    ::Il2CppString* ToLower(System::Globalization::CultureInfo* culture);
    // public System.String ToLowerInvariant()
    // Offset: 0x1B56C40
    ::Il2CppString* ToLowerInvariant();
    // public System.String ToUpper()
    // Offset: 0x1B56CB0
    ::Il2CppString* ToUpper();
    // public System.String ToUpper(System.Globalization.CultureInfo culture)
    // Offset: 0x1B56D20
    ::Il2CppString* ToUpper(System::Globalization::CultureInfo* culture);
    // public System.String ToUpperInvariant()
    // Offset: 0x1B56DD0
    ::Il2CppString* ToUpperInvariant();
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0x1B56E44
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // public System.Object Clone()
    // Offset: 0x1B56E48
    ::Il2CppObject* Clone();
    // static private System.Boolean IsBOMWhitespace(System.Char c)
    // Offset: 0x1B56E4C
    static bool IsBOMWhitespace(::Il2CppChar c);
    // public System.String Trim()
    // Offset: 0x1B51058
    ::Il2CppString* Trim();
    // private System.String TrimHelper(System.Int32 trimType)
    // Offset: 0x1B54020
    ::Il2CppString* TrimHelper(int trimType);
    // private System.String TrimHelper(System.Char[] trimChars, System.Int32 trimType)
    // Offset: 0x1B54184
    ::Il2CppString* TrimHelper(::Array<::Il2CppChar>* trimChars, int trimType);
    // private System.String CreateTrimmedString(System.Int32 start, System.Int32 end)
    // Offset: 0x1B56E54
    ::Il2CppString* CreateTrimmedString(int start, int end);
    // public System.String Insert(System.Int32 startIndex, System.String value)
    // Offset: 0x1B56EEC
    ::Il2CppString* Insert(int startIndex, ::Il2CppString* value);
    // public System.String Replace(System.Char oldChar, System.Char newChar)
    // Offset: 0x1B5704C
    ::Il2CppString* Replace(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // public System.String Replace(System.String oldValue, System.String newValue)
    // Offset: 0x1B57140
    ::Il2CppString* Replace(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // public System.String Remove(System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B572E0
    ::Il2CppString* Remove(int startIndex, int count);
    // public System.String Remove(System.Int32 startIndex)
    // Offset: 0x1B57460
    ::Il2CppString* Remove(int startIndex);
    // static public System.String Format(System.String format, System.Object arg0)
    // Offset: 0x1B507A0
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0);
    // static public System.String Format(System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0x1B5087C
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Format(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1B57618
    static ::Il2CppString* Format(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Format(System.String format, params System.Object[] args)
    // Offset: 0x1B57668
    static ::Il2CppString* Format(::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.String Format(System.String format, params System.Object[] args)
    static ::Il2CppString* Format(::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.String Format(System.String format, params System.Object[] args)
    template<class ...TParams>
    static ::Il2CppString* Format(::Il2CppString* format, TParams&&... args) {
      return Format(format, {args...});
    }
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0)
    // Offset: 0x1B57740
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0x1B57798
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Format(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1B577F4
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Format(System.IFormatProvider provider, System.String format, params System.Object[] args)
    // Offset: 0x1B57854
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.String Format(System.IFormatProvider provider, System.String format, params System.Object[] args)
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.String Format(System.IFormatProvider provider, System.String format, params System.Object[] args)
    template<class ...TParams>
    static ::Il2CppString* Format(System::IFormatProvider* provider, ::Il2CppString* format, TParams&&... args) {
      return Format(provider, format, {args...});
    }
    // static private System.String FormatHelper(System.IFormatProvider provider, System.String format, System.ParamsArray args)
    // Offset: 0x1B57530
    static ::Il2CppString* FormatHelper(System::IFormatProvider* provider, ::Il2CppString* format, System::ParamsArray args);
    // static public System.String Copy(System.String str)
    // Offset: 0x1B57930
    static ::Il2CppString* Copy(::Il2CppString* str);
    // static public System.String Concat(System.Object arg0)
    // Offset: 0x1B579E8
    static ::Il2CppString* Concat(::Il2CppObject* arg0);
    // static public System.String Concat(System.Object arg0, System.Object arg1)
    // Offset: 0x1B57A58
    static ::Il2CppString* Concat(::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // static public System.String Concat(System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1B57C08
    static ::Il2CppString* Concat(::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // static public System.String Concat(params System.Object[] args)
    // Offset: 0x1B57E18
    static ::Il2CppString* Concat(::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.String Concat(params System.Object[] args)
    static ::Il2CppString* Concat(std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.String Concat(params System.Object[] args)
    template<class ...TParams>
    static ::Il2CppString* Concat(TParams&&... args) {
      return Concat({args...});
    }
    // static public System.String Concat(System.String str0, System.String str1)
    // Offset: 0x1B57B1C
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1);
    // static public System.String Concat(System.String str0, System.String str1, System.String str2)
    // Offset: 0x1B57D08
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1, ::Il2CppString* str2);
    // static public System.String Concat(System.String str0, System.String str1, System.String str2, System.String str3)
    // Offset: 0x1B580AC
    static ::Il2CppString* Concat(::Il2CppString* str0, ::Il2CppString* str1, ::Il2CppString* str2, ::Il2CppString* str3);
    // static private System.String ConcatArray(System.String[] values, System.Int32 totalLength)
    // Offset: 0x1B58004
    static ::Il2CppString* ConcatArray(::Array<::Il2CppString*>* values, int totalLength);
    // static public System.String Concat(params System.String[] values)
    // Offset: 0x1B58218
    static ::Il2CppString* Concat(::Array<::Il2CppString*>* values);
    // Creating initializer_list -> params proxy for: System.String Concat(params System.String[] values)
    static ::Il2CppString* Concat(std::initializer_list<::Il2CppString*> values);
    // static public System.String IsInterned(System.String str)
    // Offset: 0x1B583AC
    static ::Il2CppString* IsInterned(::Il2CppString* str);
    // public System.TypeCode GetTypeCode()
    // Offset: 0x1B58434
    System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0x1B5843C
    bool System_IConvertible_ToBoolean(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0x1B584B4
    ::Il2CppChar System_IConvertible_ToChar(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0x1B5852C
    int8_t System_IConvertible_ToSByte(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0x1B585A4
    uint8_t System_IConvertible_ToByte(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0x1B5861C
    int16_t System_IConvertible_ToInt16(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0x1B58694
    uint16_t System_IConvertible_ToUInt16(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0x1B5870C
    int System_IConvertible_ToInt32(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0x1B58784
    uint System_IConvertible_ToUInt32(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0x1B587FC
    int64_t System_IConvertible_ToInt64(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0x1B58874
    uint64_t System_IConvertible_ToUInt64(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0x1B588EC
    float System_IConvertible_ToSingle(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0x1B58964
    double System_IConvertible_ToDouble(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0x1B589DC
    System::Decimal System_IConvertible_ToDecimal(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0x1B58A54
    System::DateTime System_IConvertible_ToDateTime(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0x1B58ACC
    ::Il2CppObject* System_IConvertible_ToType(System::Type* type, System::IFormatProvider* provider);
    // private System.Collections.Generic.IEnumerator`1<System.Char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator()
    // Offset: 0x1B58B4C
    System::Collections::Generic::IEnumerator_1<::Il2CppChar>* System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1B58BB0
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Int32 get_Length()
    // Offset: 0x1B58C14
    int get_Length();
    // static System.Int32 CompareOrdinalUnchecked(System.String strA, System.Int32 indexA, System.Int32 lenA, System.String strB, System.Int32 indexB, System.Int32 lenB)
    // Offset: 0x1B58C1C
    static int CompareOrdinalUnchecked(::Il2CppString* strA, int indexA, int lenA, ::Il2CppString* strB, int indexB, int lenB);
    // public System.Int32 IndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B55924
    int IndexOf(::Il2CppChar value, int startIndex, int count);
    // System.Int32 IndexOfUnchecked(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B58DA0
    int IndexOfUnchecked(::Il2CppChar value, int startIndex, int count);
    // System.Int32 IndexOfUnchecked(System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B58F5C
    int IndexOfUnchecked(::Il2CppString* value, int startIndex, int count);
    // public System.Int32 IndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B55A84
    int IndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // private System.Int32 IndexOfAnyUnchecked(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B5907C
    int IndexOfAnyUnchecked(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // public System.Int32 LastIndexOf(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B55F88
    int LastIndexOf(::Il2CppChar value, int startIndex, int count);
    // System.Int32 LastIndexOfUnchecked(System.Char value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B5916C
    int LastIndexOfUnchecked(::Il2CppChar value, int startIndex, int count);
    // public System.Int32 LastIndexOfAny(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B560E4
    int LastIndexOfAny(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // private System.Int32 LastIndexOfAnyUnchecked(System.Char[] anyOf, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1B59330
    int LastIndexOfAnyUnchecked(::Array<::Il2CppChar>* anyOf, int startIndex, int count);
    // static System.Int32 nativeCompareOrdinalEx(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 count)
    // Offset: 0x1B552B4
    static int nativeCompareOrdinalEx(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int count);
    // private System.String ReplaceInternal(System.Char oldChar, System.Char newChar)
    // Offset: 0x1B57050
    ::Il2CppString* ReplaceInternal(::Il2CppChar oldChar, ::Il2CppChar newChar);
    // System.String ReplaceInternal(System.String oldValue, System.String newValue)
    // Offset: 0x1B571DC
    ::Il2CppString* ReplaceInternal(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // private System.String ReplaceUnchecked(System.String oldValue, System.String newValue)
    // Offset: 0x1B5941C
    ::Il2CppString* ReplaceUnchecked(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // private System.String ReplaceFallback(System.String oldValue, System.String newValue, System.Int32 testedCount)
    // Offset: 0x1B597A8
    ::Il2CppString* ReplaceFallback(::Il2CppString* oldValue, ::Il2CppString* newValue, int testedCount);
    // private System.String PadHelper(System.Int32 totalWidth, System.Char paddingChar, System.Boolean isRightPadded)
    // Offset: 0x1B56694
    ::Il2CppString* PadHelper(int totalWidth, ::Il2CppChar paddingChar, bool isRightPadded);
    // System.Boolean StartsWithOrdinalUnchecked(System.String value)
    // Offset: 0x1B598FC
    bool StartsWithOrdinalUnchecked(::Il2CppString* value);
    // System.Boolean IsAscii()
    // Offset: 0x1B528D0
    bool IsAscii();
    // static private System.String InternalIsInterned(System.String str)
    // Offset: 0x1B58430
    static ::Il2CppString* InternalIsInterned(::Il2CppString* str);
    // static System.Void CharCopy(System.Char* dest, System.Char* src, System.Int32 count)
    // Offset: 0x1B593D4
    static void CharCopy(::Il2CppChar* dest, ::Il2CppChar* src, int count);
    // static private System.Void memset(System.Byte* dest, System.Int32 val, System.Int32 len)
    // Offset: 0x1B59948
    static void memset(uint8_t* dest, int val, int len);
    // static private System.Void memcpy(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1B59A04
    static void memcpy(uint8_t* dest, uint8_t* src, int size);
    // static System.Void bzero(System.Byte* dest, System.Int32 len)
    // Offset: 0x1B59A0C
    static void bzero_(uint8_t* dest, int len);
    // static System.Void bzero_aligned_1(System.Byte* dest, System.Int32 len)
    // Offset: 0x1B59A18
    static void bzero_aligned_1(uint8_t* dest, int len);
    // static System.Void bzero_aligned_2(System.Byte* dest, System.Int32 len)
    // Offset: 0x1B59A20
    static void bzero_aligned_2(uint8_t* dest, int len);
    // static System.Void bzero_aligned_4(System.Byte* dest, System.Int32 len)
    // Offset: 0x1B59A28
    static void bzero_aligned_4(uint8_t* dest, int len);
    // static System.Void bzero_aligned_8(System.Byte* dest, System.Int32 len)
    // Offset: 0x1B59A30
    static void bzero_aligned_8(uint8_t* dest, int len);
    // static System.Void memcpy_aligned_1(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1B59A38
    static void memcpy_aligned_1(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_2(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1B59A44
    static void memcpy_aligned_2(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_4(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1B59A50
    static void memcpy_aligned_4(uint8_t* dest, uint8_t* src, int size);
    // static System.Void memcpy_aligned_8(System.Byte* dest, System.Byte* src, System.Int32 size)
    // Offset: 0x1B59A5C
    static void memcpy_aligned_8(uint8_t* dest, uint8_t* src, int size);
    // private System.String CreateString(System.SByte* value)
    // Offset: 0x1B59A68
    ::Il2CppString* CreateString(int8_t* value);
    // private System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B59DD0
    ::Il2CppString* CreateString(int8_t* value, int startIndex, int length);
    // private System.String CreateString(System.Char* value)
    // Offset: 0x1B59DD8
    ::Il2CppString* CreateString(::Il2CppChar* value);
    // private System.String CreateString(System.Char* value, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B59DDC
    ::Il2CppString* CreateString(::Il2CppChar* value, int startIndex, int length);
    // private System.String CreateString(System.Char[] val, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1B5038C
    ::Il2CppString* CreateString(::Array<::Il2CppChar>* val, int startIndex, int length);
    // private System.String CreateString(System.Char[] val)
    // Offset: 0x1B59DE0
    ::Il2CppString* CreateString(::Array<::Il2CppChar>* val);
    // private System.String CreateString(System.Char c, System.Int32 count)
    // Offset: 0x1B4ED40
    ::Il2CppString* CreateString(::Il2CppChar c, int count);
    // private System.String CreateString(System.SByte* value, System.Int32 startIndex, System.Int32 length, System.Text.Encoding enc)
    // Offset: 0x1B59AFC
    ::Il2CppString* CreateString(int8_t* value, int startIndex, int length, System::Text::Encoding* enc);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1B5253C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1B52F84
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1B56E40
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.String
  #pragma pack(pop)
  static check_size<sizeof(String), 20 + sizeof(::Il2CppChar)> __System_StringSizeCheck;
  static_assert(sizeof(String) == 0x16);
  // static public System.Boolean op_Equality(System.String a, System.String b)
  // Offset: 0x1B52C08
  bool operator ==(::Il2CppString* a, ::Il2CppString& b);
  // static public System.Boolean op_Inequality(System.String a, System.String b)
  // Offset: 0x1B52C0C
  bool operator !=(::Il2CppString* a, ::Il2CppString& b);
  // Writing MetadataGetter for method: ::Il2CppString::Join
  // Il2CppName: Join
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&::Il2CppString::Join)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Join
  // Il2CppName: Join
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: ::Il2CppString::Join
  // Il2CppName: Join
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&::Il2CppString::Join)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Join
  // Il2CppName: Join
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppString*>*, int, int)>(&::Il2CppString::Join)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareOrdinalIgnoreCaseHelper
  // Il2CppName: CompareOrdinalIgnoreCaseHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::CompareOrdinalIgnoreCaseHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareOrdinalIgnoreCaseHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::EqualsHelper
  // Il2CppName: EqualsHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::EqualsHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "EqualsHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareOrdinalHelper
  // Il2CppName: CompareOrdinalHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::CompareOrdinalHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareOrdinalHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*, System::StringComparison)>(&::Il2CppString::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*, System::StringComparison)>(&::Il2CppString::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::get_Chars
  // Il2CppName: get_Chars
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (::Il2CppString::*)(int)>(&::Il2CppString::get_Chars)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "get_Chars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CopyTo
  // Il2CppName: CopyTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(int, ::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::CopyTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToCharArray
  // Il2CppName: ToCharArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppChar>* (::Il2CppString::*)()>(&::Il2CppString::ToCharArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IsNullOrEmpty
  // Il2CppName: IsNullOrEmpty
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&::Il2CppString::IsNullOrEmpty)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IsNullOrEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IsNullOrWhiteSpace
  // Il2CppName: IsNullOrWhiteSpace
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&::Il2CppString::IsNullOrWhiteSpace)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IsNullOrWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::GetLegacyNonRandomizedHashCode
  // Il2CppName: GetLegacyNonRandomizedHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)()>(&::Il2CppString::GetLegacyNonRandomizedHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "GetLegacyNonRandomizedHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Split
  // Il2CppName: Split
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::Split)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Split
  // Il2CppName: Split
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<::Il2CppChar>*, int)>(&::Il2CppString::Split)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Split
  // Il2CppName: Split
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<::Il2CppChar>*, System::StringSplitOptions)>(&::Il2CppString::Split)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<System::StringSplitOptions>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::SplitInternal
  // Il2CppName: SplitInternal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<::Il2CppChar>*, int, System::StringSplitOptions)>(&::Il2CppString::SplitInternal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "SplitInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::StringSplitOptions>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Split
  // Il2CppName: Split
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<::Il2CppString*>*, System::StringSplitOptions)>(&::Il2CppString::Split)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::StringSplitOptions>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Split
  // Il2CppName: Split
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<::Il2CppString*>*, int, System::StringSplitOptions)>(&::Il2CppString::Split)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Split", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::StringSplitOptions>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::InternalSplitKeepEmptyEntries
  // Il2CppName: InternalSplitKeepEmptyEntries
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<int>*, ::Array<int>*, int, int)>(&::Il2CppString::InternalSplitKeepEmptyEntries)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "InternalSplitKeepEmptyEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::InternalSplitOmitEmptyEntries
  // Il2CppName: InternalSplitOmitEmptyEntries
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (::Il2CppString::*)(::Array<int>*, ::Array<int>*, int, int)>(&::Il2CppString::InternalSplitOmitEmptyEntries)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "InternalSplitOmitEmptyEntries", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::MakeSeparatorList
  // Il2CppName: MakeSeparatorList
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, ::Array<int>*&)>(&::Il2CppString::MakeSeparatorList)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "MakeSeparatorList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*&>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::MakeSeparatorList
  // Il2CppName: MakeSeparatorList
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppString*>*, ::Array<int>*&, ::Array<int>*&)>(&::Il2CppString::MakeSeparatorList)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "MakeSeparatorList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*&>(), ::il2cpp_utils::ExtractIndependentType<::Array<int>*&>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Substring
  // Il2CppName: Substring
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int)>(&::Il2CppString::Substring)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Substring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Substring
  // Il2CppName: Substring
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, int)>(&::Il2CppString::Substring)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Substring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::InternalSubString
  // Il2CppName: InternalSubString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, int)>(&::Il2CppString::InternalSubString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "InternalSubString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Trim
  // Il2CppName: Trim
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::Trim)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::TrimStart
  // Il2CppName: TrimStart
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::TrimStart)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "TrimStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::TrimEnd
  // Il2CppName: TrimEnd
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::TrimEnd)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "TrimEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Il2CppChar*)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Il2CppChar*)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Il2CppChar*, int, int)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Il2CppChar*, int, int)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(int8_t*, int, int, System::Text::Encoding*)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(int8_t*, int, int, System::Text::Encoding*)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateStringFromEncoding
  // Il2CppName: CreateStringFromEncoding
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(uint8_t*, int, System::Text::Encoding*)>(&::Il2CppString::CreateStringFromEncoding)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateStringFromEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Normalize
  // Il2CppName: Normalize
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(System::Text::NormalizationForm)>(&::Il2CppString::Normalize)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::NormalizationForm>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::FastAllocateString
  // Il2CppName: FastAllocateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&::Il2CppString::FastAllocateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "FastAllocateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::FillStringChecked
  // Il2CppName: FillStringChecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, int, ::Il2CppString*)>(&::Il2CppString::FillStringChecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "FillStringChecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::wstrcpy
  // Il2CppName: wstrcpy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, ::Il2CppChar*, int)>(&::Il2CppString::wstrcpy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "wstrcpy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CtorCharArray
  // Il2CppName: CtorCharArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::CtorCharArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CtorCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CtorCharArrayStartLength
  // Il2CppName: CtorCharArrayStartLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::CtorCharArrayStartLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CtorCharArrayStartLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::wcslen
  // Il2CppName: wcslen
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar*)>(&::Il2CppString::wcslen)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "wcslen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CtorCharPtr
  // Il2CppName: CtorCharPtr
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar*)>(&::Il2CppString::CtorCharPtr)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CtorCharPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CtorCharPtrStartLength
  // Il2CppName: CtorCharPtrStartLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar*, int, int)>(&::Il2CppString::CtorCharPtrStartLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CtorCharPtrStartLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Il2CppChar, int)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (::Il2CppString::*)(::Il2CppChar, int)>(&::Il2CppString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Compare
  // Il2CppName: Compare
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::Compare)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Compare
  // Il2CppName: Compare
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, bool)>(&::Il2CppString::Compare)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Compare
  // Il2CppName: Compare
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, System::StringComparison)>(&::Il2CppString::Compare)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Compare
  // Il2CppName: Compare
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, bool, System::Globalization::CultureInfo*)>(&::Il2CppString::Compare)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Compare
  // Il2CppName: Compare
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int, System::Globalization::CultureInfo*, System::Globalization::CompareOptions)>(&::Il2CppString::Compare)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CompareOptions>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Compare
  // Il2CppName: Compare
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int, System::StringComparison)>(&::Il2CppString::Compare)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareTo
  // Il2CppName: CompareTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppObject*)>(&::Il2CppString::CompareTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareTo
  // Il2CppName: CompareTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::CompareTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareOrdinal
  // Il2CppName: CompareOrdinal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::CompareOrdinal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareOrdinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareOrdinal
  // Il2CppName: CompareOrdinal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int)>(&::Il2CppString::CompareOrdinal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareOrdinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Contains
  // Il2CppName: Contains
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::Contains)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::EndsWith
  // Il2CppName: EndsWith
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::EndsWith)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::EndsWith
  // Il2CppName: EndsWith
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*, System::StringComparison)>(&::Il2CppString::EndsWith)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::EndsWith
  // Il2CppName: EndsWith
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppChar)>(&::Il2CppString::EndsWith)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "EndsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar, int)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOfAny
  // Il2CppName: IndexOfAny
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::IndexOfAny)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOfAny
  // Il2CppName: IndexOfAny
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, int)>(&::Il2CppString::IndexOfAny)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, int)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, System::StringComparison)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, int, System::StringComparison)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, int, int, System::StringComparison)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOf
  // Il2CppName: LastIndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar)>(&::Il2CppString::LastIndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOf
  // Il2CppName: LastIndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar, int)>(&::Il2CppString::LastIndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOfAny
  // Il2CppName: LastIndexOfAny
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::LastIndexOfAny)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOfAny
  // Il2CppName: LastIndexOfAny
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, int)>(&::Il2CppString::LastIndexOfAny)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOf
  // Il2CppName: LastIndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::LastIndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOf
  // Il2CppName: LastIndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, System::StringComparison)>(&::Il2CppString::LastIndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOf
  // Il2CppName: LastIndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, int, int, System::StringComparison)>(&::Il2CppString::LastIndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::PadLeft
  // Il2CppName: PadLeft
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, ::Il2CppChar)>(&::Il2CppString::PadLeft)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "PadLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::PadRight
  // Il2CppName: PadRight
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, ::Il2CppChar)>(&::Il2CppString::PadRight)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "PadRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::StartsWith
  // Il2CppName: StartsWith
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::StartsWith)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::StartsWith
  // Il2CppName: StartsWith
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*, System::StringComparison)>(&::Il2CppString::StartsWith)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::StringComparison>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToLower
  // Il2CppName: ToLower
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)()>(&::Il2CppString::ToLower)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToLower
  // Il2CppName: ToLower
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(System::Globalization::CultureInfo*)>(&::Il2CppString::ToLower)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToLowerInvariant
  // Il2CppName: ToLowerInvariant
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)()>(&::Il2CppString::ToLowerInvariant)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToLowerInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToUpper
  // Il2CppName: ToUpper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)()>(&::Il2CppString::ToUpper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToUpper
  // Il2CppName: ToUpper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(System::Globalization::CultureInfo*)>(&::Il2CppString::ToUpper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToUpperInvariant
  // Il2CppName: ToUpperInvariant
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)()>(&::Il2CppString::ToUpperInvariant)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToUpperInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Clone
  // Il2CppName: Clone
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (::Il2CppString::*)()>(&::Il2CppString::Clone)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IsBOMWhitespace
  // Il2CppName: IsBOMWhitespace
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppString::IsBOMWhitespace)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IsBOMWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Trim
  // Il2CppName: Trim
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)()>(&::Il2CppString::Trim)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Trim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::TrimHelper
  // Il2CppName: TrimHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int)>(&::Il2CppString::TrimHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "TrimHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::TrimHelper
  // Il2CppName: TrimHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*, int)>(&::Il2CppString::TrimHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "TrimHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateTrimmedString
  // Il2CppName: CreateTrimmedString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, int)>(&::Il2CppString::CreateTrimmedString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateTrimmedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Insert
  // Il2CppName: Insert
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, ::Il2CppString*)>(&::Il2CppString::Insert)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Replace
  // Il2CppName: Replace
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar, ::Il2CppChar)>(&::Il2CppString::Replace)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Replace
  // Il2CppName: Replace
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::Replace)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Remove
  // Il2CppName: Remove
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, int)>(&::Il2CppString::Remove)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Remove
  // Il2CppName: Remove
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int)>(&::Il2CppString::Remove)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppObject*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Format
  // Il2CppName: Format
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, ::Array<::Il2CppObject*>*)>(&::Il2CppString::Format)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::FormatHelper
  // Il2CppName: FormatHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::IFormatProvider*, ::Il2CppString*, System::ParamsArray)>(&::Il2CppString::FormatHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "FormatHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::ParamsArray>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Copy
  // Il2CppName: Copy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&::Il2CppString::Copy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*, ::Il2CppObject*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppObject*>*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ConcatArray
  // Il2CppName: ConcatArray
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppString*>*, int)>(&::Il2CppString::ConcatArray)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ConcatArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Concat
  // Il2CppName: Concat
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<::Il2CppString*>*)>(&::Il2CppString::Concat)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Concat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IsInterned
  // Il2CppName: IsInterned
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&::Il2CppString::IsInterned)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IsInterned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::GetTypeCode
  // Il2CppName: GetTypeCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TypeCode (::Il2CppString::*)()>(&::Il2CppString::GetTypeCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToBoolean
  // Il2CppName: System.IConvertible.ToBoolean
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToBoolean)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToChar
  // Il2CppName: System.IConvertible.ToChar
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToChar)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToSByte
  // Il2CppName: System.IConvertible.ToSByte
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToSByte)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToByte
  // Il2CppName: System.IConvertible.ToByte
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToByte)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToInt16
  // Il2CppName: System.IConvertible.ToInt16
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToInt16)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToUInt16
  // Il2CppName: System.IConvertible.ToUInt16
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToUInt16)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToInt32
  // Il2CppName: System.IConvertible.ToInt32
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToInt32)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToUInt32
  // Il2CppName: System.IConvertible.ToUInt32
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToUInt32)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToInt64
  // Il2CppName: System.IConvertible.ToInt64
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToInt64)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToUInt64
  // Il2CppName: System.IConvertible.ToUInt64
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToUInt64)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToSingle
  // Il2CppName: System.IConvertible.ToSingle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToSingle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToDouble
  // Il2CppName: System.IConvertible.ToDouble
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToDouble)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToDecimal
  // Il2CppName: System.IConvertible.ToDecimal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Decimal (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToDecimal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToDateTime
  // Il2CppName: System.IConvertible.ToDateTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (::Il2CppString::*)(System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToDateTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_IConvertible_ToType
  // Il2CppName: System.IConvertible.ToType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (::Il2CppString::*)(System::Type*, System::IFormatProvider*)>(&::Il2CppString::System_IConvertible_ToType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator
  // Il2CppName: System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<::Il2CppChar>* (::Il2CppString::*)()>(&::Il2CppString::System_Collections_Generic_IEnumerable$System_Char$_GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::System_Collections_IEnumerable_GetEnumerator
  // Il2CppName: System.Collections.IEnumerable.GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (::Il2CppString::*)()>(&::Il2CppString::System_Collections_IEnumerable_GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::get_Length
  // Il2CppName: get_Length
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)()>(&::Il2CppString::get_Length)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CompareOrdinalUnchecked
  // Il2CppName: CompareOrdinalUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, int, ::Il2CppString*, int, int)>(&::Il2CppString::CompareOrdinalUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CompareOrdinalUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOf
  // Il2CppName: IndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar, int, int)>(&::Il2CppString::IndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOfUnchecked
  // Il2CppName: IndexOfUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar, int, int)>(&::Il2CppString::IndexOfUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOfUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOfUnchecked
  // Il2CppName: IndexOfUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppString*, int, int)>(&::Il2CppString::IndexOfUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOfUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOfAny
  // Il2CppName: IndexOfAny
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::IndexOfAny)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IndexOfAnyUnchecked
  // Il2CppName: IndexOfAnyUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::IndexOfAnyUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IndexOfAnyUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOf
  // Il2CppName: LastIndexOf
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar, int, int)>(&::Il2CppString::LastIndexOf)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOfUnchecked
  // Il2CppName: LastIndexOfUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Il2CppChar, int, int)>(&::Il2CppString::LastIndexOfUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOfUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOfAny
  // Il2CppName: LastIndexOfAny
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::LastIndexOfAny)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOfAny", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::LastIndexOfAnyUnchecked
  // Il2CppName: LastIndexOfAnyUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::LastIndexOfAnyUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "LastIndexOfAnyUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::nativeCompareOrdinalEx
  // Il2CppName: nativeCompareOrdinalEx
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int, ::Il2CppString*, int, int)>(&::Il2CppString::nativeCompareOrdinalEx)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "nativeCompareOrdinalEx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ReplaceInternal
  // Il2CppName: ReplaceInternal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar, ::Il2CppChar)>(&::Il2CppString::ReplaceInternal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ReplaceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ReplaceInternal
  // Il2CppName: ReplaceInternal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::ReplaceInternal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ReplaceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ReplaceUnchecked
  // Il2CppName: ReplaceUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppString*, ::Il2CppString*)>(&::Il2CppString::ReplaceUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ReplaceUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ReplaceFallback
  // Il2CppName: ReplaceFallback
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppString*, ::Il2CppString*, int)>(&::Il2CppString::ReplaceFallback)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ReplaceFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::PadHelper
  // Il2CppName: PadHelper
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int, ::Il2CppChar, bool)>(&::Il2CppString::PadHelper)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "PadHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::StartsWithOrdinalUnchecked
  // Il2CppName: StartsWithOrdinalUnchecked
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppString*)>(&::Il2CppString::StartsWithOrdinalUnchecked)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "StartsWithOrdinalUnchecked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::IsAscii
  // Il2CppName: IsAscii
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)()>(&::Il2CppString::IsAscii)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "IsAscii", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::InternalIsInterned
  // Il2CppName: InternalIsInterned
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&::Il2CppString::InternalIsInterned)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "InternalIsInterned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CharCopy
  // Il2CppName: CharCopy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, ::Il2CppChar*, int)>(&::Il2CppString::CharCopy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CharCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::memset
  // Il2CppName: memset
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int, int)>(&::Il2CppString::memset)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "memset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::memcpy
  // Il2CppName: memcpy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&::Il2CppString::memcpy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "memcpy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::bzero_
  // Il2CppName: bzero
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&::Il2CppString::bzero_)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "bzero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::bzero_aligned_1
  // Il2CppName: bzero_aligned_1
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&::Il2CppString::bzero_aligned_1)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "bzero_aligned_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::bzero_aligned_2
  // Il2CppName: bzero_aligned_2
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&::Il2CppString::bzero_aligned_2)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "bzero_aligned_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::bzero_aligned_4
  // Il2CppName: bzero_aligned_4
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&::Il2CppString::bzero_aligned_4)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "bzero_aligned_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::bzero_aligned_8
  // Il2CppName: bzero_aligned_8
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, int)>(&::Il2CppString::bzero_aligned_8)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "bzero_aligned_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::memcpy_aligned_1
  // Il2CppName: memcpy_aligned_1
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&::Il2CppString::memcpy_aligned_1)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "memcpy_aligned_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::memcpy_aligned_2
  // Il2CppName: memcpy_aligned_2
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&::Il2CppString::memcpy_aligned_2)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "memcpy_aligned_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::memcpy_aligned_4
  // Il2CppName: memcpy_aligned_4
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&::Il2CppString::memcpy_aligned_4)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "memcpy_aligned_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::memcpy_aligned_8
  // Il2CppName: memcpy_aligned_8
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t*, uint8_t*, int)>(&::Il2CppString::memcpy_aligned_8)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "memcpy_aligned_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int8_t*)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int8_t*, int, int)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar*)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar*, int, int)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*, int, int)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Array<::Il2CppChar>*)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(::Il2CppChar, int)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::CreateString
  // Il2CppName: CreateString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)(int8_t*, int, int, System::Text::Encoding*)>(&::Il2CppString::CreateString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "CreateString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppString::*)(::Il2CppObject*)>(&::Il2CppString::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppString::*)()>(&::Il2CppString::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppString::*)()>(&::Il2CppString::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::operator ==
  // Il2CppName: op_Equality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString&)>(&::Il2CppString::operator ==)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString&>()});
    }
  };
  // Writing MetadataGetter for method: ::Il2CppString::operator !=
  // Il2CppName: op_Inequality
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString&)>(&::Il2CppString::operator !=)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(::Il2CppString*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString&>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::String*, "System", "String");
