// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.Diagnostics.TraceListener
#include "System/Diagnostics/TraceListener.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct CsString;
// Completed il2cpp-utils forward declares
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Autogenerated type: System.Diagnostics.DefaultTraceListener
  class DefaultTraceListener : public System::Diagnostics::TraceListener {
    public:
    // Get static field: static private readonly System.Boolean OnWin32
    static bool _get_OnWin32();
    // Set static field: static private readonly System.Boolean OnWin32
    static void _set_OnWin32(bool value);
    // Get static field: static private readonly System.String MonoTracePrefix
    static ::CsString* _get_MonoTracePrefix();
    // Set static field: static private readonly System.String MonoTracePrefix
    static void _set_MonoTracePrefix(::CsString* value);
    // Get static field: static private readonly System.String MonoTraceFile
    static ::CsString* _get_MonoTraceFile();
    // Set static field: static private readonly System.String MonoTraceFile
    static void _set_MonoTraceFile(::CsString* value);
    // private System.String logFileName
    // Offset: 0x30
    ::CsString* logFileName;
    // static private System.Void .cctor()
    // Offset: 0xF48088
    static void _cctor();
    // static private System.String GetPrefix(System.String var, System.String target)
    // Offset: 0xF481D8
    static ::CsString* GetPrefix(::CsString* var, ::CsString* target);
    // public System.String get_LogFileName()
    // Offset: 0xF48320
    ::CsString* get_LogFileName();
    // static private System.Void WriteWindowsDebugString(System.String message)
    // Offset: 0xF484F4
    static void WriteWindowsDebugString(::CsString* message);
    // private System.Void WriteDebugString(System.String message)
    // Offset: 0xF484F8
    void WriteDebugString(::CsString* message);
    // private System.Void WriteMonoTrace(System.String message)
    // Offset: 0xF485A4
    void WriteMonoTrace(::CsString* message);
    // private System.Void WritePrefix()
    // Offset: 0xF489B4
    void WritePrefix();
    // private System.Void WriteImpl(System.String message)
    // Offset: 0xF48A54
    void WriteImpl(::CsString* message);
    // private System.Void WriteLogFile(System.String message, System.String logFile)
    // Offset: 0xF48774
    void WriteLogFile(::CsString* message, ::CsString* logFile);
    // public System.Void .ctor()
    // Offset: 0xF48268
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    static DefaultTraceListener* New_ctor();
    // public override System.Void Fail(System.String message)
    // Offset: 0xF48328
    // Implemented from: System.Diagnostics.TraceListener
    // Base method: System.Void TraceListener::Fail(System.String message)
    void Fail(::CsString* message);
    // public override System.Void Fail(System.String message, System.String detailMessage)
    // Offset: 0xF48348
    // Implemented from: System.Diagnostics.TraceListener
    // Base method: System.Void TraceListener::Fail(System.String message, System.String detailMessage)
    void Fail(::CsString* message, ::CsString* detailMessage);
    // public override System.Void Write(System.String message)
    // Offset: 0xF48B34
    // Implemented from: System.Diagnostics.TraceListener
    // Base method: System.Void TraceListener::Write(System.String message)
    void Write(::CsString* message);
    // public override System.Void WriteLine(System.String message)
    // Offset: 0xF48B38
    // Implemented from: System.Diagnostics.TraceListener
    // Base method: System.Void TraceListener::WriteLine(System.String message)
    void WriteLine(::CsString* message);
  }; // System.Diagnostics.DefaultTraceListener
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::DefaultTraceListener*, "System.Diagnostics", "DefaultTraceListener");
#pragma pack(pop)
