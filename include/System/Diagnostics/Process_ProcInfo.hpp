// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Diagnostics.Process
#include "System/Diagnostics/Process.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Diagnostics::Process::ProcInfo, "System.Diagnostics", "Process/ProcInfo");
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Size: 0x31
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Process/System.Diagnostics.ProcInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct Process::ProcInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr process_handle
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr process_handle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 pid
    // Size: 0x4
    // Offset: 0x8
    int pid;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: pid and: envVariables
    char __padding1[0x4] = {};
    // public System.String[] envVariables
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> envVariables;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String UserName
    // Size: 0x8
    // Offset: 0x18
    ::StringW UserName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Domain
    // Size: 0x8
    // Offset: 0x20
    ::StringW Domain;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.IntPtr Password
    // Size: 0x8
    // Offset: 0x28
    ::System::IntPtr Password;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Boolean LoadUserProfile
    // Size: 0x1
    // Offset: 0x30
    bool LoadUserProfile;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ProcInfo
    constexpr ProcInfo(::System::IntPtr process_handle_ = {}, int pid_ = {}, ::ArrayW<::StringW> envVariables_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), ::StringW UserName_ = {}, ::StringW Domain_ = {}, ::System::IntPtr Password_ = {}, bool LoadUserProfile_ = {}) noexcept : process_handle{process_handle_}, pid{pid_}, envVariables{envVariables_}, UserName{UserName_}, Domain{Domain_}, Password{Password_}, LoadUserProfile{LoadUserProfile_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr process_handle
    ::System::IntPtr& dyn_process_handle();
    // Get instance field reference: public System.Int32 pid
    int& dyn_pid();
    // Get instance field reference: public System.String[] envVariables
    ::ArrayW<::StringW>& dyn_envVariables();
    // Get instance field reference: public System.String UserName
    ::StringW& dyn_UserName();
    // Get instance field reference: public System.String Domain
    ::StringW& dyn_Domain();
    // Get instance field reference: public System.IntPtr Password
    ::System::IntPtr& dyn_Password();
    // Get instance field reference: public System.Boolean LoadUserProfile
    bool& dyn_LoadUserProfile();
  }; // System.Diagnostics.Process/System.Diagnostics.ProcInfo
  #pragma pack(pop)
  static check_size<sizeof(Process::ProcInfo), 48 + sizeof(bool)> __System_Diagnostics_Process_ProcInfoSizeCheck;
  static_assert(sizeof(Process::ProcInfo) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
