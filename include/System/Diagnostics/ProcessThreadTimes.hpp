// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.ProcessThreadTimes
  class ProcessThreadTimes : public ::Il2CppObject {
    public:
    // System.Int64 create
    // Size: 0x8
    // Offset: 0x10
    int64_t create;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 exit
    // Size: 0x8
    // Offset: 0x18
    int64_t exit;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 kernel
    // Size: 0x8
    // Offset: 0x20
    int64_t kernel;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 user
    // Size: 0x8
    // Offset: 0x28
    int64_t user;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Creating value type constructor for type: ProcessThreadTimes
    ProcessThreadTimes(int64_t create_ = {}, int64_t exit_ = {}, int64_t kernel_ = {}, int64_t user_ = {}) noexcept : create{create_}, exit{exit_}, kernel{kernel_}, user{user_} {}
    // public System.TimeSpan get_TotalProcessorTime()
    // Offset: 0x186B36C
    System::TimeSpan get_TotalProcessorTime();
    // public System.Void .ctor()
    // Offset: 0x186B158
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProcessThreadTimes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::ProcessThreadTimes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProcessThreadTimes*, creationType>()));
    }
  }; // System.Diagnostics.ProcessThreadTimes
  #pragma pack(pop)
  static check_size<sizeof(ProcessThreadTimes), 40 + sizeof(int64_t)> __System_Diagnostics_ProcessThreadTimesSizeCheck;
  static_assert(sizeof(ProcessThreadTimes) == 0x30);
  // Writing MetadataGetter for method: ProcessThreadTimes::get_TotalProcessorTime
  // Il2CppName: get_TotalProcessorTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TimeSpan (ProcessThreadTimes::*)()>(&ProcessThreadTimes::get_TotalProcessorTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProcessThreadTimes*), "get_TotalProcessorTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ProcessThreadTimes::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProcessThreadTimes::*)()>(&ProcessThreadTimes::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProcessThreadTimes*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProcessThreadTimes::*)()>(&ProcessThreadTimes::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProcessThreadTimes*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::ProcessThreadTimes*, "System.Diagnostics", "ProcessThreadTimes");
