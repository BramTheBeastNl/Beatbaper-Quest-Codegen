// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: TraceListener
  class TraceListener;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.TraceListenerCollection
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: CA0338
  class TraceListenerCollection : public ::Il2CppObject/*, public System::Collections::IList*/ {
    public:
    // private System.Collections.ArrayList list
    // Size: 0x8
    // Offset: 0x10
    System::Collections::ArrayList* list;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // Creating value type constructor for type: TraceListenerCollection
    TraceListenerCollection(System::Collections::ArrayList* list_ = {}) noexcept : list{list_} {}
    // Creating interface conversion operator: operator System::Collections::IList
    operator System::Collections::IList() noexcept {
      return *reinterpret_cast<System::Collections::IList*>(this);
    }
    // Creating conversion operator: operator System::Collections::ArrayList*
    constexpr operator System::Collections::ArrayList*() const noexcept {
      return list;
    }
    // public System.Int32 get_Count()
    // Offset: 0x16CFD54
    int get_Count();
    // public System.Int32 Add(System.Diagnostics.TraceListener listener)
    // Offset: 0x16CF100
    int Add(System::Diagnostics::TraceListener* listener);
    // public System.Void Clear()
    // Offset: 0x16CFE80
    void Clear();
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x16CFB3C
    System::Collections::IEnumerator* GetEnumerator();
    // System.Void InitializeListener(System.Diagnostics.TraceListener listener)
    // Offset: 0x16CFD78
    void InitializeListener(System::Diagnostics::TraceListener* listener);
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0x16CFEE0
    void RemoveAt(int index);
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x16CFFD8
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x16CFFFC
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0x16D00F8
    bool System_Collections_IList_get_IsReadOnly();
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x16D0100
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x16D0294
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x16D02B8
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0x16D02DC
    void System_Collections_IList_Insert(int index, ::Il2CppObject* value);
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x16D0470
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x16D0568
    void System_Collections_ICollection_CopyTo(System::Array* array, int index);
    // System.Void .ctor()
    // Offset: 0x16CEFB0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraceListenerCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::TraceListenerCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraceListenerCollection*, creationType>()));
    }
  }; // System.Diagnostics.TraceListenerCollection
  #pragma pack(pop)
  static check_size<sizeof(TraceListenerCollection), 16 + sizeof(System::Collections::ArrayList*)> __System_Diagnostics_TraceListenerCollectionSizeCheck;
  static_assert(sizeof(TraceListenerCollection) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::TraceListenerCollection*, "System.Diagnostics", "TraceListenerCollection");
