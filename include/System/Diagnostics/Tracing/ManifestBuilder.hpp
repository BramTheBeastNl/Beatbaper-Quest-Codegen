// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Diagnostics.Tracing.EventManifestOptions
#include "System/Diagnostics/Tracing/EventManifestOptions.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventAttribute
  class EventAttribute;
  // Forward declaring type: EventLevel
  struct EventLevel;
  // Forward declaring type: EventTask
  struct EventTask;
  // Forward declaring type: EventOpcode
  struct EventOpcode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Guid
  struct Guid;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Resources
namespace System::Resources {
  // Forward declaring type: ResourceManager
  class ResourceManager;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Autogenerated type: System.Diagnostics.Tracing.ManifestBuilder
  class ManifestBuilder : public ::CsObject {
    public:
    // Nested type: System::Diagnostics::Tracing::ManifestBuilder::$$c__DisplayClass22_0
    class $$c__DisplayClass22_0;
    // Nested type: System::Diagnostics::Tracing::ManifestBuilder::$$c__DisplayClass22_1
    class $$c__DisplayClass22_1;
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.String> opcodeTab
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<int, ::CsString*>* opcodeTab;
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.String> taskTab
    // Offset: 0x18
    System::Collections::Generic::Dictionary_2<int, ::CsString*>* taskTab;
    // private System.Collections.Generic.Dictionary`2<System.UInt64,System.String> keywordTab
    // Offset: 0x20
    System::Collections::Generic::Dictionary_2<uint64_t, ::CsString*>* keywordTab;
    // private System.Collections.Generic.Dictionary`2<System.String,System.Type> mapsTab
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<::CsString*, System::Type*>* mapsTab;
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> stringTab
    // Offset: 0x30
    System::Collections::Generic::Dictionary_2<::CsString*, ::CsString*>* stringTab;
    // private System.Text.StringBuilder sb
    // Offset: 0x38
    System::Text::StringBuilder* sb;
    // private System.Text.StringBuilder events
    // Offset: 0x40
    System::Text::StringBuilder* events;
    // private System.Text.StringBuilder templates
    // Offset: 0x48
    System::Text::StringBuilder* templates;
    // private System.Resources.ResourceManager resources
    // Offset: 0x50
    System::Resources::ResourceManager* resources;
    // private System.Diagnostics.Tracing.EventManifestOptions flags
    // Offset: 0x58
    System::Diagnostics::Tracing::EventManifestOptions flags;
    // private System.Collections.Generic.IList`1<System.String> errors
    // Offset: 0x60
    System::Collections::Generic::IList_1<::CsString*>* errors;
    // private System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<System.Int32>> perEventByteArrayArgIndices
    // Offset: 0x68
    System::Collections::Generic::Dictionary_2<::CsString*, System::Collections::Generic::List_1<int>*>* perEventByteArrayArgIndices;
    // private System.String eventName
    // Offset: 0x70
    ::CsString* eventName;
    // private System.Int32 numParams
    // Offset: 0x78
    int numParams;
    // private System.Collections.Generic.List`1<System.Int32> byteArrArgIndices
    // Offset: 0x80
    System::Collections::Generic::List_1<int>* byteArrArgIndices;
    // public System.Void .ctor(System.String providerName, System.Guid providerGuid, System.String dllName, System.Resources.ResourceManager resources, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0xD949C0
    static ManifestBuilder* New_ctor(::CsString* providerName, System::Guid providerGuid, ::CsString* dllName, System::Resources::ResourceManager* resources, System::Diagnostics::Tracing::EventManifestOptions flags);
    // public System.Void AddOpcode(System.String name, System.Int32 value)
    // Offset: 0xD94D6C
    void AddOpcode(::CsString* name, int value);
    // public System.Void AddTask(System.String name, System.Int32 value)
    // Offset: 0xD951B8
    void AddTask(::CsString* name, int value);
    // public System.Void AddKeyword(System.String name, System.UInt64 value)
    // Offset: 0xD954AC
    void AddKeyword(::CsString* name, uint64_t value);
    // public System.Void StartEvent(System.String eventName, System.Diagnostics.Tracing.EventAttribute eventAttribute)
    // Offset: 0xD95964
    void StartEvent(::CsString* eventName, System::Diagnostics::Tracing::EventAttribute* eventAttribute);
    // public System.Void AddEventParameter(System.Type type, System.String name)
    // Offset: 0xD964B0
    void AddEventParameter(System::Type* type, ::CsString* name);
    // public System.Void EndEvent()
    // Offset: 0xD96E34
    void EndEvent();
    // public System.Byte[] CreateManifest()
    // Offset: 0xD97934
    ::Array<uint8_t>* CreateManifest();
    // public System.Collections.Generic.IList`1<System.String> get_Errors()
    // Offset: 0xD98DA4
    System::Collections::Generic::IList_1<::CsString*>* get_Errors();
    // public System.Void ManifestError(System.String msg, System.Boolean runtimeCritical)
    // Offset: 0xD950A0
    void ManifestError(::CsString* msg, bool runtimeCritical);
    // private System.String CreateManifestString()
    // Offset: 0xD97974
    ::CsString* CreateManifestString();
    // private System.Void WriteNameAndMessageAttribs(System.Text.StringBuilder stringBuilder, System.String elementName, System.String name)
    // Offset: 0xD98DAC
    void WriteNameAndMessageAttribs(System::Text::StringBuilder* stringBuilder, ::CsString* elementName, ::CsString* name);
    // private System.Void WriteMessageAttrib(System.Text.StringBuilder stringBuilder, System.String elementName, System.String name, System.String value)
    // Offset: 0xD95D0C
    void WriteMessageAttrib(System::Text::StringBuilder* stringBuilder, ::CsString* elementName, ::CsString* name, ::CsString* value);
    // System.String GetLocalizedMessage(System.String key, System.Globalization.CultureInfo ci, System.Boolean etwFormat)
    // Offset: 0xD99018
    ::CsString* GetLocalizedMessage(::CsString* key, System::Globalization::CultureInfo* ci, bool etwFormat);
    // static private System.Collections.Generic.List`1<System.Globalization.CultureInfo> GetSupportedCultures(System.Resources.ResourceManager resources)
    // Offset: 0xD98E64
    static System::Collections::Generic::List_1<System::Globalization::CultureInfo*>* GetSupportedCultures(System::Resources::ResourceManager* resources);
    // static private System.String GetLevelName(System.Diagnostics.Tracing.EventLevel level)
    // Offset: 0xD95C48
    static ::CsString* GetLevelName(System::Diagnostics::Tracing::EventLevel level);
    // private System.String GetTaskName(System.Diagnostics.Tracing.EventTask task, System.String eventName)
    // Offset: 0xD963B0
    ::CsString* GetTaskName(System::Diagnostics::Tracing::EventTask task, ::CsString* eventName);
    // private System.String GetOpcodeName(System.Diagnostics.Tracing.EventOpcode opcode, System.String eventName)
    // Offset: 0xD9619C
    ::CsString* GetOpcodeName(System::Diagnostics::Tracing::EventOpcode opcode, ::CsString* eventName);
    // private System.String GetKeywords(System.UInt64 keywords, System.String eventName)
    // Offset: 0xD95F1C
    ::CsString* GetKeywords(uint64_t keywords, ::CsString* eventName);
    // private System.String GetTypeName(System.Type type)
    // Offset: 0xD969E0
    ::CsString* GetTypeName(System::Type* type);
    // static private System.Void UpdateStringBuilder(System.Text.StringBuilder stringBuilder, System.String eventMessage, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xD99134
    static void UpdateStringBuilder(System::Text::StringBuilder*& stringBuilder, ::CsString* eventMessage, int startIndex, int count);
    // private System.String TranslateToManifestConvention(System.String eventMessage, System.String evtName)
    // Offset: 0xD97018
    ::CsString* TranslateToManifestConvention(::CsString* eventMessage, ::CsString* evtName);
    // private System.Int32 TranslateIndexToManifestConvention(System.Int32 idx, System.String evtName)
    // Offset: 0xD991F0
    int TranslateIndexToManifestConvention(int idx, ::CsString* evtName);
  }; // System.Diagnostics.Tracing.ManifestBuilder
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::ManifestBuilder*, "System.Diagnostics.Tracing", "ManifestBuilder");
#pragma pack(pop)
