// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Forward declaring type: ControlFlags
  struct ControlFlags;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Security::AccessControl::ControlFlags, "System.Security.AccessControl", "ControlFlags");
// Type namespace: System.Security.AccessControl
namespace System::Security::AccessControl {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.AccessControl.ControlFlags
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct ControlFlags/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ControlFlags
    constexpr ControlFlags(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Security.AccessControl.ControlFlags None
    static constexpr const int None = 0;
    // Get static field: static public System.Security.AccessControl.ControlFlags None
    static ::System::Security::AccessControl::ControlFlags _get_None();
    // Set static field: static public System.Security.AccessControl.ControlFlags None
    static void _set_None(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags OwnerDefaulted
    static constexpr const int OwnerDefaulted = 1;
    // Get static field: static public System.Security.AccessControl.ControlFlags OwnerDefaulted
    static ::System::Security::AccessControl::ControlFlags _get_OwnerDefaulted();
    // Set static field: static public System.Security.AccessControl.ControlFlags OwnerDefaulted
    static void _set_OwnerDefaulted(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags GroupDefaulted
    static constexpr const int GroupDefaulted = 2;
    // Get static field: static public System.Security.AccessControl.ControlFlags GroupDefaulted
    static ::System::Security::AccessControl::ControlFlags _get_GroupDefaulted();
    // Set static field: static public System.Security.AccessControl.ControlFlags GroupDefaulted
    static void _set_GroupDefaulted(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags DiscretionaryAclPresent
    static constexpr const int DiscretionaryAclPresent = 4;
    // Get static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclPresent
    static ::System::Security::AccessControl::ControlFlags _get_DiscretionaryAclPresent();
    // Set static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclPresent
    static void _set_DiscretionaryAclPresent(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags DiscretionaryAclDefaulted
    static constexpr const int DiscretionaryAclDefaulted = 8;
    // Get static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclDefaulted
    static ::System::Security::AccessControl::ControlFlags _get_DiscretionaryAclDefaulted();
    // Set static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclDefaulted
    static void _set_DiscretionaryAclDefaulted(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags SystemAclPresent
    static constexpr const int SystemAclPresent = 16;
    // Get static field: static public System.Security.AccessControl.ControlFlags SystemAclPresent
    static ::System::Security::AccessControl::ControlFlags _get_SystemAclPresent();
    // Set static field: static public System.Security.AccessControl.ControlFlags SystemAclPresent
    static void _set_SystemAclPresent(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags SystemAclDefaulted
    static constexpr const int SystemAclDefaulted = 32;
    // Get static field: static public System.Security.AccessControl.ControlFlags SystemAclDefaulted
    static ::System::Security::AccessControl::ControlFlags _get_SystemAclDefaulted();
    // Set static field: static public System.Security.AccessControl.ControlFlags SystemAclDefaulted
    static void _set_SystemAclDefaulted(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags DiscretionaryAclUntrusted
    static constexpr const int DiscretionaryAclUntrusted = 64;
    // Get static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclUntrusted
    static ::System::Security::AccessControl::ControlFlags _get_DiscretionaryAclUntrusted();
    // Set static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclUntrusted
    static void _set_DiscretionaryAclUntrusted(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags ServerSecurity
    static constexpr const int ServerSecurity = 128;
    // Get static field: static public System.Security.AccessControl.ControlFlags ServerSecurity
    static ::System::Security::AccessControl::ControlFlags _get_ServerSecurity();
    // Set static field: static public System.Security.AccessControl.ControlFlags ServerSecurity
    static void _set_ServerSecurity(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInheritRequired
    static constexpr const int DiscretionaryAclAutoInheritRequired = 256;
    // Get static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInheritRequired
    static ::System::Security::AccessControl::ControlFlags _get_DiscretionaryAclAutoInheritRequired();
    // Set static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInheritRequired
    static void _set_DiscretionaryAclAutoInheritRequired(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags SystemAclAutoInheritRequired
    static constexpr const int SystemAclAutoInheritRequired = 512;
    // Get static field: static public System.Security.AccessControl.ControlFlags SystemAclAutoInheritRequired
    static ::System::Security::AccessControl::ControlFlags _get_SystemAclAutoInheritRequired();
    // Set static field: static public System.Security.AccessControl.ControlFlags SystemAclAutoInheritRequired
    static void _set_SystemAclAutoInheritRequired(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInherited
    static constexpr const int DiscretionaryAclAutoInherited = 1024;
    // Get static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInherited
    static ::System::Security::AccessControl::ControlFlags _get_DiscretionaryAclAutoInherited();
    // Set static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclAutoInherited
    static void _set_DiscretionaryAclAutoInherited(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags SystemAclAutoInherited
    static constexpr const int SystemAclAutoInherited = 2048;
    // Get static field: static public System.Security.AccessControl.ControlFlags SystemAclAutoInherited
    static ::System::Security::AccessControl::ControlFlags _get_SystemAclAutoInherited();
    // Set static field: static public System.Security.AccessControl.ControlFlags SystemAclAutoInherited
    static void _set_SystemAclAutoInherited(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags DiscretionaryAclProtected
    static constexpr const int DiscretionaryAclProtected = 4096;
    // Get static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclProtected
    static ::System::Security::AccessControl::ControlFlags _get_DiscretionaryAclProtected();
    // Set static field: static public System.Security.AccessControl.ControlFlags DiscretionaryAclProtected
    static void _set_DiscretionaryAclProtected(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags SystemAclProtected
    static constexpr const int SystemAclProtected = 8192;
    // Get static field: static public System.Security.AccessControl.ControlFlags SystemAclProtected
    static ::System::Security::AccessControl::ControlFlags _get_SystemAclProtected();
    // Set static field: static public System.Security.AccessControl.ControlFlags SystemAclProtected
    static void _set_SystemAclProtected(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags RMControlValid
    static constexpr const int RMControlValid = 16384;
    // Get static field: static public System.Security.AccessControl.ControlFlags RMControlValid
    static ::System::Security::AccessControl::ControlFlags _get_RMControlValid();
    // Set static field: static public System.Security.AccessControl.ControlFlags RMControlValid
    static void _set_RMControlValid(::System::Security::AccessControl::ControlFlags value);
    // static field const value: static public System.Security.AccessControl.ControlFlags SelfRelative
    static constexpr const int SelfRelative = 32768;
    // Get static field: static public System.Security.AccessControl.ControlFlags SelfRelative
    static ::System::Security::AccessControl::ControlFlags _get_SelfRelative();
    // Set static field: static public System.Security.AccessControl.ControlFlags SelfRelative
    static void _set_SelfRelative(::System::Security::AccessControl::ControlFlags value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // System.Security.AccessControl.ControlFlags
  #pragma pack(pop)
  static check_size<sizeof(ControlFlags), 0 + sizeof(int)> __System_Security_AccessControl_ControlFlagsSizeCheck;
  static_assert(sizeof(ControlFlags) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
