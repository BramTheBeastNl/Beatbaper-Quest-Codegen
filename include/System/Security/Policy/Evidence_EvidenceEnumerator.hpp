// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Policy.Evidence
#include "System/Security/Policy/Evidence.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Security.Policy
namespace System::Security::Policy {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Policy.Evidence/EvidenceEnumerator
  class Evidence::EvidenceEnumerator : public ::Il2CppObject/*, public System::Collections::IEnumerator*/ {
    public:
    // private System.Collections.IEnumerator currentEnum
    // Size: 0x8
    // Offset: 0x10
    System::Collections::IEnumerator* currentEnum;
    // Field size check
    static_assert(sizeof(System::Collections::IEnumerator*) == 0x8);
    // private System.Collections.IEnumerator hostEnum
    // Size: 0x8
    // Offset: 0x18
    System::Collections::IEnumerator* hostEnum;
    // Field size check
    static_assert(sizeof(System::Collections::IEnumerator*) == 0x8);
    // private System.Collections.IEnumerator assemblyEnum
    // Size: 0x8
    // Offset: 0x20
    System::Collections::IEnumerator* assemblyEnum;
    // Field size check
    static_assert(sizeof(System::Collections::IEnumerator*) == 0x8);
    // Creating value type constructor for type: EvidenceEnumerator
    EvidenceEnumerator(System::Collections::IEnumerator* currentEnum_ = {}, System::Collections::IEnumerator* hostEnum_ = {}, System::Collections::IEnumerator* assemblyEnum_ = {}) noexcept : currentEnum{currentEnum_}, hostEnum{hostEnum_}, assemblyEnum{assemblyEnum_} {}
    // Creating interface conversion operator: operator System::Collections::IEnumerator
    operator System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerator*>(this);
    }
    // public System.Void .ctor(System.Collections.IEnumerator hostenum, System.Collections.IEnumerator assemblyenum)
    // Offset: 0x1AF2890
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Evidence::EvidenceEnumerator* New_ctor(System::Collections::IEnumerator* hostenum, System::Collections::IEnumerator* assemblyenum) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Policy::Evidence::EvidenceEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Evidence::EvidenceEnumerator*, creationType>(hostenum, assemblyenum)));
    }
    // public System.Boolean MoveNext()
    // Offset: 0x1AF28CC
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x1AF2A18
    void Reset();
    // public System.Object get_Current()
    // Offset: 0x1AF2B58
    ::Il2CppObject* get_Current();
  }; // System.Security.Policy.Evidence/EvidenceEnumerator
  #pragma pack(pop)
  static check_size<sizeof(Evidence::EvidenceEnumerator), 32 + sizeof(System::Collections::IEnumerator*)> __System_Security_Policy_Evidence_EvidenceEnumeratorSizeCheck;
  static_assert(sizeof(Evidence::EvidenceEnumerator) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Policy::Evidence::EvidenceEnumerator*, "System.Security.Policy", "Evidence/EvidenceEnumerator");
// Writing MetadataGetter for method: Evidence::EvidenceEnumerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Evidence::EvidenceEnumerator::*)(System::Collections::IEnumerator*, System::Collections::IEnumerator*)>(&Evidence::EvidenceEnumerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Evidence::EvidenceEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Evidence::EvidenceEnumerator::*)(System::Collections::IEnumerator*, System::Collections::IEnumerator*)>(&Evidence::EvidenceEnumerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Evidence::EvidenceEnumerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: Evidence::EvidenceEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Evidence::EvidenceEnumerator::*)()>(&Evidence::EvidenceEnumerator::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Evidence::EvidenceEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Evidence::EvidenceEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Evidence::EvidenceEnumerator::*)()>(&Evidence::EvidenceEnumerator::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Evidence::EvidenceEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Evidence::EvidenceEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Evidence::EvidenceEnumerator::*)()>(&Evidence::EvidenceEnumerator::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Evidence::EvidenceEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
