// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.KeySizes
  // [ComVisibleAttribute] Offset: D7D748
  class KeySizes : public ::Il2CppObject {
    public:
    // private System.Int32 m_minSize
    // Size: 0x4
    // Offset: 0x10
    int m_minSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_maxSize
    // Size: 0x4
    // Offset: 0x14
    int m_maxSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_skipSize
    // Size: 0x4
    // Offset: 0x18
    int m_skipSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: KeySizes
    KeySizes(int m_minSize_ = {}, int m_maxSize_ = {}, int m_skipSize_ = {}) noexcept : m_minSize{m_minSize_}, m_maxSize{m_maxSize_}, m_skipSize{m_skipSize_} {}
    // public System.Int32 get_MinSize()
    // Offset: 0x196B618
    int get_MinSize();
    // public System.Int32 get_MaxSize()
    // Offset: 0x196B620
    int get_MaxSize();
    // public System.Int32 get_SkipSize()
    // Offset: 0x196B628
    int get_SkipSize();
    // public System.Void .ctor(System.Int32 minSize, System.Int32 maxSize, System.Int32 skipSize)
    // Offset: 0x1960B74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeySizes* New_ctor(int minSize, int maxSize, int skipSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::KeySizes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeySizes*, creationType>(minSize, maxSize, skipSize)));
    }
    // System.Boolean IsLegal(System.Int32 keySize)
    // Offset: 0x196B630
    bool IsLegal(int keySize);
    // static System.Boolean IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, System.Int32 size)
    // Offset: 0x196B67C
    static bool IsLegalKeySize(::Array<System::Security::Cryptography::KeySizes*>* legalKeys, int size);
  }; // System.Security.Cryptography.KeySizes
  #pragma pack(pop)
  static check_size<sizeof(KeySizes), 24 + sizeof(int)> __System_Security_Cryptography_KeySizesSizeCheck;
  static_assert(sizeof(KeySizes) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::KeySizes*, "System.Security.Cryptography", "KeySizes");
// Writing MetadataGetter for method: KeySizes::get_MinSize
// Il2CppName: get_MinSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeySizes::*)()>(&KeySizes::get_MinSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), "get_MinSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KeySizes::get_MaxSize
// Il2CppName: get_MaxSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeySizes::*)()>(&KeySizes::get_MaxSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), "get_MaxSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KeySizes::get_SkipSize
// Il2CppName: get_SkipSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KeySizes::*)()>(&KeySizes::get_SkipSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), "get_SkipSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KeySizes::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeySizes::*)(int, int, int)>(&KeySizes::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KeySizes::*)(int, int, int)>(&KeySizes::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: KeySizes::IsLegal
// Il2CppName: IsLegal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KeySizes::*)(int)>(&KeySizes::IsLegal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), "IsLegal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: KeySizes::IsLegalKeySize
// Il2CppName: IsLegalKeySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<System::Security::Cryptography::KeySizes*>*, int)>(&KeySizes::IsLegalKeySize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KeySizes*), "IsLegalKeySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Security::Cryptography::KeySizes*>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
