// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RNGCryptoServiceProvider
  class RNGCryptoServiceProvider;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Autogenerated type: System.Security.Cryptography.Utils
  class Utils : public ::Il2CppObject {
    public:
    // Get static field: static private System.Security.Cryptography.RNGCryptoServiceProvider _rng
    static System::Security::Cryptography::RNGCryptoServiceProvider* _get__rng();
    // Set static field: static private System.Security.Cryptography.RNGCryptoServiceProvider _rng
    static void _set__rng(System::Security::Cryptography::RNGCryptoServiceProvider* value);
    // static System.Security.Cryptography.RNGCryptoServiceProvider get_StaticRandomNumberGenerator()
    // Offset: 0x1433044
    static System::Security::Cryptography::RNGCryptoServiceProvider* get_StaticRandomNumberGenerator();
    // static System.Byte[] GenerateRandom(System.Int32 keySize)
    // Offset: 0x143336C
    static ::Array<uint8_t>* GenerateRandom(int keySize);
    // static System.Boolean HasAlgorithm(System.Int32 dwCalg, System.Int32 dwKeySize)
    // Offset: 0x14329EC
    static bool HasAlgorithm(int dwCalg, int dwKeySize);
    // static System.String DiscardWhiteSpaces(System.String inputBuffer)
    // Offset: 0x14333E4
    static ::Il2CppString* DiscardWhiteSpaces(::Il2CppString* inputBuffer);
    // static System.String DiscardWhiteSpaces(System.String inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    // Offset: 0x1433400
    static ::Il2CppString* DiscardWhiteSpaces(::Il2CppString* inputBuffer, int inputOffset, int inputCount);
    // static System.Int32 ConvertByteArrayToInt(System.Byte[] input)
    // Offset: 0x1433634
    static int ConvertByteArrayToInt(::Array<uint8_t>* input);
    // static System.Byte[] ConvertIntToByteArray(System.Int32 dwInput)
    // Offset: 0x14336A0
    static ::Array<uint8_t>* ConvertIntToByteArray(int dwInput);
    // static System.Byte[] FixupKeyParity(System.Byte[] key)
    // Offset: 0x14325BC
    static ::Array<uint8_t>* FixupKeyParity(::Array<uint8_t>* key);
    // static System.Void DWORDFromLittleEndian(System.UInt32* x, System.Int32 digits, System.Byte* block)
    // Offset: 0x14337D0
    static void DWORDFromLittleEndian(uint* x, int digits, uint8_t* block);
    // static System.Void DWORDToLittleEndian(System.Byte[] block, System.UInt32[] x, System.Int32 digits)
    // Offset: 0x143381C
    static void DWORDToLittleEndian(::Array<uint8_t>* block, ::Array<uint>* x, int digits);
    // static System.Void DWORDFromBigEndian(System.UInt32* x, System.Int32 digits, System.Byte* block)
    // Offset: 0x142DB04
    static void DWORDFromBigEndian(uint* x, int digits, uint8_t* block);
    // static System.Void DWORDToBigEndian(System.Byte[] block, System.UInt32[] x, System.Int32 digits)
    // Offset: 0x142DA04
    static void DWORDToBigEndian(::Array<uint8_t>* block, ::Array<uint>* x, int digits);
    // static System.Void QuadWordFromBigEndian(System.UInt64* x, System.Int32 digits, System.Byte* block)
    // Offset: 0x142FA48
    static void QuadWordFromBigEndian(uint64_t* x, int digits, uint8_t* block);
    // static System.Void QuadWordToBigEndian(System.Byte[] block, System.UInt64[] x, System.Int32 digits)
    // Offset: 0x142F884
    static void QuadWordToBigEndian(::Array<uint8_t>* block, ::Array<uint64_t>* x, int digits);
    // static System.Boolean _ProduceLegacyHmacValues()
    // Offset: 0x143391C
    static bool _ProduceLegacyHmacValues();
  }; // System.Security.Cryptography.Utils
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::Utils*, "System.Security.Cryptography", "Utils");
#pragma pack(pop)
