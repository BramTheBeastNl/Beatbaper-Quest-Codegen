// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate2
  class X509Certificate2;
  // Forward declaring type: X509FindType
  struct X509FindType;
  // Forward declaring type: X509Certificate2Enumerator
  class X509Certificate2Enumerator;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
  // [DefaultMemberAttribute] Offset: D87D4C
  class X509Certificate2Collection : public System::Security::Cryptography::X509Certificates::X509CertificateCollection {
    public:
    // Creating value type constructor for type: X509Certificate2Collection
    X509Certificate2Collection() noexcept {}
    // Get static field: static private System.String[] newline_split
    static ::Array<::Il2CppString*>* _get_newline_split();
    // Set static field: static private System.String[] newline_split
    static void _set_newline_split(::Array<::Il2CppString*>* value);
    // public System.Void .ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates)
    // Offset: 0x1846D8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Certificate2Collection* New_ctor(System::Security::Cryptography::X509Certificates::X509Certificate2Collection* certificates) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Certificate2Collection*, creationType>(certificates)));
    }
    // public System.Security.Cryptography.X509Certificates.X509Certificate2 get_Item(System.Int32 index)
    // Offset: 0x1846E6C
    System::Security::Cryptography::X509Certificates::X509Certificate2* get_Item(int index);
    // public System.Int32 Add(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1846FA0
    int Add(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // public System.Void AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection certificates)
    // Offset: 0x1846DBC
    void AddRange(System::Security::Cryptography::X509Certificates::X509Certificate2Collection* certificates);
    // public System.Boolean Contains(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1847050
    bool Contains(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Find(System.Security.Cryptography.X509Certificates.X509FindType findType, System.Object findValue, System.Boolean validOnly)
    // Offset: 0x184737C
    System::Security::Cryptography::X509Certificates::X509Certificate2Collection* Find(System::Security::Cryptography::X509Certificates::X509FindType findType, ::Il2CppObject* findValue, bool validOnly);
    // public System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator GetEnumerator()
    // Offset: 0x1848784
    System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator* GetEnumerator();
    // static private System.Void .cctor()
    // Offset: 0x18488B0
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1846D7C
    // Implemented from: System.Security.Cryptography.X509Certificates.X509CertificateCollection
    // Base method: System.Void X509CertificateCollection::.ctor()
    // Base method: System.Void CollectionBase::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Certificate2Collection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Certificate2Collection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Certificate2Collection*, creationType>()));
    }
  }; // System.Security.Cryptography.X509Certificates.X509Certificate2Collection
  #pragma pack(pop)
  // Writing MetadataGetter for method: X509Certificate2Collection::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::get_Item
  // Il2CppName: get_Item
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2* (X509Certificate2Collection::*)(int)>(&X509Certificate2Collection::get_Item)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::Add
  // Il2CppName: Add
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Certificate2Collection::Add)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::AddRange
  // Il2CppName: AddRange
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*)>(&X509Certificate2Collection::AddRange)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "AddRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2Collection*>()});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::Contains
  // Il2CppName: Contains
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509Certificate2*)>(&X509Certificate2Collection::Contains)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509Certificate2*>()});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::Find
  // Il2CppName: Find
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Collection* (X509Certificate2Collection::*)(System::Security::Cryptography::X509Certificates::X509FindType, ::Il2CppObject*, bool)>(&X509Certificate2Collection::Find)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Security::Cryptography::X509Certificates::X509FindType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::GetEnumerator
  // Il2CppName: GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Security::Cryptography::X509Certificates::X509Certificate2Enumerator* (X509Certificate2Collection::*)()>(&X509Certificate2Collection::GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&X509Certificate2Collection::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: X509Certificate2Collection::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)()>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (X509Certificate2Collection::*)()>(&X509Certificate2Collection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(X509Certificate2Collection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*, "System.Security.Cryptography.X509Certificates", "X509Certificate2Collection");
