// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Collections.IStructuralEquatable
#include "System/Collections/IStructuralEquatable.hpp"
// Including type: System.Collections.IStructuralComparable
#include "System/Collections/IStructuralComparable.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
  // Forward declaring type: IComparer
  class IComparer;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: System
namespace System {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.ValueTuple
  struct ValueTuple/*, public System::ValueType, public System::IEquatable_1<System::ValueTuple>, public System::Collections::IStructuralEquatable, public System::Collections::IStructuralComparable, public System::IComparable, public System::IComparable_1<System::ValueTuple>*/ {
    public:
    // Creating value type constructor for type: ValueTuple
    constexpr ValueTuple() noexcept {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<System::ValueTuple>
    operator System::IEquatable_1<System::ValueTuple>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<System::ValueTuple>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IStructuralEquatable
    operator System::Collections::IStructuralEquatable() noexcept {
      return *reinterpret_cast<System::Collections::IStructuralEquatable*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IStructuralComparable
    operator System::Collections::IStructuralComparable() noexcept {
      return *reinterpret_cast<System::Collections::IStructuralComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<System::ValueTuple>
    operator System::IComparable_1<System::ValueTuple>() noexcept {
      return *reinterpret_cast<System::IComparable_1<System::ValueTuple>*>(this);
    }
    // public System.Boolean Equals(System.ValueTuple other)
    // Offset: 0xF19E68
    bool Equals(System::ValueTuple other);
    // private System.Boolean System.Collections.IStructuralEquatable.Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    // Offset: 0xF19E70
    bool System_Collections_IStructuralEquatable_Equals(::Il2CppObject* other, System::Collections::IEqualityComparer* comparer);
    // private System.Int32 System.IComparable.CompareTo(System.Object other)
    // Offset: 0xF19ED4
    int System_IComparable_CompareTo(::Il2CppObject* other);
    // public System.Int32 CompareTo(System.ValueTuple other)
    // Offset: 0xF19EDC
    int CompareTo(System::ValueTuple other);
    // private System.Int32 System.Collections.IStructuralComparable.CompareTo(System.Object other, System.Collections.IComparer comparer)
    // Offset: 0xF19EE4
    int System_Collections_IStructuralComparable_CompareTo(::Il2CppObject* other, System::Collections::IComparer* comparer);
    // private System.Int32 System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer)
    // Offset: 0xF19EF4
    int System_Collections_IStructuralEquatable_GetHashCode(System::Collections::IEqualityComparer* comparer);
    // static System.Int32 CombineHashCodes(System.Int32 h1, System.Int32 h2)
    // Offset: 0x2331BA0
    static int CombineHashCodes(int h1, int h2);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xF19E04
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF19EEC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xF19EFC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.ValueTuple
  #pragma pack(pop)
  // Writing MetadataGetter for method: ValueTuple::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ValueTuple::*)(System::ValueTuple)>(&ValueTuple::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ValueTuple>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::System_Collections_IStructuralEquatable_Equals
  // Il2CppName: System.Collections.IStructuralEquatable.Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ValueTuple::*)(::Il2CppObject*, System::Collections::IEqualityComparer*)>(&ValueTuple::System_Collections_IStructuralEquatable_Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "System.Collections.IStructuralEquatable.Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEqualityComparer*>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::System_IComparable_CompareTo
  // Il2CppName: System.IComparable.CompareTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ValueTuple::*)(::Il2CppObject*)>(&ValueTuple::System_IComparable_CompareTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "System.IComparable.CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::CompareTo
  // Il2CppName: CompareTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ValueTuple::*)(System::ValueTuple)>(&ValueTuple::CompareTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::ValueTuple>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::System_Collections_IStructuralComparable_CompareTo
  // Il2CppName: System.Collections.IStructuralComparable.CompareTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ValueTuple::*)(::Il2CppObject*, System::Collections::IComparer*)>(&ValueTuple::System_Collections_IStructuralComparable_CompareTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "System.Collections.IStructuralComparable.CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IComparer*>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::System_Collections_IStructuralEquatable_GetHashCode
  // Il2CppName: System.Collections.IStructuralEquatable.GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ValueTuple::*)(System::Collections::IEqualityComparer*)>(&ValueTuple::System_Collections_IStructuralEquatable_GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "System.Collections.IStructuralEquatable.GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEqualityComparer*>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::CombineHashCodes
  // Il2CppName: CombineHashCodes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&ValueTuple::CombineHashCodes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "CombineHashCodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::Equals
  // Il2CppName: Equals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ValueTuple::*)(::Il2CppObject*)>(&ValueTuple::Equals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::GetHashCode
  // Il2CppName: GetHashCode
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ValueTuple::*)()>(&ValueTuple::GetHashCode)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ValueTuple::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ValueTuple::*)()>(&ValueTuple::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValueTuple), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::ValueTuple, "System", "ValueTuple");
