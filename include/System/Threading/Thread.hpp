// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
#include "System/Runtime/ConstrainedExecution/CriticalFinalizerObject.hpp"
// Including type: System.Runtime.InteropServices._Thread
#include "System/Runtime/InteropServices/_Thread.hpp"
// Including type: System.Threading.ExecutionContext
#include "System/Threading/ExecutionContext.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: InternalThread
  class InternalThread;
  // Forward declaring type: AsyncLocal`1<T>
  template<typename T>
  class AsyncLocal_1;
  // Forward declaring type: ThreadStart
  class ThreadStart;
  // Forward declaring type: ParameterizedThreadStart
  class ParameterizedThreadStart;
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
  // Forward declaring type: ThreadState
  struct ThreadState;
}
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: IPrincipal
  class IPrincipal;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: MulticastDelegate
  class MulticastDelegate;
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: LocalDataStoreMgr
  class LocalDataStoreMgr;
  // Forward declaring type: LocalDataStoreHolder
  class LocalDataStoreHolder;
  // Forward declaring type: AppDomain
  class AppDomain;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Runtime::Remoting::Contexts
namespace System::Runtime::Remoting::Contexts {
  // Forward declaring type: Context
  class Context;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Autogenerated type: System.Threading.Thread
  class Thread : public System::Runtime::ConstrainedExecution::CriticalFinalizerObject, public System::Runtime::InteropServices::_Thread {
    public:
    // Get static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
    static System::LocalDataStoreMgr* _get_s_LocalDataStoreMgr();
    // Set static field: static private System.LocalDataStoreMgr s_LocalDataStoreMgr
    static void _set_s_LocalDataStoreMgr(System::LocalDataStoreMgr* value);
    // Get static field: static private System.LocalDataStoreHolder s_LocalDataStore
    static System::LocalDataStoreHolder* _get_s_LocalDataStore();
    // Set static field: static private System.LocalDataStoreHolder s_LocalDataStore
    static void _set_s_LocalDataStore(System::LocalDataStoreHolder* value);
    // Get static field: static System.Globalization.CultureInfo m_CurrentCulture
    static System::Globalization::CultureInfo* _get_m_CurrentCulture();
    // Set static field: static System.Globalization.CultureInfo m_CurrentCulture
    static void _set_m_CurrentCulture(System::Globalization::CultureInfo* value);
    // Get static field: static System.Globalization.CultureInfo m_CurrentUICulture
    static System::Globalization::CultureInfo* _get_m_CurrentUICulture();
    // Set static field: static System.Globalization.CultureInfo m_CurrentUICulture
    static void _set_m_CurrentUICulture(System::Globalization::CultureInfo* value);
    // Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
    static System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* _get_s_asyncLocalCurrentCulture();
    // Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture
    static void _set_s_asyncLocalCurrentCulture(System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* value);
    // Get static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
    static System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* _get_s_asyncLocalCurrentUICulture();
    // Set static field: static private System.Threading.AsyncLocal`1<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture
    static void _set_s_asyncLocalCurrentUICulture(System::Threading::AsyncLocal_1<System::Globalization::CultureInfo*>* value);
    // private System.Threading.InternalThread internal_thread
    // Offset: 0x10
    System::Threading::InternalThread* internal_thread;
    // private System.Object m_ThreadStartArg
    // Offset: 0x18
    ::CsObject* m_ThreadStartArg;
    // private System.Object pending_exception
    // Offset: 0x20
    ::CsObject* pending_exception;
    // private System.Security.Principal.IPrincipal principal
    // Offset: 0x28
    System::Security::Principal::IPrincipal* principal;
    // private System.Int32 principal_version
    // Offset: 0x30
    int principal_version;
    // Get static field: static private System.Threading.Thread current_thread
    static System::Threading::Thread* _get_current_thread();
    // Set static field: static private System.Threading.Thread current_thread
    static void _set_current_thread(System::Threading::Thread* value);
    // private System.MulticastDelegate m_Delegate
    // Offset: 0x38
    System::MulticastDelegate* m_Delegate;
    // private System.Threading.ExecutionContext m_ExecutionContext
    // Offset: 0x40
    System::Threading::ExecutionContext* m_ExecutionContext;
    // private System.Boolean m_ExecutionContextBelongsToOuterScope
    // Offset: 0x48
    bool m_ExecutionContextBelongsToOuterScope;
    // public System.Void .ctor(System.Threading.ThreadStart start)
    // Offset: 0xCE574C
    static Thread* New_ctor(System::Threading::ThreadStart* start);
    // public System.Void .ctor(System.Threading.ParameterizedThreadStart start)
    // Offset: 0xCE52C8
    static Thread* New_ctor(System::Threading::ParameterizedThreadStart* start);
    // public System.Void Start()
    // Offset: 0xCE5900
    void Start();
    // public System.Void Start(System.Object parameter)
    // Offset: 0xCE53B8
    void Start(::CsObject* parameter);
    // private System.Void Start(System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCE5928
    void Start(System::Threading::StackCrawlMark& stackMark);
    // System.Threading.ExecutionContext/Reader GetExecutionContextReader()
    // Offset: 0xCDA3A8
    System::Threading::ExecutionContext::Reader GetExecutionContextReader();
    // System.Boolean get_ExecutionContextBelongsToCurrentScope()
    // Offset: 0xCE5AB0
    bool get_ExecutionContextBelongsToCurrentScope();
    // System.Void set_ExecutionContextBelongsToCurrentScope(System.Boolean value)
    // Offset: 0xCE5AC0
    void set_ExecutionContextBelongsToCurrentScope(bool value);
    // System.Threading.ExecutionContext GetMutableExecutionContext()
    // Offset: 0xCDA2A4
    System::Threading::ExecutionContext* GetMutableExecutionContext();
    // System.Void SetExecutionContext(System.Threading.ExecutionContext value, System.Boolean belongsToCurrentScope)
    // Offset: 0xCE5AD0
    void SetExecutionContext(System::Threading::ExecutionContext* value, bool belongsToCurrentScope);
    // System.Void SetExecutionContext(System.Threading.ExecutionContext/Reader value, System.Boolean belongsToCurrentScope)
    // Offset: 0xCE5B08
    void SetExecutionContext(System::Threading::ExecutionContext::Reader value, bool belongsToCurrentScope);
    // static public System.Void ResetAbort()
    // Offset: 0xCE5B40
    static void ResetAbort();
    // private System.Void ResetAbortNative()
    // Offset: 0xCE5C18
    void ResetAbortNative();
    // static private System.Void SleepInternal(System.Int32 millisecondsTimeout)
    // Offset: 0xCE5C20
    static void SleepInternal(int millisecondsTimeout);
    // static public System.Void Sleep(System.Int32 millisecondsTimeout)
    // Offset: 0xCD9DB0
    static void Sleep(int millisecondsTimeout);
    // static private System.Boolean YieldInternal()
    // Offset: 0xCE5C24
    static bool YieldInternal();
    // static public System.Boolean Yield()
    // Offset: 0xCD9E58
    static bool Yield();
    // private System.Void SetStartHelper(System.Delegate start, System.Int32 maxStackSize)
    // Offset: 0xCE57F0
    void SetStartHelper(System::Delegate* start, int maxStackSize);
    // public System.Globalization.CultureInfo get_CurrentUICulture()
    // Offset: 0xCE5D84
    System::Globalization::CultureInfo* get_CurrentUICulture();
    // System.Globalization.CultureInfo GetCurrentUICultureNoAppX()
    // Offset: 0xCE5D88
    System::Globalization::CultureInfo* GetCurrentUICultureNoAppX();
    // public System.Globalization.CultureInfo get_CurrentCulture()
    // Offset: 0xCE5E40
    System::Globalization::CultureInfo* get_CurrentCulture();
    // private System.Globalization.CultureInfo GetCurrentCultureNoAppX()
    // Offset: 0xCE5E44
    System::Globalization::CultureInfo* GetCurrentCultureNoAppX();
    // static public System.Void MemoryBarrier()
    // Offset: 0xCE5EFC
    static void MemoryBarrier();
    // private System.Void ConstructInternalThread()
    // Offset: 0xCE5F00
    void ConstructInternalThread();
    // private System.Threading.InternalThread get_Internal()
    // Offset: 0xCE5F04
    System::Threading::InternalThread* get_Internal();
    // static public System.Runtime.Remoting.Contexts.Context get_CurrentContext()
    // Offset: 0xCE5F34
    static System::Runtime::Remoting::Contexts::Context* get_CurrentContext();
    // static private System.Byte[] ByteArrayToCurrentDomain(System.Byte[] arr)
    // Offset: 0xCE5F3C
    static ::Array<uint8_t>* ByteArrayToCurrentDomain(::Array<uint8_t>* arr);
    // static private System.Void DeserializePrincipal(System.Threading.Thread th)
    // Offset: 0xCE5F40
    static void DeserializePrincipal(System::Threading::Thread* th);
    // static public System.Security.Principal.IPrincipal get_CurrentPrincipal()
    // Offset: 0xCE62C4
    static System::Security::Principal::IPrincipal* get_CurrentPrincipal();
    // static private System.Threading.Thread GetCurrentThread()
    // Offset: 0xCE6444
    static System::Threading::Thread* GetCurrentThread();
    // static public System.Threading.Thread get_CurrentThread()
    // Offset: 0xCD9E5C
    static System::Threading::Thread* get_CurrentThread();
    // static System.Int32 get_CurrentThreadId()
    // Offset: 0xCE6448
    static int get_CurrentThreadId();
    // static public System.AppDomain GetDomain()
    // Offset: 0xCE643C
    static System::AppDomain* GetDomain();
    // static public System.Int32 GetDomainID()
    // Offset: 0xCE6470
    static int GetDomainID();
    // private System.IntPtr Thread_internal(System.MulticastDelegate start)
    // Offset: 0xCE6474
    System::IntPtr Thread_internal(System::MulticastDelegate* start);
    // public System.Boolean get_IsThreadPoolThread()
    // Offset: 0xCE4EEC
    bool get_IsThreadPoolThread();
    // System.Boolean get_IsThreadPoolThreadInternal()
    // Offset: 0xCE6480
    bool get_IsThreadPoolThreadInternal();
    // public System.Void set_IsBackground(System.Boolean value)
    // Offset: 0xCE536C
    void set_IsBackground(bool value);
    // static private System.Void SetName_internal(System.Threading.InternalThread thread, System.String name)
    // Offset: 0xCE6554
    static void SetName_internal(System::Threading::InternalThread* thread, ::CsString* name);
    // public System.Void set_Name(System.String value)
    // Offset: 0xCE6558
    void set_Name(::CsString* value);
    // public System.Threading.ThreadState get_ThreadState()
    // Offset: 0xCE1700
    System::Threading::ThreadState get_ThreadState();
    // private System.Void ClearAbortReason()
    // Offset: 0xCE5C1C
    void ClearAbortReason();
    // static private System.Void SpinWait_nop()
    // Offset: 0xCE6594
    static void SpinWait_nop();
    // static public System.Void SpinWait(System.Int32 iterations)
    // Offset: 0xCD9D7C
    static void SpinWait(int iterations);
    // private System.Void StartInternal(System.Security.Principal.IPrincipal principal, System.Threading.StackCrawlMark stackMark)
    // Offset: 0xCE5A0C
    void StartInternal(System::Security::Principal::IPrincipal* principal, System::Threading::StackCrawlMark& stackMark);
    // static private System.Void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set)
    // Offset: 0xCE654C
    static void SetState(System::Threading::InternalThread* thread, System::Threading::ThreadState set);
    // static private System.Void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr)
    // Offset: 0xCE6550
    static void ClrState(System::Threading::InternalThread* thread, System::Threading::ThreadState clr);
    // static private System.Threading.ThreadState GetState(System.Threading.InternalThread thread)
    // Offset: 0xCE6590
    static System::Threading::ThreadState GetState(System::Threading::InternalThread* thread);
    // static private System.Int32 SystemMaxStackStize()
    // Offset: 0xCE6598
    static int SystemMaxStackStize();
    // static private System.Int32 GetProcessDefaultStackSize(System.Int32 maxStackSize)
    // Offset: 0xCE5C28
    static int GetProcessDefaultStackSize(int maxStackSize);
    // private System.Void SetStart(System.MulticastDelegate start, System.Int32 maxStackSize)
    // Offset: 0xCE5D2C
    void SetStart(System::MulticastDelegate* start, int maxStackSize);
    // public System.Int32 get_ManagedThreadId()
    // Offset: 0xCD9EB4
    int get_ManagedThreadId();
    // static public System.Void BeginCriticalRegion()
    // Offset: 0xCD95DC
    static void BeginCriticalRegion();
    // static public System.Void EndCriticalRegion()
    // Offset: 0xCD9B3C
    static void EndCriticalRegion();
    // private System.Threading.ThreadState ValidateThreadState()
    // Offset: 0xCE64B8
    System::Threading::ThreadState ValidateThreadState();
    // protected override System.Void Finalize()
    // Offset: 0xCE6478
    // Implemented from: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    // Base method: System.Void CriticalFinalizerObject::Finalize()
    void Finalize();
    // public override System.Int32 GetHashCode()
    // Offset: 0xCE659C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.Threading.Thread
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Thread*, "System.Threading", "Thread");
#pragma pack(pop)
