// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.WaitHandle
#include "System/Threading/WaitHandle.hpp"
// Including type: System.Threading.EventResetMode
#include "System/Threading/EventResetMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.EventWaitHandle
  // [ComVisibleAttribute] Offset: D7CF08
  class EventWaitHandle : public System::Threading::WaitHandle {
    public:
    // Creating value type constructor for type: EventWaitHandle
    EventWaitHandle() noexcept {}
    // public System.Void .ctor(System.Boolean initialState, System.Threading.EventResetMode mode)
    // Offset: 0x18A81F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventWaitHandle* New_ctor(bool initialState, System::Threading::EventResetMode mode) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::EventWaitHandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventWaitHandle*, creationType>(initialState, mode)));
    }
    // public System.Void .ctor(System.Boolean initialState, System.Threading.EventResetMode mode, System.String name)
    // Offset: 0x18AAE20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventWaitHandle* New_ctor(bool initialState, System::Threading::EventResetMode mode, ::Il2CppString* name) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::EventWaitHandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventWaitHandle*, creationType>(initialState, mode, name)));
    }
    // public System.Boolean Reset()
    // Offset: 0x18AB0E8
    bool Reset();
    // public System.Boolean Set()
    // Offset: 0x18A9F7C
    bool Set();
  }; // System.Threading.EventWaitHandle
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::EventWaitHandle*, "System.Threading", "EventWaitHandle");
// Writing MetadataGetter for method: System::Threading::EventWaitHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::EventWaitHandle::*)(bool, System::Threading::EventResetMode)>(&System::Threading::EventWaitHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::EventWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::EventResetMode>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::EventWaitHandle::*)(bool, System::Threading::EventResetMode)>(&System::Threading::EventWaitHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::EventWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::EventResetMode>()});
  }
};
// Writing MetadataGetter for method: System::Threading::EventWaitHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::EventWaitHandle::*)(bool, System::Threading::EventResetMode, ::Il2CppString*)>(&System::Threading::EventWaitHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::EventWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::EventResetMode>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::EventWaitHandle::*)(bool, System::Threading::EventResetMode, ::Il2CppString*)>(&System::Threading::EventWaitHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::EventWaitHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::EventResetMode>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: System::Threading::EventWaitHandle::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::EventWaitHandle::*)()>(&System::Threading::EventWaitHandle::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::EventWaitHandle*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::EventWaitHandle::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::EventWaitHandle::*)()>(&System::Threading::EventWaitHandle::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::EventWaitHandle*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
