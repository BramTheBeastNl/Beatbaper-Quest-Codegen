// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Autogenerated type: System.Threading.SpinLock
  struct SpinLock : public System::ValueType {
    public:
    // Nested type: System::Threading::SpinLock::SystemThreading_SpinLockDebugView
    class SystemThreading_SpinLockDebugView;
    // private System.Int32 m_owner
    // Offset: 0x0
    int m_owner;
    // Creating value type constructor for type: SpinLock
    constexpr SpinLock(int m_owner_ = {}) noexcept : m_owner{m_owner_} {}
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_owner;
    }
    // Get static field: static private System.Int32 MAXIMUM_WAITERS
    static int _get_MAXIMUM_WAITERS();
    // Set static field: static private System.Int32 MAXIMUM_WAITERS
    static void _set_MAXIMUM_WAITERS(int value);
    // public System.Void .ctor(System.Boolean enableThreadOwnerTracking)
    // Offset: 0xDBA5D0
    SpinLock(bool enableThreadOwnerTracking);
    // public System.Void Enter(ref System.Boolean lockTaken)
    // Offset: 0xDBA5DC
    void Enter(bool& lockTaken);
    // public System.Void TryEnter(System.Int32 millisecondsTimeout, ref System.Boolean lockTaken)
    // Offset: 0xDBA5E4
    void TryEnter(int millisecondsTimeout, bool& lockTaken);
    // private System.Void ContinueTryEnter(System.Int32 millisecondsTimeout, ref System.Boolean lockTaken)
    // Offset: 0xDBA5EC
    void ContinueTryEnter(int millisecondsTimeout, bool& lockTaken);
    // private System.Void DecrementWaiters()
    // Offset: 0xDBA5F4
    void DecrementWaiters();
    // private System.Void ContinueTryEnterWithThreadTracking(System.Int32 millisecondsTimeout, System.UInt32 startTime, ref System.Boolean lockTaken)
    // Offset: 0xDBA5FC
    void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, bool& lockTaken);
    // public System.Void Exit(System.Boolean useMemoryBarrier)
    // Offset: 0xDBA604
    void Exit(bool useMemoryBarrier);
    // private System.Void ExitSlowPath(System.Boolean useMemoryBarrier)
    // Offset: 0xDBA610
    void ExitSlowPath(bool useMemoryBarrier);
    // public System.Boolean get_IsHeldByCurrentThread()
    // Offset: 0xDBA61C
    bool get_IsHeldByCurrentThread();
    // public System.Boolean get_IsThreadOwnerTrackingEnabled()
    // Offset: 0xDBA624
    bool get_IsThreadOwnerTrackingEnabled();
    // static private System.Void .cctor()
    // Offset: 0x16D9F1C
    static void _cctor();
  }; // System.Threading.SpinLock
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Threading::SpinLock, "System.Threading", "SpinLock");
#pragma pack(pop)
