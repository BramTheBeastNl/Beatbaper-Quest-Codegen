// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Monitor
  // [ComVisibleAttribute] Offset: D7CF54
  class Monitor : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Monitor
    Monitor() noexcept {}
    // static public System.Void Enter(System.Object obj)
    // Offset: 0x18ADA54
    static void Enter(::Il2CppObject* obj);
    // static public System.Void Enter(System.Object obj, ref System.Boolean lockTaken)
    // Offset: 0x18AD090
    static void Enter(::Il2CppObject* obj, bool& lockTaken);
    // static private System.Void ThrowLockTakenException()
    // Offset: 0x18ADA58
    static void ThrowLockTakenException();
    // static public System.Void Exit(System.Object obj)
    // Offset: 0x18AD0B0
    static void Exit(::Il2CppObject* obj);
    // static public System.Boolean Wait(System.Object obj, System.Int32 millisecondsTimeout, System.Boolean exitContext)
    // Offset: 0x18ADAF0
    static bool Wait(::Il2CppObject* obj, int millisecondsTimeout, bool exitContext);
    // static public System.Boolean Wait(System.Object obj, System.Int32 millisecondsTimeout)
    // Offset: 0x18AD78C
    static bool Wait(::Il2CppObject* obj, int millisecondsTimeout);
    // static public System.Void Pulse(System.Object obj)
    // Offset: 0x18ADC54
    static void Pulse(::Il2CppObject* obj);
    // static public System.Void PulseAll(System.Object obj)
    // Offset: 0x18AD250
    static void PulseAll(::Il2CppObject* obj);
    // static private System.Boolean Monitor_test_synchronised(System.Object obj)
    // Offset: 0x18ADDE8
    static bool Monitor_test_synchronised(::Il2CppObject* obj);
    // static private System.Void Monitor_pulse(System.Object obj)
    // Offset: 0x18ADDEC
    static void Monitor_pulse(::Il2CppObject* obj);
    // static private System.Void ObjPulse(System.Object obj)
    // Offset: 0x18ADCD8
    static void ObjPulse(::Il2CppObject* obj);
    // static private System.Void Monitor_pulse_all(System.Object obj)
    // Offset: 0x18ADE24
    static void Monitor_pulse_all(::Il2CppObject* obj);
    // static private System.Void ObjPulseAll(System.Object obj)
    // Offset: 0x18ADD60
    static void ObjPulseAll(::Il2CppObject* obj);
    // static private System.Boolean Monitor_wait(System.Object obj, System.Int32 ms)
    // Offset: 0x18ADE28
    static bool Monitor_wait(::Il2CppObject* obj, int ms);
    // static private System.Boolean ObjWait(System.Boolean exitContext, System.Int32 millisecondsTimeout, System.Object obj)
    // Offset: 0x18ADB88
    static bool ObjWait(bool exitContext, int millisecondsTimeout, ::Il2CppObject* obj);
    // static private System.Void try_enter_with_atomic_var(System.Object obj, System.Int32 millisecondsTimeout, ref System.Boolean lockTaken)
    // Offset: 0x18ADE2C
    static void try_enter_with_atomic_var(::Il2CppObject* obj, int millisecondsTimeout, bool& lockTaken);
    // static private System.Void ReliableEnterTimeout(System.Object obj, System.Int32 timeout, ref System.Boolean lockTaken)
    // Offset: 0x18ADE30
    static void ReliableEnterTimeout(::Il2CppObject* obj, int timeout, bool& lockTaken);
    // static private System.Void ReliableEnter(System.Object obj, ref System.Boolean lockTaken)
    // Offset: 0x18ADAE4
    static void ReliableEnter(::Il2CppObject* obj, bool& lockTaken);
  }; // System.Threading.Monitor
  #pragma pack(pop)
  // Writing MetadataGetter for method: Monitor::Enter
  // Il2CppName: Enter
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Enter)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Enter
  // Il2CppName: Enter
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, bool&)>(&Monitor::Enter)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Enter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::ThrowLockTakenException
  // Il2CppName: ThrowLockTakenException
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Monitor::ThrowLockTakenException)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "ThrowLockTakenException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: Monitor::Exit
  // Il2CppName: Exit
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Exit)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Exit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Wait
  // Il2CppName: Wait
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, int, bool)>(&Monitor::Wait)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Wait
  // Il2CppName: Wait
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, int)>(&Monitor::Wait)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Pulse
  // Il2CppName: Pulse
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Pulse)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Pulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::PulseAll
  // Il2CppName: PulseAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::PulseAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "PulseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Monitor_test_synchronised
  // Il2CppName: Monitor_test_synchronised
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*)>(&Monitor::Monitor_test_synchronised)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_test_synchronised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Monitor_pulse
  // Il2CppName: Monitor_pulse
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Monitor_pulse)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_pulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::ObjPulse
  // Il2CppName: ObjPulse
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::ObjPulse)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "ObjPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Monitor_pulse_all
  // Il2CppName: Monitor_pulse_all
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::Monitor_pulse_all)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_pulse_all", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::ObjPulseAll
  // Il2CppName: ObjPulseAll
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&Monitor::ObjPulseAll)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "ObjPulseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::Monitor_wait
  // Il2CppName: Monitor_wait
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, int)>(&Monitor::Monitor_wait)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "Monitor_wait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::ObjWait
  // Il2CppName: ObjWait
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, int, ::Il2CppObject*)>(&Monitor::ObjWait)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "ObjWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::try_enter_with_atomic_var
  // Il2CppName: try_enter_with_atomic_var
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, int, bool&)>(&Monitor::try_enter_with_atomic_var)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "try_enter_with_atomic_var", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::ReliableEnterTimeout
  // Il2CppName: ReliableEnterTimeout
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, int, bool&)>(&Monitor::ReliableEnterTimeout)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "ReliableEnterTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
  // Writing MetadataGetter for method: Monitor::ReliableEnter
  // Il2CppName: ReliableEnter
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, bool&)>(&Monitor::ReliableEnter)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(Monitor*), "ReliableEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Monitor*, "System.Threading", "Monitor");
