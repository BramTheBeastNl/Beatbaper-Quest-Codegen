// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.TaskToApm
#include "System/Threading/Tasks/TaskToApm.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult
  class TaskToApm::TaskWrapperAsyncResult : public ::Il2CppObject/*, public System::IAsyncResult*/ {
    public:
    // readonly System.Threading.Tasks.Task Task
    // Size: 0x8
    // Offset: 0x10
    System::Threading::Tasks::Task* Task;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task*) == 0x8);
    // private readonly System.Object m_state
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* m_state;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Boolean m_completedSynchronously
    // Size: 0x1
    // Offset: 0x20
    bool m_completedSynchronously;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TaskWrapperAsyncResult
    TaskWrapperAsyncResult(System::Threading::Tasks::Task* Task_ = {}, ::Il2CppObject* m_state_ = {}, bool m_completedSynchronously_ = {}) noexcept : Task{Task_}, m_state{m_state_}, m_completedSynchronously{m_completedSynchronously_} {}
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // System.Void .ctor(System.Threading.Tasks.Task task, System.Object state, System.Boolean completedSynchronously)
    // Offset: 0x1890C64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskToApm::TaskWrapperAsyncResult* New_ctor(System::Threading::Tasks::Task* task, ::Il2CppObject* state, bool completedSynchronously) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskToApm::TaskWrapperAsyncResult*, creationType>(task, state, completedSynchronously)));
    }
    // private System.Object System.IAsyncResult.get_AsyncState()
    // Offset: 0x1890E7C
    ::Il2CppObject* System_IAsyncResult_get_AsyncState();
    // private System.Boolean System.IAsyncResult.get_CompletedSynchronously()
    // Offset: 0x1890E84
    bool System_IAsyncResult_get_CompletedSynchronously();
    // private System.Boolean System.IAsyncResult.get_IsCompleted()
    // Offset: 0x1890E8C
    bool System_IAsyncResult_get_IsCompleted();
    // private System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle()
    // Offset: 0x1890EA8
    System::Threading::WaitHandle* System_IAsyncResult_get_AsyncWaitHandle();
  }; // System.Threading.Tasks.TaskToApm/TaskWrapperAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(TaskToApm::TaskWrapperAsyncResult), 32 + sizeof(bool)> __System_Threading_Tasks_TaskToApm_TaskWrapperAsyncResultSizeCheck;
  static_assert(sizeof(TaskToApm::TaskWrapperAsyncResult) == 0x21);
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Tasks::TaskToApm::TaskWrapperAsyncResult*, "System.Threading.Tasks", "TaskToApm/TaskWrapperAsyncResult");
// Writing MetadataGetter for method: TaskToApm::TaskWrapperAsyncResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskToApm::TaskWrapperAsyncResult::*)(System::Threading::Tasks::Task*, ::Il2CppObject*, bool)>(&TaskToApm::TaskWrapperAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskToApm::TaskWrapperAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskToApm::TaskWrapperAsyncResult::*)(System::Threading::Tasks::Task*, ::Il2CppObject*, bool)>(&TaskToApm::TaskWrapperAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskToApm::TaskWrapperAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncState
// Il2CppName: System.IAsyncResult.get_AsyncState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TaskToApm::TaskWrapperAsyncResult::*)()>(&TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskToApm::TaskWrapperAsyncResult*), "System.IAsyncResult.get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_CompletedSynchronously
// Il2CppName: System.IAsyncResult.get_CompletedSynchronously
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskToApm::TaskWrapperAsyncResult::*)()>(&TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_CompletedSynchronously)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskToApm::TaskWrapperAsyncResult*), "System.IAsyncResult.get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_IsCompleted
// Il2CppName: System.IAsyncResult.get_IsCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TaskToApm::TaskWrapperAsyncResult::*)()>(&TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_IsCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskToApm::TaskWrapperAsyncResult*), "System.IAsyncResult.get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncWaitHandle
// Il2CppName: System.IAsyncResult.get_AsyncWaitHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::WaitHandle* (TaskToApm::TaskWrapperAsyncResult::*)()>(&TaskToApm::TaskWrapperAsyncResult::System_IAsyncResult_get_AsyncWaitHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TaskToApm::TaskWrapperAsyncResult*), "System.IAsyncResult.get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
