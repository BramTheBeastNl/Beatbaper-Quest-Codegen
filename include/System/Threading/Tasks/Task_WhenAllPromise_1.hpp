// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: System.Threading.Tasks.ITaskCompletionAction
#include "System/Threading/Tasks/ITaskCompletionAction.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Threading::Tasks::Task::WhenAllPromise_1, "System.Threading.Tasks", "Task/WhenAllPromise`1");
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Task::WhenAllPromise_1 : public System::Threading::Tasks::Task_1<::ArrayW<T>>/*, public System::Threading::Tasks::ITaskCompletionAction*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.Threading.Tasks.Task`1<T>[] m_tasks
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<System::Threading::Tasks::Task_1<T>*> m_tasks;
    // Field size check
    static_assert(sizeof(::ArrayW<System::Threading::Tasks::Task_1<T>*>) == 0x8);
    // private System.Int32 m_count
    // Size: 0x4
    // Offset: 0x0
    int m_count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator System::Threading::Tasks::ITaskCompletionAction
    operator System::Threading::Tasks::ITaskCompletionAction() noexcept {
      return *reinterpret_cast<System::Threading::Tasks::ITaskCompletionAction*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Threading.Tasks.Task`1<T>[] m_tasks
    ::ArrayW<System::Threading::Tasks::Task_1<T>*>& dyn_m_tasks() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise_1::dyn_m_tasks");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_tasks"))->offset;
      return *reinterpret_cast<::ArrayW<System::Threading::Tasks::Task_1<T>*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_count
    int& dyn_m_count() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise_1::dyn_m_count");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_count"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void .ctor(System.Threading.Tasks.Task`1<T>[] tasks)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Task::WhenAllPromise_1<T>* New_ctor(::ArrayW<System::Threading::Tasks::Task_1<T>*> tasks) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Task::WhenAllPromise_1<T>*, creationType>(tasks)));
    }
    // public System.Void Invoke(System.Threading.Tasks.Task ignored)
    // Offset: 0xFFFFFFFF
    void Invoke(System::Threading::Tasks::Task* ignored) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise_1::Invoke");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignored)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, ignored);
    }
    // override System.Boolean get_ShouldNotifyDebuggerOfWaitCompletion()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Threading.Tasks.Task
    // Base method: System.Boolean Task::get_ShouldNotifyDebuggerOfWaitCompletion()
    bool get_ShouldNotifyDebuggerOfWaitCompletion() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAllPromise_1::get_ShouldNotifyDebuggerOfWaitCompletion");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ShouldNotifyDebuggerOfWaitCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
  }; // System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise`1
  // Could not write size check! Type: System.Threading.Tasks.Task/System.Threading.Tasks.WhenAllPromise`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
