// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Tasks.TaskContinuation
  class TaskContinuation : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: TaskContinuation
    TaskContinuation() noexcept {}
    // System.Void Run(System.Threading.Tasks.Task completedTask, System.Boolean bCanInlineContinuationTask)
    // Offset: 0xFFFFFFFF
    void Run(System::Threading::Tasks::Task* completedTask, bool bCanInlineContinuationTask);
    // static protected System.Void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, System.Boolean needsProtection)
    // Offset: 0x188DEAC
    static void InlineIfPossibleOrElseQueue(System::Threading::Tasks::Task* task, bool needsProtection);
    // protected System.Void .ctor()
    // Offset: 0x188E2B8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskContinuation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::TaskContinuation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskContinuation*, creationType>()));
    }
  }; // System.Threading.Tasks.TaskContinuation
  #pragma pack(pop)
  // Writing MetadataGetter for method: TaskContinuation::Run
  // Il2CppName: Run
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskContinuation::*)(System::Threading::Tasks::Task*, bool)>(&TaskContinuation::Run)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TaskContinuation::InlineIfPossibleOrElseQueue
  // Il2CppName: InlineIfPossibleOrElseQueue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Tasks::Task*, bool)>(&TaskContinuation::InlineIfPossibleOrElseQueue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), "InlineIfPossibleOrElseQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Tasks::Task*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: TaskContinuation::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskContinuation::*)()>(&TaskContinuation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TaskContinuation::*)()>(&TaskContinuation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TaskContinuation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Tasks::TaskContinuation*, "System.Threading.Tasks", "TaskContinuation");
