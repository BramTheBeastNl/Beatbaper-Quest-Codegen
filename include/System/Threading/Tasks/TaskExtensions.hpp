// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Autogenerated type: System.Threading.Tasks.TaskExtensions
  class TaskExtensions : public ::Il2CppObject {
    public:
    // static public System.Threading.Tasks.Task`1<TResult> Unwrap(System.Threading.Tasks.Task`1<System.Threading.Tasks.Task`1<TResult>> task)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* Unwrap(System::Threading::Tasks::Task_1<System::Threading::Tasks::Task_1<TResult>*>* task) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Threading::Tasks").WithContext("TaskExtensions").WithContext("Unwrap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Threading.Tasks", "TaskExtensions", il2cpp_utils::NoArgClass<System::Threading::Tasks::Task_1<TResult>*>(), "Unwrap", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(task))));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, task);
    }
  }; // System.Threading.Tasks.TaskExtensions
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Tasks::TaskExtensions*, "System.Threading.Tasks", "TaskExtensions");
#pragma pack(pop)
