// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.SpinWait
  struct SpinWait/*, public System::ValueType*/ {
    public:
    // private System.Int32 m_count
    // Size: 0x4
    // Offset: 0x0
    int m_count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: SpinWait
    constexpr SpinWait(int m_count_ = {}) noexcept : m_count{m_count_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_count;
    }
    // public System.Boolean get_NextSpinWillYield()
    // Offset: 0xF010EC
    bool get_NextSpinWillYield();
    // public System.Void SpinOnce()
    // Offset: 0xF0111C
    void SpinOnce();
  }; // System.Threading.SpinWait
  #pragma pack(pop)
  static check_size<sizeof(SpinWait), 0 + sizeof(int)> __System_Threading_SpinWaitSizeCheck;
  static_assert(sizeof(SpinWait) == 0x4);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Threading::SpinWait, "System.Threading", "SpinWait");
// Writing MetadataGetter for method: SpinWait::get_NextSpinWillYield
// Il2CppName: get_NextSpinWillYield
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SpinWait::*)()>(&SpinWait::get_NextSpinWillYield)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpinWait), "get_NextSpinWillYield", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpinWait::SpinOnce
// Il2CppName: SpinOnce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpinWait::*)()>(&SpinWait::SpinOnce)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpinWait), "SpinOnce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
