// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ThreadAbortException
  class ThreadAbortException;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.IThreadPoolWorkItem
  class IThreadPoolWorkItem {
    public:
    // Creating value type constructor for type: IThreadPoolWorkItem
    IThreadPoolWorkItem() noexcept {}
    // public System.Void ExecuteWorkItem()
    // Offset: 0xFFFFFFFF
    void ExecuteWorkItem();
    // public System.Void MarkAborted(System.Threading.ThreadAbortException tae)
    // Offset: 0xFFFFFFFF
    void MarkAborted(System::Threading::ThreadAbortException* tae);
  }; // System.Threading.IThreadPoolWorkItem
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Threading::IThreadPoolWorkItem*, "System.Threading", "IThreadPoolWorkItem");
// Writing MetadataGetter for method: System::Threading::IThreadPoolWorkItem::ExecuteWorkItem
// Il2CppName: ExecuteWorkItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::IThreadPoolWorkItem::*)()>(&System::Threading::IThreadPoolWorkItem::ExecuteWorkItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::IThreadPoolWorkItem*), "ExecuteWorkItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::IThreadPoolWorkItem::MarkAborted
// Il2CppName: MarkAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::IThreadPoolWorkItem::*)(System::Threading::ThreadAbortException*)>(&System::Threading::IThreadPoolWorkItem::MarkAborted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::IThreadPoolWorkItem*), "MarkAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ThreadAbortException*>()});
  }
};
