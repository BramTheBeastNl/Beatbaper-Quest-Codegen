// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: System.Collections.Concurrent
namespace System::Collections::Concurrent {
  // Autogenerated type: System.Collections.Concurrent.IProducerConsumerCollection`1
  template<typename T>
  class IProducerConsumerCollection_1 : public System::Collections::Generic::IEnumerable_1<T>, public System::Collections::ICollection {
    public:
    // public System.Boolean TryAdd(T item)
    // Offset: 0xFFFFFFFF
    bool System_Collections_Concurrent_IProducerConsumerCollection_1_TryAdd(T item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryAdd", item));
    }
    // public System.Boolean TryTake(out T item)
    // Offset: 0xFFFFFFFF
    bool System_Collections_Concurrent_IProducerConsumerCollection_1_TryTake(T& item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryTake", item));
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFF
    ::Array<T>* ToArray() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<T>*>(this, "ToArray"));
    }
  }; // System.Collections.Concurrent.IProducerConsumerCollection`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Concurrent::IProducerConsumerCollection_1, "System.Collections.Concurrent", "IProducerConsumerCollection`1");
#pragma pack(pop)
