// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Collections.ObjectModel
namespace System::Collections::ObjectModel {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.ObjectModel.ReadOnlyCollection`1
  // [] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: C98B6C
  // [DebuggerTypeProxyAttribute] Offset: C98B6C
  // [ComVisibleAttribute] Offset: C98B6C
  // [DefaultMemberAttribute] Offset: C98B6C
  template<typename T>
  class ReadOnlyCollection_1 : public ::Il2CppObject/*, public System::Collections::Generic::IList_1<T>, public System::Collections::IList, public System::Collections::Generic::IReadOnlyList_1<T>*/ {
    public:
    // private System.Collections.Generic.IList`1<T> list
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::IList_1<T>* list;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::IList_1<T>*) == 0x8);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: ReadOnlyCollection_1
    ReadOnlyCollection_1(System::Collections::Generic::IList_1<T>* list_ = {}, ::Il2CppObject* syncRoot_ = {}) noexcept : list{list_}, syncRoot{syncRoot_} {}
    // Creating interface conversion operator: operator System::Collections::Generic::IList_1<T>
    operator System::Collections::Generic::IList_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IList_1<T>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IList
    operator System::Collections::IList() noexcept {
      return *reinterpret_cast<System::Collections::IList*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyList_1<T>
    operator System::Collections::Generic::IReadOnlyList_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IReadOnlyList_1<T>*>(this);
    }
    // public System.Void .ctor(System.Collections.Generic.IList`1<T> list)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadOnlyCollection_1<T>* New_ctor(System::Collections::Generic::IList_1<T>* list) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadOnlyCollection_1<T>*, creationType>(list)));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    int get_Count_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::get_Count_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    T get_Item_NEW(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::get_Item_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method, index);
    }
    // public System.Boolean Contains(T value)
    // Offset: 0xFFFFFFFF
    bool Contains_NEW(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::Contains_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, value);
    }
    // public System.Void CopyTo(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    void CopyTo_NEW(::Array<T>* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::CopyTo_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerator_1<T>* GetEnumerator_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::GetEnumerator_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // public System.Int32 IndexOf(T value)
    // Offset: 0xFFFFFFFF
    int IndexOf_NEW(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::IndexOf_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IndexOf", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, value);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_get_IsReadOnly_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.ICollection<T>.get_IsReadOnly_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
    }
    // private T System.Collections.Generic.IList<T>.get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    T System_Collections_Generic_IList$T$_get_Item_NEW(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.IList<T>.get_Item_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IList<T>.get_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index))));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method, index);
    }
    // private System.Void System.Collections.Generic.IList<T>.set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFF
    void System_Collections_Generic_IList$T$_set_Item_NEW(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.IList<T>.set_Item_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IList<T>.set_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, value))));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, value);
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T value)
    // Offset: 0xFFFFFFFF
    void System_Collections_Generic_ICollection$T$_Add_NEW(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.ICollection<T>.Add_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value))));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Clear()
    // Offset: 0xFFFFFFFF
    void System_Collections_Generic_ICollection$T$_Clear_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.ICollection<T>.Clear_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.Generic.IList<T>.Insert(System.Int32 index, T value)
    // Offset: 0xFFFFFFFF
    void System_Collections_Generic_IList$T$_Insert_NEW(int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.IList<T>.Insert_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IList<T>.Insert", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, value))));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, value);
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.Remove(T value)
    // Offset: 0xFFFFFFFF
    bool System_Collections_Generic_ICollection$T$_Remove_NEW(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.ICollection<T>.Remove_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<T>.Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value))));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, value);
    }
    // private System.Void System.Collections.Generic.IList<T>.RemoveAt(System.Int32 index)
    // Offset: 0xFFFFFFFF
    void System_Collections_Generic_IList$T$_RemoveAt_NEW(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.Generic.IList<T>.RemoveAt_NEW");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IList<T>.RemoveAt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index))));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IEnumerable.GetEnumerator_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    void System_Collections_ICollection_CopyTo_NEW(System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.ICollection.CopyTo_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0xFFFFFFFF
    bool System_Collections_IList_get_IsReadOnly_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.get_IsReadOnly_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* System_Collections_IList_get_Item_NEW(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.get_Item_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.get_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
      return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, index);
    }
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0xFFFFFFFF
    void System_Collections_IList_set_Item_NEW(int index, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.set_Item_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.set_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, value);
    }
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0xFFFFFFFF
    int System_Collections_IList_Add_NEW(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.Add_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, value);
    }
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0xFFFFFFFF
    void System_Collections_IList_Clear_NEW() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.Clear_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // static private System.Boolean IsCompatibleObject(System.Object value)
    // Offset: 0xFFFFFFFF
    static bool IsCompatibleObject(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::IsCompatibleObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ReadOnlyCollection_1<T>*>::get(), "IsCompatibleObject", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value))));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
    }
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0xFFFFFFFF
    bool System_Collections_IList_Contains_NEW(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.Contains_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, value);
    }
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0xFFFFFFFF
    int System_Collections_IList_IndexOf_NEW(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.IndexOf_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.IndexOf", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, value);
    }
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0xFFFFFFFF
    void System_Collections_IList_Insert_NEW(int index, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.Insert_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.Insert", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, value);
    }
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0xFFFFFFFF
    void System_Collections_IList_Remove_NEW(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.Remove_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0xFFFFFFFF
    void System_Collections_IList_RemoveAt_NEW(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ObjectModel::ReadOnlyCollection_1::System.Collections.IList.RemoveAt_NEW");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IList.RemoveAt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
    }
  }; // System.Collections.ObjectModel.ReadOnlyCollection`1
  // Could not write size check! Type: System.Collections.ObjectModel.ReadOnlyCollection`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::ObjectModel::ReadOnlyCollection_1, "System.Collections.ObjectModel", "ReadOnlyCollection`1");
