// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ICollection
  class ICollection;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.ArrayList/ReadOnlyArrayList
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: C983DC
  class ArrayList::ReadOnlyArrayList : public System::Collections::ArrayList {
    public:
    // private System.Collections.ArrayList _list
    // Size: 0x8
    // Offset: 0x28
    System::Collections::ArrayList* list;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // Creating value type constructor for type: ReadOnlyArrayList
    ReadOnlyArrayList(System::Collections::ArrayList* list_ = {}) noexcept : list{list_} {}
    // Creating conversion operator: operator System::Collections::ArrayList*
    constexpr operator System::Collections::ArrayList*() const noexcept {
      return list;
    }
    // System.Void .ctor(System.Collections.ArrayList l)
    // Offset: 0x16291F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayList::ReadOnlyArrayList* New_ctor(System::Collections::ArrayList* l) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ArrayList::ReadOnlyArrayList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayList::ReadOnlyArrayList*, creationType>(l)));
    }
    // public override System.Int32 get_Count()
    // Offset: 0x1629D74
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Int32 ArrayList::get_Count_NEW()
    int get_Count();
    // public override System.Boolean get_IsReadOnly()
    // Offset: 0x1629D98
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Boolean ArrayList::get_IsReadOnly_NEW()
    bool get_IsReadOnly();
    // public override System.Object get_Item(System.Int32 index)
    // Offset: 0x1629DA0
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Object ArrayList::get_Item_NEW(System.Int32 index)
    ::Il2CppObject* get_Item(int index);
    // public override System.Void set_Item(System.Int32 index, System.Object value)
    // Offset: 0x1629DC4
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::set_Item_NEW(System.Int32 index, System.Object value)
    void set_Item(int index, ::Il2CppObject* value);
    // public override System.Object get_SyncRoot()
    // Offset: 0x1629E44
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Object ArrayList::get_SyncRoot_NEW()
    ::Il2CppObject* get_SyncRoot();
    // public override System.Int32 Add(System.Object obj)
    // Offset: 0x1629E68
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Int32 ArrayList::Add_NEW(System.Object obj)
    int Add(::Il2CppObject* obj);
    // public override System.Void AddRange(System.Collections.ICollection c)
    // Offset: 0x1629EE8
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::AddRange_NEW(System.Collections.ICollection c)
    void AddRange(System::Collections::ICollection* c);
    // public override System.Void set_Capacity(System.Int32 value)
    // Offset: 0x1629F68
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::set_Capacity_NEW(System.Int32 value)
    void set_Capacity(int value);
    // public override System.Void Clear()
    // Offset: 0x1629FE8
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::Clear_NEW()
    void Clear();
    // public override System.Object Clone()
    // Offset: 0x162A068
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Object ArrayList::Clone_NEW()
    ::Il2CppObject* Clone();
    // public override System.Boolean Contains(System.Object obj)
    // Offset: 0x162A134
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Boolean ArrayList::Contains_NEW(System.Object obj)
    bool Contains(::Il2CppObject* obj);
    // public override System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x162A158
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::CopyTo_NEW(System.Array array, System.Int32 index)
    void CopyTo(System::Array* array, int index);
    // public override System.Void CopyTo(System.Int32 index, System.Array array, System.Int32 arrayIndex, System.Int32 count)
    // Offset: 0x162A17C
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::CopyTo_NEW(System.Int32 index, System.Array array, System.Int32 arrayIndex, System.Int32 count)
    void CopyTo(int index, System::Array* array, int arrayIndex, int count);
    // public override System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x162A1A0
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Collections.IEnumerator ArrayList::GetEnumerator_NEW()
    System::Collections::IEnumerator* GetEnumerator();
    // public override System.Int32 IndexOf(System.Object value)
    // Offset: 0x162A1C4
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Int32 ArrayList::IndexOf_NEW(System.Object value)
    int IndexOf(::Il2CppObject* value);
    // public override System.Void Insert(System.Int32 index, System.Object obj)
    // Offset: 0x162A1E8
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::Insert_NEW(System.Int32 index, System.Object obj)
    void Insert(int index, ::Il2CppObject* obj);
    // public override System.Void InsertRange(System.Int32 index, System.Collections.ICollection c)
    // Offset: 0x162A268
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::InsertRange_NEW(System.Int32 index, System.Collections.ICollection c)
    void InsertRange(int index, System::Collections::ICollection* c);
    // public override System.Void Remove(System.Object value)
    // Offset: 0x162A2E8
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::Remove_NEW(System.Object value)
    void Remove(::Il2CppObject* value);
    // public override System.Void RemoveAt(System.Int32 index)
    // Offset: 0x162A368
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::RemoveAt_NEW(System.Int32 index)
    void RemoveAt(int index);
    // public override System.Void RemoveRange(System.Int32 index, System.Int32 count)
    // Offset: 0x162A3E8
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::RemoveRange_NEW(System.Int32 index, System.Int32 count)
    void RemoveRange(int index, int count);
    // public override System.Void Reverse(System.Int32 index, System.Int32 count)
    // Offset: 0x162A468
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Void ArrayList::Reverse_NEW(System.Int32 index, System.Int32 count)
    void Reverse(int index, int count);
    // public override System.Object[] ToArray()
    // Offset: 0x162A4E8
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Object[] ArrayList::ToArray_NEW()
    ::Array<::Il2CppObject*>* ToArray();
    // public override System.Array ToArray(System.Type type)
    // Offset: 0x162A50C
    // Implemented from: System.Collections.ArrayList
    // Base method: System.Array ArrayList::ToArray_NEW(System.Type type)
    System::Array* ToArray(System::Type* type);
  }; // System.Collections.ArrayList/ReadOnlyArrayList
  #pragma pack(pop)
  static check_size<sizeof(ArrayList::ReadOnlyArrayList), 40 + sizeof(System::Collections::ArrayList*)> __System_Collections_ArrayList_ReadOnlyArrayListSizeCheck;
  static_assert(sizeof(ArrayList::ReadOnlyArrayList) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(System::Collections::ArrayList::ReadOnlyArrayList*, "System.Collections", "ArrayList/ReadOnlyArrayList");
