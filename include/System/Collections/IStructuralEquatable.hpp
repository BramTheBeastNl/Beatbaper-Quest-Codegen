// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.IStructuralEquatable
  class IStructuralEquatable {
    public:
    // Creating value type constructor for type: IStructuralEquatable
    IStructuralEquatable() noexcept {}
    // public System.Boolean Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    // Offset: 0xFFFFFFFF
    bool Equals(::Il2CppObject* other, System::Collections::IEqualityComparer* comparer);
    // public System.Int32 GetHashCode(System.Collections.IEqualityComparer comparer)
    // Offset: 0xFFFFFFFF
    int GetHashCode(System::Collections::IEqualityComparer* comparer);
  }; // System.Collections.IStructuralEquatable
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Collections::IStructuralEquatable*, "System.Collections", "IStructuralEquatable");
// Writing MetadataGetter for method: IStructuralEquatable::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IStructuralEquatable::*)(::Il2CppObject*, System::Collections::IEqualityComparer*)>(&IStructuralEquatable::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IStructuralEquatable*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEqualityComparer*>()});
  }
};
// Writing MetadataGetter for method: IStructuralEquatable::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IStructuralEquatable::*)(System::Collections::IEqualityComparer*)>(&IStructuralEquatable::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IStructuralEquatable*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEqualityComparer*>()});
  }
};
