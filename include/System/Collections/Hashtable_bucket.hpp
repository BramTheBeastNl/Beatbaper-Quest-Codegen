// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x14
  // Autogenerated type: System.Collections.Hashtable/bucket
  // [] Offset: FFFFFFFF
  struct Hashtable::bucket/*, public System::ValueType*/ {
    public:
    // public System.Object key
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* key;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Object val
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppObject* val;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Int32 hash_coll
    // Size: 0x4
    // Offset: 0x10
    int hash_coll;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: bucket
    constexpr bucket(::Il2CppObject* key_ = {}, ::Il2CppObject* val_ = {}, int hash_coll_ = {}) noexcept : key{key_}, val{val_}, hash_coll{hash_coll_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // System.Collections.Hashtable/bucket
  static check_size<sizeof(Hashtable::bucket), 16 + sizeof(int)> __System_Collections_Hashtable_bucketSizeCheck;
  static_assert(sizeof(Hashtable::bucket) == 0x14);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Collections::Hashtable::bucket, "System.Collections", "Hashtable/bucket");
#pragma pack(pop)
