// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: ICollection because it is already included!
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.ListDictionaryInternal
  // [DefaultMemberAttribute] Offset: D7FF3C
  class ListDictionaryInternal : public ::Il2CppObject/*, public System::Collections::IDictionary*/ {
    public:
    // Nested type: System::Collections::ListDictionaryInternal::NodeEnumerator
    class NodeEnumerator;
    // Nested type: System::Collections::ListDictionaryInternal::NodeKeyValueCollection
    class NodeKeyValueCollection;
    // Nested type: System::Collections::ListDictionaryInternal::DictionaryNode
    class DictionaryNode;
    // private System.Collections.ListDictionaryInternal/DictionaryNode head
    // Size: 0x8
    // Offset: 0x10
    System::Collections::ListDictionaryInternal::DictionaryNode* head;
    // Field size check
    static_assert(sizeof(System::Collections::ListDictionaryInternal::DictionaryNode*) == 0x8);
    // private System.Int32 version
    // Size: 0x4
    // Offset: 0x18
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x1C
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ListDictionaryInternal
    ListDictionaryInternal(System::Collections::ListDictionaryInternal::DictionaryNode* head_ = {}, int version_ = {}, int count_ = {}) noexcept : head{head_}, version{version_}, count{count_} {}
    // Creating interface conversion operator: operator System::Collections::IDictionary
    operator System::Collections::IDictionary() noexcept {
      return *reinterpret_cast<System::Collections::IDictionary*>(this);
    }
    // public System.Object get_Item(System.Object key)
    // Offset: 0x19727C4
    ::Il2CppObject* get_Item(::Il2CppObject* key);
    // public System.Void set_Item(System.Object key, System.Object value)
    // Offset: 0x19728AC
    void set_Item(::Il2CppObject* key, ::Il2CppObject* value);
    // public System.Int32 get_Count()
    // Offset: 0x1972AD0
    int get_Count();
    // public System.Collections.ICollection get_Keys()
    // Offset: 0x1972AD8
    System::Collections::ICollection* get_Keys();
    // public System.Void Add(System.Object key, System.Object value)
    // Offset: 0x1972B84
    void Add(::Il2CppObject* key, ::Il2CppObject* value);
    // public System.Boolean Contains(System.Object key)
    // Offset: 0x1972E48
    bool Contains(::Il2CppObject* key);
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x1972F30
    void CopyTo(System::Array* array, int index);
    // public System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x197313C
    System::Collections::IDictionaryEnumerator* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x19731E4
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Void .ctor()
    // Offset: 0x19727BC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListDictionaryInternal* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ListDictionaryInternal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListDictionaryInternal*, creationType>()));
    }
  }; // System.Collections.ListDictionaryInternal
  #pragma pack(pop)
  static check_size<sizeof(ListDictionaryInternal), 28 + sizeof(int)> __System_Collections_ListDictionaryInternalSizeCheck;
  static_assert(sizeof(ListDictionaryInternal) == 0x20);
  // Writing MetadataGetter for method: ListDictionaryInternal::get_Item
  // Il2CppName: get_Item
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ListDictionaryInternal::*)(::Il2CppObject*)>(&ListDictionaryInternal::get_Item)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::set_Item
  // Il2CppName: set_Item
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListDictionaryInternal::*)(::Il2CppObject*, ::Il2CppObject*)>(&ListDictionaryInternal::set_Item)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::get_Count
  // Il2CppName: get_Count
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ListDictionaryInternal::*)()>(&ListDictionaryInternal::get_Count)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::get_Keys
  // Il2CppName: get_Keys
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::ICollection* (ListDictionaryInternal::*)()>(&ListDictionaryInternal::get_Keys)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "get_Keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::Add
  // Il2CppName: Add
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListDictionaryInternal::*)(::Il2CppObject*, ::Il2CppObject*)>(&ListDictionaryInternal::Add)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::Contains
  // Il2CppName: Contains
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ListDictionaryInternal::*)(::Il2CppObject*)>(&ListDictionaryInternal::Contains)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::CopyTo
  // Il2CppName: CopyTo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListDictionaryInternal::*)(System::Array*, int)>(&ListDictionaryInternal::CopyTo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::GetEnumerator
  // Il2CppName: GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IDictionaryEnumerator* (ListDictionaryInternal::*)()>(&ListDictionaryInternal::GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::System_Collections_IEnumerable_GetEnumerator
  // Il2CppName: System.Collections.IEnumerable.GetEnumerator
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ListDictionaryInternal::*)()>(&ListDictionaryInternal::System_Collections_IEnumerable_GetEnumerator)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListDictionaryInternal::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListDictionaryInternal::*)()>(&ListDictionaryInternal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListDictionaryInternal::*)()>(&ListDictionaryInternal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListDictionaryInternal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Collections::ListDictionaryInternal*, "System.Collections", "ListDictionaryInternal");
