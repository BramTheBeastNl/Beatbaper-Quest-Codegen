// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.Queue
  // [] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: C987F8
  // [DebuggerTypeProxyAttribute] Offset: C987F8
  // [ComVisibleAttribute] Offset: C987F8
  class Queue : public ::Il2CppObject/*, public System::Collections::ICollection, public System::ICloneable*/ {
    public:
    // Nested type: System::Collections::Queue::QueueEnumerator
    class QueueEnumerator;
    // Nested type: System::Collections::Queue::QueueDebugView
    class QueueDebugView;
    // private System.Object[] _array
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppObject*>* array;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppObject*>*) == 0x8);
    // private System.Int32 _head
    // Size: 0x4
    // Offset: 0x18
    int head;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _tail
    // Size: 0x4
    // Offset: 0x1C
    int tail;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _size
    // Size: 0x4
    // Offset: 0x20
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _growFactor
    // Size: 0x4
    // Offset: 0x24
    int growFactor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x28
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Queue
    Queue(::Array<::Il2CppObject*>* array_ = {}, int head_ = {}, int tail_ = {}, int size_ = {}, int growFactor_ = {}, int version_ = {}) noexcept : array{array_}, head{head_}, tail{tail_}, size{size_}, growFactor{growFactor_}, version{version_} {}
    // Creating interface conversion operator: operator System::Collections::ICollection
    operator System::Collections::ICollection() noexcept {
      return *reinterpret_cast<System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x1814B10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Queue* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Queue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Queue*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single growFactor)
    // Offset: 0x1814938
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Queue* New_ctor(int capacity, float growFactor) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Queue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Queue*, creationType>(capacity, growFactor)));
    }
    // public System.Void .ctor(System.Collections.ICollection col)
    // Offset: 0x1814B18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Queue* New_ctor(System::Collections::ICollection* col) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Queue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Queue*, creationType>(col)));
    }
    // public System.Int32 get_Count()
    // Offset: 0x1814DA0
    int get_Count_NEW();
    // public System.Object Clone()
    // Offset: 0x1814DA8
    ::Il2CppObject* Clone_NEW();
    // public System.Void Clear()
    // Offset: 0x1814E94
    void Clear_NEW();
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x1814F08
    void CopyTo_NEW(System::Array* array, int index);
    // public System.Void Enqueue(System.Object obj)
    // Offset: 0x18150F8
    void Enqueue_NEW(::Il2CppObject* obj);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x18152FC
    System::Collections::IEnumerator* GetEnumerator_NEW();
    // public System.Object Dequeue()
    // Offset: 0x18153B0
    ::Il2CppObject* Dequeue_NEW();
    // public System.Object Peek()
    // Offset: 0x18154C0
    ::Il2CppObject* Peek_NEW();
    // System.Object GetElement(System.Int32 i)
    // Offset: 0x1815594
    ::Il2CppObject* GetElement(int i);
    // public System.Object[] ToArray()
    // Offset: 0x18155E0
    ::Array<::Il2CppObject*>* ToArray_NEW();
    // private System.Void SetCapacity(System.Int32 capacity)
    // Offset: 0x1815200
    void SetCapacity(int capacity);
    // public System.Void .ctor()
    // Offset: 0x181492C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Queue* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Queue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Queue*, creationType>()));
    }
  }; // System.Collections.Queue
  #pragma pack(pop)
  static check_size<sizeof(Queue), 40 + sizeof(int)> __System_Collections_QueueSizeCheck;
  static_assert(sizeof(Queue) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Collections::Queue*, "System.Collections", "Queue");
