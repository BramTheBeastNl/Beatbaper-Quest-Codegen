// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: ICollection because it is already included!
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.ArrayList
  // [] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: C9831C
  // [ComVisibleAttribute] Offset: C9831C
  // [DefaultMemberAttribute] Offset: C9831C
  // [DebuggerDisplayAttribute] Offset: C9831C
  class ArrayList : public ::Il2CppObject/*, public System::Collections::IList, public System::ICloneable*/ {
    public:
    // Nested type: System::Collections::ArrayList::ReadOnlyArrayList
    class ReadOnlyArrayList;
    // Nested type: System::Collections::ArrayList::ArrayListEnumeratorSimple
    class ArrayListEnumeratorSimple;
    // Nested type: System::Collections::ArrayList::ArrayListDebugView
    class ArrayListDebugView;
    // private System.Object[] _items
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppObject*>* items;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppObject*>*) == 0x8);
    // private System.Int32 _size
    // Size: 0x4
    // Offset: 0x18
    int size;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x1C
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: ArrayList
    ArrayList(::Array<::Il2CppObject*>* items_ = {}, int size_ = {}, int version_ = {}, ::Il2CppObject* syncRoot_ = {}) noexcept : items{items_}, size{size_}, version{version_}, syncRoot{syncRoot_} {}
    // Creating interface conversion operator: operator System::Collections::IList
    operator System::Collections::IList() noexcept {
      return *reinterpret_cast<System::Collections::IList*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Get static field: static private readonly System.Object[] emptyArray
    static ::Array<::Il2CppObject*>* _get_emptyArray();
    // Set static field: static private readonly System.Object[] emptyArray
    static void _set_emptyArray(::Array<::Il2CppObject*>* value);
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x1628120
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayList* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ArrayList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayList*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.Collections.ICollection c)
    // Offset: 0x1628260
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayList* New_ctor(System::Collections::ICollection* c) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ArrayList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayList*, creationType>(c)));
    }
    // public System.Void set_Capacity(System.Int32 value)
    // Offset: 0x16283F0
    void set_Capacity_NEW(int value);
    // public System.Int32 get_Count()
    // Offset: 0x162850C
    int get_Count_NEW();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x1628514
    bool get_IsReadOnly_NEW();
    // public System.Object get_SyncRoot()
    // Offset: 0x162851C
    ::Il2CppObject* get_SyncRoot_NEW();
    // public System.Object get_Item(System.Int32 index)
    // Offset: 0x1628594
    ::Il2CppObject* get_Item_NEW(int index);
    // public System.Void set_Item(System.Int32 index, System.Object value)
    // Offset: 0x1628674
    void set_Item_NEW(int index, ::Il2CppObject* value);
    // public System.Int32 Add(System.Object value)
    // Offset: 0x1628788
    int Add_NEW(::Il2CppObject* value);
    // public System.Void AddRange(System.Collections.ICollection c)
    // Offset: 0x1628894
    void AddRange_NEW(System::Collections::ICollection* c);
    // public System.Void Clear()
    // Offset: 0x16288B0
    void Clear_NEW();
    // public System.Object Clone()
    // Offset: 0x16288F4
    ::Il2CppObject* Clone_NEW();
    // public System.Boolean Contains(System.Object item)
    // Offset: 0x1628990
    bool Contains_NEW(::Il2CppObject* item);
    // public System.Void CopyTo(System.Array array)
    // Offset: 0x1628A64
    void CopyTo_NEW(System::Array* array);
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1628A78
    void CopyTo_NEW(System::Array* array, int arrayIndex);
    // public System.Void CopyTo(System.Int32 index, System.Array array, System.Int32 arrayIndex, System.Int32 count)
    // Offset: 0x1628B3C
    void CopyTo_NEW(int index, System::Array* array, int arrayIndex, int count);
    // private System.Void EnsureCapacity(System.Int32 min)
    // Offset: 0x162883C
    void EnsureCapacity(int min);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1628C2C
    System::Collections::IEnumerator* GetEnumerator_NEW();
    // public System.Int32 IndexOf(System.Object value)
    // Offset: 0x1628D94
    int IndexOf_NEW(::Il2CppObject* value);
    // public System.Void Insert(System.Int32 index, System.Object value)
    // Offset: 0x1628DA8
    void Insert_NEW(int index, ::Il2CppObject* value);
    // public System.Void InsertRange(System.Int32 index, System.Collections.ICollection c)
    // Offset: 0x1628F00
    void InsertRange_NEW(int index, System::Collections::ICollection* c);
    // static public System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list)
    // Offset: 0x162915C
    static System::Collections::ArrayList* ReadOnly(System::Collections::ArrayList* list);
    // public System.Void Remove(System.Object obj)
    // Offset: 0x1629270
    void Remove_NEW(::Il2CppObject* obj);
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0x16292C0
    void RemoveAt_NEW(int index);
    // public System.Void RemoveRange(System.Int32 index, System.Int32 count)
    // Offset: 0x16293D4
    void RemoveRange_NEW(int index, int count);
    // public System.Void Reverse()
    // Offset: 0x1629584
    void Reverse_NEW();
    // public System.Void Reverse(System.Int32 index, System.Int32 count)
    // Offset: 0x16295C8
    void Reverse_NEW(int index, int count);
    // public System.Object[] ToArray()
    // Offset: 0x1629724
    ::Array<::Il2CppObject*>* ToArray_NEW();
    // public System.Array ToArray(System.Type type)
    // Offset: 0x162979C
    System::Array* ToArray_NEW(System::Type* type);
    // static private System.Void .cctor()
    // Offset: 0x16298BC
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x16280A4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayList* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::ArrayList::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayList*, creationType>()));
    }
  }; // System.Collections.ArrayList
  #pragma pack(pop)
  static check_size<sizeof(ArrayList), 32 + sizeof(::Il2CppObject*)> __System_Collections_ArrayListSizeCheck;
  static_assert(sizeof(ArrayList) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::Collections::ArrayList*, "System.Collections", "ArrayList");
