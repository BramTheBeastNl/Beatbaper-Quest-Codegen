// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.Object
#include "System/Object.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting
namespace System::Runtime::Remoting {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodBase
  class MethodBase;
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct CsObject;
struct CsString;
// Completed il2cpp-utils forward declares
// Type namespace: System.Runtime.Remoting
namespace System::Runtime::Remoting {
  // Autogenerated type: System.Runtime.Remoting.SoapServices
  class SoapServices : public ::CsObject {
    public:
    // Nested type: System::Runtime::Remoting::SoapServices::TypeInfo
    class TypeInfo;
    // Get static field: static private System.Collections.Hashtable _xmlTypes
    static System::Collections::Hashtable* _get__xmlTypes();
    // Set static field: static private System.Collections.Hashtable _xmlTypes
    static void _set__xmlTypes(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _xmlElements
    static System::Collections::Hashtable* _get__xmlElements();
    // Set static field: static private System.Collections.Hashtable _xmlElements
    static void _set__xmlElements(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _soapActions
    static System::Collections::Hashtable* _get__soapActions();
    // Set static field: static private System.Collections.Hashtable _soapActions
    static void _set__soapActions(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _soapActionsMethods
    static System::Collections::Hashtable* _get__soapActionsMethods();
    // Set static field: static private System.Collections.Hashtable _soapActionsMethods
    static void _set__soapActionsMethods(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _typeInfos
    static System::Collections::Hashtable* _get__typeInfos();
    // Set static field: static private System.Collections.Hashtable _typeInfos
    static void _set__typeInfos(System::Collections::Hashtable* value);
    // static public System.String get_XmlNsForClrTypeWithAssembly()
    // Offset: 0xE08B0C
    static ::CsString* get_XmlNsForClrTypeWithAssembly();
    // static public System.String get_XmlNsForClrTypeWithNs()
    // Offset: 0xE08B54
    static ::CsString* get_XmlNsForClrTypeWithNs();
    // static public System.String get_XmlNsForClrTypeWithNsAndAssembly()
    // Offset: 0xE08B9C
    static ::CsString* get_XmlNsForClrTypeWithNsAndAssembly();
    // static public System.String CodeXmlNamespaceForClrTypeNamespace(System.String typeNamespace, System.String assemblyName)
    // Offset: 0xDFD914
    static ::CsString* CodeXmlNamespaceForClrTypeNamespace(::CsString* typeNamespace, ::CsString* assemblyName);
    // static private System.String GetNameKey(System.String name, System.String namspace)
    // Offset: 0xE08C94
    static ::CsString* GetNameKey(::CsString* name, ::CsString* namspace);
    // static private System.String GetAssemblyName(System.Reflection.MethodBase mb)
    // Offset: 0xE08D10
    static ::CsString* GetAssemblyName(System::Reflection::MethodBase* mb);
    // static public System.Boolean GetXmlElementForInteropType(System.Type type, System.String xmlElement, System.String xmlNamespace)
    // Offset: 0xE08E44
    static bool GetXmlElementForInteropType(System::Type* type, ::CsString*& xmlElement, ::CsString*& xmlNamespace);
    // static public System.String GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb)
    // Offset: 0xDFD5E4
    static ::CsString* GetXmlNamespaceForMethodCall(System::Reflection::MethodBase* mb);
    // static public System.String GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb)
    // Offset: 0xDFD540
    static ::CsString* GetXmlNamespaceForMethodResponse(System::Reflection::MethodBase* mb);
    // static public System.Boolean GetXmlTypeForInteropType(System.Type type, System.String xmlType, System.String xmlTypeNamespace)
    // Offset: 0xE08F50
    static bool GetXmlTypeForInteropType(System::Type* type, ::CsString*& xmlType, ::CsString*& xmlTypeNamespace);
    // static public System.Void PreLoad(System.Reflection.Assembly assembly)
    // Offset: 0xE0904C
    static void PreLoad(System::Reflection::Assembly* assembly);
    // static public System.Void PreLoad(System.Type type)
    // Offset: 0xE09128
    static void PreLoad(System::Type* type);
    // static public System.Void RegisterInteropXmlElement(System.String xmlElement, System.String xmlNamespace, System.Type type)
    // Offset: 0xE097DC
    static void RegisterInteropXmlElement(::CsString* xmlElement, ::CsString* xmlNamespace, System::Type* type);
    // static public System.Void RegisterInteropXmlType(System.String xmlType, System.String xmlTypeNamespace, System.Type type)
    // Offset: 0xE09668
    static void RegisterInteropXmlType(::CsString* xmlType, ::CsString* xmlTypeNamespace, System::Type* type);
    // static private System.String EncodeNs(System.String ns)
    // Offset: 0xE08BE4
    static ::CsString* EncodeNs(::CsString* ns);
    // static private System.Void .cctor()
    // Offset: 0xE09958
    static void _cctor();
  }; // System.Runtime.Remoting.SoapServices
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::SoapServices*, "System.Runtime.Remoting", "SoapServices");
#pragma pack(pop)
