// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: Mono.Xml.SmallXmlParser/IContentHandler
#include "Mono/Xml/SmallXmlParser_IContentHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Stack
  class Stack;
}
// Forward declaring namespace: System::Runtime::Remoting
namespace System::Runtime::Remoting {
  // Forward declaring type: ChannelData
  class ChannelData;
  // Forward declaring type: ProviderData
  class ProviderData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting
namespace System::Runtime::Remoting {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.ConfigHandler
  // [] Offset: FFFFFFFF
  class ConfigHandler : public ::Il2CppObject/*, public Mono::Xml::SmallXmlParser::IContentHandler*/ {
    public:
    // private System.Collections.ArrayList typeEntries
    // Size: 0x8
    // Offset: 0x10
    System::Collections::ArrayList* typeEntries;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList channelInstances
    // Size: 0x8
    // Offset: 0x18
    System::Collections::ArrayList* channelInstances;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.Runtime.Remoting.ChannelData currentChannel
    // Size: 0x8
    // Offset: 0x20
    System::Runtime::Remoting::ChannelData* currentChannel;
    // Field size check
    static_assert(sizeof(System::Runtime::Remoting::ChannelData*) == 0x8);
    // private System.Collections.Stack currentProviderData
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Stack* currentProviderData;
    // Field size check
    static_assert(sizeof(System::Collections::Stack*) == 0x8);
    // private System.String currentClientUrl
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* currentClientUrl;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String appName
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* appName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String currentXmlPath
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* currentXmlPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean onlyDelayedChannels
    // Size: 0x1
    // Offset: 0x48
    bool onlyDelayedChannels;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ConfigHandler
    ConfigHandler(System::Collections::ArrayList* typeEntries_ = {}, System::Collections::ArrayList* channelInstances_ = {}, System::Runtime::Remoting::ChannelData* currentChannel_ = {}, System::Collections::Stack* currentProviderData_ = {}, ::Il2CppString* currentClientUrl_ = {}, ::Il2CppString* appName_ = {}, ::Il2CppString* currentXmlPath_ = {}, bool onlyDelayedChannels_ = {}) noexcept : typeEntries{typeEntries_}, channelInstances{channelInstances_}, currentChannel{currentChannel_}, currentProviderData{currentProviderData_}, currentClientUrl{currentClientUrl_}, appName{appName_}, currentXmlPath{currentXmlPath_}, onlyDelayedChannels{onlyDelayedChannels_} {}
    // Creating interface conversion operator: operator Mono::Xml::SmallXmlParser::IContentHandler
    operator Mono::Xml::SmallXmlParser::IContentHandler() noexcept {
      return *reinterpret_cast<Mono::Xml::SmallXmlParser::IContentHandler*>(this);
    }
    // public System.Void .ctor(System.Boolean onlyDelayedChannels)
    // Offset: 0x1309E84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConfigHandler* New_ctor(bool onlyDelayedChannels) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Remoting::ConfigHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConfigHandler*, creationType>(onlyDelayedChannels)));
    }
    // private System.Void ValidatePath(System.String element, params System.String[] paths)
    // Offset: 0x1309F2C
    void ValidatePath(::Il2CppString* element, ::Array<::Il2CppString*>* paths);
    // Creating initializer_list -> params proxy for: System.Void ValidatePath(System.String element, params System.String[] paths)
    void ValidatePath(::Il2CppString* element, std::initializer_list<::Il2CppString*> paths);
    // Creating TArgs -> initializer_list proxy for: System.Void ValidatePath(System.String element, params System.String[] paths)
    template<class ...TParams>
    void ValidatePath(::Il2CppString* element, TParams&&... paths) {
      ValidatePath(element, {paths...});
    }
    // private System.Boolean CheckPath(System.String path)
    // Offset: 0x130A038
    bool CheckPath(::Il2CppString* path);
    // public System.Void OnStartParsing(Mono.Xml.SmallXmlParser parser)
    // Offset: 0x130A11C
    void OnStartParsing_NEW(Mono::Xml::SmallXmlParser* parser);
    // public System.Void OnProcessingInstruction(System.String name, System.String text)
    // Offset: 0x130A120
    void OnProcessingInstruction_NEW(::Il2CppString* name, ::Il2CppString* text);
    // public System.Void OnIgnorableWhitespace(System.String s)
    // Offset: 0x130A124
    void OnIgnorableWhitespace_NEW(::Il2CppString* s);
    // public System.Void OnStartElement(System.String name, Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130A128
    void OnStartElement_NEW(::Il2CppString* name, Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // public System.Void ParseElement(System.String name, Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130A2C8
    void ParseElement(::Il2CppString* name, Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // public System.Void OnEndElement(System.String name)
    // Offset: 0x130CB30
    void OnEndElement_NEW(::Il2CppString* name);
    // private System.Void ReadCustomProviderData(System.String name, Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130B214
    void ReadCustomProviderData(::Il2CppString* name, Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.Void ReadLifetine(Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130B584
    void ReadLifetine(Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.TimeSpan ParseTime(System.String s)
    // Offset: 0x130CBB4
    System::TimeSpan ParseTime(::Il2CppString* s);
    // private System.Void ReadChannel(Mono.Xml.SmallXmlParser/IAttrList attrs, System.Boolean isTemplate)
    // Offset: 0x130BB3C
    void ReadChannel(Mono::Xml::SmallXmlParser::IAttrList* attrs, bool isTemplate);
    // private System.Runtime.Remoting.ProviderData ReadProvider(System.String name, Mono.Xml.SmallXmlParser/IAttrList attrs, System.Boolean isTemplate)
    // Offset: 0x130BED0
    System::Runtime::Remoting::ProviderData* ReadProvider(::Il2CppString* name, Mono::Xml::SmallXmlParser::IAttrList* attrs, bool isTemplate);
    // private System.Void ReadClientActivated(Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130C504
    void ReadClientActivated(Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.Void ReadServiceActivated(Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130C62C
    void ReadServiceActivated(Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.Void ReadClientWellKnown(Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130C278
    void ReadClientWellKnown(Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.Void ReadServiceWellKnown(Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130C35C
    void ReadServiceWellKnown(Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.Void ReadInteropXml(Mono.Xml.SmallXmlParser/IAttrList attrs, System.Boolean isElement)
    // Offset: 0x130C6F0
    void ReadInteropXml(Mono::Xml::SmallXmlParser::IAttrList* attrs, bool isElement);
    // private System.Void ReadPreload(Mono.Xml.SmallXmlParser/IAttrList attrs)
    // Offset: 0x130C8C4
    void ReadPreload(Mono::Xml::SmallXmlParser::IAttrList* attrs);
    // private System.String GetNotNull(Mono.Xml.SmallXmlParser/IAttrList attrs, System.String name)
    // Offset: 0x130CF88
    ::Il2CppString* GetNotNull(Mono::Xml::SmallXmlParser::IAttrList* attrs, ::Il2CppString* name);
    // private System.String ExtractAssembly(ref System.String type)
    // Offset: 0x130D0C4
    ::Il2CppString* ExtractAssembly(::Il2CppString*& type);
    // public System.Void OnChars(System.String ch)
    // Offset: 0x130D194
    void OnChars_NEW(::Il2CppString* ch);
    // public System.Void OnEndParsing(Mono.Xml.SmallXmlParser parser)
    // Offset: 0x130D198
    void OnEndParsing_NEW(Mono::Xml::SmallXmlParser* parser);
  }; // System.Runtime.Remoting.ConfigHandler
  #pragma pack(pop)
  static check_size<sizeof(ConfigHandler), 72 + sizeof(bool)> __System_Runtime_Remoting_ConfigHandlerSizeCheck;
  static_assert(sizeof(ConfigHandler) == 0x49);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::ConfigHandler*, "System.Runtime.Remoting", "ConfigHandler");
