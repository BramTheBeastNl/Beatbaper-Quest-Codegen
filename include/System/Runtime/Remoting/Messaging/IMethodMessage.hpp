// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.Runtime.Remoting.Messaging.IMessage
#include "System/Runtime/Remoting/Messaging/IMessage.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting::Messaging
namespace System::Runtime::Remoting::Messaging {
  // Forward declaring type: LogicalCallContext
  class LogicalCallContext;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodBase
  class MethodBase;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
template<class T>
struct Array;
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: System.Runtime.Remoting.Messaging
namespace System::Runtime::Remoting::Messaging {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.Messaging.IMethodMessage
  // [ComVisibleAttribute] Offset: D7E6D4
  class IMethodMessage/*, public System::Runtime::Remoting::Messaging::IMessage*/ {
    public:
    // Creating value type constructor for type: IMethodMessage
    IMethodMessage() noexcept {}
    // Creating interface conversion operator: operator System::Runtime::Remoting::Messaging::IMessage
    operator System::Runtime::Remoting::Messaging::IMessage() noexcept {
      return *reinterpret_cast<System::Runtime::Remoting::Messaging::IMessage*>(this);
    }
    // public System.Int32 get_ArgCount()
    // Offset: 0xFFFFFFFF
    int get_ArgCount();
    // public System.Object[] get_Args()
    // Offset: 0xFFFFFFFF
    ::Array<::Il2CppObject*>* get_Args();
    // public System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
    // Offset: 0xFFFFFFFF
    System::Runtime::Remoting::Messaging::LogicalCallContext* get_LogicalCallContext();
    // public System.Reflection.MethodBase get_MethodBase()
    // Offset: 0xFFFFFFFF
    System::Reflection::MethodBase* get_MethodBase();
    // public System.String get_MethodName()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_MethodName();
    // public System.Object get_MethodSignature()
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* get_MethodSignature();
    // public System.String get_TypeName()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_TypeName();
    // public System.String get_Uri()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_Uri();
    // public System.Object GetArg(System.Int32 argNum)
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* GetArg(int argNum);
  }; // System.Runtime.Remoting.Messaging.IMethodMessage
  #pragma pack(pop)
  // Writing MetadataGetter for method: IMethodMessage::get_ArgCount
  // Il2CppName: get_ArgCount
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMethodMessage::*)()>(&IMethodMessage::get_ArgCount)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_ArgCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_Args
  // Il2CppName: get_Args
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (IMethodMessage::*)()>(&IMethodMessage::get_Args)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_Args", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_LogicalCallContext
  // Il2CppName: get_LogicalCallContext
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Runtime::Remoting::Messaging::LogicalCallContext* (IMethodMessage::*)()>(&IMethodMessage::get_LogicalCallContext)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_LogicalCallContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_MethodBase
  // Il2CppName: get_MethodBase
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodBase* (IMethodMessage::*)()>(&IMethodMessage::get_MethodBase)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_MethodBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_MethodName
  // Il2CppName: get_MethodName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMethodMessage::*)()>(&IMethodMessage::get_MethodName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_MethodName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_MethodSignature
  // Il2CppName: get_MethodSignature
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IMethodMessage::*)()>(&IMethodMessage::get_MethodSignature)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_MethodSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_TypeName
  // Il2CppName: get_TypeName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMethodMessage::*)()>(&IMethodMessage::get_TypeName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_TypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::get_Uri
  // Il2CppName: get_Uri
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMethodMessage::*)()>(&IMethodMessage::get_Uri)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "get_Uri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: IMethodMessage::GetArg
  // Il2CppName: GetArg
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IMethodMessage::*)(int)>(&IMethodMessage::GetArg)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IMethodMessage*), "GetArg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::Messaging::IMethodMessage*, "System.Runtime.Remoting.Messaging", "IMethodMessage");
