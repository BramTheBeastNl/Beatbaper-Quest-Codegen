// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting::Messaging
namespace System::Runtime::Remoting::Messaging {
  // Forward declaring type: CallContextRemotingData
  class CallContextRemotingData;
  // Forward declaring type: CallContextSecurityData
  class CallContextSecurityData;
  // Forward declaring type: Header
  class Header;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting.Messaging
namespace System::Runtime::Remoting::Messaging {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.Messaging.LogicalCallContext
  // [ComVisibleAttribute] Offset: D7E5B4
  class LogicalCallContext : public ::Il2CppObject/*, public System::Runtime::Serialization::ISerializable, public System::ICloneable*/ {
    public:
    // Nested type: System::Runtime::Remoting::Messaging::LogicalCallContext::Reader
    struct Reader;
    // private System.Collections.Hashtable m_Datastore
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Hashtable* m_Datastore;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // private System.Runtime.Remoting.Messaging.CallContextRemotingData m_RemotingData
    // Size: 0x8
    // Offset: 0x18
    System::Runtime::Remoting::Messaging::CallContextRemotingData* m_RemotingData;
    // Field size check
    static_assert(sizeof(System::Runtime::Remoting::Messaging::CallContextRemotingData*) == 0x8);
    // private System.Runtime.Remoting.Messaging.CallContextSecurityData m_SecurityData
    // Size: 0x8
    // Offset: 0x20
    System::Runtime::Remoting::Messaging::CallContextSecurityData* m_SecurityData;
    // Field size check
    static_assert(sizeof(System::Runtime::Remoting::Messaging::CallContextSecurityData*) == 0x8);
    // private System.Object m_HostContext
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* m_HostContext;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean m_IsCorrelationMgr
    // Size: 0x1
    // Offset: 0x30
    bool m_IsCorrelationMgr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsCorrelationMgr and: sendHeaders
    char __padding4[0x7] = {};
    // private System.Runtime.Remoting.Messaging.Header[] _sendHeaders
    // Size: 0x8
    // Offset: 0x38
    ::Array<System::Runtime::Remoting::Messaging::Header*>* sendHeaders;
    // Field size check
    static_assert(sizeof(::Array<System::Runtime::Remoting::Messaging::Header*>*) == 0x8);
    // private System.Runtime.Remoting.Messaging.Header[] _recvHeaders
    // Size: 0x8
    // Offset: 0x40
    ::Array<System::Runtime::Remoting::Messaging::Header*>* recvHeaders;
    // Field size check
    static_assert(sizeof(::Array<System::Runtime::Remoting::Messaging::Header*>*) == 0x8);
    // Creating value type constructor for type: LogicalCallContext
    LogicalCallContext(System::Collections::Hashtable* m_Datastore_ = {}, System::Runtime::Remoting::Messaging::CallContextRemotingData* m_RemotingData_ = {}, System::Runtime::Remoting::Messaging::CallContextSecurityData* m_SecurityData_ = {}, ::Il2CppObject* m_HostContext_ = {}, bool m_IsCorrelationMgr_ = {}, ::Array<System::Runtime::Remoting::Messaging::Header*>* sendHeaders_ = {}, ::Array<System::Runtime::Remoting::Messaging::Header*>* recvHeaders_ = {}) noexcept : m_Datastore{m_Datastore_}, m_RemotingData{m_RemotingData_}, m_SecurityData{m_SecurityData_}, m_HostContext{m_HostContext_}, m_IsCorrelationMgr{m_IsCorrelationMgr_}, sendHeaders{sendHeaders_}, recvHeaders{recvHeaders_} {}
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Get static field: static private System.Type s_callContextType
    static System::Type* _get_s_callContextType();
    // Set static field: static private System.Type s_callContextType
    static void _set_s_callContextType(System::Type* value);
    // static field const value: static private System.String s_CorrelationMgrSlotName
    static constexpr const char* s_CorrelationMgrSlotName = "System.Diagnostics.Trace.CorrelationManagerSlot";
    // Get static field: static private System.String s_CorrelationMgrSlotName
    static ::Il2CppString* _get_s_CorrelationMgrSlotName();
    // Set static field: static private System.String s_CorrelationMgrSlotName
    static void _set_s_CorrelationMgrSlotName(::Il2CppString* value);
    // System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1A3DAF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LogicalCallContext* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Remoting::Messaging::LogicalCallContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LogicalCallContext*, creationType>(info, context)));
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1A3DDF4
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Object Clone()
    // Offset: 0x1A3E13C
    ::Il2CppObject* Clone();
    // System.Void Merge(System.Runtime.Remoting.Messaging.LogicalCallContext lc)
    // Offset: 0x1A3E714
    void Merge(System::Runtime::Remoting::Messaging::LogicalCallContext* lc);
    // public System.Boolean get_HasInfo()
    // Offset: 0x1A395E0
    bool get_HasInfo();
    // private System.Boolean get_HasUserData()
    // Offset: 0x1A3E10C
    bool get_HasUserData();
    // private System.Collections.Hashtable get_Datastore()
    // Offset: 0x1A3DD88
    System::Collections::Hashtable* get_Datastore();
    // public System.Void FreeNamedDataSlot(System.String name)
    // Offset: 0x1A3A4B4
    void FreeNamedDataSlot(::Il2CppString* name);
    // public System.Object GetData(System.String name)
    // Offset: 0x1A3E954
    ::Il2CppObject* GetData(::Il2CppString* name);
    // public System.Void SetData(System.String name, System.Object data)
    // Offset: 0x1A3A564
    void SetData(::Il2CppString* name, ::Il2CppObject* data);
    // static private System.Void .cctor()
    // Offset: 0x1A3E98C
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0x1A3DAF0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LogicalCallContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Remoting::Messaging::LogicalCallContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LogicalCallContext*, creationType>()));
    }
  }; // System.Runtime.Remoting.Messaging.LogicalCallContext
  #pragma pack(pop)
  static check_size<sizeof(LogicalCallContext), 64 + sizeof(::Array<System::Runtime::Remoting::Messaging::Header*>*)> __System_Runtime_Remoting_Messaging_LogicalCallContextSizeCheck;
  static_assert(sizeof(LogicalCallContext) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::Messaging::LogicalCallContext*, "System.Runtime.Remoting.Messaging", "LogicalCallContext");
// Writing MetadataGetter for method: LogicalCallContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&LogicalCallContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&LogicalCallContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&LogicalCallContext::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LogicalCallContext::*)()>(&LogicalCallContext::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::Merge
// Il2CppName: Merge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)(System::Runtime::Remoting::Messaging::LogicalCallContext*)>(&LogicalCallContext::Merge)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "Merge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Remoting::Messaging::LogicalCallContext*>()});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::get_HasInfo
// Il2CppName: get_HasInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LogicalCallContext::*)()>(&LogicalCallContext::get_HasInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "get_HasInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::get_HasUserData
// Il2CppName: get_HasUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LogicalCallContext::*)()>(&LogicalCallContext::get_HasUserData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "get_HasUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::get_Datastore
// Il2CppName: get_Datastore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Hashtable* (LogicalCallContext::*)()>(&LogicalCallContext::get_Datastore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "get_Datastore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::FreeNamedDataSlot
// Il2CppName: FreeNamedDataSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)(::Il2CppString*)>(&LogicalCallContext::FreeNamedDataSlot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "FreeNamedDataSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LogicalCallContext::*)(::Il2CppString*)>(&LogicalCallContext::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)(::Il2CppString*, ::Il2CppObject*)>(&LogicalCallContext::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LogicalCallContext::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LogicalCallContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)()>(&LogicalCallContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LogicalCallContext::*)()>(&LogicalCallContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LogicalCallContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
