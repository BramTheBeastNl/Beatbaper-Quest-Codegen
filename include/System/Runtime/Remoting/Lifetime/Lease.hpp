// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.Runtime.Remoting.Lifetime.ILease
#include "System/Runtime/Remoting/Lifetime/ILease.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Runtime.Remoting.Lifetime.LeaseState
#include "System/Runtime/Remoting/Lifetime/LeaseState.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting::Lifetime
namespace System::Runtime::Remoting::Lifetime {
  // Forward declaring type: ISponsor
  class ISponsor;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Queue
  class Queue;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting.Lifetime
namespace System::Runtime::Remoting::Lifetime {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.Lifetime.Lease
  class Lease : public System::MarshalByRefObject/*, public System::Runtime::Remoting::Lifetime::ILease*/ {
    public:
    // Nested type: System::Runtime::Remoting::Lifetime::Lease::RenewalDelegate
    class RenewalDelegate;
    // private System.DateTime _leaseExpireTime
    // Size: 0x8
    // Offset: 0x18
    System::DateTime leaseExpireTime;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.Runtime.Remoting.Lifetime.LeaseState _currentState
    // Size: 0x4
    // Offset: 0x20
    System::Runtime::Remoting::Lifetime::LeaseState currentState;
    // Field size check
    static_assert(sizeof(System::Runtime::Remoting::Lifetime::LeaseState) == 0x4);
    // Padding between fields: currentState and: initialLeaseTime
    char __padding1[0x4] = {};
    // private System.TimeSpan _initialLeaseTime
    // Size: 0x8
    // Offset: 0x28
    System::TimeSpan initialLeaseTime;
    // Field size check
    static_assert(sizeof(System::TimeSpan) == 0x8);
    // private System.TimeSpan _renewOnCallTime
    // Size: 0x8
    // Offset: 0x30
    System::TimeSpan renewOnCallTime;
    // Field size check
    static_assert(sizeof(System::TimeSpan) == 0x8);
    // private System.TimeSpan _sponsorshipTimeout
    // Size: 0x8
    // Offset: 0x38
    System::TimeSpan sponsorshipTimeout;
    // Field size check
    static_assert(sizeof(System::TimeSpan) == 0x8);
    // private System.Collections.ArrayList _sponsors
    // Size: 0x8
    // Offset: 0x40
    System::Collections::ArrayList* sponsors;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Queue _renewingSponsors
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Queue* renewingSponsors;
    // Field size check
    static_assert(sizeof(System::Collections::Queue*) == 0x8);
    // private System.Runtime.Remoting.Lifetime.Lease/RenewalDelegate _renewalDelegate
    // Size: 0x8
    // Offset: 0x50
    System::Runtime::Remoting::Lifetime::Lease::RenewalDelegate* renewalDelegate;
    // Field size check
    static_assert(sizeof(System::Runtime::Remoting::Lifetime::Lease::RenewalDelegate*) == 0x8);
    // Creating value type constructor for type: Lease
    Lease(System::DateTime leaseExpireTime_ = {}, System::Runtime::Remoting::Lifetime::LeaseState currentState_ = {}, System::TimeSpan initialLeaseTime_ = {}, System::TimeSpan renewOnCallTime_ = {}, System::TimeSpan sponsorshipTimeout_ = {}, System::Collections::ArrayList* sponsors_ = {}, System::Collections::Queue* renewingSponsors_ = {}, System::Runtime::Remoting::Lifetime::Lease::RenewalDelegate* renewalDelegate_ = {}) noexcept : leaseExpireTime{leaseExpireTime_}, currentState{currentState_}, initialLeaseTime{initialLeaseTime_}, renewOnCallTime{renewOnCallTime_}, sponsorshipTimeout{sponsorshipTimeout_}, sponsors{sponsors_}, renewingSponsors{renewingSponsors_}, renewalDelegate{renewalDelegate_} {}
    // Creating interface conversion operator: operator System::Runtime::Remoting::Lifetime::ILease
    operator System::Runtime::Remoting::Lifetime::ILease() noexcept {
      return *reinterpret_cast<System::Runtime::Remoting::Lifetime::ILease*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // public System.TimeSpan get_CurrentLeaseTime()
    // Offset: 0x18852E0
    System::TimeSpan get_CurrentLeaseTime();
    // public System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState()
    // Offset: 0x1885358
    System::Runtime::Remoting::Lifetime::LeaseState get_CurrentState();
    // public System.Void Activate()
    // Offset: 0x1885360
    void Activate();
    // public System.TimeSpan get_RenewOnCallTime()
    // Offset: 0x188536C
    System::TimeSpan get_RenewOnCallTime();
    // public System.TimeSpan Renew(System.TimeSpan renewalTime)
    // Offset: 0x1885374
    System::TimeSpan Renew(System::TimeSpan renewalTime);
    // public System.Void Unregister(System.Runtime.Remoting.Lifetime.ISponsor obj)
    // Offset: 0x1885410
    void Unregister(System::Runtime::Remoting::Lifetime::ISponsor* obj);
    // System.Void UpdateState()
    // Offset: 0x1885520
    void UpdateState();
    // private System.Void CheckNextSponsor()
    // Offset: 0x188566C
    void CheckNextSponsor();
    // private System.Void ProcessSponsorResponse(System.Object state, System.Boolean timedOut)
    // Offset: 0x18858D0
    void ProcessSponsorResponse(::Il2CppObject* state, bool timedOut);
    // public System.Void .ctor()
    // Offset: 0x1885148
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Lease* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Remoting::Lifetime::Lease::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Lease*, creationType>()));
    }
  }; // System.Runtime.Remoting.Lifetime.Lease
  #pragma pack(pop)
  static check_size<sizeof(Lease), 80 + sizeof(System::Runtime::Remoting::Lifetime::Lease::RenewalDelegate*)> __System_Runtime_Remoting_Lifetime_LeaseSizeCheck;
  static_assert(sizeof(Lease) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::Lifetime::Lease*, "System.Runtime.Remoting.Lifetime", "Lease");
