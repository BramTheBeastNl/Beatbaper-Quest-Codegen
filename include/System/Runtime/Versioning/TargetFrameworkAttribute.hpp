// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Runtime.Versioning
namespace System::Runtime::Versioning {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Versioning.TargetFrameworkAttribute
  // [AttributeUsageAttribute] Offset: D7DC28
  class TargetFrameworkAttribute : public System::Attribute {
    public:
    // private System.String _frameworkName
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* frameworkName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _frameworkDisplayName
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* frameworkDisplayName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: TargetFrameworkAttribute
    TargetFrameworkAttribute(::Il2CppString* frameworkName_ = {}, ::Il2CppString* frameworkDisplayName_ = {}) noexcept : frameworkName{frameworkName_}, frameworkDisplayName{frameworkDisplayName_} {}
    // public System.Void .ctor(System.String frameworkName)
    // Offset: 0x169C9B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TargetFrameworkAttribute* New_ctor(::Il2CppString* frameworkName) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Versioning::TargetFrameworkAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TargetFrameworkAttribute*, creationType>(frameworkName)));
    }
    // public System.Void set_FrameworkDisplayName(System.String value)
    // Offset: 0x169CA4C
    void set_FrameworkDisplayName(::Il2CppString* value);
  }; // System.Runtime.Versioning.TargetFrameworkAttribute
  #pragma pack(pop)
  static check_size<sizeof(TargetFrameworkAttribute), 24 + sizeof(::Il2CppString*)> __System_Runtime_Versioning_TargetFrameworkAttributeSizeCheck;
  static_assert(sizeof(TargetFrameworkAttribute) == 0x20);
  // Writing MetadataGetter for method: TargetFrameworkAttribute::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TargetFrameworkAttribute::*)(::Il2CppString*)>(&TargetFrameworkAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TargetFrameworkAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TargetFrameworkAttribute::*)(::Il2CppString*)>(&TargetFrameworkAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TargetFrameworkAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: TargetFrameworkAttribute::set_FrameworkDisplayName
  // Il2CppName: set_FrameworkDisplayName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TargetFrameworkAttribute::*)(::Il2CppString*)>(&TargetFrameworkAttribute::set_FrameworkDisplayName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(TargetFrameworkAttribute*), "set_FrameworkDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Versioning::TargetFrameworkAttribute*, "System.Runtime.Versioning", "TargetFrameworkAttribute");
