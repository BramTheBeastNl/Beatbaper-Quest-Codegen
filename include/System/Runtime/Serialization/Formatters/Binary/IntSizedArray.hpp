// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Runtime.Serialization.Formatters.Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.Formatters.Binary.IntSizedArray
  // [DefaultMemberAttribute] Offset: C96CF0
  class IntSizedArray : public ::Il2CppObject/*, public System::ICloneable*/ {
    public:
    // System.Int32[] objects
    // Size: 0x8
    // Offset: 0x10
    ::Array<int>* objects;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // System.Int32[] negObjects
    // Size: 0x8
    // Offset: 0x18
    ::Array<int>* negObjects;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // Creating value type constructor for type: IntSizedArray
    IntSizedArray(::Array<int>* objects_ = {}, ::Array<int>* negObjects_ = {}) noexcept : objects{objects_}, negObjects{negObjects_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // private System.Void .ctor(System.Runtime.Serialization.Formatters.Binary.IntSizedArray sizedArray)
    // Offset: 0x14620F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IntSizedArray* New_ctor(System::Runtime::Serialization::Formatters::Binary::IntSizedArray* sizedArray) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::Formatters::Binary::IntSizedArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IntSizedArray*, creationType>(sizedArray)));
    }
    // public System.Object Clone()
    // Offset: 0x14621DC
    ::Il2CppObject* Clone();
    // System.Int32 get_Item(System.Int32 index)
    // Offset: 0x146223C
    int get_Item(int index);
    // System.Void set_Item(System.Int32 index, System.Int32 value)
    // Offset: 0x14622C0
    void set_Item(int index, int value);
    // System.Void IncreaseCapacity(System.Int32 index)
    // Offset: 0x1462380
    void IncreaseCapacity(int index);
    // public System.Void .ctor()
    // Offset: 0x1462088
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IntSizedArray* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::Formatters::Binary::IntSizedArray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IntSizedArray*, creationType>()));
    }
  }; // System.Runtime.Serialization.Formatters.Binary.IntSizedArray
  #pragma pack(pop)
  static check_size<sizeof(IntSizedArray), 24 + sizeof(::Array<int>*)> __System_Runtime_Serialization_Formatters_Binary_IntSizedArraySizeCheck;
  static_assert(sizeof(IntSizedArray) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Serialization::Formatters::Binary::IntSizedArray*, "System.Runtime.Serialization.Formatters.Binary", "IntSizedArray");
