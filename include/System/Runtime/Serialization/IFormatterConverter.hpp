// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: System.Runtime.Serialization
namespace System::Runtime::Serialization {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.IFormatterConverter
  // [CLSCompliantAttribute] Offset: D7DCA8
  // [ComVisibleAttribute] Offset: D7DCA8
  class IFormatterConverter {
    public:
    // Creating value type constructor for type: IFormatterConverter
    IFormatterConverter() noexcept {}
    // public System.Object Convert(System.Object value, System.Type type)
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* Convert(::Il2CppObject* value, System::Type* type);
    // public System.Boolean ToBoolean(System.Object value)
    // Offset: 0xFFFFFFFF
    bool ToBoolean(::Il2CppObject* value);
    // public System.Int32 ToInt32(System.Object value)
    // Offset: 0xFFFFFFFF
    int ToInt32(::Il2CppObject* value);
    // public System.Int64 ToInt64(System.Object value)
    // Offset: 0xFFFFFFFF
    int64_t ToInt64(::Il2CppObject* value);
    // public System.Single ToSingle(System.Object value)
    // Offset: 0xFFFFFFFF
    float ToSingle(::Il2CppObject* value);
    // public System.String ToString(System.Object value)
    // Offset: 0xFFFFFFFF
    ::Il2CppString* ToString(::Il2CppObject* value);
  }; // System.Runtime.Serialization.IFormatterConverter
  #pragma pack(pop)
  // Writing MetadataGetter for method: IFormatterConverter::Convert
  // Il2CppName: Convert
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IFormatterConverter::*)(::Il2CppObject*, System::Type*)>(&IFormatterConverter::Convert)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IFormatterConverter*), "Convert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: IFormatterConverter::ToBoolean
  // Il2CppName: ToBoolean
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IFormatterConverter::*)(::Il2CppObject*)>(&IFormatterConverter::ToBoolean)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IFormatterConverter*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: IFormatterConverter::ToInt32
  // Il2CppName: ToInt32
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IFormatterConverter::*)(::Il2CppObject*)>(&IFormatterConverter::ToInt32)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IFormatterConverter*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: IFormatterConverter::ToInt64
  // Il2CppName: ToInt64
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (IFormatterConverter::*)(::Il2CppObject*)>(&IFormatterConverter::ToInt64)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IFormatterConverter*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: IFormatterConverter::ToSingle
  // Il2CppName: ToSingle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IFormatterConverter::*)(::Il2CppObject*)>(&IFormatterConverter::ToSingle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IFormatterConverter*), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: IFormatterConverter::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IFormatterConverter::*)(::Il2CppObject*)>(&IFormatterConverter::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(IFormatterConverter*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Serialization::IFormatterConverter*, "System.Runtime.Serialization", "IFormatterConverter");
