// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
  // Forward declaring type: DateTime
  struct DateTime;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: IFormatterConverter
  class IFormatterConverter;
  // Forward declaring type: SerializationInfoEnumerator
  class SerializationInfoEnumerator;
}
// Completed forward declares
// Type namespace: System.Runtime.Serialization
namespace System::Runtime::Serialization {
  // Size: 0x5B
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.SerializationInfo
  // [ComVisibleAttribute] Offset: CA8D14
  class SerializationInfo : public ::Il2CppObject {
    public:
    // System.String[] m_members
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppString*>* m_members;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.Object[] m_data
    // Size: 0x8
    // Offset: 0x18
    ::Array<::Il2CppObject*>* m_data;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppObject*>*) == 0x8);
    // System.Type[] m_types
    // Size: 0x8
    // Offset: 0x20
    ::Array<System::Type*>* m_types;
    // Field size check
    static_assert(sizeof(::Array<System::Type*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.Int32> m_nameToIndex
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* m_nameToIndex;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*) == 0x8);
    // System.Int32 m_currMember
    // Size: 0x4
    // Offset: 0x30
    int m_currMember;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_currMember and: m_converter
    char __padding4[0x4] = {};
    // System.Runtime.Serialization.IFormatterConverter m_converter
    // Size: 0x8
    // Offset: 0x38
    System::Runtime::Serialization::IFormatterConverter* m_converter;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::IFormatterConverter*) == 0x8);
    // private System.String m_fullTypeName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* m_fullTypeName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_assemName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* m_assemName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Type objectType
    // Size: 0x8
    // Offset: 0x50
    System::Type* objectType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // private System.Boolean isFullTypeNameSetExplicit
    // Size: 0x1
    // Offset: 0x58
    bool isFullTypeNameSetExplicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isAssemblyNameSetExplicit
    // Size: 0x1
    // Offset: 0x59
    bool isAssemblyNameSetExplicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean requireSameTokenInPartialTrust
    // Size: 0x1
    // Offset: 0x5A
    bool requireSameTokenInPartialTrust;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SerializationInfo
    SerializationInfo(::Array<::Il2CppString*>* m_members_ = {}, ::Array<::Il2CppObject*>* m_data_ = {}, ::Array<System::Type*>* m_types_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* m_nameToIndex_ = {}, int m_currMember_ = {}, System::Runtime::Serialization::IFormatterConverter* m_converter_ = {}, ::Il2CppString* m_fullTypeName_ = {}, ::Il2CppString* m_assemName_ = {}, System::Type* objectType_ = {}, bool isFullTypeNameSetExplicit_ = {}, bool isAssemblyNameSetExplicit_ = {}, bool requireSameTokenInPartialTrust_ = {}) noexcept : m_members{m_members_}, m_data{m_data_}, m_types{m_types_}, m_nameToIndex{m_nameToIndex_}, m_currMember{m_currMember_}, m_converter{m_converter_}, m_fullTypeName{m_fullTypeName_}, m_assemName{m_assemName_}, objectType{objectType_}, isFullTypeNameSetExplicit{isFullTypeNameSetExplicit_}, isAssemblyNameSetExplicit{isAssemblyNameSetExplicit_}, requireSameTokenInPartialTrust{requireSameTokenInPartialTrust_} {}
    // static field const value: static private System.Int32 defaultSize
    static constexpr const int defaultSize = 4;
    // Get static field: static private System.Int32 defaultSize
    static int _get_defaultSize();
    // Set static field: static private System.Int32 defaultSize
    static void _set_defaultSize(int value);
    // static field const value: static private System.String s_mscorlibAssemblySimpleName
    static constexpr const char* s_mscorlibAssemblySimpleName = "mscorlib";
    // Get static field: static private System.String s_mscorlibAssemblySimpleName
    static ::Il2CppString* _get_s_mscorlibAssemblySimpleName();
    // Set static field: static private System.String s_mscorlibAssemblySimpleName
    static void _set_s_mscorlibAssemblySimpleName(::Il2CppString* value);
    // static field const value: static private System.String s_mscorlibFileName
    static constexpr const char* s_mscorlibFileName = "mscorlib.dll";
    // Get static field: static private System.String s_mscorlibFileName
    static ::Il2CppString* _get_s_mscorlibFileName();
    // Set static field: static private System.String s_mscorlibFileName
    static void _set_s_mscorlibFileName(::Il2CppString* value);
    // public System.Void .ctor(System.Type type, System.Runtime.Serialization.IFormatterConverter converter)
    // Offset: 0x150986C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SerializationInfo* New_ctor(System::Type* type, System::Runtime::Serialization::IFormatterConverter* converter) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::SerializationInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SerializationInfo*, creationType>(type, converter)));
    }
    // public System.Void .ctor(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, System.Boolean requireSameTokenInPartialTrust)
    // Offset: 0x1509874
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SerializationInfo* New_ctor(System::Type* type, System::Runtime::Serialization::IFormatterConverter* converter, bool requireSameTokenInPartialTrust) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::SerializationInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SerializationInfo*, creationType>(type, converter, requireSameTokenInPartialTrust)));
    }
    // public System.String get_FullTypeName()
    // Offset: 0x1509A10
    ::Il2CppString* get_FullTypeName();
    // public System.String get_AssemblyName()
    // Offset: 0x1509A18
    ::Il2CppString* get_AssemblyName();
    // public System.Void SetType(System.Type type)
    // Offset: 0x1508214
    void SetType(System::Type* type);
    // static private System.Boolean Compare(System.Byte[] a, System.Byte[] b)
    // Offset: 0x1509A24
    static bool Compare(::Array<uint8_t>* a, ::Array<uint8_t>* b);
    // static System.Void DemandForUnsafeAssemblyNameAssignments(System.String originalAssemblyName, System.String newAssemblyName)
    // Offset: 0x1509A20
    static void DemandForUnsafeAssemblyNameAssignments(::Il2CppString* originalAssemblyName, ::Il2CppString* newAssemblyName);
    // static System.Boolean IsAssemblyNameAssignmentSafe(System.String originalAssemblyName, System.String newAssemblyName)
    // Offset: 0x1509AB0
    static bool IsAssemblyNameAssignmentSafe(::Il2CppString* originalAssemblyName, ::Il2CppString* newAssemblyName);
    // public System.Int32 get_MemberCount()
    // Offset: 0x1509BD4
    int get_MemberCount();
    // public System.Type get_ObjectType()
    // Offset: 0x1509BDC
    System::Type* get_ObjectType();
    // public System.Boolean get_IsFullTypeNameSetExplicit()
    // Offset: 0x1509BE4
    bool get_IsFullTypeNameSetExplicit();
    // public System.Boolean get_IsAssemblyNameSetExplicit()
    // Offset: 0x1509BEC
    bool get_IsAssemblyNameSetExplicit();
    // public System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator()
    // Offset: 0x1509BF4
    System::Runtime::Serialization::SerializationInfoEnumerator* GetEnumerator();
    // private System.Void ExpandArrays()
    // Offset: 0x1509CEC
    void ExpandArrays();
    // public System.Void AddValue(System.String name, System.Object value, System.Type type)
    // Offset: 0x1508148
    void AddValue(::Il2CppString* name, ::Il2CppObject* value, System::Type* type);
    // public System.Void AddValue(System.String name, System.Object value)
    // Offset: 0x1509FC0
    void AddValue(::Il2CppString* name, ::Il2CppObject* value);
    // public System.Void AddValue(System.String name, System.Boolean value)
    // Offset: 0x150A07C
    void AddValue(::Il2CppString* name, bool value);
    // public System.Void AddValue(System.String name, System.Char value)
    // Offset: 0x150A140
    void AddValue(::Il2CppString* name, ::Il2CppChar value);
    // public System.Void AddValue(System.String name, System.Byte value)
    // Offset: 0x150A204
    void AddValue(::Il2CppString* name, uint8_t value);
    // public System.Void AddValue(System.String name, System.Int16 value)
    // Offset: 0x150A2C8
    void AddValue(::Il2CppString* name, int16_t value);
    // public System.Void AddValue(System.String name, System.Int32 value)
    // Offset: 0x150A38C
    void AddValue(::Il2CppString* name, int value);
    // public System.Void AddValue(System.String name, System.Int64 value)
    // Offset: 0x150A450
    void AddValue(::Il2CppString* name, int64_t value);
    // public System.Void AddValue(System.String name, System.UInt64 value)
    // Offset: 0x150A514
    void AddValue(::Il2CppString* name, uint64_t value);
    // public System.Void AddValue(System.String name, System.Single value)
    // Offset: 0x150A5D8
    void AddValue(::Il2CppString* name, float value);
    // public System.Void AddValue(System.String name, System.DateTime value)
    // Offset: 0x150A69C
    void AddValue(::Il2CppString* name, System::DateTime value);
    // System.Void AddValueInternal(System.String name, System.Object value, System.Type type)
    // Offset: 0x1509DE8
    void AddValueInternal(::Il2CppString* name, ::Il2CppObject* value, System::Type* type);
    // System.Void UpdateValue(System.String name, System.Object value, System.Type type)
    // Offset: 0x1505710
    void UpdateValue(::Il2CppString* name, ::Il2CppObject* value, System::Type* type);
    // private System.Int32 FindElement(System.String name)
    // Offset: 0x150A760
    int FindElement(::Il2CppString* name);
    // private System.Object GetElement(System.String name, out System.Type foundType)
    // Offset: 0x150A820
    ::Il2CppObject* GetElement(::Il2CppString* name, System::Type*& foundType);
    // private System.Object GetElementNoThrow(System.String name, out System.Type foundType)
    // Offset: 0x150A95C
    ::Il2CppObject* GetElementNoThrow(::Il2CppString* name, System::Type*& foundType);
    // public System.Object GetValue(System.String name, System.Type type)
    // Offset: 0x1507DDC
    ::Il2CppObject* GetValue(::Il2CppString* name, System::Type* type);
    // System.Object GetValueNoThrow(System.String name, System.Type type)
    // Offset: 0x1507CB0
    ::Il2CppObject* GetValueNoThrow(::Il2CppString* name, System::Type* type);
    // public System.Boolean GetBoolean(System.String name)
    // Offset: 0x150A9E4
    bool GetBoolean(::Il2CppString* name);
    // public System.Int32 GetInt32(System.String name)
    // Offset: 0x150AB58
    int GetInt32(::Il2CppString* name);
    // public System.Int64 GetInt64(System.String name)
    // Offset: 0x150ACC0
    int64_t GetInt64(::Il2CppString* name);
    // public System.Single GetSingle(System.String name)
    // Offset: 0x150AE28
    float GetSingle(::Il2CppString* name);
    // public System.String GetString(System.String name)
    // Offset: 0x150AF90
    ::Il2CppString* GetString(::Il2CppString* name);
  }; // System.Runtime.Serialization.SerializationInfo
  #pragma pack(pop)
  static check_size<sizeof(SerializationInfo), 90 + sizeof(bool)> __System_Runtime_Serialization_SerializationInfoSizeCheck;
  static_assert(sizeof(SerializationInfo) == 0x5B);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Serialization::SerializationInfo*, "System.Runtime.Serialization", "SerializationInfo");
