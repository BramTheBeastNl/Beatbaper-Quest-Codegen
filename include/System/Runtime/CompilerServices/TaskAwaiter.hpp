// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.ICriticalNotifyCompletion
#include "System/Runtime/CompilerServices/ICriticalNotifyCompletion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Runtime.CompilerServices.TaskAwaiter
  struct TaskAwaiter/*, public System::ValueType, public System::Runtime::CompilerServices::ICriticalNotifyCompletion*/ {
    public:
    // private readonly System.Threading.Tasks.Task m_task
    // Size: 0x8
    // Offset: 0x0
    System::Threading::Tasks::Task* m_task;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task*) == 0x8);
    // Creating value type constructor for type: TaskAwaiter
    constexpr TaskAwaiter(System::Threading::Tasks::Task* m_task_ = {}) noexcept : m_task{m_task_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::CompilerServices::ICriticalNotifyCompletion
    operator System::Runtime::CompilerServices::ICriticalNotifyCompletion() noexcept {
      return *reinterpret_cast<System::Runtime::CompilerServices::ICriticalNotifyCompletion*>(this);
    }
    // Creating conversion operator: operator System::Threading::Tasks::Task*
    constexpr operator System::Threading::Tasks::Task*() const noexcept {
      return m_task;
    }
    // System.Void .ctor(System.Threading.Tasks.Task task)
    // Offset: 0xDE5C64
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  TaskAwaiter(System::Threading::Tasks::Task* task)
    // public System.Boolean get_IsCompleted()
    // Offset: 0xDE5C6C
    bool get_IsCompleted();
    // public System.Void OnCompleted(System.Action continuation)
    // Offset: 0xDE5C88
    void OnCompleted(System::Action* continuation);
    // public System.Void UnsafeOnCompleted(System.Action continuation)
    // Offset: 0xDE5C98
    void UnsafeOnCompleted(System::Action* continuation);
    // public System.Void GetResult()
    // Offset: 0xDE5CA8
    void GetResult();
    // static System.Void ValidateEnd(System.Threading.Tasks.Task task)
    // Offset: 0x1300A14
    static void ValidateEnd(System::Threading::Tasks::Task* task);
    // static private System.Void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task)
    // Offset: 0x1301078
    static void HandleNonSuccessAndDebuggerNotification(System::Threading::Tasks::Task* task);
    // static private System.Void ThrowForNonSuccess(System.Threading.Tasks.Task task)
    // Offset: 0x13010E8
    static void ThrowForNonSuccess(System::Threading::Tasks::Task* task);
    // static System.Void OnCompletedInternal(System.Threading.Tasks.Task task, System.Action continuation, System.Boolean continueOnCapturedContext, System.Boolean flowExecutionContext)
    // Offset: 0x130092C
    static void OnCompletedInternal(System::Threading::Tasks::Task* task, System::Action* continuation, bool continueOnCapturedContext, bool flowExecutionContext);
  }; // System.Runtime.CompilerServices.TaskAwaiter
  #pragma pack(pop)
  static check_size<sizeof(TaskAwaiter), 0 + sizeof(System::Threading::Tasks::Task*)> __System_Runtime_CompilerServices_TaskAwaiterSizeCheck;
  static_assert(sizeof(TaskAwaiter) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::CompilerServices::TaskAwaiter, "System.Runtime.CompilerServices", "TaskAwaiter");
