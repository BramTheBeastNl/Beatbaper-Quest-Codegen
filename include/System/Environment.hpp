// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Object
#include "System/Object.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: OperatingSystem
  class OperatingSystem;
  // Forward declaring type: PlatformID
  struct PlatformID;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Autogenerated type: System.Environment
  class Environment : public ::CsObject {
    public:
    // Nested type: System::Environment::SpecialFolder
    struct SpecialFolder;
    // Nested type: System::Environment::SpecialFolderOption
    struct SpecialFolderOption;
    // static field const value: static private System.Int32 mono_corlib_version
    static constexpr const int mono_corlib_version = 1051100001;
    // Get static field: static private System.Int32 mono_corlib_version
    static int _get_mono_corlib_version();
    // Set static field: static private System.Int32 mono_corlib_version
    static void _set_mono_corlib_version(int value);
    // Get static field: static private System.String nl
    static ::CsString* _get_nl();
    // Set static field: static private System.String nl
    static void _set_nl(::CsString* value);
    // Get static field: static private System.OperatingSystem os
    static System::OperatingSystem* _get_os();
    // Set static field: static private System.OperatingSystem os
    static void _set_os(System::OperatingSystem* value);
    // static System.String GetResourceString(System.String key)
    // Offset: 0xD7EEF8
    static ::CsString* GetResourceString(::CsString* key);
    // static System.String GetResourceString(System.String key, System.Object[] values)
    // Offset: 0xD815DC
    static ::CsString* GetResourceString(::CsString* key, ::Array<::CsObject*>* values);
    // static System.String GetResourceStringEncodingName(System.Int32 codePage)
    // Offset: 0xD8F5C8
    static ::CsString* GetResourceStringEncodingName(int codePage);
    // static public System.String get_CurrentDirectory()
    // Offset: 0xD8F708
    static ::CsString* get_CurrentDirectory();
    // static public System.Int32 get_CurrentManagedThreadId()
    // Offset: 0xD8F710
    static int get_CurrentManagedThreadId();
    // static public System.Boolean get_HasShutdownStarted()
    // Offset: 0xD8F734
    static bool get_HasShutdownStarted();
    // static private System.String GetNewLine()
    // Offset: 0xD8F738
    static ::CsString* GetNewLine();
    // static public System.String get_NewLine()
    // Offset: 0xD8F73C
    static ::CsString* get_NewLine();
    // static private System.PlatformID get_Platform()
    // Offset: 0xD8F7B8
    static System::PlatformID get_Platform();
    // static System.String GetOSVersionString()
    // Offset: 0xD8F7BC
    static ::CsString* GetOSVersionString();
    // static public System.OperatingSystem get_OSVersion()
    // Offset: 0xD8F7C0
    static System::OperatingSystem* get_OSVersion();
    // static System.Version CreateVersionFromString(System.String info)
    // Offset: 0xD8F880
    static System::Version* CreateVersionFromString(::CsString* info);
    // static public System.String get_StackTrace()
    // Offset: 0xD8FA94
    static ::CsString* get_StackTrace();
    // static public System.Int32 get_TickCount()
    // Offset: 0xD8FB08
    static int get_TickCount();
    // static public System.Void Exit(System.Int32 exitCode)
    // Offset: 0xD8FB0C
    static void Exit(int exitCode);
    // static public System.String ExpandEnvironmentVariables(System.String name)
    // Offset: 0xD8FB10
    static ::CsString* ExpandEnvironmentVariables(::CsString* name);
    // static public System.String[] GetCommandLineArgs()
    // Offset: 0xD8FEEC
    static ::Array<::CsString*>* GetCommandLineArgs();
    // static System.String internalGetEnvironmentVariable_native(System.IntPtr variable)
    // Offset: 0xD8FEF0
    static ::CsString* internalGetEnvironmentVariable_native(System::IntPtr variable);
    // static System.String internalGetEnvironmentVariable(System.String variable)
    // Offset: 0xD8FEF4
    static ::CsString* internalGetEnvironmentVariable(::CsString* variable);
    // static public System.String GetEnvironmentVariable(System.String variable)
    // Offset: 0xD8FDC4
    static ::CsString* GetEnvironmentVariable(::CsString* variable);
    // static private System.Collections.Hashtable GetEnvironmentVariablesNoCase()
    // Offset: 0xD8FDE4
    static System::Collections::Hashtable* GetEnvironmentVariablesNoCase();
    // static public System.String GetFolderPath(System.Environment/SpecialFolder folder)
    // Offset: 0xD8FF94
    static ::CsString* GetFolderPath(System::Environment::SpecialFolder folder);
    // static private System.String GetWindowsFolderPath(System.Int32 folder)
    // Offset: 0xD8FFE0
    static ::CsString* GetWindowsFolderPath(int folder);
    // static public System.String GetFolderPath(System.Environment/SpecialFolder folder, System.Environment/SpecialFolderOption option)
    // Offset: 0xD8FF9C
    static ::CsString* GetFolderPath(System::Environment::SpecialFolder folder, System::Environment::SpecialFolderOption option);
    // static private System.String ReadXdgUserDir(System.String config_dir, System.String home_dir, System.String key, System.String fallback)
    // Offset: 0xD903F0
    static ::CsString* ReadXdgUserDir(::CsString* config_dir, ::CsString* home_dir, ::CsString* key, ::CsString* fallback);
    // static System.String UnixGetFolderPath(System.Environment/SpecialFolder folder, System.Environment/SpecialFolderOption option)
    // Offset: 0xD8FFE4
    static ::CsString* UnixGetFolderPath(System::Environment::SpecialFolder folder, System::Environment::SpecialFolderOption option);
    // static public System.String[] GetLogicalDrives()
    // Offset: 0xD90844
    static ::Array<::CsString*>* GetLogicalDrives();
    // static public System.Void FailFast(System.String message)
    // Offset: 0xD9084C
    static void FailFast(::CsString* message);
    // static public System.Void FailFast(System.String message, System.Exception exception)
    // Offset: 0xD908AC
    static void FailFast(::CsString* message, System::Exception* exception);
    // static public System.Boolean get_Is64BitProcess()
    // Offset: 0xD9094C
    static bool get_Is64BitProcess();
    // static public System.Int32 get_ProcessorCount()
    // Offset: 0xD9096C
    static int get_ProcessorCount();
    // static System.Boolean get_IsRunningOnWindows()
    // Offset: 0xD8FDC8
    static bool get_IsRunningOnWindows();
    // static private System.String[] GetLogicalDrivesInternal()
    // Offset: 0xD90848
    static ::Array<::CsString*>* GetLogicalDrivesInternal();
    // static private System.String[] GetEnvironmentVariableNames()
    // Offset: 0xD8FF90
    static ::Array<::CsString*>* GetEnvironmentVariableNames();
    // static System.String GetMachineConfigPath()
    // Offset: 0xD90970
    static ::CsString* GetMachineConfigPath();
    // static System.String internalGetHome()
    // Offset: 0xD90840
    static ::CsString* internalGetHome();
    // static System.Int32 GetPageSize()
    // Offset: 0xD90974
    static int GetPageSize();
    // static System.Boolean get_IsUnix()
    // Offset: 0xD90978
    static bool get_IsUnix();
    // static System.String GetStackTrace(System.Exception e, System.Boolean needFileInfo)
    // Offset: 0xD909B4
    static ::CsString* GetStackTrace(System::Exception* e, bool needFileInfo);
  }; // System.Environment
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Environment*, "System", "Environment");
#pragma pack(pop)
