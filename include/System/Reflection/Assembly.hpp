// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.ICustomAttributeProvider
#include "System/Reflection/ICustomAttributeProvider.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.InteropServices._Assembly
#include "System/Runtime/InteropServices/_Assembly.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Module
  class Module;
  // Forward declaring type: AssemblyName
  class AssemblyName;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Skipping declaration: StreamingContext because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Security::Policy
namespace System::Security::Policy {
  // Forward declaring type: Evidence
  class Evidence;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.Assembly
  // [] Offset: FFFFFFFF
  // [ComDefaultInterfaceAttribute] Offset: C9492C
  // [ComVisibleAttribute] Offset: C9492C
  // [ClassInterfaceAttribute] Offset: C9492C
  class Assembly : public ::Il2CppObject/*, public System::Reflection::ICustomAttributeProvider, public System::Runtime::Serialization::ISerializable, public System::Runtime::InteropServices::_Assembly*/ {
    public:
    // Nested type: System::Reflection::Assembly::ResolveEventHolder
    class ResolveEventHolder;
    // System.IntPtr _mono_assembly
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr mono_assembly;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.Reflection.Assembly/ResolveEventHolder resolve_event_holder
    // Size: 0x8
    // Offset: 0x18
    System::Reflection::Assembly::ResolveEventHolder* resolve_event_holder;
    // Field size check
    static_assert(sizeof(System::Reflection::Assembly::ResolveEventHolder*) == 0x8);
    // private System.Object _evidence
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* evidence;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _minimum
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* minimum;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _optional
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* optional;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _refuse
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* refuse;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _granted
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* granted;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _denied
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* denied;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean fromByteArray
    // Size: 0x1
    // Offset: 0x50
    bool fromByteArray;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fromByteArray and: assemblyName
    char __padding8[0x7] = {};
    // private System.String assemblyName
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* assemblyName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: Assembly
    Assembly(System::IntPtr mono_assembly_ = {}, System::Reflection::Assembly::ResolveEventHolder* resolve_event_holder_ = {}, ::Il2CppObject* evidence_ = {}, ::Il2CppObject* minimum_ = {}, ::Il2CppObject* optional_ = {}, ::Il2CppObject* refuse_ = {}, ::Il2CppObject* granted_ = {}, ::Il2CppObject* denied_ = {}, bool fromByteArray_ = {}, ::Il2CppString* assemblyName_ = {}) noexcept : mono_assembly{mono_assembly_}, resolve_event_holder{resolve_event_holder_}, evidence{evidence_}, minimum{minimum_}, optional{optional_}, refuse{refuse_}, granted{granted_}, denied{denied_}, fromByteArray{fromByteArray_}, assemblyName{assemblyName_} {}
    // Creating interface conversion operator: operator System::Reflection::ICustomAttributeProvider
    operator System::Reflection::ICustomAttributeProvider() noexcept {
      return *reinterpret_cast<System::Reflection::ICustomAttributeProvider*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::InteropServices::_Assembly
    operator System::Runtime::InteropServices::_Assembly() noexcept {
      return *reinterpret_cast<System::Runtime::InteropServices::_Assembly*>(this);
    }
    // private System.String get_code_base(System.Boolean escaped)
    // Offset: 0x1ABD254
    ::Il2CppString* get_code_base(bool escaped);
    // private System.String get_fullname()
    // Offset: 0x1ABD25C
    ::Il2CppString* get_fullname();
    // private System.String get_location()
    // Offset: 0x1ABD260
    ::Il2CppString* get_location();
    // static System.String GetAotId()
    // Offset: 0x1ABD264
    static ::Il2CppString* GetAotId();
    // private System.String GetCodeBase(System.Boolean escaped)
    // Offset: 0x1ABD268
    ::Il2CppString* GetCodeBase(bool escaped);
    // public System.String get_CodeBase()
    // Offset: 0x1ABD270
    ::Il2CppString* get_CodeBase_NEW();
    // public System.String get_FullName()
    // Offset: 0x1ABD278
    ::Il2CppString* get_FullName_NEW();
    // public System.String get_Location()
    // Offset: 0x1ABD284
    ::Il2CppString* get_Location_NEW();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1ABD2EC
    void GetObjectData_NEW(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x1ABD34C
    bool IsDefined_NEW(System::Type* attributeType, bool inherit);
    // public System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x1ABD3CC
    ::Array<::Il2CppObject*>* GetCustomAttributes_NEW(System::Type* attributeType, bool inherit);
    // System.IntPtr GetManifestResourceInternal(System.String name, out System.Int32 size, out System.Reflection.Module module)
    // Offset: 0x1ABD44C
    System::IntPtr GetManifestResourceInternal(::Il2CppString* name, int& size, System::Reflection::Module*& module);
    // System.Type[] GetTypes(System.Boolean exportedOnly)
    // Offset: 0x1ABD450
    ::Array<System::Type*>* GetTypes_NEW(bool exportedOnly);
    // public System.Type[] GetTypes()
    // Offset: 0x1ABD458
    ::Array<System::Type*>* GetTypes_NEW();
    // public System.Type GetType(System.String name)
    // Offset: 0x1ABD46C
    System::Type* GetType_NEW(::Il2CppString* name);
    // System.Type InternalGetType(System.Reflection.Module module, System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x1ABD484
    System::Type* InternalGetType(System::Reflection::Module* module, ::Il2CppString* name, bool throwOnError, bool ignoreCase);
    // public System.Reflection.AssemblyName GetName(System.Boolean copiedName)
    // Offset: 0x1ABD490
    System::Reflection::AssemblyName* GetName_NEW(bool copiedName);
    // public System.Reflection.AssemblyName GetName()
    // Offset: 0x1ABD4F0
    System::Reflection::AssemblyName* GetName_NEW();
    // static public System.Reflection.Assembly GetAssembly(System.Type type)
    // Offset: 0x1ABD534
    static System::Reflection::Assembly* GetAssembly(System::Type* type);
    // static public System.Reflection.Assembly Load(System.String assemblyString)
    // Offset: 0x1ABD5FC
    static System::Reflection::Assembly* Load(::Il2CppString* assemblyString);
    // static private System.Reflection.Assembly load_with_partial_name(System.String name, System.Security.Policy.Evidence e)
    // Offset: 0x1ABD630
    static System::Reflection::Assembly* load_with_partial_name(::Il2CppString* name, System::Security::Policy::Evidence* e);
    // static public System.Reflection.Assembly LoadWithPartialName(System.String partialName, System.Security.Policy.Evidence securityEvidence)
    // Offset: 0x1ABD634
    static System::Reflection::Assembly* LoadWithPartialName(::Il2CppString* partialName, System::Security::Policy::Evidence* securityEvidence);
    // static System.Reflection.Assembly LoadWithPartialName(System.String partialName, System.Security.Policy.Evidence securityEvidence, System.Boolean oldBehavior)
    // Offset: 0x1ABD63C
    static System::Reflection::Assembly* LoadWithPartialName(::Il2CppString* partialName, System::Security::Policy::Evidence* securityEvidence, bool oldBehavior);
    // System.Reflection.Module[] GetModulesInternal()
    // Offset: 0x1ABD6EC
    ::Array<System::Reflection::Module*>* GetModulesInternal_NEW();
    // static public System.Reflection.Assembly GetExecutingAssembly()
    // Offset: 0x1ABD6F0
    static System::Reflection::Assembly* GetExecutingAssembly();
    // static public System.Reflection.Assembly GetCallingAssembly()
    // Offset: 0x1ABD738
    static System::Reflection::Assembly* GetCallingAssembly();
    // static System.IntPtr InternalGetReferencedAssemblies(System.Reflection.Assembly module)
    // Offset: 0x1ABD73C
    static System::IntPtr InternalGetReferencedAssemblies(System::Reflection::Assembly* module);
    // static System.Reflection.AssemblyName[] GetReferencedAssemblies(System.Reflection.Assembly module)
    // Offset: 0x1ABD740
    static ::Array<System::Reflection::AssemblyName*>* GetReferencedAssemblies(System::Reflection::Assembly* module);
    // static private System.Exception CreateNIE()
    // Offset: 0x1ABDCD8
    static System::Exception* CreateNIE();
    // public System.Boolean get_IsFullyTrusted()
    // Offset: 0x1ABDD40
    bool get_IsFullyTrusted();
    // public System.Type GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x1ABDD48
    System::Type* GetType_NEW(::Il2CppString* name, bool throwOnError, bool ignoreCase);
    // public System.Reflection.Module GetModule(System.String name)
    // Offset: 0x1ABDD8C
    System::Reflection::Module* GetModule_NEW(::Il2CppString* name);
    // public System.Reflection.AssemblyName[] GetReferencedAssemblies()
    // Offset: 0x1ABDDD0
    ::Array<System::Reflection::AssemblyName*>* GetReferencedAssemblies_NEW();
    // public System.Reflection.Module[] GetModules(System.Boolean getResourceModules)
    // Offset: 0x1ABDE14
    ::Array<System::Reflection::Module*>* GetModules_NEW(bool getResourceModules);
    // protected System.Void .ctor()
    // Offset: 0x1ABD1FC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Assembly* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Assembly::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Assembly*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1ABD504
    // Implemented from: System.Object
    // Base method: System.String Object::ToString_NEW()
    ::Il2CppString* ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x1ABDC18
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode_NEW()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x1ABDC1C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals_NEW(System.Object o)
    bool Equals(::Il2CppObject* o);
  }; // System.Reflection.Assembly
  #pragma pack(pop)
  static check_size<sizeof(Assembly), 88 + sizeof(::Il2CppString*)> __System_Reflection_AssemblySizeCheck;
  static_assert(sizeof(Assembly) == 0x60);
  // static public System.Boolean op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right)
  // Offset: 0x1ABDE58
  bool operator ==(System::Reflection::Assembly* left, System::Reflection::Assembly& right);
  // static public System.Boolean op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right)
  // Offset: 0x1ABDEA4
  bool operator !=(System::Reflection::Assembly* left, System::Reflection::Assembly& right);
}
DEFINE_IL2CPP_ARG_TYPE(System::Reflection::Assembly*, "System.Reflection", "Assembly");
