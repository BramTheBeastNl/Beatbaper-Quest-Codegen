// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.ICustomAttributeProvider
#include "System/Reflection/ICustomAttributeProvider.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.InteropServices._Assembly
#include "System/Runtime/InteropServices/_Assembly.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: Module
  class Module;
  // Forward declaring type: AssemblyName
  class AssemblyName;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Skipping declaration: StreamingContext because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Security::Policy
namespace System::Security::Policy {
  // Forward declaring type: Evidence
  class Evidence;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.Assembly
  // [ComDefaultInterfaceAttribute] Offset: D7C0A8
  // [ComVisibleAttribute] Offset: D7C0A8
  // [ClassInterfaceAttribute] Offset: D7C0A8
  class Assembly : public ::Il2CppObject/*, public System::Reflection::ICustomAttributeProvider, public System::Runtime::Serialization::ISerializable, public System::Runtime::InteropServices::_Assembly*/ {
    public:
    // Nested type: System::Reflection::Assembly::ResolveEventHolder
    class ResolveEventHolder;
    // System.IntPtr _mono_assembly
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr mono_assembly;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.Reflection.Assembly/ResolveEventHolder resolve_event_holder
    // Size: 0x8
    // Offset: 0x18
    System::Reflection::Assembly::ResolveEventHolder* resolve_event_holder;
    // Field size check
    static_assert(sizeof(System::Reflection::Assembly::ResolveEventHolder*) == 0x8);
    // private System.Object _evidence
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* evidence;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _minimum
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* minimum;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _optional
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* optional;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _refuse
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* refuse;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _granted
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* granted;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object _denied
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* denied;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean fromByteArray
    // Size: 0x1
    // Offset: 0x50
    bool fromByteArray;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fromByteArray and: assemblyName
    char __padding8[0x7] = {};
    // private System.String assemblyName
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* assemblyName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: Assembly
    Assembly(System::IntPtr mono_assembly_ = {}, System::Reflection::Assembly::ResolveEventHolder* resolve_event_holder_ = {}, ::Il2CppObject* evidence_ = {}, ::Il2CppObject* minimum_ = {}, ::Il2CppObject* optional_ = {}, ::Il2CppObject* refuse_ = {}, ::Il2CppObject* granted_ = {}, ::Il2CppObject* denied_ = {}, bool fromByteArray_ = {}, ::Il2CppString* assemblyName_ = {}) noexcept : mono_assembly{mono_assembly_}, resolve_event_holder{resolve_event_holder_}, evidence{evidence_}, minimum{minimum_}, optional{optional_}, refuse{refuse_}, granted{granted_}, denied{denied_}, fromByteArray{fromByteArray_}, assemblyName{assemblyName_} {}
    // Creating interface conversion operator: operator System::Reflection::ICustomAttributeProvider
    operator System::Reflection::ICustomAttributeProvider() noexcept {
      return *reinterpret_cast<System::Reflection::ICustomAttributeProvider*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::InteropServices::_Assembly
    operator System::Runtime::InteropServices::_Assembly() noexcept {
      return *reinterpret_cast<System::Runtime::InteropServices::_Assembly*>(this);
    }
    // private System.String get_code_base(System.Boolean escaped)
    // Offset: 0x1C737CC
    ::Il2CppString* get_code_base(bool escaped);
    // private System.String get_fullname()
    // Offset: 0x1C737D4
    ::Il2CppString* get_fullname();
    // private System.String get_location()
    // Offset: 0x1C737D8
    ::Il2CppString* get_location();
    // static System.String GetAotId()
    // Offset: 0x1C737DC
    static ::Il2CppString* GetAotId();
    // private System.String GetCodeBase(System.Boolean escaped)
    // Offset: 0x1C737E0
    ::Il2CppString* GetCodeBase(bool escaped);
    // public System.String get_CodeBase()
    // Offset: 0x1C737E8
    ::Il2CppString* get_CodeBase();
    // public System.String get_FullName()
    // Offset: 0x1C737F0
    ::Il2CppString* get_FullName();
    // public System.String get_Location()
    // Offset: 0x1C737FC
    ::Il2CppString* get_Location();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1C73864
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x1C738C4
    bool IsDefined(System::Type* attributeType, bool inherit);
    // public System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0x1C73944
    ::Array<::Il2CppObject*>* GetCustomAttributes(System::Type* attributeType, bool inherit);
    // System.IntPtr GetManifestResourceInternal(System.String name, out System.Int32 size, out System.Reflection.Module module)
    // Offset: 0x1C739C4
    System::IntPtr GetManifestResourceInternal(::Il2CppString* name, int& size, System::Reflection::Module*& module);
    // System.Type[] GetTypes(System.Boolean exportedOnly)
    // Offset: 0x1C739C8
    ::Array<System::Type*>* GetTypes(bool exportedOnly);
    // public System.Type[] GetTypes()
    // Offset: 0x1C739D0
    ::Array<System::Type*>* GetTypes();
    // public System.Type GetType(System.String name)
    // Offset: 0x1C739E4
    System::Type* GetType(::Il2CppString* name);
    // System.Type InternalGetType(System.Reflection.Module module, System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x1C739FC
    System::Type* InternalGetType(System::Reflection::Module* module, ::Il2CppString* name, bool throwOnError, bool ignoreCase);
    // public System.Reflection.AssemblyName GetName(System.Boolean copiedName)
    // Offset: 0x1C73A08
    System::Reflection::AssemblyName* GetName(bool copiedName);
    // public System.Reflection.AssemblyName GetName()
    // Offset: 0x1C73A68
    System::Reflection::AssemblyName* GetName();
    // static public System.Reflection.Assembly GetAssembly(System.Type type)
    // Offset: 0x1C73AAC
    static System::Reflection::Assembly* GetAssembly(System::Type* type);
    // static public System.Reflection.Assembly Load(System.String assemblyString)
    // Offset: 0x1C73B74
    static System::Reflection::Assembly* Load(::Il2CppString* assemblyString);
    // static private System.Reflection.Assembly load_with_partial_name(System.String name, System.Security.Policy.Evidence e)
    // Offset: 0x1C73BA8
    static System::Reflection::Assembly* load_with_partial_name(::Il2CppString* name, System::Security::Policy::Evidence* e);
    // static public System.Reflection.Assembly LoadWithPartialName(System.String partialName, System.Security.Policy.Evidence securityEvidence)
    // Offset: 0x1C73BAC
    static System::Reflection::Assembly* LoadWithPartialName(::Il2CppString* partialName, System::Security::Policy::Evidence* securityEvidence);
    // static System.Reflection.Assembly LoadWithPartialName(System.String partialName, System.Security.Policy.Evidence securityEvidence, System.Boolean oldBehavior)
    // Offset: 0x1C73BB4
    static System::Reflection::Assembly* LoadWithPartialName(::Il2CppString* partialName, System::Security::Policy::Evidence* securityEvidence, bool oldBehavior);
    // System.Reflection.Module[] GetModulesInternal()
    // Offset: 0x1C73C64
    ::Array<System::Reflection::Module*>* GetModulesInternal();
    // static public System.Reflection.Assembly GetExecutingAssembly()
    // Offset: 0x1C73C68
    static System::Reflection::Assembly* GetExecutingAssembly();
    // static public System.Reflection.Assembly GetCallingAssembly()
    // Offset: 0x1C73CB0
    static System::Reflection::Assembly* GetCallingAssembly();
    // static System.IntPtr InternalGetReferencedAssemblies(System.Reflection.Assembly module)
    // Offset: 0x1C73CB4
    static System::IntPtr InternalGetReferencedAssemblies(System::Reflection::Assembly* module);
    // static System.Reflection.AssemblyName[] GetReferencedAssemblies(System.Reflection.Assembly module)
    // Offset: 0x1C73CB8
    static ::Array<System::Reflection::AssemblyName*>* GetReferencedAssemblies(System::Reflection::Assembly* module);
    // static private System.Exception CreateNIE()
    // Offset: 0x1C74250
    static System::Exception* CreateNIE();
    // public System.Boolean get_IsFullyTrusted()
    // Offset: 0x1C742B8
    bool get_IsFullyTrusted();
    // public System.Type GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
    // Offset: 0x1C742C0
    System::Type* GetType(::Il2CppString* name, bool throwOnError, bool ignoreCase);
    // public System.Reflection.Module GetModule(System.String name)
    // Offset: 0x1C74304
    System::Reflection::Module* GetModule(::Il2CppString* name);
    // public System.Reflection.AssemblyName[] GetReferencedAssemblies()
    // Offset: 0x1C74348
    ::Array<System::Reflection::AssemblyName*>* GetReferencedAssemblies();
    // public System.Reflection.Module[] GetModules(System.Boolean getResourceModules)
    // Offset: 0x1C7438C
    ::Array<System::Reflection::Module*>* GetModules(bool getResourceModules);
    // protected System.Void .ctor()
    // Offset: 0x1C73774
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Assembly* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::Assembly::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Assembly*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1C73A7C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0x1C74190
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0x1C74194
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
  }; // System.Reflection.Assembly
  #pragma pack(pop)
  static check_size<sizeof(Assembly), 88 + sizeof(::Il2CppString*)> __System_Reflection_AssemblySizeCheck;
  static_assert(sizeof(Assembly) == 0x60);
  // static public System.Boolean op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right)
  // Offset: 0x1C743D0
  bool operator ==(System::Reflection::Assembly* left, System::Reflection::Assembly& right);
  // static public System.Boolean op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right)
  // Offset: 0x1C7441C
  bool operator !=(System::Reflection::Assembly* left, System::Reflection::Assembly& right);
}
DEFINE_IL2CPP_ARG_TYPE(System::Reflection::Assembly*, "System.Reflection", "Assembly");
// Writing MetadataGetter for method: System::Reflection::Assembly::get_code_base
// Il2CppName: get_code_base
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::get_fullname
// Il2CppName: get_fullname
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::get_location
// Il2CppName: get_location
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetAotId
// Il2CppName: GetAotId
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetCodeBase
// Il2CppName: GetCodeBase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::get_CodeBase
// Il2CppName: get_CodeBase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::get_FullName
// Il2CppName: get_FullName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::get_Location
// Il2CppName: get_Location
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetObjectData
// Il2CppName: GetObjectData
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::IsDefined
// Il2CppName: IsDefined
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetCustomAttributes
// Il2CppName: GetCustomAttributes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetManifestResourceInternal
// Il2CppName: GetManifestResourceInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetTypes
// Il2CppName: GetTypes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetTypes
// Il2CppName: GetTypes
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetType
// Il2CppName: GetType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::InternalGetType
// Il2CppName: InternalGetType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetName
// Il2CppName: GetName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetName
// Il2CppName: GetName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetAssembly
// Il2CppName: GetAssembly
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::Load
// Il2CppName: Load
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::load_with_partial_name
// Il2CppName: load_with_partial_name
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::LoadWithPartialName
// Il2CppName: LoadWithPartialName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::LoadWithPartialName
// Il2CppName: LoadWithPartialName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModulesInternal
// Il2CppName: GetModulesInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetExecutingAssembly
// Il2CppName: GetExecutingAssembly
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetCallingAssembly
// Il2CppName: GetCallingAssembly
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::InternalGetReferencedAssemblies
// Il2CppName: InternalGetReferencedAssemblies
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetReferencedAssemblies
// Il2CppName: GetReferencedAssemblies
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::CreateNIE
// Il2CppName: CreateNIE
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::get_IsFullyTrusted
// Il2CppName: get_IsFullyTrusted
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetType
// Il2CppName: GetType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModule
// Il2CppName: GetModule
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetReferencedAssemblies
// Il2CppName: GetReferencedAssemblies
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetModules
// Il2CppName: GetModules
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Reflection::Assembly::ToString
// Il2CppName: ToString
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::GetHashCode
// Il2CppName: GetHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Reflection::Assembly::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
