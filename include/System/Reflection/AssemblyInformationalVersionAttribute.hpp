// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Reflection.AssemblyInformationalVersionAttribute
  // [AttributeUsageAttribute] Offset: D7B910
  // [ComVisibleAttribute] Offset: D7B910
  class AssemblyInformationalVersionAttribute : public System::Attribute {
    public:
    // private System.String m_informationalVersion
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_informationalVersion;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: AssemblyInformationalVersionAttribute
    AssemblyInformationalVersionAttribute(::Il2CppString* m_informationalVersion_ = {}) noexcept : m_informationalVersion{m_informationalVersion_} {}
    // Creating conversion operator: operator ::Il2CppString*
    constexpr operator ::Il2CppString*() const noexcept {
      return m_informationalVersion;
    }
    // public System.Void .ctor(System.String informationalVersion)
    // Offset: 0x1C74620
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssemblyInformationalVersionAttribute* New_ctor(::Il2CppString* informationalVersion) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::AssemblyInformationalVersionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssemblyInformationalVersionAttribute*, creationType>(informationalVersion)));
    }
  }; // System.Reflection.AssemblyInformationalVersionAttribute
  #pragma pack(pop)
  static check_size<sizeof(AssemblyInformationalVersionAttribute), 16 + sizeof(::Il2CppString*)> __System_Reflection_AssemblyInformationalVersionAttributeSizeCheck;
  static_assert(sizeof(AssemblyInformationalVersionAttribute) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(System::Reflection::AssemblyInformationalVersionAttribute*, "System.Reflection", "AssemblyInformationalVersionAttribute");
// Writing MetadataGetter for method: AssemblyInformationalVersionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssemblyInformationalVersionAttribute::*)(::Il2CppString*)>(&AssemblyInformationalVersionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssemblyInformationalVersionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssemblyInformationalVersionAttribute::*)(::Il2CppString*)>(&AssemblyInformationalVersionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssemblyInformationalVersionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
