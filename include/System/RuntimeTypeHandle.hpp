// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: RuntimeType
  class RuntimeType;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: TypeAttributes
  struct TypeAttributes;
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
  // Forward declaring type: RuntimeModule
  class RuntimeModule;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.RuntimeTypeHandle
  // [ComVisibleAttribute] Offset: D7B378
  struct RuntimeTypeHandle/*, public System::ValueType, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // private System.IntPtr value
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr value;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: RuntimeTypeHandle
    constexpr RuntimeTypeHandle(System::IntPtr value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return value;
    }
    // System.Void .ctor(System.IntPtr val)
    // Offset: 0xEF9D9C
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  RuntimeTypeHandle(System::IntPtr val)
    // System.Void .ctor(System.RuntimeType type)
    // Offset: 0xEF9DA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RuntimeTypeHandle(System::RuntimeType* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::RuntimeTypeHandle::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, type);
    }
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xEF9DC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RuntimeTypeHandle(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::RuntimeTypeHandle::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(context)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, info, context);
    }
    // public System.IntPtr get_Value()
    // Offset: 0xEF9DC8
    System::IntPtr get_Value();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xEF9DD0
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // static System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type)
    // Offset: 0x16A17E4
    static System::Reflection::TypeAttributes GetAttributes(System::RuntimeType* type);
    // static private System.Int32 GetMetadataToken(System.RuntimeType type)
    // Offset: 0x16A7438
    static int GetMetadataToken(System::RuntimeType* type);
    // static System.Int32 GetToken(System.RuntimeType type)
    // Offset: 0x16A45C4
    static int GetToken(System::RuntimeType* type);
    // static private System.Type GetGenericTypeDefinition_impl(System.RuntimeType type)
    // Offset: 0x16A743C
    static System::Type* GetGenericTypeDefinition_impl(System::RuntimeType* type);
    // static System.Type GetGenericTypeDefinition(System.RuntimeType type)
    // Offset: 0x16A2E34
    static System::Type* GetGenericTypeDefinition(System::RuntimeType* type);
    // static System.Boolean HasElementType(System.RuntimeType type)
    // Offset: 0x16A1A58
    static bool HasElementType(System::RuntimeType* type);
    // static System.Boolean HasInstantiation(System.RuntimeType type)
    // Offset: 0x16A2E3C
    static bool HasInstantiation(System::RuntimeType* type);
    // static System.Boolean IsArray(System.RuntimeType type)
    // Offset: 0x16A1BE4
    static bool IsArray(System::RuntimeType* type);
    // static System.Boolean IsByRef(System.RuntimeType type)
    // Offset: 0x16A1880
    static bool IsByRef(System::RuntimeType* type);
    // static System.Boolean IsComObject(System.RuntimeType type)
    // Offset: 0x16A7440
    static bool IsComObject(System::RuntimeType* type);
    // static System.Boolean IsInstanceOfType(System.RuntimeType type, System.Object o)
    // Offset: 0x16A148C
    static bool IsInstanceOfType(System::RuntimeType* type, ::Il2CppObject* o);
    // static System.Boolean IsPointer(System.RuntimeType type)
    // Offset: 0x16A1890
    static bool IsPointer(System::RuntimeType* type);
    // static System.Boolean IsPrimitive(System.RuntimeType type)
    // Offset: 0x16A1888
    static bool IsPrimitive(System::RuntimeType* type);
    // static System.Boolean HasReferences(System.RuntimeType type)
    // Offset: 0x16A7444
    static bool HasReferences(System::RuntimeType* type);
    // static System.Boolean IsComObject(System.RuntimeType type, System.Boolean isGenericCOM)
    // Offset: 0x16A1898
    static bool IsComObject(System::RuntimeType* type, bool isGenericCOM);
    // static System.Boolean IsContextful(System.RuntimeType type)
    // Offset: 0x16A17EC
    static bool IsContextful(System::RuntimeType* type);
    // static System.Boolean IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2)
    // Offset: 0x16A17C8
    static bool IsEquivalentTo(System::RuntimeType* rtType1, System::RuntimeType* rtType2);
    // static System.Boolean IsSzArray(System.RuntimeType type)
    // Offset: 0x16A1B90
    static bool IsSzArray(System::RuntimeType* type);
    // static System.Boolean IsInterface(System.RuntimeType type)
    // Offset: 0x16A7448
    static bool IsInterface(System::RuntimeType* type);
    // static System.Int32 GetArrayRank(System.RuntimeType type)
    // Offset: 0x16A1C94
    static int GetArrayRank(System::RuntimeType* type);
    // static System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type)
    // Offset: 0x16A1450
    static System::Reflection::RuntimeAssembly* GetAssembly(System::RuntimeType* type);
    // static System.RuntimeType GetElementType(System.RuntimeType type)
    // Offset: 0x16A1C9C
    static System::RuntimeType* GetElementType(System::RuntimeType* type);
    // static System.Reflection.RuntimeModule GetModule(System.RuntimeType type)
    // Offset: 0x16A1444
    static System::Reflection::RuntimeModule* GetModule(System::RuntimeType* type);
    // static System.Boolean IsGenericVariable(System.RuntimeType type)
    // Offset: 0x16A17D4
    static bool IsGenericVariable(System::RuntimeType* type);
    // static System.RuntimeType GetBaseType(System.RuntimeType type)
    // Offset: 0x16A17D8
    static System::RuntimeType* GetBaseType(System::RuntimeType* type);
    // static System.Boolean CanCastTo(System.RuntimeType type, System.RuntimeType target)
    // Offset: 0x16A170C
    static bool CanCastTo(System::RuntimeType* type, System::RuntimeType* target);
    // static private System.Boolean type_is_assignable_from(System.Type a, System.Type b)
    // Offset: 0x16A746C
    static bool type_is_assignable_from(System::Type* a, System::Type* b);
    // static System.Boolean IsGenericTypeDefinition(System.RuntimeType type)
    // Offset: 0x16A2CD0
    static bool IsGenericTypeDefinition(System::RuntimeType* type);
    // static System.IntPtr GetGenericParameterInfo(System.RuntimeType type)
    // Offset: 0x16A68A0
    static System::IntPtr GetGenericParameterInfo(System::RuntimeType* type);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xEF9DD8
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xEF9DE0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.RuntimeTypeHandle
  #pragma pack(pop)
  static check_size<sizeof(RuntimeTypeHandle), 0 + sizeof(System::IntPtr)> __System_RuntimeTypeHandleSizeCheck;
  static_assert(sizeof(RuntimeTypeHandle) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(System::RuntimeTypeHandle, "System", "RuntimeTypeHandle");
// Writing MetadataGetter for method: RuntimeTypeHandle::RuntimeTypeHandle
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::IntPtr)>(&RuntimeTypeHandle::RuntimeTypeHandle<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::IntPtr)>(&RuntimeTypeHandle::RuntimeTypeHandle<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::RuntimeTypeHandle
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::RuntimeType*)>(&RuntimeTypeHandle::RuntimeTypeHandle<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::RuntimeType*)>(&RuntimeTypeHandle::RuntimeTypeHandle<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::RuntimeTypeHandle
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeTypeHandle::RuntimeTypeHandle<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeTypeHandle::RuntimeTypeHandle<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (RuntimeTypeHandle::*)()>(&RuntimeTypeHandle::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeTypeHandle::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&RuntimeTypeHandle::GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::TypeAttributes (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetMetadataToken
// Il2CppName: GetMetadataToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetMetadataToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetMetadataToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetToken
// Il2CppName: GetToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetGenericTypeDefinition_impl
// Il2CppName: GetGenericTypeDefinition_impl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetGenericTypeDefinition_impl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetGenericTypeDefinition_impl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetGenericTypeDefinition
// Il2CppName: GetGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetGenericTypeDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::HasElementType
// Il2CppName: HasElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::HasElementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "HasElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::HasInstantiation
// Il2CppName: HasInstantiation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::HasInstantiation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "HasInstantiation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsArray
// Il2CppName: IsArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsByRef
// Il2CppName: IsByRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsByRef)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsByRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsComObject
// Il2CppName: IsComObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsComObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsComObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsInstanceOfType
// Il2CppName: IsInstanceOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*, ::Il2CppObject*)>(&RuntimeTypeHandle::IsInstanceOfType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsInstanceOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsPointer
// Il2CppName: IsPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsPointer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsPrimitive
// Il2CppName: IsPrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsPrimitive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsPrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::HasReferences
// Il2CppName: HasReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::HasReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "HasReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsComObject
// Il2CppName: IsComObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*, bool)>(&RuntimeTypeHandle::IsComObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsComObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsContextful
// Il2CppName: IsContextful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsContextful)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsContextful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*, System::RuntimeType*)>(&RuntimeTypeHandle::IsEquivalentTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsSzArray
// Il2CppName: IsSzArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsSzArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsSzArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsInterface
// Il2CppName: IsInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsInterface)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetArrayRank
// Il2CppName: GetArrayRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetArrayRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetArrayRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetAssembly
// Il2CppName: GetAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeAssembly* (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetAssembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetElementType
// Il2CppName: GetElementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetElementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetElementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetModule
// Il2CppName: GetModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::RuntimeModule* (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetModule)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsGenericVariable
// Il2CppName: IsGenericVariable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsGenericVariable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsGenericVariable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetBaseType
// Il2CppName: GetBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::RuntimeType* (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetBaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::CanCastTo
// Il2CppName: CanCastTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*, System::RuntimeType*)>(&RuntimeTypeHandle::CanCastTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "CanCastTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>(), ::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::type_is_assignable_from
// Il2CppName: type_is_assignable_from
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Type*, System::Type*)>(&RuntimeTypeHandle::type_is_assignable_from)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "type_is_assignable_from", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::IsGenericTypeDefinition
// Il2CppName: IsGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::RuntimeType*)>(&RuntimeTypeHandle::IsGenericTypeDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "IsGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetGenericParameterInfo
// Il2CppName: GetGenericParameterInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(System::RuntimeType*)>(&RuntimeTypeHandle::GetGenericParameterInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetGenericParameterInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::RuntimeType*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RuntimeTypeHandle::*)(::Il2CppObject*)>(&RuntimeTypeHandle::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: RuntimeTypeHandle::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RuntimeTypeHandle::*)()>(&RuntimeTypeHandle::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeTypeHandle), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
