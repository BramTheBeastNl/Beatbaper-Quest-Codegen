// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.IConvertible
  // [ComVisibleAttribute] Offset: D7A810
  // [CLSCompliantAttribute] Offset: D7A810
  class IConvertible {
    public:
    // Creating value type constructor for type: IConvertible
    IConvertible() noexcept {}
    // public System.TypeCode GetTypeCode()
    // Offset: 0xFFFFFFFF
    System::TypeCode GetTypeCode();
    // public System.Boolean ToBoolean(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    bool ToBoolean(System::IFormatProvider* provider);
    // public System.Char ToChar(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    ::Il2CppChar ToChar(System::IFormatProvider* provider);
    // public System.SByte ToSByte(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    int8_t ToSByte(System::IFormatProvider* provider);
    // public System.Byte ToByte(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    uint8_t ToByte(System::IFormatProvider* provider);
    // public System.Int16 ToInt16(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    int16_t ToInt16(System::IFormatProvider* provider);
    // public System.UInt16 ToUInt16(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    uint16_t ToUInt16(System::IFormatProvider* provider);
    // public System.Int32 ToInt32(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    int ToInt32(System::IFormatProvider* provider);
    // public System.UInt32 ToUInt32(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    uint ToUInt32(System::IFormatProvider* provider);
    // public System.Int64 ToInt64(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    int64_t ToInt64(System::IFormatProvider* provider);
    // public System.UInt64 ToUInt64(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    uint64_t ToUInt64(System::IFormatProvider* provider);
    // public System.Single ToSingle(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    float ToSingle(System::IFormatProvider* provider);
    // public System.Double ToDouble(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    double ToDouble(System::IFormatProvider* provider);
    // public System.Decimal ToDecimal(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    System::Decimal ToDecimal(System::IFormatProvider* provider);
    // public System.DateTime ToDateTime(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    System::DateTime ToDateTime(System::IFormatProvider* provider);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // public System.Object ToType(System.Type conversionType, System.IFormatProvider provider)
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* ToType(System::Type* conversionType, System::IFormatProvider* provider);
  }; // System.IConvertible
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IConvertible*, "System", "IConvertible");
// Writing MetadataGetter for method: IConvertible::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TypeCode (IConvertible::*)()>(&IConvertible::GetTypeCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConvertible::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToBoolean)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToChar
// Il2CppName: ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToSByte
// Il2CppName: ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToSByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToByte
// Il2CppName: ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToInt16
// Il2CppName: ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToUInt16
// Il2CppName: ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToUInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToUInt32
// Il2CppName: ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToUInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToUInt64
// Il2CppName: ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToUInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToSingle
// Il2CppName: ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToSingle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToDecimal
// Il2CppName: ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Decimal (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToDecimal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToDateTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConvertible::*)(System::IFormatProvider*)>(&IConvertible::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: IConvertible::ToType
// Il2CppName: ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IConvertible::*)(System::Type*, System::IFormatProvider*)>(&IConvertible::ToType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConvertible*), "ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
