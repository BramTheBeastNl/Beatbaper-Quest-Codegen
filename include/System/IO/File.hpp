// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StreamWriter
  class StreamWriter;
  // Forward declaring type: FileStream
  class FileStream;
  // Forward declaring type: FileAttributes
  struct FileAttributes;
  // Forward declaring type: FileMode
  struct FileMode;
  // Forward declaring type: FileAccess
  struct FileAccess;
  // Forward declaring type: FileShare
  struct FileShare;
  // Forward declaring type: StreamReader
  class StreamReader;
  // Forward declaring type: MonoIOStat
  struct MonoIOStat;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.File
  // [ComVisibleAttribute] Offset: D7C990
  class File : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: File
    File() noexcept {}
    // Get static field: static private System.Nullable`1<System.DateTime> defaultLocalFileTime
    static System::Nullable_1<System::DateTime> _get_defaultLocalFileTime();
    // Set static field: static private System.Nullable`1<System.DateTime> defaultLocalFileTime
    static void _set_defaultLocalFileTime(System::Nullable_1<System::DateTime> value);
    // static public System.IO.StreamWriter AppendText(System.String path)
    // Offset: 0x1948758
    static System::IO::StreamWriter* AppendText(::Il2CppString* path);
    // static public System.IO.FileStream Create(System.String path)
    // Offset: 0x1948848
    static System::IO::FileStream* Create(::Il2CppString* path);
    // static public System.IO.FileStream Create(System.String path, System.Int32 bufferSize)
    // Offset: 0x1948850
    static System::IO::FileStream* Create(::Il2CppString* path, int bufferSize);
    // static public System.IO.StreamWriter CreateText(System.String path)
    // Offset: 0x1948900
    static System::IO::StreamWriter* CreateText(::Il2CppString* path);
    // static public System.Void Delete(System.String path)
    // Offset: 0x19472B0
    static void Delete(::Il2CppString* path);
    // static public System.Boolean Exists(System.String path)
    // Offset: 0x19461B4
    static bool Exists(::Il2CppString* path);
    // static public System.IO.FileAttributes GetAttributes(System.String path)
    // Offset: 0x1948D8C
    static System::IO::FileAttributes GetAttributes(::Il2CppString* path);
    // static public System.DateTime GetCreationTime(System.String path)
    // Offset: 0x1948EF8
    static System::DateTime GetCreationTime(::Il2CppString* path);
    // static public System.DateTime GetLastWriteTime(System.String path)
    // Offset: 0x1949190
    static System::DateTime GetLastWriteTime(::Il2CppString* path);
    // static public System.IO.FileStream Open(System.String path, System.IO.FileMode mode)
    // Offset: 0x19492C8
    static System::IO::FileStream* Open(::Il2CppString* path, System::IO::FileMode mode);
    // static public System.IO.FileStream Open(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
    // Offset: 0x1949388
    static System::IO::FileStream* Open(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);
    // static public System.IO.FileStream OpenRead(System.String path)
    // Offset: 0x1949424
    static System::IO::FileStream* OpenRead(::Il2CppString* path);
    // static public System.IO.StreamReader OpenText(System.String path)
    // Offset: 0x19494A4
    static System::IO::StreamReader* OpenText(::Il2CppString* path);
    // static public System.Void Replace(System.String sourceFileName, System.String destinationFileName, System.String destinationBackupFileName)
    // Offset: 0x1949510
    static void Replace(::Il2CppString* sourceFileName, ::Il2CppString* destinationFileName, ::Il2CppString* destinationBackupFileName);
    // static public System.Void Replace(System.String sourceFileName, System.String destinationFileName, System.String destinationBackupFileName, System.Boolean ignoreMetadataErrors)
    // Offset: 0x1949518
    static void Replace(::Il2CppString* sourceFileName, ::Il2CppString* destinationFileName, ::Il2CppString* destinationBackupFileName, bool ignoreMetadataErrors);
    // static public System.Byte[] ReadAllBytes(System.String path)
    // Offset: 0x1949C48
    static ::Array<uint8_t>* ReadAllBytes(::Il2CppString* path);
    // static public System.String[] ReadAllLines(System.String path)
    // Offset: 0x1949E7C
    static ::Array<::Il2CppString*>* ReadAllLines(::Il2CppString* path);
    // static private System.String[] ReadAllLines(System.IO.StreamReader reader)
    // Offset: 0x1949F80
    static ::Array<::Il2CppString*>* ReadAllLines(System::IO::StreamReader* reader);
    // static public System.String ReadAllText(System.String path)
    // Offset: 0x194A0B4
    static ::Il2CppString* ReadAllText(::Il2CppString* path);
    // static public System.Void WriteAllBytes(System.String path, System.Byte[] bytes)
    // Offset: 0x194A1E0
    static void WriteAllBytes(::Il2CppString* path, ::Array<uint8_t>* bytes);
    // static public System.Void WriteAllLines(System.String path, System.String[] contents)
    // Offset: 0x194A308
    static void WriteAllLines(::Il2CppString* path, ::Array<::Il2CppString*>* contents);
    // static private System.Void WriteAllLines(System.IO.StreamWriter writer, System.String[] contents)
    // Offset: 0x194A4A4
    static void WriteAllLines(System::IO::StreamWriter* writer, ::Array<::Il2CppString*>* contents);
    // static public System.Void WriteAllText(System.String path, System.String contents)
    // Offset: 0x194A52C
    static void WriteAllText(::Il2CppString* path, ::Il2CppString* contents);
    // static public System.Void WriteAllText(System.String path, System.String contents, System.Text.Encoding encoding)
    // Offset: 0x194A5AC
    static void WriteAllText(::Il2CppString* path, ::Il2CppString* contents, System::Text::Encoding* encoding);
    // static private System.DateTime get_DefaultLocalFileTime()
    // Offset: 0x19490BC
    static System::DateTime get_DefaultLocalFileTime();
    // static public System.Void AppendAllLines(System.String path, System.Collections.Generic.IEnumerable`1<System.String> contents)
    // Offset: 0x194A6F4
    static void AppendAllLines(::Il2CppString* path, System::Collections::Generic::IEnumerable_1<::Il2CppString*>* contents);
    // static System.Int32 FillAttributeInfo(System.String path, ref System.IO.MonoIOStat data, System.Boolean tryagain, System.Boolean returnErrorOnNotFound)
    // Offset: 0x194AA4C
    static int FillAttributeInfo(::Il2CppString* path, System::IO::MonoIOStat& data, bool tryagain, bool returnErrorOnNotFound);
  }; // System.IO.File
  #pragma pack(pop)
  // Writing MetadataGetter for method: File::AppendText
  // Il2CppName: AppendText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (*)(::Il2CppString*)>(&File::AppendText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "AppendText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Create
  // Il2CppName: Create
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*)>(&File::Create)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Create
  // Il2CppName: Create
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, int)>(&File::Create)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: File::CreateText
  // Il2CppName: CreateText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamWriter* (*)(::Il2CppString*)>(&File::CreateText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "CreateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Delete
  // Il2CppName: Delete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&File::Delete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Exists
  // Il2CppName: Exists
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&File::Exists)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::GetAttributes
  // Il2CppName: GetAttributes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileAttributes (*)(::Il2CppString*)>(&File::GetAttributes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::GetCreationTime
  // Il2CppName: GetCreationTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(::Il2CppString*)>(&File::GetCreationTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "GetCreationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::GetLastWriteTime
  // Il2CppName: GetLastWriteTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(::Il2CppString*)>(&File::GetLastWriteTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "GetLastWriteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Open
  // Il2CppName: Open
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, System::IO::FileMode)>(&File::Open)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileMode>()});
    }
  };
  // Writing MetadataGetter for method: File::Open
  // Il2CppName: Open
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*, System::IO::FileMode, System::IO::FileAccess, System::IO::FileShare)>(&File::Open)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileMode>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileAccess>(), ::il2cpp_utils::ExtractIndependentType<System::IO::FileShare>()});
    }
  };
  // Writing MetadataGetter for method: File::OpenRead
  // Il2CppName: OpenRead
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::FileStream* (*)(::Il2CppString*)>(&File::OpenRead)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "OpenRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::OpenText
  // Il2CppName: OpenText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::StreamReader* (*)(::Il2CppString*)>(&File::OpenText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "OpenText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Replace
  // Il2CppName: Replace
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&File::Replace)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::Replace
  // Il2CppName: Replace
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, bool)>(&File::Replace)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: File::ReadAllBytes
  // Il2CppName: ReadAllBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (*)(::Il2CppString*)>(&File::ReadAllBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::ReadAllLines
  // Il2CppName: ReadAllLines
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*)>(&File::ReadAllLines)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::ReadAllLines
  // Il2CppName: ReadAllLines
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(System::IO::StreamReader*)>(&File::ReadAllLines)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::StreamReader*>()});
    }
  };
  // Writing MetadataGetter for method: File::ReadAllText
  // Il2CppName: ReadAllText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&File::ReadAllText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "ReadAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::WriteAllBytes
  // Il2CppName: WriteAllBytes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<uint8_t>*)>(&File::WriteAllBytes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: File::WriteAllLines
  // Il2CppName: WriteAllLines
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&File::WriteAllLines)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: File::WriteAllLines
  // Il2CppName: WriteAllLines
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IO::StreamWriter*, ::Array<::Il2CppString*>*)>(&File::WriteAllLines)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::StreamWriter*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: File::WriteAllText
  // Il2CppName: WriteAllText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*)>(&File::WriteAllText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: File::WriteAllText
  // Il2CppName: WriteAllText
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, System::Text::Encoding*)>(&File::WriteAllText)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "WriteAllText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::Encoding*>()});
    }
  };
  // Writing MetadataGetter for method: File::get_DefaultLocalFileTime
  // Il2CppName: get_DefaultLocalFileTime
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)()>(&File::get_DefaultLocalFileTime)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "get_DefaultLocalFileTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: File::AppendAllLines
  // Il2CppName: AppendAllLines
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&File::AppendAllLines)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "AppendAllLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
    }
  };
  // Writing MetadataGetter for method: File::FillAttributeInfo
  // Il2CppName: FillAttributeInfo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, System::IO::MonoIOStat&, bool, bool)>(&File::FillAttributeInfo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(File*), "FillAttributeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::MonoIOStat&>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IO::File*, "System.IO", "File");
