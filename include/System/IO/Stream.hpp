// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SemaphoreSlim
  class SemaphoreSlim;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Stream
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: C95124
  class Stream : public System::MarshalByRefObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::IO::Stream::ReadWriteParameters
    struct ReadWriteParameters;
    // Nested type: System::IO::Stream::ReadWriteTask
    class ReadWriteTask;
    // Nested type: System::IO::Stream::NullStream
    class NullStream;
    // Nested type: System::IO::Stream::SynchronousAsyncResult
    class SynchronousAsyncResult;
    // Nested type: System::IO::Stream::$$c
    class $$c;
    // Nested type: System::IO::Stream::$CopyToAsyncInternal$d__27
    struct $CopyToAsyncInternal$d__27;
    // private System.IO.Stream/ReadWriteTask _activeReadWriteTask
    // Size: 0x8
    // Offset: 0x18
    System::IO::Stream::ReadWriteTask* activeReadWriteTask;
    // Field size check
    static_assert(sizeof(System::IO::Stream::ReadWriteTask*) == 0x8);
    // private System.Threading.SemaphoreSlim _asyncActiveSemaphore
    // Size: 0x8
    // Offset: 0x20
    System::Threading::SemaphoreSlim* asyncActiveSemaphore;
    // Field size check
    static_assert(sizeof(System::Threading::SemaphoreSlim*) == 0x8);
    // Creating value type constructor for type: Stream
    Stream(System::IO::Stream::ReadWriteTask* activeReadWriteTask_ = {}, System::Threading::SemaphoreSlim* asyncActiveSemaphore_ = {}) noexcept : activeReadWriteTask{activeReadWriteTask_}, asyncActiveSemaphore{asyncActiveSemaphore_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // Get static field: static public readonly System.IO.Stream Null
    static System::IO::Stream* _get_Null();
    // Set static field: static public readonly System.IO.Stream Null
    static void _set_Null(System::IO::Stream* value);
    // static field const value: static private System.Int32 _DefaultCopyBufferSize
    static constexpr const int _DefaultCopyBufferSize = 81920;
    // Get static field: static private System.Int32 _DefaultCopyBufferSize
    static int _get__DefaultCopyBufferSize();
    // Set static field: static private System.Int32 _DefaultCopyBufferSize
    static void _set__DefaultCopyBufferSize(int value);
    // System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized()
    // Offset: 0x17ADB5C
    System::Threading::SemaphoreSlim* EnsureAsyncActiveSemaphoreInitialized();
    // public System.Boolean get_CanRead()
    // Offset: 0xFFFFFFFF
    bool get_CanRead_NEW();
    // public System.Boolean get_CanSeek()
    // Offset: 0xFFFFFFFF
    bool get_CanSeek_NEW();
    // public System.Boolean get_CanWrite()
    // Offset: 0xFFFFFFFF
    bool get_CanWrite_NEW();
    // public System.Int64 get_Length()
    // Offset: 0xFFFFFFFF
    int64_t get_Length_NEW();
    // public System.Int64 get_Position()
    // Offset: 0xFFFFFFFF
    int64_t get_Position_NEW();
    // public System.Void set_Position(System.Int64 value)
    // Offset: 0xFFFFFFFF
    void set_Position_NEW(int64_t value);
    // public System.Int32 get_ReadTimeout()
    // Offset: 0x17ADC4C
    int get_ReadTimeout_NEW();
    // public System.Int32 get_WriteTimeout()
    // Offset: 0x17ADCCC
    int get_WriteTimeout_NEW();
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination)
    // Offset: 0x17ADD4C
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* destination);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize)
    // Offset: 0x17ADD58
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* destination, int bufferSize);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17A9514
    System::Threading::Tasks::Task* CopyToAsync_NEW(System::IO::Stream* destination, int bufferSize, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task CopyToAsyncInternal(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17ADDEC
    System::Threading::Tasks::Task* CopyToAsyncInternal(System::IO::Stream* destination, int bufferSize, System::Threading::CancellationToken cancellationToken);
    // public System.Void Close()
    // Offset: 0x17ADF14
    void Close_NEW();
    // public System.Void Dispose()
    // Offset: 0x17ADF94
    void Dispose_NEW();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x17A8498
    void Dispose_NEW(bool disposing);
    // public System.Void Flush()
    // Offset: 0xFFFFFFFF
    void Flush_NEW();
    // public System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x17A5478
    System::IAsyncResult* BeginRead_NEW(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state);
    // System.IAsyncResult BeginReadInternal(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state, System.Boolean serializeAsynchronously)
    // Offset: 0x17ADFA4
    System::IAsyncResult* BeginReadInternal(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state, bool serializeAsynchronously);
    // public System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x17A568C
    int EndRead_NEW(System::IAsyncResult* asyncResult);
    // public System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17A6F0C
    System::Threading::Tasks::Task_1<int>* ReadAsync_NEW(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.Int32> BeginEndReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x17AE714
    System::Threading::Tasks::Task_1<int>* BeginEndReadAsync(::Array<uint8_t>* buffer, int offset, int count);
    // public System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x17A60BC
    System::IAsyncResult* BeginWrite_NEW(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state);
    // System.IAsyncResult BeginWriteInternal(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state, System.Boolean serializeAsynchronously)
    // Offset: 0x17AE8B4
    System::IAsyncResult* BeginWriteInternal(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state, bool serializeAsynchronously);
    // private System.Void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream/ReadWriteTask readWriteTask)
    // Offset: 0x17AE484
    void RunReadWriteTaskWhenReady(System::Threading::Tasks::Task* asyncWaiter, System::IO::Stream::ReadWriteTask* readWriteTask);
    // private System.Void RunReadWriteTask(System.IO.Stream/ReadWriteTask readWriteTask)
    // Offset: 0x17AE640
    void RunReadWriteTask(System::IO::Stream::ReadWriteTask* readWriteTask);
    // public System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x17A6390
    void EndWrite_NEW(System::IAsyncResult* asyncResult);
    // public System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x17AEC28
    System::Threading::Tasks::Task* WriteAsync(::Array<uint8_t>* buffer, int offset, int count);
    // public System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17A6FD0
    System::Threading::Tasks::Task* WriteAsync_NEW(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task BeginEndWriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x17AECCC
    System::Threading::Tasks::Task* BeginEndWriteAsync(::Array<uint8_t>* buffer, int offset, int count);
    // public System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0xFFFFFFFF
    int64_t Seek_NEW(int64_t offset, System::IO::SeekOrigin origin);
    // public System.Void SetLength(System.Int64 value)
    // Offset: 0xFFFFFFFF
    void SetLength_NEW(int64_t value);
    // public System.Int32 Read(in System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xFFFFFFFF
    int Read_NEW(::Array<uint8_t>*& buffer, int offset, int count);
    // public System.Int32 ReadByte()
    // Offset: 0x17AEE6C
    int ReadByte_NEW();
    // public System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xFFFFFFFF
    void Write_NEW(::Array<uint8_t>* buffer, int offset, int count);
    // public System.Void WriteByte(System.Byte value)
    // Offset: 0x17AEF10
    void WriteByte_NEW(uint8_t value);
    // System.IAsyncResult BlockingBeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x17AE1A8
    System::IAsyncResult* BlockingBeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state);
    // static System.Int32 BlockingEndRead(System.IAsyncResult asyncResult)
    // Offset: 0x17AE710
    static int BlockingEndRead(System::IAsyncResult* asyncResult);
    // System.IAsyncResult BlockingBeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
    // Offset: 0x17AEAB8
    System::IAsyncResult* BlockingBeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* callback, ::Il2CppObject* state);
    // static System.Void BlockingEndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x17AEC24
    static void BlockingEndWrite(System::IAsyncResult* asyncResult);
    // static private System.Void .cctor()
    // Offset: 0x17AF1BC
    static void _cctor();
    // protected System.Void .ctor()
    // Offset: 0x17A2AFC
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Stream* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::IO::Stream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Stream*, creationType>()));
    }
  }; // System.IO.Stream
  #pragma pack(pop)
  static check_size<sizeof(Stream), 32 + sizeof(System::Threading::SemaphoreSlim*)> __System_IO_StreamSizeCheck;
  static_assert(sizeof(Stream) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::IO::Stream*, "System.IO", "Stream");
