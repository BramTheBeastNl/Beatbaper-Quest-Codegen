// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.TextReader
#include "System/IO/TextReader.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
  // Forward declaring type: Decoder
  class Decoder;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Autogenerated type: System.IO.StreamReader
  class StreamReader : public System::IO::TextReader {
    public:
    // Nested type: System::IO::StreamReader::NullStreamReader
    class NullStreamReader;
    // Get static field: static public readonly System.IO.StreamReader Null
    static System::IO::StreamReader* _get_Null();
    // Set static field: static public readonly System.IO.StreamReader Null
    static void _set_Null(System::IO::StreamReader* value);
    // private System.IO.Stream stream
    // Offset: 0x18
    System::IO::Stream* stream;
    // private System.Text.Encoding encoding
    // Offset: 0x20
    System::Text::Encoding* encoding;
    // private System.Text.Decoder decoder
    // Offset: 0x28
    System::Text::Decoder* decoder;
    // private System.Byte[] byteBuffer
    // Offset: 0x30
    ::Array<uint8_t>* byteBuffer;
    // private System.Char[] charBuffer
    // Offset: 0x38
    ::Array<::Il2CppChar>* charBuffer;
    // private System.Byte[] _preamble
    // Offset: 0x40
    ::Array<uint8_t>* preamble;
    // private System.Int32 charPos
    // Offset: 0x48
    int charPos;
    // private System.Int32 charLen
    // Offset: 0x4C
    int charLen;
    // private System.Int32 byteLen
    // Offset: 0x50
    int byteLen;
    // private System.Int32 bytePos
    // Offset: 0x54
    int bytePos;
    // private System.Int32 _maxCharsPerBuffer
    // Offset: 0x58
    int maxCharsPerBuffer;
    // private System.Boolean _detectEncoding
    // Offset: 0x5C
    bool detectEncoding;
    // private System.Boolean _checkPreamble
    // Offset: 0x5D
    bool checkPreamble;
    // private System.Boolean _isBlocked
    // Offset: 0x5E
    bool isBlocked;
    // private System.Boolean _closable
    // Offset: 0x5F
    bool closable;
    // private System.Threading.Tasks.Task _asyncReadTask
    // Offset: 0x60
    System::Threading::Tasks::Task* asyncReadTask;
    // static System.Int32 get_DefaultBufferSize()
    // Offset: 0x100316C
    static int get_DefaultBufferSize();
    // private System.Void CheckAsyncTaskInProgress()
    // Offset: 0x1003174
    void CheckAsyncTaskInProgress();
    // public System.Void .ctor(System.IO.Stream stream)
    // Offset: 0x100328C
    static StreamReader* New_ctor(System::IO::Stream* stream);
    // public System.Void .ctor(System.IO.Stream stream, System.Boolean detectEncodingFromByteOrderMarks)
    // Offset: 0x1003294
    static StreamReader* New_ctor(System::IO::Stream* stream, bool detectEncodingFromByteOrderMarks);
    // public System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding)
    // Offset: 0x10034E4
    static StreamReader* New_ctor(System::IO::Stream* stream, System::Text::Encoding* encoding);
    // public System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize, System.Boolean leaveOpen)
    // Offset: 0x100332C
    static StreamReader* New_ctor(System::IO::Stream* stream, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
    // public System.Void .ctor(System.String path)
    // Offset: 0x10036EC
    static StreamReader* New_ctor(::CsString* path);
    // public System.Void .ctor(System.String path, System.Boolean detectEncodingFromByteOrderMarks)
    // Offset: 0x10036F4
    static StreamReader* New_ctor(::CsString* path, bool detectEncodingFromByteOrderMarks);
    // public System.Void .ctor(System.String path, System.Text.Encoding encoding)
    // Offset: 0x1003798
    static StreamReader* New_ctor(::CsString* path, System::Text::Encoding* encoding);
    // public System.Void .ctor(System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize)
    // Offset: 0x100378C
    static StreamReader* New_ctor(::CsString* path, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);
    // System.Void .ctor(System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize, System.Boolean checkHost)
    // Offset: 0x1003820
    static StreamReader* New_ctor(::CsString* path, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost);
    // private System.Void Init(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize, System.Boolean leaveOpen)
    // Offset: 0x100356C
    void Init(System::IO::Stream* stream, System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
    // System.Void Init(System.IO.Stream stream)
    // Offset: 0x1003A4C
    void Init(System::IO::Stream* stream);
    // System.Boolean get_LeaveOpen()
    // Offset: 0x1003B80
    bool get_LeaveOpen();
    // public System.Boolean get_EndOfStream()
    // Offset: 0x1003B94
    bool get_EndOfStream();
    // System.Boolean DataAvailable()
    // Offset: 0x1003D04
    bool DataAvailable();
    // private System.Void CompressBuffer(System.Int32 n)
    // Offset: 0x10042CC
    void CompressBuffer(int n);
    // private System.Void DetectEncoding()
    // Offset: 0x1004314
    void DetectEncoding();
    // private System.Boolean IsPreamble()
    // Offset: 0x1004644
    bool IsPreamble();
    // System.Int32 ReadBuffer()
    // Offset: 0x100475C
    int ReadBuffer();
    // private System.Int32 ReadBuffer(System.Char[] userBuffer, System.Int32 userOffset, System.Int32 desiredChars, System.Boolean readToUserBuffer)
    // Offset: 0x1003FDC
    int ReadBuffer(::Array<::Il2CppChar>* userBuffer, int userOffset, int desiredChars, bool& readToUserBuffer);
    // System.Void .ctor()
    // Offset: 0x100321C
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::.ctor()
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    static StreamReader* New_ctor();
    // public override System.Void Close()
    // Offset: 0x1003A7C
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::Close()
    void Close();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1003A8C
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Int32 Peek()
    // Offset: 0x1003C74
    // Implemented from: System.IO.TextReader
    // Base method: System.Int32 TextReader::Peek()
    int Peek();
    // public override System.Int32 Read()
    // Offset: 0x1003D14
    // Implemented from: System.IO.TextReader
    // Base method: System.Int32 TextReader::Read()
    int Read();
    // public override System.Int32 Read(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1003DA4
    // Implemented from: System.IO.TextReader
    // Base method: System.Int32 TextReader::Read(System.Char[] buffer, System.Int32 index, System.Int32 count)
    int Read(::Array<::Il2CppChar>*& buffer, int index, int count);
    // public override System.String ReadToEnd()
    // Offset: 0x10041F4
    // Implemented from: System.IO.TextReader
    // Base method: System.String TextReader::ReadToEnd()
    ::CsString* ReadToEnd();
    // public override System.String ReadLine()
    // Offset: 0x10048CC
    // Implemented from: System.IO.TextReader
    // Base method: System.String TextReader::ReadLine()
    ::CsString* ReadLine();
    // static private System.Void .cctor()
    // Offset: 0x1004AF0
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::.cctor()
    static void _cctor();
  }; // System.IO.StreamReader
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IO::StreamReader*, "System.IO", "StreamReader");
#pragma pack(pop)
