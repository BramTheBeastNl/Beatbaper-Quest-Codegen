// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Stream/System.IO.ReadWriteParameters
  // [TokenAttribute] Offset: FFFFFFFF
  struct Stream::ReadWriteParameters/*, public System::ValueType*/ {
    public:
    // System.Byte[] Buffer
    // Size: 0x8
    // Offset: 0x0
    ::Array<uint8_t>* Buffer;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // System.Int32 Offset
    // Size: 0x4
    // Offset: 0x8
    int Offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 Count
    // Size: 0x4
    // Offset: 0xC
    int Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ReadWriteParameters
    constexpr ReadWriteParameters(::Array<uint8_t>* Buffer_ = {}, int Offset_ = {}, int Count_ = {}) noexcept : Buffer{Buffer_}, Offset{Offset_}, Count{Count_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: System.Byte[] Buffer
    ::Array<uint8_t>* _get_Buffer();
    // Set instance field: System.Byte[] Buffer
    void _set_Buffer(::Array<uint8_t>* value);
    // Get instance field: System.Int32 Offset
    int _get_Offset();
    // Set instance field: System.Int32 Offset
    void _set_Offset(int value);
    // Get instance field: System.Int32 Count
    int _get_Count();
    // Set instance field: System.Int32 Count
    void _set_Count(int value);
  }; // System.IO.Stream/System.IO.ReadWriteParameters
  #pragma pack(pop)
  static check_size<sizeof(Stream::ReadWriteParameters), 12 + sizeof(int)> __System_IO_Stream_ReadWriteParametersSizeCheck;
  static_assert(sizeof(Stream::ReadWriteParameters) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IO::Stream::ReadWriteParameters, "System.IO", "Stream/ReadWriteParameters");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
