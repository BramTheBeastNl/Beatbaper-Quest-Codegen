// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.IWebProxy
#include "System/Net/IWebProxy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ICredentials
  class ICredentials;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.EmptyWebProxy
  class EmptyWebProxy : public ::Il2CppObject/*, public System::Net::IWebProxy*/ {
    public:
    // private System.Net.ICredentials m_credentials
    // Size: 0x8
    // Offset: 0x10
    System::Net::ICredentials* m_credentials;
    // Field size check
    static_assert(sizeof(System::Net::ICredentials*) == 0x8);
    // Creating value type constructor for type: EmptyWebProxy
    EmptyWebProxy(System::Net::ICredentials* m_credentials_ = {}) noexcept : m_credentials{m_credentials_} {}
    // Creating interface conversion operator: operator System::Net::IWebProxy
    operator System::Net::IWebProxy() noexcept {
      return *reinterpret_cast<System::Net::IWebProxy*>(this);
    }
    // Creating conversion operator: operator System::Net::ICredentials*
    constexpr operator System::Net::ICredentials*() const noexcept {
      return m_credentials;
    }
    // public System.Uri GetProxy(System.Uri uri)
    // Offset: 0x16B7244
    System::Uri* GetProxy(System::Uri* uri);
    // public System.Boolean IsBypassed(System.Uri uri)
    // Offset: 0x16B724C
    bool IsBypassed(System::Uri* uri);
    // public System.Net.ICredentials get_Credentials()
    // Offset: 0x16B7254
    System::Net::ICredentials* get_Credentials();
    // public System.Void .ctor()
    // Offset: 0x16B723C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EmptyWebProxy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::EmptyWebProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EmptyWebProxy*, creationType>()));
    }
  }; // System.Net.EmptyWebProxy
  #pragma pack(pop)
  static check_size<sizeof(EmptyWebProxy), 16 + sizeof(System::Net::ICredentials*)> __System_Net_EmptyWebProxySizeCheck;
  static_assert(sizeof(EmptyWebProxy) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::EmptyWebProxy*, "System.Net", "EmptyWebProxy");
// Writing MetadataGetter for method: EmptyWebProxy::GetProxy
// Il2CppName: GetProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Uri* (EmptyWebProxy::*)(System::Uri*)>(&EmptyWebProxy::GetProxy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyWebProxy*), "GetProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
  }
};
// Writing MetadataGetter for method: EmptyWebProxy::IsBypassed
// Il2CppName: IsBypassed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EmptyWebProxy::*)(System::Uri*)>(&EmptyWebProxy::IsBypassed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyWebProxy*), "IsBypassed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
  }
};
// Writing MetadataGetter for method: EmptyWebProxy::get_Credentials
// Il2CppName: get_Credentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::ICredentials* (EmptyWebProxy::*)()>(&EmptyWebProxy::get_Credentials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyWebProxy*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EmptyWebProxy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyWebProxy::*)()>(&EmptyWebProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyWebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EmptyWebProxy::*)()>(&EmptyWebProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EmptyWebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
