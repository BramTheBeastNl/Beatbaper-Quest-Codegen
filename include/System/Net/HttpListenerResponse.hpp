// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: CookieCollection
  class CookieCollection;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: ResponseStream
  class ResponseStream;
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
  // Forward declaring type: Cookie
  class Cookie;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: MemoryStream
  class MemoryStream;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x99
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpListenerResponse
  class HttpListenerResponse : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x10
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: content_encoding
    char __padding0[0x7] = {};
    // private System.Text.Encoding content_encoding
    // Size: 0x8
    // Offset: 0x18
    System::Text::Encoding* content_encoding;
    // Field size check
    static_assert(sizeof(System::Text::Encoding*) == 0x8);
    // private System.Int64 content_length
    // Size: 0x8
    // Offset: 0x20
    int64_t content_length;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean cl_set
    // Size: 0x1
    // Offset: 0x28
    bool cl_set;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cl_set and: content_type
    char __padding3[0x7] = {};
    // private System.String content_type
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* content_type;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Net.CookieCollection cookies
    // Size: 0x8
    // Offset: 0x38
    System::Net::CookieCollection* cookies;
    // Field size check
    static_assert(sizeof(System::Net::CookieCollection*) == 0x8);
    // private System.Net.WebHeaderCollection headers
    // Size: 0x8
    // Offset: 0x40
    System::Net::WebHeaderCollection* headers;
    // Field size check
    static_assert(sizeof(System::Net::WebHeaderCollection*) == 0x8);
    // private System.Boolean keep_alive
    // Size: 0x1
    // Offset: 0x48
    bool keep_alive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keep_alive and: output_stream
    char __padding7[0x7] = {};
    // private System.Net.ResponseStream output_stream
    // Size: 0x8
    // Offset: 0x50
    System::Net::ResponseStream* output_stream;
    // Field size check
    static_assert(sizeof(System::Net::ResponseStream*) == 0x8);
    // private System.Version version
    // Size: 0x8
    // Offset: 0x58
    System::Version* version;
    // Field size check
    static_assert(sizeof(System::Version*) == 0x8);
    // private System.String location
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppString* location;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 status_code
    // Size: 0x4
    // Offset: 0x68
    int status_code;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: status_code and: status_description
    char __padding11[0x4] = {};
    // private System.String status_description
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppString* status_description;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean chunked
    // Size: 0x1
    // Offset: 0x78
    bool chunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: chunked and: context
    char __padding13[0x7] = {};
    // private System.Net.HttpListenerContext context
    // Size: 0x8
    // Offset: 0x80
    System::Net::HttpListenerContext* context;
    // Field size check
    static_assert(sizeof(System::Net::HttpListenerContext*) == 0x8);
    // System.Boolean HeadersSent
    // Size: 0x1
    // Offset: 0x88
    bool HeadersSent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HeadersSent and: headers_lock
    char __padding15[0x7] = {};
    // System.Object headers_lock
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* headers_lock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean force_close_chunked
    // Size: 0x1
    // Offset: 0x98
    bool force_close_chunked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HttpListenerResponse
    HttpListenerResponse(bool disposed_ = {}, System::Text::Encoding* content_encoding_ = {}, int64_t content_length_ = {}, bool cl_set_ = {}, ::Il2CppString* content_type_ = {}, System::Net::CookieCollection* cookies_ = {}, System::Net::WebHeaderCollection* headers_ = {}, bool keep_alive_ = {}, System::Net::ResponseStream* output_stream_ = {}, System::Version* version_ = {}, ::Il2CppString* location_ = {}, int status_code_ = {}, ::Il2CppString* status_description_ = {}, bool chunked_ = {}, System::Net::HttpListenerContext* context_ = {}, bool HeadersSent_ = {}, ::Il2CppObject* headers_lock_ = {}, bool force_close_chunked_ = {}) noexcept : disposed{disposed_}, content_encoding{content_encoding_}, content_length{content_length_}, cl_set{cl_set_}, content_type{content_type_}, cookies{cookies_}, headers{headers_}, keep_alive{keep_alive_}, output_stream{output_stream_}, version{version_}, location{location_}, status_code{status_code_}, status_description{status_description_}, chunked{chunked_}, context{context_}, HeadersSent{HeadersSent_}, headers_lock{headers_lock_}, force_close_chunked{force_close_chunked_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.String tspecials
    static ::Il2CppString* _get_tspecials();
    // Set static field: static private System.String tspecials
    static void _set_tspecials(::Il2CppString* value);
    // System.Void .ctor(System.Net.HttpListenerContext context)
    // Offset: 0x164D630
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpListenerResponse* New_ctor(System::Net::HttpListenerContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::HttpListenerResponse::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpListenerResponse*, creationType>(context)));
    }
    // System.Boolean get_ForceCloseChunked()
    // Offset: 0x16507C0
    bool get_ForceCloseChunked();
    // public System.Text.Encoding get_ContentEncoding()
    // Offset: 0x164A604
    System::Text::Encoding* get_ContentEncoding();
    // public System.Void set_ContentLength64(System.Int64 value)
    // Offset: 0x16507C8
    void set_ContentLength64(int64_t value);
    // public System.Void set_ContentType(System.String value)
    // Offset: 0x164A1E4
    void set_ContentType(::Il2CppString* value);
    // public System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x1650908
    System::Net::WebHeaderCollection* get_Headers();
    // public System.IO.Stream get_OutputStream()
    // Offset: 0x1650910
    System::IO::Stream* get_OutputStream();
    // public System.Boolean get_SendChunked()
    // Offset: 0x1650950
    bool get_SendChunked();
    // public System.Void set_SendChunked(System.Boolean value)
    // Offset: 0x1647D18
    void set_SendChunked(bool value);
    // public System.Void set_StatusCode(System.Int32 value)
    // Offset: 0x164A0A4
    void set_StatusCode(int value);
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0x1650958
    void System_IDisposable_Dispose();
    // private System.Void Close(System.Boolean force)
    // Offset: 0x1650960
    void Close(bool force);
    // public System.Void Close()
    // Offset: 0x1650990
    void Close();
    // public System.Void Close(System.Byte[] responseEntity, System.Boolean willBlock)
    // Offset: 0x164A630
    void Close(::Array<uint8_t>* responseEntity, bool willBlock);
    // System.Void SendHeaders(System.Boolean closing, System.IO.MemoryStream ms)
    // Offset: 0x16509A4
    void SendHeaders(bool closing, System::IO::MemoryStream* ms);
    // static private System.String FormatHeaders(System.Net.WebHeaderCollection headers)
    // Offset: 0x16514A4
    static ::Il2CppString* FormatHeaders(System::Net::WebHeaderCollection* headers);
    // static private System.String CookieToClientString(System.Net.Cookie cookie)
    // Offset: 0x1651244
    static ::Il2CppString* CookieToClientString(System::Net::Cookie* cookie);
    // static private System.String QuotedString(System.Net.Cookie cookie, System.String value)
    // Offset: 0x16516F4
    static ::Il2CppString* QuotedString(System::Net::Cookie* cookie, ::Il2CppString* value);
    // static private System.Boolean IsToken(System.String value)
    // Offset: 0x16517C8
    static bool IsToken(::Il2CppString* value);
    // static private System.Void .cctor()
    // Offset: 0x16518B0
    static void _cctor();
  }; // System.Net.HttpListenerResponse
  #pragma pack(pop)
  static check_size<sizeof(HttpListenerResponse), 152 + sizeof(bool)> __System_Net_HttpListenerResponseSizeCheck;
  static_assert(sizeof(HttpListenerResponse) == 0x99);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpListenerResponse*, "System.Net", "HttpListenerResponse");
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::get_ForceCloseChunked
// Il2CppName: get_ForceCloseChunked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::get_ContentEncoding
// Il2CppName: get_ContentEncoding
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::set_ContentLength64
// Il2CppName: set_ContentLength64
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::set_ContentType
// Il2CppName: set_ContentType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::get_Headers
// Il2CppName: get_Headers
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::get_OutputStream
// Il2CppName: get_OutputStream
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::get_SendChunked
// Il2CppName: get_SendChunked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::set_SendChunked
// Il2CppName: set_SendChunked
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::set_StatusCode
// Il2CppName: set_StatusCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::Close
// Il2CppName: Close
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::Close
// Il2CppName: Close
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::Close
// Il2CppName: Close
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::SendHeaders
// Il2CppName: SendHeaders
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::FormatHeaders
// Il2CppName: FormatHeaders
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::CookieToClientString
// Il2CppName: CookieToClientString
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::QuotedString
// Il2CppName: QuotedString
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::IsToken
// Il2CppName: IsToken
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Net::HttpListenerResponse::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
