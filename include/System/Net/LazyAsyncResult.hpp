// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: WaitHandle
  class WaitHandle;
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.LazyAsyncResult
  class LazyAsyncResult : public ::Il2CppObject/*, public System::IAsyncResult*/ {
    public:
    // Nested type: System::Net::LazyAsyncResult::ThreadContext
    class ThreadContext;
    // private System.Object m_AsyncObject
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* m_AsyncObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object m_AsyncState
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* m_AsyncState;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.AsyncCallback m_AsyncCallback
    // Size: 0x8
    // Offset: 0x20
    System::AsyncCallback* m_AsyncCallback;
    // Field size check
    static_assert(sizeof(System::AsyncCallback*) == 0x8);
    // private System.Object m_Result
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* m_Result;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 m_IntCompleted
    // Size: 0x4
    // Offset: 0x30
    int m_IntCompleted;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_UserEvent
    // Size: 0x1
    // Offset: 0x34
    bool m_UserEvent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UserEvent and: m_Event
    char __padding5[0x3] = {};
    // private System.Object m_Event
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* m_Event;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: LazyAsyncResult
    LazyAsyncResult(::Il2CppObject* m_AsyncObject_ = {}, ::Il2CppObject* m_AsyncState_ = {}, System::AsyncCallback* m_AsyncCallback_ = {}, ::Il2CppObject* m_Result_ = {}, int m_IntCompleted_ = {}, bool m_UserEvent_ = {}, ::Il2CppObject* m_Event_ = {}) noexcept : m_AsyncObject{m_AsyncObject_}, m_AsyncState{m_AsyncState_}, m_AsyncCallback{m_AsyncCallback_}, m_Result{m_Result_}, m_IntCompleted{m_IntCompleted_}, m_UserEvent{m_UserEvent_}, m_Event{m_Event_} {}
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // [ThreadStaticAttribute] Offset: 0xD88924
    // Get static field: static private System.Net.LazyAsyncResult/ThreadContext t_ThreadContext
    static System::Net::LazyAsyncResult::ThreadContext* _get_t_ThreadContext();
    // Set static field: static private System.Net.LazyAsyncResult/ThreadContext t_ThreadContext
    static void _set_t_ThreadContext(System::Net::LazyAsyncResult::ThreadContext* value);
    // static private System.Net.LazyAsyncResult/ThreadContext get_CurrentThreadContext()
    // Offset: 0x165A2F8
    static System::Net::LazyAsyncResult::ThreadContext* get_CurrentThreadContext();
    // System.Void .ctor(System.Object myObject, System.Object myState, System.AsyncCallback myCallBack)
    // Offset: 0x165A380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LazyAsyncResult* New_ctor(::Il2CppObject* myObject, ::Il2CppObject* myState, System::AsyncCallback* myCallBack) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::LazyAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LazyAsyncResult*, creationType>(myObject, myState, myCallBack)));
    }
    // System.Object get_AsyncObject()
    // Offset: 0x165A420
    ::Il2CppObject* get_AsyncObject();
    // public System.Object get_AsyncState()
    // Offset: 0x165A428
    ::Il2CppObject* get_AsyncState();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x165A430
    System::Threading::WaitHandle* get_AsyncWaitHandle();
    // private System.Boolean LazilyCreateEvent(out System.Threading.ManualResetEvent waitHandle)
    // Offset: 0x165A4E4
    bool LazilyCreateEvent(System::Threading::ManualResetEvent*& waitHandle);
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x165A6B4
    bool get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x165A6E8
    bool get_IsCompleted();
    // System.Boolean get_InternalPeekCompleted()
    // Offset: 0x165A6A4
    bool get_InternalPeekCompleted();
    // protected System.Void ProtectedInvokeCallback(System.Object result, System.IntPtr userToken)
    // Offset: 0x165A71C
    void ProtectedInvokeCallback(::Il2CppObject* result, System::IntPtr userToken);
    // System.Void InvokeCallback(System.Object result)
    // Offset: 0x165A8FC
    void InvokeCallback(::Il2CppObject* result);
    // protected System.Void Complete(System.IntPtr userToken)
    // Offset: 0x165A954
    void Complete(System::IntPtr userToken);
    // private System.Void WorkerThreadComplete(System.Object state)
    // Offset: 0x165AA84
    void WorkerThreadComplete(::Il2CppObject* state);
    // protected System.Void Cleanup()
    // Offset: 0x165AAF8
    void Cleanup();
    // System.Object InternalWaitForCompletion()
    // Offset: 0x165AAFC
    ::Il2CppObject* InternalWaitForCompletion();
    // private System.Object WaitForCompletion(System.Boolean snap)
    // Offset: 0x165AB04
    ::Il2CppObject* WaitForCompletion(bool snap);
  }; // System.Net.LazyAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(LazyAsyncResult), 56 + sizeof(::Il2CppObject*)> __System_Net_LazyAsyncResultSizeCheck;
  static_assert(sizeof(LazyAsyncResult) == 0x40);
  // Writing MetadataGetter for method: LazyAsyncResult::get_CurrentThreadContext
  // Il2CppName: get_CurrentThreadContext
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::LazyAsyncResult::ThreadContext* (*)()>(&LazyAsyncResult::get_CurrentThreadContext)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_CurrentThreadContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)(::Il2CppObject*, ::Il2CppObject*, System::AsyncCallback*)>(&LazyAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)(::Il2CppObject*, ::Il2CppObject*, System::AsyncCallback*)>(&LazyAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>()});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::get_AsyncObject
  // Il2CppName: get_AsyncObject
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LazyAsyncResult::*)()>(&LazyAsyncResult::get_AsyncObject)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_AsyncObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::get_AsyncState
  // Il2CppName: get_AsyncState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LazyAsyncResult::*)()>(&LazyAsyncResult::get_AsyncState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::get_AsyncWaitHandle
  // Il2CppName: get_AsyncWaitHandle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::WaitHandle* (LazyAsyncResult::*)()>(&LazyAsyncResult::get_AsyncWaitHandle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::LazilyCreateEvent
  // Il2CppName: LazilyCreateEvent
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LazyAsyncResult::*)(System::Threading::ManualResetEvent*&)>(&LazyAsyncResult::LazilyCreateEvent)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "LazilyCreateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::ManualResetEvent*&>()});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::get_CompletedSynchronously
  // Il2CppName: get_CompletedSynchronously
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LazyAsyncResult::*)()>(&LazyAsyncResult::get_CompletedSynchronously)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::get_IsCompleted
  // Il2CppName: get_IsCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LazyAsyncResult::*)()>(&LazyAsyncResult::get_IsCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::get_InternalPeekCompleted
  // Il2CppName: get_InternalPeekCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LazyAsyncResult::*)()>(&LazyAsyncResult::get_InternalPeekCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "get_InternalPeekCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::ProtectedInvokeCallback
  // Il2CppName: ProtectedInvokeCallback
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)(::Il2CppObject*, System::IntPtr)>(&LazyAsyncResult::ProtectedInvokeCallback)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "ProtectedInvokeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::InvokeCallback
  // Il2CppName: InvokeCallback
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)(::Il2CppObject*)>(&LazyAsyncResult::InvokeCallback)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "InvokeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::Complete
  // Il2CppName: Complete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)(System::IntPtr)>(&LazyAsyncResult::Complete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::WorkerThreadComplete
  // Il2CppName: WorkerThreadComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)(::Il2CppObject*)>(&LazyAsyncResult::WorkerThreadComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "WorkerThreadComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::Cleanup
  // Il2CppName: Cleanup
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LazyAsyncResult::*)()>(&LazyAsyncResult::Cleanup)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::InternalWaitForCompletion
  // Il2CppName: InternalWaitForCompletion
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LazyAsyncResult::*)()>(&LazyAsyncResult::InternalWaitForCompletion)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "InternalWaitForCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: LazyAsyncResult::WaitForCompletion
  // Il2CppName: WaitForCompletion
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LazyAsyncResult::*)(bool)>(&LazyAsyncResult::WaitForCompletion)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(LazyAsyncResult*), "WaitForCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::LazyAsyncResult*, "System.Net", "LazyAsyncResult");
