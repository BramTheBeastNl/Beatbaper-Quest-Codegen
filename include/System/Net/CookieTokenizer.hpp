// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.CookieToken
#include "System/Net/CookieToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x48
  // Autogenerated type: System.Net.CookieTokenizer
  // [] Offset: FFFFFFFF
  class CookieTokenizer : public ::Il2CppObject {
    public:
    // Nested type: System::Net::CookieTokenizer::RecognizedAttribute
    struct RecognizedAttribute;
    // private System.Boolean m_eofCookie
    // Size: 0x1
    // Offset: 0x10
    bool m_eofCookie;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_eofCookie and: m_index
    private: char __padding0[0x3] = {};
    public:
    // private System.Int32 m_index
    // Size: 0x4
    // Offset: 0x14
    int m_index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_length
    // Size: 0x4
    // Offset: 0x18
    int m_length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_length and: m_name
    private: char __padding2[0x4] = {};
    public:
    // private System.String m_name
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean m_quoted
    // Size: 0x1
    // Offset: 0x28
    bool m_quoted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_quoted and: m_start
    private: char __padding4[0x3] = {};
    public:
    // private System.Int32 m_start
    // Size: 0x4
    // Offset: 0x2C
    int m_start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.CookieToken m_token
    // Size: 0x4
    // Offset: 0x30
    System::Net::CookieToken m_token;
    // Field size check
    static_assert(sizeof(System::Net::CookieToken) == 0x4);
    // private System.Int32 m_tokenLength
    // Size: 0x4
    // Offset: 0x34
    int m_tokenLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String m_tokenStream
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* m_tokenStream;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_value
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* m_value;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: CookieTokenizer
    CookieTokenizer(bool m_eofCookie_ = {}, int m_index_ = {}, int m_length_ = {}, ::Il2CppString* m_name_ = {}, bool m_quoted_ = {}, int m_start_ = {}, System::Net::CookieToken m_token_ = {}, int m_tokenLength_ = {}, ::Il2CppString* m_tokenStream_ = {}, ::Il2CppString* m_value_ = {}) noexcept : m_eofCookie{m_eofCookie_}, m_index{m_index_}, m_length{m_length_}, m_name{m_name_}, m_quoted{m_quoted_}, m_start{m_start_}, m_token{m_token_}, m_tokenLength{m_tokenLength_}, m_tokenStream{m_tokenStream_}, m_value{m_value_} {}
    // Get static field: static private System.Net.CookieTokenizer/RecognizedAttribute[] RecognizedAttributes
    static ::Array<System::Net::CookieTokenizer::RecognizedAttribute>* _get_RecognizedAttributes();
    // Set static field: static private System.Net.CookieTokenizer/RecognizedAttribute[] RecognizedAttributes
    static void _set_RecognizedAttributes(::Array<System::Net::CookieTokenizer::RecognizedAttribute>* value);
    // Get static field: static private System.Net.CookieTokenizer/RecognizedAttribute[] RecognizedServerAttributes
    static ::Array<System::Net::CookieTokenizer::RecognizedAttribute>* _get_RecognizedServerAttributes();
    // Set static field: static private System.Net.CookieTokenizer/RecognizedAttribute[] RecognizedServerAttributes
    static void _set_RecognizedServerAttributes(::Array<System::Net::CookieTokenizer::RecognizedAttribute>* value);
    // System.Void .ctor(System.String tokenStream)
    // Offset: 0x1314618
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CookieTokenizer* New_ctor(::Il2CppString* tokenStream) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("System::Net").WithContext("CookieTokenizer").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CookieTokenizer*, creationType>(tokenStream)));
    }
    // System.Boolean get_EndOfCookie()
    // Offset: 0x1314798
    bool get_EndOfCookie();
    // System.Void set_EndOfCookie(System.Boolean value)
    // Offset: 0x13147A0
    void set_EndOfCookie(bool value);
    // System.Boolean get_Eof()
    // Offset: 0x1314788
    bool get_Eof();
    // System.String get_Name()
    // Offset: 0x13147AC
    ::Il2CppString* get_Name();
    // System.Void set_Name(System.String value)
    // Offset: 0x13147B4
    void set_Name(::Il2CppString* value);
    // System.Boolean get_Quoted()
    // Offset: 0x13147BC
    bool get_Quoted();
    // System.Void set_Quoted(System.Boolean value)
    // Offset: 0x13147C4
    void set_Quoted(bool value);
    // System.Net.CookieToken get_Token()
    // Offset: 0x13147D0
    System::Net::CookieToken get_Token();
    // System.Void set_Token(System.Net.CookieToken value)
    // Offset: 0x13147D8
    void set_Token(System::Net::CookieToken value);
    // System.String get_Value()
    // Offset: 0x13147E0
    ::Il2CppString* get_Value();
    // System.Void set_Value(System.String value)
    // Offset: 0x13147E8
    void set_Value(::Il2CppString* value);
    // System.String Extract()
    // Offset: 0x13147F0
    ::Il2CppString* Extract();
    // System.Net.CookieToken FindNext(System.Boolean ignoreComma, System.Boolean ignoreEquals)
    // Offset: 0x1314880
    System::Net::CookieToken FindNext(bool ignoreComma, bool ignoreEquals);
    // System.Net.CookieToken Next(System.Boolean first, System.Boolean parseResponseCookies)
    // Offset: 0x131465C
    System::Net::CookieToken Next(bool first, bool parseResponseCookies);
    // System.Void Reset()
    // Offset: 0x1314B3C
    void Reset();
    // System.Net.CookieToken TokenFromName(System.Boolean parseResponseCookies)
    // Offset: 0x1314BC4
    System::Net::CookieToken TokenFromName(bool parseResponseCookies);
    // static private System.Void .cctor()
    // Offset: 0x1314DF4
    static void _cctor();
  }; // System.Net.CookieTokenizer
  static check_size<sizeof(CookieTokenizer), 64 + sizeof(::Il2CppString*)> __System_Net_CookieTokenizerSizeCheck;
  static_assert(sizeof(CookieTokenizer) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::CookieTokenizer*, "System.Net", "CookieTokenizer");
#pragma pack(pop)
