// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: FtpWebResponse
  class FtpWebResponse;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.FtpAsyncResult
  class FtpAsyncResult : public ::Il2CppObject/*, public System::IAsyncResult*/ {
    public:
    // private System.Net.FtpWebResponse response
    // Size: 0x8
    // Offset: 0x10
    System::Net::FtpWebResponse* response;
    // Field size check
    static_assert(sizeof(System::Net::FtpWebResponse*) == 0x8);
    // private System.Threading.ManualResetEvent waitHandle
    // Size: 0x8
    // Offset: 0x18
    System::Threading::ManualResetEvent* waitHandle;
    // Field size check
    static_assert(sizeof(System::Threading::ManualResetEvent*) == 0x8);
    // private System.Exception exception
    // Size: 0x8
    // Offset: 0x20
    System::Exception* exception;
    // Field size check
    static_assert(sizeof(System::Exception*) == 0x8);
    // private System.AsyncCallback callback
    // Size: 0x8
    // Offset: 0x28
    System::AsyncCallback* callback;
    // Field size check
    static_assert(sizeof(System::AsyncCallback*) == 0x8);
    // private System.IO.Stream stream
    // Size: 0x8
    // Offset: 0x30
    System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // private System.Object state
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppObject* state;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean completed
    // Size: 0x1
    // Offset: 0x40
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean synch
    // Size: 0x1
    // Offset: 0x41
    bool synch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: synch and: locker
    char __padding7[0x6] = {};
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: FtpAsyncResult
    FtpAsyncResult(System::Net::FtpWebResponse* response_ = {}, System::Threading::ManualResetEvent* waitHandle_ = {}, System::Exception* exception_ = {}, System::AsyncCallback* callback_ = {}, System::IO::Stream* stream_ = {}, ::Il2CppObject* state_ = {}, bool completed_ = {}, bool synch_ = {}, ::Il2CppObject* locker_ = {}) noexcept : response{response_}, waitHandle{waitHandle_}, exception{exception_}, callback{callback_}, stream{stream_}, state{state_}, completed{completed_}, synch{synch_}, locker{locker_} {}
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // public System.Void .ctor(System.AsyncCallback callback, System.Object state)
    // Offset: 0x16BD890
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpAsyncResult* New_ctor(System::AsyncCallback* callback, ::Il2CppObject* state) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::FtpAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpAsyncResult*, creationType>(callback, state)));
    }
    // public System.Object get_AsyncState()
    // Offset: 0x16BD914
    ::Il2CppObject* get_AsyncState();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x16BD91C
    System::Threading::WaitHandle* get_AsyncWaitHandle();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x16BDA04
    bool get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x16BDA0C
    bool get_IsCompleted();
    // System.Boolean get_GotException()
    // Offset: 0x16BDAA0
    bool get_GotException();
    // System.Exception get_Exception()
    // Offset: 0x16BDAB0
    System::Exception* get_Exception();
    // System.Net.FtpWebResponse get_Response()
    // Offset: 0x16BDAB8
    System::Net::FtpWebResponse* get_Response();
    // System.IO.Stream get_Stream()
    // Offset: 0x16BDAC0
    System::IO::Stream* get_Stream();
    // System.Void set_Stream(System.IO.Stream value)
    // Offset: 0x16BDAC8
    void set_Stream(System::IO::Stream* value);
    // System.Boolean WaitUntilComplete(System.Int32 timeout, System.Boolean exitContext)
    // Offset: 0x16BDAD0
    bool WaitUntilComplete(int timeout, bool exitContext);
    // System.Void SetCompleted(System.Boolean synch, System.Exception exc, System.Net.FtpWebResponse response)
    // Offset: 0x16BDB38
    void SetCompleted(bool synch, System::Exception* exc, System::Net::FtpWebResponse* response);
    // System.Void SetCompleted(System.Boolean synch, System.Net.FtpWebResponse response)
    // Offset: 0x16BDCBC
    void SetCompleted(bool synch, System::Net::FtpWebResponse* response);
    // System.Void SetCompleted(System.Boolean synch, System.Exception exc)
    // Offset: 0x16BDCCC
    void SetCompleted(bool synch, System::Exception* exc);
    // System.Void DoCallback()
    // Offset: 0x16BDBF4
    void DoCallback();
  }; // System.Net.FtpAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(FtpAsyncResult), 72 + sizeof(::Il2CppObject*)> __System_Net_FtpAsyncResultSizeCheck;
  static_assert(sizeof(FtpAsyncResult) == 0x50);
  // Writing MetadataGetter for method: FtpAsyncResult::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)(System::AsyncCallback*, ::Il2CppObject*)>(&FtpAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)(System::AsyncCallback*, ::Il2CppObject*)>(&FtpAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_AsyncState
  // Il2CppName: get_AsyncState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FtpAsyncResult::*)()>(&FtpAsyncResult::get_AsyncState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_AsyncWaitHandle
  // Il2CppName: get_AsyncWaitHandle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::WaitHandle* (FtpAsyncResult::*)()>(&FtpAsyncResult::get_AsyncWaitHandle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_CompletedSynchronously
  // Il2CppName: get_CompletedSynchronously
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FtpAsyncResult::*)()>(&FtpAsyncResult::get_CompletedSynchronously)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_IsCompleted
  // Il2CppName: get_IsCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FtpAsyncResult::*)()>(&FtpAsyncResult::get_IsCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_GotException
  // Il2CppName: get_GotException
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FtpAsyncResult::*)()>(&FtpAsyncResult::get_GotException)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_GotException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_Exception
  // Il2CppName: get_Exception
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Exception* (FtpAsyncResult::*)()>(&FtpAsyncResult::get_Exception)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_Response
  // Il2CppName: get_Response
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::FtpWebResponse* (FtpAsyncResult::*)()>(&FtpAsyncResult::get_Response)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_Response", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::get_Stream
  // Il2CppName: get_Stream
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::Stream* (FtpAsyncResult::*)()>(&FtpAsyncResult::get_Stream)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "get_Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::set_Stream
  // Il2CppName: set_Stream
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)(System::IO::Stream*)>(&FtpAsyncResult::set_Stream)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "set_Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::WaitUntilComplete
  // Il2CppName: WaitUntilComplete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FtpAsyncResult::*)(int, bool)>(&FtpAsyncResult::WaitUntilComplete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "WaitUntilComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::SetCompleted
  // Il2CppName: SetCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)(bool, System::Exception*, System::Net::FtpWebResponse*)>(&FtpAsyncResult::SetCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "SetCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::FtpWebResponse*>()});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::SetCompleted
  // Il2CppName: SetCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)(bool, System::Net::FtpWebResponse*)>(&FtpAsyncResult::SetCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "SetCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Net::FtpWebResponse*>()});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::SetCompleted
  // Il2CppName: SetCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)(bool, System::Exception*)>(&FtpAsyncResult::SetCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "SetCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
    }
  };
  // Writing MetadataGetter for method: FtpAsyncResult::DoCallback
  // Il2CppName: DoCallback
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FtpAsyncResult::*)()>(&FtpAsyncResult::DoCallback)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FtpAsyncResult*), "DoCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::FtpAsyncResult*, "System.Net", "FtpAsyncResult");
