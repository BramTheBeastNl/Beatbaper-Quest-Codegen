// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: WaitCallback
  class WaitCallback;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x52
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ListenerAsyncResult
  class ListenerAsyncResult : public ::Il2CppObject/*, public System::IAsyncResult*/ {
    public:
    // private System.Threading.ManualResetEvent handle
    // Size: 0x8
    // Offset: 0x10
    System::Threading::ManualResetEvent* handle;
    // Field size check
    static_assert(sizeof(System::Threading::ManualResetEvent*) == 0x8);
    // private System.Boolean synch
    // Size: 0x1
    // Offset: 0x18
    bool synch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean completed
    // Size: 0x1
    // Offset: 0x19
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: completed and: cb
    char __padding2[0x6] = {};
    // private System.AsyncCallback cb
    // Size: 0x8
    // Offset: 0x20
    System::AsyncCallback* cb;
    // Field size check
    static_assert(sizeof(System::AsyncCallback*) == 0x8);
    // private System.Object state
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* state;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Exception exception
    // Size: 0x8
    // Offset: 0x30
    System::Exception* exception;
    // Field size check
    static_assert(sizeof(System::Exception*) == 0x8);
    // private System.Net.HttpListenerContext context
    // Size: 0x8
    // Offset: 0x38
    System::Net::HttpListenerContext* context;
    // Field size check
    static_assert(sizeof(System::Net::HttpListenerContext*) == 0x8);
    // private System.Object locker
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.ListenerAsyncResult forward
    // Size: 0x8
    // Offset: 0x48
    System::Net::ListenerAsyncResult* forward;
    // Field size check
    static_assert(sizeof(System::Net::ListenerAsyncResult*) == 0x8);
    // System.Boolean EndCalled
    // Size: 0x1
    // Offset: 0x50
    bool EndCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean InGet
    // Size: 0x1
    // Offset: 0x51
    bool InGet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ListenerAsyncResult
    ListenerAsyncResult(System::Threading::ManualResetEvent* handle_ = {}, bool synch_ = {}, bool completed_ = {}, System::AsyncCallback* cb_ = {}, ::Il2CppObject* state_ = {}, System::Exception* exception_ = {}, System::Net::HttpListenerContext* context_ = {}, ::Il2CppObject* locker_ = {}, System::Net::ListenerAsyncResult* forward_ = {}, bool EndCalled_ = {}, bool InGet_ = {}) noexcept : handle{handle_}, synch{synch_}, completed{completed_}, cb{cb_}, state{state_}, exception{exception_}, context{context_}, locker{locker_}, forward{forward_}, EndCalled{EndCalled_}, InGet{InGet_} {}
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // Get static field: static private System.Threading.WaitCallback InvokeCB
    static System::Threading::WaitCallback* _get_InvokeCB();
    // Set static field: static private System.Threading.WaitCallback InvokeCB
    static void _set_InvokeCB(System::Threading::WaitCallback* value);
    // public System.Void .ctor(System.AsyncCallback cb, System.Object state)
    // Offset: 0x164C48C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListenerAsyncResult* New_ctor(System::AsyncCallback* cb, ::Il2CppObject* state) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::ListenerAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListenerAsyncResult*, creationType>(cb, state)));
    }
    // System.Void Complete(System.Exception exc)
    // Offset: 0x164C06C
    void Complete(System::Exception* exc);
    // static private System.Void InvokeCallback(System.Object o)
    // Offset: 0x165AD94
    static void InvokeCallback(::Il2CppObject* o);
    // System.Void Complete(System.Net.HttpListenerContext context)
    // Offset: 0x164D36C
    void Complete(System::Net::HttpListenerContext* context);
    // System.Void Complete(System.Net.HttpListenerContext context, System.Boolean synch)
    // Offset: 0x164C5D8
    void Complete(System::Net::HttpListenerContext* context, bool synch);
    // System.Net.HttpListenerContext GetContext()
    // Offset: 0x164CF7C
    System::Net::HttpListenerContext* GetContext();
    // public System.Object get_AsyncState()
    // Offset: 0x165AEE8
    ::Il2CppObject* get_AsyncState();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x164CE78
    System::Threading::WaitHandle* get_AsyncWaitHandle();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x165AEFC
    bool get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x164CDCC
    bool get_IsCompleted();
    // static private System.Void .cctor()
    // Offset: 0x165AF10
    static void _cctor();
  }; // System.Net.ListenerAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(ListenerAsyncResult), 81 + sizeof(bool)> __System_Net_ListenerAsyncResultSizeCheck;
  static_assert(sizeof(ListenerAsyncResult) == 0x52);
  // Writing MetadataGetter for method: ListenerAsyncResult::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListenerAsyncResult::*)(System::AsyncCallback*, ::Il2CppObject*)>(&ListenerAsyncResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListenerAsyncResult::*)(System::AsyncCallback*, ::Il2CppObject*)>(&ListenerAsyncResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::Complete
  // Il2CppName: Complete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListenerAsyncResult::*)(System::Exception*)>(&ListenerAsyncResult::Complete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Exception*>()});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::InvokeCallback
  // Il2CppName: InvokeCallback
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&ListenerAsyncResult::InvokeCallback)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "InvokeCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::Complete
  // Il2CppName: Complete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListenerAsyncResult::*)(System::Net::HttpListenerContext*)>(&ListenerAsyncResult::Complete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::HttpListenerContext*>()});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::Complete
  // Il2CppName: Complete
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ListenerAsyncResult::*)(System::Net::HttpListenerContext*, bool)>(&ListenerAsyncResult::Complete)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::HttpListenerContext*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::GetContext
  // Il2CppName: GetContext
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::HttpListenerContext* (ListenerAsyncResult::*)()>(&ListenerAsyncResult::GetContext)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "GetContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::get_AsyncState
  // Il2CppName: get_AsyncState
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ListenerAsyncResult::*)()>(&ListenerAsyncResult::get_AsyncState)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "get_AsyncState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::get_AsyncWaitHandle
  // Il2CppName: get_AsyncWaitHandle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::WaitHandle* (ListenerAsyncResult::*)()>(&ListenerAsyncResult::get_AsyncWaitHandle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "get_AsyncWaitHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::get_CompletedSynchronously
  // Il2CppName: get_CompletedSynchronously
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ListenerAsyncResult::*)()>(&ListenerAsyncResult::get_CompletedSynchronously)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "get_CompletedSynchronously", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::get_IsCompleted
  // Il2CppName: get_IsCompleted
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ListenerAsyncResult::*)()>(&ListenerAsyncResult::get_IsCompleted)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), "get_IsCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ListenerAsyncResult::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ListenerAsyncResult::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ListenerAsyncResult*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::ListenerAsyncResult*, "System.Net", "ListenerAsyncResult");
