// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.IWebProxy
#include "System/Net/IWebProxy.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: AutoWebProxyScriptEngine
  class AutoWebProxyScriptEngine;
}
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebProxy
  class WebProxy : public ::Il2CppObject/*, public System::Net::IWebProxy, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // private System.Boolean _UseRegistry
    // Size: 0x1
    // Offset: 0x10
    bool UseRegistry;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _BypassOnLocal
    // Size: 0x1
    // Offset: 0x11
    bool BypassOnLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_EnableAutoproxy
    // Size: 0x1
    // Offset: 0x12
    bool m_EnableAutoproxy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableAutoproxy and: ProxyAddress
    char __padding2[0x5] = {};
    // private System.Uri _ProxyAddress
    // Size: 0x8
    // Offset: 0x18
    System::Uri* ProxyAddress;
    // Field size check
    static_assert(sizeof(System::Uri*) == 0x8);
    // private System.Collections.ArrayList _BypassList
    // Size: 0x8
    // Offset: 0x20
    System::Collections::ArrayList* BypassList;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.Net.ICredentials _Credentials
    // Size: 0x8
    // Offset: 0x28
    System::Net::ICredentials* Credentials;
    // Field size check
    static_assert(sizeof(System::Net::ICredentials*) == 0x8);
    // private System.Text.RegularExpressions.Regex[] _RegExBypassList
    // Size: 0x8
    // Offset: 0x30
    ::Array<System::Text::RegularExpressions::Regex*>* RegExBypassList;
    // Field size check
    static_assert(sizeof(::Array<System::Text::RegularExpressions::Regex*>*) == 0x8);
    // private System.Collections.Hashtable _ProxyHostAddresses
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Hashtable* ProxyHostAddresses;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // private System.Net.AutoWebProxyScriptEngine m_ScriptEngine
    // Size: 0x8
    // Offset: 0x40
    System::Net::AutoWebProxyScriptEngine* m_ScriptEngine;
    // Field size check
    static_assert(sizeof(System::Net::AutoWebProxyScriptEngine*) == 0x8);
    // Creating value type constructor for type: WebProxy
    WebProxy(bool UseRegistry_ = {}, bool BypassOnLocal_ = {}, bool m_EnableAutoproxy_ = {}, System::Uri* ProxyAddress_ = {}, System::Collections::ArrayList* BypassList_ = {}, System::Net::ICredentials* Credentials_ = {}, ::Array<System::Text::RegularExpressions::Regex*>* RegExBypassList_ = {}, System::Collections::Hashtable* ProxyHostAddresses_ = {}, System::Net::AutoWebProxyScriptEngine* m_ScriptEngine_ = {}) noexcept : UseRegistry{UseRegistry_}, BypassOnLocal{BypassOnLocal_}, m_EnableAutoproxy{m_EnableAutoproxy_}, ProxyAddress{ProxyAddress_}, BypassList{BypassList_}, Credentials{Credentials_}, RegExBypassList{RegExBypassList_}, ProxyHostAddresses{ProxyHostAddresses_}, m_ScriptEngine{m_ScriptEngine_} {}
    // Creating interface conversion operator: operator System::Net::IWebProxy
    operator System::Net::IWebProxy() noexcept {
      return *reinterpret_cast<System::Net::IWebProxy*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // public System.Void .ctor(System.Uri Address, System.Boolean BypassOnLocal, System.String[] BypassList, System.Net.ICredentials Credentials)
    // Offset: 0x15C944C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebProxy* New_ctor(System::Uri* Address, bool BypassOnLocal, ::Array<::Il2CppString*>* BypassList, System::Net::ICredentials* Credentials) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebProxy*, creationType>(Address, BypassOnLocal, BypassList, Credentials)));
    }
    // public System.Net.ICredentials get_Credentials()
    // Offset: 0x15C973C
    System::Net::ICredentials* get_Credentials();
    // public System.Boolean get_UseDefaultCredentials()
    // Offset: 0x15C9744
    bool get_UseDefaultCredentials();
    // public System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x15C97C8
    void set_UseDefaultCredentials(bool value);
    // public System.Uri GetProxy(System.Uri destination)
    // Offset: 0x15C9850
    System::Uri* GetProxy(System::Uri* destination);
    // private System.Void UpdateRegExList(System.Boolean canThrow)
    // Offset: 0x15C9504
    void UpdateRegExList(bool canThrow);
    // private System.Boolean IsMatchInBypassList(System.Uri input)
    // Offset: 0x15C9C70
    bool IsMatchInBypassList(System::Uri* input);
    // private System.Boolean IsLocal(System.Uri host)
    // Offset: 0x15C9E08
    bool IsLocal(System::Uri* host);
    // private System.Boolean IsLocalInProxyHash(System.Uri host)
    // Offset: 0x15C9F78
    bool IsLocalInProxyHash(System::Uri* host);
    // public System.Boolean IsBypassed(System.Uri host)
    // Offset: 0x15CA080
    bool IsBypassed(System::Uri* host);
    // private System.Boolean IsBypassedManual(System.Uri host)
    // Offset: 0x15C9B8C
    bool IsBypassedManual(System::Uri* host);
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x15CA294
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebProxy* New_ctor(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebProxy*, creationType>(serializationInfo, streamingContext)));
    }
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x15CA558
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);
    // protected System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x15CA564
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);
    // System.Net.AutoWebProxyScriptEngine get_ScriptEngine()
    // Offset: 0x15CA660
    System::Net::AutoWebProxyScriptEngine* get_ScriptEngine();
    // static public System.Net.IWebProxy CreateDefaultProxy()
    // Offset: 0x15CA668
    static System::Net::IWebProxy* CreateDefaultProxy();
    // System.Void .ctor(System.Boolean enableAutoproxy)
    // Offset: 0x15CA6D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebProxy* New_ctor(bool enableAutoproxy) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebProxy*, creationType>(enableAutoproxy)));
    }
    // System.Void UnsafeUpdateFromRegistry()
    // Offset: 0x15CA54C
    void UnsafeUpdateFromRegistry();
    // private System.Boolean GetProxyAuto(System.Uri destination, out System.Uri proxyUri)
    // Offset: 0x15C99F0
    bool GetProxyAuto(System::Uri* destination, System::Uri*& proxyUri);
    // private System.Boolean IsBypassedAuto(System.Uri destination, out System.Boolean isBypassed)
    // Offset: 0x15CA174
    bool IsBypassedAuto(System::Uri* destination, bool& isBypassed);
    // static private System.Boolean AreAllBypassed(System.Collections.Generic.IEnumerable`1<System.String> proxies, System.Boolean checkFirstOnly)
    // Offset: 0x15CA708
    static bool AreAllBypassed(System::Collections::Generic::IEnumerable_1<::Il2CppString*>* proxies, bool checkFirstOnly);
    // static private System.Uri ProxyUri(System.String proxyName)
    // Offset: 0x15CA974
    static System::Uri* ProxyUri(::Il2CppString* proxyName);
    // public System.Void .ctor()
    // Offset: 0x15C9438
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebProxy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebProxy*, creationType>()));
    }
  }; // System.Net.WebProxy
  #pragma pack(pop)
  static check_size<sizeof(WebProxy), 64 + sizeof(System::Net::AutoWebProxyScriptEngine*)> __System_Net_WebProxySizeCheck;
  static_assert(sizeof(WebProxy) == 0x48);
  // Writing MetadataGetter for method: WebProxy::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(System::Uri*, bool, ::Array<::Il2CppString*>*, System::Net::ICredentials*)>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::ICredentials*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(System::Uri*, bool, ::Array<::Il2CppString*>*, System::Net::ICredentials*)>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::ICredentials*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::get_Credentials
  // Il2CppName: get_Credentials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::ICredentials* (WebProxy::*)()>(&WebProxy::get_Credentials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "get_Credentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: WebProxy::get_UseDefaultCredentials
  // Il2CppName: get_UseDefaultCredentials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)()>(&WebProxy::get_UseDefaultCredentials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "get_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: WebProxy::set_UseDefaultCredentials
  // Il2CppName: set_UseDefaultCredentials
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(bool)>(&WebProxy::set_UseDefaultCredentials)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "set_UseDefaultCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::GetProxy
  // Il2CppName: GetProxy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Uri* (WebProxy::*)(System::Uri*)>(&WebProxy::GetProxy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "GetProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::UpdateRegExList
  // Il2CppName: UpdateRegExList
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(bool)>(&WebProxy::UpdateRegExList)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "UpdateRegExList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::IsMatchInBypassList
  // Il2CppName: IsMatchInBypassList
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*)>(&WebProxy::IsMatchInBypassList)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "IsMatchInBypassList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::IsLocal
  // Il2CppName: IsLocal
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*)>(&WebProxy::IsLocal)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "IsLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::IsLocalInProxyHash
  // Il2CppName: IsLocalInProxyHash
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*)>(&WebProxy::IsLocalInProxyHash)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "IsLocalInProxyHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::IsBypassed
  // Il2CppName: IsBypassed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*)>(&WebProxy::IsBypassed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "IsBypassed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::IsBypassedManual
  // Il2CppName: IsBypassedManual
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*)>(&WebProxy::IsBypassedManual)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "IsBypassedManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::System_Runtime_Serialization_ISerializable_GetObjectData
  // Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&WebProxy::System_Runtime_Serialization_ISerializable_GetObjectData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::GetObjectData
  // Il2CppName: GetObjectData
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&WebProxy::GetObjectData)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::get_ScriptEngine
  // Il2CppName: get_ScriptEngine
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::AutoWebProxyScriptEngine* (WebProxy::*)()>(&WebProxy::get_ScriptEngine)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "get_ScriptEngine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: WebProxy::CreateDefaultProxy
  // Il2CppName: CreateDefaultProxy
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IWebProxy* (*)()>(&WebProxy::CreateDefaultProxy)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "CreateDefaultProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: WebProxy::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(bool)>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)(bool)>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::UnsafeUpdateFromRegistry
  // Il2CppName: UnsafeUpdateFromRegistry
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)()>(&WebProxy::UnsafeUpdateFromRegistry)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "UnsafeUpdateFromRegistry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: WebProxy::GetProxyAuto
  // Il2CppName: GetProxyAuto
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*, System::Uri*&)>(&WebProxy::GetProxyAuto)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "GetProxyAuto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>(), ::il2cpp_utils::ExtractIndependentType<System::Uri*&>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::IsBypassedAuto
  // Il2CppName: IsBypassedAuto
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WebProxy::*)(System::Uri*, bool&)>(&WebProxy::IsBypassedAuto)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "IsBypassedAuto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Uri*>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::AreAllBypassed
  // Il2CppName: AreAllBypassed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*, bool)>(&WebProxy::AreAllBypassed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "AreAllBypassed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::ProxyUri
  // Il2CppName: ProxyUri
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Uri* (*)(::Il2CppString*)>(&WebProxy::ProxyUri)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), "ProxyUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: WebProxy::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)()>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WebProxy::*)()>(&WebProxy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(WebProxy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::WebProxy*, "System.Net", "WebProxy");
