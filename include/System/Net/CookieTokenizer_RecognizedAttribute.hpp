// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.CookieTokenizer
#include "System/Net/CookieTokenizer.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Net.CookieToken
#include "System/Net/CookieToken.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xC
  // Autogenerated type: System.Net.CookieTokenizer/RecognizedAttribute
  // [] Offset: FFFFFFFF
  struct CookieTokenizer::RecognizedAttribute/*, public System::ValueType*/ {
    public:
    // private System.String m_name
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Net.CookieToken m_token
    // Size: 0x4
    // Offset: 0x8
    System::Net::CookieToken m_token;
    // Field size check
    static_assert(sizeof(System::Net::CookieToken) == 0x4);
    // Creating value type constructor for type: RecognizedAttribute
    constexpr RecognizedAttribute(::Il2CppString* m_name_ = {}, System::Net::CookieToken m_token_ = {}) noexcept : m_name{m_name_}, m_token{m_token_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // System.Void .ctor(System.String name, System.Net.CookieToken token)
    // Offset: 0xC9C6C4
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  RecognizedAttribute(::Il2CppString* name, System::Net::CookieToken token)
    // System.Net.CookieToken get_Token()
    // Offset: 0xC9C6F4
    System::Net::CookieToken get_Token();
    // System.Boolean IsEqualTo(System.String value)
    // Offset: 0xC9C6FC
    bool IsEqualTo(::Il2CppString* value);
  }; // System.Net.CookieTokenizer/RecognizedAttribute
  static check_size<sizeof(CookieTokenizer::RecognizedAttribute), 8 + sizeof(System::Net::CookieToken)> __System_Net_CookieTokenizer_RecognizedAttributeSizeCheck;
  static_assert(sizeof(CookieTokenizer::RecognizedAttribute) == 0xC);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::CookieTokenizer::RecognizedAttribute, "System.Net", "CookieTokenizer/RecognizedAttribute");
#pragma pack(pop)
