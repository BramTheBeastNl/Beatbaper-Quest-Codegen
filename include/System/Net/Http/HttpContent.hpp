// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
}
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Forward declaring type: HttpContentHeaders
  class HttpContentHeaders;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: TransportContext
  class TransportContext;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.HttpContent
  class HttpContent : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Net::Http::HttpContent::FixedMemoryStream
    class FixedMemoryStream;
    // Nested type: System::Net::Http::HttpContent::$LoadIntoBufferAsync$d__17
    struct $LoadIntoBufferAsync$d__17;
    // Nested type: System::Net::Http::HttpContent::$ReadAsStringAsync$d__20
    struct $ReadAsStringAsync$d__20;
    // private System.Net.Http.HttpContent/FixedMemoryStream buffer
    // Size: 0x8
    // Offset: 0x10
    System::Net::Http::HttpContent::FixedMemoryStream* buffer;
    // Field size check
    static_assert(sizeof(System::Net::Http::HttpContent::FixedMemoryStream*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x18
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: headers
    char __padding1[0x7] = {};
    // private System.Net.Http.Headers.HttpContentHeaders headers
    // Size: 0x8
    // Offset: 0x20
    System::Net::Http::Headers::HttpContentHeaders* headers;
    // Field size check
    static_assert(sizeof(System::Net::Http::Headers::HttpContentHeaders*) == 0x8);
    // Creating value type constructor for type: HttpContent
    HttpContent(System::Net::Http::HttpContent::FixedMemoryStream* buffer_ = {}, bool disposed_ = {}, System::Net::Http::Headers::HttpContentHeaders* headers_ = {}) noexcept : buffer{buffer_}, disposed{disposed_}, headers{headers_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Net.Http.Headers.HttpContentHeaders get_Headers()
    // Offset: 0x159EF10
    System::Net::Http::Headers::HttpContentHeaders* get_Headers();
    // System.Nullable`1<System.Int64> get_LoadedBufferLength()
    // Offset: 0x1592144
    System::Nullable_1<int64_t> get_LoadedBufferLength();
    // System.Void CopyTo(System.IO.Stream stream)
    // Offset: 0x15A0604
    void CopyTo(System::IO::Stream* stream);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream)
    // Offset: 0x15A051C
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* stream);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, System.Net.TransportContext context)
    // Offset: 0x15A0628
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* stream, System::Net::TransportContext* context);
    // static private System.Net.Http.HttpContent/FixedMemoryStream CreateFixedMemoryStream(System.Int64 maxBufferSize)
    // Offset: 0x15A06EC
    static System::Net::Http::HttpContent::FixedMemoryStream* CreateFixedMemoryStream(int64_t maxBufferSize);
    // public System.Void Dispose()
    // Offset: 0x15A077C
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x15A078C
    void Dispose(bool disposing);
    // public System.Threading.Tasks.Task LoadIntoBufferAsync()
    // Offset: 0x15A07B8
    System::Threading::Tasks::Task* LoadIntoBufferAsync();
    // public System.Threading.Tasks.Task LoadIntoBufferAsync(System.Int64 maxBufferSize)
    // Offset: 0x159E360
    System::Threading::Tasks::Task* LoadIntoBufferAsync(int64_t maxBufferSize);
    // public System.Threading.Tasks.Task`1<System.String> ReadAsStringAsync()
    // Offset: 0x159DCF0
    System::Threading::Tasks::Task_1<::Il2CppString*>* ReadAsStringAsync();
    // static private System.Text.Encoding GetEncodingFromBuffer(System.Byte[] buffer, System.Int32 length, ref System.Int32 preambleLength)
    // Offset: 0x15A07C0
    static System::Text::Encoding* GetEncodingFromBuffer(::Array<uint8_t>* buffer, int length, int& preambleLength);
    // static private System.Int32 StartsWith(System.Byte[] array, System.Int32 length, System.Byte[] value)
    // Offset: 0x15A0950
    static int StartsWith(::Array<uint8_t>* array, int length, ::Array<uint8_t>* value);
    // protected internal System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task* SerializeToStreamAsync(System::IO::Stream* stream, System::Net::TransportContext* context);
    // protected internal System.Boolean TryComputeLength(out System.Int64 length)
    // Offset: 0xFFFFFFFF
    bool TryComputeLength(int64_t& length);
    // protected System.Void .ctor()
    // Offset: 0x15A09CC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpContent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::HttpContent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpContent*, creationType>()));
    }
  }; // System.Net.Http.HttpContent
  #pragma pack(pop)
  static check_size<sizeof(HttpContent), 32 + sizeof(System::Net::Http::Headers::HttpContentHeaders*)> __System_Net_Http_HttpContentSizeCheck;
  static_assert(sizeof(HttpContent) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::HttpContent*, "System.Net.Http", "HttpContent");
// Writing MetadataGetter for method: System::Net::Http::HttpContent::get_Headers
// Il2CppName: get_Headers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Http::Headers::HttpContentHeaders* (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::get_Headers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "get_Headers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::get_LoadedBufferLength
// Il2CppName: get_LoadedBufferLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<int64_t> (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::get_LoadedBufferLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "get_LoadedBufferLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)(System::IO::Stream*)>(&System::Net::Http::HttpContent::CopyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::CopyToAsync
// Il2CppName: CopyToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (System::Net::Http::HttpContent::*)(System::IO::Stream*)>(&System::Net::Http::HttpContent::CopyToAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "CopyToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::CopyToAsync
// Il2CppName: CopyToAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (System::Net::Http::HttpContent::*)(System::IO::Stream*, System::Net::TransportContext*)>(&System::Net::Http::HttpContent::CopyToAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "CopyToAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::TransportContext*>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::CreateFixedMemoryStream
// Il2CppName: CreateFixedMemoryStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Http::HttpContent::FixedMemoryStream* (*)(int64_t)>(&System::Net::Http::HttpContent::CreateFixedMemoryStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "CreateFixedMemoryStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)(bool)>(&System::Net::Http::HttpContent::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::LoadIntoBufferAsync
// Il2CppName: LoadIntoBufferAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::LoadIntoBufferAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "LoadIntoBufferAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::LoadIntoBufferAsync
// Il2CppName: LoadIntoBufferAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (System::Net::Http::HttpContent::*)(int64_t)>(&System::Net::Http::HttpContent::LoadIntoBufferAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "LoadIntoBufferAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::ReadAsStringAsync
// Il2CppName: ReadAsStringAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<::Il2CppString*>* (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::ReadAsStringAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "ReadAsStringAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::GetEncodingFromBuffer
// Il2CppName: GetEncodingFromBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (*)(::Array<uint8_t>*, int, int&)>(&System::Net::Http::HttpContent::GetEncodingFromBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "GetEncodingFromBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Array<uint8_t>*, int, ::Array<uint8_t>*)>(&System::Net::Http::HttpContent::StartsWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::SerializeToStreamAsync
// Il2CppName: SerializeToStreamAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task* (System::Net::Http::HttpContent::*)(System::IO::Stream*, System::Net::TransportContext*)>(&System::Net::Http::HttpContent::SerializeToStreamAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "SerializeToStreamAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::TransportContext*>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::TryComputeLength
// Il2CppName: TryComputeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Http::HttpContent::*)(int64_t&)>(&System::Net::Http::HttpContent::TryComputeLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), "TryComputeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t&>()});
  }
};
// Writing MetadataGetter for method: System::Net::Http::HttpContent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Http::HttpContent::*)()>(&System::Net::Http::HttpContent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Http::HttpContent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
