// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Forward declaring type: Token
  struct Token;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
}
// Completed forward declares
// Type namespace: System.Net.Http.Headers
namespace System::Net::Http::Headers {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.Headers.Lexer
  class Lexer : public ::Il2CppObject {
    public:
    // private readonly System.String s
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* s;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 pos
    // Size: 0x4
    // Offset: 0x18
    int pos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Lexer
    Lexer(::Il2CppString* s_ = {}, int pos_ = {}) noexcept : s{s_}, pos{pos_} {}
    // Get static field: static private readonly System.Boolean[] token_chars
    static ::Array<bool>* _get_token_chars();
    // Set static field: static private readonly System.Boolean[] token_chars
    static void _set_token_chars(::Array<bool>* value);
    // Get static field: static private readonly System.Int32 last_token_char
    static int _get_last_token_char();
    // Set static field: static private readonly System.Int32 last_token_char
    static void _set_last_token_char(int value);
    // Get static field: static private readonly System.String[] dt_formats
    static ::Array<::Il2CppString*>* _get_dt_formats();
    // Set static field: static private readonly System.String[] dt_formats
    static void _set_dt_formats(::Array<::Il2CppString*>* value);
    // public System.Void .ctor(System.String stream)
    // Offset: 0x13D9030
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Lexer* New_ctor(::Il2CppString* stream) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::Headers::Lexer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Lexer*, creationType>(stream)));
    }
    // public System.Int32 get_Position()
    // Offset: 0x13E0C54
    int get_Position();
    // public System.Void set_Position(System.Int32 value)
    // Offset: 0x13E0C5C
    void set_Position(int value);
    // public System.String GetStringValue(System.Net.Http.Headers.Token token)
    // Offset: 0x13D9560
    ::Il2CppString* GetStringValue(System::Net::Http::Headers::Token token);
    // public System.String GetStringValue(System.Net.Http.Headers.Token start, System.Net.Http.Headers.Token end)
    // Offset: 0x13E0C64
    ::Il2CppString* GetStringValue(System::Net::Http::Headers::Token start, System::Net::Http::Headers::Token end);
    // public System.String GetQuotedStringValue(System.Net.Http.Headers.Token start)
    // Offset: 0x13DAB48
    ::Il2CppString* GetQuotedStringValue(System::Net::Http::Headers::Token start);
    // public System.String GetRemainingStringValue(System.Int32 position)
    // Offset: 0x13D9584
    ::Il2CppString* GetRemainingStringValue(int position);
    // public System.Boolean IsStarStringValue(System.Net.Http.Headers.Token token)
    // Offset: 0x13DC3DC
    bool IsStarStringValue(System::Net::Http::Headers::Token token);
    // public System.Boolean TryGetNumericValue(System.Net.Http.Headers.Token token, out System.Int32 value)
    // Offset: 0x13E0C88
    bool TryGetNumericValue(System::Net::Http::Headers::Token token, int& value);
    // public System.Boolean TryGetNumericValue(System.Net.Http.Headers.Token token, out System.Int64 value)
    // Offset: 0x13DC424
    bool TryGetNumericValue(System::Net::Http::Headers::Token token, int64_t& value);
    // public System.Nullable`1<System.TimeSpan> TryGetTimeSpanValue(System.Net.Http.Headers.Token token)
    // Offset: 0x13DAA7C
    System::Nullable_1<System::TimeSpan> TryGetTimeSpanValue(System::Net::Http::Headers::Token token);
    // public System.Boolean TryGetDateValue(System.Net.Http.Headers.Token token, out System.DateTimeOffset value)
    // Offset: 0x13E0D38
    bool TryGetDateValue(System::Net::Http::Headers::Token token, System::DateTimeOffset& value);
    // static public System.Boolean TryGetDateValue(System.String text, out System.DateTimeOffset value)
    // Offset: 0x13E0E20
    static bool TryGetDateValue(::Il2CppString* text, System::DateTimeOffset& value);
    // public System.Boolean TryGetDoubleValue(System.Net.Http.Headers.Token token, out System.Double value)
    // Offset: 0x13E0F04
    bool TryGetDoubleValue(System::Net::Http::Headers::Token token, double& value);
    // static public System.Boolean IsValidToken(System.String input)
    // Offset: 0x13E0FDC
    static bool IsValidToken(::Il2CppString* input);
    // static public System.Boolean IsValidCharacter(System.Char input)
    // Offset: 0x13E10A0
    static bool IsValidCharacter(::Il2CppChar input);
    // public System.Void EatChar()
    // Offset: 0x13DCB68
    void EatChar();
    // public System.Int32 PeekChar()
    // Offset: 0x13DCB24
    int PeekChar();
    // public System.Boolean ScanCommentOptional(out System.String value, out System.Net.Http.Headers.Token readToken)
    // Offset: 0x13E1170
    bool ScanCommentOptional(::Il2CppString*& value, System::Net::Http::Headers::Token& readToken);
    // public System.Net.Http.Headers.Token Scan(System.Boolean recognizeDash)
    // Offset: 0x13D9244
    System::Net::Http::Headers::Token Scan(bool recognizeDash);
    // static private System.Void .cctor()
    // Offset: 0x13E12D0
    static void _cctor();
  }; // System.Net.Http.Headers.Lexer
  #pragma pack(pop)
  static check_size<sizeof(Lexer), 24 + sizeof(int)> __System_Net_Http_Headers_LexerSizeCheck;
  static_assert(sizeof(Lexer) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::Headers::Lexer*, "System.Net.Http.Headers", "Lexer");
