// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.HttpContent
#include "System/Net/Http/HttpContent.hpp"
// Including type: System.IO.MemoryStream
#include "System/IO/MemoryStream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.HttpContent/FixedMemoryStream
  class HttpContent::FixedMemoryStream : public System::IO::MemoryStream {
    public:
    // private readonly System.Int64 maxSize
    // Size: 0x8
    // Offset: 0x50
    int64_t maxSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Creating value type constructor for type: FixedMemoryStream
    FixedMemoryStream(int64_t maxSize_ = {}) noexcept : maxSize{maxSize_} {}
    // public System.Void .ctor(System.Int64 maxSize)
    // Offset: 0x15A0750
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpContent::FixedMemoryStream* New_ctor(int64_t maxSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::HttpContent::FixedMemoryStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpContent::FixedMemoryStream*, creationType>(maxSize)));
    }
    // private System.Void CheckOverflow(System.Int32 count)
    // Offset: 0x15A0FF4
    void CheckOverflow(int count);
    // public override System.Void WriteByte(System.Byte value)
    // Offset: 0x15A1144
    // Implemented from: System.IO.MemoryStream
    // Base method: System.Void MemoryStream::WriteByte(System.Byte value)
    void WriteByte(uint8_t value);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x15A1178
    // Implemented from: System.IO.MemoryStream
    // Base method: System.Void MemoryStream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::Array<uint8_t>* buffer, int offset, int count);
  }; // System.Net.Http.HttpContent/FixedMemoryStream
  #pragma pack(pop)
  static check_size<sizeof(HttpContent::FixedMemoryStream), 80 + sizeof(int64_t)> __System_Net_Http_HttpContent_FixedMemoryStreamSizeCheck;
  static_assert(sizeof(HttpContent::FixedMemoryStream) == 0x58);
  // Writing MetadataGetter for method: HttpContent::FixedMemoryStream::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpContent::FixedMemoryStream::*)(int64_t)>(&HttpContent::FixedMemoryStream::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HttpContent::FixedMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpContent::FixedMemoryStream::*)(int64_t)>(&HttpContent::FixedMemoryStream::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HttpContent::FixedMemoryStream*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
    }
  };
  // Writing MetadataGetter for method: HttpContent::FixedMemoryStream::CheckOverflow
  // Il2CppName: CheckOverflow
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpContent::FixedMemoryStream::*)(int)>(&HttpContent::FixedMemoryStream::CheckOverflow)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HttpContent::FixedMemoryStream*), "CheckOverflow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
  // Writing MetadataGetter for method: HttpContent::FixedMemoryStream::WriteByte
  // Il2CppName: WriteByte
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpContent::FixedMemoryStream::*)(uint8_t)>(&HttpContent::FixedMemoryStream::WriteByte)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HttpContent::FixedMemoryStream*), "WriteByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
    }
  };
  // Writing MetadataGetter for method: HttpContent::FixedMemoryStream::Write
  // Il2CppName: Write
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpContent::FixedMemoryStream::*)(::Array<uint8_t>*, int, int)>(&HttpContent::FixedMemoryStream::Write)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(HttpContent::FixedMemoryStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::HttpContent::FixedMemoryStream*, "System.Net.Http", "HttpContent/FixedMemoryStream");
