// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.WebExceptionStatus
#include "System/Net/WebExceptionStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: IWebConnectionState
  class IWebConnectionState;
  // Forward declaring type: WebConnectionData
  class WebConnectionData;
  // Forward declaring type: MonoChunkStream
  class MonoChunkStream;
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Queue
  class Queue;
}
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MonoTlsStream
  class MonoTlsStream;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebConnection
  // [TokenAttribute] Offset: FFFFFFFF
  class WebConnection : public ::Il2CppObject {
    public:
    // Nested type: System::Net::WebConnection::NtlmAuthState
    struct NtlmAuthState;
    // Nested type: System::Net::WebConnection::AbortHelper
    class AbortHelper;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.WebConnection/System.Net.NtlmAuthState
    // [TokenAttribute] Offset: FFFFFFFF
    struct NtlmAuthState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: NtlmAuthState
      constexpr NtlmAuthState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.WebConnection/System.Net.NtlmAuthState None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.WebConnection/System.Net.NtlmAuthState None
      static System::Net::WebConnection::NtlmAuthState _get_None();
      // Set static field: static public System.Net.WebConnection/System.Net.NtlmAuthState None
      static void _set_None(System::Net::WebConnection::NtlmAuthState value);
      // static field const value: static public System.Net.WebConnection/System.Net.NtlmAuthState Challenge
      static constexpr const int Challenge = 1;
      // Get static field: static public System.Net.WebConnection/System.Net.NtlmAuthState Challenge
      static System::Net::WebConnection::NtlmAuthState _get_Challenge();
      // Set static field: static public System.Net.WebConnection/System.Net.NtlmAuthState Challenge
      static void _set_Challenge(System::Net::WebConnection::NtlmAuthState value);
      // static field const value: static public System.Net.WebConnection/System.Net.NtlmAuthState Response
      static constexpr const int Response = 2;
      // Get static field: static public System.Net.WebConnection/System.Net.NtlmAuthState Response
      static System::Net::WebConnection::NtlmAuthState _get_Response();
      // Set static field: static public System.Net.WebConnection/System.Net.NtlmAuthState Response
      static void _set_Response(System::Net::WebConnection::NtlmAuthState value);
      // Get instance field: public System.Int32 value__
      int _get_value__();
      // Set instance field: public System.Int32 value__
      void _set_value__(int value);
    }; // System.Net.WebConnection/System.Net.NtlmAuthState
    #pragma pack(pop)
    static check_size<sizeof(WebConnection::NtlmAuthState), 0 + sizeof(int)> __System_Net_WebConnection_NtlmAuthStateSizeCheck;
    static_assert(sizeof(WebConnection::NtlmAuthState) == 0x4);
    // private System.Net.ServicePoint sPoint
    // Size: 0x8
    // Offset: 0x10
    System::Net::ServicePoint* sPoint;
    // Field size check
    static_assert(sizeof(System::Net::ServicePoint*) == 0x8);
    // private System.IO.Stream nstream
    // Size: 0x8
    // Offset: 0x18
    System::IO::Stream* nstream;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // System.Net.Sockets.Socket socket
    // Size: 0x8
    // Offset: 0x20
    System::Net::Sockets::Socket* socket;
    // Field size check
    static_assert(sizeof(System::Net::Sockets::Socket*) == 0x8);
    // private System.Object socketLock
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* socketLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.IWebConnectionState state
    // Size: 0x8
    // Offset: 0x30
    System::Net::IWebConnectionState* state;
    // Field size check
    static_assert(sizeof(System::Net::IWebConnectionState*) == 0x8);
    // private System.Net.WebExceptionStatus status
    // Size: 0x4
    // Offset: 0x38
    System::Net::WebExceptionStatus status;
    // Field size check
    static_assert(sizeof(System::Net::WebExceptionStatus) == 0x4);
    // private System.Boolean keepAlive
    // Size: 0x1
    // Offset: 0x3C
    bool keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepAlive and: buffer
    char __padding6[0x3] = {};
    // private System.Byte[] buffer
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* buffer;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.EventHandler abortHandler
    // Size: 0x8
    // Offset: 0x48
    System::EventHandler* abortHandler;
    // Field size check
    static_assert(sizeof(System::EventHandler*) == 0x8);
    // private System.Net.WebConnection/System.Net.AbortHelper abortHelper
    // Size: 0x8
    // Offset: 0x50
    System::Net::WebConnection::AbortHelper* abortHelper;
    // Field size check
    static_assert(sizeof(System::Net::WebConnection::AbortHelper*) == 0x8);
    // System.Net.WebConnectionData Data
    // Size: 0x8
    // Offset: 0x58
    System::Net::WebConnectionData* Data;
    // Field size check
    static_assert(sizeof(System::Net::WebConnectionData*) == 0x8);
    // private System.Boolean chunkedRead
    // Size: 0x1
    // Offset: 0x60
    bool chunkedRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: chunkedRead and: chunkStream
    char __padding11[0x7] = {};
    // private System.Net.MonoChunkStream chunkStream
    // Size: 0x8
    // Offset: 0x68
    System::Net::MonoChunkStream* chunkStream;
    // Field size check
    static_assert(sizeof(System::Net::MonoChunkStream*) == 0x8);
    // private System.Collections.Queue queue
    // Size: 0x8
    // Offset: 0x70
    System::Collections::Queue* queue;
    // Field size check
    static_assert(sizeof(System::Collections::Queue*) == 0x8);
    // private System.Boolean reused
    // Size: 0x1
    // Offset: 0x78
    bool reused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reused and: position
    char __padding14[0x3] = {};
    // private System.Int32 position
    // Size: 0x4
    // Offset: 0x7C
    int position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.HttpWebRequest priority_request
    // Size: 0x8
    // Offset: 0x80
    System::Net::HttpWebRequest* priority_request;
    // Field size check
    static_assert(sizeof(System::Net::HttpWebRequest*) == 0x8);
    // private System.Net.NetworkCredential ntlm_credentials
    // Size: 0x8
    // Offset: 0x88
    System::Net::NetworkCredential* ntlm_credentials;
    // Field size check
    static_assert(sizeof(System::Net::NetworkCredential*) == 0x8);
    // private System.Boolean ntlm_authenticated
    // Size: 0x1
    // Offset: 0x90
    bool ntlm_authenticated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean unsafe_sharing
    // Size: 0x1
    // Offset: 0x91
    bool unsafe_sharing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: unsafe_sharing and: connect_ntlm_auth_state
    char __padding19[0x2] = {};
    // private System.Net.WebConnection/System.Net.NtlmAuthState connect_ntlm_auth_state
    // Size: 0x4
    // Offset: 0x94
    System::Net::WebConnection::NtlmAuthState connect_ntlm_auth_state;
    // Field size check
    static_assert(sizeof(System::Net::WebConnection::NtlmAuthState) == 0x4);
    // private System.Net.HttpWebRequest connect_request
    // Size: 0x8
    // Offset: 0x98
    System::Net::HttpWebRequest* connect_request;
    // Field size check
    static_assert(sizeof(System::Net::HttpWebRequest*) == 0x8);
    // private System.Exception connect_exception
    // Size: 0x8
    // Offset: 0xA0
    System::Exception* connect_exception;
    // Field size check
    static_assert(sizeof(System::Exception*) == 0x8);
    // private Mono.Net.Security.MonoTlsStream tlsStream
    // Size: 0x8
    // Offset: 0xA8
    Mono::Net::Security::MonoTlsStream* tlsStream;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::MonoTlsStream*) == 0x8);
    // Creating value type constructor for type: WebConnection
    WebConnection(System::Net::ServicePoint* sPoint_ = {}, System::IO::Stream* nstream_ = {}, System::Net::Sockets::Socket* socket_ = {}, ::Il2CppObject* socketLock_ = {}, System::Net::IWebConnectionState* state_ = {}, System::Net::WebExceptionStatus status_ = {}, bool keepAlive_ = {}, ::Array<uint8_t>* buffer_ = {}, System::EventHandler* abortHandler_ = {}, System::Net::WebConnection::AbortHelper* abortHelper_ = {}, System::Net::WebConnectionData* Data_ = {}, bool chunkedRead_ = {}, System::Net::MonoChunkStream* chunkStream_ = {}, System::Collections::Queue* queue_ = {}, bool reused_ = {}, int position_ = {}, System::Net::HttpWebRequest* priority_request_ = {}, System::Net::NetworkCredential* ntlm_credentials_ = {}, bool ntlm_authenticated_ = {}, bool unsafe_sharing_ = {}, System::Net::WebConnection::NtlmAuthState connect_ntlm_auth_state_ = {}, System::Net::HttpWebRequest* connect_request_ = {}, System::Exception* connect_exception_ = {}, Mono::Net::Security::MonoTlsStream* tlsStream_ = {}) noexcept : sPoint{sPoint_}, nstream{nstream_}, socket{socket_}, socketLock{socketLock_}, state{state_}, status{status_}, keepAlive{keepAlive_}, buffer{buffer_}, abortHandler{abortHandler_}, abortHelper{abortHelper_}, Data{Data_}, chunkedRead{chunkedRead_}, chunkStream{chunkStream_}, queue{queue_}, reused{reused_}, position{position_}, priority_request{priority_request_}, ntlm_credentials{ntlm_credentials_}, ntlm_authenticated{ntlm_authenticated_}, unsafe_sharing{unsafe_sharing_}, connect_ntlm_auth_state{connect_ntlm_auth_state_}, connect_request{connect_request_}, connect_exception{connect_exception_}, tlsStream{tlsStream_} {}
    // Get instance field: private System.Net.ServicePoint sPoint
    System::Net::ServicePoint* _get_sPoint();
    // Set instance field: private System.Net.ServicePoint sPoint
    void _set_sPoint(System::Net::ServicePoint* value);
    // Get instance field: private System.IO.Stream nstream
    System::IO::Stream* _get_nstream();
    // Set instance field: private System.IO.Stream nstream
    void _set_nstream(System::IO::Stream* value);
    // Get instance field: System.Net.Sockets.Socket socket
    System::Net::Sockets::Socket* _get_socket();
    // Set instance field: System.Net.Sockets.Socket socket
    void _set_socket(System::Net::Sockets::Socket* value);
    // Get instance field: private System.Object socketLock
    ::Il2CppObject* _get_socketLock();
    // Set instance field: private System.Object socketLock
    void _set_socketLock(::Il2CppObject* value);
    // Get instance field: private System.Net.IWebConnectionState state
    System::Net::IWebConnectionState* _get_state();
    // Set instance field: private System.Net.IWebConnectionState state
    void _set_state(System::Net::IWebConnectionState* value);
    // Get instance field: private System.Net.WebExceptionStatus status
    System::Net::WebExceptionStatus _get_status();
    // Set instance field: private System.Net.WebExceptionStatus status
    void _set_status(System::Net::WebExceptionStatus value);
    // Get instance field: private System.Boolean keepAlive
    bool _get_keepAlive();
    // Set instance field: private System.Boolean keepAlive
    void _set_keepAlive(bool value);
    // Get instance field: private System.Byte[] buffer
    ::Array<uint8_t>* _get_buffer();
    // Set instance field: private System.Byte[] buffer
    void _set_buffer(::Array<uint8_t>* value);
    // Get instance field: private System.EventHandler abortHandler
    System::EventHandler* _get_abortHandler();
    // Set instance field: private System.EventHandler abortHandler
    void _set_abortHandler(System::EventHandler* value);
    // Get instance field: private System.Net.WebConnection/System.Net.AbortHelper abortHelper
    System::Net::WebConnection::AbortHelper* _get_abortHelper();
    // Set instance field: private System.Net.WebConnection/System.Net.AbortHelper abortHelper
    void _set_abortHelper(System::Net::WebConnection::AbortHelper* value);
    // Get instance field: System.Net.WebConnectionData Data
    System::Net::WebConnectionData* _get_Data();
    // Set instance field: System.Net.WebConnectionData Data
    void _set_Data(System::Net::WebConnectionData* value);
    // Get instance field: private System.Boolean chunkedRead
    bool _get_chunkedRead();
    // Set instance field: private System.Boolean chunkedRead
    void _set_chunkedRead(bool value);
    // Get instance field: private System.Net.MonoChunkStream chunkStream
    System::Net::MonoChunkStream* _get_chunkStream();
    // Set instance field: private System.Net.MonoChunkStream chunkStream
    void _set_chunkStream(System::Net::MonoChunkStream* value);
    // Get instance field: private System.Collections.Queue queue
    System::Collections::Queue* _get_queue();
    // Set instance field: private System.Collections.Queue queue
    void _set_queue(System::Collections::Queue* value);
    // Get instance field: private System.Boolean reused
    bool _get_reused();
    // Set instance field: private System.Boolean reused
    void _set_reused(bool value);
    // Get instance field: private System.Int32 position
    int _get_position();
    // Set instance field: private System.Int32 position
    void _set_position(int value);
    // Get instance field: private System.Net.HttpWebRequest priority_request
    System::Net::HttpWebRequest* _get_priority_request();
    // Set instance field: private System.Net.HttpWebRequest priority_request
    void _set_priority_request(System::Net::HttpWebRequest* value);
    // Get instance field: private System.Net.NetworkCredential ntlm_credentials
    System::Net::NetworkCredential* _get_ntlm_credentials();
    // Set instance field: private System.Net.NetworkCredential ntlm_credentials
    void _set_ntlm_credentials(System::Net::NetworkCredential* value);
    // Get instance field: private System.Boolean ntlm_authenticated
    bool _get_ntlm_authenticated();
    // Set instance field: private System.Boolean ntlm_authenticated
    void _set_ntlm_authenticated(bool value);
    // Get instance field: private System.Boolean unsafe_sharing
    bool _get_unsafe_sharing();
    // Set instance field: private System.Boolean unsafe_sharing
    void _set_unsafe_sharing(bool value);
    // Get instance field: private System.Net.WebConnection/System.Net.NtlmAuthState connect_ntlm_auth_state
    System::Net::WebConnection::NtlmAuthState _get_connect_ntlm_auth_state();
    // Set instance field: private System.Net.WebConnection/System.Net.NtlmAuthState connect_ntlm_auth_state
    void _set_connect_ntlm_auth_state(System::Net::WebConnection::NtlmAuthState value);
    // Get instance field: private System.Net.HttpWebRequest connect_request
    System::Net::HttpWebRequest* _get_connect_request();
    // Set instance field: private System.Net.HttpWebRequest connect_request
    void _set_connect_request(System::Net::HttpWebRequest* value);
    // Get instance field: private System.Exception connect_exception
    System::Exception* _get_connect_exception();
    // Set instance field: private System.Exception connect_exception
    void _set_connect_exception(System::Exception* value);
    // Get instance field: private Mono.Net.Security.MonoTlsStream tlsStream
    Mono::Net::Security::MonoTlsStream* _get_tlsStream();
    // Set instance field: private Mono.Net.Security.MonoTlsStream tlsStream
    void _set_tlsStream(Mono::Net::Security::MonoTlsStream* value);
    // System.Void set_PriorityRequest(System.Net.HttpWebRequest value)
    // Offset: 0x1595CF4
    void set_PriorityRequest(System::Net::HttpWebRequest* value);
    // System.Boolean get_NtlmAuthenticated()
    // Offset: 0x1595CFC
    bool get_NtlmAuthenticated();
    // System.Void set_NtlmAuthenticated(System.Boolean value)
    // Offset: 0x1595D04
    void set_NtlmAuthenticated(bool value);
    // System.Net.NetworkCredential get_NtlmCredential()
    // Offset: 0x1595D10
    System::Net::NetworkCredential* get_NtlmCredential();
    // System.Void set_NtlmCredential(System.Net.NetworkCredential value)
    // Offset: 0x1595D18
    void set_NtlmCredential(System::Net::NetworkCredential* value);
    // System.Boolean get_UnsafeAuthenticatedConnectionSharing()
    // Offset: 0x1595D20
    bool get_UnsafeAuthenticatedConnectionSharing();
    // System.Void set_UnsafeAuthenticatedConnectionSharing(System.Boolean value)
    // Offset: 0x1595D28
    void set_UnsafeAuthenticatedConnectionSharing(bool value);
    // public System.Void .ctor(System.Net.IWebConnectionState wcs, System.Net.ServicePoint sPoint)
    // Offset: 0x158F8E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebConnection* New_ctor(System::Net::IWebConnectionState* wcs, System::Net::ServicePoint* sPoint) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebConnection*, creationType>(wcs, sPoint)));
    }
    // private System.Boolean CanReuse()
    // Offset: 0x158FAA8
    bool CanReuse();
    // private System.Void Connect(System.Net.HttpWebRequest request)
    // Offset: 0x158FADC
    void Connect(System::Net::HttpWebRequest* request);
    // private System.Boolean CreateTunnel(System.Net.HttpWebRequest request, System.Uri connectUri, System.IO.Stream stream, out System.Byte[] buffer)
    // Offset: 0x159015C
    bool CreateTunnel(System::Net::HttpWebRequest* request, System::Uri* connectUri, System::IO::Stream* stream, ::Array<uint8_t>*& buffer);
    // private System.Net.WebHeaderCollection ReadHeaders(System.IO.Stream stream, out System.Byte[] retBuffer, out System.Int32 status)
    // Offset: 0x1590A58
    System::Net::WebHeaderCollection* ReadHeaders(System::IO::Stream* stream, ::Array<uint8_t>*& retBuffer, int& status);
    // private System.Void FlushContents(System.IO.Stream stream, System.Int32 contentLength)
    // Offset: 0x15911A4
    void FlushContents(System::IO::Stream* stream, int contentLength);
    // private System.Boolean CreateStream(System.Net.HttpWebRequest request)
    // Offset: 0x1591710
    bool CreateStream(System::Net::HttpWebRequest* request);
    // private System.Void HandleError(System.Net.WebExceptionStatus st, System.Exception e, System.String where)
    // Offset: 0x1590EFC
    void HandleError(System::Net::WebExceptionStatus st, System::Exception* e, ::Il2CppString* where);
    // private System.Void ReadDone(System.IAsyncResult result)
    // Offset: 0x1591D08
    void ReadDone(System::IAsyncResult* result);
    // static private System.Boolean ExpectContent(System.Int32 statusCode, System.String method)
    // Offset: 0x1593060
    static bool ExpectContent(int statusCode, ::Il2CppString* method);
    // System.Void InitRead()
    // Offset: 0x1592C0C
    void InitRead();
    // static private System.Int32 GetResponse(System.Net.WebConnectionData data, System.Net.ServicePoint sPoint, System.Byte[] buffer, System.Int32 max)
    // Offset: 0x1592314
    static int GetResponse(System::Net::WebConnectionData* data, System::Net::ServicePoint* sPoint, ::Array<uint8_t>* buffer, int max);
    // private System.Void InitConnection(System.Net.HttpWebRequest request)
    // Offset: 0x15934A8
    void InitConnection(System::Net::HttpWebRequest* request);
    // System.EventHandler SendRequest(System.Net.HttpWebRequest request)
    // Offset: 0x15938B0
    System::EventHandler* SendRequest(System::Net::HttpWebRequest* request);
    // private System.Void SendNext()
    // Offset: 0x1593AD4
    void SendNext();
    // System.Void NextRead()
    // Offset: 0x1593C14
    void NextRead();
    // static private System.Boolean ReadLine(System.Byte[] buffer, ref System.Int32 start, System.Int32 max, ref System.String output)
    // Offset: 0x1591508
    static bool ReadLine(::Array<uint8_t>* buffer, int& start, int max, ::Il2CppString*& output);
    // System.IAsyncResult BeginRead(System.Net.HttpWebRequest request, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback cb, System.Object state)
    // Offset: 0x1593FF8
    System::IAsyncResult* BeginRead(System::Net::HttpWebRequest* request, ::Array<uint8_t>* buffer, int offset, int size, System::AsyncCallback* cb, ::Il2CppObject* state);
    // System.Int32 EndRead(System.Net.HttpWebRequest request, System.IAsyncResult result)
    // Offset: 0x1594350
    int EndRead(System::Net::HttpWebRequest* request, System::IAsyncResult* result);
    // private System.Int32 EnsureRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1594934
    int EnsureRead(::Array<uint8_t>* buffer, int offset, int size);
    // private System.Boolean CompleteChunkedRead()
    // Offset: 0x15900C0
    bool CompleteChunkedRead();
    // System.IAsyncResult BeginWrite(System.Net.HttpWebRequest request, System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback cb, System.Object state)
    // Offset: 0x1594A7C
    System::IAsyncResult* BeginWrite(System::Net::HttpWebRequest* request, ::Array<uint8_t>* buffer, int offset, int size, System::AsyncCallback* cb, ::Il2CppObject* state);
    // System.Boolean EndWrite(System.Net.HttpWebRequest request, System.Boolean throwOnError, System.IAsyncResult result)
    // Offset: 0x1594E6C
    bool EndWrite(System::Net::HttpWebRequest* request, bool throwOnError, System::IAsyncResult* result);
    // System.Int32 Read(System.Net.HttpWebRequest request, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x15951BC
    int Read(System::Net::HttpWebRequest* request, ::Array<uint8_t>* buffer, int offset, int size);
    // System.Boolean Write(System.Net.HttpWebRequest request, System.Byte[] buffer, System.Int32 offset, System.Int32 size, ref System.String err_msg)
    // Offset: 0x159562C
    bool Write(System::Net::HttpWebRequest* request, ::Array<uint8_t>* buffer, int offset, int size, ::Il2CppString*& err_msg);
    // System.Void Close(System.Boolean sendNext)
    // Offset: 0x159195C
    void Close(bool sendNext);
    // private System.Void Abort(System.Object sender, System.EventArgs args)
    // Offset: 0x15958F8
    void Abort(::Il2CppObject* sender, System::EventArgs* args);
    // System.Void ResetNtlm()
    // Offset: 0x15958EC
    void ResetNtlm();
    // private System.Void <SendRequest>b__41_0(System.Object o)
    // Offset: 0x1595D34
    void $SendRequest$b__41_0(::Il2CppObject* o);
  }; // System.Net.WebConnection
  #pragma pack(pop)
  static check_size<sizeof(WebConnection), 168 + sizeof(Mono::Net::Security::MonoTlsStream*)> __System_Net_WebConnectionSizeCheck;
  static_assert(sizeof(WebConnection) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::WebConnection*, "System.Net", "WebConnection");
DEFINE_IL2CPP_ARG_TYPE(System::Net::WebConnection::NtlmAuthState, "System.Net", "WebConnection/NtlmAuthState");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::WebConnection::set_PriorityRequest
// Il2CppName: set_PriorityRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::Net::HttpWebRequest*)>(&System::Net::WebConnection::set_PriorityRequest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_PriorityRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_NtlmAuthenticated
// Il2CppName: get_NtlmAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_NtlmAuthenticated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_NtlmAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::set_NtlmAuthenticated
// Il2CppName: set_NtlmAuthenticated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::set_NtlmAuthenticated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_NtlmAuthenticated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_NtlmCredential
// Il2CppName: get_NtlmCredential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::NetworkCredential* (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_NtlmCredential)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_NtlmCredential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::set_NtlmCredential
// Il2CppName: set_NtlmCredential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::Net::NetworkCredential*)>(&System::Net::WebConnection::set_NtlmCredential)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Net", "NetworkCredential")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_NtlmCredential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::get_UnsafeAuthenticatedConnectionSharing
// Il2CppName: get_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::get_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "get_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::set_UnsafeAuthenticatedConnectionSharing
// Il2CppName: set_UnsafeAuthenticatedConnectionSharing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::set_UnsafeAuthenticatedConnectionSharing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "set_UnsafeAuthenticatedConnectionSharing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::WebConnection::CanReuse
// Il2CppName: CanReuse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::CanReuse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CanReuse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::Net::HttpWebRequest*)>(&System::Net::WebConnection::Connect)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CreateTunnel
// Il2CppName: CreateTunnel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, System::Uri*, System::IO::Stream*, ::Array<uint8_t>*&)>(&System::Net::WebConnection::CreateTunnel)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* connectUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CreateTunnel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, connectUri, stream, buffer});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ReadHeaders
// Il2CppName: ReadHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::WebHeaderCollection* (System::Net::WebConnection::*)(System::IO::Stream*, ::Array<uint8_t>*&, int&)>(&System::Net::WebConnection::ReadHeaders)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* retBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ReadHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, retBuffer, status});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::FlushContents
// Il2CppName: FlushContents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::IO::Stream*, int)>(&System::Net::WebConnection::FlushContents)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* contentLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "FlushContents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, contentLength});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CreateStream
// Il2CppName: CreateStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(System::Net::HttpWebRequest*)>(&System::Net::WebConnection::CreateStream)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CreateStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::HandleError
// Il2CppName: HandleError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::Net::WebExceptionStatus, System::Exception*, ::Il2CppString*)>(&System::Net::WebConnection::HandleError)> {
  static const MethodInfo* get() {
    static auto* st = &::il2cpp_utils::GetClassFromName("System.Net", "WebExceptionStatus")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* where = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "HandleError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{st, e, where});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ReadDone
// Il2CppName: ReadDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::IAsyncResult*)>(&System::Net::WebConnection::ReadDone)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ReadDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ExpectContent
// Il2CppName: ExpectContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ::Il2CppString*)>(&System::Net::WebConnection::ExpectContent)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ExpectContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode, method});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::InitRead
// Il2CppName: InitRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::InitRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "InitRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::GetResponse
// Il2CppName: GetResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::WebConnectionData*, System::Net::ServicePoint*, ::Array<uint8_t>*, int)>(&System::Net::WebConnection::GetResponse)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System.Net", "WebConnectionData")->byval_arg;
    static auto* sPoint = &::il2cpp_utils::GetClassFromName("System.Net", "ServicePoint")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "GetResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, sPoint, buffer, max});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::InitConnection
// Il2CppName: InitConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(System::Net::HttpWebRequest*)>(&System::Net::WebConnection::InitConnection)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "InitConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::SendRequest
// Il2CppName: SendRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::EventHandler* (System::Net::WebConnection::*)(System::Net::HttpWebRequest*)>(&System::Net::WebConnection::SendRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "SendRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::SendNext
// Il2CppName: SendNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::SendNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "SendNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::NextRead
// Il2CppName: NextRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::NextRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "NextRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<uint8_t>*, int&, int, ::Il2CppString*&)>(&System::Net::WebConnection::ReadLine)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, start, max, output});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, ::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::WebConnection::BeginRead)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, buffer, offset, size, cb, state});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, System::IAsyncResult*)>(&System::Net::WebConnection::EndRead)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, result});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::EnsureRead
// Il2CppName: EnsureRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnection::*)(::Array<uint8_t>*, int, int)>(&System::Net::WebConnection::EnsureRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "EnsureRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::CompleteChunkedRead
// Il2CppName: CompleteChunkedRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)()>(&System::Net::WebConnection::CompleteChunkedRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "CompleteChunkedRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, ::Array<uint8_t>*, int, int, System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::WebConnection::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cb = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, buffer, offset, size, cb, state});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, bool, System::IAsyncResult*)>(&System::Net::WebConnection::EndWrite)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* throwOnError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, throwOnError, result});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, ::Array<uint8_t>*, int, int)>(&System::Net::WebConnection::Read)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::WebConnection::*)(System::Net::HttpWebRequest*, ::Array<uint8_t>*, int, int, ::Il2CppString*&)>(&System::Net::WebConnection::Write)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("System.Net", "HttpWebRequest")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* err_msg = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, buffer, offset, size, err_msg});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(bool)>(&System::Net::WebConnection::Close)> {
  static const MethodInfo* get() {
    static auto* sendNext = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendNext});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::Abort
// Il2CppName: Abort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(::Il2CppObject*, System::EventArgs*)>(&System::Net::WebConnection::Abort)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* args = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "Abort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, args});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::ResetNtlm
// Il2CppName: ResetNtlm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)()>(&System::Net::WebConnection::ResetNtlm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "ResetNtlm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::WebConnection::$SendRequest$b__41_0
// Il2CppName: <SendRequest>b__41_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::WebConnection::*)(::Il2CppObject*)>(&System::Net::WebConnection::$SendRequest$b__41_0)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::WebConnection*), "<SendRequest>b__41_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
