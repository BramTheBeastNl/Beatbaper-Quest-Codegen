// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: System.Net.Sockets.SocketType
#include "System/Net/Sockets/SocketType.hpp"
// Including type: System.Net.Sockets.ProtocolType
#include "System/Net/Sockets/ProtocolType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SafeSocketHandle
  class SafeSocketHandle;
  // Forward declaring type: SocketFlags
  struct SocketFlags;
  // Forward declaring type: IOControlCode
  struct IOControlCode;
  // Forward declaring type: IPProtectionLevel
  struct IPProtectionLevel;
  // Forward declaring type: SocketShutdown
  struct SocketShutdown;
  // Forward declaring type: SelectMode
  struct SelectMode;
  // Forward declaring type: SocketAsyncEventArgs
  class SocketAsyncEventArgs;
  // Forward declaring type: SocketAsyncResult
  class SocketAsyncResult;
  // Forward declaring type: SocketError
  struct SocketError;
  // Forward declaring type: SocketOptionLevel
  struct SocketOptionLevel;
  // Forward declaring type: SocketOptionName
  struct SocketOptionName;
  // Forward declaring type: SocketOperation
  struct SocketOperation;
  // Forward declaring type: SocketAsyncOperation
  struct SocketAsyncOperation;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: EndPoint
  class EndPoint;
  // Forward declaring type: SocketAddress
  class SocketAddress;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SemaphoreSlim
  class SemaphoreSlim;
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IOAsyncCallback
  class IOAsyncCallback;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: IOSelectorJob
  class IOSelectorJob;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IList`1 because it is already included!
}
// Forward declaring namespace: System::Net::NetworkInformation
namespace System::Net::NetworkInformation {
  // Forward declaring type: NetworkInterfaceComponent
  struct NetworkInterfaceComponent;
}
// Completed forward declares
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Sockets.Socket
  class Socket : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Net::Sockets::Socket::WSABUF
    struct WSABUF;
    // Nested type: System::Net::Sockets::Socket::$$c
    class $$c;
    // Nested type: System::Net::Sockets::Socket::$$c__DisplayClass242_0
    class $$c__DisplayClass242_0;
    // Nested type: System::Net::Sockets::Socket::$$c__DisplayClass298_0
    class $$c__DisplayClass298_0;
    // private System.Boolean is_closed
    // Size: 0x1
    // Offset: 0x10
    bool is_closed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean is_listening
    // Size: 0x1
    // Offset: 0x11
    bool is_listening;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useOverlappedIO
    // Size: 0x1
    // Offset: 0x12
    bool useOverlappedIO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useOverlappedIO and: linger_timeout
    char __padding2[0x1] = {};
    // private System.Int32 linger_timeout
    // Size: 0x4
    // Offset: 0x14
    int linger_timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.Sockets.AddressFamily addressFamily
    // Size: 0x4
    // Offset: 0x18
    System::Net::Sockets::AddressFamily addressFamily;
    // Field size check
    static_assert(sizeof(System::Net::Sockets::AddressFamily) == 0x4);
    // private System.Net.Sockets.SocketType socketType
    // Size: 0x4
    // Offset: 0x1C
    System::Net::Sockets::SocketType socketType;
    // Field size check
    static_assert(sizeof(System::Net::Sockets::SocketType) == 0x4);
    // private System.Net.Sockets.ProtocolType protocolType
    // Size: 0x4
    // Offset: 0x20
    System::Net::Sockets::ProtocolType protocolType;
    // Field size check
    static_assert(sizeof(System::Net::Sockets::ProtocolType) == 0x4);
    // Padding between fields: protocolType and: m_Handle
    char __padding6[0x4] = {};
    // System.Net.Sockets.SafeSocketHandle m_Handle
    // Size: 0x8
    // Offset: 0x28
    System::Net::Sockets::SafeSocketHandle* m_Handle;
    // Field size check
    static_assert(sizeof(System::Net::Sockets::SafeSocketHandle*) == 0x8);
    // System.Net.EndPoint seed_endpoint
    // Size: 0x8
    // Offset: 0x30
    System::Net::EndPoint* seed_endpoint;
    // Field size check
    static_assert(sizeof(System::Net::EndPoint*) == 0x8);
    // System.Threading.SemaphoreSlim ReadSem
    // Size: 0x8
    // Offset: 0x38
    System::Threading::SemaphoreSlim* ReadSem;
    // Field size check
    static_assert(sizeof(System::Threading::SemaphoreSlim*) == 0x8);
    // System.Threading.SemaphoreSlim WriteSem
    // Size: 0x8
    // Offset: 0x40
    System::Threading::SemaphoreSlim* WriteSem;
    // Field size check
    static_assert(sizeof(System::Threading::SemaphoreSlim*) == 0x8);
    // System.Boolean is_blocking
    // Size: 0x1
    // Offset: 0x48
    bool is_blocking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean is_bound
    // Size: 0x1
    // Offset: 0x49
    bool is_bound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean is_connected
    // Size: 0x1
    // Offset: 0x4A
    bool is_connected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: is_connected and: m_IntCleanedUp
    char __padding13[0x1] = {};
    // private System.Int32 m_IntCleanedUp
    // Size: 0x4
    // Offset: 0x4C
    int m_IntCleanedUp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean connect_in_progress
    // Size: 0x1
    // Offset: 0x50
    bool connect_in_progress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Socket
    Socket(bool is_closed_ = {}, bool is_listening_ = {}, bool useOverlappedIO_ = {}, int linger_timeout_ = {}, System::Net::Sockets::AddressFamily addressFamily_ = {}, System::Net::Sockets::SocketType socketType_ = {}, System::Net::Sockets::ProtocolType protocolType_ = {}, System::Net::Sockets::SafeSocketHandle* m_Handle_ = {}, System::Net::EndPoint* seed_endpoint_ = {}, System::Threading::SemaphoreSlim* ReadSem_ = {}, System::Threading::SemaphoreSlim* WriteSem_ = {}, bool is_blocking_ = {}, bool is_bound_ = {}, bool is_connected_ = {}, int m_IntCleanedUp_ = {}, bool connect_in_progress_ = {}) noexcept : is_closed{is_closed_}, is_listening{is_listening_}, useOverlappedIO{useOverlappedIO_}, linger_timeout{linger_timeout_}, addressFamily{addressFamily_}, socketType{socketType_}, protocolType{protocolType_}, m_Handle{m_Handle_}, seed_endpoint{seed_endpoint_}, ReadSem{ReadSem_}, WriteSem{WriteSem_}, is_blocking{is_blocking_}, is_bound{is_bound_}, is_connected{is_connected_}, m_IntCleanedUp{m_IntCleanedUp_}, connect_in_progress{connect_in_progress_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.Object s_InternalSyncObject
    static ::Il2CppObject* _get_s_InternalSyncObject();
    // Set static field: static private System.Object s_InternalSyncObject
    static void _set_s_InternalSyncObject(::Il2CppObject* value);
    // Get static field: static System.Boolean s_SupportsIPv4
    static bool _get_s_SupportsIPv4();
    // Set static field: static System.Boolean s_SupportsIPv4
    static void _set_s_SupportsIPv4(bool value);
    // Get static field: static System.Boolean s_SupportsIPv6
    static bool _get_s_SupportsIPv6();
    // Set static field: static System.Boolean s_SupportsIPv6
    static void _set_s_SupportsIPv6(bool value);
    // Get static field: static System.Boolean s_OSSupportsIPv6
    static bool _get_s_OSSupportsIPv6();
    // Set static field: static System.Boolean s_OSSupportsIPv6
    static void _set_s_OSSupportsIPv6(bool value);
    // Get static field: static System.Boolean s_Initialized
    static bool _get_s_Initialized();
    // Set static field: static System.Boolean s_Initialized
    static void _set_s_Initialized(bool value);
    // Get static field: static private System.Boolean s_LoggingEnabled
    static bool _get_s_LoggingEnabled();
    // Set static field: static private System.Boolean s_LoggingEnabled
    static void _set_s_LoggingEnabled(bool value);
    // Get static field: static System.Boolean s_PerfCountersEnabled
    static bool _get_s_PerfCountersEnabled();
    // Set static field: static System.Boolean s_PerfCountersEnabled
    static void _set_s_PerfCountersEnabled(bool value);
    // static field const value: static System.Int32 DefaultCloseTimeout
    static constexpr const int DefaultCloseTimeout = -1;
    // Get static field: static System.Int32 DefaultCloseTimeout
    static int _get_DefaultCloseTimeout();
    // Set static field: static System.Int32 DefaultCloseTimeout
    static void _set_DefaultCloseTimeout(int value);
    // static field const value: static private System.Int32 SOCKET_CLOSED_CODE
    static constexpr const int SOCKET_CLOSED_CODE = 10004;
    // Get static field: static private System.Int32 SOCKET_CLOSED_CODE
    static int _get_SOCKET_CLOSED_CODE();
    // Set static field: static private System.Int32 SOCKET_CLOSED_CODE
    static void _set_SOCKET_CLOSED_CODE(int value);
    // static field const value: static private System.String TIMEOUT_EXCEPTION_MSG
    static constexpr const char* TIMEOUT_EXCEPTION_MSG = "A connection attempt failed because the connected party did not properly respondafter a period of time, or established connection failed because connected host has failed to respond";
    // Get static field: static private System.String TIMEOUT_EXCEPTION_MSG
    static ::Il2CppString* _get_TIMEOUT_EXCEPTION_MSG();
    // Set static field: static private System.String TIMEOUT_EXCEPTION_MSG
    static void _set_TIMEOUT_EXCEPTION_MSG(::Il2CppString* value);
    // Get static field: static private System.AsyncCallback AcceptAsyncCallback
    static System::AsyncCallback* _get_AcceptAsyncCallback();
    // Set static field: static private System.AsyncCallback AcceptAsyncCallback
    static void _set_AcceptAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginAcceptCallback
    static System::IOAsyncCallback* _get_BeginAcceptCallback();
    // Set static field: static private System.IOAsyncCallback BeginAcceptCallback
    static void _set_BeginAcceptCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginAcceptReceiveCallback
    static System::IOAsyncCallback* _get_BeginAcceptReceiveCallback();
    // Set static field: static private System.IOAsyncCallback BeginAcceptReceiveCallback
    static void _set_BeginAcceptReceiveCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ConnectAsyncCallback
    static System::AsyncCallback* _get_ConnectAsyncCallback();
    // Set static field: static private System.AsyncCallback ConnectAsyncCallback
    static void _set_ConnectAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginConnectCallback
    static System::IOAsyncCallback* _get_BeginConnectCallback();
    // Set static field: static private System.IOAsyncCallback BeginConnectCallback
    static void _set_BeginConnectCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback DisconnectAsyncCallback
    static System::AsyncCallback* _get_DisconnectAsyncCallback();
    // Set static field: static private System.AsyncCallback DisconnectAsyncCallback
    static void _set_DisconnectAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginDisconnectCallback
    static System::IOAsyncCallback* _get_BeginDisconnectCallback();
    // Set static field: static private System.IOAsyncCallback BeginDisconnectCallback
    static void _set_BeginDisconnectCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ReceiveAsyncCallback
    static System::AsyncCallback* _get_ReceiveAsyncCallback();
    // Set static field: static private System.AsyncCallback ReceiveAsyncCallback
    static void _set_ReceiveAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveCallback
    static System::IOAsyncCallback* _get_BeginReceiveCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveCallback
    static void _set_BeginReceiveCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveGenericCallback
    static System::IOAsyncCallback* _get_BeginReceiveGenericCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveGenericCallback
    static void _set_BeginReceiveGenericCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ReceiveFromAsyncCallback
    static System::AsyncCallback* _get_ReceiveFromAsyncCallback();
    // Set static field: static private System.AsyncCallback ReceiveFromAsyncCallback
    static void _set_ReceiveFromAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveFromCallback
    static System::IOAsyncCallback* _get_BeginReceiveFromCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveFromCallback
    static void _set_BeginReceiveFromCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback SendAsyncCallback
    static System::AsyncCallback* _get_SendAsyncCallback();
    // Set static field: static private System.AsyncCallback SendAsyncCallback
    static void _set_SendAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginSendGenericCallback
    static System::IOAsyncCallback* _get_BeginSendGenericCallback();
    // Set static field: static private System.IOAsyncCallback BeginSendGenericCallback
    static void _set_BeginSendGenericCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback SendToAsyncCallback
    static System::AsyncCallback* _get_SendToAsyncCallback();
    // Set static field: static private System.AsyncCallback SendToAsyncCallback
    static void _set_SendToAsyncCallback(System::AsyncCallback* value);
    // public System.Void .ctor(System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType)
    // Offset: 0x149DD88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Socket* New_ctor(System::Net::Sockets::AddressFamily addressFamily, System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Sockets::Socket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Socket*, creationType>(addressFamily, socketType, protocolType)));
    }
    // static public System.Boolean get_SupportsIPv4()
    // Offset: 0x149E474
    static bool get_SupportsIPv4();
    // static public System.Boolean get_OSSupportsIPv4()
    // Offset: 0x149E4E8
    static bool get_OSSupportsIPv4();
    // static public System.Boolean get_SupportsIPv6()
    // Offset: 0x149E55C
    static bool get_SupportsIPv6();
    // static public System.Boolean get_OSSupportsIPv6()
    // Offset: 0x149E5D0
    static bool get_OSSupportsIPv6();
    // public System.IntPtr get_Handle()
    // Offset: 0x149E644
    System::IntPtr get_Handle();
    // public System.Net.Sockets.AddressFamily get_AddressFamily()
    // Offset: 0x149E660
    System::Net::Sockets::AddressFamily get_AddressFamily();
    // public System.Net.Sockets.SocketType get_SocketType()
    // Offset: 0x149E668
    System::Net::Sockets::SocketType get_SocketType();
    // public System.Net.Sockets.ProtocolType get_ProtocolType()
    // Offset: 0x149E670
    System::Net::Sockets::ProtocolType get_ProtocolType();
    // public System.Void set_ExclusiveAddressUse(System.Boolean value)
    // Offset: 0x149E678
    void set_ExclusiveAddressUse(bool value);
    // public System.Void set_ReceiveBufferSize(System.Int32 value)
    // Offset: 0x149E850
    void set_ReceiveBufferSize(int value);
    // public System.Void set_SendBufferSize(System.Int32 value)
    // Offset: 0x149E8EC
    void set_SendBufferSize(int value);
    // public System.Void set_ReceiveTimeout(System.Int32 value)
    // Offset: 0x149E988
    void set_ReceiveTimeout(int value);
    // public System.Void set_SendTimeout(System.Int32 value)
    // Offset: 0x149EA2C
    void set_SendTimeout(int value);
    // public System.Int16 get_Ttl()
    // Offset: 0x149EAD0
    int16_t get_Ttl();
    // public System.Void set_Ttl(System.Int16 value)
    // Offset: 0x149EBC8
    void set_Ttl(int16_t value);
    // public System.Void set_DontFragment(System.Boolean value)
    // Offset: 0x149ECE0
    void set_DontFragment(bool value);
    // public System.Boolean get_DualMode()
    // Offset: 0x149ED98
    bool get_DualMode();
    // public System.Void set_DualMode(System.Boolean value)
    // Offset: 0x149EE80
    void set_DualMode(bool value);
    // private System.Boolean get_IsDualMode()
    // Offset: 0x149EF3C
    bool get_IsDualMode();
    // public System.Int32 Send(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x149EF54
    int Send(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x149BF4C
    int Send(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x149BA88
    int Receive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Receive(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x149F778
    int Receive(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 IOControl(System.Net.Sockets.IOControlCode ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
    // Offset: 0x1497018
    int IOControl(System::Net::Sockets::IOControlCode ioControlCode, ::Array<uint8_t>* optionInValue, ::Array<uint8_t>* optionOutValue);
    // public System.Void SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel level)
    // Offset: 0x149E254
    void SetIPProtectionLevel(System::Net::Sockets::IPProtectionLevel level);
    // public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
    // Offset: 0x149CE80
    System::IAsyncResult* BeginSend(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndSend(System.IAsyncResult asyncResult)
    // Offset: 0x149D28C
    int EndSend(System::IAsyncResult* asyncResult);
    // public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
    // Offset: 0x149C5C0
    System::IAsyncResult* BeginReceive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndReceive(System.IAsyncResult asyncResult)
    // Offset: 0x149C9CC
    int EndReceive(System::IAsyncResult* asyncResult);
    // static private System.Object get_InternalSyncObject()
    // Offset: 0x14A0374
    static ::Il2CppObject* get_InternalSyncObject();
    // System.Boolean get_CleanedUp()
    // Offset: 0x14A0450
    bool get_CleanedUp();
    // static System.Void InitializeSockets()
    // Offset: 0x149DFD4
    static void InitializeSockets();
    // public System.Void Dispose()
    // Offset: 0x14A04C4
    void Dispose();
    // System.Void InternalShutdown(System.Net.Sockets.SocketShutdown how)
    // Offset: 0x149C090
    void InternalShutdown(System::Net::Sockets::SocketShutdown how);
    // System.Void .ctor(System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, System.Net.Sockets.SafeSocketHandle safe_handle)
    // Offset: 0x14A06AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Socket* New_ctor(System::Net::Sockets::AddressFamily family, System::Net::Sockets::SocketType type, System::Net::Sockets::ProtocolType proto, System::Net::Sockets::SafeSocketHandle* safe_handle) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Sockets::Socket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Socket*, creationType>(family, type, proto, safe_handle)));
    }
    // private System.Void SocketDefaults()
    // Offset: 0x149E378
    void SocketDefaults();
    // private System.IntPtr Socket_internal(System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, out System.Int32 error)
    // Offset: 0x149E250
    System::IntPtr Socket_internal(System::Net::Sockets::AddressFamily family, System::Net::Sockets::SocketType type, System::Net::Sockets::ProtocolType proto, int& error);
    // public System.Int32 get_Available()
    // Offset: 0x149B3C8
    int get_Available();
    // static private System.Int32 Available_internal(System.Net.Sockets.SafeSocketHandle safeHandle, out System.Int32 error)
    // Offset: 0x14A0898
    static int Available_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int& error);
    // static private System.Int32 Available_internal(System.IntPtr socket, out System.Int32 error)
    // Offset: 0x14A0990
    static int Available_internal(System::IntPtr socket, int& error);
    // public System.Void set_EnableBroadcast(System.Boolean value)
    // Offset: 0x14A0994
    void set_EnableBroadcast(bool value);
    // public System.Boolean get_IsBound()
    // Offset: 0x14A0A38
    bool get_IsBound();
    // public System.Net.EndPoint get_LocalEndPoint()
    // Offset: 0x14A0A40
    System::Net::EndPoint* get_LocalEndPoint();
    // static private System.Net.SocketAddress LocalEndPoint_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 family, out System.Int32 error)
    // Offset: 0x14A0B34
    static System::Net::SocketAddress* LocalEndPoint_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int family, int& error);
    // static private System.Net.SocketAddress LocalEndPoint_internal(System.IntPtr socket, System.Int32 family, out System.Int32 error)
    // Offset: 0x14A0C3C
    static System::Net::SocketAddress* LocalEndPoint_internal(System::IntPtr socket, int family, int& error);
    // public System.Boolean get_Blocking()
    // Offset: 0x14A0C40
    bool get_Blocking();
    // public System.Void set_Blocking(System.Boolean value)
    // Offset: 0x14A0C48
    void set_Blocking(bool value);
    // static private System.Void Blocking_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Boolean block, out System.Int32 error)
    // Offset: 0x14A0D20
    static void Blocking_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, bool block, int& error);
    // static System.Void Blocking_internal(System.IntPtr socket, System.Boolean block, out System.Int32 error)
    // Offset: 0x149D924
    static void Blocking_internal(System::IntPtr socket, bool block, int& error);
    // public System.Boolean get_Connected()
    // Offset: 0x14A0E18
    bool get_Connected();
    // public System.Void set_NoDelay(System.Boolean value)
    // Offset: 0x14A07A0
    void set_NoDelay(bool value);
    // public System.Boolean Poll(System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)
    // Offset: 0x14A0EA0
    bool Poll(int microSeconds, System::Net::Sockets::SelectMode mode);
    // static private System.Boolean Poll_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SelectMode mode, System.Int32 timeout, out System.Int32 error)
    // Offset: 0x14A101C
    static bool Poll_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SelectMode mode, int timeout, int& error);
    // static private System.Boolean Poll_internal(System.IntPtr socket, System.Net.Sockets.SelectMode mode, System.Int32 timeout, out System.Int32 error)
    // Offset: 0x14A112C
    static bool Poll_internal(System::IntPtr socket, System::Net::Sockets::SelectMode mode, int timeout, int& error);
    // public System.Net.Sockets.Socket Accept()
    // Offset: 0x14A1130
    System::Net::Sockets::Socket* Accept();
    // System.Void Accept(System.Net.Sockets.Socket acceptSocket)
    // Offset: 0x14A1374
    void Accept(System::Net::Sockets::Socket* acceptSocket);
    // public System.Boolean AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs e)
    // Offset: 0x14A14A4
    bool AcceptAsync(System::Net::Sockets::SocketAsyncEventArgs* e);
    // public System.IAsyncResult BeginAccept(System.AsyncCallback callback, System.Object state)
    // Offset: 0x14A186C
    System::IAsyncResult* BeginAccept(System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Net.Sockets.Socket EndAccept(System.IAsyncResult asyncResult)
    // Offset: 0x14A19C4
    System::Net::Sockets::Socket* EndAccept(System::IAsyncResult* asyncResult);
    // public System.Net.Sockets.Socket EndAccept(out System.Byte[] buffer, out System.Int32 bytesTransferred, System.IAsyncResult asyncResult)
    // Offset: 0x14A19F4
    System::Net::Sockets::Socket* EndAccept(::Array<uint8_t>*& buffer, int& bytesTransferred, System::IAsyncResult* asyncResult);
    // static private System.Net.Sockets.SafeSocketHandle Accept_internal(System.Net.Sockets.SafeSocketHandle safeHandle, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A126C
    static System::Net::Sockets::SafeSocketHandle* Accept_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int& error, bool blocking);
    // static private System.IntPtr Accept_internal(System.IntPtr sock, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A1C00
    static System::IntPtr Accept_internal(System::IntPtr sock, int& error, bool blocking);
    // public System.Void Bind(System.Net.EndPoint localEP)
    // Offset: 0x1498168
    void Bind(System::Net::EndPoint* localEP);
    // static private System.Void Bind_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.SocketAddress sa, out System.Int32 error)
    // Offset: 0x14A1CD0
    static void Bind_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::SocketAddress* sa, int& error);
    // static private System.Void Bind_internal(System.IntPtr sock, System.Net.SocketAddress sa, out System.Int32 error)
    // Offset: 0x14A1DC8
    static void Bind_internal(System::IntPtr sock, System::Net::SocketAddress* sa, int& error);
    // public System.Void Listen(System.Int32 backlog)
    // Offset: 0x14A1DCC
    void Listen(int backlog);
    // static private System.Void Listen_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 backlog, out System.Int32 error)
    // Offset: 0x14A1EC0
    static void Listen_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int backlog, int& error);
    // static private System.Void Listen_internal(System.IntPtr sock, System.Int32 backlog, out System.Int32 error)
    // Offset: 0x14A1FB8
    static void Listen_internal(System::IntPtr sock, int backlog, int& error);
    // public System.Void Connect(System.Net.EndPoint remoteEP)
    // Offset: 0x14A1FBC
    void Connect(System::Net::EndPoint* remoteEP);
    // public System.IAsyncResult BeginConnect(System.String host, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
    // Offset: 0x14A2410
    System::IAsyncResult* BeginConnect(::Il2CppString* host, int port, System::AsyncCallback* requestCallback, ::Il2CppObject* state);
    // public System.IAsyncResult BeginConnect(System.Net.IPAddress[] addresses, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
    // Offset: 0x14A2588
    System::IAsyncResult* BeginConnect(::Array<System::Net::IPAddress*>* addresses, int port, System::AsyncCallback* requestCallback, ::Il2CppObject* state);
    // static private System.Void BeginMConnect(System.Net.Sockets.SocketAsyncResult sockares)
    // Offset: 0x14A2780
    static void BeginMConnect(System::Net::Sockets::SocketAsyncResult* sockares);
    // static private System.Void BeginSConnect(System.Net.Sockets.SocketAsyncResult sockares)
    // Offset: 0x14A292C
    static void BeginSConnect(System::Net::Sockets::SocketAsyncResult* sockares);
    // public System.Void EndConnect(System.IAsyncResult asyncResult)
    // Offset: 0x14A2CF8
    void EndConnect(System::IAsyncResult* asyncResult);
    // static private System.Void Connect_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A2318
    static void Connect_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::SocketAddress* sa, int& error, bool blocking);
    // static private System.Void Connect_internal(System.IntPtr sock, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A2DA4
    static void Connect_internal(System::IntPtr sock, System::Net::SocketAddress* sa, int& error, bool blocking);
    // public System.Void Disconnect(System.Boolean reuseSocket)
    // Offset: 0x14A2DAC
    void Disconnect(bool reuseSocket);
    // public System.Void EndDisconnect(System.IAsyncResult asyncResult)
    // Offset: 0x14A2F98
    void EndDisconnect(System::IAsyncResult* asyncResult);
    // static private System.Void Disconnect_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Boolean reuse, out System.Int32 error)
    // Offset: 0x14A2EA0
    static void Disconnect_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, bool reuse, int& error);
    // static private System.Void Disconnect_internal(System.IntPtr sock, System.Boolean reuse, out System.Int32 error)
    // Offset: 0x14A3044
    static void Disconnect_internal(System::IntPtr sock, bool reuse, int& error);
    // public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x149F654
    int Receive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.Int32 Receive(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x149F824
    int Receive(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
    // Offset: 0x14A0128
    System::IAsyncResult* BeginReceive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndReceive(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x14A028C
    int EndReceive(System::IAsyncResult* asyncResult, System::Net::Sockets::SocketError& errorCode);
    // static private System.Int32 Receive_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3300
    static int Receive_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Receive_internal(System.IntPtr sock, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A340C
    static int Receive_internal(System::IntPtr sock, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Receive_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A31F4
    static int Receive_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Receive_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3414
    static int Receive_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
    // Offset: 0x14A341C
    int ReceiveFrom(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint*& remoteEP);
    // System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x14A354C
    int ReceiveFrom(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint*& remoteEP, System::Net::Sockets::SocketError& errorCode);
    // public System.Int32 EndReceiveFrom(System.IAsyncResult asyncResult, ref System.Net.EndPoint endPoint)
    // Offset: 0x14A37F4
    int EndReceiveFrom(System::IAsyncResult* asyncResult, System::Net::EndPoint*& endPoint);
    // static private System.Int32 ReceiveFrom_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, ref System.Net.SocketAddress sockaddr, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A36E0
    static int ReceiveFrom_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress*& sockaddr, int& error, bool blocking);
    // static private System.Int32 ReceiveFrom_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, ref System.Net.SocketAddress sockaddr, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A38F8
    static int ReceiveFrom_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress*& sockaddr, int& error, bool blocking);
    // public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x149F4F8
    int Send(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.Int32 Send(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x149F000
    int Send(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
    // Offset: 0x149FE64
    System::IAsyncResult* BeginSend(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode, System::AsyncCallback* callback, ::Il2CppObject* state);
    // static private System.Void BeginSendCallback(System.Net.Sockets.SocketAsyncResult sockares, System.Int32 sent_so_far)
    // Offset: 0x14A3B18
    static void BeginSendCallback(System::Net::Sockets::SocketAsyncResult* sockares, int sent_so_far);
    // public System.Int32 EndSend(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x14A0040
    int EndSend(System::IAsyncResult* asyncResult, System::Net::Sockets::SocketError& errorCode);
    // static private System.Int32 Send_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3A0C
    static int Send_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Send_internal(System.IntPtr sock, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3DE4
    static int Send_internal(System::IntPtr sock, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Send_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3900
    static int Send_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Send_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3DEC
    static int Send_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // public System.Int32 SendTo(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
    // Offset: 0x14A3DF4
    int SendTo(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint* remoteEP);
    // public System.Int32 EndSendTo(System.IAsyncResult asyncResult)
    // Offset: 0x14A40A8
    int EndSendTo(System::IAsyncResult* asyncResult);
    // static private System.Int32 SendTo_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A3F94
    static int SendTo_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress* sa, int& error, bool blocking);
    // static private System.Int32 SendTo_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x14A415C
    static int SendTo_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress* sa, int& error, bool blocking);
    // public System.Object GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName)
    // Offset: 0x149B054
    ::Il2CppObject* GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName);
    // static private System.Void GetSocketOption_obj_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, out System.Object obj_val, out System.Int32 error)
    // Offset: 0x14A4164
    static void GetSocketOption_obj_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject*& obj_val, int& error);
    // static private System.Void GetSocketOption_obj_internal(System.IntPtr socket, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, out System.Object obj_val, out System.Int32 error)
    // Offset: 0x14A4274
    static void GetSocketOption_obj_internal(System::IntPtr socket, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject*& obj_val, int& error);
    // public System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Boolean optionValue)
    // Offset: 0x14A4278
    void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, bool optionValue);
    // public System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue)
    // Offset: 0x149E72C
    void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionValue);
    // static private System.Void SetSocketOption_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, System.Object obj_val, System.Byte[] byte_val, System.Int32 int_val, out System.Int32 error)
    // Offset: 0x14A4280
    static void SetSocketOption_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject* obj_val, ::Array<uint8_t>* byte_val, int int_val, int& error);
    // static private System.Void SetSocketOption_internal(System.IntPtr socket, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, System.Object obj_val, System.Byte[] byte_val, System.Int32 int_val, out System.Int32 error)
    // Offset: 0x14A43A8
    static void SetSocketOption_internal(System::IntPtr socket, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject* obj_val, ::Array<uint8_t>* byte_val, int int_val, int& error);
    // public System.Int32 IOControl(System.Int32 ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
    // Offset: 0x149FCE4
    int IOControl(int ioControlCode, ::Array<uint8_t>* optionInValue, ::Array<uint8_t>* optionOutValue);
    // static private System.Int32 IOControl_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 ioctl_code, System.Byte[] input, System.Byte[] output, out System.Int32 error)
    // Offset: 0x14A43AC
    static int IOControl_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int ioctl_code, ::Array<uint8_t>* input, ::Array<uint8_t>* output, int& error);
    // static private System.Int32 IOControl_internal(System.IntPtr sock, System.Int32 ioctl_code, System.Byte[] input, System.Byte[] output, out System.Int32 error)
    // Offset: 0x14A44CC
    static int IOControl_internal(System::IntPtr sock, int ioctl_code, ::Array<uint8_t>* input, ::Array<uint8_t>* output, int& error);
    // public System.Void Close()
    // Offset: 0x14A44D0
    void Close();
    // public System.Void Close(System.Int32 timeout)
    // Offset: 0x149C128
    void Close(int timeout);
    // static System.Void Close_internal(System.IntPtr socket, out System.Int32 error)
    // Offset: 0x149D934
    static void Close_internal(System::IntPtr socket, int& error);
    // public System.Void Shutdown(System.Net.Sockets.SocketShutdown how)
    // Offset: 0x14A44D8
    void Shutdown(System::Net::Sockets::SocketShutdown how);
    // static private System.Void Shutdown_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketShutdown how, out System.Int32 error)
    // Offset: 0x14A05B4
    static void Shutdown_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SocketShutdown how, int& error);
    // static System.Void Shutdown_internal(System.IntPtr socket, System.Net.Sockets.SocketShutdown how, out System.Int32 error)
    // Offset: 0x149D92C
    static void Shutdown_internal(System::IntPtr socket, System::Net::Sockets::SocketShutdown how, int& error);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x14A45DC
    void Dispose(bool disposing);
    // private System.Void Linger(System.IntPtr handle)
    // Offset: 0x14A464C
    void Linger(System::IntPtr handle);
    // private System.Void ThrowIfDisposedAndClosed()
    // Offset: 0x14A07E4
    void ThrowIfDisposedAndClosed();
    // private System.Void ThrowIfBufferNull(System.Byte[] buffer)
    // Offset: 0x14A304C
    void ThrowIfBufferNull(::Array<uint8_t>* buffer);
    // private System.Void ThrowIfBufferOutOfRange(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x14A30CC
    void ThrowIfBufferOutOfRange(::Array<uint8_t>* buffer, int offset, int size);
    // private System.Void ThrowIfUdp()
    // Offset: 0x14A0E20
    void ThrowIfUdp();
    // private System.Net.Sockets.SocketAsyncResult ValidateEndIAsyncResult(System.IAsyncResult ares, System.String methodName, System.String argName)
    // Offset: 0x14A1AC8
    System::Net::Sockets::SocketAsyncResult* ValidateEndIAsyncResult(System::IAsyncResult* ares, ::Il2CppString* methodName, ::Il2CppString* argName);
    // private System.Void QueueIOSelectorJob(System.Threading.SemaphoreSlim sem, System.IntPtr handle, System.IOSelectorJob job)
    // Offset: 0x14A1738
    void QueueIOSelectorJob(System::Threading::SemaphoreSlim* sem, System::IntPtr handle, System::IOSelectorJob* job);
    // private System.Void InitSocketAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs e, System.AsyncCallback callback, System.Object state, System.Net.Sockets.SocketOperation operation)
    // Offset: 0x14A16B8
    void InitSocketAsyncEventArgs(System::Net::Sockets::SocketAsyncEventArgs* e, System::AsyncCallback* callback, ::Il2CppObject* state, System::Net::Sockets::SocketOperation operation);
    // private System.Net.Sockets.SocketAsyncOperation SocketOperationToSocketAsyncOperation(System.Net.Sockets.SocketOperation op)
    // Offset: 0x14A47C8
    System::Net::Sockets::SocketAsyncOperation SocketOperationToSocketAsyncOperation(System::Net::Sockets::SocketOperation op);
    // private System.Net.IPEndPoint RemapIPEndPoint(System.Net.IPEndPoint input)
    // Offset: 0x14A1C08
    System::Net::IPEndPoint* RemapIPEndPoint(System::Net::IPEndPoint* input);
    // static System.Void cancel_blocking_socket_operation(System.Threading.Thread thread)
    // Offset: 0x149D930
    static void cancel_blocking_socket_operation(System::Threading::Thread* thread);
    // static System.Int32 get_FamilyHint()
    // Offset: 0x14A48A0
    static int get_FamilyHint();
    // static private System.Boolean IsProtocolSupported_internal(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterface)
    // Offset: 0x14A4940
    static bool IsProtocolSupported_internal(System::Net::NetworkInformation::NetworkInterfaceComponent networkInterface);
    // static private System.Boolean IsProtocolSupported(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterface)
    // Offset: 0x14A0460
    static bool IsProtocolSupported(System::Net::NetworkInformation::NetworkInterfaceComponent networkInterface);
    // static private System.Void .cctor()
    // Offset: 0x14A4944
    static void _cctor();
    // protected override System.Void Finalize()
    // Offset: 0x14A0540
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Net.Sockets.Socket
  #pragma pack(pop)
  static check_size<sizeof(Socket), 80 + sizeof(bool)> __System_Net_Sockets_SocketSizeCheck;
  static_assert(sizeof(Socket) == 0x51);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::Sockets::Socket*, "System.Net.Sockets", "Socket");
// Writing MetadataGetter for method: Socket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::AddressFamily, System::Net::Sockets::SocketType, System::Net::Sockets::ProtocolType)>(&Socket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::AddressFamily>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::ProtocolType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::AddressFamily, System::Net::Sockets::SocketType, System::Net::Sockets::ProtocolType)>(&Socket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::AddressFamily>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::ProtocolType>()});
  }
};
// Writing MetadataGetter for method: Socket::get_SupportsIPv4
// Il2CppName: get_SupportsIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Socket::get_SupportsIPv4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_SupportsIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_OSSupportsIPv4
// Il2CppName: get_OSSupportsIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Socket::get_OSSupportsIPv4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_OSSupportsIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_SupportsIPv6
// Il2CppName: get_SupportsIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Socket::get_SupportsIPv6)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_SupportsIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_OSSupportsIPv6
// Il2CppName: get_OSSupportsIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Socket::get_OSSupportsIPv6)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_OSSupportsIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (Socket::*)()>(&Socket::get_Handle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_AddressFamily
// Il2CppName: get_AddressFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::AddressFamily (Socket::*)()>(&Socket::get_AddressFamily)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_AddressFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_SocketType
// Il2CppName: get_SocketType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::SocketType (Socket::*)()>(&Socket::get_SocketType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_SocketType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_ProtocolType
// Il2CppName: get_ProtocolType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::ProtocolType (Socket::*)()>(&Socket::get_ProtocolType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_ProtocolType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::set_ExclusiveAddressUse
// Il2CppName: set_ExclusiveAddressUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::set_ExclusiveAddressUse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_ExclusiveAddressUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::set_ReceiveBufferSize
// Il2CppName: set_ReceiveBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int)>(&Socket::set_ReceiveBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_ReceiveBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::set_SendBufferSize
// Il2CppName: set_SendBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int)>(&Socket::set_SendBufferSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_SendBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::set_ReceiveTimeout
// Il2CppName: set_ReceiveTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int)>(&Socket::set_ReceiveTimeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_ReceiveTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::set_SendTimeout
// Il2CppName: set_SendTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int)>(&Socket::set_SendTimeout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_SendTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::get_Ttl
// Il2CppName: get_Ttl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (Socket::*)()>(&Socket::get_Ttl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_Ttl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::set_Ttl
// Il2CppName: set_Ttl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int16_t)>(&Socket::set_Ttl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_Ttl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int16_t>()});
  }
};
// Writing MetadataGetter for method: Socket::set_DontFragment
// Il2CppName: set_DontFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::set_DontFragment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_DontFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::get_DualMode
// Il2CppName: get_DualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)()>(&Socket::get_DualMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_DualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::set_DualMode
// Il2CppName: set_DualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::set_DualMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_DualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::get_IsDualMode
// Il2CppName: get_IsDualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)()>(&Socket::get_IsDualMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_IsDualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*, System::Net::Sockets::SocketFlags)>(&Socket::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>()});
  }
};
// Writing MetadataGetter for method: Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags)>(&Socket::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags)>(&Socket::Receive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*, System::Net::Sockets::SocketFlags)>(&Socket::Receive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>()});
  }
};
// Writing MetadataGetter for method: Socket::IOControl
// Il2CppName: IOControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::Net::Sockets::IOControlCode, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&Socket::IOControl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "IOControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::IOControlCode>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: Socket::SetIPProtectionLevel
// Il2CppName: SetIPProtectionLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::IPProtectionLevel)>(&Socket::SetIPProtectionLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SetIPProtectionLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::IPProtectionLevel>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginSend
// Il2CppName: BeginSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginSend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndSend
// Il2CppName: EndSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::IAsyncResult*)>(&Socket::EndSend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginReceive
// Il2CppName: BeginReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndReceive
// Il2CppName: EndReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::IAsyncResult*)>(&Socket::EndReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::get_InternalSyncObject
// Il2CppName: get_InternalSyncObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)()>(&Socket::get_InternalSyncObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_InternalSyncObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_CleanedUp
// Il2CppName: get_CleanedUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)()>(&Socket::get_CleanedUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_CleanedUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::InitializeSockets
// Il2CppName: InitializeSockets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Socket::InitializeSockets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "InitializeSockets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)()>(&Socket::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::InternalShutdown
// Il2CppName: InternalShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::SocketShutdown)>(&Socket::InternalShutdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "InternalShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketShutdown>()});
  }
};
// Writing MetadataGetter for method: Socket::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::AddressFamily, System::Net::Sockets::SocketType, System::Net::Sockets::ProtocolType, System::Net::Sockets::SafeSocketHandle*)>(&Socket::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::AddressFamily>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::ProtocolType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::AddressFamily, System::Net::Sockets::SocketType, System::Net::Sockets::ProtocolType, System::Net::Sockets::SafeSocketHandle*)>(&Socket::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::AddressFamily>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::ProtocolType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>()});
  }
};
// Writing MetadataGetter for method: Socket::SocketDefaults
// Il2CppName: SocketDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)()>(&Socket::SocketDefaults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SocketDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Socket_internal
// Il2CppName: Socket_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (Socket::*)(System::Net::Sockets::AddressFamily, System::Net::Sockets::SocketType, System::Net::Sockets::ProtocolType, int&)>(&Socket::Socket_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Socket_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::AddressFamily>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketType>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::ProtocolType>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::get_Available
// Il2CppName: get_Available
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)()>(&Socket::get_Available)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_Available", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Available_internal
// Il2CppName: Available_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, int&)>(&Socket::Available_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Available_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Available_internal
// Il2CppName: Available_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, int&)>(&Socket::Available_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Available_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::set_EnableBroadcast
// Il2CppName: set_EnableBroadcast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::set_EnableBroadcast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_EnableBroadcast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::get_IsBound
// Il2CppName: get_IsBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)()>(&Socket::get_IsBound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_IsBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::get_LocalEndPoint
// Il2CppName: get_LocalEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::EndPoint* (Socket::*)()>(&Socket::get_LocalEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_LocalEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::LocalEndPoint_internal
// Il2CppName: LocalEndPoint_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::SocketAddress* (*)(System::Net::Sockets::SafeSocketHandle*, int, int&)>(&Socket::LocalEndPoint_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "LocalEndPoint_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::LocalEndPoint_internal
// Il2CppName: LocalEndPoint_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::SocketAddress* (*)(System::IntPtr, int, int&)>(&Socket::LocalEndPoint_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "LocalEndPoint_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::get_Blocking
// Il2CppName: get_Blocking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)()>(&Socket::get_Blocking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_Blocking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::set_Blocking
// Il2CppName: set_Blocking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::set_Blocking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_Blocking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Blocking_internal
// Il2CppName: Blocking_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, bool, int&)>(&Socket::Blocking_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Blocking_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Blocking_internal
// Il2CppName: Blocking_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, bool, int&)>(&Socket::Blocking_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Blocking_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::get_Connected
// Il2CppName: get_Connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)()>(&Socket::get_Connected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_Connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::set_NoDelay
// Il2CppName: set_NoDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::set_NoDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "set_NoDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Poll
// Il2CppName: Poll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)(int, System::Net::Sockets::SelectMode)>(&Socket::Poll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Poll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SelectMode>()});
  }
};
// Writing MetadataGetter for method: Socket::Poll_internal
// Il2CppName: Poll_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::Sockets::SelectMode, int, int&)>(&Socket::Poll_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Poll_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SelectMode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Poll_internal
// Il2CppName: Poll_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::IntPtr, System::Net::Sockets::SelectMode, int, int&)>(&Socket::Poll_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Poll_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SelectMode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::Socket* (Socket::*)()>(&Socket::Accept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::Socket*)>(&Socket::Accept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::Socket*>()});
  }
};
// Writing MetadataGetter for method: Socket::AcceptAsync
// Il2CppName: AcceptAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Socket::*)(System::Net::Sockets::SocketAsyncEventArgs*)>(&Socket::AcceptAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "AcceptAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketAsyncEventArgs*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginAccept
// Il2CppName: BeginAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginAccept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndAccept
// Il2CppName: EndAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::Socket* (Socket::*)(System::IAsyncResult*)>(&Socket::EndAccept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndAccept
// Il2CppName: EndAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::Socket* (Socket::*)(::Array<uint8_t>*&, int&, System::IAsyncResult*)>(&Socket::EndAccept)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::Accept_internal
// Il2CppName: Accept_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::SafeSocketHandle* (*)(System::Net::Sockets::SafeSocketHandle*, int&, bool)>(&Socket::Accept_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Accept_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Accept_internal
// Il2CppName: Accept_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(System::IntPtr, int&, bool)>(&Socket::Accept_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Accept_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::EndPoint*)>(&Socket::Bind)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::EndPoint*>()});
  }
};
// Writing MetadataGetter for method: Socket::Bind_internal
// Il2CppName: Bind_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::SocketAddress*, int&)>(&Socket::Bind_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Bind_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Bind_internal
// Il2CppName: Bind_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::Net::SocketAddress*, int&)>(&Socket::Bind_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Bind_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Listen
// Il2CppName: Listen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int)>(&Socket::Listen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Listen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::Listen_internal
// Il2CppName: Listen_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, int, int&)>(&Socket::Listen_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Listen_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Listen_internal
// Il2CppName: Listen_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, int, int&)>(&Socket::Listen_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Listen_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::EndPoint*)>(&Socket::Connect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::EndPoint*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginConnect
// Il2CppName: BeginConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(::Il2CppString*, int, System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginConnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginConnect
// Il2CppName: BeginConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(::Array<System::Net::IPAddress*>*, int, System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginConnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Net::IPAddress*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginMConnect
// Il2CppName: BeginMConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SocketAsyncResult*)>(&Socket::BeginMConnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginMConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginSConnect
// Il2CppName: BeginSConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SocketAsyncResult*)>(&Socket::BeginSConnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginSConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndConnect
// Il2CppName: EndConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::IAsyncResult*)>(&Socket::EndConnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::Connect_internal
// Il2CppName: Connect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::SocketAddress*, int&, bool)>(&Socket::Connect_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Connect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Connect_internal
// Il2CppName: Connect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::Net::SocketAddress*, int&, bool)>(&Socket::Connect_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Connect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::Disconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::EndDisconnect
// Il2CppName: EndDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::IAsyncResult*)>(&Socket::EndDisconnect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::Disconnect_internal
// Il2CppName: Disconnect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, bool, int&)>(&Socket::Disconnect_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Disconnect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Disconnect_internal
// Il2CppName: Disconnect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, bool, int&)>(&Socket::Disconnect_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Disconnect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::Sockets::SocketError&)>(&Socket::Receive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*, System::Net::Sockets::SocketFlags, System::Net::Sockets::SocketError&)>(&Socket::Receive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginReceive
// Il2CppName: BeginReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::Sockets::SocketError&, System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndReceive
// Il2CppName: EndReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::IAsyncResult*, System::Net::Sockets::SocketError&)>(&Socket::EndReceive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::Sockets::Socket::WSABUF*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Receive_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::Socket::WSABUF*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, System::Net::Sockets::Socket::WSABUF*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Receive_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::Socket::WSABUF*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Receive_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, uint8_t*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Receive_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::ReceiveFrom
// Il2CppName: ReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::EndPoint*&)>(&Socket::ReceiveFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::EndPoint*&>()});
  }
};
// Writing MetadataGetter for method: Socket::ReceiveFrom
// Il2CppName: ReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::EndPoint*&, System::Net::Sockets::SocketError&)>(&Socket::ReceiveFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::EndPoint*&>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::EndReceiveFrom
// Il2CppName: EndReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::IAsyncResult*, System::Net::EndPoint*&)>(&Socket::EndReceiveFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::EndPoint*&>()});
  }
};
// Writing MetadataGetter for method: Socket::ReceiveFrom_internal
// Il2CppName: ReceiveFrom_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, System::Net::Sockets::SocketFlags, System::Net::SocketAddress*&, int&, bool)>(&Socket::ReceiveFrom_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ReceiveFrom_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::ReceiveFrom_internal
// Il2CppName: ReceiveFrom_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, uint8_t*, int, System::Net::Sockets::SocketFlags, System::Net::SocketAddress*&, int&, bool)>(&Socket::ReceiveFrom_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ReceiveFrom_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::Sockets::SocketError&)>(&Socket::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*, System::Net::Sockets::SocketFlags, System::Net::Sockets::SocketError&)>(&Socket::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginSend
// Il2CppName: BeginSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::Sockets::SocketError&, System::AsyncCallback*, ::Il2CppObject*)>(&Socket::BeginSend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Socket::BeginSendCallback
// Il2CppName: BeginSendCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SocketAsyncResult*, int)>(&Socket::BeginSendCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "BeginSendCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketAsyncResult*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::EndSend
// Il2CppName: EndSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::IAsyncResult*, System::Net::Sockets::SocketError&)>(&Socket::EndSend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketError&>()});
  }
};
// Writing MetadataGetter for method: Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::Sockets::Socket::WSABUF*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Send_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::Socket::WSABUF*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, System::Net::Sockets::Socket::WSABUF*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Send_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::Socket::WSABUF*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Send_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, uint8_t*, int, System::Net::Sockets::SocketFlags, int&, bool)>(&Socket::Send_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::SendTo
// Il2CppName: SendTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(::Array<uint8_t>*, int, int, System::Net::Sockets::SocketFlags, System::Net::EndPoint*)>(&Socket::SendTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SendTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::EndPoint*>()});
  }
};
// Writing MetadataGetter for method: Socket::EndSendTo
// Il2CppName: EndSendTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(System::IAsyncResult*)>(&Socket::EndSendTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "EndSendTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Writing MetadataGetter for method: Socket::SendTo_internal
// Il2CppName: SendTo_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, System::Net::Sockets::SocketFlags, System::Net::SocketAddress*, int&, bool)>(&Socket::SendTo_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SendTo_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::SendTo_internal
// Il2CppName: SendTo_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, uint8_t*, int, System::Net::Sockets::SocketFlags, System::Net::SocketAddress*, int&, bool)>(&Socket::SendTo_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SendTo_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint8_t*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketFlags>(), ::il2cpp_utils::ExtractIndependentType<System::Net::SocketAddress*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::GetSocketOption
// Il2CppName: GetSocketOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Socket::*)(System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName)>(&Socket::GetSocketOption)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "GetSocketOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>()});
  }
};
// Writing MetadataGetter for method: Socket::GetSocketOption_obj_internal
// Il2CppName: GetSocketOption_obj_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName, ::Il2CppObject*&, int&)>(&Socket::GetSocketOption_obj_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "GetSocketOption_obj_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::GetSocketOption_obj_internal
// Il2CppName: GetSocketOption_obj_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName, ::Il2CppObject*&, int&)>(&Socket::GetSocketOption_obj_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "GetSocketOption_obj_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::SetSocketOption
// Il2CppName: SetSocketOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName, bool)>(&Socket::SetSocketOption)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SetSocketOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::SetSocketOption
// Il2CppName: SetSocketOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName, int)>(&Socket::SetSocketOption)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SetSocketOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::SetSocketOption_internal
// Il2CppName: SetSocketOption_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName, ::Il2CppObject*, ::Array<uint8_t>*, int, int&)>(&Socket::SetSocketOption_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SetSocketOption_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::SetSocketOption_internal
// Il2CppName: SetSocketOption_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::Net::Sockets::SocketOptionLevel, System::Net::Sockets::SocketOptionName, ::Il2CppObject*, ::Array<uint8_t>*, int, int&)>(&Socket::SetSocketOption_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SetSocketOption_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionLevel>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOptionName>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::IOControl
// Il2CppName: IOControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Socket::*)(int, ::Array<uint8_t>*, ::Array<uint8_t>*)>(&Socket::IOControl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "IOControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: Socket::IOControl_internal
// Il2CppName: IOControl_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Net::Sockets::SafeSocketHandle*, int, ::Array<uint8_t>*, ::Array<uint8_t>*, int&)>(&Socket::IOControl_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "IOControl_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::IOControl_internal
// Il2CppName: IOControl_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::IntPtr, int, ::Array<uint8_t>*, ::Array<uint8_t>*, int&)>(&Socket::IOControl_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "IOControl_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)()>(&Socket::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(int)>(&Socket::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::Close_internal
// Il2CppName: Close_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, int&)>(&Socket::Close_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Close_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Shutdown
// Il2CppName: Shutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::SocketShutdown)>(&Socket::Shutdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Shutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketShutdown>()});
  }
};
// Writing MetadataGetter for method: Socket::Shutdown_internal
// Il2CppName: Shutdown_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Net::Sockets::SafeSocketHandle*, System::Net::Sockets::SocketShutdown, int&)>(&Socket::Shutdown_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Shutdown_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SafeSocketHandle*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketShutdown>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Shutdown_internal
// Il2CppName: Shutdown_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr, System::Net::Sockets::SocketShutdown, int&)>(&Socket::Shutdown_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Shutdown_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketShutdown>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: Socket::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(bool)>(&Socket::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Socket::Linger
// Il2CppName: Linger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::IntPtr)>(&Socket::Linger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Linger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Socket::ThrowIfDisposedAndClosed
// Il2CppName: ThrowIfDisposedAndClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)()>(&Socket::ThrowIfDisposedAndClosed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ThrowIfDisposedAndClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::ThrowIfBufferNull
// Il2CppName: ThrowIfBufferNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(::Array<uint8_t>*)>(&Socket::ThrowIfBufferNull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ThrowIfBufferNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: Socket::ThrowIfBufferOutOfRange
// Il2CppName: ThrowIfBufferOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(::Array<uint8_t>*, int, int)>(&Socket::ThrowIfBufferOutOfRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ThrowIfBufferOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Socket::ThrowIfUdp
// Il2CppName: ThrowIfUdp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)()>(&Socket::ThrowIfUdp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ThrowIfUdp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::ValidateEndIAsyncResult
// Il2CppName: ValidateEndIAsyncResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::SocketAsyncResult* (Socket::*)(System::IAsyncResult*, ::Il2CppString*, ::Il2CppString*)>(&Socket::ValidateEndIAsyncResult)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "ValidateEndIAsyncResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Socket::QueueIOSelectorJob
// Il2CppName: QueueIOSelectorJob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Threading::SemaphoreSlim*, System::IntPtr, System::IOSelectorJob*)>(&Socket::QueueIOSelectorJob)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "QueueIOSelectorJob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SemaphoreSlim*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IOSelectorJob*>()});
  }
};
// Writing MetadataGetter for method: Socket::InitSocketAsyncEventArgs
// Il2CppName: InitSocketAsyncEventArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)(System::Net::Sockets::SocketAsyncEventArgs*, System::AsyncCallback*, ::Il2CppObject*, System::Net::Sockets::SocketOperation)>(&Socket::InitSocketAsyncEventArgs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "InitSocketAsyncEventArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketAsyncEventArgs*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOperation>()});
  }
};
// Writing MetadataGetter for method: Socket::SocketOperationToSocketAsyncOperation
// Il2CppName: SocketOperationToSocketAsyncOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::Sockets::SocketAsyncOperation (Socket::*)(System::Net::Sockets::SocketOperation)>(&Socket::SocketOperationToSocketAsyncOperation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "SocketOperationToSocketAsyncOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::Sockets::SocketOperation>()});
  }
};
// Writing MetadataGetter for method: Socket::RemapIPEndPoint
// Il2CppName: RemapIPEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPEndPoint* (Socket::*)(System::Net::IPEndPoint*)>(&Socket::RemapIPEndPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "RemapIPEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::IPEndPoint*>()});
  }
};
// Writing MetadataGetter for method: Socket::cancel_blocking_socket_operation
// Il2CppName: cancel_blocking_socket_operation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Threading::Thread*)>(&Socket::cancel_blocking_socket_operation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "cancel_blocking_socket_operation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::Thread*>()});
  }
};
// Writing MetadataGetter for method: Socket::get_FamilyHint
// Il2CppName: get_FamilyHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Socket::get_FamilyHint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "get_FamilyHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::IsProtocolSupported_internal
// Il2CppName: IsProtocolSupported_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::NetworkInformation::NetworkInterfaceComponent)>(&Socket::IsProtocolSupported_internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "IsProtocolSupported_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::NetworkInformation::NetworkInterfaceComponent>()});
  }
};
// Writing MetadataGetter for method: Socket::IsProtocolSupported
// Il2CppName: IsProtocolSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Net::NetworkInformation::NetworkInterfaceComponent)>(&Socket::IsProtocolSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "IsProtocolSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Net::NetworkInformation::NetworkInterfaceComponent>()});
  }
};
// Writing MetadataGetter for method: Socket::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Socket::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Socket::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Socket::*)()>(&Socket::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Socket*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
