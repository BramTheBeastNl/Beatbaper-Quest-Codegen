// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: System.Net.Sockets.SocketType
#include "System/Net/Sockets/SocketType.hpp"
// Including type: System.Net.Sockets.ProtocolType
#include "System/Net/Sockets/ProtocolType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SafeSocketHandle
  class SafeSocketHandle;
  // Forward declaring type: SocketFlags
  struct SocketFlags;
  // Forward declaring type: IOControlCode
  struct IOControlCode;
  // Forward declaring type: IPProtectionLevel
  struct IPProtectionLevel;
  // Forward declaring type: SocketShutdown
  struct SocketShutdown;
  // Forward declaring type: SelectMode
  struct SelectMode;
  // Forward declaring type: SocketAsyncEventArgs
  class SocketAsyncEventArgs;
  // Forward declaring type: SocketAsyncResult
  class SocketAsyncResult;
  // Forward declaring type: SocketError
  struct SocketError;
  // Forward declaring type: SocketOptionLevel
  struct SocketOptionLevel;
  // Forward declaring type: SocketOptionName
  struct SocketOptionName;
  // Forward declaring type: SocketOperation
  struct SocketOperation;
  // Forward declaring type: SocketAsyncOperation
  struct SocketAsyncOperation;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: EndPoint
  class EndPoint;
  // Forward declaring type: SocketAddress
  class SocketAddress;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SemaphoreSlim
  class SemaphoreSlim;
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IOAsyncCallback
  class IOAsyncCallback;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: IOSelectorJob
  class IOSelectorJob;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IList`1 because it is already included!
}
// Forward declaring namespace: System::Net::NetworkInformation
namespace System::Net::NetworkInformation {
  // Forward declaring type: NetworkInterfaceComponent
  struct NetworkInterfaceComponent;
}
// Completed forward declares
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Autogenerated type: System.Net.Sockets.Socket
  class Socket : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Net::Sockets::Socket::WSABUF
    struct WSABUF;
    // Nested type: System::Net::Sockets::Socket::$$c
    class $$c;
    // Nested type: System::Net::Sockets::Socket::$$c__DisplayClass242_0
    class $$c__DisplayClass242_0;
    // Nested type: System::Net::Sockets::Socket::$$c__DisplayClass298_0
    class $$c__DisplayClass298_0;
    // private System.Boolean is_closed
    // Offset: 0x10
    bool is_closed;
    // private System.Boolean is_listening
    // Offset: 0x11
    bool is_listening;
    // private System.Boolean useOverlappedIO
    // Offset: 0x12
    bool useOverlappedIO;
    // private System.Int32 linger_timeout
    // Offset: 0x14
    int linger_timeout;
    // private System.Net.Sockets.AddressFamily addressFamily
    // Offset: 0x18
    System::Net::Sockets::AddressFamily addressFamily;
    // private System.Net.Sockets.SocketType socketType
    // Offset: 0x1C
    System::Net::Sockets::SocketType socketType;
    // private System.Net.Sockets.ProtocolType protocolType
    // Offset: 0x20
    System::Net::Sockets::ProtocolType protocolType;
    // System.Net.Sockets.SafeSocketHandle m_Handle
    // Offset: 0x28
    System::Net::Sockets::SafeSocketHandle* m_Handle;
    // System.Net.EndPoint seed_endpoint
    // Offset: 0x30
    System::Net::EndPoint* seed_endpoint;
    // System.Threading.SemaphoreSlim ReadSem
    // Offset: 0x38
    System::Threading::SemaphoreSlim* ReadSem;
    // System.Threading.SemaphoreSlim WriteSem
    // Offset: 0x40
    System::Threading::SemaphoreSlim* WriteSem;
    // System.Boolean is_blocking
    // Offset: 0x48
    bool is_blocking;
    // System.Boolean is_bound
    // Offset: 0x49
    bool is_bound;
    // System.Boolean is_connected
    // Offset: 0x4A
    bool is_connected;
    // private System.Int32 m_IntCleanedUp
    // Offset: 0x4C
    int m_IntCleanedUp;
    // System.Boolean connect_in_progress
    // Offset: 0x50
    bool connect_in_progress;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.Object s_InternalSyncObject
    static ::Il2CppObject* _get_s_InternalSyncObject();
    // Set static field: static private System.Object s_InternalSyncObject
    static void _set_s_InternalSyncObject(::Il2CppObject* value);
    // Get static field: static System.Boolean s_SupportsIPv4
    static bool _get_s_SupportsIPv4();
    // Set static field: static System.Boolean s_SupportsIPv4
    static void _set_s_SupportsIPv4(bool value);
    // Get static field: static System.Boolean s_SupportsIPv6
    static bool _get_s_SupportsIPv6();
    // Set static field: static System.Boolean s_SupportsIPv6
    static void _set_s_SupportsIPv6(bool value);
    // Get static field: static System.Boolean s_OSSupportsIPv6
    static bool _get_s_OSSupportsIPv6();
    // Set static field: static System.Boolean s_OSSupportsIPv6
    static void _set_s_OSSupportsIPv6(bool value);
    // Get static field: static System.Boolean s_Initialized
    static bool _get_s_Initialized();
    // Set static field: static System.Boolean s_Initialized
    static void _set_s_Initialized(bool value);
    // Get static field: static private System.Boolean s_LoggingEnabled
    static bool _get_s_LoggingEnabled();
    // Set static field: static private System.Boolean s_LoggingEnabled
    static void _set_s_LoggingEnabled(bool value);
    // Get static field: static System.Boolean s_PerfCountersEnabled
    static bool _get_s_PerfCountersEnabled();
    // Set static field: static System.Boolean s_PerfCountersEnabled
    static void _set_s_PerfCountersEnabled(bool value);
    // static field const value: static System.Int32 DefaultCloseTimeout
    static constexpr const int DefaultCloseTimeout = -1;
    // Get static field: static System.Int32 DefaultCloseTimeout
    static int _get_DefaultCloseTimeout();
    // Set static field: static System.Int32 DefaultCloseTimeout
    static void _set_DefaultCloseTimeout(int value);
    // static field const value: static private System.Int32 SOCKET_CLOSED_CODE
    static constexpr const int SOCKET_CLOSED_CODE = 10004;
    // Get static field: static private System.Int32 SOCKET_CLOSED_CODE
    static int _get_SOCKET_CLOSED_CODE();
    // Set static field: static private System.Int32 SOCKET_CLOSED_CODE
    static void _set_SOCKET_CLOSED_CODE(int value);
    // static field const value: static private System.String TIMEOUT_EXCEPTION_MSG
    static constexpr const char* TIMEOUT_EXCEPTION_MSG = "A connection attempt failed because the connected party did not properly respondafter a period of time, or established connection failed because connected host has failed to respond";
    // Get static field: static private System.String TIMEOUT_EXCEPTION_MSG
    static ::Il2CppString* _get_TIMEOUT_EXCEPTION_MSG();
    // Set static field: static private System.String TIMEOUT_EXCEPTION_MSG
    static void _set_TIMEOUT_EXCEPTION_MSG(::Il2CppString* value);
    // Get static field: static private System.AsyncCallback AcceptAsyncCallback
    static System::AsyncCallback* _get_AcceptAsyncCallback();
    // Set static field: static private System.AsyncCallback AcceptAsyncCallback
    static void _set_AcceptAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginAcceptCallback
    static System::IOAsyncCallback* _get_BeginAcceptCallback();
    // Set static field: static private System.IOAsyncCallback BeginAcceptCallback
    static void _set_BeginAcceptCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginAcceptReceiveCallback
    static System::IOAsyncCallback* _get_BeginAcceptReceiveCallback();
    // Set static field: static private System.IOAsyncCallback BeginAcceptReceiveCallback
    static void _set_BeginAcceptReceiveCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ConnectAsyncCallback
    static System::AsyncCallback* _get_ConnectAsyncCallback();
    // Set static field: static private System.AsyncCallback ConnectAsyncCallback
    static void _set_ConnectAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginConnectCallback
    static System::IOAsyncCallback* _get_BeginConnectCallback();
    // Set static field: static private System.IOAsyncCallback BeginConnectCallback
    static void _set_BeginConnectCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback DisconnectAsyncCallback
    static System::AsyncCallback* _get_DisconnectAsyncCallback();
    // Set static field: static private System.AsyncCallback DisconnectAsyncCallback
    static void _set_DisconnectAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginDisconnectCallback
    static System::IOAsyncCallback* _get_BeginDisconnectCallback();
    // Set static field: static private System.IOAsyncCallback BeginDisconnectCallback
    static void _set_BeginDisconnectCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ReceiveAsyncCallback
    static System::AsyncCallback* _get_ReceiveAsyncCallback();
    // Set static field: static private System.AsyncCallback ReceiveAsyncCallback
    static void _set_ReceiveAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveCallback
    static System::IOAsyncCallback* _get_BeginReceiveCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveCallback
    static void _set_BeginReceiveCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveGenericCallback
    static System::IOAsyncCallback* _get_BeginReceiveGenericCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveGenericCallback
    static void _set_BeginReceiveGenericCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ReceiveFromAsyncCallback
    static System::AsyncCallback* _get_ReceiveFromAsyncCallback();
    // Set static field: static private System.AsyncCallback ReceiveFromAsyncCallback
    static void _set_ReceiveFromAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveFromCallback
    static System::IOAsyncCallback* _get_BeginReceiveFromCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveFromCallback
    static void _set_BeginReceiveFromCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback SendAsyncCallback
    static System::AsyncCallback* _get_SendAsyncCallback();
    // Set static field: static private System.AsyncCallback SendAsyncCallback
    static void _set_SendAsyncCallback(System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginSendGenericCallback
    static System::IOAsyncCallback* _get_BeginSendGenericCallback();
    // Set static field: static private System.IOAsyncCallback BeginSendGenericCallback
    static void _set_BeginSendGenericCallback(System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback SendToAsyncCallback
    static System::AsyncCallback* _get_SendToAsyncCallback();
    // Set static field: static private System.AsyncCallback SendToAsyncCallback
    static void _set_SendToAsyncCallback(System::AsyncCallback* value);
    // public System.Void .ctor(System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType)
    // Offset: 0x10D4B10
    static Socket* New_ctor(System::Net::Sockets::AddressFamily addressFamily, System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);
    // static public System.Boolean get_SupportsIPv4()
    // Offset: 0x10D5234
    static bool get_SupportsIPv4();
    // static public System.Boolean get_OSSupportsIPv4()
    // Offset: 0x10D52A8
    static bool get_OSSupportsIPv4();
    // static public System.Boolean get_SupportsIPv6()
    // Offset: 0x10D531C
    static bool get_SupportsIPv6();
    // static public System.Boolean get_OSSupportsIPv6()
    // Offset: 0x10D5390
    static bool get_OSSupportsIPv6();
    // public System.IntPtr get_Handle()
    // Offset: 0x10D5404
    System::IntPtr get_Handle();
    // public System.Net.Sockets.AddressFamily get_AddressFamily()
    // Offset: 0x10D5420
    System::Net::Sockets::AddressFamily get_AddressFamily();
    // public System.Net.Sockets.SocketType get_SocketType()
    // Offset: 0x10D5428
    System::Net::Sockets::SocketType get_SocketType();
    // public System.Net.Sockets.ProtocolType get_ProtocolType()
    // Offset: 0x10D5430
    System::Net::Sockets::ProtocolType get_ProtocolType();
    // public System.Void set_ExclusiveAddressUse(System.Boolean value)
    // Offset: 0x10D5438
    void set_ExclusiveAddressUse(bool value);
    // public System.Void set_ReceiveBufferSize(System.Int32 value)
    // Offset: 0x10D5610
    void set_ReceiveBufferSize(int value);
    // public System.Void set_SendBufferSize(System.Int32 value)
    // Offset: 0x10D56AC
    void set_SendBufferSize(int value);
    // public System.Void set_ReceiveTimeout(System.Int32 value)
    // Offset: 0x10D5748
    void set_ReceiveTimeout(int value);
    // public System.Void set_SendTimeout(System.Int32 value)
    // Offset: 0x10D57EC
    void set_SendTimeout(int value);
    // public System.Int16 get_Ttl()
    // Offset: 0x10D5890
    int16_t get_Ttl();
    // public System.Void set_Ttl(System.Int16 value)
    // Offset: 0x10D5988
    void set_Ttl(int16_t value);
    // public System.Void set_DontFragment(System.Boolean value)
    // Offset: 0x10D5AA0
    void set_DontFragment(bool value);
    // public System.Boolean get_DualMode()
    // Offset: 0x10D5B58
    bool get_DualMode();
    // public System.Void set_DualMode(System.Boolean value)
    // Offset: 0x10D5C40
    void set_DualMode(bool value);
    // private System.Boolean get_IsDualMode()
    // Offset: 0x10D5CFC
    bool get_IsDualMode();
    // public System.Int32 Send(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x10D5D14
    int Send(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x10D2C0C
    int Send(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x10D2748
    int Receive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Receive(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x10D65B8
    int Receive(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 IOControl(System.Net.Sockets.IOControlCode ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
    // Offset: 0x10CDA4C
    int IOControl(System::Net::Sockets::IOControlCode ioControlCode, ::Array<uint8_t>* optionInValue, ::Array<uint8_t>* optionOutValue);
    // public System.Void SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel level)
    // Offset: 0x10D5014
    void SetIPProtectionLevel(System::Net::Sockets::IPProtectionLevel level);
    // public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
    // Offset: 0x10D3B40
    System::IAsyncResult* BeginSend(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndSend(System.IAsyncResult asyncResult)
    // Offset: 0x10D3F4C
    int EndSend(System::IAsyncResult* asyncResult);
    // public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
    // Offset: 0x10D3280
    System::IAsyncResult* BeginReceive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndReceive(System.IAsyncResult asyncResult)
    // Offset: 0x10D368C
    int EndReceive(System::IAsyncResult* asyncResult);
    // static private System.Object get_InternalSyncObject()
    // Offset: 0x10D7254
    static ::Il2CppObject* get_InternalSyncObject();
    // System.Boolean get_CleanedUp()
    // Offset: 0x10D7330
    bool get_CleanedUp();
    // static System.Void InitializeSockets()
    // Offset: 0x10D4D80
    static void InitializeSockets();
    // System.Void InternalShutdown(System.Net.Sockets.SocketShutdown how)
    // Offset: 0x10D2D50
    void InternalShutdown(System::Net::Sockets::SocketShutdown how);
    // System.Void .ctor(System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, System.Net.Sockets.SafeSocketHandle safe_handle)
    // Offset: 0x10D759C
    static Socket* New_ctor(System::Net::Sockets::AddressFamily family, System::Net::Sockets::SocketType type, System::Net::Sockets::ProtocolType proto, System::Net::Sockets::SafeSocketHandle* safe_handle);
    // private System.Void SocketDefaults()
    // Offset: 0x10D5138
    void SocketDefaults();
    // private System.IntPtr Socket_internal(System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, out System.Int32 error)
    // Offset: 0x10D5010
    System::IntPtr Socket_internal(System::Net::Sockets::AddressFamily family, System::Net::Sockets::SocketType type, System::Net::Sockets::ProtocolType proto, int& error);
    // public System.Int32 get_Available()
    // Offset: 0x10D2088
    int get_Available();
    // static private System.Int32 Available_internal(System.Net.Sockets.SafeSocketHandle safeHandle, out System.Int32 error)
    // Offset: 0x10D77AC
    static int Available_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int& error);
    // static private System.Int32 Available_internal(System.IntPtr socket, out System.Int32 error)
    // Offset: 0x10D78BC
    static int Available_internal(System::IntPtr socket, int& error);
    // public System.Void set_EnableBroadcast(System.Boolean value)
    // Offset: 0x10D78C0
    void set_EnableBroadcast(bool value);
    // public System.Boolean get_IsBound()
    // Offset: 0x10D7964
    bool get_IsBound();
    // public System.Net.EndPoint get_LocalEndPoint()
    // Offset: 0x10D796C
    System::Net::EndPoint* get_LocalEndPoint();
    // static private System.Net.SocketAddress LocalEndPoint_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 family, out System.Int32 error)
    // Offset: 0x10D7A60
    static System::Net::SocketAddress* LocalEndPoint_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int family, int& error);
    // static private System.Net.SocketAddress LocalEndPoint_internal(System.IntPtr socket, System.Int32 family, out System.Int32 error)
    // Offset: 0x10D7B78
    static System::Net::SocketAddress* LocalEndPoint_internal(System::IntPtr socket, int family, int& error);
    // public System.Boolean get_Blocking()
    // Offset: 0x10D7B7C
    bool get_Blocking();
    // public System.Void set_Blocking(System.Boolean value)
    // Offset: 0x10D7B84
    void set_Blocking(bool value);
    // static private System.Void Blocking_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Boolean block, out System.Int32 error)
    // Offset: 0x10D7C5C
    static void Blocking_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, bool block, int& error);
    // static System.Void Blocking_internal(System.IntPtr socket, System.Boolean block, out System.Int32 error)
    // Offset: 0x10D463C
    static void Blocking_internal(System::IntPtr socket, bool block, int& error);
    // public System.Boolean get_Connected()
    // Offset: 0x10D7D64
    bool get_Connected();
    // public System.Void set_NoDelay(System.Boolean value)
    // Offset: 0x10D76B4
    void set_NoDelay(bool value);
    // public System.Boolean Poll(System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)
    // Offset: 0x10D7DEC
    bool Poll(int microSeconds, System::Net::Sockets::SelectMode mode);
    // static private System.Boolean Poll_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SelectMode mode, System.Int32 timeout, out System.Int32 error)
    // Offset: 0x10D7F68
    static bool Poll_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SelectMode mode, int timeout, int& error);
    // static private System.Boolean Poll_internal(System.IntPtr socket, System.Net.Sockets.SelectMode mode, System.Int32 timeout, out System.Int32 error)
    // Offset: 0x10D8088
    static bool Poll_internal(System::IntPtr socket, System::Net::Sockets::SelectMode mode, int timeout, int& error);
    // public System.Net.Sockets.Socket Accept()
    // Offset: 0x10D808C
    System::Net::Sockets::Socket* Accept();
    // System.Void Accept(System.Net.Sockets.Socket acceptSocket)
    // Offset: 0x10D82D4
    void Accept(System::Net::Sockets::Socket* acceptSocket);
    // public System.Boolean AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs e)
    // Offset: 0x10D8418
    bool AcceptAsync(System::Net::Sockets::SocketAsyncEventArgs* e);
    // public System.IAsyncResult BeginAccept(System.AsyncCallback callback, System.Object state)
    // Offset: 0x10D8810
    System::IAsyncResult* BeginAccept(System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Net.Sockets.Socket EndAccept(System.IAsyncResult asyncResult)
    // Offset: 0x10D8968
    System::Net::Sockets::Socket* EndAccept(System::IAsyncResult* asyncResult);
    // public System.Net.Sockets.Socket EndAccept(out System.Byte[] buffer, out System.Int32 bytesTransferred, System.IAsyncResult asyncResult)
    // Offset: 0x10D8998
    System::Net::Sockets::Socket* EndAccept(::Array<uint8_t>*& buffer, int& bytesTransferred, System::IAsyncResult* asyncResult);
    // static private System.Net.Sockets.SafeSocketHandle Accept_internal(System.Net.Sockets.SafeSocketHandle safeHandle, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10D81CC
    static System::Net::Sockets::SafeSocketHandle* Accept_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int& error, bool blocking);
    // static private System.IntPtr Accept_internal(System.IntPtr sock, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10D8BAC
    static System::IntPtr Accept_internal(System::IntPtr sock, int& error, bool blocking);
    // public System.Void Bind(System.Net.EndPoint localEP)
    // Offset: 0x10CEC18
    void Bind(System::Net::EndPoint* localEP);
    // static private System.Void Bind_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.SocketAddress sa, out System.Int32 error)
    // Offset: 0x10D8C7C
    static void Bind_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::SocketAddress* sa, int& error);
    // static private System.Void Bind_internal(System.IntPtr sock, System.Net.SocketAddress sa, out System.Int32 error)
    // Offset: 0x10D8D84
    static void Bind_internal(System::IntPtr sock, System::Net::SocketAddress* sa, int& error);
    // public System.Void Listen(System.Int32 backlog)
    // Offset: 0x10D8D88
    void Listen(int backlog);
    // static private System.Void Listen_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 backlog, out System.Int32 error)
    // Offset: 0x10D8E7C
    static void Listen_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int backlog, int& error);
    // static private System.Void Listen_internal(System.IntPtr sock, System.Int32 backlog, out System.Int32 error)
    // Offset: 0x10D8F84
    static void Listen_internal(System::IntPtr sock, int backlog, int& error);
    // public System.Void Connect(System.Net.EndPoint remoteEP)
    // Offset: 0x10D8F88
    void Connect(System::Net::EndPoint* remoteEP);
    // public System.IAsyncResult BeginConnect(System.String host, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
    // Offset: 0x10D93EC
    System::IAsyncResult* BeginConnect(::Il2CppString* host, int port, System::AsyncCallback* requestCallback, ::Il2CppObject* state);
    // public System.IAsyncResult BeginConnect(System.Net.IPAddress[] addresses, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
    // Offset: 0x10D9564
    System::IAsyncResult* BeginConnect(::Array<System::Net::IPAddress*>* addresses, int port, System::AsyncCallback* requestCallback, ::Il2CppObject* state);
    // static private System.Void BeginMConnect(System.Net.Sockets.SocketAsyncResult sockares)
    // Offset: 0x10D976C
    static void BeginMConnect(System::Net::Sockets::SocketAsyncResult* sockares);
    // static private System.Void BeginSConnect(System.Net.Sockets.SocketAsyncResult sockares)
    // Offset: 0x10D9930
    static void BeginSConnect(System::Net::Sockets::SocketAsyncResult* sockares);
    // public System.Void EndConnect(System.IAsyncResult asyncResult)
    // Offset: 0x10D9D18
    void EndConnect(System::IAsyncResult* asyncResult);
    // static private System.Void Connect_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10D92F4
    static void Connect_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::SocketAddress* sa, int& error, bool blocking);
    // static private System.Void Connect_internal(System.IntPtr sock, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10D9DC4
    static void Connect_internal(System::IntPtr sock, System::Net::SocketAddress* sa, int& error, bool blocking);
    // public System.Void Disconnect(System.Boolean reuseSocket)
    // Offset: 0x10D9DCC
    void Disconnect(bool reuseSocket);
    // public System.Void EndDisconnect(System.IAsyncResult asyncResult)
    // Offset: 0x10D9FC8
    void EndDisconnect(System::IAsyncResult* asyncResult);
    // static private System.Void Disconnect_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Boolean reuse, out System.Int32 error)
    // Offset: 0x10D9EC0
    static void Disconnect_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, bool reuse, int& error);
    // static private System.Void Disconnect_internal(System.IntPtr sock, System.Boolean reuse, out System.Int32 error)
    // Offset: 0x10DA074
    static void Disconnect_internal(System::IntPtr sock, bool reuse, int& error);
    // public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10D6494
    int Receive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.Int32 Receive(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10D6664
    int Receive(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
    // Offset: 0x10D6FFC
    System::IAsyncResult* BeginReceive(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndReceive(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10D716C
    int EndReceive(System::IAsyncResult* asyncResult, System::Net::Sockets::SocketError& errorCode);
    // static private System.Int32 Receive_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA330
    static int Receive_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Receive_internal(System.IntPtr sock, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA43C
    static int Receive_internal(System::IntPtr sock, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Receive_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA224
    static int Receive_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Receive_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA444
    static int Receive_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
    // Offset: 0x10DA44C
    int ReceiveFrom(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint*& remoteEP);
    // System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10DA57C
    int ReceiveFrom(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint*& remoteEP, System::Net::Sockets::SocketError& errorCode);
    // public System.Int32 EndReceiveFrom(System.IAsyncResult asyncResult, ref System.Net.EndPoint endPoint)
    // Offset: 0x10DA834
    int EndReceiveFrom(System::IAsyncResult* asyncResult, System::Net::EndPoint*& endPoint);
    // static private System.Int32 ReceiveFrom_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, ref System.Net.SocketAddress sockaddr, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA720
    static int ReceiveFrom_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress*& sockaddr, int& error, bool blocking);
    // static private System.Int32 ReceiveFrom_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, ref System.Net.SocketAddress sockaddr, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA940
    static int ReceiveFrom_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress*& sockaddr, int& error, bool blocking);
    // public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10D6338
    int Send(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.Int32 Send(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10D5DC0
    int Send(System::Collections::Generic::IList_1<System::ArraySegment_1<uint8_t>>* buffers, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode);
    // public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
    // Offset: 0x10D6D24
    System::IAsyncResult* BeginSend(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::Sockets::SocketError& errorCode, System::AsyncCallback* callback, ::Il2CppObject* state);
    // static private System.Void BeginSendCallback(System.Net.Sockets.SocketAsyncResult sockares, System.Int32 sent_so_far)
    // Offset: 0x10DAB60
    static void BeginSendCallback(System::Net::Sockets::SocketAsyncResult* sockares, int sent_so_far);
    // public System.Int32 EndSend(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x10D6F14
    int EndSend(System::IAsyncResult* asyncResult, System::Net::Sockets::SocketError& errorCode);
    // static private System.Int32 Send_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DAA54
    static int Send_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Send_internal(System.IntPtr sock, System.Net.Sockets.Socket/WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DAE2C
    static int Send_internal(System::IntPtr sock, System::Net::Sockets::Socket::WSABUF* bufarray, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Send_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DA948
    static int Send_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // static private System.Int32 Send_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DAE34
    static int Send_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, int& error, bool blocking);
    // public System.Int32 SendTo(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
    // Offset: 0x10DAE3C
    int SendTo(::Array<uint8_t>* buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint* remoteEP);
    // public System.Int32 EndSendTo(System.IAsyncResult asyncResult)
    // Offset: 0x10DB104
    int EndSendTo(System::IAsyncResult* asyncResult);
    // static private System.Int32 SendTo_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DAFF0
    static int SendTo_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress* sa, int& error, bool blocking);
    // static private System.Int32 SendTo_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x10DB1B8
    static int SendTo_internal(System::IntPtr sock, uint8_t* buffer, int count, System::Net::Sockets::SocketFlags flags, System::Net::SocketAddress* sa, int& error, bool blocking);
    // public System.Object GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName)
    // Offset: 0x10D1D14
    ::Il2CppObject* GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName);
    // static private System.Void GetSocketOption_obj_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, out System.Object obj_val, out System.Int32 error)
    // Offset: 0x10DB1C0
    static void GetSocketOption_obj_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject*& obj_val, int& error);
    // static private System.Void GetSocketOption_obj_internal(System.IntPtr socket, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, out System.Object obj_val, out System.Int32 error)
    // Offset: 0x10DB2E0
    static void GetSocketOption_obj_internal(System::IntPtr socket, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject*& obj_val, int& error);
    // public System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Boolean optionValue)
    // Offset: 0x10DB2E4
    void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, bool optionValue);
    // public System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue)
    // Offset: 0x10D54EC
    void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionValue);
    // static private System.Void SetSocketOption_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, System.Object obj_val, System.Byte[] byte_val, System.Int32 int_val, out System.Int32 error)
    // Offset: 0x10DB2EC
    static void SetSocketOption_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject* obj_val, ::Array<uint8_t>* byte_val, int int_val, int& error);
    // static private System.Void SetSocketOption_internal(System.IntPtr socket, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, System.Object obj_val, System.Byte[] byte_val, System.Int32 int_val, out System.Int32 error)
    // Offset: 0x10DB424
    static void SetSocketOption_internal(System::IntPtr socket, System::Net::Sockets::SocketOptionLevel level, System::Net::Sockets::SocketOptionName name, ::Il2CppObject* obj_val, ::Array<uint8_t>* byte_val, int int_val, int& error);
    // public System.Int32 IOControl(System.Int32 ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
    // Offset: 0x10D6BA4
    int IOControl(int ioControlCode, ::Array<uint8_t>* optionInValue, ::Array<uint8_t>* optionOutValue);
    // static private System.Int32 IOControl_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 ioctl_code, System.Byte[] input, System.Byte[] output, out System.Int32 error)
    // Offset: 0x10DB428
    static int IOControl_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, int ioctl_code, ::Array<uint8_t>* input, ::Array<uint8_t>* output, int& error);
    // static private System.Int32 IOControl_internal(System.IntPtr sock, System.Int32 ioctl_code, System.Byte[] input, System.Byte[] output, out System.Int32 error)
    // Offset: 0x10DB558
    static int IOControl_internal(System::IntPtr sock, int ioctl_code, ::Array<uint8_t>* input, ::Array<uint8_t>* output, int& error);
    // public System.Void Close()
    // Offset: 0x10DB55C
    void Close();
    // public System.Void Close(System.Int32 timeout)
    // Offset: 0x10D2DE8
    void Close(int timeout);
    // static System.Void Close_internal(System.IntPtr socket, out System.Int32 error)
    // Offset: 0x10D464C
    static void Close_internal(System::IntPtr socket, int& error);
    // public System.Void Shutdown(System.Net.Sockets.SocketShutdown how)
    // Offset: 0x10DB564
    void Shutdown(System::Net::Sockets::SocketShutdown how);
    // static private System.Void Shutdown_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketShutdown how, out System.Int32 error)
    // Offset: 0x10D7494
    static void Shutdown_internal(System::Net::Sockets::SafeSocketHandle* safeHandle, System::Net::Sockets::SocketShutdown how, int& error);
    // static System.Void Shutdown_internal(System.IntPtr socket, System.Net.Sockets.SocketShutdown how, out System.Int32 error)
    // Offset: 0x10D4644
    static void Shutdown_internal(System::IntPtr socket, System::Net::Sockets::SocketShutdown how, int& error);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x10DB668
    void Dispose(bool disposing);
    // private System.Void Linger(System.IntPtr handle)
    // Offset: 0x10DB6D8
    void Linger(System::IntPtr handle);
    // private System.Void ThrowIfDisposedAndClosed()
    // Offset: 0x10D76F8
    void ThrowIfDisposedAndClosed();
    // private System.Void ThrowIfBufferNull(System.Byte[] buffer)
    // Offset: 0x10DA07C
    void ThrowIfBufferNull(::Array<uint8_t>* buffer);
    // private System.Void ThrowIfBufferOutOfRange(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x10DA0FC
    void ThrowIfBufferOutOfRange(::Array<uint8_t>* buffer, int offset, int size);
    // private System.Void ThrowIfUdp()
    // Offset: 0x10D7D6C
    void ThrowIfUdp();
    // private System.Net.Sockets.SocketAsyncResult ValidateEndIAsyncResult(System.IAsyncResult ares, System.String methodName, System.String argName)
    // Offset: 0x10D8A74
    System::Net::Sockets::SocketAsyncResult* ValidateEndIAsyncResult(System::IAsyncResult* ares, ::Il2CppString* methodName, ::Il2CppString* argName);
    // private System.Void QueueIOSelectorJob(System.Threading.SemaphoreSlim sem, System.IntPtr handle, System.IOSelectorJob job)
    // Offset: 0x10D86BC
    void QueueIOSelectorJob(System::Threading::SemaphoreSlim* sem, System::IntPtr handle, System::IOSelectorJob* job);
    // private System.Void InitSocketAsyncEventArgs(System.Net.Sockets.SocketAsyncEventArgs e, System.AsyncCallback callback, System.Object state, System.Net.Sockets.SocketOperation operation)
    // Offset: 0x10D862C
    void InitSocketAsyncEventArgs(System::Net::Sockets::SocketAsyncEventArgs* e, System::AsyncCallback* callback, ::Il2CppObject* state, System::Net::Sockets::SocketOperation operation);
    // private System.Net.Sockets.SocketAsyncOperation SocketOperationToSocketAsyncOperation(System.Net.Sockets.SocketOperation op)
    // Offset: 0x10DB854
    System::Net::Sockets::SocketAsyncOperation SocketOperationToSocketAsyncOperation(System::Net::Sockets::SocketOperation op);
    // private System.Net.IPEndPoint RemapIPEndPoint(System.Net.IPEndPoint input)
    // Offset: 0x10D8BB4
    System::Net::IPEndPoint* RemapIPEndPoint(System::Net::IPEndPoint* input);
    // static System.Void cancel_blocking_socket_operation(System.Threading.Thread thread)
    // Offset: 0x10D4648
    static void cancel_blocking_socket_operation(System::Threading::Thread* thread);
    // static System.Int32 get_FamilyHint()
    // Offset: 0x10DB92C
    static int get_FamilyHint();
    // static private System.Boolean IsProtocolSupported_internal(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterface)
    // Offset: 0x10DB9CC
    static bool IsProtocolSupported_internal(System::Net::NetworkInformation::NetworkInterfaceComponent networkInterface);
    // static private System.Boolean IsProtocolSupported(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterface)
    // Offset: 0x10D7340
    static bool IsProtocolSupported(System::Net::NetworkInformation::NetworkInterfaceComponent networkInterface);
    // static private System.Void .cctor()
    // Offset: 0x10DB9D0
    static void _cctor();
    // public System.Void Dispose()
    // Offset: 0x10D73A4
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected override System.Void Finalize()
    // Offset: 0x10D7420
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Net.Sockets.Socket
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::Sockets::Socket*, "System.Net.Sockets", "Socket");
#pragma pack(pop)
