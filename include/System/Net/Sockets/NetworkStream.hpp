// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileAccess
  struct FileAccess;
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Sockets.NetworkStream
  // [] Offset: FFFFFFFF
  class NetworkStream : public System::IO::Stream {
    public:
    // private System.Net.Sockets.Socket m_StreamSocket
    // Size: 0x8
    // Offset: 0x28
    System::Net::Sockets::Socket* m_StreamSocket;
    // Field size check
    static_assert(sizeof(System::Net::Sockets::Socket*) == 0x8);
    // private System.Boolean m_Readable
    // Size: 0x1
    // Offset: 0x30
    bool m_Readable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_Writeable
    // Size: 0x1
    // Offset: 0x31
    bool m_Writeable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_OwnsSocket
    // Size: 0x1
    // Offset: 0x32
    bool m_OwnsSocket;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_OwnsSocket and: m_CloseTimeout
    char __padding3[0x1] = {};
    // private System.Int32 m_CloseTimeout
    // Size: 0x4
    // Offset: 0x34
    int m_CloseTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_CleanedUp
    // Size: 0x1
    // Offset: 0x38
    bool m_CleanedUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CleanedUp and: m_CurrentReadTimeout
    char __padding5[0x3] = {};
    // private System.Int32 m_CurrentReadTimeout
    // Size: 0x4
    // Offset: 0x3C
    int m_CurrentReadTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_CurrentWriteTimeout
    // Size: 0x4
    // Offset: 0x40
    int m_CurrentWriteTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: NetworkStream
    NetworkStream(System::Net::Sockets::Socket* m_StreamSocket_ = {}, bool m_Readable_ = {}, bool m_Writeable_ = {}, bool m_OwnsSocket_ = {}, int m_CloseTimeout_ = {}, bool m_CleanedUp_ = {}, int m_CurrentReadTimeout_ = {}, int m_CurrentWriteTimeout_ = {}) noexcept : m_StreamSocket{m_StreamSocket_}, m_Readable{m_Readable_}, m_Writeable{m_Writeable_}, m_OwnsSocket{m_OwnsSocket_}, m_CloseTimeout{m_CloseTimeout_}, m_CleanedUp{m_CleanedUp_}, m_CurrentReadTimeout{m_CurrentReadTimeout_}, m_CurrentWriteTimeout{m_CurrentWriteTimeout_} {}
    // public System.Void .ctor(System.Net.Sockets.Socket socket)
    // Offset: 0x1332F68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkStream* New_ctor(System::Net::Sockets::Socket* socket) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Sockets::NetworkStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkStream*, creationType>(socket)));
    }
    // public System.Void .ctor(System.Net.Sockets.Socket socket, System.Boolean ownsSocket)
    // Offset: 0x133314C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkStream* New_ctor(System::Net::Sockets::Socket* socket, bool ownsSocket) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Sockets::NetworkStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkStream*, creationType>(socket, ownsSocket)));
    }
    // public System.Boolean get_DataAvailable()
    // Offset: 0x13334EC
    bool get_DataAvailable_NEW();
    // System.Void InitNetworkStream(System.Net.Sockets.Socket socket, System.IO.FileAccess Access)
    // Offset: 0x133303C
    void InitNetworkStream(System::Net::Sockets::Socket* socket, System::IO::FileAccess Access);
    // public override System.Boolean get_CanRead()
    // Offset: 0x1333230
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead_NEW()
    bool get_CanRead();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1333238
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek_NEW()
    bool get_CanSeek();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x1333240
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite_NEW()
    bool get_CanWrite();
    // public override System.Int32 get_ReadTimeout()
    // Offset: 0x1333248
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_ReadTimeout_NEW()
    int get_ReadTimeout();
    // public override System.Int32 get_WriteTimeout()
    // Offset: 0x133345C
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_WriteTimeout_NEW()
    int get_WriteTimeout();
    // public override System.Int64 get_Length()
    // Offset: 0x133370C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length_NEW()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x133378C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position_NEW()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x133380C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position_NEW(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x133388C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek_NEW(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, System::IO::SeekOrigin origin);
    // public override System.Int32 Read(in System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x133390C
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read_NEW(in System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    int Read(::Array<uint8_t>*& buffer, int offset, int size);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1333DD0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write_NEW(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    void Write(::Array<uint8_t>* buffer, int offset, int size);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1334294
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose_NEW(System.Boolean disposing)
    void Dispose(bool disposing);
    // protected override System.Void Finalize()
    // Offset: 0x13343B4
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize_NEW()
    void Finalize();
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0x133442C
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead_NEW(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    System::IAsyncResult* BeginRead(::Array<uint8_t>* buffer, int offset, int size, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x1334928
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead_NEW(System.IAsyncResult asyncResult)
    int EndRead(System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    // Offset: 0x1334CEC
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite_NEW(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.AsyncCallback callback, System.Object state)
    System::IAsyncResult* BeginWrite(::Array<uint8_t>* buffer, int offset, int size, System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x13351E8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite_NEW(System.IAsyncResult asyncResult)
    void EndWrite(System::IAsyncResult* asyncResult);
    // public override System.Void Flush()
    // Offset: 0x13355AC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush_NEW()
    void Flush();
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x13355B0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength_NEW(System.Int64 value)
    void SetLength(int64_t value);
  }; // System.Net.Sockets.NetworkStream
  #pragma pack(pop)
  static check_size<sizeof(NetworkStream), 64 + sizeof(int)> __System_Net_Sockets_NetworkStreamSizeCheck;
  static_assert(sizeof(NetworkStream) == 0x44);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::Sockets::NetworkStream*, "System.Net.Sockets", "NetworkStream");
