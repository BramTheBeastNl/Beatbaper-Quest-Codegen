// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.CookieVariant
#include "System/Net/CookieVariant.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: Comparer
  class Comparer;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IComparer
  class IComparer;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x9A
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Cookie
  // [] Offset: FFFFFFFF
  class Cookie : public ::Il2CppObject {
    public:
    // private System.String m_comment
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_comment;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Uri m_commentUri
    // Size: 0x8
    // Offset: 0x18
    System::Uri* m_commentUri;
    // Field size check
    static_assert(sizeof(System::Uri*) == 0x8);
    // private System.Net.CookieVariant m_cookieVariant
    // Size: 0x4
    // Offset: 0x20
    System::Net::CookieVariant m_cookieVariant;
    // Field size check
    static_assert(sizeof(System::Net::CookieVariant) == 0x4);
    // private System.Boolean m_discard
    // Size: 0x1
    // Offset: 0x24
    bool m_discard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_discard and: m_domain
    char __padding3[0x3] = {};
    // private System.String m_domain
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* m_domain;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean m_domain_implicit
    // Size: 0x1
    // Offset: 0x30
    bool m_domain_implicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_domain_implicit and: m_expires
    char __padding5[0x7] = {};
    // private System.DateTime m_expires
    // Size: 0x8
    // Offset: 0x38
    System::DateTime m_expires;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.String m_name
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_path
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* m_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean m_path_implicit
    // Size: 0x1
    // Offset: 0x50
    bool m_path_implicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_path_implicit and: m_port
    char __padding9[0x7] = {};
    // private System.String m_port
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* m_port;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean m_port_implicit
    // Size: 0x1
    // Offset: 0x60
    bool m_port_implicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_port_implicit and: m_port_list
    char __padding11[0x7] = {};
    // private System.Int32[] m_port_list
    // Size: 0x8
    // Offset: 0x68
    ::Array<int>* m_port_list;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Boolean m_secure
    // Size: 0x1
    // Offset: 0x70
    bool m_secure;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0xD46084
    // private System.Boolean m_httpOnly
    // Size: 0x1
    // Offset: 0x71
    bool m_httpOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_httpOnly and: m_timeStamp
    char __padding14[0x6] = {};
    // private System.DateTime m_timeStamp
    // Size: 0x8
    // Offset: 0x78
    System::DateTime m_timeStamp;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.String m_value
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppString* m_value;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 m_version
    // Size: 0x4
    // Offset: 0x88
    int m_version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_version and: m_domainKey
    char __padding17[0x4] = {};
    // private System.String m_domainKey
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppString* m_domainKey;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Boolean IsQuotedVersion
    // Size: 0x1
    // Offset: 0x98
    bool IsQuotedVersion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean IsQuotedDomain
    // Size: 0x1
    // Offset: 0x99
    bool IsQuotedDomain;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Cookie
    Cookie(::Il2CppString* m_comment_ = {}, System::Uri* m_commentUri_ = {}, System::Net::CookieVariant m_cookieVariant_ = {}, bool m_discard_ = {}, ::Il2CppString* m_domain_ = {}, bool m_domain_implicit_ = {}, System::DateTime m_expires_ = {}, ::Il2CppString* m_name_ = {}, ::Il2CppString* m_path_ = {}, bool m_path_implicit_ = {}, ::Il2CppString* m_port_ = {}, bool m_port_implicit_ = {}, ::Array<int>* m_port_list_ = {}, bool m_secure_ = {}, bool m_httpOnly_ = {}, System::DateTime m_timeStamp_ = {}, ::Il2CppString* m_value_ = {}, int m_version_ = {}, ::Il2CppString* m_domainKey_ = {}, bool IsQuotedVersion_ = {}, bool IsQuotedDomain_ = {}) noexcept : m_comment{m_comment_}, m_commentUri{m_commentUri_}, m_cookieVariant{m_cookieVariant_}, m_discard{m_discard_}, m_domain{m_domain_}, m_domain_implicit{m_domain_implicit_}, m_expires{m_expires_}, m_name{m_name_}, m_path{m_path_}, m_path_implicit{m_path_implicit_}, m_port{m_port_}, m_port_implicit{m_port_implicit_}, m_port_list{m_port_list_}, m_secure{m_secure_}, m_httpOnly{m_httpOnly_}, m_timeStamp{m_timeStamp_}, m_value{m_value_}, m_version{m_version_}, m_domainKey{m_domainKey_}, IsQuotedVersion{IsQuotedVersion_}, IsQuotedDomain{IsQuotedDomain_} {}
    // Get static field: static readonly System.Char[] PortSplitDelimiters
    static ::Array<::Il2CppChar>* _get_PortSplitDelimiters();
    // Set static field: static readonly System.Char[] PortSplitDelimiters
    static void _set_PortSplitDelimiters(::Array<::Il2CppChar>* value);
    // Get static field: static readonly System.Char[] Reserved2Name
    static ::Array<::Il2CppChar>* _get_Reserved2Name();
    // Set static field: static readonly System.Char[] Reserved2Name
    static void _set_Reserved2Name(::Array<::Il2CppChar>* value);
    // Get static field: static readonly System.Char[] Reserved2Value
    static ::Array<::Il2CppChar>* _get_Reserved2Value();
    // Set static field: static readonly System.Char[] Reserved2Value
    static void _set_Reserved2Value(::Array<::Il2CppChar>* value);
    // Get static field: static private System.Net.Comparer staticComparer
    static System::Net::Comparer* _get_staticComparer();
    // Set static field: static private System.Net.Comparer staticComparer
    static void _set_staticComparer(System::Net::Comparer* value);
    // public System.String get_Comment()
    // Offset: 0x130D3A0
    ::Il2CppString* get_Comment();
    // public System.Void set_Comment(System.String value)
    // Offset: 0x130D3A8
    void set_Comment(::Il2CppString* value);
    // public System.Void set_CommentUri(System.Uri value)
    // Offset: 0x130D418
    void set_CommentUri(System::Uri* value);
    // public System.Void set_HttpOnly(System.Boolean value)
    // Offset: 0x130D420
    void set_HttpOnly(bool value);
    // public System.Void set_Discard(System.Boolean value)
    // Offset: 0x130D42C
    void set_Discard(bool value);
    // public System.String get_Domain()
    // Offset: 0x130D438
    ::Il2CppString* get_Domain();
    // public System.Void set_Domain(System.String value)
    // Offset: 0x130D440
    void set_Domain(::Il2CppString* value);
    // private System.String get__Domain()
    // Offset: 0x130D4E4
    ::Il2CppString* get__Domain();
    // public System.Boolean get_Expired()
    // Offset: 0x130D5B8
    bool get_Expired();
    // public System.Void set_Expires(System.DateTime value)
    // Offset: 0x130D694
    void set_Expires(System::DateTime value);
    // public System.String get_Name()
    // Offset: 0x130D69C
    ::Il2CppString* get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x130D6A4
    void set_Name(::Il2CppString* value);
    // System.Boolean InternalSetName(System.String value)
    // Offset: 0x130D7FC
    bool InternalSetName(::Il2CppString* value);
    // public System.String get_Path()
    // Offset: 0x130D920
    ::Il2CppString* get_Path();
    // public System.Void set_Path(System.String value)
    // Offset: 0x130D928
    void set_Path(::Il2CppString* value);
    // private System.String get__Path()
    // Offset: 0x130D9B0
    ::Il2CppString* get__Path();
    // System.Boolean get_Plain()
    // Offset: 0x130D5A8
    bool get_Plain();
    // static private System.Boolean IsDomainEqualToHost(System.String domain, System.String host)
    // Offset: 0x130DA48
    static bool IsDomainEqualToHost(::Il2CppString* domain, ::Il2CppString* host);
    // System.Boolean VerifySetDefaults(System.Net.CookieVariant variant, System.Uri uri, System.Boolean isLocalDomain, System.String localDomain, System.Boolean set_default, System.Boolean isThrow)
    // Offset: 0x130DAAC
    bool VerifySetDefaults(System::Net::CookieVariant variant, System::Uri* uri, bool isLocalDomain, ::Il2CppString* localDomain, bool set_default, bool isThrow);
    // static private System.Boolean DomainCharsTest(System.String name)
    // Offset: 0x130E548
    static bool DomainCharsTest(::Il2CppString* name);
    // public System.String get_Port()
    // Offset: 0x130E6B4
    ::Il2CppString* get_Port();
    // public System.Void set_Port(System.String value)
    // Offset: 0x130E6BC
    void set_Port(::Il2CppString* value);
    // System.Int32[] get_PortList()
    // Offset: 0x130E9A0
    ::Array<int>* get_PortList();
    // private System.String get__Port()
    // Offset: 0x130E9A8
    ::Il2CppString* get__Port();
    // public System.Boolean get_Secure()
    // Offset: 0x130EA68
    bool get_Secure();
    // public System.Void set_Secure(System.Boolean value)
    // Offset: 0x130EA70
    void set_Secure(bool value);
    // public System.String get_Value()
    // Offset: 0x130EA7C
    ::Il2CppString* get_Value();
    // public System.Void set_Value(System.String value)
    // Offset: 0x130EA84
    void set_Value(::Il2CppString* value);
    // System.Net.CookieVariant get_Variant()
    // Offset: 0x130EB04
    System::Net::CookieVariant get_Variant();
    // System.String get_DomainKey()
    // Offset: 0x130EB0C
    ::Il2CppString* get_DomainKey();
    // public System.Int32 get_Version()
    // Offset: 0x130EB28
    int get_Version();
    // public System.Void set_Version(System.Int32 value)
    // Offset: 0x130EB30
    void set_Version(int value);
    // private System.String get__Version()
    // Offset: 0x130EBD8
    ::Il2CppString* get__Version();
    // static System.Collections.IComparer GetComparer()
    // Offset: 0x130ECD4
    static System::Collections::IComparer* GetComparer();
    // static private System.Void .cctor()
    // Offset: 0x130F47C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x130D24C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cookie* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Cookie::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cookie*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0x130ED3C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
    // public override System.Int32 GetHashCode()
    // Offset: 0x130EE1C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x130F0F8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.Net.Cookie
  static check_size<sizeof(Cookie), 153 + sizeof(bool)> __System_Net_CookieSizeCheck;
  static_assert(sizeof(Cookie) == 0x9A);
}
#pragma pack(pop)
DEFINE_IL2CPP_ARG_TYPE(System::Net::Cookie*, "System.Net", "Cookie");
