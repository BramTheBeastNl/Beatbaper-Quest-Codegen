// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.HeaderVariantInfo
#include "System/Net/HeaderVariantInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: PathList
  class PathList;
  // Forward declaring type: Cookie
  class Cookie;
  // Forward declaring type: CookieCollection
  class CookieCollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x30
  // Autogenerated type: System.Net.CookieContainer
  // [] Offset: FFFFFFFF
  class CookieContainer : public ::Il2CppObject {
    public:
    // private System.Collections.Hashtable m_domainTable
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Hashtable* m_domainTable;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // private System.Int32 m_maxCookieSize
    // Size: 0x4
    // Offset: 0x18
    int m_maxCookieSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_maxCookies
    // Size: 0x4
    // Offset: 0x1C
    int m_maxCookies;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_maxCookiesPerDomain
    // Size: 0x4
    // Offset: 0x20
    int m_maxCookiesPerDomain;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_count
    // Size: 0x4
    // Offset: 0x24
    int m_count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String m_fqdnMyDomain
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* m_fqdnMyDomain;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: CookieContainer
    CookieContainer(System::Collections::Hashtable* m_domainTable_ = {}, int m_maxCookieSize_ = {}, int m_maxCookies_ = {}, int m_maxCookiesPerDomain_ = {}, int m_count_ = {}, ::Il2CppString* m_fqdnMyDomain_ = {}) noexcept : m_domainTable{m_domainTable_}, m_maxCookieSize{m_maxCookieSize_}, m_maxCookies{m_maxCookies_}, m_maxCookiesPerDomain{m_maxCookiesPerDomain_}, m_count{m_count_}, m_fqdnMyDomain{m_fqdnMyDomain_} {}
    // Get static field: static private readonly System.Net.HeaderVariantInfo[] HeaderInfo
    static ::Array<System::Net::HeaderVariantInfo>* _get_HeaderInfo();
    // Set static field: static private readonly System.Net.HeaderVariantInfo[] HeaderInfo
    static void _set_HeaderInfo(::Array<System::Net::HeaderVariantInfo>* value);
    // private System.Void AddRemoveDomain(System.String key, System.Net.PathList value)
    // Offset: 0x1310798
    void AddRemoveDomain(::Il2CppString* key, System::Net::PathList* value);
    // System.Void Add(System.Net.Cookie cookie, System.Boolean throwOnError)
    // Offset: 0x13108C0
    void Add(System::Net::Cookie* cookie, bool throwOnError);
    // private System.Boolean AgeCookies(System.String domain)
    // Offset: 0x1311030
    bool AgeCookies(::Il2CppString* domain);
    // private System.Int32 ExpireCollection(System.Net.CookieCollection cc)
    // Offset: 0x1312444
    int ExpireCollection(System::Net::CookieCollection* cc);
    // System.Boolean IsLocalDomain(System.String host)
    // Offset: 0x1312594
    bool IsLocalDomain(::Il2CppString* host);
    // System.Net.CookieCollection CookieCutter(System.Uri uri, System.String headerName, System.String setCookieHeader, System.Boolean isThrow)
    // Offset: 0x131285C
    System::Net::CookieCollection* CookieCutter(System::Uri* uri, ::Il2CppString* headerName, ::Il2CppString* setCookieHeader, bool isThrow);
    // System.Net.CookieCollection InternalGetCookies(System.Uri uri)
    // Offset: 0x13134C0
    System::Net::CookieCollection* InternalGetCookies(System::Uri* uri);
    // private System.Void BuildCookieCollectionFromDomainMatches(System.Uri uri, System.Boolean isSecure, System.Int32 port, System.Net.CookieCollection cookies, System.Collections.Generic.List`1<System.String> domainAttribute, System.Boolean matchOnlyPlainCookie)
    // Offset: 0x13137A8
    void BuildCookieCollectionFromDomainMatches(System::Uri* uri, bool isSecure, int port, System::Net::CookieCollection* cookies, System::Collections::Generic::List_1<::Il2CppString*>* domainAttribute, bool matchOnlyPlainCookie);
    // private System.Void MergeUpdateCollections(System.Net.CookieCollection destination, System.Net.CookieCollection source, System.Int32 port, System.Boolean isSecure, System.Boolean isPlainOnly)
    // Offset: 0x1313F18
    void MergeUpdateCollections(System::Net::CookieCollection* destination, System::Net::CookieCollection* source, int port, bool isSecure, bool isPlainOnly);
    // public System.String GetCookieHeader(System.Uri uri)
    // Offset: 0x1314110
    ::Il2CppString* GetCookieHeader(System::Uri* uri);
    // System.String GetCookieHeader(System.Uri uri, out System.String optCookie2)
    // Offset: 0x13141E0
    ::Il2CppString* GetCookieHeader(System::Uri* uri, ::Il2CppString*& optCookie2);
    // static private System.Void .cctor()
    // Offset: 0x13144EC
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x131068C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CookieContainer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::CookieContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CookieContainer*, creationType>()));
    }
  }; // System.Net.CookieContainer
  static check_size<sizeof(CookieContainer), 40 + sizeof(::Il2CppString*)> __System_Net_CookieContainerSizeCheck;
  static_assert(sizeof(CookieContainer) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::CookieContainer*, "System.Net", "CookieContainer");
#pragma pack(pop)
