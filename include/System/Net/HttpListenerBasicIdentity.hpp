// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Principal.GenericIdentity
#include "System/Security/Principal/GenericIdentity.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.HttpListenerBasicIdentity
  class HttpListenerBasicIdentity : public System::Security::Principal::GenericIdentity {
    public:
    // private System.String password
    // Size: 0x8
    // Offset: 0x88
    ::Il2CppString* password;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: HttpListenerBasicIdentity
    HttpListenerBasicIdentity(::Il2CppString* password_ = {}) noexcept : password{password_} {}
    // Creating conversion operator: operator ::Il2CppString*
    constexpr operator ::Il2CppString*() const noexcept {
      return password;
    }
    // public System.Void .ctor(System.String username, System.String password)
    // Offset: 0x164D514
    // Implemented from: System.Security.Principal.GenericIdentity
    // Base method: System.Void GenericIdentity::.ctor(System.String username, System.String password)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpListenerBasicIdentity* New_ctor(::Il2CppString* username, ::Il2CppString* password) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::HttpListenerBasicIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpListenerBasicIdentity*, creationType>(username, password)));
    }
  }; // System.Net.HttpListenerBasicIdentity
  #pragma pack(pop)
  static check_size<sizeof(HttpListenerBasicIdentity), 136 + sizeof(::Il2CppString*)> __System_Net_HttpListenerBasicIdentitySizeCheck;
  static_assert(sizeof(HttpListenerBasicIdentity) == 0x90);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpListenerBasicIdentity*, "System.Net", "HttpListenerBasicIdentity");
// Writing MetadataGetter for method: HttpListenerBasicIdentity::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpListenerBasicIdentity::*)(::Il2CppString*, ::Il2CppString*)>(&HttpListenerBasicIdentity::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HttpListenerBasicIdentity*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HttpListenerBasicIdentity::*)(::Il2CppString*, ::Il2CppString*)>(&HttpListenerBasicIdentity::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HttpListenerBasicIdentity*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
