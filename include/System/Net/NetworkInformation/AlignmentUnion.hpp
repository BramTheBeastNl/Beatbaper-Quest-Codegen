// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Explicit may not be correctly taken into account!
// Begin includes
#include <stdint.h>
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Net.NetworkInformation
namespace System::Net::NetworkInformation {
  // Size: 0x8
  // Autogenerated type: System.Net.NetworkInformation.AlignmentUnion
  // [] Offset: FFFFFFFF
  struct AlignmentUnion/*, public System::ValueType*/ {
    public:
    // public System.UInt64 Alignment
    // Size: 0x8
    // Offset: 0x0
    uint64_t Alignment;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // WARNING Could not write padding for field: Alignment! Ignoring it instead (and assuming correct layout regardless)...
    // public System.Int32 Length
    // Size: 0x4
    // Offset: 0x0
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 IfIndex
    // Size: 0x4
    // Offset: 0x4
    int IfIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: AlignmentUnion
    constexpr AlignmentUnion(uint64_t Alignment_ = {}, int Length_ = {}, int IfIndex_ = {}) noexcept : Alignment{Alignment_}, Length{Length_}, IfIndex{IfIndex_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // System.Net.NetworkInformation.AlignmentUnion
  static check_size<sizeof(AlignmentUnion), 4 + sizeof(int)> __System_Net_NetworkInformation_AlignmentUnionSizeCheck;
  static_assert(sizeof(AlignmentUnion) == 0x8);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::NetworkInformation::AlignmentUnion, "System.Net.NetworkInformation", "AlignmentUnion");
#pragma pack(pop)
