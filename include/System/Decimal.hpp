// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberStyles
  struct NumberStyles;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Decimal
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: C92DE4
  struct Decimal/*, public System::ValueType, public System::IFormattable, public System::IComparable, public System::IConvertible, public System::Runtime::Serialization::IDeserializationCallback, public System::IComparable_1<System::Decimal>, public System::IEquatable_1<System::Decimal>*/ {
    public:
    // private System.Int32 flags
    // Size: 0x4
    // Offset: 0x0
    int flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 hi
    // Size: 0x4
    // Offset: 0x4
    int hi;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lo
    // Size: 0x4
    // Offset: 0x8
    int lo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 mid
    // Size: 0x4
    // Offset: 0xC
    int mid;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Decimal
    constexpr Decimal(int flags_ = {}, int hi_ = {}, int lo_ = {}, int mid_ = {}) noexcept : flags{flags_}, hi{hi_}, lo{lo_}, mid{mid_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IFormattable
    operator System::IFormattable() noexcept {
      return *reinterpret_cast<System::IFormattable*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<System::Decimal>
    operator System::IComparable_1<System::Decimal>() noexcept {
      return *reinterpret_cast<System::IComparable_1<System::Decimal>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<System::Decimal>
    operator System::IEquatable_1<System::Decimal>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<System::Decimal>*>(this);
    }
    // static field const value: static private System.Int32 SignMask
    static constexpr const int SignMask = -2147483648;
    // Get static field: static private System.Int32 SignMask
    static int _get_SignMask();
    // Set static field: static private System.Int32 SignMask
    static void _set_SignMask(int value);
    // static field const value: static private System.Byte DECIMAL_NEG
    static constexpr const uint8_t DECIMAL_NEG = 128u;
    // Get static field: static private System.Byte DECIMAL_NEG
    static uint8_t _get_DECIMAL_NEG();
    // Set static field: static private System.Byte DECIMAL_NEG
    static void _set_DECIMAL_NEG(uint8_t value);
    // static field const value: static private System.Byte DECIMAL_ADD
    static constexpr const uint8_t DECIMAL_ADD = 0u;
    // Get static field: static private System.Byte DECIMAL_ADD
    static uint8_t _get_DECIMAL_ADD();
    // Set static field: static private System.Byte DECIMAL_ADD
    static void _set_DECIMAL_ADD(uint8_t value);
    // static field const value: static private System.Int32 ScaleMask
    static constexpr const int ScaleMask = 16711680;
    // Get static field: static private System.Int32 ScaleMask
    static int _get_ScaleMask();
    // Set static field: static private System.Int32 ScaleMask
    static void _set_ScaleMask(int value);
    // static field const value: static private System.Int32 ScaleShift
    static constexpr const int ScaleShift = 16;
    // Get static field: static private System.Int32 ScaleShift
    static int _get_ScaleShift();
    // Set static field: static private System.Int32 ScaleShift
    static void _set_ScaleShift(int value);
    // static field const value: static private System.Int32 MaxInt32Scale
    static constexpr const int MaxInt32Scale = 9;
    // Get static field: static private System.Int32 MaxInt32Scale
    static int _get_MaxInt32Scale();
    // Set static field: static private System.Int32 MaxInt32Scale
    static void _set_MaxInt32Scale(int value);
    // Get static field: static private System.UInt32[] Powers10
    static ::Array<uint>* _get_Powers10();
    // Set static field: static private System.UInt32[] Powers10
    static void _set_Powers10(::Array<uint>* value);
    // [DecimalConstantAttribute] Offset: 0xC997CC
    // Get static field: static public readonly System.Decimal Zero
    static System::Decimal _get_Zero();
    // Set static field: static public readonly System.Decimal Zero
    static void _set_Zero(System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0xC997F0
    // Get static field: static public readonly System.Decimal One
    static System::Decimal _get_One();
    // Set static field: static public readonly System.Decimal One
    static void _set_One(System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0xC99814
    // Get static field: static public readonly System.Decimal MinusOne
    static System::Decimal _get_MinusOne();
    // Set static field: static public readonly System.Decimal MinusOne
    static void _set_MinusOne(System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0xC99838
    // Get static field: static public readonly System.Decimal MaxValue
    static System::Decimal _get_MaxValue();
    // Set static field: static public readonly System.Decimal MaxValue
    static void _set_MaxValue(System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0xC9985C
    // Get static field: static public readonly System.Decimal MinValue
    static System::Decimal _get_MinValue();
    // Set static field: static public readonly System.Decimal MinValue
    static void _set_MinValue(System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0xC99880
    // Get static field: static private readonly System.Decimal NearNegativeZero
    static System::Decimal _get_NearNegativeZero();
    // Set static field: static private readonly System.Decimal NearNegativeZero
    static void _set_NearNegativeZero(System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0xC998A4
    // Get static field: static private readonly System.Decimal NearPositiveZero
    static System::Decimal _get_NearPositiveZero();
    // Set static field: static private readonly System.Decimal NearPositiveZero
    static void _set_NearPositiveZero(System::Decimal value);
    // public System.Void .ctor(System.Int32 value)
    // Offset: 0xDFBED4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public System.Void .ctor(System.UInt32 value)
    // Offset: 0xDFBEF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(uint value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Int64 value)
    // Offset: 0xDFBF04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(int64_t value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public System.Void .ctor(System.UInt64 value)
    // Offset: 0xDFBF2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(uint64_t value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Single value)
    // Offset: 0xDFBF3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Double value)
    // Offset: 0xDFBF44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(double value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Int32[] bits)
    // Offset: 0xDFBF4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(::Array<int>* bits) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bits)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, bits);
    }
    // private System.Void SetBits(System.Int32[] bits)
    // Offset: 0xDFBF54
    void SetBits(::Array<int>* bits);
    // public System.Void .ctor(System.Int32 lo, System.Int32 mid, System.Int32 hi, System.Boolean isNegative, System.Byte scale)
    // Offset: 0xDFBF5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Decimal(int lo, int mid, int hi, bool isNegative, uint8_t scale) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Decimal::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(lo, mid, hi, isNegative, scale)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, lo, mid, hi, isNegative, scale);
    }
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0xDFBF68
    void OnSerializing(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0xDFBF70
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_NEW(::Il2CppObject* sender);
    // private System.Void .ctor(System.Int32 lo, System.Int32 mid, System.Int32 hi, System.Int32 flags)
    // Offset: 0xDFBF78
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  Decimal(int lo, int mid, int hi, int flags)
    // static System.Decimal Abs(System.Decimal d)
    // Offset: 0x1999124
    static System::Decimal Abs(System::Decimal d);
    // static private System.Void FCallAddSub(ref System.Decimal d1, ref System.Decimal d2, System.Byte bSign)
    // Offset: 0x1999158
    static void FCallAddSub(System::Decimal& d1, System::Decimal& d2, uint8_t bSign);
    // static private System.Int32 FCallCompare(ref System.Decimal d1, ref System.Decimal d2)
    // Offset: 0x199915C
    static int FCallCompare(System::Decimal& d1, System::Decimal& d2);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0xDFBF80
    int CompareTo_NEW(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Decimal value)
    // Offset: 0xDFBF88
    int CompareTo_NEW(System::Decimal value);
    // public System.Boolean Equals(System.Decimal value)
    // Offset: 0xDFBF98
    bool Equals_NEW(System::Decimal value);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xDFBFE0
    ::Il2CppString* ToString_NEW(System::IFormatProvider* provider);
    // public System.String ToString(System.String format, System.IFormatProvider provider)
    // Offset: 0xDFC01C
    ::Il2CppString* ToString_NEW(::Il2CppString* format, System::IFormatProvider* provider);
    // static public System.Decimal Parse(System.String s, System.IFormatProvider provider)
    // Offset: 0x19994D0
    static System::Decimal Parse(::Il2CppString* s, System::IFormatProvider* provider);
    // static public System.Decimal Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)
    // Offset: 0x1999508
    static System::Decimal Parse(::Il2CppString* s, System::Globalization::NumberStyles style, System::IFormatProvider* provider);
    // static public System.Int32[] GetBits(System.Decimal d)
    // Offset: 0x1998E60
    static ::Array<int>* GetBits(System::Decimal d);
    // static System.Decimal ToDecimal(System.Byte[] buffer)
    // Offset: 0x199955C
    static System::Decimal ToDecimal(::Array<uint8_t>* buffer);
    // static public System.Decimal Round(System.Decimal d, System.Int32 decimals)
    // Offset: 0x1999688
    static System::Decimal Round(System::Decimal d, int decimals);
    // static private System.Void FCallRound(ref System.Decimal d, System.Int32 decimals)
    // Offset: 0x1999704
    static void FCallRound(System::Decimal& d, int decimals);
    // static public System.Byte ToByte(System.Decimal value)
    // Offset: 0x1999708
    static uint8_t ToByte(System::Decimal value);
    // static public System.SByte ToSByte(System.Decimal value)
    // Offset: 0x199998C
    static int8_t ToSByte(System::Decimal value);
    // static public System.Int16 ToInt16(System.Decimal value)
    // Offset: 0x1999C20
    static int16_t ToInt16(System::Decimal value);
    // static public System.Double ToDouble(System.Decimal d)
    // Offset: 0x1999DB0
    static double ToDouble(System::Decimal d);
    // static System.Int32 FCallToInt32(System.Decimal d)
    // Offset: 0x1999DB4
    static int FCallToInt32(System::Decimal d);
    // static public System.Int32 ToInt32(System.Decimal d)
    // Offset: 0x1999B1C
    static int ToInt32(System::Decimal d);
    // static public System.Int64 ToInt64(System.Decimal d)
    // Offset: 0x1999DBC
    static int64_t ToInt64(System::Decimal d);
    // static public System.UInt16 ToUInt16(System.Decimal value)
    // Offset: 0x1999EB8
    static uint16_t ToUInt16(System::Decimal value);
    // static public System.UInt32 ToUInt32(System.Decimal d)
    // Offset: 0x1999894
    static uint ToUInt32(System::Decimal d);
    // static public System.UInt64 ToUInt64(System.Decimal d)
    // Offset: 0x199A044
    static uint64_t ToUInt64(System::Decimal d);
    // static public System.Single ToSingle(System.Decimal d)
    // Offset: 0x199A134
    static float ToSingle(System::Decimal d);
    // static private System.Void FCallTruncate(ref System.Decimal d)
    // Offset: 0x1999DB8
    static void FCallTruncate(System::Decimal& d);
    // static public System.Decimal op_Explicit(System.Single value)
    // Offset: 0x199A1BC
    explicit Decimal(float& value);
    // static public System.Decimal op_Explicit(System.Double value)
    // Offset: 0x199A1E4
    explicit Decimal(double& value);
    // static public System.Single op_Explicit(System.Decimal value)
    // Offset: 0x199A20C
    explicit operator float();
    // static public System.Double op_Explicit(System.Decimal value)
    // Offset: 0x199A280
    explicit operator double();
    // public System.TypeCode GetTypeCode()
    // Offset: 0xDFC064
    System::TypeCode GetTypeCode_NEW();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0xDFC06C
    bool System_IConvertible_ToBoolean_NEW(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0xDFC074
    ::Il2CppChar System_IConvertible_ToChar_NEW(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0xDFC080
    int8_t System_IConvertible_ToSByte_NEW(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0xDFC088
    uint8_t System_IConvertible_ToByte_NEW(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0xDFC090
    int16_t System_IConvertible_ToInt16_NEW(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0xDFC098
    uint16_t System_IConvertible_ToUInt16_NEW(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0xDFC0A0
    int System_IConvertible_ToInt32_NEW(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0xDFC0A8
    uint System_IConvertible_ToUInt32_NEW(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0xDFC0B0
    int64_t System_IConvertible_ToInt64_NEW(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0xDFC0B8
    uint64_t System_IConvertible_ToUInt64_NEW(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0xDFC0C0
    float System_IConvertible_ToSingle_NEW(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0xDFC0C8
    double System_IConvertible_ToDouble_NEW(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0xDFC0D0
    System::Decimal System_IConvertible_ToDecimal_NEW(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0xDFC0DC
    System::DateTime System_IConvertible_ToDateTime_NEW(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0xDFC0E8
    ::Il2CppObject* System_IConvertible_ToType_NEW(System::Type* type, System::IFormatProvider* provider);
    // static private System.Void .cctor()
    // Offset: 0x199ACE8
    static void _cctor();
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xDFBF90
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDFBFA0
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xDFBFA8
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.Decimal
  #pragma pack(pop)
  static check_size<sizeof(Decimal), 12 + sizeof(int)> __System_DecimalSizeCheck;
  static_assert(sizeof(Decimal) == 0x10);
  // static public System.Decimal op_Subtraction(System.Decimal d1, System.Decimal d2)
  // Offset: 0x199A2F4
  System::Decimal operator-(const System::Decimal& d1, const System::Decimal& d2);
  // static public System.Boolean op_Equality(System.Decimal d1, System.Decimal d2)
  // Offset: 0x199A374
  bool operator ==(const System::Decimal& d1, const System::Decimal& d2);
  // static public System.Boolean op_Inequality(System.Decimal d1, System.Decimal d2)
  // Offset: 0x199A3F4
  bool operator !=(const System::Decimal& d1, const System::Decimal& d2);
  // static public System.Boolean op_LessThanOrEqual(System.Decimal d1, System.Decimal d2)
  // Offset: 0x199A474
  bool operator <=(const System::Decimal& d1, const System::Decimal& d2);
  // static public System.Boolean op_GreaterThan(System.Decimal d1, System.Decimal d2)
  // Offset: 0x199A4F4
  bool operator >(const System::Decimal& d1, const System::Decimal& d2);
}
DEFINE_IL2CPP_ARG_TYPE(System::Decimal, "System", "Decimal");
