// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberStyles
  struct NumberStyles;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Decimal, "System", "Decimal");
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Decimal
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 1073680
  struct Decimal/*, public ::System::ValueType, public ::System::IComparable_1<::System::Decimal>, public ::System::IEquatable_1<::System::Decimal>, public ::System::IComparable, public ::System::IConvertible, public ::System::IFormattable, public ::System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    public:
    // private System.Int32 flags
    // Size: 0x4
    // Offset: 0x0
    int flags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 hi
    // Size: 0x4
    // Offset: 0x4
    int hi;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lo
    // Size: 0x4
    // Offset: 0x8
    int lo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 mid
    // Size: 0x4
    // Offset: 0xC
    int mid;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Decimal
    constexpr Decimal(int flags_ = {}, int hi_ = {}, int lo_ = {}, int mid_ = {}) noexcept : flags{flags_}, hi{hi_}, lo{lo_}, mid{mid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::System::Decimal>
    operator ::System::IComparable_1<::System::Decimal>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::System::Decimal>*>(this);
    }
    // Creating interface conversion operator: i_Decimal
    inline ::System::IComparable_1<::System::Decimal>* i_Decimal() noexcept {
      return reinterpret_cast<::System::IComparable_1<::System::Decimal>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::System::Decimal>
    operator ::System::IEquatable_1<::System::Decimal>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::System::Decimal>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: i_IComparable
    inline ::System::IComparable* i_IComparable() noexcept {
      return reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IConvertible
    operator ::System::IConvertible() noexcept {
      return *reinterpret_cast<::System::IConvertible*>(this);
    }
    // Creating interface conversion operator: i_IConvertible
    inline ::System::IConvertible* i_IConvertible() noexcept {
      return reinterpret_cast<::System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator ::System::IFormattable
    operator ::System::IFormattable() noexcept {
      return *reinterpret_cast<::System::IFormattable*>(this);
    }
    // Creating interface conversion operator: i_IFormattable
    inline ::System::IFormattable* i_IFormattable() noexcept {
      return reinterpret_cast<::System::IFormattable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::IDeserializationCallback
    operator ::System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: i_IDeserializationCallback
    inline ::System::Runtime::Serialization::IDeserializationCallback* i_IDeserializationCallback() noexcept {
      return reinterpret_cast<::System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // static field const value: static private System.Int32 SignMask
    static constexpr const int SignMask = -2147483648;
    // Get static field: static private System.Int32 SignMask
    static int _get_SignMask();
    // Set static field: static private System.Int32 SignMask
    static void _set_SignMask(int value);
    // static field const value: static private System.Byte DECIMAL_NEG
    static constexpr const uint8_t DECIMAL_NEG = 128u;
    // Get static field: static private System.Byte DECIMAL_NEG
    static uint8_t _get_DECIMAL_NEG();
    // Set static field: static private System.Byte DECIMAL_NEG
    static void _set_DECIMAL_NEG(uint8_t value);
    // static field const value: static private System.Byte DECIMAL_ADD
    static constexpr const uint8_t DECIMAL_ADD = 0u;
    // Get static field: static private System.Byte DECIMAL_ADD
    static uint8_t _get_DECIMAL_ADD();
    // Set static field: static private System.Byte DECIMAL_ADD
    static void _set_DECIMAL_ADD(uint8_t value);
    // static field const value: static private System.Int32 ScaleMask
    static constexpr const int ScaleMask = 16711680;
    // Get static field: static private System.Int32 ScaleMask
    static int _get_ScaleMask();
    // Set static field: static private System.Int32 ScaleMask
    static void _set_ScaleMask(int value);
    // static field const value: static private System.Int32 ScaleShift
    static constexpr const int ScaleShift = 16;
    // Get static field: static private System.Int32 ScaleShift
    static int _get_ScaleShift();
    // Set static field: static private System.Int32 ScaleShift
    static void _set_ScaleShift(int value);
    // static field const value: static private System.Int32 MaxInt32Scale
    static constexpr const int MaxInt32Scale = 9;
    // Get static field: static private System.Int32 MaxInt32Scale
    static int _get_MaxInt32Scale();
    // Set static field: static private System.Int32 MaxInt32Scale
    static void _set_MaxInt32Scale(int value);
    // Get static field: static private System.UInt32[] Powers10
    static ::ArrayW<uint> _get_Powers10();
    // Set static field: static private System.UInt32[] Powers10
    static void _set_Powers10(::ArrayW<uint> value);
    // [DecimalConstantAttribute] Offset: 0x107A5A0
    // Get static field: static public readonly System.Decimal Zero
    static ::System::Decimal _get_Zero();
    // Set static field: static public readonly System.Decimal Zero
    static void _set_Zero(::System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0x107A5C4
    // Get static field: static public readonly System.Decimal One
    static ::System::Decimal _get_One();
    // Set static field: static public readonly System.Decimal One
    static void _set_One(::System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0x107A5E8
    // Get static field: static public readonly System.Decimal MinusOne
    static ::System::Decimal _get_MinusOne();
    // Set static field: static public readonly System.Decimal MinusOne
    static void _set_MinusOne(::System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0x107A60C
    // Get static field: static public readonly System.Decimal MaxValue
    static ::System::Decimal _get_MaxValue();
    // Set static field: static public readonly System.Decimal MaxValue
    static void _set_MaxValue(::System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0x107A630
    // Get static field: static public readonly System.Decimal MinValue
    static ::System::Decimal _get_MinValue();
    // Set static field: static public readonly System.Decimal MinValue
    static void _set_MinValue(::System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0x107A654
    // Get static field: static private readonly System.Decimal NearNegativeZero
    static ::System::Decimal _get_NearNegativeZero();
    // Set static field: static private readonly System.Decimal NearNegativeZero
    static void _set_NearNegativeZero(::System::Decimal value);
    // [DecimalConstantAttribute] Offset: 0x107A678
    // Get static field: static private readonly System.Decimal NearPositiveZero
    static ::System::Decimal _get_NearPositiveZero();
    // Set static field: static private readonly System.Decimal NearPositiveZero
    static void _set_NearPositiveZero(::System::Decimal value);
    // Get instance field reference: private System.Int32 flags
    [[deprecated("Use field access instead!")]] int& dyn_flags();
    // Get instance field reference: private System.Int32 hi
    [[deprecated("Use field access instead!")]] int& dyn_hi();
    // Get instance field reference: private System.Int32 lo
    [[deprecated("Use field access instead!")]] int& dyn_lo();
    // Get instance field reference: private System.Int32 mid
    [[deprecated("Use field access instead!")]] int& dyn_mid();
    // public System.Void .ctor(System.Int32 value)
    // Offset: 0x232C768
    Decimal(int value);
    // public System.Void .ctor(System.UInt32 value)
    // Offset: 0x232C78C
    Decimal(uint value);
    // public System.Void .ctor(System.Int64 value)
    // Offset: 0x232C798
    Decimal(int64_t value);
    // public System.Void .ctor(System.UInt64 value)
    // Offset: 0x232C7C0
    Decimal(uint64_t value);
    // public System.Void .ctor(System.Single value)
    // Offset: 0x232C7D0
    Decimal(float value);
    // public System.Void .ctor(System.Double value)
    // Offset: 0x232C7D4
    Decimal(double value);
    // public System.Void .ctor(System.Int32[] bits)
    // Offset: 0x232C7D8
    Decimal(::ArrayW<int> bits);
    // public System.Void .ctor(System.Int32 lo, System.Int32 mid, System.Int32 hi, System.Boolean isNegative, System.Byte scale)
    // Offset: 0x232CA58
    Decimal(int lo, int mid, int hi, bool isNegative, uint8_t scale);
    // private System.Void .ctor(System.Int32 lo, System.Int32 mid, System.Int32 hi, System.Int32 flags)
    // Offset: 0x232CE84
    // ABORTED: conflicts with another method.  Decimal(int lo, int mid, int hi, int flags);
    // static private System.Void .cctor()
    // Offset: 0x232EF00
    static void _cctor();
    // private System.Void SetBits(System.Int32[] bits)
    // Offset: 0x232C918
    void SetBits(::ArrayW<int> bits);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x232CB48
    void OnSerializing(::System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0x232CD3C
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // static System.Decimal Abs(System.Decimal d)
    // Offset: 0x232CF54
    static ::System::Decimal Abs(::System::Decimal d);
    // static private System.Void FCallAddSub(ref System.Decimal d1, ref System.Decimal d2, System.Byte bSign)
    // Offset: 0x232CF88
    static void FCallAddSub(ByRef<::System::Decimal> d1, ByRef<::System::Decimal> d2, uint8_t bSign);
    // static private System.Int32 FCallCompare(ref System.Decimal d1, ref System.Decimal d2)
    // Offset: 0x232CF8C
    static int FCallCompare(ByRef<::System::Decimal> d1, ByRef<::System::Decimal> d2);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0x232CF90
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Decimal value)
    // Offset: 0x232D090
    int CompareTo(::System::Decimal value);
    // public System.Boolean Equals(System.Decimal value)
    // Offset: 0x232D1C0
    bool Equals(::System::Decimal value);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0x232D27C
    ::StringW ToString(::System::IFormatProvider* provider);
    // public System.String ToString(System.String format, System.IFormatProvider provider)
    // Offset: 0x232D2B8
    ::StringW ToString(::StringW format, ::System::IFormatProvider* provider);
    // static public System.Decimal Parse(System.String s, System.IFormatProvider provider)
    // Offset: 0x232D300
    static ::System::Decimal Parse(::StringW s, ::System::IFormatProvider* provider);
    // static public System.Decimal Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)
    // Offset: 0x232D338
    static ::System::Decimal Parse(::StringW s, ::System::Globalization::NumberStyles style, ::System::IFormatProvider* provider);
    // static public System.Boolean TryParse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider, out System.Decimal result)
    // Offset: 0x232D38C
    static bool TryParse(::StringW s, ::System::Globalization::NumberStyles style, ::System::IFormatProvider* provider, ByRef<::System::Decimal> result);
    // static public System.Int32[] GetBits(System.Decimal d)
    // Offset: 0x232CC90
    static ::ArrayW<int> GetBits(::System::Decimal d);
    // static System.Decimal ToDecimal(System.Byte[] buffer)
    // Offset: 0x232D3E8
    static ::System::Decimal ToDecimal(::ArrayW<uint8_t> buffer);
    // static private System.Void FCallMultiply(ref System.Decimal d1, ref System.Decimal d2)
    // Offset: 0x232D514
    static void FCallMultiply(ByRef<::System::Decimal> d1, ByRef<::System::Decimal> d2);
    // static public System.Decimal Negate(System.Decimal d)
    // Offset: 0x232D518
    static ::System::Decimal Negate(::System::Decimal d);
    // static public System.Decimal Round(System.Decimal d, System.Int32 decimals)
    // Offset: 0x232D54C
    static ::System::Decimal Round(::System::Decimal d, int decimals);
    // static private System.Void FCallRound(ref System.Decimal d, System.Int32 decimals)
    // Offset: 0x232D5C8
    static void FCallRound(ByRef<::System::Decimal> d, int decimals);
    // static public System.Byte ToByte(System.Decimal value)
    // Offset: 0x232D5CC
    static uint8_t ToByte(::System::Decimal value);
    // static public System.SByte ToSByte(System.Decimal value)
    // Offset: 0x232D850
    static int8_t ToSByte(::System::Decimal value);
    // static public System.Int16 ToInt16(System.Decimal value)
    // Offset: 0x232DAE4
    static int16_t ToInt16(::System::Decimal value);
    // static public System.Double ToDouble(System.Decimal d)
    // Offset: 0x232DC74
    static double ToDouble(::System::Decimal d);
    // static System.Int32 FCallToInt32(System.Decimal d)
    // Offset: 0x232DC78
    static int FCallToInt32(::System::Decimal d);
    // static public System.Int32 ToInt32(System.Decimal d)
    // Offset: 0x232D9E0
    static int ToInt32(::System::Decimal d);
    // static public System.Int64 ToInt64(System.Decimal d)
    // Offset: 0x232DC80
    static int64_t ToInt64(::System::Decimal d);
    // static public System.UInt16 ToUInt16(System.Decimal value)
    // Offset: 0x232DD7C
    static uint16_t ToUInt16(::System::Decimal value);
    // static public System.UInt32 ToUInt32(System.Decimal d)
    // Offset: 0x232D758
    static uint ToUInt32(::System::Decimal d);
    // static public System.UInt64 ToUInt64(System.Decimal d)
    // Offset: 0x232DF08
    static uint64_t ToUInt64(::System::Decimal d);
    // static public System.Single ToSingle(System.Decimal d)
    // Offset: 0x232DFF8
    static float ToSingle(::System::Decimal d);
    // static public System.Decimal Truncate(System.Decimal d)
    // Offset: 0x232DFFC
    static ::System::Decimal Truncate(::System::Decimal d);
    // static private System.Void FCallTruncate(ref System.Decimal d)
    // Offset: 0x232DC7C
    static void FCallTruncate(ByRef<::System::Decimal> d);
    // static public System.Decimal op_Explicit(System.Single value)
    // Offset: 0x232E100
    explicit Decimal(float& value);
    // static public System.Decimal op_Explicit(System.Double value)
    // Offset: 0x232E128
    explicit Decimal(double& value);
    // static public System.Int32 op_Explicit(System.Decimal value)
    // Offset: 0x232E150
    explicit operator int();
    // static public System.Int64 op_Explicit(System.Decimal value)
    // Offset: 0x232E1C4
    explicit operator int64_t();
    // static public System.UInt64 op_Explicit(System.Decimal value)
    // Offset: 0x232E238
    explicit operator uint64_t();
    // static public System.Single op_Explicit(System.Decimal value)
    // Offset: 0x232E2AC
    explicit operator float();
    // static public System.Double op_Explicit(System.Decimal value)
    // Offset: 0x232E320
    explicit operator double();
    // public System.TypeCode GetTypeCode()
    // Offset: 0x232E78C
    ::System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0x232E794
    bool System_IConvertible_ToBoolean(::System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0x232E804
    ::Il2CppChar System_IConvertible_ToChar(::System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0x232E8F4
    int8_t System_IConvertible_ToSByte(::System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0x232E964
    uint8_t System_IConvertible_ToByte(::System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0x232E9D4
    int16_t System_IConvertible_ToInt16(::System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0x232EA44
    uint16_t System_IConvertible_ToUInt16(::System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0x232EAB4
    int System_IConvertible_ToInt32(::System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0x232EB24
    uint System_IConvertible_ToUInt32(::System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0x232EB94
    int64_t System_IConvertible_ToInt64(::System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0x232EC04
    uint64_t System_IConvertible_ToUInt64(::System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0x232EC74
    float System_IConvertible_ToSingle(::System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0x232ECE4
    double System_IConvertible_ToDouble(::System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0x232ED54
    ::System::Decimal System_IConvertible_ToDecimal(::System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0x232ED60
    ::System::DateTime System_IConvertible_ToDateTime(::System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0x232EE50
    ::Il2CppObject* System_IConvertible_ToType(::System::Type* type, ::System::IFormatProvider* provider);
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x232D108
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x232D240
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x232D244
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // System.Decimal
  #pragma pack(pop)
  static check_size<sizeof(Decimal), 12 + sizeof(int)> __System_DecimalSizeCheck;
  static_assert(sizeof(Decimal) == 0x10);
  // static public System.Decimal op_Subtraction(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E394
  ::System::Decimal operator-(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Decimal op_Multiply(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E414
  ::System::Decimal operator*(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Boolean op_Equality(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E490
  bool operator ==(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Boolean op_Inequality(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E510
  bool operator !=(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Boolean op_LessThan(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E590
  bool operator <(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Boolean op_LessThanOrEqual(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E60C
  bool operator <=(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Boolean op_GreaterThan(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E68C
  bool operator >(const ::System::Decimal& d1, const ::System::Decimal& d2);
  // static public System.Boolean op_GreaterThanOrEqual(System.Decimal d1, System.Decimal d2)
  // Offset: 0x232E70C
  bool operator >=(const ::System::Decimal& d1, const ::System::Decimal& d2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Decimal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Decimal::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::SetBits
// Il2CppName: SetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::*)(::ArrayW<int>)>(&System::Decimal::SetBits)> {
  static const MethodInfo* get() {
    static auto* bits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "SetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bits});
  }
};
// Writing MetadataGetter for method: System::Decimal::OnSerializing
// Il2CppName: OnSerializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::*)(::System::Runtime::Serialization::StreamingContext)>(&System::Decimal::OnSerializing)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "OnSerializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
// Il2CppName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Decimal::*)(::Il2CppObject*)>(&System::Decimal::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender});
  }
};
// Writing MetadataGetter for method: System::Decimal::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal)>(&System::Decimal::Abs)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::FCallAddSub
// Il2CppName: FCallAddSub
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal>, ByRef<::System::Decimal>, uint8_t)>(&System::Decimal::FCallAddSub)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* bSign = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "FCallAddSub", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2, bSign});
  }
};
// Writing MetadataGetter for method: System::Decimal::FCallCompare
// Il2CppName: FCallCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Decimal::FCallCompare)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "FCallCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2});
  }
};
// Writing MetadataGetter for method: System::Decimal::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Decimal::*)(::Il2CppObject*)>(&System::Decimal::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Decimal::*)(::System::Decimal)>(&System::Decimal::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Decimal::*)(::System::Decimal)>(&System::Decimal::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::ToString)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Decimal::*)(::StringW, ::System::IFormatProvider*)>(&System::Decimal::ToString)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::StringW, ::System::IFormatProvider*)>(&System::Decimal::Parse)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::StringW, ::System::Globalization::NumberStyles, ::System::IFormatProvider*)>(&System::Decimal::Parse)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, style, provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::TryParse
// Il2CppName: TryParse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::System::Globalization::NumberStyles, ::System::IFormatProvider*, ByRef<::System::Decimal>)>(&System::Decimal::TryParse)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("System.Globalization", "NumberStyles")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "TryParse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s, style, provider, result});
  }
};
// Writing MetadataGetter for method: System::Decimal::GetBits
// Il2CppName: GetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (*)(::System::Decimal)>(&System::Decimal::GetBits)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "GetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToDecimal
// Il2CppName: ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::ArrayW<uint8_t>)>(&System::Decimal::ToDecimal)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: System::Decimal::FCallMultiply
// Il2CppName: FCallMultiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal>, ByRef<::System::Decimal>)>(&System::Decimal::FCallMultiply)> {
  static const MethodInfo* get() {
    static auto* d1 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* d2 = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "FCallMultiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d1, d2});
  }
};
// Writing MetadataGetter for method: System::Decimal::Negate
// Il2CppName: Negate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal)>(&System::Decimal::Negate)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Negate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal, int)>(&System::Decimal::Round)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    static auto* decimals = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d, decimals});
  }
};
// Writing MetadataGetter for method: System::Decimal::FCallRound
// Il2CppName: FCallRound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal>, int)>(&System::Decimal::FCallRound)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    static auto* decimals = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "FCallRound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d, decimals});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToByte
// Il2CppName: ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(::System::Decimal)>(&System::Decimal::ToByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToSByte
// Il2CppName: ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (*)(::System::Decimal)>(&System::Decimal::ToSByte)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToInt16
// Il2CppName: ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(::System::Decimal)>(&System::Decimal::ToInt16)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(::System::Decimal)>(&System::Decimal::ToDouble)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::FCallToInt32
// Il2CppName: FCallToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Decimal)>(&System::Decimal::FCallToInt32)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "FCallToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToInt32
// Il2CppName: ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Decimal)>(&System::Decimal::ToInt32)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToInt64
// Il2CppName: ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::Decimal)>(&System::Decimal::ToInt64)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToUInt16
// Il2CppName: ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (*)(::System::Decimal)>(&System::Decimal::ToUInt16)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToUInt32
// Il2CppName: ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::Decimal)>(&System::Decimal::ToUInt32)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToUInt64
// Il2CppName: ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::System::Decimal)>(&System::Decimal::ToUInt64)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToSingle
// Il2CppName: ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::System::Decimal)>(&System::Decimal::ToSingle)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::Truncate
// Il2CppName: Truncate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (*)(::System::Decimal)>(&System::Decimal::Truncate)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Truncate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::FCallTruncate
// Il2CppName: FCallTruncate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::System::Decimal>)>(&System::Decimal::FCallTruncate)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System", "Decimal")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "FCallTruncate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d});
  }
};
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::Decimal
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator int
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator int64_t
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator uint64_t
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator float
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator double
// Il2CppName: op_Explicit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (System::Decimal::*)()>(&System::Decimal::GetTypeCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToBoolean
// Il2CppName: System.IConvertible.ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToBoolean)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToChar
// Il2CppName: System.IConvertible.ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToChar)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToSByte
// Il2CppName: System.IConvertible.ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToSByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToByte
// Il2CppName: System.IConvertible.ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToByte)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToInt16
// Il2CppName: System.IConvertible.ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToUInt16
// Il2CppName: System.IConvertible.ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToUInt16)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToInt32
// Il2CppName: System.IConvertible.ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToUInt32
// Il2CppName: System.IConvertible.ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToUInt32)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToInt64
// Il2CppName: System.IConvertible.ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToUInt64
// Il2CppName: System.IConvertible.ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToUInt64)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToSingle
// Il2CppName: System.IConvertible.ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToSingle)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToDouble
// Il2CppName: System.IConvertible.ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToDouble)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToDecimal
// Il2CppName: System.IConvertible.ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToDecimal)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToDateTime
// Il2CppName: System.IConvertible.ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (System::Decimal::*)(::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToDateTime)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::System_IConvertible_ToType
// Il2CppName: System.IConvertible.ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Decimal::*)(::System::Type*, ::System::IFormatProvider*)>(&System::Decimal::System_IConvertible_ToType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, provider});
  }
};
// Writing MetadataGetter for method: System::Decimal::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Decimal::*)(::Il2CppObject*)>(&System::Decimal::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Decimal::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Decimal::*)()>(&System::Decimal::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Decimal::*)()>(&System::Decimal::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Decimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Decimal::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator <=
// Il2CppName: op_LessThanOrEqual
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Decimal::operator >=
// Il2CppName: op_GreaterThanOrEqual
// Cannot perform method pointer template specialization from operators!
