// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IFormattable
#include "System/IFormattable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
  // Forward declaring type: NumberStyles
  struct NumberStyles;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Int16
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: C93130
  struct Int16/*, public System::ValueType, public System::IComparable, public System::IFormattable, public System::IConvertible, public System::IComparable_1<int16_t>, public System::IEquatable_1<int16_t>*/ {
    public:
    // System.Int16 m_value
    // Size: 0x2
    // Offset: 0x0
    int16_t m_value;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Creating value type constructor for type: Int16
    constexpr Int16(int16_t m_value_ = {}) noexcept : m_value{m_value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormattable
    operator System::IFormattable() noexcept {
      return *reinterpret_cast<System::IFormattable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<int16_t>
    operator System::IComparable_1<int16_t>() noexcept {
      return *reinterpret_cast<System::IComparable_1<int16_t>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<int16_t>
    operator System::IEquatable_1<int16_t>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<int16_t>*>(this);
    }
    // Creating conversion operator: operator int16_t
    constexpr operator int16_t() const noexcept {
      return m_value;
    }
    // static field const value: static public System.Int16 MaxValue
    static constexpr const int16_t MaxValue = 32767;
    // Get static field: static public System.Int16 MaxValue
    static int16_t _get_MaxValue();
    // Set static field: static public System.Int16 MaxValue
    static void _set_MaxValue(int16_t value);
    // static field const value: static public System.Int16 MinValue
    static constexpr const int16_t MinValue = -32768;
    // Get static field: static public System.Int16 MinValue
    static int16_t _get_MinValue();
    // Set static field: static public System.Int16 MinValue
    static void _set_MinValue(int16_t value);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0xDF4338
    int CompareTo_NEW(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Int16 value)
    // Offset: 0xDF4340
    int CompareTo_NEW(int16_t value);
    // public System.Boolean Equals(System.Int16 obj)
    // Offset: 0xDF4354
    bool Equals_NEW(int16_t obj);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xDF43A0
    ::Il2CppString* ToString_NEW(System::IFormatProvider* provider);
    // public System.String ToString(System.String format, System.IFormatProvider provider)
    // Offset: 0xDF43D4
    ::Il2CppString* ToString_NEW(::Il2CppString* format, System::IFormatProvider* provider);
    // private System.String ToString(System.String format, System.Globalization.NumberFormatInfo info)
    // Offset: 0xDF440C
    ::Il2CppString* ToString(::Il2CppString* format, System::Globalization::NumberFormatInfo* info);
    // static public System.Int16 Parse(System.String s, System.IFormatProvider provider)
    // Offset: 0x16934D8
    static int16_t Parse(::Il2CppString* s, System::IFormatProvider* provider);
    // static public System.Int16 Parse(System.String s, System.Globalization.NumberStyles style, System.IFormatProvider provider)
    // Offset: 0x169368C
    static int16_t Parse(::Il2CppString* s, System::Globalization::NumberStyles style, System::IFormatProvider* provider);
    // static private System.Int16 Parse(System.String s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info)
    // Offset: 0x169350C
    static int16_t Parse(::Il2CppString* s, System::Globalization::NumberStyles style, System::Globalization::NumberFormatInfo* info);
    // public System.TypeCode GetTypeCode()
    // Offset: 0xDF4414
    System::TypeCode GetTypeCode_NEW();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0xDF441C
    bool System_IConvertible_ToBoolean_NEW(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0xDF4424
    ::Il2CppChar System_IConvertible_ToChar_NEW(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0xDF442C
    int8_t System_IConvertible_ToSByte_NEW(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0xDF4434
    uint8_t System_IConvertible_ToByte_NEW(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0xDF443C
    int16_t System_IConvertible_ToInt16_NEW(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0xDF4444
    uint16_t System_IConvertible_ToUInt16_NEW(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0xDF444C
    int System_IConvertible_ToInt32_NEW(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0xDF4454
    uint System_IConvertible_ToUInt32_NEW(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0xDF445C
    int64_t System_IConvertible_ToInt64_NEW(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0xDF4464
    uint64_t System_IConvertible_ToUInt64_NEW(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0xDF446C
    float System_IConvertible_ToSingle_NEW(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0xDF4474
    double System_IConvertible_ToDouble_NEW(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0xDF447C
    System::Decimal System_IConvertible_ToDecimal_NEW(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0xDF4484
    System::DateTime System_IConvertible_ToDateTime_NEW(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0xDF4490
    ::Il2CppObject* System_IConvertible_ToType_NEW(System::Type* type, System::IFormatProvider* provider);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xDF434C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDF4364
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xDF4370
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.Int16
  #pragma pack(pop)
  static check_size<sizeof(Int16), 0 + sizeof(int16_t)> __System_Int16SizeCheck;
  static_assert(sizeof(Int16) == 0x2);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Int16, "System", "Int16");
