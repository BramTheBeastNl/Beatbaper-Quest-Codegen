// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.TimeZoneInfo
#include "System/TimeZoneInfo.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.TimeZoneInfo/System.SYSTEMTIME
  // [TokenAttribute] Offset: FFFFFFFF
  struct TimeZoneInfo::SYSTEMTIME/*, public System::ValueType*/ {
    public:
    // System.UInt16 wYear
    // Size: 0x2
    // Offset: 0x0
    uint16_t wYear;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wMonth
    // Size: 0x2
    // Offset: 0x2
    uint16_t wMonth;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wDayOfWeek
    // Size: 0x2
    // Offset: 0x4
    uint16_t wDayOfWeek;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wDay
    // Size: 0x2
    // Offset: 0x6
    uint16_t wDay;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wHour
    // Size: 0x2
    // Offset: 0x8
    uint16_t wHour;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wMinute
    // Size: 0x2
    // Offset: 0xA
    uint16_t wMinute;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wSecond
    // Size: 0x2
    // Offset: 0xC
    uint16_t wSecond;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // System.UInt16 wMilliseconds
    // Size: 0x2
    // Offset: 0xE
    uint16_t wMilliseconds;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Creating value type constructor for type: SYSTEMTIME
    constexpr SYSTEMTIME(uint16_t wYear_ = {}, uint16_t wMonth_ = {}, uint16_t wDayOfWeek_ = {}, uint16_t wDay_ = {}, uint16_t wHour_ = {}, uint16_t wMinute_ = {}, uint16_t wSecond_ = {}, uint16_t wMilliseconds_ = {}) noexcept : wYear{wYear_}, wMonth{wMonth_}, wDayOfWeek{wDayOfWeek_}, wDay{wDay_}, wHour{wHour_}, wMinute{wMinute_}, wSecond{wSecond_}, wMilliseconds{wMilliseconds_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field: System.UInt16 wYear
    uint16_t _get_wYear();
    // Set instance field: System.UInt16 wYear
    void _set_wYear(uint16_t value);
    // Get instance field: System.UInt16 wMonth
    uint16_t _get_wMonth();
    // Set instance field: System.UInt16 wMonth
    void _set_wMonth(uint16_t value);
    // Get instance field: System.UInt16 wDayOfWeek
    uint16_t _get_wDayOfWeek();
    // Set instance field: System.UInt16 wDayOfWeek
    void _set_wDayOfWeek(uint16_t value);
    // Get instance field: System.UInt16 wDay
    uint16_t _get_wDay();
    // Set instance field: System.UInt16 wDay
    void _set_wDay(uint16_t value);
    // Get instance field: System.UInt16 wHour
    uint16_t _get_wHour();
    // Set instance field: System.UInt16 wHour
    void _set_wHour(uint16_t value);
    // Get instance field: System.UInt16 wMinute
    uint16_t _get_wMinute();
    // Set instance field: System.UInt16 wMinute
    void _set_wMinute(uint16_t value);
    // Get instance field: System.UInt16 wSecond
    uint16_t _get_wSecond();
    // Set instance field: System.UInt16 wSecond
    void _set_wSecond(uint16_t value);
    // Get instance field: System.UInt16 wMilliseconds
    uint16_t _get_wMilliseconds();
    // Set instance field: System.UInt16 wMilliseconds
    void _set_wMilliseconds(uint16_t value);
  }; // System.TimeZoneInfo/System.SYSTEMTIME
  #pragma pack(pop)
  static check_size<sizeof(TimeZoneInfo::SYSTEMTIME), 14 + sizeof(uint16_t)> __System_TimeZoneInfo_SYSTEMTIMESizeCheck;
  static_assert(sizeof(TimeZoneInfo::SYSTEMTIME) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::TimeZoneInfo::SYSTEMTIME, "System", "TimeZoneInfo/SYSTEMTIME");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
