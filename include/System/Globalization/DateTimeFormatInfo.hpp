// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Globalization.DateTimeFormatFlags
#include "System/Globalization/DateTimeFormatFlags.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Globalization.DateTimeStyles
#include "System/Globalization/DateTimeStyles.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureData
  class CultureData;
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: TokenHashValue
  class TokenHashValue;
  // Forward declaring type: MonthNameStyles
  struct MonthNameStyles;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
  // Forward declaring type: __DTString
  struct __DTString;
  // Forward declaring type: TokenType
  struct TokenType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.DateTimeFormatInfo
  // [ComVisibleAttribute] Offset: C95864
  class DateTimeFormatInfo : public ::Il2CppObject/*, public System::ICloneable, public System::IFormatProvider*/ {
    public:
    // private System.Globalization.CultureData m_cultureData
    // Size: 0x8
    // Offset: 0x10
    System::Globalization::CultureData* m_cultureData;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureData*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A220
    // System.String m_name
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_langName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* m_langName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Globalization.CompareInfo m_compareInfo
    // Size: 0x8
    // Offset: 0x28
    System::Globalization::CompareInfo* m_compareInfo;
    // Field size check
    static_assert(sizeof(System::Globalization::CompareInfo*) == 0x8);
    // private System.Globalization.CultureInfo m_cultureInfo
    // Size: 0x8
    // Offset: 0x30
    System::Globalization::CultureInfo* m_cultureInfo;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureInfo*) == 0x8);
    // System.String amDesignator
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* amDesignator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String pmDesignator
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* pmDesignator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A258
    // System.String dateSeparator
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* dateSeparator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A290
    // System.String generalShortTimePattern
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* generalShortTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A2C8
    // System.String generalLongTimePattern
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* generalLongTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A300
    // System.String timeSeparator
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppString* timeSeparator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String monthDayPattern
    // Size: 0x8
    // Offset: 0x68
    ::Il2CppString* monthDayPattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A338
    // System.String dateTimeOffsetPattern
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppString* dateTimeOffsetPattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Globalization.Calendar calendar
    // Size: 0x8
    // Offset: 0x78
    System::Globalization::Calendar* calendar;
    // Field size check
    static_assert(sizeof(System::Globalization::Calendar*) == 0x8);
    // System.Int32 firstDayOfWeek
    // Size: 0x4
    // Offset: 0x80
    int firstDayOfWeek;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 calendarWeekRule
    // Size: 0x4
    // Offset: 0x84
    int calendarWeekRule;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xC9A370
    // System.String fullDateTimePattern
    // Size: 0x8
    // Offset: 0x88
    ::Il2CppString* fullDateTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String[] abbreviatedDayNames
    // Size: 0x8
    // Offset: 0x90
    ::Array<::Il2CppString*>* abbreviatedDayNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A3A8
    // System.String[] m_superShortDayNames
    // Size: 0x8
    // Offset: 0x98
    ::Array<::Il2CppString*>* m_superShortDayNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] dayNames
    // Size: 0x8
    // Offset: 0xA0
    ::Array<::Il2CppString*>* dayNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] abbreviatedMonthNames
    // Size: 0x8
    // Offset: 0xA8
    ::Array<::Il2CppString*>* abbreviatedMonthNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] monthNames
    // Size: 0x8
    // Offset: 0xB0
    ::Array<::Il2CppString*>* monthNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A3E0
    // System.String[] genitiveMonthNames
    // Size: 0x8
    // Offset: 0xB8
    ::Array<::Il2CppString*>* genitiveMonthNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A418
    // System.String[] m_genitiveAbbreviatedMonthNames
    // Size: 0x8
    // Offset: 0xC0
    ::Array<::Il2CppString*>* m_genitiveAbbreviatedMonthNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A450
    // System.String[] leapYearMonthNames
    // Size: 0x8
    // Offset: 0xC8
    ::Array<::Il2CppString*>* leapYearMonthNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String longDatePattern
    // Size: 0x8
    // Offset: 0xD0
    ::Il2CppString* longDatePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String shortDatePattern
    // Size: 0x8
    // Offset: 0xD8
    ::Il2CppString* shortDatePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String yearMonthPattern
    // Size: 0x8
    // Offset: 0xE0
    ::Il2CppString* yearMonthPattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String longTimePattern
    // Size: 0x8
    // Offset: 0xE8
    ::Il2CppString* longTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String shortTimePattern
    // Size: 0x8
    // Offset: 0xF0
    ::Il2CppString* shortTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC9A488
    // private System.String[] allYearMonthPatterns
    // Size: 0x8
    // Offset: 0xF8
    ::Array<::Il2CppString*>* allYearMonthPatterns;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] allShortDatePatterns
    // Size: 0x8
    // Offset: 0x100
    ::Array<::Il2CppString*>* allShortDatePatterns;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] allLongDatePatterns
    // Size: 0x8
    // Offset: 0x108
    ::Array<::Il2CppString*>* allLongDatePatterns;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] allShortTimePatterns
    // Size: 0x8
    // Offset: 0x110
    ::Array<::Il2CppString*>* allShortTimePatterns;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] allLongTimePatterns
    // Size: 0x8
    // Offset: 0x118
    ::Array<::Il2CppString*>* allLongTimePatterns;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] m_eraNames
    // Size: 0x8
    // Offset: 0x120
    ::Array<::Il2CppString*>* m_eraNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] m_abbrevEraNames
    // Size: 0x8
    // Offset: 0x128
    ::Array<::Il2CppString*>* m_abbrevEraNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.String[] m_abbrevEnglishEraNames
    // Size: 0x8
    // Offset: 0x130
    ::Array<::Il2CppString*>* m_abbrevEnglishEraNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // System.Int32[] optionalCalendars
    // Size: 0x8
    // Offset: 0x138
    ::Array<int>* optionalCalendars;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // System.Boolean m_isReadOnly
    // Size: 0x1
    // Offset: 0x140
    bool m_isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isReadOnly and: formatFlags
    char __padding39[0x3] = {};
    // [OptionalFieldAttribute] Offset: 0xC9A4C0
    // System.Globalization.DateTimeFormatFlags formatFlags
    // Size: 0x4
    // Offset: 0x144
    System::Globalization::DateTimeFormatFlags formatFlags;
    // Field size check
    static_assert(sizeof(System::Globalization::DateTimeFormatFlags) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xC9A4F8
    // private System.Int32 CultureID
    // Size: 0x4
    // Offset: 0x148
    int CultureID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xC9A530
    // private System.Boolean m_useUserOverride
    // Size: 0x1
    // Offset: 0x14C
    bool m_useUserOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0xC9A568
    // private System.Boolean bUseCalendarInfo
    // Size: 0x1
    // Offset: 0x14D
    bool bUseCalendarInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bUseCalendarInfo and: nDataItem
    char __padding43[0x2] = {};
    // [OptionalFieldAttribute] Offset: 0xC9A5A0
    // private System.Int32 nDataItem
    // Size: 0x4
    // Offset: 0x150
    int nDataItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xC9A5D8
    // System.Boolean m_isDefaultCalendar
    // Size: 0x1
    // Offset: 0x154
    bool m_isDefaultCalendar;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isDefaultCalendar and: m_dateWords
    char __padding45[0x3] = {};
    // [OptionalFieldAttribute] Offset: 0xC9A648
    // System.String[] m_dateWords
    // Size: 0x8
    // Offset: 0x158
    ::Array<::Il2CppString*>* m_dateWords;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private System.String m_fullTimeSpanPositivePattern
    // Size: 0x8
    // Offset: 0x160
    ::Il2CppString* m_fullTimeSpanPositivePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_fullTimeSpanNegativePattern
    // Size: 0x8
    // Offset: 0x168
    ::Il2CppString* m_fullTimeSpanNegativePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Globalization.TokenHashValue[] m_dtfiTokenHash
    // Size: 0x8
    // Offset: 0x170
    ::Array<System::Globalization::TokenHashValue*>* m_dtfiTokenHash;
    // Field size check
    static_assert(sizeof(::Array<System::Globalization::TokenHashValue*>*) == 0x8);
    // Creating value type constructor for type: DateTimeFormatInfo
    DateTimeFormatInfo(System::Globalization::CultureData* m_cultureData_ = {}, ::Il2CppString* m_name_ = {}, ::Il2CppString* m_langName_ = {}, System::Globalization::CompareInfo* m_compareInfo_ = {}, System::Globalization::CultureInfo* m_cultureInfo_ = {}, ::Il2CppString* amDesignator_ = {}, ::Il2CppString* pmDesignator_ = {}, ::Il2CppString* dateSeparator_ = {}, ::Il2CppString* generalShortTimePattern_ = {}, ::Il2CppString* generalLongTimePattern_ = {}, ::Il2CppString* timeSeparator_ = {}, ::Il2CppString* monthDayPattern_ = {}, ::Il2CppString* dateTimeOffsetPattern_ = {}, System::Globalization::Calendar* calendar_ = {}, int firstDayOfWeek_ = {}, int calendarWeekRule_ = {}, ::Il2CppString* fullDateTimePattern_ = {}, ::Array<::Il2CppString*>* abbreviatedDayNames_ = {}, ::Array<::Il2CppString*>* m_superShortDayNames_ = {}, ::Array<::Il2CppString*>* dayNames_ = {}, ::Array<::Il2CppString*>* abbreviatedMonthNames_ = {}, ::Array<::Il2CppString*>* monthNames_ = {}, ::Array<::Il2CppString*>* genitiveMonthNames_ = {}, ::Array<::Il2CppString*>* m_genitiveAbbreviatedMonthNames_ = {}, ::Array<::Il2CppString*>* leapYearMonthNames_ = {}, ::Il2CppString* longDatePattern_ = {}, ::Il2CppString* shortDatePattern_ = {}, ::Il2CppString* yearMonthPattern_ = {}, ::Il2CppString* longTimePattern_ = {}, ::Il2CppString* shortTimePattern_ = {}, ::Array<::Il2CppString*>* allYearMonthPatterns_ = {}, ::Array<::Il2CppString*>* allShortDatePatterns_ = {}, ::Array<::Il2CppString*>* allLongDatePatterns_ = {}, ::Array<::Il2CppString*>* allShortTimePatterns_ = {}, ::Array<::Il2CppString*>* allLongTimePatterns_ = {}, ::Array<::Il2CppString*>* m_eraNames_ = {}, ::Array<::Il2CppString*>* m_abbrevEraNames_ = {}, ::Array<::Il2CppString*>* m_abbrevEnglishEraNames_ = {}, ::Array<int>* optionalCalendars_ = {}, bool m_isReadOnly_ = {}, System::Globalization::DateTimeFormatFlags formatFlags_ = {}, int CultureID_ = {}, bool m_useUserOverride_ = {}, bool bUseCalendarInfo_ = {}, int nDataItem_ = {}, bool m_isDefaultCalendar_ = {}, ::Array<::Il2CppString*>* m_dateWords_ = {}, ::Il2CppString* m_fullTimeSpanPositivePattern_ = {}, ::Il2CppString* m_fullTimeSpanNegativePattern_ = {}, ::Array<System::Globalization::TokenHashValue*>* m_dtfiTokenHash_ = {}) noexcept : m_cultureData{m_cultureData_}, m_name{m_name_}, m_langName{m_langName_}, m_compareInfo{m_compareInfo_}, m_cultureInfo{m_cultureInfo_}, amDesignator{amDesignator_}, pmDesignator{pmDesignator_}, dateSeparator{dateSeparator_}, generalShortTimePattern{generalShortTimePattern_}, generalLongTimePattern{generalLongTimePattern_}, timeSeparator{timeSeparator_}, monthDayPattern{monthDayPattern_}, dateTimeOffsetPattern{dateTimeOffsetPattern_}, calendar{calendar_}, firstDayOfWeek{firstDayOfWeek_}, calendarWeekRule{calendarWeekRule_}, fullDateTimePattern{fullDateTimePattern_}, abbreviatedDayNames{abbreviatedDayNames_}, m_superShortDayNames{m_superShortDayNames_}, dayNames{dayNames_}, abbreviatedMonthNames{abbreviatedMonthNames_}, monthNames{monthNames_}, genitiveMonthNames{genitiveMonthNames_}, m_genitiveAbbreviatedMonthNames{m_genitiveAbbreviatedMonthNames_}, leapYearMonthNames{leapYearMonthNames_}, longDatePattern{longDatePattern_}, shortDatePattern{shortDatePattern_}, yearMonthPattern{yearMonthPattern_}, longTimePattern{longTimePattern_}, shortTimePattern{shortTimePattern_}, allYearMonthPatterns{allYearMonthPatterns_}, allShortDatePatterns{allShortDatePatterns_}, allLongDatePatterns{allLongDatePatterns_}, allShortTimePatterns{allShortTimePatterns_}, allLongTimePatterns{allLongTimePatterns_}, m_eraNames{m_eraNames_}, m_abbrevEraNames{m_abbrevEraNames_}, m_abbrevEnglishEraNames{m_abbrevEnglishEraNames_}, optionalCalendars{optionalCalendars_}, m_isReadOnly{m_isReadOnly_}, formatFlags{formatFlags_}, CultureID{CultureID_}, m_useUserOverride{m_useUserOverride_}, bUseCalendarInfo{bUseCalendarInfo_}, nDataItem{nDataItem_}, m_isDefaultCalendar{m_isDefaultCalendar_}, m_dateWords{m_dateWords_}, m_fullTimeSpanPositivePattern{m_fullTimeSpanPositivePattern_}, m_fullTimeSpanNegativePattern{m_fullTimeSpanNegativePattern_}, m_dtfiTokenHash{m_dtfiTokenHash_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormatProvider
    operator System::IFormatProvider() noexcept {
      return *reinterpret_cast<System::IFormatProvider*>(this);
    }
    // Get static field: static private System.Globalization.DateTimeFormatInfo invariantInfo
    static System::Globalization::DateTimeFormatInfo* _get_invariantInfo();
    // Set static field: static private System.Globalization.DateTimeFormatInfo invariantInfo
    static void _set_invariantInfo(System::Globalization::DateTimeFormatInfo* value);
    // static field const value: static System.String rfc1123Pattern
    static constexpr const char* rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
    // Get static field: static System.String rfc1123Pattern
    static ::Il2CppString* _get_rfc1123Pattern();
    // Set static field: static System.String rfc1123Pattern
    static void _set_rfc1123Pattern(::Il2CppString* value);
    // static field const value: static System.String sortableDateTimePattern
    static constexpr const char* sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
    // Get static field: static System.String sortableDateTimePattern
    static ::Il2CppString* _get_sortableDateTimePattern();
    // Set static field: static System.String sortableDateTimePattern
    static void _set_sortableDateTimePattern(::Il2CppString* value);
    // static field const value: static System.String universalSortableDateTimePattern
    static constexpr const char* universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
    // Get static field: static System.String universalSortableDateTimePattern
    static ::Il2CppString* _get_universalSortableDateTimePattern();
    // Set static field: static System.String universalSortableDateTimePattern
    static void _set_universalSortableDateTimePattern(::Il2CppString* value);
    // static field const value: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static constexpr const int DEFAULT_ALL_DATETIMES_SIZE = 132;
    // Get static field: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static int _get_DEFAULT_ALL_DATETIMES_SIZE();
    // Set static field: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static void _set_DEFAULT_ALL_DATETIMES_SIZE(int value);
    // Get static field: static System.Boolean preferExistingTokens
    static bool _get_preferExistingTokens();
    // Set static field: static System.Boolean preferExistingTokens
    static void _set_preferExistingTokens(bool value);
    // [OptionalFieldAttribute] Offset: 0xC9A610
    // Get static field: static private System.Collections.Hashtable s_calendarNativeNames
    static System::Collections::Hashtable* _get_s_calendarNativeNames();
    // Set static field: static private System.Collections.Hashtable s_calendarNativeNames
    static void _set_s_calendarNativeNames(System::Collections::Hashtable* value);
    // static field const value: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static constexpr const int InvalidDateTimeStyles = -256;
    // Get static field: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static System::Globalization::DateTimeStyles _get_InvalidDateTimeStyles();
    // Set static field: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static void _set_InvalidDateTimeStyles(System::Globalization::DateTimeStyles value);
    // static field const value: static private System.Int32 TOKEN_HASH_SIZE
    static constexpr const int TOKEN_HASH_SIZE = 199;
    // Get static field: static private System.Int32 TOKEN_HASH_SIZE
    static int _get_TOKEN_HASH_SIZE();
    // Set static field: static private System.Int32 TOKEN_HASH_SIZE
    static void _set_TOKEN_HASH_SIZE(int value);
    // static field const value: static private System.Int32 SECOND_PRIME
    static constexpr const int SECOND_PRIME = 197;
    // Get static field: static private System.Int32 SECOND_PRIME
    static int _get_SECOND_PRIME();
    // Set static field: static private System.Int32 SECOND_PRIME
    static void _set_SECOND_PRIME(int value);
    // static field const value: static private System.String dateSeparatorOrTimeZoneOffset
    static constexpr const char* dateSeparatorOrTimeZoneOffset = "-";
    // Get static field: static private System.String dateSeparatorOrTimeZoneOffset
    static ::Il2CppString* _get_dateSeparatorOrTimeZoneOffset();
    // Set static field: static private System.String dateSeparatorOrTimeZoneOffset
    static void _set_dateSeparatorOrTimeZoneOffset(::Il2CppString* value);
    // static field const value: static private System.String invariantDateSeparator
    static constexpr const char* invariantDateSeparator = "/";
    // Get static field: static private System.String invariantDateSeparator
    static ::Il2CppString* _get_invariantDateSeparator();
    // Set static field: static private System.String invariantDateSeparator
    static void _set_invariantDateSeparator(::Il2CppString* value);
    // static field const value: static private System.String invariantTimeSeparator
    static constexpr const char* invariantTimeSeparator = ":";
    // Get static field: static private System.String invariantTimeSeparator
    static ::Il2CppString* _get_invariantTimeSeparator();
    // Set static field: static private System.String invariantTimeSeparator
    static void _set_invariantTimeSeparator(::Il2CppString* value);
    // static field const value: static System.String IgnorablePeriod
    static constexpr const char* IgnorablePeriod = ".";
    // Get static field: static System.String IgnorablePeriod
    static ::Il2CppString* _get_IgnorablePeriod();
    // Set static field: static System.String IgnorablePeriod
    static void _set_IgnorablePeriod(::Il2CppString* value);
    // static field const value: static System.String IgnorableComma
    static constexpr const char* IgnorableComma = ",";
    // Get static field: static System.String IgnorableComma
    static ::Il2CppString* _get_IgnorableComma();
    // Set static field: static System.String IgnorableComma
    static void _set_IgnorableComma(::Il2CppString* value);
    // static field const value: static System.String CJKYearSuff
    static constexpr const char* CJKYearSuff = "\u5e74";
    // Get static field: static System.String CJKYearSuff
    static ::Il2CppString* _get_CJKYearSuff();
    // Set static field: static System.String CJKYearSuff
    static void _set_CJKYearSuff(::Il2CppString* value);
    // static field const value: static System.String CJKMonthSuff
    static constexpr const char* CJKMonthSuff = "\u6708";
    // Get static field: static System.String CJKMonthSuff
    static ::Il2CppString* _get_CJKMonthSuff();
    // Set static field: static System.String CJKMonthSuff
    static void _set_CJKMonthSuff(::Il2CppString* value);
    // static field const value: static System.String CJKDaySuff
    static constexpr const char* CJKDaySuff = "\u65e5";
    // Get static field: static System.String CJKDaySuff
    static ::Il2CppString* _get_CJKDaySuff();
    // Set static field: static System.String CJKDaySuff
    static void _set_CJKDaySuff(::Il2CppString* value);
    // static field const value: static System.String KoreanYearSuff
    static constexpr const char* KoreanYearSuff = "\ub144";
    // Get static field: static System.String KoreanYearSuff
    static ::Il2CppString* _get_KoreanYearSuff();
    // Set static field: static System.String KoreanYearSuff
    static void _set_KoreanYearSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanMonthSuff
    static constexpr const char* KoreanMonthSuff = "\uc6d4";
    // Get static field: static System.String KoreanMonthSuff
    static ::Il2CppString* _get_KoreanMonthSuff();
    // Set static field: static System.String KoreanMonthSuff
    static void _set_KoreanMonthSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanDaySuff
    static constexpr const char* KoreanDaySuff = "\uc77c";
    // Get static field: static System.String KoreanDaySuff
    static ::Il2CppString* _get_KoreanDaySuff();
    // Set static field: static System.String KoreanDaySuff
    static void _set_KoreanDaySuff(::Il2CppString* value);
    // static field const value: static System.String KoreanHourSuff
    static constexpr const char* KoreanHourSuff = "\uc2dc";
    // Get static field: static System.String KoreanHourSuff
    static ::Il2CppString* _get_KoreanHourSuff();
    // Set static field: static System.String KoreanHourSuff
    static void _set_KoreanHourSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanMinuteSuff
    static constexpr const char* KoreanMinuteSuff = "\ubd84";
    // Get static field: static System.String KoreanMinuteSuff
    static ::Il2CppString* _get_KoreanMinuteSuff();
    // Set static field: static System.String KoreanMinuteSuff
    static void _set_KoreanMinuteSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanSecondSuff
    static constexpr const char* KoreanSecondSuff = "\ucd08";
    // Get static field: static System.String KoreanSecondSuff
    static ::Il2CppString* _get_KoreanSecondSuff();
    // Set static field: static System.String KoreanSecondSuff
    static void _set_KoreanSecondSuff(::Il2CppString* value);
    // static field const value: static System.String CJKHourSuff
    static constexpr const char* CJKHourSuff = "\u6642";
    // Get static field: static System.String CJKHourSuff
    static ::Il2CppString* _get_CJKHourSuff();
    // Set static field: static System.String CJKHourSuff
    static void _set_CJKHourSuff(::Il2CppString* value);
    // static field const value: static System.String ChineseHourSuff
    static constexpr const char* ChineseHourSuff = "\u65f6";
    // Get static field: static System.String ChineseHourSuff
    static ::Il2CppString* _get_ChineseHourSuff();
    // Set static field: static System.String ChineseHourSuff
    static void _set_ChineseHourSuff(::Il2CppString* value);
    // static field const value: static System.String CJKMinuteSuff
    static constexpr const char* CJKMinuteSuff = "\u5206";
    // Get static field: static System.String CJKMinuteSuff
    static ::Il2CppString* _get_CJKMinuteSuff();
    // Set static field: static System.String CJKMinuteSuff
    static void _set_CJKMinuteSuff(::Il2CppString* value);
    // static field const value: static System.String CJKSecondSuff
    static constexpr const char* CJKSecondSuff = "\u79d2";
    // Get static field: static System.String CJKSecondSuff
    static ::Il2CppString* _get_CJKSecondSuff();
    // Set static field: static System.String CJKSecondSuff
    static void _set_CJKSecondSuff(::Il2CppString* value);
    // static field const value: static System.String LocalTimeMark
    static constexpr const char* LocalTimeMark = "T";
    // Get static field: static System.String LocalTimeMark
    static ::Il2CppString* _get_LocalTimeMark();
    // Set static field: static System.String LocalTimeMark
    static void _set_LocalTimeMark(::Il2CppString* value);
    // static field const value: static System.String KoreanLangName
    static constexpr const char* KoreanLangName = "ko";
    // Get static field: static System.String KoreanLangName
    static ::Il2CppString* _get_KoreanLangName();
    // Set static field: static System.String KoreanLangName
    static void _set_KoreanLangName(::Il2CppString* value);
    // static field const value: static System.String JapaneseLangName
    static constexpr const char* JapaneseLangName = "ja";
    // Get static field: static System.String JapaneseLangName
    static ::Il2CppString* _get_JapaneseLangName();
    // Set static field: static System.String JapaneseLangName
    static void _set_JapaneseLangName(::Il2CppString* value);
    // static field const value: static System.String EnglishLangName
    static constexpr const char* EnglishLangName = "en";
    // Get static field: static System.String EnglishLangName
    static ::Il2CppString* _get_EnglishLangName();
    // Set static field: static System.String EnglishLangName
    static void _set_EnglishLangName(::Il2CppString* value);
    // Get static field: static private System.Globalization.DateTimeFormatInfo s_jajpDTFI
    static System::Globalization::DateTimeFormatInfo* _get_s_jajpDTFI();
    // Set static field: static private System.Globalization.DateTimeFormatInfo s_jajpDTFI
    static void _set_s_jajpDTFI(System::Globalization::DateTimeFormatInfo* value);
    // Get static field: static private System.Globalization.DateTimeFormatInfo s_zhtwDTFI
    static System::Globalization::DateTimeFormatInfo* _get_s_zhtwDTFI();
    // Set static field: static private System.Globalization.DateTimeFormatInfo s_zhtwDTFI
    static void _set_s_zhtwDTFI(System::Globalization::DateTimeFormatInfo* value);
    // static private System.Boolean InitPreferExistingTokens()
    // Offset: 0x165DDF4
    static bool InitPreferExistingTokens();
    // private System.String get_CultureName()
    // Offset: 0x165DDFC
    ::Il2CppString* get_CultureName();
    // private System.Globalization.CultureInfo get_Culture()
    // Offset: 0x165DE28
    System::Globalization::CultureInfo* get_Culture();
    // private System.String get_LanguageName()
    // Offset: 0x165DEB8
    ::Il2CppString* get_LanguageName();
    // private System.String[] internalGetAbbreviatedDayOfWeekNames()
    // Offset: 0x165DEE4
    ::Array<::Il2CppString*>* internalGetAbbreviatedDayOfWeekNames();
    // private System.String[] internalGetDayOfWeekNames()
    // Offset: 0x165DF40
    ::Array<::Il2CppString*>* internalGetDayOfWeekNames();
    // private System.String[] internalGetAbbreviatedMonthNames()
    // Offset: 0x165DF9C
    ::Array<::Il2CppString*>* internalGetAbbreviatedMonthNames();
    // private System.String[] internalGetMonthNames()
    // Offset: 0x165DFF8
    ::Array<::Il2CppString*>* internalGetMonthNames();
    // System.Void .ctor(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal)
    // Offset: 0x165A818
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DateTimeFormatInfo* New_ctor(System::Globalization::CultureData* cultureData, System::Globalization::Calendar* cal) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::DateTimeFormatInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DateTimeFormatInfo*, creationType>(cultureData, cal)));
    }
    // private System.Void InitializeOverridableProperties(System.Globalization.CultureData cultureData, System.Int32 calendarID)
    // Offset: 0x165E35C
    void InitializeOverridableProperties(System::Globalization::CultureData* cultureData, int calendarID);
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x165E488
    void OnDeserialized(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x165EB14
    void OnSerializing(System::Runtime::Serialization::StreamingContext ctx);
    // static public System.Globalization.DateTimeFormatInfo get_InvariantInfo()
    // Offset: 0x165F070
    static System::Globalization::DateTimeFormatInfo* get_InvariantInfo();
    // static public System.Globalization.DateTimeFormatInfo get_CurrentInfo()
    // Offset: 0x165F160
    static System::Globalization::DateTimeFormatInfo* get_CurrentInfo();
    // static public System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider)
    // Offset: 0x165F24C
    static System::Globalization::DateTimeFormatInfo* GetInstance(System::IFormatProvider* provider);
    // public System.Object GetFormat(System.Type formatType)
    // Offset: 0x165F3F8
    ::Il2CppObject* GetFormat(System::Type* formatType);
    // public System.Object Clone()
    // Offset: 0x165A268
    ::Il2CppObject* Clone();
    // public System.String get_AMDesignator()
    // Offset: 0x165F494
    ::Il2CppString* get_AMDesignator();
    // public System.Globalization.Calendar get_Calendar()
    // Offset: 0x165F49C
    System::Globalization::Calendar* get_Calendar();
    // public System.Void set_Calendar(System.Globalization.Calendar value)
    // Offset: 0x165E124
    void set_Calendar(System::Globalization::Calendar* value);
    // private System.Int32[] get_OptionalCalendars()
    // Offset: 0x165F4A4
    ::Array<int>* get_OptionalCalendars();
    // System.String[] get_EraNames()
    // Offset: 0x165F4EC
    ::Array<::Il2CppString*>* get_EraNames();
    // public System.String GetEraName(System.Int32 era)
    // Offset: 0x165F548
    ::Il2CppString* GetEraName(int era);
    // System.String[] get_AbbreviatedEraNames()
    // Offset: 0x165F648
    ::Array<::Il2CppString*>* get_AbbreviatedEraNames();
    // public System.String GetAbbreviatedEraName(System.Int32 era)
    // Offset: 0x165F6A4
    ::Il2CppString* GetAbbreviatedEraName(int era);
    // System.String[] get_AbbreviatedEnglishEraNames()
    // Offset: 0x165F7BC
    ::Array<::Il2CppString*>* get_AbbreviatedEnglishEraNames();
    // public System.String get_DateSeparator()
    // Offset: 0x165F818
    ::Il2CppString* get_DateSeparator();
    // public System.String get_FullDateTimePattern()
    // Offset: 0x165F820
    ::Il2CppString* get_FullDateTimePattern();
    // public System.String get_LongDatePattern()
    // Offset: 0x165EC9C
    ::Il2CppString* get_LongDatePattern();
    // public System.Void set_LongDatePattern(System.String value)
    // Offset: 0x165E684
    void set_LongDatePattern(::Il2CppString* value);
    // public System.String get_LongTimePattern()
    // Offset: 0x165EC4C
    ::Il2CppString* get_LongTimePattern();
    // public System.Void set_LongTimePattern(System.String value)
    // Offset: 0x165E93C
    void set_LongTimePattern(::Il2CppString* value);
    // public System.String get_MonthDayPattern()
    // Offset: 0x165F938
    ::Il2CppString* get_MonthDayPattern();
    // public System.String get_PMDesignator()
    // Offset: 0x165F994
    ::Il2CppString* get_PMDesignator();
    // public System.String get_RFC1123Pattern()
    // Offset: 0x165F99C
    ::Il2CppString* get_RFC1123Pattern();
    // public System.String get_ShortDatePattern()
    // Offset: 0x165ED3C
    ::Il2CppString* get_ShortDatePattern();
    // public System.Void set_ShortDatePattern(System.String value)
    // Offset: 0x165E76C
    void set_ShortDatePattern(::Il2CppString* value);
    // public System.String get_ShortTimePattern()
    // Offset: 0x165ECEC
    ::Il2CppString* get_ShortTimePattern();
    // public System.Void set_ShortTimePattern(System.String value)
    // Offset: 0x165EA2C
    void set_ShortTimePattern(::Il2CppString* value);
    // public System.String get_SortableDateTimePattern()
    // Offset: 0x165FA80
    ::Il2CppString* get_SortableDateTimePattern();
    // System.String get_GeneralShortTimePattern()
    // Offset: 0x165FAC8
    ::Il2CppString* get_GeneralShortTimePattern();
    // System.String get_GeneralLongTimePattern()
    // Offset: 0x165FB44
    ::Il2CppString* get_GeneralLongTimePattern();
    // System.String get_DateTimeOffsetPattern()
    // Offset: 0x165FBC0
    ::Il2CppString* get_DateTimeOffsetPattern();
    // public System.String get_TimeSeparator()
    // Offset: 0x165FD50
    ::Il2CppString* get_TimeSeparator();
    // public System.String get_UniversalSortableDateTimePattern()
    // Offset: 0x165FD58
    ::Il2CppString* get_UniversalSortableDateTimePattern();
    // public System.String get_YearMonthPattern()
    // Offset: 0x165ED8C
    ::Il2CppString* get_YearMonthPattern();
    // public System.Void set_YearMonthPattern(System.String value)
    // Offset: 0x165E858
    void set_YearMonthPattern(::Il2CppString* value);
    // public System.String[] get_AbbreviatedDayNames()
    // Offset: 0x165FDFC
    ::Array<::Il2CppString*>* get_AbbreviatedDayNames();
    // public System.String[] get_DayNames()
    // Offset: 0x165FE80
    ::Array<::Il2CppString*>* get_DayNames();
    // public System.String[] get_AbbreviatedMonthNames()
    // Offset: 0x165FF04
    ::Array<::Il2CppString*>* get_AbbreviatedMonthNames();
    // public System.String[] get_MonthNames()
    // Offset: 0x165FF88
    ::Array<::Il2CppString*>* get_MonthNames();
    // System.Boolean get_HasSpacesInMonthNames()
    // Offset: 0x166000C
    bool get_HasSpacesInMonthNames();
    // System.Boolean get_HasSpacesInDayNames()
    // Offset: 0x1660160
    bool get_HasSpacesInDayNames();
    // System.String internalGetMonthName(System.Int32 month, System.Globalization.MonthNameStyles style, System.Boolean abbreviated)
    // Offset: 0x1660178
    ::Il2CppString* internalGetMonthName(int month, System::Globalization::MonthNameStyles style, bool abbreviated);
    // private System.String[] internalGetGenitiveMonthNames(System.Boolean abbreviated)
    // Offset: 0x1660354
    ::Array<::Il2CppString*>* internalGetGenitiveMonthNames(bool abbreviated);
    // System.String[] internalGetLeapYearMonthNames()
    // Offset: 0x16603F4
    ::Array<::Il2CppString*>* internalGetLeapYearMonthNames();
    // public System.String GetAbbreviatedDayName(System.DayOfWeek dayofweek)
    // Offset: 0x1660450
    ::Il2CppString* GetAbbreviatedDayName(System::DayOfWeek dayofweek);
    // static private System.String[] GetCombinedPatterns(System.String[] patterns1, System.String[] patterns2, System.String connectString)
    // Offset: 0x16605C4
    static ::Array<::Il2CppString*>* GetCombinedPatterns(::Array<::Il2CppString*>* patterns1, ::Array<::Il2CppString*>* patterns2, ::Il2CppString* connectString);
    // public System.String[] GetAllDateTimePatterns(System.Char format)
    // Offset: 0x1660754
    ::Array<::Il2CppString*>* GetAllDateTimePatterns(::Il2CppChar format);
    // public System.String GetDayName(System.DayOfWeek dayofweek)
    // Offset: 0x1660A8C
    ::Il2CppString* GetDayName(System::DayOfWeek dayofweek);
    // public System.String GetAbbreviatedMonthName(System.Int32 month)
    // Offset: 0x1660C00
    ::Il2CppString* GetAbbreviatedMonthName(int month);
    // public System.String GetMonthName(System.Int32 month)
    // Offset: 0x1660D7C
    ::Il2CppString* GetMonthName(int month);
    // static private System.String[] GetMergedPatterns(System.String[] patterns, System.String defaultPattern)
    // Offset: 0x1660EF8
    static ::Array<::Il2CppString*>* GetMergedPatterns(::Array<::Il2CppString*>* patterns, ::Il2CppString* defaultPattern);
    // private System.String[] get_AllYearMonthPatterns()
    // Offset: 0x165EFEC
    ::Array<::Il2CppString*>* get_AllYearMonthPatterns();
    // private System.String[] get_AllShortDatePatterns()
    // Offset: 0x165EF68
    ::Array<::Il2CppString*>* get_AllShortDatePatterns();
    // private System.String[] get_AllShortTimePatterns()
    // Offset: 0x165EEE4
    ::Array<::Il2CppString*>* get_AllShortTimePatterns();
    // private System.String[] get_AllLongDatePatterns()
    // Offset: 0x165EE60
    ::Array<::Il2CppString*>* get_AllLongDatePatterns();
    // private System.String[] get_AllLongTimePatterns()
    // Offset: 0x165EDDC
    ::Array<::Il2CppString*>* get_AllLongTimePatterns();
    // private System.String[] get_UnclonedYearMonthPatterns()
    // Offset: 0x165FDA0
    ::Array<::Il2CppString*>* get_UnclonedYearMonthPatterns();
    // private System.String[] get_UnclonedShortDatePatterns()
    // Offset: 0x165F9E4
    ::Array<::Il2CppString*>* get_UnclonedShortDatePatterns();
    // private System.String[] get_UnclonedLongDatePatterns()
    // Offset: 0x165F89C
    ::Array<::Il2CppString*>* get_UnclonedLongDatePatterns();
    // private System.String[] get_UnclonedShortTimePatterns()
    // Offset: 0x165FA40
    ::Array<::Il2CppString*>* get_UnclonedShortTimePatterns();
    // private System.String[] get_UnclonedLongTimePatterns()
    // Offset: 0x165F8F8
    ::Array<::Il2CppString*>* get_UnclonedLongTimePatterns();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x1661104
    bool get_IsReadOnly();
    // public System.String[] get_MonthGenitiveNames()
    // Offset: 0x166110C
    ::Array<::Il2CppString*>* get_MonthGenitiveNames();
    // System.String get_FullTimeSpanPositivePattern()
    // Offset: 0x1661194
    ::Il2CppString* get_FullTimeSpanPositivePattern();
    // System.String get_FullTimeSpanNegativePattern()
    // Offset: 0x1661254
    ::Il2CppString* get_FullTimeSpanNegativePattern();
    // System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0x16612C4
    System::Globalization::CompareInfo* get_CompareInfo();
    // static System.Void ValidateStyles(System.Globalization.DateTimeStyles style, System.String parameterName)
    // Offset: 0x166132C
    static void ValidateStyles(System::Globalization::DateTimeStyles style, ::Il2CppString* parameterName);
    // System.Globalization.DateTimeFormatFlags get_FormatFlags()
    // Offset: 0x1660024
    System::Globalization::DateTimeFormatFlags get_FormatFlags();
    // System.Boolean get_HasForceTwoDigitYears()
    // Offset: 0x16613F4
    bool get_HasForceTwoDigitYears();
    // System.Boolean get_HasYearMonthAdjustment()
    // Offset: 0x1661428
    bool get_HasYearMonthAdjustment();
    // System.Boolean YearMonthAdjustment(ref System.Int32 year, ref System.Int32 month, System.Boolean parsedMonthName)
    // Offset: 0x1661440
    bool YearMonthAdjustment(int& year, int& month, bool parsedMonthName);
    // static System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI()
    // Offset: 0x1661564
    static System::Globalization::DateTimeFormatInfo* GetJapaneseCalendarDTFI();
    // static System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI()
    // Offset: 0x1661688
    static System::Globalization::DateTimeFormatInfo* GetTaiwanCalendarDTFI();
    // private System.Void ClearTokenHashTable()
    // Offset: 0x165F4DC
    void ClearTokenHashTable();
    // System.Globalization.TokenHashValue[] CreateTokenHashTable()
    // Offset: 0x16617AC
    ::Array<System::Globalization::TokenHashValue*>* CreateTokenHashTable();
    // private System.Void AddMonthNames(System.Globalization.TokenHashValue[] temp, System.String monthPostfix)
    // Offset: 0x166289C
    void AddMonthNames(::Array<System::Globalization::TokenHashValue*>* temp, ::Il2CppString* monthPostfix);
    // static private System.Boolean TryParseHebrewNumber(ref System.__DTString str, out System.Boolean badFormat, out System.Int32 number)
    // Offset: 0x1662958
    static bool TryParseHebrewNumber(System::__DTString& str, bool& badFormat, int& number);
    // static private System.Boolean IsHebrewChar(System.Char ch)
    // Offset: 0x1662AC4
    static bool IsHebrewChar(::Il2CppChar ch);
    // System.Boolean Tokenize(System.TokenType TokenMask, out System.TokenType tokenType, out System.Int32 tokenValue, ref System.__DTString str)
    // Offset: 0x1662AD8
    bool Tokenize(System::TokenType TokenMask, System::TokenType& tokenType, int& tokenValue, System::__DTString& str);
    // private System.Void InsertAtCurrentHashNode(System.Globalization.TokenHashValue[] hashTable, System.String str, System.Char ch, System.TokenType tokenType, System.Int32 tokenValue, System.Int32 pos, System.Int32 hashcode, System.Int32 hashProbe)
    // Offset: 0x1662EEC
    void InsertAtCurrentHashNode(::Array<System::Globalization::TokenHashValue*>* hashTable, ::Il2CppString* str, ::Il2CppChar ch, System::TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
    // private System.Void InsertHash(System.Globalization.TokenHashValue[] hashTable, System.String str, System.TokenType tokenType, System.Int32 tokenValue)
    // Offset: 0x16624C8
    void InsertHash(::Array<System::Globalization::TokenHashValue*>* hashTable, ::Il2CppString* str, System::TokenType tokenType, int tokenValue);
    // static private System.Void .cctor()
    // Offset: 0x16630D8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x165E054
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DateTimeFormatInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::DateTimeFormatInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DateTimeFormatInfo*, creationType>()));
    }
  }; // System.Globalization.DateTimeFormatInfo
  #pragma pack(pop)
  static check_size<sizeof(DateTimeFormatInfo), 368 + sizeof(::Array<System::Globalization::TokenHashValue*>*)> __System_Globalization_DateTimeFormatInfoSizeCheck;
  static_assert(sizeof(DateTimeFormatInfo) == 0x178);
}
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::DateTimeFormatInfo*, "System.Globalization", "DateTimeFormatInfo");
