// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Globalization.DateTimeFormatFlags
#include "System/Globalization/DateTimeFormatFlags.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Globalization.DateTimeStyles
#include "System/Globalization/DateTimeStyles.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureData
  class CultureData;
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: TokenHashValue
  class TokenHashValue;
  // Forward declaring type: MonthNameStyles
  struct MonthNameStyles;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
  // Forward declaring type: __DTString
  struct __DTString;
  // Forward declaring type: TokenType
  struct TokenType;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Autogenerated type: System.Globalization.DateTimeFormatInfo
  class DateTimeFormatInfo : public ::CsObject, public System::ICloneable, public System::IFormatProvider {
    public:
    // Get static field: static private System.Globalization.DateTimeFormatInfo invariantInfo
    static System::Globalization::DateTimeFormatInfo* _get_invariantInfo();
    // Set static field: static private System.Globalization.DateTimeFormatInfo invariantInfo
    static void _set_invariantInfo(System::Globalization::DateTimeFormatInfo* value);
    // private System.Globalization.CultureData m_cultureData
    // Offset: 0x10
    System::Globalization::CultureData* m_cultureData;
    // System.String m_name
    // Offset: 0x18
    ::CsString* m_name;
    // private System.String m_langName
    // Offset: 0x20
    ::CsString* m_langName;
    // private System.Globalization.CompareInfo m_compareInfo
    // Offset: 0x28
    System::Globalization::CompareInfo* m_compareInfo;
    // private System.Globalization.CultureInfo m_cultureInfo
    // Offset: 0x30
    System::Globalization::CultureInfo* m_cultureInfo;
    // System.String amDesignator
    // Offset: 0x38
    ::CsString* amDesignator;
    // System.String pmDesignator
    // Offset: 0x40
    ::CsString* pmDesignator;
    // System.String dateSeparator
    // Offset: 0x48
    ::CsString* dateSeparator;
    // System.String generalShortTimePattern
    // Offset: 0x50
    ::CsString* generalShortTimePattern;
    // System.String generalLongTimePattern
    // Offset: 0x58
    ::CsString* generalLongTimePattern;
    // System.String timeSeparator
    // Offset: 0x60
    ::CsString* timeSeparator;
    // System.String monthDayPattern
    // Offset: 0x68
    ::CsString* monthDayPattern;
    // System.String dateTimeOffsetPattern
    // Offset: 0x70
    ::CsString* dateTimeOffsetPattern;
    // static field const value: static System.String rfc1123Pattern
    static constexpr const char* rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
    // Get static field: static System.String rfc1123Pattern
    static ::CsString* _get_rfc1123Pattern();
    // Set static field: static System.String rfc1123Pattern
    static void _set_rfc1123Pattern(::CsString* value);
    // static field const value: static System.String sortableDateTimePattern
    static constexpr const char* sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
    // Get static field: static System.String sortableDateTimePattern
    static ::CsString* _get_sortableDateTimePattern();
    // Set static field: static System.String sortableDateTimePattern
    static void _set_sortableDateTimePattern(::CsString* value);
    // static field const value: static System.String universalSortableDateTimePattern
    static constexpr const char* universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
    // Get static field: static System.String universalSortableDateTimePattern
    static ::CsString* _get_universalSortableDateTimePattern();
    // Set static field: static System.String universalSortableDateTimePattern
    static void _set_universalSortableDateTimePattern(::CsString* value);
    // System.Globalization.Calendar calendar
    // Offset: 0x78
    System::Globalization::Calendar* calendar;
    // System.Int32 firstDayOfWeek
    // Offset: 0x80
    int firstDayOfWeek;
    // System.Int32 calendarWeekRule
    // Offset: 0x84
    int calendarWeekRule;
    // System.String fullDateTimePattern
    // Offset: 0x88
    ::CsString* fullDateTimePattern;
    // System.String[] abbreviatedDayNames
    // Offset: 0x90
    ::Array<::CsString*>* abbreviatedDayNames;
    // System.String[] m_superShortDayNames
    // Offset: 0x98
    ::Array<::CsString*>* m_superShortDayNames;
    // System.String[] dayNames
    // Offset: 0xA0
    ::Array<::CsString*>* dayNames;
    // System.String[] abbreviatedMonthNames
    // Offset: 0xA8
    ::Array<::CsString*>* abbreviatedMonthNames;
    // System.String[] monthNames
    // Offset: 0xB0
    ::Array<::CsString*>* monthNames;
    // System.String[] genitiveMonthNames
    // Offset: 0xB8
    ::Array<::CsString*>* genitiveMonthNames;
    // System.String[] m_genitiveAbbreviatedMonthNames
    // Offset: 0xC0
    ::Array<::CsString*>* m_genitiveAbbreviatedMonthNames;
    // System.String[] leapYearMonthNames
    // Offset: 0xC8
    ::Array<::CsString*>* leapYearMonthNames;
    // System.String longDatePattern
    // Offset: 0xD0
    ::CsString* longDatePattern;
    // System.String shortDatePattern
    // Offset: 0xD8
    ::CsString* shortDatePattern;
    // System.String yearMonthPattern
    // Offset: 0xE0
    ::CsString* yearMonthPattern;
    // System.String longTimePattern
    // Offset: 0xE8
    ::CsString* longTimePattern;
    // System.String shortTimePattern
    // Offset: 0xF0
    ::CsString* shortTimePattern;
    // private System.String[] allYearMonthPatterns
    // Offset: 0xF8
    ::Array<::CsString*>* allYearMonthPatterns;
    // System.String[] allShortDatePatterns
    // Offset: 0x100
    ::Array<::CsString*>* allShortDatePatterns;
    // System.String[] allLongDatePatterns
    // Offset: 0x108
    ::Array<::CsString*>* allLongDatePatterns;
    // System.String[] allShortTimePatterns
    // Offset: 0x110
    ::Array<::CsString*>* allShortTimePatterns;
    // System.String[] allLongTimePatterns
    // Offset: 0x118
    ::Array<::CsString*>* allLongTimePatterns;
    // System.String[] m_eraNames
    // Offset: 0x120
    ::Array<::CsString*>* m_eraNames;
    // System.String[] m_abbrevEraNames
    // Offset: 0x128
    ::Array<::CsString*>* m_abbrevEraNames;
    // System.String[] m_abbrevEnglishEraNames
    // Offset: 0x130
    ::Array<::CsString*>* m_abbrevEnglishEraNames;
    // System.Int32[] optionalCalendars
    // Offset: 0x138
    ::Array<int>* optionalCalendars;
    // static field const value: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static constexpr const int DEFAULT_ALL_DATETIMES_SIZE = 132;
    // Get static field: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static int _get_DEFAULT_ALL_DATETIMES_SIZE();
    // Set static field: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static void _set_DEFAULT_ALL_DATETIMES_SIZE(int value);
    // System.Boolean m_isReadOnly
    // Offset: 0x140
    bool m_isReadOnly;
    // System.Globalization.DateTimeFormatFlags formatFlags
    // Offset: 0x144
    System::Globalization::DateTimeFormatFlags formatFlags;
    // Get static field: static System.Boolean preferExistingTokens
    static bool _get_preferExistingTokens();
    // Set static field: static System.Boolean preferExistingTokens
    static void _set_preferExistingTokens(bool value);
    // private System.Int32 CultureID
    // Offset: 0x148
    int CultureID;
    // private System.Boolean m_useUserOverride
    // Offset: 0x14C
    bool m_useUserOverride;
    // private System.Boolean bUseCalendarInfo
    // Offset: 0x14D
    bool bUseCalendarInfo;
    // private System.Int32 nDataItem
    // Offset: 0x150
    int nDataItem;
    // System.Boolean m_isDefaultCalendar
    // Offset: 0x154
    bool m_isDefaultCalendar;
    // Get static field: static private System.Collections.Hashtable s_calendarNativeNames
    static System::Collections::Hashtable* _get_s_calendarNativeNames();
    // Set static field: static private System.Collections.Hashtable s_calendarNativeNames
    static void _set_s_calendarNativeNames(System::Collections::Hashtable* value);
    // System.String[] m_dateWords
    // Offset: 0x158
    ::Array<::CsString*>* m_dateWords;
    // private System.String m_fullTimeSpanPositivePattern
    // Offset: 0x160
    ::CsString* m_fullTimeSpanPositivePattern;
    // private System.String m_fullTimeSpanNegativePattern
    // Offset: 0x168
    ::CsString* m_fullTimeSpanNegativePattern;
    // static field const value: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static constexpr const int InvalidDateTimeStyles = -256;
    // Get static field: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static System::Globalization::DateTimeStyles _get_InvalidDateTimeStyles();
    // Set static field: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static void _set_InvalidDateTimeStyles(System::Globalization::DateTimeStyles value);
    // private System.Globalization.TokenHashValue[] m_dtfiTokenHash
    // Offset: 0x170
    ::Array<System::Globalization::TokenHashValue*>* m_dtfiTokenHash;
    // static field const value: static private System.Int32 TOKEN_HASH_SIZE
    static constexpr const int TOKEN_HASH_SIZE = 199;
    // Get static field: static private System.Int32 TOKEN_HASH_SIZE
    static int _get_TOKEN_HASH_SIZE();
    // Set static field: static private System.Int32 TOKEN_HASH_SIZE
    static void _set_TOKEN_HASH_SIZE(int value);
    // static field const value: static private System.Int32 SECOND_PRIME
    static constexpr const int SECOND_PRIME = 197;
    // Get static field: static private System.Int32 SECOND_PRIME
    static int _get_SECOND_PRIME();
    // Set static field: static private System.Int32 SECOND_PRIME
    static void _set_SECOND_PRIME(int value);
    // static field const value: static private System.String dateSeparatorOrTimeZoneOffset
    static constexpr const char* dateSeparatorOrTimeZoneOffset = "-";
    // Get static field: static private System.String dateSeparatorOrTimeZoneOffset
    static ::CsString* _get_dateSeparatorOrTimeZoneOffset();
    // Set static field: static private System.String dateSeparatorOrTimeZoneOffset
    static void _set_dateSeparatorOrTimeZoneOffset(::CsString* value);
    // static field const value: static private System.String invariantDateSeparator
    static constexpr const char* invariantDateSeparator = "/";
    // Get static field: static private System.String invariantDateSeparator
    static ::CsString* _get_invariantDateSeparator();
    // Set static field: static private System.String invariantDateSeparator
    static void _set_invariantDateSeparator(::CsString* value);
    // static field const value: static private System.String invariantTimeSeparator
    static constexpr const char* invariantTimeSeparator = ":";
    // Get static field: static private System.String invariantTimeSeparator
    static ::CsString* _get_invariantTimeSeparator();
    // Set static field: static private System.String invariantTimeSeparator
    static void _set_invariantTimeSeparator(::CsString* value);
    // static field const value: static System.String IgnorablePeriod
    static constexpr const char* IgnorablePeriod = ".";
    // Get static field: static System.String IgnorablePeriod
    static ::CsString* _get_IgnorablePeriod();
    // Set static field: static System.String IgnorablePeriod
    static void _set_IgnorablePeriod(::CsString* value);
    // static field const value: static System.String IgnorableComma
    static constexpr const char* IgnorableComma = ",";
    // Get static field: static System.String IgnorableComma
    static ::CsString* _get_IgnorableComma();
    // Set static field: static System.String IgnorableComma
    static void _set_IgnorableComma(::CsString* value);
    // static field const value: static System.String CJKYearSuff
    static constexpr const char* CJKYearSuff = "\u5e74";
    // Get static field: static System.String CJKYearSuff
    static ::CsString* _get_CJKYearSuff();
    // Set static field: static System.String CJKYearSuff
    static void _set_CJKYearSuff(::CsString* value);
    // static field const value: static System.String CJKMonthSuff
    static constexpr const char* CJKMonthSuff = "\u6708";
    // Get static field: static System.String CJKMonthSuff
    static ::CsString* _get_CJKMonthSuff();
    // Set static field: static System.String CJKMonthSuff
    static void _set_CJKMonthSuff(::CsString* value);
    // static field const value: static System.String CJKDaySuff
    static constexpr const char* CJKDaySuff = "\u65e5";
    // Get static field: static System.String CJKDaySuff
    static ::CsString* _get_CJKDaySuff();
    // Set static field: static System.String CJKDaySuff
    static void _set_CJKDaySuff(::CsString* value);
    // static field const value: static System.String KoreanYearSuff
    static constexpr const char* KoreanYearSuff = "\ub144";
    // Get static field: static System.String KoreanYearSuff
    static ::CsString* _get_KoreanYearSuff();
    // Set static field: static System.String KoreanYearSuff
    static void _set_KoreanYearSuff(::CsString* value);
    // static field const value: static System.String KoreanMonthSuff
    static constexpr const char* KoreanMonthSuff = "\uc6d4";
    // Get static field: static System.String KoreanMonthSuff
    static ::CsString* _get_KoreanMonthSuff();
    // Set static field: static System.String KoreanMonthSuff
    static void _set_KoreanMonthSuff(::CsString* value);
    // static field const value: static System.String KoreanDaySuff
    static constexpr const char* KoreanDaySuff = "\uc77c";
    // Get static field: static System.String KoreanDaySuff
    static ::CsString* _get_KoreanDaySuff();
    // Set static field: static System.String KoreanDaySuff
    static void _set_KoreanDaySuff(::CsString* value);
    // static field const value: static System.String KoreanHourSuff
    static constexpr const char* KoreanHourSuff = "\uc2dc";
    // Get static field: static System.String KoreanHourSuff
    static ::CsString* _get_KoreanHourSuff();
    // Set static field: static System.String KoreanHourSuff
    static void _set_KoreanHourSuff(::CsString* value);
    // static field const value: static System.String KoreanMinuteSuff
    static constexpr const char* KoreanMinuteSuff = "\ubd84";
    // Get static field: static System.String KoreanMinuteSuff
    static ::CsString* _get_KoreanMinuteSuff();
    // Set static field: static System.String KoreanMinuteSuff
    static void _set_KoreanMinuteSuff(::CsString* value);
    // static field const value: static System.String KoreanSecondSuff
    static constexpr const char* KoreanSecondSuff = "\ucd08";
    // Get static field: static System.String KoreanSecondSuff
    static ::CsString* _get_KoreanSecondSuff();
    // Set static field: static System.String KoreanSecondSuff
    static void _set_KoreanSecondSuff(::CsString* value);
    // static field const value: static System.String CJKHourSuff
    static constexpr const char* CJKHourSuff = "\u6642";
    // Get static field: static System.String CJKHourSuff
    static ::CsString* _get_CJKHourSuff();
    // Set static field: static System.String CJKHourSuff
    static void _set_CJKHourSuff(::CsString* value);
    // static field const value: static System.String ChineseHourSuff
    static constexpr const char* ChineseHourSuff = "\u65f6";
    // Get static field: static System.String ChineseHourSuff
    static ::CsString* _get_ChineseHourSuff();
    // Set static field: static System.String ChineseHourSuff
    static void _set_ChineseHourSuff(::CsString* value);
    // static field const value: static System.String CJKMinuteSuff
    static constexpr const char* CJKMinuteSuff = "\u5206";
    // Get static field: static System.String CJKMinuteSuff
    static ::CsString* _get_CJKMinuteSuff();
    // Set static field: static System.String CJKMinuteSuff
    static void _set_CJKMinuteSuff(::CsString* value);
    // static field const value: static System.String CJKSecondSuff
    static constexpr const char* CJKSecondSuff = "\u79d2";
    // Get static field: static System.String CJKSecondSuff
    static ::CsString* _get_CJKSecondSuff();
    // Set static field: static System.String CJKSecondSuff
    static void _set_CJKSecondSuff(::CsString* value);
    // static field const value: static System.String LocalTimeMark
    static constexpr const char* LocalTimeMark = "T";
    // Get static field: static System.String LocalTimeMark
    static ::CsString* _get_LocalTimeMark();
    // Set static field: static System.String LocalTimeMark
    static void _set_LocalTimeMark(::CsString* value);
    // static field const value: static System.String KoreanLangName
    static constexpr const char* KoreanLangName = "ko";
    // Get static field: static System.String KoreanLangName
    static ::CsString* _get_KoreanLangName();
    // Set static field: static System.String KoreanLangName
    static void _set_KoreanLangName(::CsString* value);
    // static field const value: static System.String JapaneseLangName
    static constexpr const char* JapaneseLangName = "ja";
    // Get static field: static System.String JapaneseLangName
    static ::CsString* _get_JapaneseLangName();
    // Set static field: static System.String JapaneseLangName
    static void _set_JapaneseLangName(::CsString* value);
    // static field const value: static System.String EnglishLangName
    static constexpr const char* EnglishLangName = "en";
    // Get static field: static System.String EnglishLangName
    static ::CsString* _get_EnglishLangName();
    // Set static field: static System.String EnglishLangName
    static void _set_EnglishLangName(::CsString* value);
    // Get static field: static private System.Globalization.DateTimeFormatInfo s_jajpDTFI
    static System::Globalization::DateTimeFormatInfo* _get_s_jajpDTFI();
    // Set static field: static private System.Globalization.DateTimeFormatInfo s_jajpDTFI
    static void _set_s_jajpDTFI(System::Globalization::DateTimeFormatInfo* value);
    // Get static field: static private System.Globalization.DateTimeFormatInfo s_zhtwDTFI
    static System::Globalization::DateTimeFormatInfo* _get_s_zhtwDTFI();
    // Set static field: static private System.Globalization.DateTimeFormatInfo s_zhtwDTFI
    static void _set_s_zhtwDTFI(System::Globalization::DateTimeFormatInfo* value);
    // static private System.Boolean InitPreferExistingTokens()
    // Offset: 0x12B3A7C
    static bool InitPreferExistingTokens();
    // private System.String get_CultureName()
    // Offset: 0x12B3A84
    ::CsString* get_CultureName();
    // private System.Globalization.CultureInfo get_Culture()
    // Offset: 0x12B3ACC
    System::Globalization::CultureInfo* get_Culture();
    // private System.String get_LanguageName()
    // Offset: 0x12B3B64
    ::CsString* get_LanguageName();
    // private System.String[] internalGetAbbreviatedDayOfWeekNames()
    // Offset: 0x12B3BAC
    ::Array<::CsString*>* internalGetAbbreviatedDayOfWeekNames();
    // private System.String[] internalGetDayOfWeekNames()
    // Offset: 0x12B3C1C
    ::Array<::CsString*>* internalGetDayOfWeekNames();
    // private System.String[] internalGetAbbreviatedMonthNames()
    // Offset: 0x12B3C8C
    ::Array<::CsString*>* internalGetAbbreviatedMonthNames();
    // private System.String[] internalGetMonthNames()
    // Offset: 0x12B3CFC
    ::Array<::CsString*>* internalGetMonthNames();
    // System.Void .ctor(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal)
    // Offset: 0x12AFC80
    static DateTimeFormatInfo* New_ctor(System::Globalization::CultureData* cultureData, System::Globalization::Calendar* cal);
    // private System.Void InitializeOverridableProperties(System.Globalization.CultureData cultureData, System.Int32 calendarID)
    // Offset: 0x12B42C8
    void InitializeOverridableProperties(System::Globalization::CultureData* cultureData, int calendarID);
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x12B4448
    void OnDeserialized(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x12B4C80
    void OnSerializing(System::Runtime::Serialization::StreamingContext ctx);
    // static public System.Globalization.DateTimeFormatInfo get_InvariantInfo()
    // Offset: 0x12B5238
    static System::Globalization::DateTimeFormatInfo* get_InvariantInfo();
    // static public System.Globalization.DateTimeFormatInfo get_CurrentInfo()
    // Offset: 0x12B5330
    static System::Globalization::DateTimeFormatInfo* get_CurrentInfo();
    // static public System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider)
    // Offset: 0x12B541C
    static System::Globalization::DateTimeFormatInfo* GetInstance(System::IFormatProvider* provider);
    // public System.String get_AMDesignator()
    // Offset: 0x12B5664
    ::CsString* get_AMDesignator();
    // public System.Globalization.Calendar get_Calendar()
    // Offset: 0x12B566C
    System::Globalization::Calendar* get_Calendar();
    // public System.Void set_Calendar(System.Globalization.Calendar value)
    // Offset: 0x12B3EF0
    void set_Calendar(System::Globalization::Calendar* value);
    // private System.Int32[] get_OptionalCalendars()
    // Offset: 0x12B5674
    ::Array<int>* get_OptionalCalendars();
    // System.String[] get_EraNames()
    // Offset: 0x12B56F8
    ::Array<::CsString*>* get_EraNames();
    // public System.String GetEraName(System.Int32 era)
    // Offset: 0x12B5764
    ::CsString* GetEraName(int era);
    // System.String[] get_AbbreviatedEraNames()
    // Offset: 0x12B5874
    ::Array<::CsString*>* get_AbbreviatedEraNames();
    // public System.String GetAbbreviatedEraName(System.Int32 era)
    // Offset: 0x12B58E0
    ::CsString* GetAbbreviatedEraName(int era);
    // System.String[] get_AbbreviatedEnglishEraNames()
    // Offset: 0x12B5A08
    ::Array<::CsString*>* get_AbbreviatedEnglishEraNames();
    // public System.String get_DateSeparator()
    // Offset: 0x12B5A74
    ::CsString* get_DateSeparator();
    // public System.String get_FullDateTimePattern()
    // Offset: 0x12B5A7C
    ::CsString* get_FullDateTimePattern();
    // public System.String get_LongDatePattern()
    // Offset: 0x12B4E24
    ::CsString* get_LongDatePattern();
    // public System.Void set_LongDatePattern(System.String value)
    // Offset: 0x12B4684
    void set_LongDatePattern(::CsString* value);
    // public System.String get_LongTimePattern()
    // Offset: 0x12B4DC4
    ::CsString* get_LongTimePattern();
    // public System.Void set_LongTimePattern(System.String value)
    // Offset: 0x12B4A10
    void set_LongTimePattern(::CsString* value);
    // public System.String get_MonthDayPattern()
    // Offset: 0x12B5BD0
    ::CsString* get_MonthDayPattern();
    // public System.String get_PMDesignator()
    // Offset: 0x12B5C40
    ::CsString* get_PMDesignator();
    // public System.String get_RFC1123Pattern()
    // Offset: 0x12B5C48
    ::CsString* get_RFC1123Pattern();
    // public System.String get_ShortDatePattern()
    // Offset: 0x12B4EE4
    ::CsString* get_ShortDatePattern();
    // public System.Void set_ShortDatePattern(System.String value)
    // Offset: 0x12B47AC
    void set_ShortDatePattern(::CsString* value);
    // public System.String get_ShortTimePattern()
    // Offset: 0x12B4E84
    ::CsString* get_ShortTimePattern();
    // public System.Void set_ShortTimePattern(System.String value)
    // Offset: 0x12B4B58
    void set_ShortTimePattern(::CsString* value);
    // public System.String get_SortableDateTimePattern()
    // Offset: 0x12B5D4C
    ::CsString* get_SortableDateTimePattern();
    // System.String get_GeneralShortTimePattern()
    // Offset: 0x12B5D94
    ::CsString* get_GeneralShortTimePattern();
    // System.String get_GeneralLongTimePattern()
    // Offset: 0x12B5E2C
    ::CsString* get_GeneralLongTimePattern();
    // System.String get_DateTimeOffsetPattern()
    // Offset: 0x12B5EC4
    ::CsString* get_DateTimeOffsetPattern();
    // public System.String get_TimeSeparator()
    // Offset: 0x12B6074
    ::CsString* get_TimeSeparator();
    // public System.String get_UniversalSortableDateTimePattern()
    // Offset: 0x12B607C
    ::CsString* get_UniversalSortableDateTimePattern();
    // public System.String get_YearMonthPattern()
    // Offset: 0x12B4F44
    ::CsString* get_YearMonthPattern();
    // public System.Void set_YearMonthPattern(System.String value)
    // Offset: 0x12B48F4
    void set_YearMonthPattern(::CsString* value);
    // public System.String[] get_AbbreviatedDayNames()
    // Offset: 0x12B6134
    ::Array<::CsString*>* get_AbbreviatedDayNames();
    // public System.String[] get_DayNames()
    // Offset: 0x12B61B8
    ::Array<::CsString*>* get_DayNames();
    // public System.String[] get_AbbreviatedMonthNames()
    // Offset: 0x12B623C
    ::Array<::CsString*>* get_AbbreviatedMonthNames();
    // public System.String[] get_MonthNames()
    // Offset: 0x12B62C0
    ::Array<::CsString*>* get_MonthNames();
    // System.Boolean get_HasSpacesInMonthNames()
    // Offset: 0x12B6344
    bool get_HasSpacesInMonthNames();
    // System.Boolean get_HasSpacesInDayNames()
    // Offset: 0x12B64C0
    bool get_HasSpacesInDayNames();
    // System.String internalGetMonthName(System.Int32 month, System.Globalization.MonthNameStyles style, System.Boolean abbreviated)
    // Offset: 0x12B64D8
    ::CsString* internalGetMonthName(int month, System::Globalization::MonthNameStyles style, bool abbreviated);
    // private System.String[] internalGetGenitiveMonthNames(System.Boolean abbreviated)
    // Offset: 0x12B66B8
    ::Array<::CsString*>* internalGetGenitiveMonthNames(bool abbreviated);
    // System.String[] internalGetLeapYearMonthNames()
    // Offset: 0x12B6768
    ::Array<::CsString*>* internalGetLeapYearMonthNames();
    // public System.String GetAbbreviatedDayName(System.DayOfWeek dayofweek)
    // Offset: 0x12B67D8
    ::CsString* GetAbbreviatedDayName(System::DayOfWeek dayofweek);
    // static private System.String[] GetCombinedPatterns(System.String[] patterns1, System.String[] patterns2, System.String connectString)
    // Offset: 0x12B6950
    static ::Array<::CsString*>* GetCombinedPatterns(::Array<::CsString*>* patterns1, ::Array<::CsString*>* patterns2, ::CsString* connectString);
    // public System.String[] GetAllDateTimePatterns(System.Char format)
    // Offset: 0x12B6AE8
    ::Array<::CsString*>* GetAllDateTimePatterns(::Il2CppChar format);
    // public System.String GetDayName(System.DayOfWeek dayofweek)
    // Offset: 0x12B6E48
    ::CsString* GetDayName(System::DayOfWeek dayofweek);
    // public System.String GetAbbreviatedMonthName(System.Int32 month)
    // Offset: 0x12B6FC0
    ::CsString* GetAbbreviatedMonthName(int month);
    // public System.String GetMonthName(System.Int32 month)
    // Offset: 0x12B7140
    ::CsString* GetMonthName(int month);
    // static private System.String[] GetMergedPatterns(System.String[] patterns, System.String defaultPattern)
    // Offset: 0x12B72C0
    static ::Array<::CsString*>* GetMergedPatterns(::Array<::CsString*>* patterns, ::CsString* defaultPattern);
    // private System.String[] get_AllYearMonthPatterns()
    // Offset: 0x12B51B4
    ::Array<::CsString*>* get_AllYearMonthPatterns();
    // private System.String[] get_AllShortDatePatterns()
    // Offset: 0x12B5130
    ::Array<::CsString*>* get_AllShortDatePatterns();
    // private System.String[] get_AllShortTimePatterns()
    // Offset: 0x12B50AC
    ::Array<::CsString*>* get_AllShortTimePatterns();
    // private System.String[] get_AllLongDatePatterns()
    // Offset: 0x12B5028
    ::Array<::CsString*>* get_AllLongDatePatterns();
    // private System.String[] get_AllLongTimePatterns()
    // Offset: 0x12B4FA4
    ::Array<::CsString*>* get_AllLongTimePatterns();
    // private System.String[] get_UnclonedYearMonthPatterns()
    // Offset: 0x12B60C4
    ::Array<::CsString*>* get_UnclonedYearMonthPatterns();
    // private System.String[] get_UnclonedShortDatePatterns()
    // Offset: 0x12B5C90
    ::Array<::CsString*>* get_UnclonedShortDatePatterns();
    // private System.String[] get_UnclonedLongDatePatterns()
    // Offset: 0x12B5B14
    ::Array<::CsString*>* get_UnclonedLongDatePatterns();
    // private System.String[] get_UnclonedShortTimePatterns()
    // Offset: 0x12B5CFC
    ::Array<::CsString*>* get_UnclonedShortTimePatterns();
    // private System.String[] get_UnclonedLongTimePatterns()
    // Offset: 0x12B5B80
    ::Array<::CsString*>* get_UnclonedLongTimePatterns();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x12B74E0
    bool get_IsReadOnly();
    // System.String get_FullTimeSpanPositivePattern()
    // Offset: 0x12B74E8
    ::CsString* get_FullTimeSpanPositivePattern();
    // System.String get_FullTimeSpanNegativePattern()
    // Offset: 0x12B75BC
    ::CsString* get_FullTimeSpanNegativePattern();
    // System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0x12B7640
    System::Globalization::CompareInfo* get_CompareInfo();
    // System.Globalization.DateTimeFormatFlags get_FormatFlags()
    // Offset: 0x12B635C
    System::Globalization::DateTimeFormatFlags get_FormatFlags();
    // System.Boolean get_HasForceTwoDigitYears()
    // Offset: 0x12B7800
    bool get_HasForceTwoDigitYears();
    // System.Boolean YearMonthAdjustment(System.Int32 year, System.Int32 month, System.Boolean parsedMonthName)
    // Offset: 0x12B7834
    bool YearMonthAdjustment(int& year, int& month, bool parsedMonthName);
    // static System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI()
    // Offset: 0x12B7958
    static System::Globalization::DateTimeFormatInfo* GetJapaneseCalendarDTFI();
    // static System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI()
    // Offset: 0x12B7B5C
    static System::Globalization::DateTimeFormatInfo* GetTaiwanCalendarDTFI();
    // private System.Void ClearTokenHashTable()
    // Offset: 0x12B56C4
    void ClearTokenHashTable();
    // System.Globalization.TokenHashValue[] CreateTokenHashTable()
    // Offset: 0x12B7C88
    ::Array<System::Globalization::TokenHashValue*>* CreateTokenHashTable();
    // private System.Void AddMonthNames(System.Globalization.TokenHashValue[] temp, System.String monthPostfix)
    // Offset: 0x12B9098
    void AddMonthNames(::Array<System::Globalization::TokenHashValue*>* temp, ::CsString* monthPostfix);
    // static private System.Boolean TryParseHebrewNumber(System.__DTString str, System.Boolean badFormat, System.Int32 number)
    // Offset: 0x12B9154
    static bool TryParseHebrewNumber(System::__DTString& str, bool& badFormat, int& number);
    // static private System.Boolean IsHebrewChar(System.Char ch)
    // Offset: 0x12B95A8
    static bool IsHebrewChar(::Il2CppChar ch);
    // System.Boolean Tokenize(System.TokenType TokenMask, System.TokenType tokenType, System.Int32 tokenValue, System.__DTString str)
    // Offset: 0x12B95BC
    bool Tokenize(System::TokenType TokenMask, System::TokenType& tokenType, int& tokenValue, System::__DTString& str);
    // private System.Void InsertAtCurrentHashNode(System.Globalization.TokenHashValue[] hashTable, System.String str, System.Char ch, System.TokenType tokenType, System.Int32 tokenValue, System.Int32 pos, System.Int32 hashcode, System.Int32 hashProbe)
    // Offset: 0x12B99D0
    void InsertAtCurrentHashNode(::Array<System::Globalization::TokenHashValue*>* hashTable, ::CsString* str, ::Il2CppChar ch, System::TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
    // private System.Void InsertHash(System.Globalization.TokenHashValue[] hashTable, System.String str, System.TokenType tokenType, System.Int32 tokenValue)
    // Offset: 0x12B8954
    void InsertHash(::Array<System::Globalization::TokenHashValue*>* hashTable, ::CsString* str, System::TokenType tokenType, int tokenValue);
    // static private System.Void .cctor()
    // Offset: 0x12B9BD4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x12B3D6C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static DateTimeFormatInfo* New_ctor();
    // public System.Object GetFormat(System.Type formatType)
    // Offset: 0x12B55C8
    // Implemented from: System.IFormatProvider
    // Base method: System.Object IFormatProvider::GetFormat(System.Type formatType)
    ::CsObject* GetFormat(System::Type* formatType);
    // public System.Object Clone()
    // Offset: 0x12AF364
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::CsObject* Clone();
  }; // System.Globalization.DateTimeFormatInfo
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::DateTimeFormatInfo*, "System.Globalization", "DateTimeFormatInfo");
#pragma pack(pop)
