// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Globalization.DateTimeFormatFlags
#include "System/Globalization/DateTimeFormatFlags.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Globalization.DateTimeStyles
#include "System/Globalization/DateTimeStyles.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
#include "extern/beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureData
  class CultureData;
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: TokenHashValue
  class TokenHashValue;
  // Forward declaring type: MonthNameStyles
  struct MonthNameStyles;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
  // Forward declaring type: __DTString
  struct __DTString;
  // Forward declaring type: TokenType
  struct TokenType;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Forward declaring type: DateTimeFormatInfo
  class DateTimeFormatInfo;
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(System::Globalization::DateTimeFormatInfo);
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::DateTimeFormatInfo*, "System.Globalization", "DateTimeFormatInfo");
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.DateTimeFormatInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: E60FAC
  class DateTimeFormatInfo : public ::Il2CppObject/*, public System::ICloneable, public System::IFormatProvider*/ {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    protected:
    #endif
    // private System.Globalization.CultureData m_cultureData
    // Size: 0x8
    // Offset: 0x10
    System::Globalization::CultureData* m_cultureData;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureData*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65980
    // System.String m_name
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_langName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* m_langName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Globalization.CompareInfo m_compareInfo
    // Size: 0x8
    // Offset: 0x28
    System::Globalization::CompareInfo* m_compareInfo;
    // Field size check
    static_assert(sizeof(System::Globalization::CompareInfo*) == 0x8);
    // private System.Globalization.CultureInfo m_cultureInfo
    // Size: 0x8
    // Offset: 0x30
    System::Globalization::CultureInfo* m_cultureInfo;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureInfo*) == 0x8);
    // System.String amDesignator
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* amDesignator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String pmDesignator
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* pmDesignator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE659B8
    // System.String dateSeparator
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* dateSeparator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE659F0
    // System.String generalShortTimePattern
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* generalShortTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65A28
    // System.String generalLongTimePattern
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* generalLongTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65A60
    // System.String timeSeparator
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppString* timeSeparator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String monthDayPattern
    // Size: 0x8
    // Offset: 0x68
    ::Il2CppString* monthDayPattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65A98
    // System.String dateTimeOffsetPattern
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppString* dateTimeOffsetPattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Globalization.Calendar calendar
    // Size: 0x8
    // Offset: 0x78
    System::Globalization::Calendar* calendar;
    // Field size check
    static_assert(sizeof(System::Globalization::Calendar*) == 0x8);
    // System.Int32 firstDayOfWeek
    // Size: 0x4
    // Offset: 0x80
    int firstDayOfWeek;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 calendarWeekRule
    // Size: 0x4
    // Offset: 0x84
    int calendarWeekRule;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xE65AD0
    // System.String fullDateTimePattern
    // Size: 0x8
    // Offset: 0x88
    ::Il2CppString* fullDateTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String[] abbreviatedDayNames
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::Il2CppString*> abbreviatedDayNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65B08
    // System.String[] m_superShortDayNames
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::Il2CppString*> m_superShortDayNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] dayNames
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::Il2CppString*> dayNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] abbreviatedMonthNames
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::Il2CppString*> abbreviatedMonthNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] monthNames
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::Il2CppString*> monthNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65B40
    // System.String[] genitiveMonthNames
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::Il2CppString*> genitiveMonthNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65B78
    // System.String[] m_genitiveAbbreviatedMonthNames
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::Il2CppString*> m_genitiveAbbreviatedMonthNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65BB0
    // System.String[] leapYearMonthNames
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::Il2CppString*> leapYearMonthNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String longDatePattern
    // Size: 0x8
    // Offset: 0xD0
    ::Il2CppString* longDatePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String shortDatePattern
    // Size: 0x8
    // Offset: 0xD8
    ::Il2CppString* shortDatePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String yearMonthPattern
    // Size: 0x8
    // Offset: 0xE0
    ::Il2CppString* yearMonthPattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String longTimePattern
    // Size: 0x8
    // Offset: 0xE8
    ::Il2CppString* longTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String shortTimePattern
    // Size: 0x8
    // Offset: 0xF0
    ::Il2CppString* shortTimePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xE65BE8
    // private System.String[] allYearMonthPatterns
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::Il2CppString*> allYearMonthPatterns;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] allShortDatePatterns
    // Size: 0x8
    // Offset: 0x100
    ::ArrayW<::Il2CppString*> allShortDatePatterns;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] allLongDatePatterns
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::Il2CppString*> allLongDatePatterns;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] allShortTimePatterns
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::Il2CppString*> allShortTimePatterns;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] allLongTimePatterns
    // Size: 0x8
    // Offset: 0x118
    ::ArrayW<::Il2CppString*> allLongTimePatterns;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] m_eraNames
    // Size: 0x8
    // Offset: 0x120
    ::ArrayW<::Il2CppString*> m_eraNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] m_abbrevEraNames
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::Il2CppString*> m_abbrevEraNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.String[] m_abbrevEnglishEraNames
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<::Il2CppString*> m_abbrevEnglishEraNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // System.Int32[] optionalCalendars
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<int> optionalCalendars;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // System.Boolean m_isReadOnly
    // Size: 0x1
    // Offset: 0x140
    bool m_isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isReadOnly and: formatFlags
    char __padding39[0x3] = {};
    // [OptionalFieldAttribute] Offset: 0xE65C20
    // System.Globalization.DateTimeFormatFlags formatFlags
    // Size: 0x4
    // Offset: 0x144
    System::Globalization::DateTimeFormatFlags formatFlags;
    // Field size check
    static_assert(sizeof(System::Globalization::DateTimeFormatFlags) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xE65C58
    // private System.Int32 CultureID
    // Size: 0x4
    // Offset: 0x148
    int CultureID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xE65C90
    // private System.Boolean m_useUserOverride
    // Size: 0x1
    // Offset: 0x14C
    bool m_useUserOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0xE65CC8
    // private System.Boolean bUseCalendarInfo
    // Size: 0x1
    // Offset: 0x14D
    bool bUseCalendarInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bUseCalendarInfo and: nDataItem
    char __padding43[0x2] = {};
    // [OptionalFieldAttribute] Offset: 0xE65D00
    // private System.Int32 nDataItem
    // Size: 0x4
    // Offset: 0x150
    int nDataItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xE65D38
    // System.Boolean m_isDefaultCalendar
    // Size: 0x1
    // Offset: 0x154
    bool m_isDefaultCalendar;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isDefaultCalendar and: m_dateWords
    char __padding45[0x3] = {};
    // [OptionalFieldAttribute] Offset: 0xE65DA8
    // System.String[] m_dateWords
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::Il2CppString*> m_dateWords;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppString*>) == 0x8);
    // private System.String m_fullTimeSpanPositivePattern
    // Size: 0x8
    // Offset: 0x160
    ::Il2CppString* m_fullTimeSpanPositivePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_fullTimeSpanNegativePattern
    // Size: 0x8
    // Offset: 0x168
    ::Il2CppString* m_fullTimeSpanNegativePattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Globalization.TokenHashValue[] m_dtfiTokenHash
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<System::Globalization::TokenHashValue*> m_dtfiTokenHash;
    // Field size check
    static_assert(sizeof(::ArrayW<System::Globalization::TokenHashValue*>) == 0x8);
    public:
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormatProvider
    operator System::IFormatProvider() noexcept {
      return *reinterpret_cast<System::IFormatProvider*>(this);
    }
    // Get static field: static private System.Globalization.DateTimeFormatInfo invariantInfo
    static System::Globalization::DateTimeFormatInfo* _get_invariantInfo();
    // Set static field: static private System.Globalization.DateTimeFormatInfo invariantInfo
    static void _set_invariantInfo(System::Globalization::DateTimeFormatInfo* value);
    // static field const value: static System.String rfc1123Pattern
    static constexpr const char* rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
    // Get static field: static System.String rfc1123Pattern
    static ::Il2CppString* _get_rfc1123Pattern();
    // Set static field: static System.String rfc1123Pattern
    static void _set_rfc1123Pattern(::Il2CppString* value);
    // static field const value: static System.String sortableDateTimePattern
    static constexpr const char* sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
    // Get static field: static System.String sortableDateTimePattern
    static ::Il2CppString* _get_sortableDateTimePattern();
    // Set static field: static System.String sortableDateTimePattern
    static void _set_sortableDateTimePattern(::Il2CppString* value);
    // static field const value: static System.String universalSortableDateTimePattern
    static constexpr const char* universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
    // Get static field: static System.String universalSortableDateTimePattern
    static ::Il2CppString* _get_universalSortableDateTimePattern();
    // Set static field: static System.String universalSortableDateTimePattern
    static void _set_universalSortableDateTimePattern(::Il2CppString* value);
    // static field const value: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static constexpr const int DEFAULT_ALL_DATETIMES_SIZE = 132;
    // Get static field: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static int _get_DEFAULT_ALL_DATETIMES_SIZE();
    // Set static field: static private System.Int32 DEFAULT_ALL_DATETIMES_SIZE
    static void _set_DEFAULT_ALL_DATETIMES_SIZE(int value);
    // Get static field: static System.Boolean preferExistingTokens
    static bool _get_preferExistingTokens();
    // Set static field: static System.Boolean preferExistingTokens
    static void _set_preferExistingTokens(bool value);
    // [OptionalFieldAttribute] Offset: 0xE65D70
    // Get static field: static private System.Collections.Hashtable s_calendarNativeNames
    static System::Collections::Hashtable* _get_s_calendarNativeNames();
    // Set static field: static private System.Collections.Hashtable s_calendarNativeNames
    static void _set_s_calendarNativeNames(System::Collections::Hashtable* value);
    // static field const value: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static constexpr const int InvalidDateTimeStyles = -256;
    // Get static field: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static System::Globalization::DateTimeStyles _get_InvalidDateTimeStyles();
    // Set static field: static System.Globalization.DateTimeStyles InvalidDateTimeStyles
    static void _set_InvalidDateTimeStyles(System::Globalization::DateTimeStyles value);
    // static field const value: static private System.Int32 TOKEN_HASH_SIZE
    static constexpr const int TOKEN_HASH_SIZE = 199;
    // Get static field: static private System.Int32 TOKEN_HASH_SIZE
    static int _get_TOKEN_HASH_SIZE();
    // Set static field: static private System.Int32 TOKEN_HASH_SIZE
    static void _set_TOKEN_HASH_SIZE(int value);
    // static field const value: static private System.Int32 SECOND_PRIME
    static constexpr const int SECOND_PRIME = 197;
    // Get static field: static private System.Int32 SECOND_PRIME
    static int _get_SECOND_PRIME();
    // Set static field: static private System.Int32 SECOND_PRIME
    static void _set_SECOND_PRIME(int value);
    // static field const value: static private System.String dateSeparatorOrTimeZoneOffset
    static constexpr const char* dateSeparatorOrTimeZoneOffset = "-";
    // Get static field: static private System.String dateSeparatorOrTimeZoneOffset
    static ::Il2CppString* _get_dateSeparatorOrTimeZoneOffset();
    // Set static field: static private System.String dateSeparatorOrTimeZoneOffset
    static void _set_dateSeparatorOrTimeZoneOffset(::Il2CppString* value);
    // static field const value: static private System.String invariantDateSeparator
    static constexpr const char* invariantDateSeparator = "/";
    // Get static field: static private System.String invariantDateSeparator
    static ::Il2CppString* _get_invariantDateSeparator();
    // Set static field: static private System.String invariantDateSeparator
    static void _set_invariantDateSeparator(::Il2CppString* value);
    // static field const value: static private System.String invariantTimeSeparator
    static constexpr const char* invariantTimeSeparator = ":";
    // Get static field: static private System.String invariantTimeSeparator
    static ::Il2CppString* _get_invariantTimeSeparator();
    // Set static field: static private System.String invariantTimeSeparator
    static void _set_invariantTimeSeparator(::Il2CppString* value);
    // static field const value: static System.String IgnorablePeriod
    static constexpr const char* IgnorablePeriod = ".";
    // Get static field: static System.String IgnorablePeriod
    static ::Il2CppString* _get_IgnorablePeriod();
    // Set static field: static System.String IgnorablePeriod
    static void _set_IgnorablePeriod(::Il2CppString* value);
    // static field const value: static System.String IgnorableComma
    static constexpr const char* IgnorableComma = ",";
    // Get static field: static System.String IgnorableComma
    static ::Il2CppString* _get_IgnorableComma();
    // Set static field: static System.String IgnorableComma
    static void _set_IgnorableComma(::Il2CppString* value);
    // static field const value: static System.String CJKYearSuff
    static constexpr const char* CJKYearSuff = "\ufffd";
    // Get static field: static System.String CJKYearSuff
    static ::Il2CppString* _get_CJKYearSuff();
    // Set static field: static System.String CJKYearSuff
    static void _set_CJKYearSuff(::Il2CppString* value);
    // static field const value: static System.String CJKMonthSuff
    static constexpr const char* CJKMonthSuff = "\ufffd";
    // Get static field: static System.String CJKMonthSuff
    static ::Il2CppString* _get_CJKMonthSuff();
    // Set static field: static System.String CJKMonthSuff
    static void _set_CJKMonthSuff(::Il2CppString* value);
    // static field const value: static System.String CJKDaySuff
    static constexpr const char* CJKDaySuff = "\ufffd";
    // Get static field: static System.String CJKDaySuff
    static ::Il2CppString* _get_CJKDaySuff();
    // Set static field: static System.String CJKDaySuff
    static void _set_CJKDaySuff(::Il2CppString* value);
    // static field const value: static System.String KoreanYearSuff
    static constexpr const char* KoreanYearSuff = "\ufffd";
    // Get static field: static System.String KoreanYearSuff
    static ::Il2CppString* _get_KoreanYearSuff();
    // Set static field: static System.String KoreanYearSuff
    static void _set_KoreanYearSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanMonthSuff
    static constexpr const char* KoreanMonthSuff = "\ufffd";
    // Get static field: static System.String KoreanMonthSuff
    static ::Il2CppString* _get_KoreanMonthSuff();
    // Set static field: static System.String KoreanMonthSuff
    static void _set_KoreanMonthSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanDaySuff
    static constexpr const char* KoreanDaySuff = "\ufffd";
    // Get static field: static System.String KoreanDaySuff
    static ::Il2CppString* _get_KoreanDaySuff();
    // Set static field: static System.String KoreanDaySuff
    static void _set_KoreanDaySuff(::Il2CppString* value);
    // static field const value: static System.String KoreanHourSuff
    static constexpr const char* KoreanHourSuff = "\ufffd";
    // Get static field: static System.String KoreanHourSuff
    static ::Il2CppString* _get_KoreanHourSuff();
    // Set static field: static System.String KoreanHourSuff
    static void _set_KoreanHourSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanMinuteSuff
    static constexpr const char* KoreanMinuteSuff = "\ufffd";
    // Get static field: static System.String KoreanMinuteSuff
    static ::Il2CppString* _get_KoreanMinuteSuff();
    // Set static field: static System.String KoreanMinuteSuff
    static void _set_KoreanMinuteSuff(::Il2CppString* value);
    // static field const value: static System.String KoreanSecondSuff
    static constexpr const char* KoreanSecondSuff = "\ufffd";
    // Get static field: static System.String KoreanSecondSuff
    static ::Il2CppString* _get_KoreanSecondSuff();
    // Set static field: static System.String KoreanSecondSuff
    static void _set_KoreanSecondSuff(::Il2CppString* value);
    // static field const value: static System.String CJKHourSuff
    static constexpr const char* CJKHourSuff = "\ufffd";
    // Get static field: static System.String CJKHourSuff
    static ::Il2CppString* _get_CJKHourSuff();
    // Set static field: static System.String CJKHourSuff
    static void _set_CJKHourSuff(::Il2CppString* value);
    // static field const value: static System.String ChineseHourSuff
    static constexpr const char* ChineseHourSuff = "\ufffd";
    // Get static field: static System.String ChineseHourSuff
    static ::Il2CppString* _get_ChineseHourSuff();
    // Set static field: static System.String ChineseHourSuff
    static void _set_ChineseHourSuff(::Il2CppString* value);
    // static field const value: static System.String CJKMinuteSuff
    static constexpr const char* CJKMinuteSuff = "\ufffd";
    // Get static field: static System.String CJKMinuteSuff
    static ::Il2CppString* _get_CJKMinuteSuff();
    // Set static field: static System.String CJKMinuteSuff
    static void _set_CJKMinuteSuff(::Il2CppString* value);
    // static field const value: static System.String CJKSecondSuff
    static constexpr const char* CJKSecondSuff = "\ufffd";
    // Get static field: static System.String CJKSecondSuff
    static ::Il2CppString* _get_CJKSecondSuff();
    // Set static field: static System.String CJKSecondSuff
    static void _set_CJKSecondSuff(::Il2CppString* value);
    // static field const value: static System.String LocalTimeMark
    static constexpr const char* LocalTimeMark = "T";
    // Get static field: static System.String LocalTimeMark
    static ::Il2CppString* _get_LocalTimeMark();
    // Set static field: static System.String LocalTimeMark
    static void _set_LocalTimeMark(::Il2CppString* value);
    // static field const value: static System.String KoreanLangName
    static constexpr const char* KoreanLangName = "ko";
    // Get static field: static System.String KoreanLangName
    static ::Il2CppString* _get_KoreanLangName();
    // Set static field: static System.String KoreanLangName
    static void _set_KoreanLangName(::Il2CppString* value);
    // static field const value: static System.String JapaneseLangName
    static constexpr const char* JapaneseLangName = "ja";
    // Get static field: static System.String JapaneseLangName
    static ::Il2CppString* _get_JapaneseLangName();
    // Set static field: static System.String JapaneseLangName
    static void _set_JapaneseLangName(::Il2CppString* value);
    // static field const value: static System.String EnglishLangName
    static constexpr const char* EnglishLangName = "en";
    // Get static field: static System.String EnglishLangName
    static ::Il2CppString* _get_EnglishLangName();
    // Set static field: static System.String EnglishLangName
    static void _set_EnglishLangName(::Il2CppString* value);
    // Get static field: static private System.Globalization.DateTimeFormatInfo s_jajpDTFI
    static System::Globalization::DateTimeFormatInfo* _get_s_jajpDTFI();
    // Set static field: static private System.Globalization.DateTimeFormatInfo s_jajpDTFI
    static void _set_s_jajpDTFI(System::Globalization::DateTimeFormatInfo* value);
    // Get static field: static private System.Globalization.DateTimeFormatInfo s_zhtwDTFI
    static System::Globalization::DateTimeFormatInfo* _get_s_zhtwDTFI();
    // Set static field: static private System.Globalization.DateTimeFormatInfo s_zhtwDTFI
    static void _set_s_zhtwDTFI(System::Globalization::DateTimeFormatInfo* value);
    // Get instance field reference: private System.Globalization.CultureData m_cultureData
    System::Globalization::CultureData*& dyn_m_cultureData();
    // Get instance field reference: System.String m_name
    ::Il2CppString*& dyn_m_name();
    // Get instance field reference: private System.String m_langName
    ::Il2CppString*& dyn_m_langName();
    // Get instance field reference: private System.Globalization.CompareInfo m_compareInfo
    System::Globalization::CompareInfo*& dyn_m_compareInfo();
    // Get instance field reference: private System.Globalization.CultureInfo m_cultureInfo
    System::Globalization::CultureInfo*& dyn_m_cultureInfo();
    // Get instance field reference: System.String amDesignator
    ::Il2CppString*& dyn_amDesignator();
    // Get instance field reference: System.String pmDesignator
    ::Il2CppString*& dyn_pmDesignator();
    // Get instance field reference: System.String dateSeparator
    ::Il2CppString*& dyn_dateSeparator();
    // Get instance field reference: System.String generalShortTimePattern
    ::Il2CppString*& dyn_generalShortTimePattern();
    // Get instance field reference: System.String generalLongTimePattern
    ::Il2CppString*& dyn_generalLongTimePattern();
    // Get instance field reference: System.String timeSeparator
    ::Il2CppString*& dyn_timeSeparator();
    // Get instance field reference: System.String monthDayPattern
    ::Il2CppString*& dyn_monthDayPattern();
    // Get instance field reference: System.String dateTimeOffsetPattern
    ::Il2CppString*& dyn_dateTimeOffsetPattern();
    // Get instance field reference: System.Globalization.Calendar calendar
    System::Globalization::Calendar*& dyn_calendar();
    // Get instance field reference: System.Int32 firstDayOfWeek
    int& dyn_firstDayOfWeek();
    // Get instance field reference: System.Int32 calendarWeekRule
    int& dyn_calendarWeekRule();
    // Get instance field reference: System.String fullDateTimePattern
    ::Il2CppString*& dyn_fullDateTimePattern();
    // Get instance field reference: System.String[] abbreviatedDayNames
    ::ArrayW<::Il2CppString*>& dyn_abbreviatedDayNames();
    // Get instance field reference: System.String[] m_superShortDayNames
    ::ArrayW<::Il2CppString*>& dyn_m_superShortDayNames();
    // Get instance field reference: System.String[] dayNames
    ::ArrayW<::Il2CppString*>& dyn_dayNames();
    // Get instance field reference: System.String[] abbreviatedMonthNames
    ::ArrayW<::Il2CppString*>& dyn_abbreviatedMonthNames();
    // Get instance field reference: System.String[] monthNames
    ::ArrayW<::Il2CppString*>& dyn_monthNames();
    // Get instance field reference: System.String[] genitiveMonthNames
    ::ArrayW<::Il2CppString*>& dyn_genitiveMonthNames();
    // Get instance field reference: System.String[] m_genitiveAbbreviatedMonthNames
    ::ArrayW<::Il2CppString*>& dyn_m_genitiveAbbreviatedMonthNames();
    // Get instance field reference: System.String[] leapYearMonthNames
    ::ArrayW<::Il2CppString*>& dyn_leapYearMonthNames();
    // Get instance field reference: System.String longDatePattern
    ::Il2CppString*& dyn_longDatePattern();
    // Get instance field reference: System.String shortDatePattern
    ::Il2CppString*& dyn_shortDatePattern();
    // Get instance field reference: System.String yearMonthPattern
    ::Il2CppString*& dyn_yearMonthPattern();
    // Get instance field reference: System.String longTimePattern
    ::Il2CppString*& dyn_longTimePattern();
    // Get instance field reference: System.String shortTimePattern
    ::Il2CppString*& dyn_shortTimePattern();
    // Get instance field reference: private System.String[] allYearMonthPatterns
    ::ArrayW<::Il2CppString*>& dyn_allYearMonthPatterns();
    // Get instance field reference: System.String[] allShortDatePatterns
    ::ArrayW<::Il2CppString*>& dyn_allShortDatePatterns();
    // Get instance field reference: System.String[] allLongDatePatterns
    ::ArrayW<::Il2CppString*>& dyn_allLongDatePatterns();
    // Get instance field reference: System.String[] allShortTimePatterns
    ::ArrayW<::Il2CppString*>& dyn_allShortTimePatterns();
    // Get instance field reference: System.String[] allLongTimePatterns
    ::ArrayW<::Il2CppString*>& dyn_allLongTimePatterns();
    // Get instance field reference: System.String[] m_eraNames
    ::ArrayW<::Il2CppString*>& dyn_m_eraNames();
    // Get instance field reference: System.String[] m_abbrevEraNames
    ::ArrayW<::Il2CppString*>& dyn_m_abbrevEraNames();
    // Get instance field reference: System.String[] m_abbrevEnglishEraNames
    ::ArrayW<::Il2CppString*>& dyn_m_abbrevEnglishEraNames();
    // Get instance field reference: System.Int32[] optionalCalendars
    ::ArrayW<int>& dyn_optionalCalendars();
    // Get instance field reference: System.Boolean m_isReadOnly
    bool& dyn_m_isReadOnly();
    // Get instance field reference: System.Globalization.DateTimeFormatFlags formatFlags
    System::Globalization::DateTimeFormatFlags& dyn_formatFlags();
    // Get instance field reference: private System.Int32 CultureID
    int& dyn_CultureID();
    // Get instance field reference: private System.Boolean m_useUserOverride
    bool& dyn_m_useUserOverride();
    // Get instance field reference: private System.Boolean bUseCalendarInfo
    bool& dyn_bUseCalendarInfo();
    // Get instance field reference: private System.Int32 nDataItem
    int& dyn_nDataItem();
    // Get instance field reference: System.Boolean m_isDefaultCalendar
    bool& dyn_m_isDefaultCalendar();
    // Get instance field reference: System.String[] m_dateWords
    ::ArrayW<::Il2CppString*>& dyn_m_dateWords();
    // Get instance field reference: private System.String m_fullTimeSpanPositivePattern
    ::Il2CppString*& dyn_m_fullTimeSpanPositivePattern();
    // Get instance field reference: private System.String m_fullTimeSpanNegativePattern
    ::Il2CppString*& dyn_m_fullTimeSpanNegativePattern();
    // Get instance field reference: private System.Globalization.TokenHashValue[] m_dtfiTokenHash
    ::ArrayW<System::Globalization::TokenHashValue*>& dyn_m_dtfiTokenHash();
    // private System.String get_CultureName()
    // Offset: 0x1997EE8
    ::Il2CppString* get_CultureName();
    // private System.Globalization.CultureInfo get_Culture()
    // Offset: 0x1997F14
    System::Globalization::CultureInfo* get_Culture();
    // private System.String get_LanguageName()
    // Offset: 0x1997FA4
    ::Il2CppString* get_LanguageName();
    // static public System.Globalization.DateTimeFormatInfo get_InvariantInfo()
    // Offset: 0x199915C
    static System::Globalization::DateTimeFormatInfo* get_InvariantInfo();
    // static public System.Globalization.DateTimeFormatInfo get_CurrentInfo()
    // Offset: 0x199924C
    static System::Globalization::DateTimeFormatInfo* get_CurrentInfo();
    // public System.String get_AMDesignator()
    // Offset: 0x1999580
    ::Il2CppString* get_AMDesignator();
    // public System.Globalization.Calendar get_Calendar()
    // Offset: 0x1999588
    System::Globalization::Calendar* get_Calendar();
    // public System.Void set_Calendar(System.Globalization.Calendar value)
    // Offset: 0x1998210
    void set_Calendar(System::Globalization::Calendar* value);
    // private System.Int32[] get_OptionalCalendars()
    // Offset: 0x1999590
    ::ArrayW<int> get_OptionalCalendars();
    // System.String[] get_EraNames()
    // Offset: 0x19995D8
    ::ArrayW<::Il2CppString*> get_EraNames();
    // System.String[] get_AbbreviatedEraNames()
    // Offset: 0x1999734
    ::ArrayW<::Il2CppString*> get_AbbreviatedEraNames();
    // System.String[] get_AbbreviatedEnglishEraNames()
    // Offset: 0x19998A8
    ::ArrayW<::Il2CppString*> get_AbbreviatedEnglishEraNames();
    // public System.String get_DateSeparator()
    // Offset: 0x1999904
    ::Il2CppString* get_DateSeparator();
    // public System.String get_FullDateTimePattern()
    // Offset: 0x199990C
    ::Il2CppString* get_FullDateTimePattern();
    // public System.String get_LongDatePattern()
    // Offset: 0x1998D88
    ::Il2CppString* get_LongDatePattern();
    // public System.Void set_LongDatePattern(System.String value)
    // Offset: 0x1998770
    void set_LongDatePattern(::Il2CppString* value);
    // public System.String get_LongTimePattern()
    // Offset: 0x1998D38
    ::Il2CppString* get_LongTimePattern();
    // public System.Void set_LongTimePattern(System.String value)
    // Offset: 0x1998A28
    void set_LongTimePattern(::Il2CppString* value);
    // public System.String get_MonthDayPattern()
    // Offset: 0x1999A24
    ::Il2CppString* get_MonthDayPattern();
    // public System.String get_PMDesignator()
    // Offset: 0x1999A80
    ::Il2CppString* get_PMDesignator();
    // public System.String get_RFC1123Pattern()
    // Offset: 0x1999A88
    ::Il2CppString* get_RFC1123Pattern();
    // public System.String get_ShortDatePattern()
    // Offset: 0x1998E28
    ::Il2CppString* get_ShortDatePattern();
    // public System.Void set_ShortDatePattern(System.String value)
    // Offset: 0x1998858
    void set_ShortDatePattern(::Il2CppString* value);
    // public System.String get_ShortTimePattern()
    // Offset: 0x1998DD8
    ::Il2CppString* get_ShortTimePattern();
    // public System.Void set_ShortTimePattern(System.String value)
    // Offset: 0x1998B18
    void set_ShortTimePattern(::Il2CppString* value);
    // public System.String get_SortableDateTimePattern()
    // Offset: 0x1999B6C
    ::Il2CppString* get_SortableDateTimePattern();
    // System.String get_GeneralShortTimePattern()
    // Offset: 0x1999BB4
    ::Il2CppString* get_GeneralShortTimePattern();
    // System.String get_GeneralLongTimePattern()
    // Offset: 0x1999C30
    ::Il2CppString* get_GeneralLongTimePattern();
    // System.String get_DateTimeOffsetPattern()
    // Offset: 0x1999CAC
    ::Il2CppString* get_DateTimeOffsetPattern();
    // public System.String get_TimeSeparator()
    // Offset: 0x1999E3C
    ::Il2CppString* get_TimeSeparator();
    // public System.String get_UniversalSortableDateTimePattern()
    // Offset: 0x1999E44
    ::Il2CppString* get_UniversalSortableDateTimePattern();
    // public System.String get_YearMonthPattern()
    // Offset: 0x1998E78
    ::Il2CppString* get_YearMonthPattern();
    // public System.Void set_YearMonthPattern(System.String value)
    // Offset: 0x1998944
    void set_YearMonthPattern(::Il2CppString* value);
    // public System.String[] get_AbbreviatedDayNames()
    // Offset: 0x1999EE8
    ::ArrayW<::Il2CppString*> get_AbbreviatedDayNames();
    // public System.String[] get_DayNames()
    // Offset: 0x1999F6C
    ::ArrayW<::Il2CppString*> get_DayNames();
    // public System.String[] get_AbbreviatedMonthNames()
    // Offset: 0x1999FF0
    ::ArrayW<::Il2CppString*> get_AbbreviatedMonthNames();
    // public System.String[] get_MonthNames()
    // Offset: 0x199A074
    ::ArrayW<::Il2CppString*> get_MonthNames();
    // System.Boolean get_HasSpacesInMonthNames()
    // Offset: 0x199A0F8
    bool get_HasSpacesInMonthNames();
    // System.Boolean get_HasSpacesInDayNames()
    // Offset: 0x199A24C
    bool get_HasSpacesInDayNames();
    // private System.String[] get_AllYearMonthPatterns()
    // Offset: 0x19990D8
    ::ArrayW<::Il2CppString*> get_AllYearMonthPatterns();
    // private System.String[] get_AllShortDatePatterns()
    // Offset: 0x1999054
    ::ArrayW<::Il2CppString*> get_AllShortDatePatterns();
    // private System.String[] get_AllShortTimePatterns()
    // Offset: 0x1998FD0
    ::ArrayW<::Il2CppString*> get_AllShortTimePatterns();
    // private System.String[] get_AllLongDatePatterns()
    // Offset: 0x1998F4C
    ::ArrayW<::Il2CppString*> get_AllLongDatePatterns();
    // private System.String[] get_AllLongTimePatterns()
    // Offset: 0x1998EC8
    ::ArrayW<::Il2CppString*> get_AllLongTimePatterns();
    // private System.String[] get_UnclonedYearMonthPatterns()
    // Offset: 0x1999E8C
    ::ArrayW<::Il2CppString*> get_UnclonedYearMonthPatterns();
    // private System.String[] get_UnclonedShortDatePatterns()
    // Offset: 0x1999AD0
    ::ArrayW<::Il2CppString*> get_UnclonedShortDatePatterns();
    // private System.String[] get_UnclonedLongDatePatterns()
    // Offset: 0x1999988
    ::ArrayW<::Il2CppString*> get_UnclonedLongDatePatterns();
    // private System.String[] get_UnclonedShortTimePatterns()
    // Offset: 0x1999B2C
    ::ArrayW<::Il2CppString*> get_UnclonedShortTimePatterns();
    // private System.String[] get_UnclonedLongTimePatterns()
    // Offset: 0x19999E4
    ::ArrayW<::Il2CppString*> get_UnclonedLongTimePatterns();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x199B1F0
    bool get_IsReadOnly();
    // public System.String[] get_MonthGenitiveNames()
    // Offset: 0x199B1F8
    ::ArrayW<::Il2CppString*> get_MonthGenitiveNames();
    // System.String get_FullTimeSpanPositivePattern()
    // Offset: 0x199B280
    ::Il2CppString* get_FullTimeSpanPositivePattern();
    // System.String get_FullTimeSpanNegativePattern()
    // Offset: 0x199B340
    ::Il2CppString* get_FullTimeSpanNegativePattern();
    // System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0x199B3B0
    System::Globalization::CompareInfo* get_CompareInfo();
    // System.Globalization.DateTimeFormatFlags get_FormatFlags()
    // Offset: 0x199A110
    System::Globalization::DateTimeFormatFlags get_FormatFlags();
    // System.Boolean get_HasForceTwoDigitYears()
    // Offset: 0x199B4E0
    bool get_HasForceTwoDigitYears();
    // System.Boolean get_HasYearMonthAdjustment()
    // Offset: 0x199B514
    bool get_HasYearMonthAdjustment();
    // System.Void .ctor(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal)
    // Offset: 0x1994894
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DateTimeFormatInfo* New_ctor(System::Globalization::CultureData* cultureData, System::Globalization::Calendar* cal) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::DateTimeFormatInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DateTimeFormatInfo*, creationType>(cultureData, cal)));
    }
    // static private System.Void .cctor()
    // Offset: 0x199D1C4
    static void _cctor();
    // static private System.Boolean InitPreferExistingTokens()
    // Offset: 0x1997EE0
    static bool InitPreferExistingTokens();
    // private System.String[] internalGetAbbreviatedDayOfWeekNames()
    // Offset: 0x1997FD0
    ::ArrayW<::Il2CppString*> internalGetAbbreviatedDayOfWeekNames();
    // private System.String[] internalGetDayOfWeekNames()
    // Offset: 0x199802C
    ::ArrayW<::Il2CppString*> internalGetDayOfWeekNames();
    // private System.String[] internalGetAbbreviatedMonthNames()
    // Offset: 0x1998088
    ::ArrayW<::Il2CppString*> internalGetAbbreviatedMonthNames();
    // private System.String[] internalGetMonthNames()
    // Offset: 0x19980E4
    ::ArrayW<::Il2CppString*> internalGetMonthNames();
    // private System.Void InitializeOverridableProperties(System.Globalization.CultureData cultureData, System.Int32 calendarID)
    // Offset: 0x1998448
    void InitializeOverridableProperties(System::Globalization::CultureData* cultureData, int calendarID);
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x1998574
    void OnDeserialized(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x1998C00
    void OnSerializing(System::Runtime::Serialization::StreamingContext ctx);
    // static public System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider)
    // Offset: 0x1999338
    static System::Globalization::DateTimeFormatInfo* GetInstance(System::IFormatProvider* provider);
    // public System.Object GetFormat(System.Type formatType)
    // Offset: 0x19994E4
    ::Il2CppObject* GetFormat(System::Type* formatType);
    // public System.Object Clone()
    // Offset: 0x19942E4
    ::Il2CppObject* Clone();
    // public System.String GetEraName(System.Int32 era)
    // Offset: 0x1999634
    ::Il2CppString* GetEraName(int era);
    // public System.String GetAbbreviatedEraName(System.Int32 era)
    // Offset: 0x1999790
    ::Il2CppString* GetAbbreviatedEraName(int era);
    // System.String internalGetMonthName(System.Int32 month, System.Globalization.MonthNameStyles style, System.Boolean abbreviated)
    // Offset: 0x199A264
    ::Il2CppString* internalGetMonthName(int month, System::Globalization::MonthNameStyles style, bool abbreviated);
    // private System.String[] internalGetGenitiveMonthNames(System.Boolean abbreviated)
    // Offset: 0x199A440
    ::ArrayW<::Il2CppString*> internalGetGenitiveMonthNames(bool abbreviated);
    // System.String[] internalGetLeapYearMonthNames()
    // Offset: 0x199A4E0
    ::ArrayW<::Il2CppString*> internalGetLeapYearMonthNames();
    // public System.String GetAbbreviatedDayName(System.DayOfWeek dayofweek)
    // Offset: 0x199A53C
    ::Il2CppString* GetAbbreviatedDayName(System::DayOfWeek dayofweek);
    // static private System.String[] GetCombinedPatterns(System.String[] patterns1, System.String[] patterns2, System.String connectString)
    // Offset: 0x199A6B0
    static ::ArrayW<::Il2CppString*> GetCombinedPatterns(::ArrayW<::Il2CppString*> patterns1, ::ArrayW<::Il2CppString*> patterns2, ::Il2CppString* connectString);
    // public System.String[] GetAllDateTimePatterns(System.Char format)
    // Offset: 0x199A840
    ::ArrayW<::Il2CppString*> GetAllDateTimePatterns(::Il2CppChar format);
    // public System.String GetDayName(System.DayOfWeek dayofweek)
    // Offset: 0x199AB78
    ::Il2CppString* GetDayName(System::DayOfWeek dayofweek);
    // public System.String GetAbbreviatedMonthName(System.Int32 month)
    // Offset: 0x199ACEC
    ::Il2CppString* GetAbbreviatedMonthName(int month);
    // public System.String GetMonthName(System.Int32 month)
    // Offset: 0x199AE68
    ::Il2CppString* GetMonthName(int month);
    // static private System.String[] GetMergedPatterns(System.String[] patterns, System.String defaultPattern)
    // Offset: 0x199AFE4
    static ::ArrayW<::Il2CppString*> GetMergedPatterns(::ArrayW<::Il2CppString*> patterns, ::Il2CppString* defaultPattern);
    // static System.Void ValidateStyles(System.Globalization.DateTimeStyles style, System.String parameterName)
    // Offset: 0x199B418
    static void ValidateStyles(System::Globalization::DateTimeStyles style, ::Il2CppString* parameterName);
    // System.Boolean YearMonthAdjustment(ref System.Int32 year, ref System.Int32 month, System.Boolean parsedMonthName)
    // Offset: 0x199B52C
    bool YearMonthAdjustment(ByRef<int> year, ByRef<int> month, bool parsedMonthName);
    // static System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI()
    // Offset: 0x199B650
    static System::Globalization::DateTimeFormatInfo* GetJapaneseCalendarDTFI();
    // static System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI()
    // Offset: 0x199B774
    static System::Globalization::DateTimeFormatInfo* GetTaiwanCalendarDTFI();
    // private System.Void ClearTokenHashTable()
    // Offset: 0x19995C8
    void ClearTokenHashTable();
    // System.Globalization.TokenHashValue[] CreateTokenHashTable()
    // Offset: 0x199B898
    ::ArrayW<System::Globalization::TokenHashValue*> CreateTokenHashTable();
    // private System.Void AddMonthNames(System.Globalization.TokenHashValue[] temp, System.String monthPostfix)
    // Offset: 0x199C988
    void AddMonthNames(::ArrayW<System::Globalization::TokenHashValue*> temp, ::Il2CppString* monthPostfix);
    // static private System.Boolean TryParseHebrewNumber(ref System.__DTString str, out System.Boolean badFormat, out System.Int32 number)
    // Offset: 0x199CA44
    static bool TryParseHebrewNumber(ByRef<System::__DTString> str, ByRef<bool> badFormat, ByRef<int> number);
    // static private System.Boolean IsHebrewChar(System.Char ch)
    // Offset: 0x199CBB0
    static bool IsHebrewChar(::Il2CppChar ch);
    // System.Boolean Tokenize(System.TokenType TokenMask, out System.TokenType tokenType, out System.Int32 tokenValue, ref System.__DTString str)
    // Offset: 0x199CBC4
    bool Tokenize(System::TokenType TokenMask, ByRef<System::TokenType> tokenType, ByRef<int> tokenValue, ByRef<System::__DTString> str);
    // private System.Void InsertAtCurrentHashNode(System.Globalization.TokenHashValue[] hashTable, System.String str, System.Char ch, System.TokenType tokenType, System.Int32 tokenValue, System.Int32 pos, System.Int32 hashcode, System.Int32 hashProbe)
    // Offset: 0x199CFD8
    void InsertAtCurrentHashNode(::ArrayW<System::Globalization::TokenHashValue*> hashTable, ::Il2CppString* str, ::Il2CppChar ch, System::TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
    // private System.Void InsertHash(System.Globalization.TokenHashValue[] hashTable, System.String str, System.TokenType tokenType, System.Int32 tokenValue)
    // Offset: 0x199C5B4
    void InsertHash(::ArrayW<System::Globalization::TokenHashValue*> hashTable, ::Il2CppString* str, System::TokenType tokenType, int tokenValue);
    // public System.Void .ctor()
    // Offset: 0x1998140
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DateTimeFormatInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::DateTimeFormatInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DateTimeFormatInfo*, creationType>()));
    }
  }; // System.Globalization.DateTimeFormatInfo
  #pragma pack(pop)
  static check_size<sizeof(DateTimeFormatInfo), 368 + sizeof(::ArrayW<System::Globalization::TokenHashValue*>)> __System_Globalization_DateTimeFormatInfoSizeCheck;
  static_assert(sizeof(DateTimeFormatInfo) == 0x178);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_CultureName
// Il2CppName: get_CultureName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_CultureName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_CultureName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_Culture
// Il2CppName: get_Culture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::CultureInfo* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_Culture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_Culture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_LanguageName
// Il2CppName: get_LanguageName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_LanguageName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_LanguageName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_InvariantInfo
// Il2CppName: get_InvariantInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::DateTimeFormatInfo* (*)()>(&System::Globalization::DateTimeFormatInfo::get_InvariantInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_InvariantInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_CurrentInfo
// Il2CppName: get_CurrentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::DateTimeFormatInfo* (*)()>(&System::Globalization::DateTimeFormatInfo::get_CurrentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_CurrentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AMDesignator
// Il2CppName: get_AMDesignator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AMDesignator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AMDesignator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_Calendar
// Il2CppName: get_Calendar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::Calendar* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_Calendar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_Calendar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::set_Calendar
// Il2CppName: set_Calendar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(System::Globalization::Calendar*)>(&System::Globalization::DateTimeFormatInfo::set_Calendar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "Calendar")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "set_Calendar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_OptionalCalendars
// Il2CppName: get_OptionalCalendars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_OptionalCalendars)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_OptionalCalendars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_EraNames
// Il2CppName: get_EraNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_EraNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_EraNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AbbreviatedEraNames
// Il2CppName: get_AbbreviatedEraNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AbbreviatedEraNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AbbreviatedEraNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AbbreviatedEnglishEraNames
// Il2CppName: get_AbbreviatedEnglishEraNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AbbreviatedEnglishEraNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AbbreviatedEnglishEraNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_DateSeparator
// Il2CppName: get_DateSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_DateSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_DateSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_FullDateTimePattern
// Il2CppName: get_FullDateTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_FullDateTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_FullDateTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_LongDatePattern
// Il2CppName: get_LongDatePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_LongDatePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_LongDatePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::set_LongDatePattern
// Il2CppName: set_LongDatePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::set_LongDatePattern)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "set_LongDatePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_LongTimePattern
// Il2CppName: get_LongTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_LongTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_LongTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::set_LongTimePattern
// Il2CppName: set_LongTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::set_LongTimePattern)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "set_LongTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_MonthDayPattern
// Il2CppName: get_MonthDayPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_MonthDayPattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_MonthDayPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_PMDesignator
// Il2CppName: get_PMDesignator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_PMDesignator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_PMDesignator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_RFC1123Pattern
// Il2CppName: get_RFC1123Pattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_RFC1123Pattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_RFC1123Pattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_ShortDatePattern
// Il2CppName: get_ShortDatePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_ShortDatePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_ShortDatePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::set_ShortDatePattern
// Il2CppName: set_ShortDatePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::set_ShortDatePattern)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "set_ShortDatePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_ShortTimePattern
// Il2CppName: get_ShortTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_ShortTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_ShortTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::set_ShortTimePattern
// Il2CppName: set_ShortTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::set_ShortTimePattern)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "set_ShortTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_SortableDateTimePattern
// Il2CppName: get_SortableDateTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_SortableDateTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_SortableDateTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_GeneralShortTimePattern
// Il2CppName: get_GeneralShortTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_GeneralShortTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_GeneralShortTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_GeneralLongTimePattern
// Il2CppName: get_GeneralLongTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_GeneralLongTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_GeneralLongTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_DateTimeOffsetPattern
// Il2CppName: get_DateTimeOffsetPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_DateTimeOffsetPattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_DateTimeOffsetPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_TimeSeparator
// Il2CppName: get_TimeSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_TimeSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_TimeSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_UniversalSortableDateTimePattern
// Il2CppName: get_UniversalSortableDateTimePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_UniversalSortableDateTimePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_UniversalSortableDateTimePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_YearMonthPattern
// Il2CppName: get_YearMonthPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_YearMonthPattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_YearMonthPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::set_YearMonthPattern
// Il2CppName: set_YearMonthPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::set_YearMonthPattern)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "set_YearMonthPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AbbreviatedDayNames
// Il2CppName: get_AbbreviatedDayNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AbbreviatedDayNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AbbreviatedDayNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_DayNames
// Il2CppName: get_DayNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_DayNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_DayNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AbbreviatedMonthNames
// Il2CppName: get_AbbreviatedMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AbbreviatedMonthNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AbbreviatedMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_MonthNames
// Il2CppName: get_MonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_MonthNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_MonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_HasSpacesInMonthNames
// Il2CppName: get_HasSpacesInMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_HasSpacesInMonthNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_HasSpacesInMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_HasSpacesInDayNames
// Il2CppName: get_HasSpacesInDayNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_HasSpacesInDayNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_HasSpacesInDayNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AllYearMonthPatterns
// Il2CppName: get_AllYearMonthPatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AllYearMonthPatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AllYearMonthPatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AllShortDatePatterns
// Il2CppName: get_AllShortDatePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AllShortDatePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AllShortDatePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AllShortTimePatterns
// Il2CppName: get_AllShortTimePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AllShortTimePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AllShortTimePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AllLongDatePatterns
// Il2CppName: get_AllLongDatePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AllLongDatePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AllLongDatePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_AllLongTimePatterns
// Il2CppName: get_AllLongTimePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_AllLongTimePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_AllLongTimePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_UnclonedYearMonthPatterns
// Il2CppName: get_UnclonedYearMonthPatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_UnclonedYearMonthPatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_UnclonedYearMonthPatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_UnclonedShortDatePatterns
// Il2CppName: get_UnclonedShortDatePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_UnclonedShortDatePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_UnclonedShortDatePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_UnclonedLongDatePatterns
// Il2CppName: get_UnclonedLongDatePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_UnclonedLongDatePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_UnclonedLongDatePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_UnclonedShortTimePatterns
// Il2CppName: get_UnclonedShortTimePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_UnclonedShortTimePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_UnclonedShortTimePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_UnclonedLongTimePatterns
// Il2CppName: get_UnclonedLongTimePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_UnclonedLongTimePatterns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_UnclonedLongTimePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_IsReadOnly
// Il2CppName: get_IsReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_IsReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_IsReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_MonthGenitiveNames
// Il2CppName: get_MonthGenitiveNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_MonthGenitiveNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_MonthGenitiveNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_FullTimeSpanPositivePattern
// Il2CppName: get_FullTimeSpanPositivePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_FullTimeSpanPositivePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_FullTimeSpanPositivePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_FullTimeSpanNegativePattern
// Il2CppName: get_FullTimeSpanNegativePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_FullTimeSpanNegativePattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_FullTimeSpanNegativePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_CompareInfo
// Il2CppName: get_CompareInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::CompareInfo* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_CompareInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_CompareInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_FormatFlags
// Il2CppName: get_FormatFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::DateTimeFormatFlags (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_FormatFlags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_FormatFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_HasForceTwoDigitYears
// Il2CppName: get_HasForceTwoDigitYears
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_HasForceTwoDigitYears)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_HasForceTwoDigitYears", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::get_HasYearMonthAdjustment
// Il2CppName: get_HasYearMonthAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::get_HasYearMonthAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "get_HasYearMonthAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Globalization::DateTimeFormatInfo::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::InitPreferExistingTokens
// Il2CppName: InitPreferExistingTokens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Globalization::DateTimeFormatInfo::InitPreferExistingTokens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "InitPreferExistingTokens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetAbbreviatedDayOfWeekNames
// Il2CppName: internalGetAbbreviatedDayOfWeekNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::internalGetAbbreviatedDayOfWeekNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetAbbreviatedDayOfWeekNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetDayOfWeekNames
// Il2CppName: internalGetDayOfWeekNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::internalGetDayOfWeekNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetDayOfWeekNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetAbbreviatedMonthNames
// Il2CppName: internalGetAbbreviatedMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::internalGetAbbreviatedMonthNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetAbbreviatedMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetMonthNames
// Il2CppName: internalGetMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::internalGetMonthNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::InitializeOverridableProperties
// Il2CppName: InitializeOverridableProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(System::Globalization::CultureData*, int)>(&System::Globalization::DateTimeFormatInfo::InitializeOverridableProperties)> {
  static const MethodInfo* get() {
    static auto* cultureData = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureData")->byval_arg;
    static auto* calendarID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "InitializeOverridableProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cultureData, calendarID});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::OnDeserialized
// Il2CppName: OnDeserialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(System::Runtime::Serialization::StreamingContext)>(&System::Globalization::DateTimeFormatInfo::OnDeserialized)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "OnDeserialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::OnSerializing
// Il2CppName: OnSerializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(System::Runtime::Serialization::StreamingContext)>(&System::Globalization::DateTimeFormatInfo::OnSerializing)> {
  static const MethodInfo* get() {
    static auto* ctx = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "OnSerializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ctx});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::DateTimeFormatInfo* (*)(System::IFormatProvider*)>(&System::Globalization::DateTimeFormatInfo::GetInstance)> {
  static const MethodInfo* get() {
    static auto* provider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{provider});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetFormat
// Il2CppName: GetFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::DateTimeFormatInfo::*)(System::Type*)>(&System::Globalization::DateTimeFormatInfo::GetFormat)> {
  static const MethodInfo* get() {
    static auto* formatType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formatType});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetEraName
// Il2CppName: GetEraName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(int)>(&System::Globalization::DateTimeFormatInfo::GetEraName)> {
  static const MethodInfo* get() {
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetEraName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{era});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetAbbreviatedEraName
// Il2CppName: GetAbbreviatedEraName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(int)>(&System::Globalization::DateTimeFormatInfo::GetAbbreviatedEraName)> {
  static const MethodInfo* get() {
    static auto* era = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetAbbreviatedEraName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{era});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetMonthName
// Il2CppName: internalGetMonthName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(int, System::Globalization::MonthNameStyles, bool)>(&System::Globalization::DateTimeFormatInfo::internalGetMonthName)> {
  static const MethodInfo* get() {
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("System.Globalization", "MonthNameStyles")->byval_arg;
    static auto* abbreviated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetMonthName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{month, style, abbreviated});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetGenitiveMonthNames
// Il2CppName: internalGetGenitiveMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)(bool)>(&System::Globalization::DateTimeFormatInfo::internalGetGenitiveMonthNames)> {
  static const MethodInfo* get() {
    static auto* abbreviated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetGenitiveMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{abbreviated});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::internalGetLeapYearMonthNames
// Il2CppName: internalGetLeapYearMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::internalGetLeapYearMonthNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "internalGetLeapYearMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetAbbreviatedDayName
// Il2CppName: GetAbbreviatedDayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(System::DayOfWeek)>(&System::Globalization::DateTimeFormatInfo::GetAbbreviatedDayName)> {
  static const MethodInfo* get() {
    static auto* dayofweek = &::il2cpp_utils::GetClassFromName("System", "DayOfWeek")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetAbbreviatedDayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dayofweek});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetCombinedPatterns
// Il2CppName: GetCombinedPatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (*)(::ArrayW<::Il2CppString*>, ::ArrayW<::Il2CppString*>, ::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::GetCombinedPatterns)> {
  static const MethodInfo* get() {
    static auto* patterns1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* patterns2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* connectString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetCombinedPatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patterns1, patterns2, connectString});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetAllDateTimePatterns
// Il2CppName: GetAllDateTimePatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (System::Globalization::DateTimeFormatInfo::*)(::Il2CppChar)>(&System::Globalization::DateTimeFormatInfo::GetAllDateTimePatterns)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetAllDateTimePatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetDayName
// Il2CppName: GetDayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(System::DayOfWeek)>(&System::Globalization::DateTimeFormatInfo::GetDayName)> {
  static const MethodInfo* get() {
    static auto* dayofweek = &::il2cpp_utils::GetClassFromName("System", "DayOfWeek")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetDayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dayofweek});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetAbbreviatedMonthName
// Il2CppName: GetAbbreviatedMonthName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(int)>(&System::Globalization::DateTimeFormatInfo::GetAbbreviatedMonthName)> {
  static const MethodInfo* get() {
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetAbbreviatedMonthName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{month});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetMonthName
// Il2CppName: GetMonthName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (System::Globalization::DateTimeFormatInfo::*)(int)>(&System::Globalization::DateTimeFormatInfo::GetMonthName)> {
  static const MethodInfo* get() {
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetMonthName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{month});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetMergedPatterns
// Il2CppName: GetMergedPatterns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppString*> (*)(::ArrayW<::Il2CppString*>, ::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::GetMergedPatterns)> {
  static const MethodInfo* get() {
    static auto* patterns = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* defaultPattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetMergedPatterns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{patterns, defaultPattern});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::ValidateStyles
// Il2CppName: ValidateStyles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Globalization::DateTimeStyles, ::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::ValidateStyles)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("System.Globalization", "DateTimeStyles")->byval_arg;
    static auto* parameterName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "ValidateStyles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style, parameterName});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::YearMonthAdjustment
// Il2CppName: YearMonthAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)(ByRef<int>, ByRef<int>, bool)>(&System::Globalization::DateTimeFormatInfo::YearMonthAdjustment)> {
  static const MethodInfo* get() {
    static auto* year = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* month = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* parsedMonthName = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "YearMonthAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{year, month, parsedMonthName});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetJapaneseCalendarDTFI
// Il2CppName: GetJapaneseCalendarDTFI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::DateTimeFormatInfo* (*)()>(&System::Globalization::DateTimeFormatInfo::GetJapaneseCalendarDTFI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetJapaneseCalendarDTFI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::GetTaiwanCalendarDTFI
// Il2CppName: GetTaiwanCalendarDTFI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::DateTimeFormatInfo* (*)()>(&System::Globalization::DateTimeFormatInfo::GetTaiwanCalendarDTFI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "GetTaiwanCalendarDTFI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::ClearTokenHashTable
// Il2CppName: ClearTokenHashTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::ClearTokenHashTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "ClearTokenHashTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::CreateTokenHashTable
// Il2CppName: CreateTokenHashTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<System::Globalization::TokenHashValue*> (System::Globalization::DateTimeFormatInfo::*)()>(&System::Globalization::DateTimeFormatInfo::CreateTokenHashTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "CreateTokenHashTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::AddMonthNames
// Il2CppName: AddMonthNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::ArrayW<System::Globalization::TokenHashValue*>, ::Il2CppString*)>(&System::Globalization::DateTimeFormatInfo::AddMonthNames)> {
  static const MethodInfo* get() {
    static auto* temp = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Globalization", "TokenHashValue"), 1)->byval_arg;
    static auto* monthPostfix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "AddMonthNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{temp, monthPostfix});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::TryParseHebrewNumber
// Il2CppName: TryParseHebrewNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<System::__DTString>, ByRef<bool>, ByRef<int>)>(&System::Globalization::DateTimeFormatInfo::TryParseHebrewNumber)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "__DTString")->this_arg;
    static auto* badFormat = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "TryParseHebrewNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, badFormat, number});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::IsHebrewChar
// Il2CppName: IsHebrewChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&System::Globalization::DateTimeFormatInfo::IsHebrewChar)> {
  static const MethodInfo* get() {
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "IsHebrewChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ch});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::Tokenize
// Il2CppName: Tokenize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Globalization::DateTimeFormatInfo::*)(System::TokenType, ByRef<System::TokenType>, ByRef<int>, ByRef<System::__DTString>)>(&System::Globalization::DateTimeFormatInfo::Tokenize)> {
  static const MethodInfo* get() {
    static auto* TokenMask = &::il2cpp_utils::GetClassFromName("System", "TokenType")->byval_arg;
    static auto* tokenType = &::il2cpp_utils::GetClassFromName("System", "TokenType")->this_arg;
    static auto* tokenValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "__DTString")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "Tokenize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{TokenMask, tokenType, tokenValue, str});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::InsertAtCurrentHashNode
// Il2CppName: InsertAtCurrentHashNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::ArrayW<System::Globalization::TokenHashValue*>, ::Il2CppString*, ::Il2CppChar, System::TokenType, int, int, int, int)>(&System::Globalization::DateTimeFormatInfo::InsertAtCurrentHashNode)> {
  static const MethodInfo* get() {
    static auto* hashTable = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Globalization", "TokenHashValue"), 1)->byval_arg;
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    static auto* tokenType = &::il2cpp_utils::GetClassFromName("System", "TokenType")->byval_arg;
    static auto* tokenValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hashcode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hashProbe = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "InsertAtCurrentHashNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hashTable, str, ch, tokenType, tokenValue, pos, hashcode, hashProbe});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::InsertHash
// Il2CppName: InsertHash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Globalization::DateTimeFormatInfo::*)(::ArrayW<System::Globalization::TokenHashValue*>, ::Il2CppString*, System::TokenType, int)>(&System::Globalization::DateTimeFormatInfo::InsertHash)> {
  static const MethodInfo* get() {
    static auto* hashTable = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Globalization", "TokenHashValue"), 1)->byval_arg;
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* tokenType = &::il2cpp_utils::GetClassFromName("System", "TokenType")->byval_arg;
    static auto* tokenValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Globalization::DateTimeFormatInfo*), "InsertHash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hashTable, str, tokenType, tokenValue});
  }
};
// Writing MetadataGetter for method: System::Globalization::DateTimeFormatInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
