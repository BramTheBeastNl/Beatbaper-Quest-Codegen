// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: EraInfo
  class EraInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.GregorianCalendarHelper
  class GregorianCalendarHelper : public ::Il2CppObject {
    public:
    // [OptionalFieldAttribute] Offset: 0xD81A54
    // System.Int32 m_maxYear
    // Size: 0x4
    // Offset: 0x10
    int m_maxYear;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xD81A8C
    // System.Int32 m_minYear
    // Size: 0x4
    // Offset: 0x14
    int m_minYear;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Globalization.Calendar m_Cal
    // Size: 0x8
    // Offset: 0x18
    System::Globalization::Calendar* m_Cal;
    // Field size check
    static_assert(sizeof(System::Globalization::Calendar*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81AC4
    // System.Globalization.EraInfo[] m_EraInfo
    // Size: 0x8
    // Offset: 0x20
    ::Array<System::Globalization::EraInfo*>* m_EraInfo;
    // Field size check
    static_assert(sizeof(::Array<System::Globalization::EraInfo*>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81AFC
    // System.Int32[] m_eras
    // Size: 0x8
    // Offset: 0x28
    ::Array<int>* m_eras;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81B34
    // System.DateTime m_minDate
    // Size: 0x8
    // Offset: 0x30
    System::DateTime m_minDate;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // Creating value type constructor for type: GregorianCalendarHelper
    GregorianCalendarHelper(int m_maxYear_ = {}, int m_minYear_ = {}, System::Globalization::Calendar* m_Cal_ = {}, ::Array<System::Globalization::EraInfo*>* m_EraInfo_ = {}, ::Array<int>* m_eras_ = {}, System::DateTime m_minDate_ = {}) noexcept : m_maxYear{m_maxYear_}, m_minYear{m_minYear_}, m_Cal{m_Cal_}, m_EraInfo{m_EraInfo_}, m_eras{m_eras_}, m_minDate{m_minDate_} {}
    // Get static field: static readonly System.Int32[] DaysToMonth365
    static ::Array<int>* _get_DaysToMonth365();
    // Set static field: static readonly System.Int32[] DaysToMonth365
    static void _set_DaysToMonth365(::Array<int>* value);
    // Get static field: static readonly System.Int32[] DaysToMonth366
    static ::Array<int>* _get_DaysToMonth366();
    // Set static field: static readonly System.Int32[] DaysToMonth366
    static void _set_DaysToMonth366(::Array<int>* value);
    // System.Int32 get_MaxYear()
    // Offset: 0x19F2F68
    int get_MaxYear();
    // System.Void .ctor(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo)
    // Offset: 0x19F2F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GregorianCalendarHelper* New_ctor(System::Globalization::Calendar* cal, ::Array<System::Globalization::EraInfo*>* eraInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::GregorianCalendarHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GregorianCalendarHelper*, creationType>(cal, eraInfo)));
    }
    // System.Int32 GetGregorianYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19F3010
    int GetGregorianYear(int year, int era);
    // System.Boolean IsValidYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19F3278
    bool IsValidYear(int year, int era);
    // System.Int32 GetDatePart(System.Int64 ticks, System.Int32 part)
    // Offset: 0x19F3330
    int GetDatePart(int64_t ticks, int part);
    // static System.Int64 GetAbsoluteDate(System.Int32 year, System.Int32 month, System.Int32 day)
    // Offset: 0x19F374C
    static int64_t GetAbsoluteDate(int year, int month, int day);
    // static System.Int64 DateToTicks(System.Int32 year, System.Int32 month, System.Int32 day)
    // Offset: 0x19F3944
    static int64_t DateToTicks(int year, int month, int day);
    // static System.Int64 TimeToTicks(System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond)
    // Offset: 0x19F39D4
    static int64_t TimeToTicks(int hour, int minute, int second, int millisecond);
    // System.Void CheckTicksRange(System.Int64 ticks)
    // Offset: 0x19F357C
    void CheckTicksRange(int64_t ticks);
    // public System.Int32 GetDayOfMonth(System.DateTime time)
    // Offset: 0x19F3B9C
    int GetDayOfMonth(System::DateTime time);
    // public System.DayOfWeek GetDayOfWeek(System.DateTime time)
    // Offset: 0x19F3BE0
    System::DayOfWeek GetDayOfWeek(System::DateTime time);
    // public System.Int32 GetDaysInMonth(System.Int32 year, System.Int32 month, System.Int32 era)
    // Offset: 0x19F3C70
    int GetDaysInMonth(int year, int month, int era);
    // public System.Int32 GetEra(System.DateTime time)
    // Offset: 0x19F3E18
    int GetEra(System::DateTime time);
    // public System.Int32[] get_Eras()
    // Offset: 0x19F3F18
    ::Array<int>* get_Eras();
    // public System.Int32 GetMonth(System.DateTime time)
    // Offset: 0x19F4020
    int GetMonth(System::DateTime time);
    // public System.Int32 GetMonthsInYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19F4064
    int GetMonthsInYear(int year, int era);
    // public System.Int32 GetYear(System.DateTime time)
    // Offset: 0x19F407C
    int GetYear(System::DateTime time);
    // public System.Boolean IsLeapYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19F419C
    bool IsLeapYear(int year, int era);
    // public System.DateTime ToDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
    // Offset: 0x19F4204
    System::DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    // static private System.Void .cctor()
    // Offset: 0x19F4314
    static void _cctor();
  }; // System.Globalization.GregorianCalendarHelper
  #pragma pack(pop)
  static check_size<sizeof(GregorianCalendarHelper), 48 + sizeof(System::DateTime)> __System_Globalization_GregorianCalendarHelperSizeCheck;
  static_assert(sizeof(GregorianCalendarHelper) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::GregorianCalendarHelper*, "System.Globalization", "GregorianCalendarHelper");
// Writing MetadataGetter for method: GregorianCalendarHelper::get_MaxYear
// Il2CppName: get_MaxYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)()>(&GregorianCalendarHelper::get_MaxYear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "get_MaxYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GregorianCalendarHelper::*)(System::Globalization::Calendar*, ::Array<System::Globalization::EraInfo*>*)>(&GregorianCalendarHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::Calendar*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Globalization::EraInfo*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GregorianCalendarHelper::*)(System::Globalization::Calendar*, ::Array<System::Globalization::EraInfo*>*)>(&GregorianCalendarHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::Calendar*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Globalization::EraInfo*>*>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetGregorianYear
// Il2CppName: GetGregorianYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(int, int)>(&GregorianCalendarHelper::GetGregorianYear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetGregorianYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::IsValidYear
// Il2CppName: IsValidYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GregorianCalendarHelper::*)(int, int)>(&GregorianCalendarHelper::IsValidYear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "IsValidYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetDatePart
// Il2CppName: GetDatePart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(int64_t, int)>(&GregorianCalendarHelper::GetDatePart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetDatePart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetAbsoluteDate
// Il2CppName: GetAbsoluteDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int, int, int)>(&GregorianCalendarHelper::GetAbsoluteDate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetAbsoluteDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::DateToTicks
// Il2CppName: DateToTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int, int, int)>(&GregorianCalendarHelper::DateToTicks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "DateToTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::TimeToTicks
// Il2CppName: TimeToTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int, int, int, int)>(&GregorianCalendarHelper::TimeToTicks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "TimeToTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::CheckTicksRange
// Il2CppName: CheckTicksRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GregorianCalendarHelper::*)(int64_t)>(&GregorianCalendarHelper::CheckTicksRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "CheckTicksRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetDayOfMonth
// Il2CppName: GetDayOfMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(System::DateTime)>(&GregorianCalendarHelper::GetDayOfMonth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetDayOfMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetDayOfWeek
// Il2CppName: GetDayOfWeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DayOfWeek (GregorianCalendarHelper::*)(System::DateTime)>(&GregorianCalendarHelper::GetDayOfWeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetDayOfWeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetDaysInMonth
// Il2CppName: GetDaysInMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(int, int, int)>(&GregorianCalendarHelper::GetDaysInMonth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetDaysInMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetEra
// Il2CppName: GetEra
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(System::DateTime)>(&GregorianCalendarHelper::GetEra)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetEra", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::get_Eras
// Il2CppName: get_Eras
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (GregorianCalendarHelper::*)()>(&GregorianCalendarHelper::get_Eras)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "get_Eras", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetMonth
// Il2CppName: GetMonth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(System::DateTime)>(&GregorianCalendarHelper::GetMonth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetMonth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetMonthsInYear
// Il2CppName: GetMonthsInYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(int, int)>(&GregorianCalendarHelper::GetMonthsInYear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetMonthsInYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::GetYear
// Il2CppName: GetYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GregorianCalendarHelper::*)(System::DateTime)>(&GregorianCalendarHelper::GetYear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "GetYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::IsLeapYear
// Il2CppName: IsLeapYear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GregorianCalendarHelper::*)(int, int)>(&GregorianCalendarHelper::IsLeapYear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "IsLeapYear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (GregorianCalendarHelper::*)(int, int, int, int, int, int, int, int)>(&GregorianCalendarHelper::ToDateTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GregorianCalendarHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GregorianCalendarHelper::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GregorianCalendarHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
