// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: EraInfo
  class EraInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DayOfWeek
  struct DayOfWeek;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Globalization.GregorianCalendarHelper
  class GregorianCalendarHelper : public ::Il2CppObject {
    public:
    // [OptionalFieldAttribute] Offset: 0xD81AD4
    // System.Int32 m_maxYear
    // Size: 0x4
    // Offset: 0x10
    int m_maxYear;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xD81B0C
    // System.Int32 m_minYear
    // Size: 0x4
    // Offset: 0x14
    int m_minYear;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Globalization.Calendar m_Cal
    // Size: 0x8
    // Offset: 0x18
    System::Globalization::Calendar* m_Cal;
    // Field size check
    static_assert(sizeof(System::Globalization::Calendar*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81B44
    // System.Globalization.EraInfo[] m_EraInfo
    // Size: 0x8
    // Offset: 0x20
    ::Array<System::Globalization::EraInfo*>* m_EraInfo;
    // Field size check
    static_assert(sizeof(::Array<System::Globalization::EraInfo*>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81B7C
    // System.Int32[] m_eras
    // Size: 0x8
    // Offset: 0x28
    ::Array<int>* m_eras;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81BB4
    // System.DateTime m_minDate
    // Size: 0x8
    // Offset: 0x30
    System::DateTime m_minDate;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // Creating value type constructor for type: GregorianCalendarHelper
    GregorianCalendarHelper(int m_maxYear_ = {}, int m_minYear_ = {}, System::Globalization::Calendar* m_Cal_ = {}, ::Array<System::Globalization::EraInfo*>* m_EraInfo_ = {}, ::Array<int>* m_eras_ = {}, System::DateTime m_minDate_ = {}) noexcept : m_maxYear{m_maxYear_}, m_minYear{m_minYear_}, m_Cal{m_Cal_}, m_EraInfo{m_EraInfo_}, m_eras{m_eras_}, m_minDate{m_minDate_} {}
    // Get static field: static readonly System.Int32[] DaysToMonth365
    static ::Array<int>* _get_DaysToMonth365();
    // Set static field: static readonly System.Int32[] DaysToMonth365
    static void _set_DaysToMonth365(::Array<int>* value);
    // Get static field: static readonly System.Int32[] DaysToMonth366
    static ::Array<int>* _get_DaysToMonth366();
    // Set static field: static readonly System.Int32[] DaysToMonth366
    static void _set_DaysToMonth366(::Array<int>* value);
    // System.Int32 get_MaxYear()
    // Offset: 0x19DB258
    int get_MaxYear();
    // System.Void .ctor(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo)
    // Offset: 0x19DB260
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GregorianCalendarHelper* New_ctor(System::Globalization::Calendar* cal, ::Array<System::Globalization::EraInfo*>* eraInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::GregorianCalendarHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GregorianCalendarHelper*, creationType>(cal, eraInfo)));
    }
    // System.Int32 GetGregorianYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19DB300
    int GetGregorianYear(int year, int era);
    // System.Boolean IsValidYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19DB568
    bool IsValidYear(int year, int era);
    // System.Int32 GetDatePart(System.Int64 ticks, System.Int32 part)
    // Offset: 0x19DB620
    int GetDatePart(int64_t ticks, int part);
    // static System.Int64 GetAbsoluteDate(System.Int32 year, System.Int32 month, System.Int32 day)
    // Offset: 0x19DBA3C
    static int64_t GetAbsoluteDate(int year, int month, int day);
    // static System.Int64 DateToTicks(System.Int32 year, System.Int32 month, System.Int32 day)
    // Offset: 0x19DBC34
    static int64_t DateToTicks(int year, int month, int day);
    // static System.Int64 TimeToTicks(System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond)
    // Offset: 0x19DBCC4
    static int64_t TimeToTicks(int hour, int minute, int second, int millisecond);
    // System.Void CheckTicksRange(System.Int64 ticks)
    // Offset: 0x19DB86C
    void CheckTicksRange(int64_t ticks);
    // public System.Int32 GetDayOfMonth(System.DateTime time)
    // Offset: 0x19DBE8C
    int GetDayOfMonth(System::DateTime time);
    // public System.DayOfWeek GetDayOfWeek(System.DateTime time)
    // Offset: 0x19DBED0
    System::DayOfWeek GetDayOfWeek(System::DateTime time);
    // public System.Int32 GetDaysInMonth(System.Int32 year, System.Int32 month, System.Int32 era)
    // Offset: 0x19DBF60
    int GetDaysInMonth(int year, int month, int era);
    // public System.Int32 GetEra(System.DateTime time)
    // Offset: 0x19DC108
    int GetEra(System::DateTime time);
    // public System.Int32[] get_Eras()
    // Offset: 0x19DC208
    ::Array<int>* get_Eras();
    // public System.Int32 GetMonth(System.DateTime time)
    // Offset: 0x19DC310
    int GetMonth(System::DateTime time);
    // public System.Int32 GetMonthsInYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19DC354
    int GetMonthsInYear(int year, int era);
    // public System.Int32 GetYear(System.DateTime time)
    // Offset: 0x19DC36C
    int GetYear(System::DateTime time);
    // public System.Boolean IsLeapYear(System.Int32 year, System.Int32 era)
    // Offset: 0x19DC48C
    bool IsLeapYear(int year, int era);
    // public System.DateTime ToDateTime(System.Int32 year, System.Int32 month, System.Int32 day, System.Int32 hour, System.Int32 minute, System.Int32 second, System.Int32 millisecond, System.Int32 era)
    // Offset: 0x19DC4F4
    System::DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    // static private System.Void .cctor()
    // Offset: 0x19DC604
    static void _cctor();
  }; // System.Globalization.GregorianCalendarHelper
  #pragma pack(pop)
  static check_size<sizeof(GregorianCalendarHelper), 48 + sizeof(System::DateTime)> __System_Globalization_GregorianCalendarHelperSizeCheck;
  static_assert(sizeof(GregorianCalendarHelper) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::GregorianCalendarHelper*, "System.Globalization", "GregorianCalendarHelper");
