// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureData
  class CultureData;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Globalization.TextInfo
  // [ComVisibleAttribute] Offset: D7CC80
  class TextInfo : public ::Il2CppObject/*, public System::ICloneable, public System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // [OptionalFieldAttribute] Offset: 0xD81CF4
    // private System.String m_listSeparator
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_listSeparator;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81D2C
    // private System.Boolean m_isReadOnly
    // Size: 0x1
    // Offset: 0x18
    bool m_isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0xD81D64
    // private System.String m_cultureName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* m_cultureName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Globalization.CultureData m_cultureData
    // Size: 0x8
    // Offset: 0x28
    System::Globalization::CultureData* m_cultureData;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureData*) == 0x8);
    // private System.String m_textInfoName
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* m_textInfoName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Nullable`1<System.Boolean> m_IsAsciiCasingSameAsInvariant
    // Size: 0xFFFFFFFF
    // Offset: 0x38
    System::Nullable_1<bool> m_IsAsciiCasingSameAsInvariant;
    // [OptionalFieldAttribute] Offset: 0xD81D9C
    // private System.String customCultureName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* customCultureName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xD81DD4
    // System.Int32 m_nDataItem
    // Size: 0x4
    // Offset: 0x48
    int m_nDataItem;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [OptionalFieldAttribute] Offset: 0xD81E0C
    // System.Boolean m_useUserOverride
    // Size: 0x1
    // Offset: 0x4C
    bool m_useUserOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0xD81E44
    // System.Int32 m_win32LangID
    // Size: 0x4
    // Offset: 0x50
    int m_win32LangID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: TextInfo
    TextInfo(::Il2CppString* m_listSeparator_ = {}, bool m_isReadOnly_ = {}, ::Il2CppString* m_cultureName_ = {}, System::Globalization::CultureData* m_cultureData_ = {}, ::Il2CppString* m_textInfoName_ = {}, System::Nullable_1<bool> m_IsAsciiCasingSameAsInvariant_ = {}, ::Il2CppString* customCultureName_ = {}, int m_nDataItem_ = {}, bool m_useUserOverride_ = {}, int m_win32LangID_ = {}) noexcept : m_listSeparator{m_listSeparator_}, m_isReadOnly{m_isReadOnly_}, m_cultureName{m_cultureName_}, m_cultureData{m_cultureData_}, m_textInfoName{m_textInfoName_}, m_IsAsciiCasingSameAsInvariant{m_IsAsciiCasingSameAsInvariant_}, customCultureName{customCultureName_}, m_nDataItem{m_nDataItem_}, m_useUserOverride{m_useUserOverride_}, m_win32LangID{m_win32LangID_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Get static field: static System.Globalization.TextInfo s_Invariant
    static System::Globalization::TextInfo* _get_s_Invariant();
    // Set static field: static System.Globalization.TextInfo s_Invariant
    static void _set_s_Invariant(System::Globalization::TextInfo* value);
    // static field const value: static private System.Int32 wordSeparatorMask
    static constexpr const int wordSeparatorMask = 536672256;
    // Get static field: static private System.Int32 wordSeparatorMask
    static int _get_wordSeparatorMask();
    // Set static field: static private System.Int32 wordSeparatorMask
    static void _set_wordSeparatorMask(int value);
    // static System.Globalization.TextInfo get_Invariant()
    // Offset: 0x19F9C10
    static System::Globalization::TextInfo* get_Invariant();
    // System.Void .ctor(System.Globalization.CultureData cultureData)
    // Offset: 0x19F9CB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextInfo* New_ctor(System::Globalization::CultureData* cultureData) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::TextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextInfo*, creationType>(cultureData)));
    }
    // private System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x19F9CFC
    void OnDeserializing(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnDeserialized()
    // Offset: 0x19F9D04
    void OnDeserialized();
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x19F9DFC
    void OnDeserialized(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x19F9E00
    void OnSerializing(System::Runtime::Serialization::StreamingContext ctx);
    // static System.Int32 GetHashCodeOrdinalIgnoreCase(System.String s)
    // Offset: 0x19F9E90
    static int GetHashCodeOrdinalIgnoreCase(::Il2CppString* s);
    // static System.Int32 GetHashCodeOrdinalIgnoreCase(System.String s, System.Boolean forceRandomizedHashing, System.Int64 additionalEntropy)
    // Offset: 0x19F9E9C
    static int GetHashCodeOrdinalIgnoreCase(::Il2CppString* s, bool forceRandomizedHashing, int64_t additionalEntropy);
    // static System.Int32 CompareOrdinalIgnoreCase(System.String str1, System.String str2)
    // Offset: 0x19F9FC8
    static int CompareOrdinalIgnoreCase(::Il2CppString* str1, ::Il2CppString* str2);
    // static System.Int32 CompareOrdinalIgnoreCaseEx(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 lengthA, System.Int32 lengthB)
    // Offset: 0x19FA1BC
    static int CompareOrdinalIgnoreCaseEx(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int lengthA, int lengthB);
    // static System.Int32 IndexOfStringOrdinalIgnoreCase(System.String source, System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x19FA1C0
    static int IndexOfStringOrdinalIgnoreCase(::Il2CppString* source, ::Il2CppString* value, int startIndex, int count);
    // static System.Int32 LastIndexOfStringOrdinalIgnoreCase(System.String source, System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x19FA268
    static int LastIndexOfStringOrdinalIgnoreCase(::Il2CppString* source, ::Il2CppString* value, int startIndex, int count);
    // public System.String get_CultureName()
    // Offset: 0x19FA2FC
    ::Il2CppString* get_CultureName();
    // public System.Object Clone()
    // Offset: 0x19FA304
    ::Il2CppObject* Clone();
    // System.Void SetReadOnlyState(System.Boolean readOnly)
    // Offset: 0x19FA394
    void SetReadOnlyState(bool readOnly);
    // public System.Char ToLower(System.Char c)
    // Offset: 0x19FA3A0
    ::Il2CppChar ToLower(::Il2CppChar c);
    // public System.String ToLower(System.String str)
    // Offset: 0x19FA9FC
    ::Il2CppString* ToLower(::Il2CppString* str);
    // static private System.Char ToLowerAsciiInvariant(System.Char c)
    // Offset: 0x19FA4FC
    static ::Il2CppChar ToLowerAsciiInvariant(::Il2CppChar c);
    // public System.Char ToUpper(System.Char c)
    // Offset: 0x19FAB7C
    ::Il2CppChar ToUpper(::Il2CppChar c);
    // public System.String ToUpper(System.String str)
    // Offset: 0x19FB0F0
    ::Il2CppString* ToUpper(::Il2CppString* str);
    // static private System.Char ToUpperAsciiInvariant(System.Char c)
    // Offset: 0x19FABE4
    static ::Il2CppChar ToUpperAsciiInvariant(::Il2CppChar c);
    // static private System.Boolean IsAscii(System.Char c)
    // Offset: 0x19FA408
    static bool IsAscii(::Il2CppChar c);
    // private System.Boolean get_IsAsciiCasingSameAsInvariant()
    // Offset: 0x19FA418
    bool get_IsAsciiCasingSameAsInvariant();
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0x19FB3A4
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // System.Int32 GetCaseInsensitiveHashCode(System.String str)
    // Offset: 0x19FB3A8
    int GetCaseInsensitiveHashCode(::Il2CppString* str);
    // System.Int32 GetCaseInsensitiveHashCode(System.String str, System.Boolean forceRandomizedHashing, System.Int64 additionalEntropy)
    // Offset: 0x19F9ECC
    int GetCaseInsensitiveHashCode(::Il2CppString* str, bool forceRandomizedHashing, int64_t additionalEntropy);
    // private System.Int32 GetInvariantCaseInsensitiveHashCode(System.String str)
    // Offset: 0x19FB3B0
    int GetInvariantCaseInsensitiveHashCode(::Il2CppString* str);
    // private System.String ToUpperInternal(System.String str)
    // Offset: 0x19FB184
    ::Il2CppString* ToUpperInternal(::Il2CppString* str);
    // private System.String ToLowerInternal(System.String str)
    // Offset: 0x19FAA90
    ::Il2CppString* ToLowerInternal(::Il2CppString* str);
    // private System.Char ToUpperInternal(System.Char c)
    // Offset: 0x19FAC00
    ::Il2CppChar ToUpperInternal(::Il2CppChar c);
    // private System.Char ToLowerInternal(System.Char c)
    // Offset: 0x19FA518
    ::Il2CppChar ToLowerInternal(::Il2CppChar c);
    // static private System.Int32 InternalCompareStringOrdinalIgnoreCase(System.String strA, System.Int32 indexA, System.String strB, System.Int32 indexB, System.Int32 lenA, System.Int32 lenB)
    // Offset: 0x19F9FF8
    static int InternalCompareStringOrdinalIgnoreCase(::Il2CppString* strA, int indexA, ::Il2CppString* strB, int indexB, int lenA, int lenB);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x19FB270
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x19FB324
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x19FB344
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // System.Void .ctor()
    // Offset: 0x19FB4F8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Globalization::TextInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextInfo*, creationType>()));
    }
  }; // System.Globalization.TextInfo
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::TextInfo*, "System.Globalization", "TextInfo");
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_Invariant
// Il2CppName: get_Invariant
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnDeserializing
// Il2CppName: OnDeserializing
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnDeserialized
// Il2CppName: OnDeserialized
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnDeserialized
// Il2CppName: OnDeserialized
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::OnSerializing
// Il2CppName: OnSerializing
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetHashCodeOrdinalIgnoreCase
// Il2CppName: GetHashCodeOrdinalIgnoreCase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetHashCodeOrdinalIgnoreCase
// Il2CppName: GetHashCodeOrdinalIgnoreCase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::CompareOrdinalIgnoreCase
// Il2CppName: CompareOrdinalIgnoreCase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::CompareOrdinalIgnoreCaseEx
// Il2CppName: CompareOrdinalIgnoreCaseEx
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::IndexOfStringOrdinalIgnoreCase
// Il2CppName: IndexOfStringOrdinalIgnoreCase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::LastIndexOfStringOrdinalIgnoreCase
// Il2CppName: LastIndexOfStringOrdinalIgnoreCase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_CultureName
// Il2CppName: get_CultureName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::Clone
// Il2CppName: Clone
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::SetReadOnlyState
// Il2CppName: SetReadOnlyState
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLower
// Il2CppName: ToLower
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLower
// Il2CppName: ToLower
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLowerAsciiInvariant
// Il2CppName: ToLowerAsciiInvariant
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpper
// Il2CppName: ToUpper
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpper
// Il2CppName: ToUpper
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperAsciiInvariant
// Il2CppName: ToUpperAsciiInvariant
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::IsAscii
// Il2CppName: IsAscii
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::get_IsAsciiCasingSameAsInvariant
// Il2CppName: get_IsAsciiCasingSameAsInvariant
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
// Il2CppName: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetCaseInsensitiveHashCode
// Il2CppName: GetCaseInsensitiveHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetCaseInsensitiveHashCode
// Il2CppName: GetCaseInsensitiveHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetInvariantCaseInsensitiveHashCode
// Il2CppName: GetInvariantCaseInsensitiveHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperInternal
// Il2CppName: ToUpperInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLowerInternal
// Il2CppName: ToLowerInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToUpperInternal
// Il2CppName: ToUpperInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToLowerInternal
// Il2CppName: ToLowerInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::InternalCompareStringOrdinalIgnoreCase
// Il2CppName: InternalCompareStringOrdinalIgnoreCase
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::GetHashCode
// Il2CppName: GetHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::ToString
// Il2CppName: ToString
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Globalization::TextInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
