// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNodeType
  struct XmlNodeType;
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlDocument
  class XmlDocument;
  // Forward declaring type: XmlSpace
  struct XmlSpace;
  // Forward declaring type: XmlDeclaration
  class XmlDeclaration;
  // Forward declaring type: XmlDocumentType
  class XmlDocumentType;
  // Forward declaring type: XmlElement
  class XmlElement;
  // Forward declaring type: XmlNamespaceScope
  struct XmlNamespaceScope;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: IXmlSchemaInfo
  class IXmlSchemaInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Forward declaring type: XmlNodeReaderNavigator
  class XmlNodeReaderNavigator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::XmlNodeReaderNavigator);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlNodeReaderNavigator*, "System.Xml", "XmlNodeReaderNavigator");
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlNodeReaderNavigator
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlNodeReaderNavigator : public ::Il2CppObject {
    public:
    // Nested type: ::System::Xml::XmlNodeReaderNavigator::VirtualAttribute
    struct VirtualAttribute;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlNodeReaderNavigator/System.Xml.VirtualAttribute
    // [TokenAttribute] Offset: FFFFFFFF
    struct VirtualAttribute/*, public ::System::ValueType*/ {
      public:
      public:
      // System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // System.String value
      // Size: 0x8
      // Offset: 0x8
      ::StringW value;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: VirtualAttribute
      constexpr VirtualAttribute(::StringW name_ = {}, ::StringW value_ = {}) noexcept : name{name_}, value{value_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: System.String name
      ::StringW& dyn_name();
      // Get instance field reference: System.String value
      ::StringW& dyn_value();
      // System.Void .ctor(System.String name, System.String value)
      // Offset: 0x14D2E28
      // ABORTED: conflicts with another method.  VirtualAttribute(::StringW name, ::StringW value);
    }; // System.Xml.XmlNodeReaderNavigator/System.Xml.VirtualAttribute
    #pragma pack(pop)
    static check_size<sizeof(XmlNodeReaderNavigator::VirtualAttribute), 8 + sizeof(::StringW)> __System_Xml_XmlNodeReaderNavigator_VirtualAttributeSizeCheck;
    static_assert(sizeof(XmlNodeReaderNavigator::VirtualAttribute) == 0x10);
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Xml.XmlNode curNode
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlNode* curNode;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    // private System.Xml.XmlNode elemNode
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::XmlNode* elemNode;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    // private System.Xml.XmlNode logNode
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlNode* logNode;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNode*) == 0x8);
    // private System.Int32 attrIndex
    // Size: 0x4
    // Offset: 0x28
    int attrIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 logAttrIndex
    // Size: 0x4
    // Offset: 0x2C
    int logAttrIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Xml.XmlNameTable nameTable
    // Size: 0x8
    // Offset: 0x30
    ::System::Xml::XmlNameTable* nameTable;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlNameTable*) == 0x8);
    // private System.Xml.XmlDocument doc
    // Size: 0x8
    // Offset: 0x38
    ::System::Xml::XmlDocument* doc;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlDocument*) == 0x8);
    // private System.Int32 nAttrInd
    // Size: 0x4
    // Offset: 0x40
    int nAttrInd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nDeclarationAttrCount
    // Size: 0x4
    // Offset: 0x44
    int nDeclarationAttrCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nDocTypeAttrCount
    // Size: 0x4
    // Offset: 0x48
    int nDocTypeAttrCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nLogLevel
    // Size: 0x4
    // Offset: 0x4C
    int nLogLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nLogAttrInd
    // Size: 0x4
    // Offset: 0x50
    int nLogAttrInd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean bLogOnAttrVal
    // Size: 0x1
    // Offset: 0x54
    bool bLogOnAttrVal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean bCreatedOnAttribute
    // Size: 0x1
    // Offset: 0x55
    bool bCreatedOnAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bCreatedOnAttribute and: decNodeAttributes
    char __padding13[0x2] = {};
    // System.Xml.XmlNodeReaderNavigator/System.Xml.VirtualAttribute[] decNodeAttributes
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::System::Xml::XmlNodeReaderNavigator::VirtualAttribute> decNodeAttributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlNodeReaderNavigator::VirtualAttribute>) == 0x8);
    // System.Xml.XmlNodeReaderNavigator/System.Xml.VirtualAttribute[] docTypeNodeAttributes
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::System::Xml::XmlNodeReaderNavigator::VirtualAttribute> docTypeNodeAttributes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Xml::XmlNodeReaderNavigator::VirtualAttribute>) == 0x8);
    // private System.Boolean bOnAttrVal
    // Size: 0x1
    // Offset: 0x68
    bool bOnAttrVal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Xml.XmlNode curNode
    ::System::Xml::XmlNode*& dyn_curNode();
    // Get instance field reference: private System.Xml.XmlNode elemNode
    ::System::Xml::XmlNode*& dyn_elemNode();
    // Get instance field reference: private System.Xml.XmlNode logNode
    ::System::Xml::XmlNode*& dyn_logNode();
    // Get instance field reference: private System.Int32 attrIndex
    int& dyn_attrIndex();
    // Get instance field reference: private System.Int32 logAttrIndex
    int& dyn_logAttrIndex();
    // Get instance field reference: private System.Xml.XmlNameTable nameTable
    ::System::Xml::XmlNameTable*& dyn_nameTable();
    // Get instance field reference: private System.Xml.XmlDocument doc
    ::System::Xml::XmlDocument*& dyn_doc();
    // Get instance field reference: private System.Int32 nAttrInd
    int& dyn_nAttrInd();
    // Get instance field reference: private System.Int32 nDeclarationAttrCount
    int& dyn_nDeclarationAttrCount();
    // Get instance field reference: private System.Int32 nDocTypeAttrCount
    int& dyn_nDocTypeAttrCount();
    // Get instance field reference: private System.Int32 nLogLevel
    int& dyn_nLogLevel();
    // Get instance field reference: private System.Int32 nLogAttrInd
    int& dyn_nLogAttrInd();
    // Get instance field reference: private System.Boolean bLogOnAttrVal
    bool& dyn_bLogOnAttrVal();
    // Get instance field reference: private System.Boolean bCreatedOnAttribute
    bool& dyn_bCreatedOnAttribute();
    // Get instance field reference: System.Xml.XmlNodeReaderNavigator/System.Xml.VirtualAttribute[] decNodeAttributes
    ::ArrayW<::System::Xml::XmlNodeReaderNavigator::VirtualAttribute>& dyn_decNodeAttributes();
    // Get instance field reference: System.Xml.XmlNodeReaderNavigator/System.Xml.VirtualAttribute[] docTypeNodeAttributes
    ::ArrayW<::System::Xml::XmlNodeReaderNavigator::VirtualAttribute>& dyn_docTypeNodeAttributes();
    // Get instance field reference: private System.Boolean bOnAttrVal
    bool& dyn_bOnAttrVal();
    // public System.Xml.XmlNodeType get_NodeType()
    // Offset: 0x14D2E30
    ::System::Xml::XmlNodeType get_NodeType();
    // public System.String get_NamespaceURI()
    // Offset: 0x14D2E80
    ::StringW get_NamespaceURI();
    // public System.String get_Name()
    // Offset: 0x14D2EA4
    ::StringW get_Name();
    // public System.String get_LocalName()
    // Offset: 0x14D2FC8
    ::StringW get_LocalName();
    // System.Boolean get_CreatedOnAttribute()
    // Offset: 0x14D307C
    bool get_CreatedOnAttribute();
    // public System.String get_Prefix()
    // Offset: 0x14D3084
    ::StringW get_Prefix();
    // public System.String get_Value()
    // Offset: 0x14D30A8
    ::StringW get_Value();
    // public System.String get_BaseURI()
    // Offset: 0x14D347C
    ::StringW get_BaseURI();
    // public System.Xml.XmlSpace get_XmlSpace()
    // Offset: 0x14D34A0
    ::System::Xml::XmlSpace get_XmlSpace();
    // public System.String get_XmlLang()
    // Offset: 0x14D34C4
    ::StringW get_XmlLang();
    // public System.Boolean get_IsEmptyElement()
    // Offset: 0x14D34E8
    bool get_IsEmptyElement();
    // public System.Boolean get_IsDefault()
    // Offset: 0x14D359C
    bool get_IsDefault();
    // public System.Xml.Schema.IXmlSchemaInfo get_SchemaInfo()
    // Offset: 0x14D3680
    ::System::Xml::Schema::IXmlSchemaInfo* get_SchemaInfo();
    // public System.Xml.XmlNameTable get_NameTable()
    // Offset: 0x14D36A4
    ::System::Xml::XmlNameTable* get_NameTable();
    // public System.Int32 get_AttributeCount()
    // Offset: 0x14D36AC
    int get_AttributeCount();
    // private System.Boolean get_IsOnDeclOrDocType()
    // Offset: 0x14D4360
    bool get_IsOnDeclOrDocType();
    // public System.Xml.XmlDocument get_Document()
    // Offset: 0x14D5B34
    ::System::Xml::XmlDocument* get_Document();
    // public System.Void .ctor(System.Xml.XmlNode node)
    // Offset: 0x14D2C80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlNodeReaderNavigator* New_ctor(::System::Xml::XmlNode* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::XmlNodeReaderNavigator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlNodeReaderNavigator*, creationType>(node)));
    }
    // private System.Boolean IsLocalNameEmpty(System.Xml.XmlNodeType nt)
    // Offset: 0x14D2FA4
    bool IsLocalNameEmpty(::System::Xml::XmlNodeType nt);
    // private System.Void CheckIndexCondition(System.Int32 attributeIndex)
    // Offset: 0x14D3920
    void CheckIndexCondition(int attributeIndex);
    // private System.Void InitDecAttr()
    // Offset: 0x14D3304
    void InitDecAttr();
    // public System.String GetDeclarationAttr(System.Xml.XmlDeclaration decl, System.String name)
    // Offset: 0x14D39BC
    ::StringW GetDeclarationAttr(::System::Xml::XmlDeclaration* decl, ::StringW name);
    // public System.String GetDeclarationAttr(System.Int32 i)
    // Offset: 0x14D3A8C
    ::StringW GetDeclarationAttr(int i);
    // public System.Int32 GetDecAttrInd(System.String name)
    // Offset: 0x14D3AEC
    int GetDecAttrInd(::StringW name);
    // private System.Void InitDocTypeAttr()
    // Offset: 0x14D3818
    void InitDocTypeAttr();
    // public System.String GetDocumentTypeAttr(System.Xml.XmlDocumentType docType, System.String name)
    // Offset: 0x14D3B90
    ::StringW GetDocumentTypeAttr(::System::Xml::XmlDocumentType* docType, ::StringW name);
    // public System.String GetDocumentTypeAttr(System.Int32 i)
    // Offset: 0x14D3C38
    ::StringW GetDocumentTypeAttr(int i);
    // public System.Int32 GetDocTypeAttrInd(System.String name)
    // Offset: 0x14D3C98
    int GetDocTypeAttrInd(::StringW name);
    // private System.String GetAttributeFromElement(System.Xml.XmlElement elem, System.String name)
    // Offset: 0x14D3D3C
    ::StringW GetAttributeFromElement(::System::Xml::XmlElement* elem, ::StringW name);
    // public System.String GetAttribute(System.String name)
    // Offset: 0x14D3D84
    ::StringW GetAttribute(::StringW name);
    // private System.String GetAttributeFromElement(System.Xml.XmlElement elem, System.String name, System.String ns)
    // Offset: 0x14D3F24
    ::StringW GetAttributeFromElement(::System::Xml::XmlElement* elem, ::StringW name, ::StringW ns);
    // public System.String GetAttribute(System.String name, System.String ns)
    // Offset: 0x14D3F70
    ::StringW GetAttribute(::StringW name, ::StringW ns);
    // public System.String GetAttribute(System.Int32 attributeIndex)
    // Offset: 0x14D4130
    ::StringW GetAttribute(int attributeIndex);
    // public System.Void LogMove(System.Int32 level)
    // Offset: 0x14D4310
    void LogMove(int level);
    // public System.Void RollBackMove(ref System.Int32 level)
    // Offset: 0x14D4334
    void RollBackMove(ByRef<int> level);
    // public System.Void ResetToAttribute(ref System.Int32 level)
    // Offset: 0x14D439C
    void ResetToAttribute(ByRef<int> level);
    // public System.Void ResetMove(ref System.Int32 level, ref System.Xml.XmlNodeType nt)
    // Offset: 0x14D4434
    void ResetMove(ByRef<int> level, ByRef<::System::Xml::XmlNodeType> nt);
    // public System.Boolean MoveToAttribute(System.String name)
    // Offset: 0x14D4604
    bool MoveToAttribute(::StringW name);
    // private System.Boolean MoveToAttributeFromElement(System.Xml.XmlElement elem, System.String name, System.String ns)
    // Offset: 0x14D47CC
    bool MoveToAttributeFromElement(::System::Xml::XmlElement* elem, ::StringW name, ::StringW ns);
    // public System.Boolean MoveToAttribute(System.String name, System.String namespaceURI)
    // Offset: 0x14D466C
    bool MoveToAttribute(::StringW name, ::StringW namespaceURI);
    // public System.Void MoveToAttribute(System.Int32 attributeIndex)
    // Offset: 0x14D4890
    void MoveToAttribute(int attributeIndex);
    // public System.Boolean MoveToNextAttribute(ref System.Int32 level)
    // Offset: 0x14D4A74
    bool MoveToNextAttribute(ByRef<int> level);
    // public System.Boolean MoveToParent()
    // Offset: 0x14D4C3C
    bool MoveToParent();
    // public System.Boolean MoveToFirstChild()
    // Offset: 0x14D4C88
    bool MoveToFirstChild();
    // private System.Boolean MoveToNextSibling(System.Xml.XmlNode node)
    // Offset: 0x14D4CDC
    bool MoveToNextSibling(::System::Xml::XmlNode* node);
    // public System.Boolean MoveToNext()
    // Offset: 0x14D4D34
    bool MoveToNext();
    // public System.Boolean MoveToElement()
    // Offset: 0x14D4D80
    bool MoveToElement();
    // public System.String LookupNamespace(System.String prefix)
    // Offset: 0x14D4E0C
    ::StringW LookupNamespace(::StringW prefix);
    // System.String DefaultLookupNamespace(System.String prefix)
    // Offset: 0x14D5074
    ::StringW DefaultLookupNamespace(::StringW prefix);
    // System.String LookupPrefix(System.String namespaceName)
    // Offset: 0x14D5190
    ::StringW LookupPrefix(::StringW namespaceName);
    // System.Collections.Generic.IDictionary`2<System.String,System.String> GetNamespacesInScope(System.Xml.XmlNamespaceScope scope)
    // Offset: 0x14D5518
    ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* GetNamespacesInScope(::System::Xml::XmlNamespaceScope scope);
    // public System.Boolean ReadAttributeValue(ref System.Int32 level, ref System.Boolean bResolveEntity, ref System.Xml.XmlNodeType nt)
    // Offset: 0x14D5970
    bool ReadAttributeValue(ByRef<int> level, ByRef<bool> bResolveEntity, ByRef<::System::Xml::XmlNodeType> nt);
  }; // System.Xml.XmlNodeReaderNavigator
  #pragma pack(pop)
  static check_size<sizeof(XmlNodeReaderNavigator), 104 + sizeof(bool)> __System_Xml_XmlNodeReaderNavigatorSizeCheck;
  static_assert(sizeof(XmlNodeReaderNavigator) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::XmlNodeReaderNavigator::VirtualAttribute, "System.Xml", "XmlNodeReaderNavigator/VirtualAttribute");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_NodeType
// Il2CppName: get_NodeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNodeType (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_NodeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_NodeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_NamespaceURI
// Il2CppName: get_NamespaceURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_NamespaceURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_NamespaceURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_LocalName
// Il2CppName: get_LocalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_LocalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_LocalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_CreatedOnAttribute
// Il2CppName: get_CreatedOnAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_CreatedOnAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_CreatedOnAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_BaseURI
// Il2CppName: get_BaseURI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_BaseURI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_BaseURI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_XmlSpace
// Il2CppName: get_XmlSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlSpace (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_XmlSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_XmlSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_XmlLang
// Il2CppName: get_XmlLang
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_XmlLang)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_XmlLang", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_IsEmptyElement
// Il2CppName: get_IsEmptyElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_IsEmptyElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_IsEmptyElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_IsDefault
// Il2CppName: get_IsDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_IsDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_IsDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_SchemaInfo
// Il2CppName: get_SchemaInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::IXmlSchemaInfo* (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_SchemaInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_SchemaInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_NameTable
// Il2CppName: get_NameTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNameTable* (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_NameTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_NameTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_AttributeCount
// Il2CppName: get_AttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_AttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_AttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_IsOnDeclOrDocType
// Il2CppName: get_IsOnDeclOrDocType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_IsOnDeclOrDocType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_IsOnDeclOrDocType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::get_Document
// Il2CppName: get_Document
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlDocument* (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::get_Document)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "get_Document", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::IsLocalNameEmpty
// Il2CppName: IsLocalNameEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlNodeType)>(&System::Xml::XmlNodeReaderNavigator::IsLocalNameEmpty)> {
  static const MethodInfo* get() {
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "IsLocalNameEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nt});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::CheckIndexCondition
// Il2CppName: CheckIndexCondition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)(int)>(&System::Xml::XmlNodeReaderNavigator::CheckIndexCondition)> {
  static const MethodInfo* get() {
    static auto* attributeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "CheckIndexCondition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::InitDecAttr
// Il2CppName: InitDecAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::InitDecAttr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "InitDecAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetDeclarationAttr
// Il2CppName: GetDeclarationAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlDeclaration*, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetDeclarationAttr)> {
  static const MethodInfo* get() {
    static auto* decl = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDeclaration")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetDeclarationAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{decl, name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetDeclarationAttr
// Il2CppName: GetDeclarationAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(int)>(&System::Xml::XmlNodeReaderNavigator::GetDeclarationAttr)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetDeclarationAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetDecAttrInd
// Il2CppName: GetDecAttrInd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetDecAttrInd)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetDecAttrInd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::InitDocTypeAttr
// Il2CppName: InitDocTypeAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::InitDocTypeAttr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "InitDocTypeAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetDocumentTypeAttr
// Il2CppName: GetDocumentTypeAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlDocumentType*, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetDocumentTypeAttr)> {
  static const MethodInfo* get() {
    static auto* docType = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocumentType")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetDocumentTypeAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{docType, name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetDocumentTypeAttr
// Il2CppName: GetDocumentTypeAttr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(int)>(&System::Xml::XmlNodeReaderNavigator::GetDocumentTypeAttr)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetDocumentTypeAttr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetDocTypeAttrInd
// Il2CppName: GetDocTypeAttrInd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetDocTypeAttrInd)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetDocTypeAttrInd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetAttributeFromElement
// Il2CppName: GetAttributeFromElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlElement*, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetAttributeFromElement)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetAttributeFromElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem, name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetAttributeFromElement
// Il2CppName: GetAttributeFromElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlElement*, ::StringW, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetAttributeFromElement)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetAttributeFromElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem, name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::StringW, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetAttribute
// Il2CppName: GetAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(int)>(&System::Xml::XmlNodeReaderNavigator::GetAttribute)> {
  static const MethodInfo* get() {
    static auto* attributeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::LogMove
// Il2CppName: LogMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)(int)>(&System::Xml::XmlNodeReaderNavigator::LogMove)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "LogMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::RollBackMove
// Il2CppName: RollBackMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)(ByRef<int>)>(&System::Xml::XmlNodeReaderNavigator::RollBackMove)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "RollBackMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::ResetToAttribute
// Il2CppName: ResetToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)(ByRef<int>)>(&System::Xml::XmlNodeReaderNavigator::ResetToAttribute)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "ResetToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::ResetMove
// Il2CppName: ResetMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)(ByRef<int>, ByRef<::System::Xml::XmlNodeType>)>(&System::Xml::XmlNodeReaderNavigator::ResetMove)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "ResetMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, nt});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToAttributeFromElement
// Il2CppName: MoveToAttributeFromElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlElement*, ::StringW, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::MoveToAttributeFromElement)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToAttributeFromElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem, name, ns});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(::StringW, ::StringW)>(&System::Xml::XmlNodeReaderNavigator::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, namespaceURI});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToAttribute
// Il2CppName: MoveToAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::XmlNodeReaderNavigator::*)(int)>(&System::Xml::XmlNodeReaderNavigator::MoveToAttribute)> {
  static const MethodInfo* get() {
    static auto* attributeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeIndex});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToNextAttribute
// Il2CppName: MoveToNextAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(ByRef<int>)>(&System::Xml::XmlNodeReaderNavigator::MoveToNextAttribute)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToNextAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToParent
// Il2CppName: MoveToParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::MoveToParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToFirstChild
// Il2CppName: MoveToFirstChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::MoveToFirstChild)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToFirstChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToNextSibling
// Il2CppName: MoveToNextSibling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlNode*)>(&System::Xml::XmlNodeReaderNavigator::MoveToNextSibling)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToNextSibling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToNext
// Il2CppName: MoveToNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::MoveToNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)()>(&System::Xml::XmlNodeReaderNavigator::MoveToElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::LookupNamespace
// Il2CppName: LookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::LookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "LookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::DefaultLookupNamespace
// Il2CppName: DefaultLookupNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::DefaultLookupNamespace)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "DefaultLookupNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::LookupPrefix
// Il2CppName: LookupPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::XmlNodeReaderNavigator::*)(::StringW)>(&System::Xml::XmlNodeReaderNavigator::LookupPrefix)> {
  static const MethodInfo* get() {
    static auto* namespaceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "LookupPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{namespaceName});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::GetNamespacesInScope
// Il2CppName: GetNamespacesInScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* (System::Xml::XmlNodeReaderNavigator::*)(::System::Xml::XmlNamespaceScope)>(&System::Xml::XmlNodeReaderNavigator::GetNamespacesInScope)> {
  static const MethodInfo* get() {
    static auto* scope = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNamespaceScope")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "GetNamespacesInScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scope});
  }
};
// Writing MetadataGetter for method: System::Xml::XmlNodeReaderNavigator::ReadAttributeValue
// Il2CppName: ReadAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::XmlNodeReaderNavigator::*)(ByRef<int>, ByRef<bool>, ByRef<::System::Xml::XmlNodeType>)>(&System::Xml::XmlNodeReaderNavigator::ReadAttributeValue)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bResolveEntity = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* nt = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNodeType")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::XmlNodeReaderNavigator*), "ReadAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, bResolveEntity, nt});
  }
};
