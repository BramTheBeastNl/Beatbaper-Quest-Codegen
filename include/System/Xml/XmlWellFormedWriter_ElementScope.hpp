// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlWellFormedWriter
#include "System/Xml/XmlWellFormedWriter.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Xml.XmlSpace
#include "System/Xml/XmlSpace.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlRawWriter
  class XmlRawWriter;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x30
  // Autogenerated type: System.Xml.XmlWellFormedWriter/ElementScope
  // [] Offset: FFFFFFFF
  struct XmlWellFormedWriter::ElementScope/*, public System::ValueType*/ {
    public:
    // System.Int32 prevNSTop
    // Size: 0x4
    // Offset: 0x0
    int prevNSTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: prevNSTop and: prefix
    private: char __padding0[0x4] = {};
    public:
    // System.String prefix
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppString* prefix;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String localName
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* localName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.String namespaceUri
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* namespaceUri;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Xml.XmlSpace xmlSpace
    // Size: 0x4
    // Offset: 0x20
    System::Xml::XmlSpace xmlSpace;
    // Field size check
    static_assert(sizeof(System::Xml::XmlSpace) == 0x4);
    // Padding between fields: xmlSpace and: xmlLang
    private: char __padding4[0x4] = {};
    public:
    // System.String xmlLang
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* xmlLang;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: ElementScope
    constexpr ElementScope(int prevNSTop_ = {}, ::Il2CppString* prefix_ = {}, ::Il2CppString* localName_ = {}, ::Il2CppString* namespaceUri_ = {}, System::Xml::XmlSpace xmlSpace_ = {}, ::Il2CppString* xmlLang_ = {}) noexcept : prevNSTop{prevNSTop_}, prefix{prefix_}, localName{localName_}, namespaceUri{namespaceUri_}, xmlSpace{xmlSpace_}, xmlLang{xmlLang_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // System.Void Set(System.String prefix, System.String localName, System.String namespaceUri, System.Int32 prevNSTop)
    // Offset: 0xCB7860
    void Set(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* namespaceUri, int prevNSTop);
    // System.Void WriteEndElement(System.Xml.XmlRawWriter rawWriter)
    // Offset: 0xCB7868
    void WriteEndElement(System::Xml::XmlRawWriter* rawWriter);
    // System.Void WriteFullEndElement(System.Xml.XmlRawWriter rawWriter)
    // Offset: 0xCB7870
    void WriteFullEndElement(System::Xml::XmlRawWriter* rawWriter);
  }; // System.Xml.XmlWellFormedWriter/ElementScope
  static check_size<sizeof(XmlWellFormedWriter::ElementScope), 40 + sizeof(::Il2CppString*)> __System_Xml_XmlWellFormedWriter_ElementScopeSizeCheck;
  static_assert(sizeof(XmlWellFormedWriter::ElementScope) == 0x30);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlWellFormedWriter::ElementScope, "System.Xml", "XmlWellFormedWriter/ElementScope");
#pragma pack(pop)
