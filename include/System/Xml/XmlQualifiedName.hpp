// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlQualifiedName
  class XmlQualifiedName : public ::Il2CppObject {
    public:
    // Nested type: System::Xml::XmlQualifiedName::HashCodeOfStringDelegate
    class HashCodeOfStringDelegate;
    // private System.String name
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String ns
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* ns;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 hash
    // Size: 0x4
    // Offset: 0x20
    int hash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: XmlQualifiedName
    XmlQualifiedName(::Il2CppString* name_ = {}, ::Il2CppString* ns_ = {}, int hash_ = {}) noexcept : name{name_}, ns{ns_}, hash{hash_} {}
    // Get static field: static private System.Xml.XmlQualifiedName/HashCodeOfStringDelegate hashCodeDelegate
    static System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* _get_hashCodeDelegate();
    // Set static field: static private System.Xml.XmlQualifiedName/HashCodeOfStringDelegate hashCodeDelegate
    static void _set_hashCodeDelegate(System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* value);
    // Get static field: static public readonly System.Xml.XmlQualifiedName Empty
    static System::Xml::XmlQualifiedName* _get_Empty();
    // Set static field: static public readonly System.Xml.XmlQualifiedName Empty
    static void _set_Empty(System::Xml::XmlQualifiedName* value);
    // public System.Void .ctor(System.String name)
    // Offset: 0x17B0740
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlQualifiedName* New_ctor(::Il2CppString* name) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlQualifiedName*, creationType>(name)));
    }
    // public System.Void .ctor(System.String name, System.String ns)
    // Offset: 0x17B06A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlQualifiedName* New_ctor(::Il2CppString* name, ::Il2CppString* ns) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlQualifiedName*, creationType>(name, ns)));
    }
    // public System.String get_Namespace()
    // Offset: 0x17B07A8
    ::Il2CppString* get_Namespace();
    // public System.String get_Name()
    // Offset: 0x17B07B0
    ::Il2CppString* get_Name();
    // static private System.Xml.XmlQualifiedName/HashCodeOfStringDelegate GetHashCodeDelegate()
    // Offset: 0x17B0898
    static System::Xml::XmlQualifiedName::HashCodeOfStringDelegate* GetHashCodeDelegate();
    // static private System.Boolean IsRandomizedHashingDisabled()
    // Offset: 0x17B1080
    static bool IsRandomizedHashingDisabled();
    // static private System.Int32 GetHashCodeOfString(System.String s, System.Int32 length, System.Int64 additionalEntropy)
    // Offset: 0x17B1098
    static int GetHashCodeOfString(::Il2CppString* s, int length, int64_t additionalEntropy);
    // System.Void Init(System.String name, System.String ns)
    // Offset: 0x17A8294
    void Init(::Il2CppString* name, ::Il2CppString* ns);
    // static private System.Void .cctor()
    // Offset: 0x17B10B4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x17A7EF0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlQualifiedName* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlQualifiedName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlQualifiedName*, creationType>()));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0x17B07B8
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x17B0E20
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0x17B0E98
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
  }; // System.Xml.XmlQualifiedName
  #pragma pack(pop)
  static check_size<sizeof(XmlQualifiedName), 32 + sizeof(int)> __System_Xml_XmlQualifiedNameSizeCheck;
  static_assert(sizeof(XmlQualifiedName) == 0x24);
  // static public System.Boolean op_Equality(System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b)
  // Offset: 0x17B1014
  bool operator ==(System::Xml::XmlQualifiedName* a, System::Xml::XmlQualifiedName& b);
  // static public System.Boolean op_Inequality(System.Xml.XmlQualifiedName a, System.Xml.XmlQualifiedName b)
  // Offset: 0x17B0F94
  bool operator !=(System::Xml::XmlQualifiedName* a, System::Xml::XmlQualifiedName& b);
}
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlQualifiedName*, "System.Xml", "XmlQualifiedName");
