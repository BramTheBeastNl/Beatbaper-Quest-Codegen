// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Schema.XmlSchemaParticle
#include "System/Xml/Schema/XmlSchemaParticle.hpp"
// Including type: System.Xml.Schema.XmlSchemaContentProcessing
#include "System/Xml/Schema/XmlSchemaContentProcessing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: NamespaceList
  class NamespaceList;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaAny
  class XmlSchemaAny;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Xml::Schema::XmlSchemaAny);
DEFINE_IL2CPP_ARG_TYPE(::System::Xml::Schema::XmlSchemaAny*, "System.Xml.Schema", "XmlSchemaAny");
// Type namespace: System.Xml.Schema
namespace System::Xml::Schema {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.Schema.XmlSchemaAny
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlSchemaAny : public ::System::Xml::Schema::XmlSchemaParticle {
    public:
    // Writing base type padding for base size: 0x74 to desired offset: 0x78
    char ___base_padding[0x4] = {};
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.String ns
    // Size: 0x8
    // Offset: 0x78
    ::StringW ns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.Schema.XmlSchemaContentProcessing processContents
    // Size: 0x4
    // Offset: 0x80
    ::System::Xml::Schema::XmlSchemaContentProcessing processContents;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaContentProcessing) == 0x4);
    // Padding between fields: processContents and: namespaceList
    char __padding1[0x4] = {};
    // private System.Xml.Schema.NamespaceList namespaceList
    // Size: 0x8
    // Offset: 0x88
    ::System::Xml::Schema::NamespaceList* namespaceList;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::NamespaceList*) == 0x8);
    public:
    // Get instance field reference: private System.String ns
    ::StringW& dyn_ns();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaContentProcessing processContents
    ::System::Xml::Schema::XmlSchemaContentProcessing& dyn_processContents();
    // Get instance field reference: private System.Xml.Schema.NamespaceList namespaceList
    ::System::Xml::Schema::NamespaceList*& dyn_namespaceList();
    // public System.String get_Namespace()
    // Offset: 0x18ABEFC
    ::StringW get_Namespace();
    // public System.Void set_Namespace(System.String value)
    // Offset: 0x18ABF04
    void set_Namespace(::StringW value);
    // public System.Void set_ProcessContents(System.Xml.Schema.XmlSchemaContentProcessing value)
    // Offset: 0x18ABF0C
    void set_ProcessContents(::System::Xml::Schema::XmlSchemaContentProcessing value);
    // System.Xml.Schema.NamespaceList get_NamespaceList()
    // Offset: 0x18ABF14
    ::System::Xml::Schema::NamespaceList* get_NamespaceList();
    // System.String get_ResolvedNamespace()
    // Offset: 0x18ABF1C
    ::StringW get_ResolvedNamespace();
    // System.Xml.Schema.XmlSchemaContentProcessing get_ProcessContentsCorrect()
    // Offset: 0x18ABF78
    ::System::Xml::Schema::XmlSchemaContentProcessing get_ProcessContentsCorrect();
    // System.Void BuildNamespaceList(System.String targetNamespace)
    // Offset: 0x18AC3B8
    void BuildNamespaceList(::StringW targetNamespace);
    // System.Void BuildNamespaceListV1Compat(System.String targetNamespace)
    // Offset: 0x18AC440
    void BuildNamespaceListV1Compat(::StringW targetNamespace);
    // System.Boolean Allows(System.Xml.XmlQualifiedName qname)
    // Offset: 0x18AC4DC
    bool Allows(::System::Xml::XmlQualifiedName* qname);
    // override System.String get_NameString()
    // Offset: 0x18ABF8C
    // Implemented from: System.Xml.Schema.XmlSchemaParticle
    // Base method: System.String XmlSchemaParticle::get_NameString()
    ::StringW get_NameString();
    // public System.Void .ctor()
    // Offset: 0x18AC508
    // Implemented from: System.Xml.Schema.XmlSchemaParticle
    // Base method: System.Void XmlSchemaParticle::.ctor()
    // Base method: System.Void XmlSchemaAnnotated::.ctor()
    // Base method: System.Void XmlSchemaObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlSchemaAny* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Xml::Schema::XmlSchemaAny::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlSchemaAny*, creationType>()));
    }
  }; // System.Xml.Schema.XmlSchemaAny
  #pragma pack(pop)
  static check_size<sizeof(XmlSchemaAny), 136 + sizeof(::System::Xml::Schema::NamespaceList*)> __System_Xml_Schema_XmlSchemaAnySizeCheck;
  static_assert(sizeof(XmlSchemaAny) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAny::*)()>(&System::Xml::Schema::XmlSchemaAny::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::set_Namespace
// Il2CppName: set_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAny::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAny::set_Namespace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "set_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::set_ProcessContents
// Il2CppName: set_ProcessContents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAny::*)(::System::Xml::Schema::XmlSchemaContentProcessing)>(&System::Xml::Schema::XmlSchemaAny::set_ProcessContents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaContentProcessing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "set_ProcessContents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::get_NamespaceList
// Il2CppName: get_NamespaceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::NamespaceList* (System::Xml::Schema::XmlSchemaAny::*)()>(&System::Xml::Schema::XmlSchemaAny::get_NamespaceList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "get_NamespaceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::get_ResolvedNamespace
// Il2CppName: get_ResolvedNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAny::*)()>(&System::Xml::Schema::XmlSchemaAny::get_ResolvedNamespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "get_ResolvedNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::get_ProcessContentsCorrect
// Il2CppName: get_ProcessContentsCorrect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaContentProcessing (System::Xml::Schema::XmlSchemaAny::*)()>(&System::Xml::Schema::XmlSchemaAny::get_ProcessContentsCorrect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "get_ProcessContentsCorrect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::BuildNamespaceList
// Il2CppName: BuildNamespaceList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAny::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAny::BuildNamespaceList)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "BuildNamespaceList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::BuildNamespaceListV1Compat
// Il2CppName: BuildNamespaceListV1Compat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Xml::Schema::XmlSchemaAny::*)(::StringW)>(&System::Xml::Schema::XmlSchemaAny::BuildNamespaceListV1Compat)> {
  static const MethodInfo* get() {
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "BuildNamespaceListV1Compat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::Allows
// Il2CppName: Allows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Xml::Schema::XmlSchemaAny::*)(::System::Xml::XmlQualifiedName*)>(&System::Xml::Schema::XmlSchemaAny::Allows)> {
  static const MethodInfo* get() {
    static auto* qname = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "Allows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{qname});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::get_NameString
// Il2CppName: get_NameString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Xml::Schema::XmlSchemaAny::*)()>(&System::Xml::Schema::XmlSchemaAny::get_NameString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Xml::Schema::XmlSchemaAny*), "get_NameString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Xml::Schema::XmlSchemaAny::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
