// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.XmlCharType
  struct XmlCharType/*, public System::ValueType*/ {
    public:
    // System.Byte[] charProperties
    // Size: 0x8
    // Offset: 0x0
    ::Array<uint8_t>* charProperties;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: XmlCharType
    constexpr XmlCharType(::Array<uint8_t>* charProperties_ = {}) noexcept : charProperties{charProperties_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Array<uint8_t>*
    constexpr operator ::Array<uint8_t>*() const noexcept {
      return charProperties;
    }
    // Get static field: static private System.Object s_Lock
    static ::Il2CppObject* _get_s_Lock();
    // Set static field: static private System.Object s_Lock
    static void _set_s_Lock(::Il2CppObject* value);
    // Get static field: static private System.Byte[] s_CharProperties
    static ::Array<uint8_t>* _get_s_CharProperties();
    // Set static field: static private System.Byte[] s_CharProperties
    static void _set_s_CharProperties(::Array<uint8_t>* value);
    // static private System.Object get_StaticLock()
    // Offset: 0x193452C
    static ::Il2CppObject* get_StaticLock();
    // static private System.Void InitInstance()
    // Offset: 0x19345BC
    static void InitInstance();
    // static private System.Void SetProperties(System.String ranges, System.Byte value)
    // Offset: 0x1934740
    static void SetProperties(::Il2CppString* ranges, uint8_t value);
    // private System.Void .ctor(System.Byte[] charProperties)
    // Offset: 0xF01610
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  XmlCharType(::Array<uint8_t>* charProperties)
    // static public System.Xml.XmlCharType get_Instance()
    // Offset: 0x1932960
    static System::Xml::XmlCharType get_Instance();
    // public System.Boolean IsWhiteSpace(System.Char ch)
    // Offset: 0xF01618
    bool IsWhiteSpace(::Il2CppChar ch);
    // public System.Boolean IsCharData(System.Char ch)
    // Offset: 0xF01620
    bool IsCharData(::Il2CppChar ch);
    // public System.Boolean IsPubidChar(System.Char ch)
    // Offset: 0xF01628
    bool IsPubidChar(::Il2CppChar ch);
    // System.Boolean IsTextChar(System.Char ch)
    // Offset: 0xF0162C
    bool IsTextChar(::Il2CppChar ch);
    // static System.Boolean IsHighSurrogate(System.Int32 ch)
    // Offset: 0x19349AC
    static bool IsHighSurrogate(int ch);
    // static System.Boolean IsLowSurrogate(System.Int32 ch)
    // Offset: 0x19349D0
    static bool IsLowSurrogate(int ch);
    // static System.Boolean IsSurrogate(System.Int32 ch)
    // Offset: 0x19349E0
    static bool IsSurrogate(int ch);
    // static System.Int32 CombineSurrogateChar(System.Int32 lowChar, System.Int32 highChar)
    // Offset: 0x192ABCC
    static int CombineSurrogateChar(int lowChar, int highChar);
    // System.Boolean IsOnlyWhitespace(System.String str)
    // Offset: 0xF01634
    bool IsOnlyWhitespace(::Il2CppString* str);
    // System.Int32 IsOnlyWhitespaceWithPos(System.String str)
    // Offset: 0xF01654
    int IsOnlyWhitespaceWithPos(::Il2CppString* str);
    // System.Int32 IsOnlyCharData(System.String str)
    // Offset: 0xF0165C
    int IsOnlyCharData(::Il2CppString* str);
    // System.Int32 IsPublicId(System.String str)
    // Offset: 0xF01664
    int IsPublicId(::Il2CppString* str);
    // static private System.Boolean InRange(System.Int32 value, System.Int32 start, System.Int32 end)
    // Offset: 0x19349BC
    static bool InRange(int value, int start, int end);
  }; // System.Xml.XmlCharType
  #pragma pack(pop)
  static check_size<sizeof(XmlCharType), 0 + sizeof(::Array<uint8_t>*)> __System_Xml_XmlCharTypeSizeCheck;
  static_assert(sizeof(XmlCharType) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlCharType, "System.Xml", "XmlCharType");
// Writing MetadataGetter for method: XmlCharType::get_StaticLock
// Il2CppName: get_StaticLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)()>(&XmlCharType::get_StaticLock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "get_StaticLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlCharType::InitInstance
// Il2CppName: InitInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&XmlCharType::InitInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "InitInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlCharType::SetProperties
// Il2CppName: SetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, uint8_t)>(&XmlCharType::SetProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "SetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::XmlCharType
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlCharType::*)(::Array<uint8_t>*)>(&XmlCharType::XmlCharType<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (XmlCharType::*)(::Array<uint8_t>*)>(&XmlCharType::XmlCharType<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Xml::XmlCharType (*)()>(&XmlCharType::get_Instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsWhiteSpace
// Il2CppName: IsWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsWhiteSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsCharData
// Il2CppName: IsCharData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsCharData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsCharData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsPubidChar
// Il2CppName: IsPubidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsPubidChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsPubidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsTextChar
// Il2CppName: IsTextChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppChar)>(&XmlCharType::IsTextChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsTextChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&XmlCharType::IsHighSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsLowSurrogate
// Il2CppName: IsLowSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&XmlCharType::IsLowSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsLowSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsSurrogate
// Il2CppName: IsSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&XmlCharType::IsSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::CombineSurrogateChar
// Il2CppName: CombineSurrogateChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&XmlCharType::CombineSurrogateChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "CombineSurrogateChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsOnlyWhitespace
// Il2CppName: IsOnlyWhitespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsOnlyWhitespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsOnlyWhitespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsOnlyWhitespaceWithPos
// Il2CppName: IsOnlyWhitespaceWithPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsOnlyWhitespaceWithPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsOnlyWhitespaceWithPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsOnlyCharData
// Il2CppName: IsOnlyCharData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsOnlyCharData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsOnlyCharData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::IsPublicId
// Il2CppName: IsPublicId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (XmlCharType::*)(::Il2CppString*)>(&XmlCharType::IsPublicId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "IsPublicId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: XmlCharType::InRange
// Il2CppName: InRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, int)>(&XmlCharType::InRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XmlCharType), "InRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
