// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: UnicodeCategory
  struct UnicodeCategory;
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Char
  // [ComVisibleAttribute] Offset: D7A440
  struct Char/*, public System::ValueType, public System::IComparable, public System::IConvertible, public System::IComparable_1<::Il2CppChar>, public System::IEquatable_1<::Il2CppChar>*/ {
    public:
    // System.Char m_value
    // Size: 0x2
    // Offset: 0x0
    ::Il2CppChar m_value;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Creating value type constructor for type: Char
    constexpr Char(::Il2CppChar m_value_ = {}) noexcept : m_value{m_value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<::Il2CppChar>
    operator System::IComparable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<System::IComparable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<::Il2CppChar>
    operator System::IEquatable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<::Il2CppChar>*>(this);
    }
    // Creating conversion operator: operator ::Il2CppChar
    constexpr operator ::Il2CppChar() const noexcept {
      return m_value;
    }
    // static field const value: static public System.Char MaxValue
    static constexpr const ::Il2CppChar MaxValue = u'\uffff';
    // Get static field: static public System.Char MaxValue
    static ::Il2CppChar _get_MaxValue();
    // Set static field: static public System.Char MaxValue
    static void _set_MaxValue(::Il2CppChar value);
    // static field const value: static public System.Char MinValue
    static constexpr const ::Il2CppChar MinValue = u'\u0000';
    // Get static field: static public System.Char MinValue
    static ::Il2CppChar _get_MinValue();
    // Set static field: static public System.Char MinValue
    static void _set_MinValue(::Il2CppChar value);
    // Get static field: static private readonly System.Byte[] categoryForLatin1
    static ::Array<uint8_t>* _get_categoryForLatin1();
    // Set static field: static private readonly System.Byte[] categoryForLatin1
    static void _set_categoryForLatin1(::Array<uint8_t>* value);
    // static field const value: static System.Int32 UNICODE_PLANE00_END
    static constexpr const int UNICODE_PLANE00_END = 65535;
    // Get static field: static System.Int32 UNICODE_PLANE00_END
    static int _get_UNICODE_PLANE00_END();
    // Set static field: static System.Int32 UNICODE_PLANE00_END
    static void _set_UNICODE_PLANE00_END(int value);
    // static field const value: static System.Int32 UNICODE_PLANE01_START
    static constexpr const int UNICODE_PLANE01_START = 65536;
    // Get static field: static System.Int32 UNICODE_PLANE01_START
    static int _get_UNICODE_PLANE01_START();
    // Set static field: static System.Int32 UNICODE_PLANE01_START
    static void _set_UNICODE_PLANE01_START(int value);
    // static field const value: static System.Int32 UNICODE_PLANE16_END
    static constexpr const int UNICODE_PLANE16_END = 1114111;
    // Get static field: static System.Int32 UNICODE_PLANE16_END
    static int _get_UNICODE_PLANE16_END();
    // Set static field: static System.Int32 UNICODE_PLANE16_END
    static void _set_UNICODE_PLANE16_END(int value);
    // static field const value: static System.Int32 HIGH_SURROGATE_START
    static constexpr const int HIGH_SURROGATE_START = 55296;
    // Get static field: static System.Int32 HIGH_SURROGATE_START
    static int _get_HIGH_SURROGATE_START();
    // Set static field: static System.Int32 HIGH_SURROGATE_START
    static void _set_HIGH_SURROGATE_START(int value);
    // static field const value: static System.Int32 LOW_SURROGATE_END
    static constexpr const int LOW_SURROGATE_END = 57343;
    // Get static field: static System.Int32 LOW_SURROGATE_END
    static int _get_LOW_SURROGATE_END();
    // Set static field: static System.Int32 LOW_SURROGATE_END
    static void _set_LOW_SURROGATE_END(int value);
    // static private System.Boolean IsLatin1(System.Char ch)
    // Offset: 0x177F2E4
    static bool IsLatin1(::Il2CppChar ch);
    // static private System.Boolean IsAscii(System.Char ch)
    // Offset: 0x177F2F4
    static bool IsAscii(::Il2CppChar ch);
    // static private System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(System.Char ch)
    // Offset: 0x177F304
    static System::Globalization::UnicodeCategory GetLatin1UnicodeCategory(::Il2CppChar ch);
    // public System.Boolean Equals(System.Char obj)
    // Offset: 0xEFD31C
    bool Equals(::Il2CppChar obj);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0xEFD32C
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Char value)
    // Offset: 0xEFD334
    int CompareTo(::Il2CppChar value);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xEFD348
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // static public System.String ToString(System.Char c)
    // Offset: 0x177F590
    static ::Il2CppString* ToString(::Il2CppChar c);
    // static public System.Char Parse(System.String s)
    // Offset: 0x177F618
    static ::Il2CppChar Parse(::Il2CppString* s);
    // static public System.Boolean IsDigit(System.Char c)
    // Offset: 0x177F6FC
    static bool IsDigit(::Il2CppChar c);
    // static System.Boolean CheckLetter(System.Globalization.UnicodeCategory uc)
    // Offset: 0x177F7B0
    static bool CheckLetter(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsLetter(System.Char c)
    // Offset: 0x177F7BC
    static bool IsLetter(::Il2CppChar c);
    // static private System.Boolean IsWhiteSpaceLatin1(System.Char c)
    // Offset: 0x177F8DC
    static bool IsWhiteSpaceLatin1(::Il2CppChar c);
    // static public System.Boolean IsWhiteSpace(System.Char c)
    // Offset: 0x177D030
    static bool IsWhiteSpace(::Il2CppChar c);
    // static public System.Boolean IsUpper(System.Char c)
    // Offset: 0x177F924
    static bool IsUpper(::Il2CppChar c);
    // static public System.Boolean IsLower(System.Char c)
    // Offset: 0x177FA20
    static bool IsLower(::Il2CppChar c);
    // static System.Boolean CheckPunctuation(System.Globalization.UnicodeCategory uc)
    // Offset: 0x177FB1C
    static bool CheckPunctuation(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsPunctuation(System.Char c)
    // Offset: 0x177FB2C
    static bool IsPunctuation(::Il2CppChar c);
    // static System.Boolean CheckLetterOrDigit(System.Globalization.UnicodeCategory uc)
    // Offset: 0x177FC18
    static bool CheckLetterOrDigit(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsLetterOrDigit(System.Char c)
    // Offset: 0x177FC34
    static bool IsLetterOrDigit(::Il2CppChar c);
    // static public System.Char ToUpper(System.Char c, System.Globalization.CultureInfo culture)
    // Offset: 0x177FD30
    static ::Il2CppChar ToUpper(::Il2CppChar c, System::Globalization::CultureInfo* culture);
    // static public System.Char ToUpper(System.Char c)
    // Offset: 0x177FDDC
    static ::Il2CppChar ToUpper(::Il2CppChar c);
    // static public System.Char ToUpperInvariant(System.Char c)
    // Offset: 0x177FE74
    static ::Il2CppChar ToUpperInvariant(::Il2CppChar c);
    // static public System.Char ToLower(System.Char c, System.Globalization.CultureInfo culture)
    // Offset: 0x177FF0C
    static ::Il2CppChar ToLower(::Il2CppChar c, System::Globalization::CultureInfo* culture);
    // static public System.Char ToLower(System.Char c)
    // Offset: 0x177FFB8
    static ::Il2CppChar ToLower(::Il2CppChar c);
    // static public System.Char ToLowerInvariant(System.Char c)
    // Offset: 0x1780050
    static ::Il2CppChar ToLowerInvariant(::Il2CppChar c);
    // public System.TypeCode GetTypeCode()
    // Offset: 0xEFD350
    System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0xEFD358
    bool System_IConvertible_ToBoolean(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0xEFD364
    ::Il2CppChar System_IConvertible_ToChar(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0xEFD36C
    int8_t System_IConvertible_ToSByte(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0xEFD374
    uint8_t System_IConvertible_ToByte(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0xEFD37C
    int16_t System_IConvertible_ToInt16(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0xEFD384
    uint16_t System_IConvertible_ToUInt16(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0xEFD38C
    int System_IConvertible_ToInt32(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0xEFD394
    uint System_IConvertible_ToUInt32(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0xEFD39C
    int64_t System_IConvertible_ToInt64(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0xEFD3A4
    uint64_t System_IConvertible_ToUInt64(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0xEFD3AC
    float System_IConvertible_ToSingle(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0xEFD3B8
    double System_IConvertible_ToDouble(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0xEFD3C4
    System::Decimal System_IConvertible_ToDecimal(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0xEFD3D0
    System::DateTime System_IConvertible_ToDateTime(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0xEFD3DC
    ::Il2CppObject* System_IConvertible_ToType(System::Type* type, System::IFormatProvider* provider);
    // static public System.Boolean IsControl(System.Char c)
    // Offset: 0x17809B8
    static bool IsControl(::Il2CppChar c);
    // static public System.Boolean IsLetterOrDigit(System.String s, System.Int32 index)
    // Offset: 0x1780A7C
    static bool IsLetterOrDigit(::Il2CppString* s, int index);
    // static System.Boolean CheckNumber(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1780C10
    static bool CheckNumber(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsNumber(System.Char c)
    // Offset: 0x1780C20
    static bool IsNumber(::Il2CppChar c);
    // static public System.Boolean IsNumber(System.String s, System.Int32 index)
    // Offset: 0x1780D40
    static bool IsNumber(::Il2CppString* s, int index);
    // static System.Boolean CheckSeparator(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1780EF8
    static bool CheckSeparator(System::Globalization::UnicodeCategory uc);
    // static private System.Boolean IsSeparatorLatin1(System.Char c)
    // Offset: 0x1780F08
    static bool IsSeparatorLatin1(::Il2CppChar c);
    // static public System.Boolean IsSeparator(System.Char c)
    // Offset: 0x1780F1C
    static bool IsSeparator(::Il2CppChar c);
    // static public System.Boolean IsSurrogate(System.Char c)
    // Offset: 0x178100C
    static bool IsSurrogate(::Il2CppChar c);
    // static public System.Boolean IsSurrogate(System.String s, System.Int32 index)
    // Offset: 0x178101C
    static bool IsSurrogate(::Il2CppString* s, int index);
    // static public System.Boolean IsWhiteSpace(System.String s, System.Int32 index)
    // Offset: 0x178111C
    static bool IsWhiteSpace(::Il2CppString* s, int index);
    // static public System.Globalization.UnicodeCategory GetUnicodeCategory(System.Char c)
    // Offset: 0x178128C
    static System::Globalization::UnicodeCategory GetUnicodeCategory(::Il2CppChar c);
    // static public System.Globalization.UnicodeCategory GetUnicodeCategory(System.String s, System.Int32 index)
    // Offset: 0x1781348
    static System::Globalization::UnicodeCategory GetUnicodeCategory(::Il2CppString* s, int index);
    // static public System.Boolean IsHighSurrogate(System.Char c)
    // Offset: 0x17814B8
    static bool IsHighSurrogate(::Il2CppChar c);
    // static public System.Boolean IsHighSurrogate(System.String s, System.Int32 index)
    // Offset: 0x17814C8
    static bool IsHighSurrogate(::Il2CppString* s, int index);
    // static public System.Boolean IsLowSurrogate(System.Char c)
    // Offset: 0x17815CC
    static bool IsLowSurrogate(::Il2CppChar c);
    // static public System.Boolean IsSurrogatePair(System.Char highSurrogate, System.Char lowSurrogate)
    // Offset: 0x17815DC
    static bool IsSurrogatePair(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate);
    // static public System.String ConvertFromUtf32(System.Int32 utf32)
    // Offset: 0x1781600
    static ::Il2CppString* ConvertFromUtf32(int utf32);
    // static public System.Int32 ConvertToUtf32(System.Char highSurrogate, System.Char lowSurrogate)
    // Offset: 0x1781754
    static int ConvertToUtf32(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate);
    // static private System.Void .cctor()
    // Offset: 0x1781898
    static void _cctor();
    // public override System.Int32 GetHashCode()
    // Offset: 0xEFD308
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xEFD314
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0xEFD340
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.Char
  #pragma pack(pop)
  static check_size<sizeof(Char), 0 + sizeof(::Il2CppChar)> __System_CharSizeCheck;
  static_assert(sizeof(Char) == 0x2);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Char, "System", "Char");
// Writing MetadataGetter for method: ::Il2CppChar::IsLatin1
// Il2CppName: IsLatin1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsLatin1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsLatin1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsAscii
// Il2CppName: IsAscii
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsAscii)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsAscii", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::GetLatin1UnicodeCategory
// Il2CppName: GetLatin1UnicodeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::UnicodeCategory (*)(::Il2CppChar)>(&::Il2CppChar::GetLatin1UnicodeCategory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "GetLatin1UnicodeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppChar::*)(::Il2CppChar)>(&::Il2CppChar::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppChar::*)(::Il2CppObject*)>(&::Il2CppChar::CompareTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppChar::*)(::Il2CppChar)>(&::Il2CppChar::CompareTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppChar)>(&::Il2CppChar::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppString*)>(&::Il2CppChar::Parse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsDigit
// Il2CppName: IsDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsDigit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CheckLetter
// Il2CppName: CheckLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Globalization::UnicodeCategory)>(&::Il2CppChar::CheckLetter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CheckLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::UnicodeCategory>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsLetter
// Il2CppName: IsLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsLetter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsWhiteSpaceLatin1
// Il2CppName: IsWhiteSpaceLatin1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsWhiteSpaceLatin1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsWhiteSpaceLatin1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsWhiteSpace
// Il2CppName: IsWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsWhiteSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsUpper
// Il2CppName: IsUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsUpper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsLower
// Il2CppName: IsLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsLower)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CheckPunctuation
// Il2CppName: CheckPunctuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Globalization::UnicodeCategory)>(&::Il2CppChar::CheckPunctuation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CheckPunctuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::UnicodeCategory>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsPunctuation
// Il2CppName: IsPunctuation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsPunctuation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsPunctuation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CheckLetterOrDigit
// Il2CppName: CheckLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Globalization::UnicodeCategory)>(&::Il2CppChar::CheckLetterOrDigit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CheckLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::UnicodeCategory>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsLetterOrDigit
// Il2CppName: IsLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsLetterOrDigit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar, System::Globalization::CultureInfo*)>(&::Il2CppChar::ToUpper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToUpper
// Il2CppName: ToUpper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&::Il2CppChar::ToUpper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToUpper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToUpperInvariant
// Il2CppName: ToUpperInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&::Il2CppChar::ToUpperInvariant)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToUpperInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar, System::Globalization::CultureInfo*)>(&::Il2CppChar::ToLower)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::Globalization::CultureInfo*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToLower
// Il2CppName: ToLower
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&::Il2CppChar::ToLower)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToLower", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToLowerInvariant
// Il2CppName: ToLowerInvariant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&::Il2CppChar::ToLowerInvariant)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToLowerInvariant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::GetTypeCode
// Il2CppName: GetTypeCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::TypeCode (::Il2CppChar::*)()>(&::Il2CppChar::GetTypeCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "GetTypeCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToBoolean
// Il2CppName: System.IConvertible.ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToBoolean)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToChar
// Il2CppName: System.IConvertible.ToChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToSByte
// Il2CppName: System.IConvertible.ToSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToSByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToByte
// Il2CppName: System.IConvertible.ToByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToByte)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToInt16
// Il2CppName: System.IConvertible.ToInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToUInt16
// Il2CppName: System.IConvertible.ToUInt16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToUInt16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToUInt16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToInt32
// Il2CppName: System.IConvertible.ToInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToUInt32
// Il2CppName: System.IConvertible.ToUInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToUInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToUInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToInt64
// Il2CppName: System.IConvertible.ToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToUInt64
// Il2CppName: System.IConvertible.ToUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToUInt64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToSingle
// Il2CppName: System.IConvertible.ToSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToSingle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToDouble
// Il2CppName: System.IConvertible.ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToDecimal
// Il2CppName: System.IConvertible.ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Decimal (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToDecimal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToDateTime
// Il2CppName: System.IConvertible.ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (::Il2CppChar::*)(System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToDateTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::System_IConvertible_ToType
// Il2CppName: System.IConvertible.ToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (::Il2CppChar::*)(System::Type*, System::IFormatProvider*)>(&::Il2CppChar::System_IConvertible_ToType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "System.IConvertible.ToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsControl
// Il2CppName: IsControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsControl)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsLetterOrDigit
// Il2CppName: IsLetterOrDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int)>(&::Il2CppChar::IsLetterOrDigit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsLetterOrDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CheckNumber
// Il2CppName: CheckNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Globalization::UnicodeCategory)>(&::Il2CppChar::CheckNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CheckNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::UnicodeCategory>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsNumber
// Il2CppName: IsNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsNumber
// Il2CppName: IsNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int)>(&::Il2CppChar::IsNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::CheckSeparator
// Il2CppName: CheckSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Globalization::UnicodeCategory)>(&::Il2CppChar::CheckSeparator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "CheckSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Globalization::UnicodeCategory>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsSeparatorLatin1
// Il2CppName: IsSeparatorLatin1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsSeparatorLatin1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsSeparatorLatin1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsSeparator
// Il2CppName: IsSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsSeparator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsSurrogate
// Il2CppName: IsSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsSurrogate
// Il2CppName: IsSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int)>(&::Il2CppChar::IsSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsWhiteSpace
// Il2CppName: IsWhiteSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int)>(&::Il2CppChar::IsWhiteSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsWhiteSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::GetUnicodeCategory
// Il2CppName: GetUnicodeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::UnicodeCategory (*)(::Il2CppChar)>(&::Il2CppChar::GetUnicodeCategory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "GetUnicodeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::GetUnicodeCategory
// Il2CppName: GetUnicodeCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Globalization::UnicodeCategory (*)(::Il2CppString*, int)>(&::Il2CppChar::GetUnicodeCategory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "GetUnicodeCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsHighSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int)>(&::Il2CppChar::IsHighSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsLowSurrogate
// Il2CppName: IsLowSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar)>(&::Il2CppChar::IsLowSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsLowSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::IsSurrogatePair
// Il2CppName: IsSurrogatePair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar, ::Il2CppChar)>(&::Il2CppChar::IsSurrogatePair)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "IsSurrogatePair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ConvertFromUtf32
// Il2CppName: ConvertFromUtf32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&::Il2CppChar::ConvertFromUtf32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ConvertFromUtf32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ConvertToUtf32
// Il2CppName: ConvertToUtf32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppChar, ::Il2CppChar)>(&::Il2CppChar::ConvertToUtf32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ConvertToUtf32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&::Il2CppChar::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (::Il2CppChar::*)()>(&::Il2CppChar::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (::Il2CppChar::*)(::Il2CppObject*)>(&::Il2CppChar::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ::Il2CppChar::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (::Il2CppChar::*)()>(&::Il2CppChar::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(::Il2CppChar), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
