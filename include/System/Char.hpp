// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.IConvertible
#include "System/IConvertible.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: UnicodeCategory
  struct UnicodeCategory;
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: DateTime
  struct DateTime;
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Char
  // [ComVisibleAttribute] Offset: CA425C
  struct Char/*, public System::ValueType, public System::IComparable, public System::IConvertible, public System::IComparable_1<::Il2CppChar>, public System::IEquatable_1<::Il2CppChar>*/ {
    public:
    // System.Char m_value
    // Size: 0x2
    // Offset: 0x0
    ::Il2CppChar m_value;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Creating value type constructor for type: Char
    constexpr Char(::Il2CppChar m_value_ = {}) noexcept : m_value{m_value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable
    operator System::IComparable() noexcept {
      return *reinterpret_cast<System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator System::IConvertible
    operator System::IConvertible() noexcept {
      return *reinterpret_cast<System::IConvertible*>(this);
    }
    // Creating interface conversion operator: operator System::IComparable_1<::Il2CppChar>
    operator System::IComparable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<System::IComparable_1<::Il2CppChar>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<::Il2CppChar>
    operator System::IEquatable_1<::Il2CppChar>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<::Il2CppChar>*>(this);
    }
    // Creating conversion operator: operator ::Il2CppChar
    constexpr operator ::Il2CppChar() const noexcept {
      return m_value;
    }
    // static field const value: static public System.Char MaxValue
    static constexpr const ::Il2CppChar MaxValue = u'\uffff';
    // Get static field: static public System.Char MaxValue
    static ::Il2CppChar _get_MaxValue();
    // Set static field: static public System.Char MaxValue
    static void _set_MaxValue(::Il2CppChar value);
    // static field const value: static public System.Char MinValue
    static constexpr const ::Il2CppChar MinValue = u'\u0000';
    // Get static field: static public System.Char MinValue
    static ::Il2CppChar _get_MinValue();
    // Set static field: static public System.Char MinValue
    static void _set_MinValue(::Il2CppChar value);
    // Get static field: static private readonly System.Byte[] categoryForLatin1
    static ::Array<uint8_t>* _get_categoryForLatin1();
    // Set static field: static private readonly System.Byte[] categoryForLatin1
    static void _set_categoryForLatin1(::Array<uint8_t>* value);
    // static field const value: static System.Int32 UNICODE_PLANE00_END
    static constexpr const int UNICODE_PLANE00_END = 65535;
    // Get static field: static System.Int32 UNICODE_PLANE00_END
    static int _get_UNICODE_PLANE00_END();
    // Set static field: static System.Int32 UNICODE_PLANE00_END
    static void _set_UNICODE_PLANE00_END(int value);
    // static field const value: static System.Int32 UNICODE_PLANE01_START
    static constexpr const int UNICODE_PLANE01_START = 65536;
    // Get static field: static System.Int32 UNICODE_PLANE01_START
    static int _get_UNICODE_PLANE01_START();
    // Set static field: static System.Int32 UNICODE_PLANE01_START
    static void _set_UNICODE_PLANE01_START(int value);
    // static field const value: static System.Int32 UNICODE_PLANE16_END
    static constexpr const int UNICODE_PLANE16_END = 1114111;
    // Get static field: static System.Int32 UNICODE_PLANE16_END
    static int _get_UNICODE_PLANE16_END();
    // Set static field: static System.Int32 UNICODE_PLANE16_END
    static void _set_UNICODE_PLANE16_END(int value);
    // static field const value: static System.Int32 HIGH_SURROGATE_START
    static constexpr const int HIGH_SURROGATE_START = 55296;
    // Get static field: static System.Int32 HIGH_SURROGATE_START
    static int _get_HIGH_SURROGATE_START();
    // Set static field: static System.Int32 HIGH_SURROGATE_START
    static void _set_HIGH_SURROGATE_START(int value);
    // static field const value: static System.Int32 LOW_SURROGATE_END
    static constexpr const int LOW_SURROGATE_END = 57343;
    // Get static field: static System.Int32 LOW_SURROGATE_END
    static int _get_LOW_SURROGATE_END();
    // Set static field: static System.Int32 LOW_SURROGATE_END
    static void _set_LOW_SURROGATE_END(int value);
    // static private System.Boolean IsLatin1(System.Char ch)
    // Offset: 0x164816C
    static bool IsLatin1(::Il2CppChar ch);
    // static private System.Boolean IsAscii(System.Char ch)
    // Offset: 0x164817C
    static bool IsAscii(::Il2CppChar ch);
    // static private System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(System.Char ch)
    // Offset: 0x164818C
    static System::Globalization::UnicodeCategory GetLatin1UnicodeCategory(::Il2CppChar ch);
    // public System.Boolean Equals(System.Char obj)
    // Offset: 0xE09DBC
    bool Equals(::Il2CppChar obj);
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0xE09DCC
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Char value)
    // Offset: 0xE09DD4
    int CompareTo(::Il2CppChar value);
    // public System.String ToString(System.IFormatProvider provider)
    // Offset: 0xE09DE8
    ::Il2CppString* ToString(System::IFormatProvider* provider);
    // static public System.String ToString(System.Char c)
    // Offset: 0x1648418
    static ::Il2CppString* ToString(::Il2CppChar c);
    // static public System.Char Parse(System.String s)
    // Offset: 0x16484A0
    static ::Il2CppChar Parse(::Il2CppString* s);
    // static public System.Boolean IsDigit(System.Char c)
    // Offset: 0x1648584
    static bool IsDigit(::Il2CppChar c);
    // static System.Boolean CheckLetter(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1648638
    static bool CheckLetter(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsLetter(System.Char c)
    // Offset: 0x1648644
    static bool IsLetter(::Il2CppChar c);
    // static private System.Boolean IsWhiteSpaceLatin1(System.Char c)
    // Offset: 0x1648764
    static bool IsWhiteSpaceLatin1(::Il2CppChar c);
    // static public System.Boolean IsWhiteSpace(System.Char c)
    // Offset: 0x1645EB8
    static bool IsWhiteSpace(::Il2CppChar c);
    // static public System.Boolean IsUpper(System.Char c)
    // Offset: 0x16487AC
    static bool IsUpper(::Il2CppChar c);
    // static public System.Boolean IsLower(System.Char c)
    // Offset: 0x16488A8
    static bool IsLower(::Il2CppChar c);
    // static System.Boolean CheckPunctuation(System.Globalization.UnicodeCategory uc)
    // Offset: 0x16489A4
    static bool CheckPunctuation(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsPunctuation(System.Char c)
    // Offset: 0x16489B4
    static bool IsPunctuation(::Il2CppChar c);
    // static System.Boolean CheckLetterOrDigit(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1648AA0
    static bool CheckLetterOrDigit(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsLetterOrDigit(System.Char c)
    // Offset: 0x1648ABC
    static bool IsLetterOrDigit(::Il2CppChar c);
    // static public System.Char ToUpper(System.Char c, System.Globalization.CultureInfo culture)
    // Offset: 0x1648BB8
    static ::Il2CppChar ToUpper(::Il2CppChar c, System::Globalization::CultureInfo* culture);
    // static public System.Char ToUpper(System.Char c)
    // Offset: 0x1648C64
    static ::Il2CppChar ToUpper(::Il2CppChar c);
    // static public System.Char ToUpperInvariant(System.Char c)
    // Offset: 0x1648CFC
    static ::Il2CppChar ToUpperInvariant(::Il2CppChar c);
    // static public System.Char ToLower(System.Char c, System.Globalization.CultureInfo culture)
    // Offset: 0x1648D94
    static ::Il2CppChar ToLower(::Il2CppChar c, System::Globalization::CultureInfo* culture);
    // static public System.Char ToLower(System.Char c)
    // Offset: 0x1648E40
    static ::Il2CppChar ToLower(::Il2CppChar c);
    // static public System.Char ToLowerInvariant(System.Char c)
    // Offset: 0x1648ED8
    static ::Il2CppChar ToLowerInvariant(::Il2CppChar c);
    // public System.TypeCode GetTypeCode()
    // Offset: 0xE09DF0
    System::TypeCode GetTypeCode();
    // private System.Boolean System.IConvertible.ToBoolean(System.IFormatProvider provider)
    // Offset: 0xE09DF8
    bool System_IConvertible_ToBoolean(System::IFormatProvider* provider);
    // private System.Char System.IConvertible.ToChar(System.IFormatProvider provider)
    // Offset: 0xE09E04
    ::Il2CppChar System_IConvertible_ToChar(System::IFormatProvider* provider);
    // private System.SByte System.IConvertible.ToSByte(System.IFormatProvider provider)
    // Offset: 0xE09E0C
    int8_t System_IConvertible_ToSByte(System::IFormatProvider* provider);
    // private System.Byte System.IConvertible.ToByte(System.IFormatProvider provider)
    // Offset: 0xE09E14
    uint8_t System_IConvertible_ToByte(System::IFormatProvider* provider);
    // private System.Int16 System.IConvertible.ToInt16(System.IFormatProvider provider)
    // Offset: 0xE09E1C
    int16_t System_IConvertible_ToInt16(System::IFormatProvider* provider);
    // private System.UInt16 System.IConvertible.ToUInt16(System.IFormatProvider provider)
    // Offset: 0xE09E24
    uint16_t System_IConvertible_ToUInt16(System::IFormatProvider* provider);
    // private System.Int32 System.IConvertible.ToInt32(System.IFormatProvider provider)
    // Offset: 0xE09E2C
    int System_IConvertible_ToInt32(System::IFormatProvider* provider);
    // private System.UInt32 System.IConvertible.ToUInt32(System.IFormatProvider provider)
    // Offset: 0xE09E34
    uint System_IConvertible_ToUInt32(System::IFormatProvider* provider);
    // private System.Int64 System.IConvertible.ToInt64(System.IFormatProvider provider)
    // Offset: 0xE09E3C
    int64_t System_IConvertible_ToInt64(System::IFormatProvider* provider);
    // private System.UInt64 System.IConvertible.ToUInt64(System.IFormatProvider provider)
    // Offset: 0xE09E44
    uint64_t System_IConvertible_ToUInt64(System::IFormatProvider* provider);
    // private System.Single System.IConvertible.ToSingle(System.IFormatProvider provider)
    // Offset: 0xE09E4C
    float System_IConvertible_ToSingle(System::IFormatProvider* provider);
    // private System.Double System.IConvertible.ToDouble(System.IFormatProvider provider)
    // Offset: 0xE09E58
    double System_IConvertible_ToDouble(System::IFormatProvider* provider);
    // private System.Decimal System.IConvertible.ToDecimal(System.IFormatProvider provider)
    // Offset: 0xE09E64
    System::Decimal System_IConvertible_ToDecimal(System::IFormatProvider* provider);
    // private System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider)
    // Offset: 0xE09E70
    System::DateTime System_IConvertible_ToDateTime(System::IFormatProvider* provider);
    // private System.Object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider)
    // Offset: 0xE09E7C
    ::Il2CppObject* System_IConvertible_ToType(System::Type* type, System::IFormatProvider* provider);
    // static public System.Boolean IsControl(System.Char c)
    // Offset: 0x1649840
    static bool IsControl(::Il2CppChar c);
    // static public System.Boolean IsLetterOrDigit(System.String s, System.Int32 index)
    // Offset: 0x1649904
    static bool IsLetterOrDigit(::Il2CppString* s, int index);
    // static System.Boolean CheckNumber(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1649A98
    static bool CheckNumber(System::Globalization::UnicodeCategory uc);
    // static public System.Boolean IsNumber(System.Char c)
    // Offset: 0x1649AA8
    static bool IsNumber(::Il2CppChar c);
    // static public System.Boolean IsNumber(System.String s, System.Int32 index)
    // Offset: 0x1649BC8
    static bool IsNumber(::Il2CppString* s, int index);
    // static System.Boolean CheckSeparator(System.Globalization.UnicodeCategory uc)
    // Offset: 0x1649D80
    static bool CheckSeparator(System::Globalization::UnicodeCategory uc);
    // static private System.Boolean IsSeparatorLatin1(System.Char c)
    // Offset: 0x1649D90
    static bool IsSeparatorLatin1(::Il2CppChar c);
    // static public System.Boolean IsSeparator(System.Char c)
    // Offset: 0x1649DA4
    static bool IsSeparator(::Il2CppChar c);
    // static public System.Boolean IsSurrogate(System.Char c)
    // Offset: 0x1649E94
    static bool IsSurrogate(::Il2CppChar c);
    // static public System.Boolean IsSurrogate(System.String s, System.Int32 index)
    // Offset: 0x1649EA4
    static bool IsSurrogate(::Il2CppString* s, int index);
    // static public System.Boolean IsWhiteSpace(System.String s, System.Int32 index)
    // Offset: 0x1649FA4
    static bool IsWhiteSpace(::Il2CppString* s, int index);
    // static public System.Globalization.UnicodeCategory GetUnicodeCategory(System.Char c)
    // Offset: 0x164A114
    static System::Globalization::UnicodeCategory GetUnicodeCategory(::Il2CppChar c);
    // static public System.Globalization.UnicodeCategory GetUnicodeCategory(System.String s, System.Int32 index)
    // Offset: 0x164A1D0
    static System::Globalization::UnicodeCategory GetUnicodeCategory(::Il2CppString* s, int index);
    // static public System.Boolean IsHighSurrogate(System.Char c)
    // Offset: 0x164A340
    static bool IsHighSurrogate(::Il2CppChar c);
    // static public System.Boolean IsHighSurrogate(System.String s, System.Int32 index)
    // Offset: 0x164A350
    static bool IsHighSurrogate(::Il2CppString* s, int index);
    // static public System.Boolean IsLowSurrogate(System.Char c)
    // Offset: 0x164A454
    static bool IsLowSurrogate(::Il2CppChar c);
    // static public System.Boolean IsSurrogatePair(System.Char highSurrogate, System.Char lowSurrogate)
    // Offset: 0x164A464
    static bool IsSurrogatePair(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate);
    // static public System.String ConvertFromUtf32(System.Int32 utf32)
    // Offset: 0x164A488
    static ::Il2CppString* ConvertFromUtf32(int utf32);
    // static public System.Int32 ConvertToUtf32(System.Char highSurrogate, System.Char lowSurrogate)
    // Offset: 0x164A5DC
    static int ConvertToUtf32(::Il2CppChar highSurrogate, ::Il2CppChar lowSurrogate);
    // static private System.Void .cctor()
    // Offset: 0x164A720
    static void _cctor();
    // public override System.Int32 GetHashCode()
    // Offset: 0xE09DA8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE09DB4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0xE09DE0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.Char
  #pragma pack(pop)
  static check_size<sizeof(Char), 0 + sizeof(::Il2CppChar)> __System_CharSizeCheck;
  static_assert(sizeof(Char) == 0x2);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Char, "System", "Char");
