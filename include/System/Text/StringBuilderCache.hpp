// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Text
namespace System::Text {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.StringBuilderCache
  class StringBuilderCache : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: StringBuilderCache
    StringBuilderCache() noexcept {}
    // [ThreadStaticAttribute] Offset: 0xD81264
    // Get static field: static private System.Text.StringBuilder CachedInstance
    static System::Text::StringBuilder* _get_CachedInstance();
    // Set static field: static private System.Text.StringBuilder CachedInstance
    static void _set_CachedInstance(System::Text::StringBuilder* value);
    // static public System.Text.StringBuilder Acquire(System.Int32 capacity)
    // Offset: 0x1D02AB0
    static System::Text::StringBuilder* Acquire(int capacity);
    // static public System.Void Release(System.Text.StringBuilder sb)
    // Offset: 0x1D02B74
    static void Release(System::Text::StringBuilder* sb);
    // static public System.String GetStringAndRelease(System.Text.StringBuilder sb)
    // Offset: 0x1D02BEC
    static ::Il2CppString* GetStringAndRelease(System::Text::StringBuilder* sb);
  }; // System.Text.StringBuilderCache
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Text::StringBuilderCache*, "System.Text", "StringBuilderCache");
// Writing includes for template specializations
#include "System/Text/StringBuilder.hpp"
// Writing MetadataGetter for method: System::Text::StringBuilderCache::Acquire
// Il2CppName: Acquire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (*)(int)>(&System::Text::StringBuilderCache::Acquire)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::StringBuilderCache*), "Acquire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: System::Text::StringBuilderCache::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*)>(&System::Text::StringBuilderCache::Release)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::StringBuilderCache*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
// Writing MetadataGetter for method: System::Text::StringBuilderCache::GetStringAndRelease
// Il2CppName: GetStringAndRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Text::StringBuilder*)>(&System::Text::StringBuilderCache::GetStringAndRelease)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::StringBuilderCache*), "GetStringAndRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
