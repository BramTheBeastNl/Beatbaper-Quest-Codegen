// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: EncoderFallback
  class EncoderFallback;
  // Forward declaring type: DecoderFallback
  class DecoderFallback;
  // Forward declaring type: EncoderNLS
  class EncoderNLS;
  // Forward declaring type: DecoderNLS
  class DecoderNLS;
  // Forward declaring type: Decoder
  class Decoder;
  // Forward declaring type: Encoder
  class Encoder;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CodePageDataItem
  class CodePageDataItem;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Text
namespace System::Text {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.Encoding
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: C93D3C
  class Encoding : public ::Il2CppObject/*, public System::ICloneable*/ {
    public:
    // Nested type: System::Text::Encoding::DefaultEncoder
    class DefaultEncoder;
    // Nested type: System::Text::Encoding::DefaultDecoder
    class DefaultDecoder;
    // Nested type: System::Text::Encoding::EncodingCharBuffer
    class EncodingCharBuffer;
    // Nested type: System::Text::Encoding::EncodingByteBuffer
    class EncodingByteBuffer;
    // System.Int32 m_codePage
    // Size: 0x4
    // Offset: 0x10
    int m_codePage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_codePage and: dataItem
    char __padding0[0x4] = {};
    // System.Globalization.CodePageDataItem dataItem
    // Size: 0x8
    // Offset: 0x18
    System::Globalization::CodePageDataItem* dataItem;
    // Field size check
    static_assert(sizeof(System::Globalization::CodePageDataItem*) == 0x8);
    // System.Boolean m_deserializedFromEverett
    // Size: 0x1
    // Offset: 0x20
    bool m_deserializedFromEverett;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [OptionalFieldAttribute] Offset: 0xC99A40
    // private System.Boolean m_isReadOnly
    // Size: 0x1
    // Offset: 0x21
    bool m_isReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isReadOnly and: encoderFallback
    char __padding3[0x6] = {};
    // [OptionalFieldAttribute] Offset: 0xC99A78
    // System.Text.EncoderFallback encoderFallback
    // Size: 0x8
    // Offset: 0x28
    System::Text::EncoderFallback* encoderFallback;
    // Field size check
    static_assert(sizeof(System::Text::EncoderFallback*) == 0x8);
    // [OptionalFieldAttribute] Offset: 0xC99AB0
    // System.Text.DecoderFallback decoderFallback
    // Size: 0x8
    // Offset: 0x30
    System::Text::DecoderFallback* decoderFallback;
    // Field size check
    static_assert(sizeof(System::Text::DecoderFallback*) == 0x8);
    // Creating value type constructor for type: Encoding
    Encoding(int m_codePage_ = {}, System::Globalization::CodePageDataItem* dataItem_ = {}, bool m_deserializedFromEverett_ = {}, bool m_isReadOnly_ = {}, System::Text::EncoderFallback* encoderFallback_ = {}, System::Text::DecoderFallback* decoderFallback_ = {}) noexcept : m_codePage{m_codePage_}, dataItem{dataItem_}, m_deserializedFromEverett{m_deserializedFromEverett_}, m_isReadOnly{m_isReadOnly_}, encoderFallback{encoderFallback_}, decoderFallback{decoderFallback_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Get static field: static private System.Text.Encoding defaultEncoding
    static System::Text::Encoding* _get_defaultEncoding();
    // Set static field: static private System.Text.Encoding defaultEncoding
    static void _set_defaultEncoding(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding unicodeEncoding
    static System::Text::Encoding* _get_unicodeEncoding();
    // Set static field: static private System.Text.Encoding unicodeEncoding
    static void _set_unicodeEncoding(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding bigEndianUnicode
    static System::Text::Encoding* _get_bigEndianUnicode();
    // Set static field: static private System.Text.Encoding bigEndianUnicode
    static void _set_bigEndianUnicode(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding utf7Encoding
    static System::Text::Encoding* _get_utf7Encoding();
    // Set static field: static private System.Text.Encoding utf7Encoding
    static void _set_utf7Encoding(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding utf8Encoding
    static System::Text::Encoding* _get_utf8Encoding();
    // Set static field: static private System.Text.Encoding utf8Encoding
    static void _set_utf8Encoding(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding utf32Encoding
    static System::Text::Encoding* _get_utf32Encoding();
    // Set static field: static private System.Text.Encoding utf32Encoding
    static void _set_utf32Encoding(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding asciiEncoding
    static System::Text::Encoding* _get_asciiEncoding();
    // Set static field: static private System.Text.Encoding asciiEncoding
    static void _set_asciiEncoding(System::Text::Encoding* value);
    // Get static field: static private System.Text.Encoding latin1Encoding
    static System::Text::Encoding* _get_latin1Encoding();
    // Set static field: static private System.Text.Encoding latin1Encoding
    static void _set_latin1Encoding(System::Text::Encoding* value);
    // Get static field: static private System.Collections.Hashtable encodings
    static System::Collections::Hashtable* _get_encodings();
    // Set static field: static private System.Collections.Hashtable encodings
    static void _set_encodings(System::Collections::Hashtable* value);
    // Get static field: static private System.Object s_InternalSyncObject
    static ::Il2CppObject* _get_s_InternalSyncObject();
    // Set static field: static private System.Object s_InternalSyncObject
    static void _set_s_InternalSyncObject(::Il2CppObject* value);
    // protected System.Void .ctor(System.Int32 codePage)
    // Offset: 0x1AFF09C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Encoding* New_ctor(int codePage) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::Encoding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Encoding*, creationType>(codePage)));
    }
    // System.Void SetDefaultFallbacks()
    // Offset: 0x1AFF14C
    void SetDefaultFallbacks_NEW();
    // System.Void OnDeserializing()
    // Offset: 0x1AFF260
    void OnDeserializing();
    // System.Void OnDeserialized()
    // Offset: 0x1AFF270
    void OnDeserialized();
    // private System.Void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x1AFF2B8
    void OnDeserializing(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x1AFF2C8
    void OnDeserialized(System::Runtime::Serialization::StreamingContext ctx);
    // private System.Void OnSerializing(System.Runtime.Serialization.StreamingContext ctx)
    // Offset: 0x1AFF310
    void OnSerializing(System::Runtime::Serialization::StreamingContext ctx);
    // System.Void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1AFF318
    void DeserializeEncoding(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // System.Void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1AFF640
    void SerializeEncoding(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // static private System.Object get_InternalSyncObject()
    // Offset: 0x1AFF78C
    static ::Il2CppObject* get_InternalSyncObject();
    // static public System.Text.Encoding GetEncoding(System.Int32 codepage)
    // Offset: 0x1AFF820
    static System::Text::Encoding* GetEncoding(int codepage);
    // static public System.Text.Encoding GetEncoding(System.Int32 codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback)
    // Offset: 0x1B00D38
    static System::Text::Encoding* GetEncoding(int codepage, System::Text::EncoderFallback* encoderFallback, System::Text::DecoderFallback* decoderFallback);
    // static public System.Text.Encoding GetEncoding(System.String name)
    // Offset: 0x1B01128
    static System::Text::Encoding* GetEncoding(::Il2CppString* name);
    // public System.Byte[] GetPreamble()
    // Offset: 0x1B012D0
    ::Array<uint8_t>* GetPreamble_NEW();
    // private System.Void GetDataItem()
    // Offset: 0x1B01338
    void GetDataItem();
    // public System.String get_EncodingName()
    // Offset: 0x1B01470
    ::Il2CppString* get_EncodingName_NEW();
    // public System.String get_WebName()
    // Offset: 0x1B0147C
    ::Il2CppString* get_WebName_NEW();
    // public System.Text.EncoderFallback get_EncoderFallback()
    // Offset: 0x1B014B8
    System::Text::EncoderFallback* get_EncoderFallback();
    // public System.Void set_EncoderFallback(System.Text.EncoderFallback value)
    // Offset: 0x1B00F58
    void set_EncoderFallback(System::Text::EncoderFallback* value);
    // public System.Text.DecoderFallback get_DecoderFallback()
    // Offset: 0x1B014C0
    System::Text::DecoderFallback* get_DecoderFallback();
    // public System.Void set_DecoderFallback(System.Text.DecoderFallback value)
    // Offset: 0x1B01040
    void set_DecoderFallback(System::Text::DecoderFallback* value);
    // public System.Object Clone()
    // Offset: 0x1B014C8
    ::Il2CppObject* Clone_NEW();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x1B01558
    bool get_IsReadOnly();
    // static public System.Text.Encoding get_ASCII()
    // Offset: 0x1B005E0
    static System::Text::Encoding* get_ASCII();
    // static private System.Text.Encoding get_Latin1()
    // Offset: 0x1B00680
    static System::Text::Encoding* get_Latin1();
    // public System.Int32 GetByteCount(System.String s)
    // Offset: 0x1B01568
    int GetByteCount_NEW(::Il2CppString* s);
    // public System.Int32 GetByteCount(System.Char[] chars, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFF
    int GetByteCount_NEW(::Array<::Il2CppChar>* chars, int index, int count);
    // public System.Int32 GetByteCount(System.Char* chars, System.Int32 count)
    // Offset: 0x1B01620
    int GetByteCount_NEW(::Il2CppChar* chars, int count);
    // System.Int32 GetByteCount(System.Char* chars, System.Int32 count, System.Text.EncoderNLS encoder)
    // Offset: 0x1B01790
    int GetByteCount_NEW(::Il2CppChar* chars, int count, System::Text::EncoderNLS* encoder);
    // public System.Byte[] GetBytes(System.Char[] chars, System.Int32 index, System.Int32 count)
    // Offset: 0x1B0179C
    ::Array<uint8_t>* GetBytes_NEW(::Array<::Il2CppChar>* chars, int index, int count);
    // public System.Int32 GetBytes(System.Char[] chars, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)
    // Offset: 0xFFFFFFFF
    int GetBytes_NEW(::Array<::Il2CppChar>* chars, int charIndex, int charCount, ::Array<uint8_t>* bytes, int byteIndex);
    // public System.Byte[] GetBytes(System.String s)
    // Offset: 0x1B0185C
    ::Array<uint8_t>* GetBytes_NEW(::Il2CppString* s);
    // public System.Int32 GetBytes(System.String s, System.Int32 charIndex, System.Int32 charCount, System.Byte[] bytes, System.Int32 byteIndex)
    // Offset: 0x1B01964
    int GetBytes_NEW(::Il2CppString* s, int charIndex, int charCount, ::Array<uint8_t>* bytes, int byteIndex);
    // System.Int32 GetBytes(System.Char* chars, System.Int32 charCount, System.Byte* bytes, System.Int32 byteCount, System.Text.EncoderNLS encoder)
    // Offset: 0x1B01A40
    int GetBytes_NEW(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount, System::Text::EncoderNLS* encoder);
    // public System.Int32 GetBytes(System.Char* chars, System.Int32 charCount, System.Byte* bytes, System.Int32 byteCount)
    // Offset: 0x1B01A50
    int GetBytes_NEW(::Il2CppChar* chars, int charCount, uint8_t* bytes, int byteCount);
    // public System.Int32 GetCharCount(System.Byte[] bytes, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFF
    int GetCharCount_NEW(::Array<uint8_t>* bytes, int index, int count);
    // public System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count)
    // Offset: 0x1B01C70
    int GetCharCount_NEW(uint8_t* bytes, int count);
    // System.Int32 GetCharCount(System.Byte* bytes, System.Int32 count, System.Text.DecoderNLS decoder)
    // Offset: 0x1B01DE4
    int GetCharCount_NEW(uint8_t* bytes, int count, System::Text::DecoderNLS* decoder);
    // public System.Char[] GetChars(System.Byte[] bytes, System.Int32 index, System.Int32 count)
    // Offset: 0x1B01DF4
    ::Array<::Il2CppChar>* GetChars_NEW(::Array<uint8_t>* bytes, int index, int count);
    // public System.Int32 GetChars(System.Byte[] bytes, System.Int32 byteIndex, System.Int32 byteCount, System.Char[] chars, System.Int32 charIndex)
    // Offset: 0xFFFFFFFF
    int GetChars_NEW(::Array<uint8_t>* bytes, int byteIndex, int byteCount, ::Array<::Il2CppChar>* chars, int charIndex);
    // public System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount)
    // Offset: 0x1B01EB8
    int GetChars_NEW(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount);
    // System.Int32 GetChars(System.Byte* bytes, System.Int32 byteCount, System.Char* chars, System.Int32 charCount, System.Text.DecoderNLS decoder)
    // Offset: 0x1B020D8
    int GetChars_NEW(uint8_t* bytes, int byteCount, ::Il2CppChar* chars, int charCount, System::Text::DecoderNLS* decoder);
    // public System.Int32 get_CodePage()
    // Offset: 0x1B020E8
    int get_CodePage_NEW();
    // public System.Text.Decoder GetDecoder()
    // Offset: 0x1B020F0
    System::Text::Decoder* GetDecoder_NEW();
    // static private System.Text.Encoding CreateDefaultEncoding()
    // Offset: 0x1B02190
    static System::Text::Encoding* CreateDefaultEncoding();
    // System.Void setReadOnly(System.Boolean value)
    // Offset: 0x1B0239C
    void setReadOnly(bool value);
    // static public System.Text.Encoding get_Default()
    // Offset: 0x1B001F4
    static System::Text::Encoding* get_Default();
    // public System.Text.Encoder GetEncoder()
    // Offset: 0x1B023A8
    System::Text::Encoder* GetEncoder_NEW();
    // public System.Int32 GetMaxByteCount(System.Int32 charCount)
    // Offset: 0xFFFFFFFF
    int GetMaxByteCount_NEW(int charCount);
    // public System.Int32 GetMaxCharCount(System.Int32 byteCount)
    // Offset: 0xFFFFFFFF
    int GetMaxCharCount_NEW(int byteCount);
    // public System.String GetString(System.Byte[] bytes)
    // Offset: 0x1B02448
    ::Il2CppString* GetString_NEW(::Array<uint8_t>* bytes);
    // public System.String GetString(System.Byte[] bytes, System.Int32 index, System.Int32 count)
    // Offset: 0x1B02510
    ::Il2CppString* GetString_NEW(::Array<uint8_t>* bytes, int index, int count);
    // static public System.Text.Encoding get_Unicode()
    // Offset: 0x1B00278
    static System::Text::Encoding* get_Unicode();
    // static public System.Text.Encoding get_BigEndianUnicode()
    // Offset: 0x1B00320
    static System::Text::Encoding* get_BigEndianUnicode();
    // static public System.Text.Encoding get_UTF7()
    // Offset: 0x1B003C8
    static System::Text::Encoding* get_UTF7();
    // static public System.Text.Encoding get_UTF8()
    // Offset: 0x1B00538
    static System::Text::Encoding* get_UTF8();
    // static public System.Text.Encoding get_UTF32()
    // Offset: 0x1B00474
    static System::Text::Encoding* get_UTF32();
    // System.Char[] GetBestFitUnicodeToBytesData()
    // Offset: 0x1B026DC
    ::Array<::Il2CppChar>* GetBestFitUnicodeToBytesData_NEW();
    // System.Char[] GetBestFitBytesToUnicodeData()
    // Offset: 0x1B02744
    ::Array<::Il2CppChar>* GetBestFitBytesToUnicodeData_NEW();
    // System.Void ThrowBytesOverflow()
    // Offset: 0x1B027AC
    void ThrowBytesOverflow();
    // System.Void ThrowBytesOverflow(System.Text.EncoderNLS encoder, System.Boolean nothingEncoded)
    // Offset: 0x1B028D4
    void ThrowBytesOverflow(System::Text::EncoderNLS* encoder, bool nothingEncoded);
    // System.Void ThrowCharsOverflow()
    // Offset: 0x1B0294C
    void ThrowCharsOverflow();
    // System.Void ThrowCharsOverflow(System.Text.DecoderNLS decoder, System.Boolean nothingDecoded)
    // Offset: 0x1B02A74
    void ThrowCharsOverflow(System::Text::DecoderNLS* decoder, bool nothingDecoded);
    // protected System.Void .ctor()
    // Offset: 0x1AFF094
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Encoding* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::Encoding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Encoding*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x1B0259C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals_NEW(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1B02680
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode_NEW()
    int GetHashCode();
  }; // System.Text.Encoding
  #pragma pack(pop)
  static check_size<sizeof(Encoding), 48 + sizeof(System::Text::DecoderFallback*)> __System_Text_EncodingSizeCheck;
  static_assert(sizeof(Encoding) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::Encoding*, "System.Text", "Encoding");
