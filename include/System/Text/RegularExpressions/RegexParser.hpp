// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.RegularExpressions.RegexOptions
#include "System/Text/RegularExpressions/RegexOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexNode
  class RegexNode;
  // Forward declaring type: RegexTree
  class RegexTree;
  // Forward declaring type: RegexCharClass
  class RegexCharClass;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArgumentException
  class ArgumentException;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.RegexParser
  class RegexParser : public ::Il2CppObject {
    public:
    // System.Text.RegularExpressions.RegexNode _stack
    // Size: 0x8
    // Offset: 0x10
    System::Text::RegularExpressions::RegexNode* stack;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _group
    // Size: 0x8
    // Offset: 0x18
    System::Text::RegularExpressions::RegexNode* group;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _alternation
    // Size: 0x8
    // Offset: 0x20
    System::Text::RegularExpressions::RegexNode* alternation;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _concatenation
    // Size: 0x8
    // Offset: 0x28
    System::Text::RegularExpressions::RegexNode* concatenation;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.Text.RegularExpressions.RegexNode _unit
    // Size: 0x8
    // Offset: 0x30
    System::Text::RegularExpressions::RegexNode* unit;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexNode*) == 0x8);
    // System.String _pattern
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* pattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Int32 _currentPos
    // Size: 0x4
    // Offset: 0x40
    int currentPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentPos and: culture
    char __padding6[0x4] = {};
    // System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0x48
    System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureInfo*) == 0x8);
    // System.Int32 _autocap
    // Size: 0x4
    // Offset: 0x50
    int autocap;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _capcount
    // Size: 0x4
    // Offset: 0x54
    int capcount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _captop
    // Size: 0x4
    // Offset: 0x58
    int captop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _capsize
    // Size: 0x4
    // Offset: 0x5C
    int capsize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Collections.Hashtable _caps
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Hashtable* caps;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // System.Collections.Hashtable _capnames
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Hashtable* capnames;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // System.Int32[] _capnumlist
    // Size: 0x8
    // Offset: 0x70
    ::Array<int>* capnumlist;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // System.Collections.Generic.List`1<System.String> _capnamelist
    // Size: 0x8
    // Offset: 0x78
    System::Collections::Generic::List_1<::Il2CppString*>* capnamelist;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
    // System.Text.RegularExpressions.RegexOptions _options
    // Size: 0x4
    // Offset: 0x80
    System::Text::RegularExpressions::RegexOptions options;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexOptions) == 0x4);
    // Padding between fields: options and: optionsStack
    char __padding16[0x4] = {};
    // System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexOptions> _optionsStack
    // Size: 0x8
    // Offset: 0x88
    System::Collections::Generic::List_1<System::Text::RegularExpressions::RegexOptions>* optionsStack;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<System::Text::RegularExpressions::RegexOptions>*) == 0x8);
    // System.Boolean _ignoreNextParen
    // Size: 0x1
    // Offset: 0x90
    bool ignoreNextParen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: RegexParser
    RegexParser(System::Text::RegularExpressions::RegexNode* stack_ = {}, System::Text::RegularExpressions::RegexNode* group_ = {}, System::Text::RegularExpressions::RegexNode* alternation_ = {}, System::Text::RegularExpressions::RegexNode* concatenation_ = {}, System::Text::RegularExpressions::RegexNode* unit_ = {}, ::Il2CppString* pattern_ = {}, int currentPos_ = {}, System::Globalization::CultureInfo* culture_ = {}, int autocap_ = {}, int capcount_ = {}, int captop_ = {}, int capsize_ = {}, System::Collections::Hashtable* caps_ = {}, System::Collections::Hashtable* capnames_ = {}, ::Array<int>* capnumlist_ = {}, System::Collections::Generic::List_1<::Il2CppString*>* capnamelist_ = {}, System::Text::RegularExpressions::RegexOptions options_ = {}, System::Collections::Generic::List_1<System::Text::RegularExpressions::RegexOptions>* optionsStack_ = {}, bool ignoreNextParen_ = {}) noexcept : stack{stack_}, group{group_}, alternation{alternation_}, concatenation{concatenation_}, unit{unit_}, pattern{pattern_}, currentPos{currentPos_}, culture{culture_}, autocap{autocap_}, capcount{capcount_}, captop{captop_}, capsize{capsize_}, caps{caps_}, capnames{capnames_}, capnumlist{capnumlist_}, capnamelist{capnamelist_}, options{options_}, optionsStack{optionsStack_}, ignoreNextParen{ignoreNextParen_} {}
    // Get static field: static readonly System.Byte[] _category
    static ::Array<uint8_t>* _get__category();
    // Set static field: static readonly System.Byte[] _category
    static void _set__category(::Array<uint8_t>* value);
    // static System.Text.RegularExpressions.RegexTree Parse(System.String re, System.Text.RegularExpressions.RegexOptions op)
    // Offset: 0x1991838
    static System::Text::RegularExpressions::RegexTree* Parse(::Il2CppString* re, System::Text::RegularExpressions::RegexOptions op);
    // private System.Void .ctor(System.Globalization.CultureInfo culture)
    // Offset: 0x19919D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexParser* New_ctor(System::Globalization::CultureInfo* culture) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::RegexParser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexParser*, creationType>(culture)));
    }
    // System.Void SetPattern(System.String Re)
    // Offset: 0x1991A74
    void SetPattern(::Il2CppString* Re);
    // System.Void Reset(System.Text.RegularExpressions.RegexOptions topopts)
    // Offset: 0x1991E34
    void Reset(System::Text::RegularExpressions::RegexOptions topopts);
    // System.Text.RegularExpressions.RegexNode ScanRegex()
    // Offset: 0x1991EC4
    System::Text::RegularExpressions::RegexNode* ScanRegex();
    // System.Text.RegularExpressions.RegexCharClass ScanCharClass(System.Boolean caseInsensitive)
    // Offset: 0x19931DC
    System::Text::RegularExpressions::RegexCharClass* ScanCharClass(bool caseInsensitive);
    // System.Text.RegularExpressions.RegexCharClass ScanCharClass(System.Boolean caseInsensitive, System.Boolean scanOnly)
    // Offset: 0x1994A7C
    System::Text::RegularExpressions::RegexCharClass* ScanCharClass(bool caseInsensitive, bool scanOnly);
    // System.Text.RegularExpressions.RegexNode ScanGroupOpen()
    // Offset: 0x19932C4
    System::Text::RegularExpressions::RegexNode* ScanGroupOpen();
    // System.Void ScanBlank()
    // Offset: 0x199277C
    void ScanBlank();
    // System.Text.RegularExpressions.RegexNode ScanBackslash()
    // Offset: 0x1994284
    System::Text::RegularExpressions::RegexNode* ScanBackslash();
    // System.Text.RegularExpressions.RegexNode ScanBasicBackslash()
    // Offset: 0x19958D8
    System::Text::RegularExpressions::RegexNode* ScanBasicBackslash();
    // System.String ScanCapname()
    // Offset: 0x1995414
    ::Il2CppString* ScanCapname();
    // System.Char ScanOctal()
    // Offset: 0x1995F08
    ::Il2CppChar ScanOctal();
    // System.Int32 ScanDecimal()
    // Offset: 0x1994944
    int ScanDecimal();
    // System.Char ScanHex(System.Int32 c)
    // Offset: 0x1995FC8
    ::Il2CppChar ScanHex(int c);
    // static System.Int32 HexDigit(System.Char ch)
    // Offset: 0x1996114
    static int HexDigit(::Il2CppChar ch);
    // System.Char ScanControl()
    // Offset: 0x199614C
    ::Il2CppChar ScanControl();
    // System.Boolean IsOnlyTopOption(System.Text.RegularExpressions.RegexOptions option)
    // Offset: 0x1996214
    bool IsOnlyTopOption(System::Text::RegularExpressions::RegexOptions option);
    // System.Void ScanOptions()
    // Offset: 0x1995680
    void ScanOptions();
    // System.Char ScanCharEscape()
    // Offset: 0x1995258
    ::Il2CppChar ScanCharEscape();
    // System.String ParseProperty()
    // Offset: 0x19950DC
    ::Il2CppString* ParseProperty();
    // System.Int32 TypeFromCode(System.Char ch)
    // Offset: 0x1995844
    int TypeFromCode(::Il2CppChar ch);
    // static System.Text.RegularExpressions.RegexOptions OptionFromCode(System.Char ch)
    // Offset: 0x199623C
    static System::Text::RegularExpressions::RegexOptions OptionFromCode(::Il2CppChar ch);
    // System.Void CountCaptures()
    // Offset: 0x1991AE0
    void CountCaptures();
    // System.Void NoteCaptureSlot(System.Int32 i, System.Int32 pos)
    // Offset: 0x199629C
    void NoteCaptureSlot(int i, int pos);
    // System.Void NoteCaptureName(System.String name, System.Int32 pos)
    // Offset: 0x1996404
    void NoteCaptureName(::Il2CppString* name, int pos);
    // System.Void AssignNameSlots()
    // Offset: 0x1996528
    void AssignNameSlots();
    // System.Int32 CaptureSlotFromName(System.String capname)
    // Offset: 0x19955E4
    int CaptureSlotFromName(::Il2CppString* capname);
    // System.Boolean IsCaptureSlot(System.Int32 i)
    // Offset: 0x1995524
    bool IsCaptureSlot(int i);
    // System.Boolean IsCaptureName(System.String capname)
    // Offset: 0x19955C8
    bool IsCaptureName(::Il2CppString* capname);
    // System.Boolean UseOptionN()
    // Offset: 0x1995518
    bool UseOptionN();
    // System.Boolean UseOptionI()
    // Offset: 0x19931D0
    bool UseOptionI();
    // System.Boolean UseOptionM()
    // Offset: 0x1994784
    bool UseOptionM();
    // System.Boolean UseOptionS()
    // Offset: 0x1994808
    bool UseOptionS();
    // System.Boolean UseOptionX()
    // Offset: 0x1992A78
    bool UseOptionX();
    // System.Boolean UseOptionE()
    // Offset: 0x19950D0
    bool UseOptionE();
    // static System.Boolean IsSpecial(System.Char ch)
    // Offset: 0x1992D54
    static bool IsSpecial(::Il2CppChar ch);
    // static System.Boolean IsStopperX(System.Char ch)
    // Offset: 0x1992ADC
    static bool IsStopperX(::Il2CppChar ch);
    // static System.Boolean IsQuantifier(System.Char ch)
    // Offset: 0x1992E08
    static bool IsQuantifier(::Il2CppChar ch);
    // System.Boolean IsTrueQuantifier()
    // Offset: 0x1992B90
    bool IsTrueQuantifier();
    // static System.Boolean IsSpace(System.Char ch)
    // Offset: 0x1995790
    static bool IsSpace(::Il2CppChar ch);
    // System.Void AddConcatenate(System.Int32 pos, System.Int32 cch, System.Boolean isReplacement)
    // Offset: 0x1992EBC
    void AddConcatenate(int pos, int cch, bool isReplacement);
    // System.Void PushGroup()
    // Offset: 0x1993D2C
    void PushGroup();
    // System.Void PopGroup()
    // Offset: 0x19940F0
    void PopGroup();
    // System.Boolean EmptyStack()
    // Offset: 0x1993E50
    bool EmptyStack();
    // System.Void StartGroup(System.Text.RegularExpressions.RegexNode openGroup)
    // Offset: 0x19926D4
    void StartGroup(System::Text::RegularExpressions::RegexNode* openGroup);
    // System.Void AddAlternate()
    // Offset: 0x1993D78
    void AddAlternate();
    // System.Void AddConcatenate()
    // Offset: 0x19948E4
    void AddConcatenate();
    // System.Void AddConcatenate(System.Boolean lazy, System.Int32 min, System.Int32 max)
    // Offset: 0x1994A34
    void AddConcatenate(bool lazy, int min, int max);
    // System.Text.RegularExpressions.RegexNode Unit()
    // Offset: 0x1996ADC
    System::Text::RegularExpressions::RegexNode* Unit();
    // System.Void AddUnitOne(System.Char ch)
    // Offset: 0x1993110
    void AddUnitOne(::Il2CppChar ch);
    // System.Void AddUnitNotone(System.Char ch)
    // Offset: 0x1994814
    void AddUnitNotone(::Il2CppChar ch);
    // System.Void AddUnitSet(System.String cc)
    // Offset: 0x19931E8
    void AddUnitSet(::Il2CppString* cc);
    // System.Void AddUnitNode(System.Text.RegularExpressions.RegexNode node)
    // Offset: 0x1996AE4
    void AddUnitNode(System::Text::RegularExpressions::RegexNode* node);
    // System.Void AddUnitType(System.Int32 type)
    // Offset: 0x1994790
    void AddUnitType(int type);
    // System.Void AddGroup()
    // Offset: 0x1993F78
    void AddGroup();
    // System.Void PushOptions()
    // Offset: 0x1993268
    void PushOptions();
    // System.Void PopOptions()
    // Offset: 0x19941EC
    void PopOptions();
    // System.Boolean EmptyOptionsStack()
    // Offset: 0x19963AC
    bool EmptyOptionsStack();
    // System.Void PopKeepOptions()
    // Offset: 0x1993CCC
    void PopKeepOptions();
    // System.ArgumentException MakeException(System.String message)
    // Offset: 0x1993E60
    System::ArgumentException* MakeException(::Il2CppString* message);
    // System.Int32 Textpos()
    // Offset: 0x1996AEC
    int Textpos();
    // System.Void Textto(System.Int32 pos)
    // Offset: 0x1996AF4
    void Textto(int pos);
    // System.Char MoveRightGetChar()
    // Offset: 0x1994918
    ::Il2CppChar MoveRightGetChar();
    // System.Void MoveRight()
    // Offset: 0x1992A84
    void MoveRight();
    // System.Void MoveRight(System.Int32 i)
    // Offset: 0x1995508
    void MoveRight(int i);
    // System.Void MoveLeft()
    // Offset: 0x19948D4
    void MoveLeft();
    // System.Char CharAt(System.Int32 i)
    // Offset: 0x19930F4
    ::Il2CppChar CharAt(int i);
    // System.Char RightChar()
    // Offset: 0x1992AB8
    ::Il2CppChar RightChar();
    // System.Char RightChar(System.Int32 i)
    // Offset: 0x19954E0
    ::Il2CppChar RightChar(int i);
    // System.Int32 CharsRight()
    // Offset: 0x1992A94
    int CharsRight();
    // static private System.Void .cctor()
    // Offset: 0x1996AFC
    static void _cctor();
  }; // System.Text.RegularExpressions.RegexParser
  #pragma pack(pop)
  static check_size<sizeof(RegexParser), 144 + sizeof(bool)> __System_Text_RegularExpressions_RegexParserSizeCheck;
  static_assert(sizeof(RegexParser) == 0x91);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::RegexParser*, "System.Text.RegularExpressions", "RegexParser");
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Parse
// Il2CppName: Parse
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::SetPattern
// Il2CppName: SetPattern
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Reset
// Il2CppName: Reset
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanRegex
// Il2CppName: ScanRegex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCharClass
// Il2CppName: ScanCharClass
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCharClass
// Il2CppName: ScanCharClass
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanGroupOpen
// Il2CppName: ScanGroupOpen
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanBlank
// Il2CppName: ScanBlank
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanBackslash
// Il2CppName: ScanBackslash
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanBasicBackslash
// Il2CppName: ScanBasicBackslash
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCapname
// Il2CppName: ScanCapname
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanOctal
// Il2CppName: ScanOctal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanDecimal
// Il2CppName: ScanDecimal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanHex
// Il2CppName: ScanHex
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::HexDigit
// Il2CppName: HexDigit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanControl
// Il2CppName: ScanControl
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsOnlyTopOption
// Il2CppName: IsOnlyTopOption
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanOptions
// Il2CppName: ScanOptions
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ScanCharEscape
// Il2CppName: ScanCharEscape
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::ParseProperty
// Il2CppName: ParseProperty
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::TypeFromCode
// Il2CppName: TypeFromCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::OptionFromCode
// Il2CppName: OptionFromCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CountCaptures
// Il2CppName: CountCaptures
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::NoteCaptureSlot
// Il2CppName: NoteCaptureSlot
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::NoteCaptureName
// Il2CppName: NoteCaptureName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AssignNameSlots
// Il2CppName: AssignNameSlots
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CaptureSlotFromName
// Il2CppName: CaptureSlotFromName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsCaptureSlot
// Il2CppName: IsCaptureSlot
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsCaptureName
// Il2CppName: IsCaptureName
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionN
// Il2CppName: UseOptionN
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionI
// Il2CppName: UseOptionI
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionM
// Il2CppName: UseOptionM
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionS
// Il2CppName: UseOptionS
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionX
// Il2CppName: UseOptionX
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::UseOptionE
// Il2CppName: UseOptionE
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsSpecial
// Il2CppName: IsSpecial
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsStopperX
// Il2CppName: IsStopperX
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsQuantifier
// Il2CppName: IsQuantifier
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsTrueQuantifier
// Il2CppName: IsTrueQuantifier
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::IsSpace
// Il2CppName: IsSpace
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddConcatenate
// Il2CppName: AddConcatenate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PushGroup
// Il2CppName: PushGroup
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PopGroup
// Il2CppName: PopGroup
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::EmptyStack
// Il2CppName: EmptyStack
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::StartGroup
// Il2CppName: StartGroup
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddAlternate
// Il2CppName: AddAlternate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddConcatenate
// Il2CppName: AddConcatenate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddConcatenate
// Il2CppName: AddConcatenate
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Unit
// Il2CppName: Unit
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitOne
// Il2CppName: AddUnitOne
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitNotone
// Il2CppName: AddUnitNotone
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitSet
// Il2CppName: AddUnitSet
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitNode
// Il2CppName: AddUnitNode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddUnitType
// Il2CppName: AddUnitType
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::AddGroup
// Il2CppName: AddGroup
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PushOptions
// Il2CppName: PushOptions
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PopOptions
// Il2CppName: PopOptions
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::EmptyOptionsStack
// Il2CppName: EmptyOptionsStack
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::PopKeepOptions
// Il2CppName: PopKeepOptions
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MakeException
// Il2CppName: MakeException
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Textpos
// Il2CppName: Textpos
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::Textto
// Il2CppName: Textto
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveRightGetChar
// Il2CppName: MoveRightGetChar
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveRight
// Il2CppName: MoveRight
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveRight
// Il2CppName: MoveRight
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::MoveLeft
// Il2CppName: MoveLeft
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CharAt
// Il2CppName: CharAt
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::RightChar
// Il2CppName: RightChar
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::RightChar
// Il2CppName: RightChar
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::CharsRight
// Il2CppName: CharsRight
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Text::RegularExpressions::RegexParser::_cctor
// Il2CppName: .cctor
// Cannot perform method pointer template specialization from operators!
