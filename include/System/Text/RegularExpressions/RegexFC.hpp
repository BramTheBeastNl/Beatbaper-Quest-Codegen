// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexCharClass
  class RegexCharClass;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x1A
  // Autogenerated type: System.Text.RegularExpressions.RegexFC
  // [] Offset: FFFFFFFF
  class RegexFC : public ::Il2CppObject {
    public:
    // System.Text.RegularExpressions.RegexCharClass _cc
    // Size: 0x8
    // Offset: 0x10
    System::Text::RegularExpressions::RegexCharClass* cc;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::RegexCharClass*) == 0x8);
    // System.Boolean _nullable
    // Size: 0x1
    // Offset: 0x18
    bool nullable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean _caseInsensitive
    // Size: 0x1
    // Offset: 0x19
    bool caseInsensitive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: RegexFC
    RegexFC(System::Text::RegularExpressions::RegexCharClass* cc_ = {}, bool nullable_ = {}, bool caseInsensitive_ = {}) noexcept : cc{cc_}, nullable{nullable_}, caseInsensitive{caseInsensitive_} {}
    // System.Void .ctor(System.Boolean nullable)
    // Offset: 0x1544D28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexFC* New_ctor(bool nullable) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::RegexFC::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexFC*, creationType>(nullable)));
    }
    // System.Void .ctor(System.Char ch, System.Boolean not, System.Boolean nullable, System.Boolean caseInsensitive)
    // Offset: 0x1544DB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexFC* New_ctor(::Il2CppChar ch, bool _not, bool nullable, bool caseInsensitive) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::RegexFC::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexFC*, creationType>(ch, _not, nullable, caseInsensitive)));
    }
    // System.Void .ctor(System.String charClass, System.Boolean nullable, System.Boolean caseInsensitive)
    // Offset: 0x1544EC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegexFC* New_ctor(::Il2CppString* charClass, bool nullable, bool caseInsensitive) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::RegexFC::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegexFC*, creationType>(charClass, nullable, caseInsensitive)));
    }
    // System.Boolean AddFC(System.Text.RegularExpressions.RegexFC fc, System.Boolean concatenate)
    // Offset: 0x1544F7C
    bool AddFC(System::Text::RegularExpressions::RegexFC* fc, bool concatenate);
    // System.String GetFirstChars(System.Globalization.CultureInfo culture)
    // Offset: 0x1545034
    ::Il2CppString* GetFirstChars(System::Globalization::CultureInfo* culture);
    // System.Boolean IsCaseInsensitive()
    // Offset: 0x1545078
    bool IsCaseInsensitive();
  }; // System.Text.RegularExpressions.RegexFC
  static check_size<sizeof(RegexFC), 25 + sizeof(bool)> __System_Text_RegularExpressions_RegexFCSizeCheck;
  static_assert(sizeof(RegexFC) == 0x1A);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::RegexFC*, "System.Text.RegularExpressions", "RegexFC");
#pragma pack(pop)
