// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: UnicodeCategory
  struct UnicodeCategory;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Autogenerated type: System.Text.RegularExpressions.RegexCharClass
  class RegexCharClass : public ::CsObject {
    public:
    // Nested type: System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping
    struct LowerCaseMapping;
    // Nested type: System::Text::RegularExpressions::RegexCharClass::SingleRangeComparer
    class SingleRangeComparer;
    // Nested type: System::Text::RegularExpressions::RegexCharClass::SingleRange
    class SingleRange;
    // private System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexCharClass/SingleRange> _rangelist
    // Offset: 0x10
    System::Collections::Generic::List_1<System::Text::RegularExpressions::RegexCharClass::SingleRange*>* rangelist;
    // private System.Text.StringBuilder _categories
    // Offset: 0x18
    System::Text::StringBuilder* categories;
    // private System.Boolean _canonical
    // Offset: 0x20
    bool canonical;
    // private System.Boolean _negate
    // Offset: 0x21
    bool negate;
    // private System.Text.RegularExpressions.RegexCharClass _subtractor
    // Offset: 0x28
    System::Text::RegularExpressions::RegexCharClass* subtractor;
    // Get static field: static private readonly System.String InternalRegexIgnoreCase
    static ::CsString* _get_InternalRegexIgnoreCase();
    // Set static field: static private readonly System.String InternalRegexIgnoreCase
    static void _set_InternalRegexIgnoreCase(::CsString* value);
    // Get static field: static private readonly System.String Space
    static ::CsString* _get_Space();
    // Set static field: static private readonly System.String Space
    static void _set_Space(::CsString* value);
    // Get static field: static private readonly System.String NotSpace
    static ::CsString* _get_NotSpace();
    // Set static field: static private readonly System.String NotSpace
    static void _set_NotSpace(::CsString* value);
    // Get static field: static private readonly System.String Word
    static ::CsString* _get_Word();
    // Set static field: static private readonly System.String Word
    static void _set_Word(::CsString* value);
    // Get static field: static private readonly System.String NotWord
    static ::CsString* _get_NotWord();
    // Set static field: static private readonly System.String NotWord
    static void _set_NotWord(::CsString* value);
    // Get static field: static readonly System.String SpaceClass
    static ::CsString* _get_SpaceClass();
    // Set static field: static readonly System.String SpaceClass
    static void _set_SpaceClass(::CsString* value);
    // Get static field: static readonly System.String NotSpaceClass
    static ::CsString* _get_NotSpaceClass();
    // Set static field: static readonly System.String NotSpaceClass
    static void _set_NotSpaceClass(::CsString* value);
    // Get static field: static readonly System.String WordClass
    static ::CsString* _get_WordClass();
    // Set static field: static readonly System.String WordClass
    static void _set_WordClass(::CsString* value);
    // Get static field: static readonly System.String NotWordClass
    static ::CsString* _get_NotWordClass();
    // Set static field: static readonly System.String NotWordClass
    static void _set_NotWordClass(::CsString* value);
    // Get static field: static readonly System.String DigitClass
    static ::CsString* _get_DigitClass();
    // Set static field: static readonly System.String DigitClass
    static void _set_DigitClass(::CsString* value);
    // Get static field: static readonly System.String NotDigitClass
    static ::CsString* _get_NotDigitClass();
    // Set static field: static readonly System.String NotDigitClass
    static void _set_NotDigitClass(::CsString* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.String> _definedCategories
    static System::Collections::Generic::Dictionary_2<::CsString*, ::CsString*>* _get__definedCategories();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.String> _definedCategories
    static void _set__definedCategories(System::Collections::Generic::Dictionary_2<::CsString*, ::CsString*>* value);
    // Get static field: static private readonly System.String[,] _propTable
    static ::Array<::CsString*>* _get__propTable();
    // Set static field: static private readonly System.String[,] _propTable
    static void _set__propTable(::Array<::CsString*>* value);
    // Get static field: static private readonly System.Text.RegularExpressions.RegexCharClass/LowerCaseMapping[] _lcTable
    static ::Array<System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping>* _get__lcTable();
    // Set static field: static private readonly System.Text.RegularExpressions.RegexCharClass/LowerCaseMapping[] _lcTable
    static void _set__lcTable(::Array<System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping>* value);
    // static private System.Void .cctor()
    // Offset: 0x121DB8C
    static void _cctor();
    // private System.Void .ctor(System.Boolean negate, System.Collections.Generic.List`1<System.Text.RegularExpressions.RegexCharClass/SingleRange> ranges, System.Text.StringBuilder categories, System.Text.RegularExpressions.RegexCharClass subtraction)
    // Offset: 0x12228E8
    static RegexCharClass* New_ctor(bool negate, System::Collections::Generic::List_1<System::Text::RegularExpressions::RegexCharClass::SingleRange*>* ranges, System::Text::StringBuilder* categories, System::Text::RegularExpressions::RegexCharClass* subtraction);
    // System.Boolean get_CanMerge()
    // Offset: 0x1222968
    bool get_CanMerge();
    // System.Void set_Negate(System.Boolean value)
    // Offset: 0x1222988
    void set_Negate(bool value);
    // System.Void AddChar(System.Char c)
    // Offset: 0x1222994
    void AddChar(::Il2CppChar c);
    // System.Void AddCharClass(System.Text.RegularExpressions.RegexCharClass cc)
    // Offset: 0x1222A78
    void AddCharClass(System::Text::RegularExpressions::RegexCharClass* cc);
    // private System.Void AddSet(System.String set)
    // Offset: 0x1222C84
    void AddSet(::CsString* set);
    // System.Void AddSubtraction(System.Text.RegularExpressions.RegexCharClass sub)
    // Offset: 0x1222EC4
    void AddSubtraction(System::Text::RegularExpressions::RegexCharClass* sub);
    // System.Void AddRange(System.Char first, System.Char last)
    // Offset: 0x122299C
    void AddRange(::Il2CppChar first, ::Il2CppChar last);
    // System.Void AddCategoryFromName(System.String categoryName, System.Boolean invert, System.Boolean caseInsensitive, System.String pattern)
    // Offset: 0x1222ECC
    void AddCategoryFromName(::CsString* categoryName, bool invert, bool caseInsensitive, ::CsString* pattern);
    // private System.Void AddCategory(System.String category)
    // Offset: 0x12233E0
    void AddCategory(::CsString* category);
    // System.Void AddLowercase(System.Globalization.CultureInfo culture)
    // Offset: 0x12233FC
    void AddLowercase(System::Globalization::CultureInfo* culture);
    // private System.Void AddLowercaseRange(System.Char chMin, System.Char chMax, System.Globalization.CultureInfo culture)
    // Offset: 0x1223508
    void AddLowercaseRange(::Il2CppChar chMin, ::Il2CppChar chMax, System::Globalization::CultureInfo* culture);
    // System.Void AddWord(System.Boolean ecma, System.Boolean negate)
    // Offset: 0x1223768
    void AddWord(bool ecma, bool negate);
    // System.Void AddSpace(System.Boolean ecma, System.Boolean negate)
    // Offset: 0x1223864
    void AddSpace(bool ecma, bool negate);
    // System.Void AddDigit(System.Boolean ecma, System.Boolean negate, System.String pattern)
    // Offset: 0x1223960
    void AddDigit(bool ecma, bool negate, ::CsString* pattern);
    // static System.Char SingletonChar(System.String set)
    // Offset: 0x1223A10
    static ::Il2CppChar SingletonChar(::CsString* set);
    // static System.Boolean IsMergeable(System.String charClass)
    // Offset: 0x1223A2C
    static bool IsMergeable(::CsString* charClass);
    // static System.Boolean IsEmpty(System.String charClass)
    // Offset: 0x1223B70
    static bool IsEmpty(::CsString* charClass);
    // static System.Boolean IsSingleton(System.String set)
    // Offset: 0x1223C38
    static bool IsSingleton(::CsString* set);
    // static System.Boolean IsSingletonInverse(System.String set)
    // Offset: 0x1223D54
    static bool IsSingletonInverse(::CsString* set);
    // static private System.Boolean IsSubtraction(System.String charClass)
    // Offset: 0x1223B0C
    static bool IsSubtraction(::CsString* charClass);
    // static System.Boolean IsNegated(System.String set)
    // Offset: 0x1223AE0
    static bool IsNegated(::CsString* set);
    // static System.Boolean IsECMAWordChar(System.Char ch)
    // Offset: 0x1223E74
    static bool IsECMAWordChar(::Il2CppChar ch);
    // static System.Boolean IsWordChar(System.Char ch)
    // Offset: 0x1223F5C
    static bool IsWordChar(::Il2CppChar ch);
    // static System.Boolean CharInClass(System.Char ch, System.String set)
    // Offset: 0x1223EE4
    static bool CharInClass(::Il2CppChar ch, ::CsString* set);
    // static System.Boolean CharInClassRecursive(System.Char ch, System.String set, System.Int32 start)
    // Offset: 0x1223FF0
    static bool CharInClassRecursive(::Il2CppChar ch, ::CsString* set, int start);
    // static private System.Boolean CharInClassInternal(System.Char ch, System.String set, System.Int32 start, System.Int32 mySetLength, System.Int32 myCategoryLength)
    // Offset: 0x1224138
    static bool CharInClassInternal(::Il2CppChar ch, ::CsString* set, int start, int mySetLength, int myCategoryLength);
    // static private System.Boolean CharInCategory(System.Char ch, System.String set, System.Int32 start, System.Int32 mySetLength, System.Int32 myCategoryLength)
    // Offset: 0x1224258
    static bool CharInCategory(::Il2CppChar ch, ::CsString* set, int start, int mySetLength, int myCategoryLength);
    // static private System.Boolean CharInCategoryGroup(System.Char ch, System.Globalization.UnicodeCategory chcategory, System.String category, System.Int32 i)
    // Offset: 0x1224410
    static bool CharInCategoryGroup(::Il2CppChar ch, System::Globalization::UnicodeCategory chcategory, ::CsString* category, int& i);
    // static private System.String NegateCategory(System.String category)
    // Offset: 0x1222744
    static ::CsString* NegateCategory(::CsString* category);
    // static System.Text.RegularExpressions.RegexCharClass Parse(System.String charClass)
    // Offset: 0x12244E4
    static System::Text::RegularExpressions::RegexCharClass* Parse(::CsString* charClass);
    // static private System.Text.RegularExpressions.RegexCharClass ParseRecursive(System.String charClass, System.Int32 start)
    // Offset: 0x122454C
    static System::Text::RegularExpressions::RegexCharClass* ParseRecursive(::CsString* charClass, int start);
    // private System.Int32 RangeCount()
    // Offset: 0x1222BBC
    int RangeCount();
    // System.String ToStringClass()
    // Offset: 0x1224778
    ::CsString* ToStringClass();
    // private System.Text.RegularExpressions.RegexCharClass/SingleRange GetRangeAt(System.Int32 i)
    // Offset: 0x1222C0C
    System::Text::RegularExpressions::RegexCharClass::SingleRange* GetRangeAt(int i);
    // private System.Void Canonicalize()
    // Offset: 0x1224938
    void Canonicalize();
    // static private System.String SetFromProperty(System.String capname, System.Boolean invert, System.String pattern)
    // Offset: 0x12230D4
    static ::CsString* SetFromProperty(::CsString* capname, bool invert, ::CsString* pattern);
    // System.Void .ctor()
    // Offset: 0x1222834
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static RegexCharClass* New_ctor();
  }; // System.Text.RegularExpressions.RegexCharClass
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::RegexCharClass*, "System.Text.RegularExpressions", "RegexCharClass");
#pragma pack(pop)
