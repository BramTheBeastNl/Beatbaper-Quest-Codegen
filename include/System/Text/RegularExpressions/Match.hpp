// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Text.RegularExpressions.Group
#include "System/Text/RegularExpressions/Group.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: GroupCollection
  class GroupCollection;
  // Forward declaring type: Regex
  class Regex;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.Match
  // [TokenAttribute] Offset: FFFFFFFF
  class Match : public System::Text::RegularExpressions::Group {
    public:
    // System.Text.RegularExpressions.GroupCollection _groupcoll
    // Size: 0x8
    // Offset: 0x38
    System::Text::RegularExpressions::GroupCollection* groupcoll;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::GroupCollection*) == 0x8);
    // System.Text.RegularExpressions.Regex _regex
    // Size: 0x8
    // Offset: 0x40
    System::Text::RegularExpressions::Regex* regex;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::Regex*) == 0x8);
    // System.Int32 _textbeg
    // Size: 0x4
    // Offset: 0x48
    int textbeg;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _textpos
    // Size: 0x4
    // Offset: 0x4C
    int textpos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _textend
    // Size: 0x4
    // Offset: 0x50
    int textend;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _textstart
    // Size: 0x4
    // Offset: 0x54
    int textstart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32[][] _matches
    // Size: 0x8
    // Offset: 0x58
    ::Array<::Array<int>*>* matches;
    // Field size check
    static_assert(sizeof(::Array<::Array<int>*>*) == 0x8);
    // System.Int32[] _matchcount
    // Size: 0x8
    // Offset: 0x60
    ::Array<int>* matchcount;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // System.Boolean _balancing
    // Size: 0x1
    // Offset: 0x68
    bool balancing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Match
    Match(System::Text::RegularExpressions::GroupCollection* groupcoll_ = {}, System::Text::RegularExpressions::Regex* regex_ = {}, int textbeg_ = {}, int textpos_ = {}, int textend_ = {}, int textstart_ = {}, ::Array<::Array<int>*>* matches_ = {}, ::Array<int>* matchcount_ = {}, bool balancing_ = {}) noexcept : groupcoll{groupcoll_}, regex{regex_}, textbeg{textbeg_}, textpos{textpos_}, textend{textend_}, textstart{textstart_}, matches{matches_}, matchcount{matchcount_}, balancing{balancing_} {}
    // Get static field: static System.Text.RegularExpressions.Match _empty
    static System::Text::RegularExpressions::Match* _get__empty();
    // Set static field: static System.Text.RegularExpressions.Match _empty
    static void _set__empty(System::Text::RegularExpressions::Match* value);
    // Get instance field: System.Text.RegularExpressions.GroupCollection _groupcoll
    System::Text::RegularExpressions::GroupCollection* _get__groupcoll();
    // Set instance field: System.Text.RegularExpressions.GroupCollection _groupcoll
    void _set__groupcoll(System::Text::RegularExpressions::GroupCollection* value);
    // Get instance field: System.Text.RegularExpressions.Regex _regex
    System::Text::RegularExpressions::Regex* _get__regex();
    // Set instance field: System.Text.RegularExpressions.Regex _regex
    void _set__regex(System::Text::RegularExpressions::Regex* value);
    // Get instance field: System.Int32 _textbeg
    int _get__textbeg();
    // Set instance field: System.Int32 _textbeg
    void _set__textbeg(int value);
    // Get instance field: System.Int32 _textpos
    int _get__textpos();
    // Set instance field: System.Int32 _textpos
    void _set__textpos(int value);
    // Get instance field: System.Int32 _textend
    int _get__textend();
    // Set instance field: System.Int32 _textend
    void _set__textend(int value);
    // Get instance field: System.Int32 _textstart
    int _get__textstart();
    // Set instance field: System.Int32 _textstart
    void _set__textstart(int value);
    // Get instance field: System.Int32[][] _matches
    ::Array<::Array<int>*>* _get__matches();
    // Set instance field: System.Int32[][] _matches
    void _set__matches(::Array<::Array<int>*>* value);
    // Get instance field: System.Int32[] _matchcount
    ::Array<int>* _get__matchcount();
    // Set instance field: System.Int32[] _matchcount
    void _set__matchcount(::Array<int>* value);
    // Get instance field: System.Boolean _balancing
    bool _get__balancing();
    // Set instance field: System.Boolean _balancing
    void _set__balancing(bool value);
    // static public System.Text.RegularExpressions.Match get_Empty()
    // Offset: 0x18681F4
    static System::Text::RegularExpressions::Match* get_Empty();
    // public System.Text.RegularExpressions.GroupCollection get_Groups()
    // Offset: 0x1868420
    System::Text::RegularExpressions::GroupCollection* get_Groups();
    // System.Void .ctor(System.Text.RegularExpressions.Regex regex, System.Int32 capcount, System.String text, System.Int32 begpos, System.Int32 len, System.Int32 startpos)
    // Offset: 0x186825C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Match* New_ctor(System::Text::RegularExpressions::Regex* regex, int capcount, ::Il2CppString* text, int begpos, int len, int startpos) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::Match::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Match*, creationType>(regex, capcount, text, begpos, len, startpos)));
    }
    // System.Void Reset(System.Text.RegularExpressions.Regex regex, System.String text, System.Int32 textbeg, System.Int32 textend, System.Int32 textstart)
    // Offset: 0x18683B8
    void Reset(System::Text::RegularExpressions::Regex* regex, ::Il2CppString* text, int textbeg, int textend, int textstart);
    // public System.Text.RegularExpressions.Match NextMatch()
    // Offset: 0x1868490
    System::Text::RegularExpressions::Match* NextMatch();
    // System.Void AddMatch(System.Int32 cap, System.Int32 start, System.Int32 len)
    // Offset: 0x1868788
    void AddMatch(int cap, int start, int len);
    // System.Void BalanceMatch(System.Int32 cap)
    // Offset: 0x18689E8
    void BalanceMatch(int cap);
    // System.Void RemoveMatch(System.Int32 cap)
    // Offset: 0x1868ACC
    void RemoveMatch(int cap);
    // System.Boolean IsMatched(System.Int32 cap)
    // Offset: 0x1868B10
    bool IsMatched(int cap);
    // System.Int32 MatchIndex(System.Int32 cap)
    // Offset: 0x1868BAC
    int MatchIndex(int cap);
    // System.Int32 MatchLength(System.Int32 cap)
    // Offset: 0x1868C44
    int MatchLength(int cap);
    // System.Void Tidy(System.Int32 textpos)
    // Offset: 0x1868CDC
    void Tidy(int textpos);
    // static private System.Void .cctor()
    // Offset: 0x1868E70
    // Implemented from: System.Text.RegularExpressions.Group
    // Base method: System.Void Group::.cctor()
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0x1868F04
    // Implemented from: System.Text.RegularExpressions.Group
    // Base method: System.Void Group::.ctor()
    // Base method: System.Void Capture::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Match* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::Match::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Match*, creationType>()));
    }
  }; // System.Text.RegularExpressions.Match
  #pragma pack(pop)
  static check_size<sizeof(Match), 104 + sizeof(bool)> __System_Text_RegularExpressions_MatchSizeCheck;
  static_assert(sizeof(Match) == 0x69);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::Match*, "System.Text.RegularExpressions", "Match");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::RegularExpressions::Match* (*)()>(&System::Text::RegularExpressions::Match::get_Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::get_Groups
// Il2CppName: get_Groups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::RegularExpressions::GroupCollection* (System::Text::RegularExpressions::Match::*)()>(&System::Text::RegularExpressions::Match::get_Groups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "get_Groups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Match::*)(System::Text::RegularExpressions::Regex*, ::Il2CppString*, int, int, int)>(&System::Text::RegularExpressions::Match::Reset)> {
  static const MethodInfo* get() {
    static auto* regex = &::il2cpp_utils::GetClassFromName("System.Text.RegularExpressions", "Regex")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* textbeg = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textend = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textstart = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regex, text, textbeg, textend, textstart});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::NextMatch
// Il2CppName: NextMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::RegularExpressions::Match* (System::Text::RegularExpressions::Match::*)()>(&System::Text::RegularExpressions::Match::NextMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "NextMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::AddMatch
// Il2CppName: AddMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Match::*)(int, int, int)>(&System::Text::RegularExpressions::Match::AddMatch)> {
  static const MethodInfo* get() {
    static auto* cap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* len = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "AddMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cap, start, len});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::BalanceMatch
// Il2CppName: BalanceMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Match::*)(int)>(&System::Text::RegularExpressions::Match::BalanceMatch)> {
  static const MethodInfo* get() {
    static auto* cap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "BalanceMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cap});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::RemoveMatch
// Il2CppName: RemoveMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Match::*)(int)>(&System::Text::RegularExpressions::Match::RemoveMatch)> {
  static const MethodInfo* get() {
    static auto* cap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "RemoveMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cap});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::IsMatched
// Il2CppName: IsMatched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Text::RegularExpressions::Match::*)(int)>(&System::Text::RegularExpressions::Match::IsMatched)> {
  static const MethodInfo* get() {
    static auto* cap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "IsMatched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cap});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::MatchIndex
// Il2CppName: MatchIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::Match::*)(int)>(&System::Text::RegularExpressions::Match::MatchIndex)> {
  static const MethodInfo* get() {
    static auto* cap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "MatchIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cap});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::MatchLength
// Il2CppName: MatchLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Text::RegularExpressions::Match::*)(int)>(&System::Text::RegularExpressions::Match::MatchLength)> {
  static const MethodInfo* get() {
    static auto* cap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "MatchLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cap});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::Tidy
// Il2CppName: Tidy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Text::RegularExpressions::Match::*)(int)>(&System::Text::RegularExpressions::Match::Tidy)> {
  static const MethodInfo* get() {
    static auto* textpos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), "Tidy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textpos});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Text::RegularExpressions::Match::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Text::RegularExpressions::Match*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Text::RegularExpressions::Match::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
