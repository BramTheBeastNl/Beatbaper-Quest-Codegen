// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Text.RegularExpressions.RegexCharClass
#include "System/Text/RegularExpressions/RegexCharClass.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0xC
  // Autogenerated type: System.Text.RegularExpressions.RegexCharClass/LowerCaseMapping
  // [] Offset: FFFFFFFF
  struct RegexCharClass::LowerCaseMapping/*, public System::ValueType*/ {
    public:
    // System.Char _chMin
    // Size: 0x2
    // Offset: 0x0
    ::Il2CppChar chMin;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // System.Char _chMax
    // Size: 0x2
    // Offset: 0x2
    ::Il2CppChar chMax;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // System.Int32 _lcOp
    // Size: 0x4
    // Offset: 0x4
    int lcOp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _data
    // Size: 0x4
    // Offset: 0x8
    int data;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: LowerCaseMapping
    constexpr LowerCaseMapping(::Il2CppChar chMin_ = {}, ::Il2CppChar chMax_ = {}, int lcOp_ = {}, int data_ = {}) noexcept : chMin{chMin_}, chMax{chMax_}, lcOp{lcOp_}, data{data_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // System.Void .ctor(System.Char chMin, System.Char chMax, System.Int32 lcOp, System.Int32 data)
    // Offset: 0xCA26E0
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  LowerCaseMapping(::Il2CppChar chMin, ::Il2CppChar chMax, int lcOp, int data)
  }; // System.Text.RegularExpressions.RegexCharClass/LowerCaseMapping
  static check_size<sizeof(RegexCharClass::LowerCaseMapping), 8 + sizeof(int)> __System_Text_RegularExpressions_RegexCharClass_LowerCaseMappingSizeCheck;
  static_assert(sizeof(RegexCharClass::LowerCaseMapping) == 0xC);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::RegexCharClass::LowerCaseMapping, "System.Text.RegularExpressions", "RegexCharClass/LowerCaseMapping");
#pragma pack(pop)
