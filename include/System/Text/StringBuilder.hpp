// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: ParamsArray
  struct ParamsArray;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Text
namespace System::Text {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Text.StringBuilder
  // [DefaultMemberAttribute] Offset: D7B4F4
  // [ComVisibleAttribute] Offset: D7B4F4
  class StringBuilder : public ::Il2CppObject/*, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // System.Char[] m_ChunkChars
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppChar>* m_ChunkChars;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // System.Text.StringBuilder m_ChunkPrevious
    // Size: 0x8
    // Offset: 0x18
    System::Text::StringBuilder* m_ChunkPrevious;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // System.Int32 m_ChunkLength
    // Size: 0x4
    // Offset: 0x20
    int m_ChunkLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_ChunkOffset
    // Size: 0x4
    // Offset: 0x24
    int m_ChunkOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 m_MaxCapacity
    // Size: 0x4
    // Offset: 0x28
    int m_MaxCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: StringBuilder
    StringBuilder(::Array<::Il2CppChar>* m_ChunkChars_ = {}, System::Text::StringBuilder* m_ChunkPrevious_ = {}, int m_ChunkLength_ = {}, int m_ChunkOffset_ = {}, int m_MaxCapacity_ = {}) noexcept : m_ChunkChars{m_ChunkChars_}, m_ChunkPrevious{m_ChunkPrevious_}, m_ChunkLength{m_ChunkLength_}, m_ChunkOffset{m_ChunkOffset_}, m_MaxCapacity{m_MaxCapacity_} {}
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // static field const value: static System.Int32 DefaultCapacity
    static constexpr const int DefaultCapacity = 16;
    // Get static field: static System.Int32 DefaultCapacity
    static int _get_DefaultCapacity();
    // Set static field: static System.Int32 DefaultCapacity
    static void _set_DefaultCapacity(int value);
    // static field const value: static private System.String CapacityField
    static constexpr const char* CapacityField = "Capacity";
    // Get static field: static private System.String CapacityField
    static ::Il2CppString* _get_CapacityField();
    // Set static field: static private System.String CapacityField
    static void _set_CapacityField(::Il2CppString* value);
    // static field const value: static private System.String MaxCapacityField
    static constexpr const char* MaxCapacityField = "m_MaxCapacity";
    // Get static field: static private System.String MaxCapacityField
    static ::Il2CppString* _get_MaxCapacityField();
    // Set static field: static private System.String MaxCapacityField
    static void _set_MaxCapacityField(::Il2CppString* value);
    // static field const value: static private System.String StringValueField
    static constexpr const char* StringValueField = "m_StringValue";
    // Get static field: static private System.String StringValueField
    static ::Il2CppString* _get_StringValueField();
    // Set static field: static private System.String StringValueField
    static void _set_StringValueField(::Il2CppString* value);
    // static field const value: static private System.String ThreadIDField
    static constexpr const char* ThreadIDField = "m_currentThread";
    // Get static field: static private System.String ThreadIDField
    static ::Il2CppString* _get_ThreadIDField();
    // Set static field: static private System.String ThreadIDField
    static void _set_ThreadIDField(::Il2CppString* value);
    // static field const value: static System.Int32 MaxChunkSize
    static constexpr const int MaxChunkSize = 8000;
    // Get static field: static System.Int32 MaxChunkSize
    static int _get_MaxChunkSize();
    // Set static field: static System.Int32 MaxChunkSize
    static void _set_MaxChunkSize(int value);
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x1CFDD6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.String value)
    // Offset: 0x1CFF568
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(::Il2CppString* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(value)));
    }
    // public System.Void .ctor(System.String value, System.Int32 capacity)
    // Offset: 0x1CFF53C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(::Il2CppString* value, int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(value, capacity)));
    }
    // public System.Void .ctor(System.String value, System.Int32 startIndex, System.Int32 length, System.Int32 capacity)
    // Offset: 0x1CFF570
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(::Il2CppString* value, int startIndex, int length, int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(value, startIndex, length, capacity)));
    }
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1CFF8DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(info, context)));
    }
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1CFFB80
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Int32 get_Capacity()
    // Offset: 0x1CFFC9C
    int get_Capacity();
    // public System.Void set_Capacity(System.Int32 value)
    // Offset: 0x1CFFCC0
    void set_Capacity(int value);
    // public System.Int32 get_MaxCapacity()
    // Offset: 0x1CFFDF0
    int get_MaxCapacity();
    // public System.Int32 EnsureCapacity(System.Int32 capacity)
    // Offset: 0x1CFFDF8
    int EnsureCapacity(int capacity);
    // public System.String ToString(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1D00030
    ::Il2CppString* ToString(int startIndex, int length);
    // public System.Text.StringBuilder Clear()
    // Offset: 0x1D00270
    System::Text::StringBuilder* Clear();
    // public System.Int32 get_Length()
    // Offset: 0x1CFE3CC
    int get_Length();
    // public System.Void set_Length(System.Int32 value)
    // Offset: 0x1D00298
    void set_Length(int value);
    // public System.Char get_Chars(System.Int32 index)
    // Offset: 0x1CFE0B0
    ::Il2CppChar get_Chars(int index);
    // public System.Void set_Chars(System.Int32 index, System.Char value)
    // Offset: 0x1CFE414
    void set_Chars(int index, ::Il2CppChar value);
    // public System.Text.StringBuilder Append(System.Char value, System.Int32 repeatCount)
    // Offset: 0x1D00434
    System::Text::StringBuilder* Append(::Il2CppChar value, int repeatCount);
    // public System.Text.StringBuilder Append(System.Char[] value, System.Int32 startIndex, System.Int32 charCount)
    // Offset: 0x1D00718
    System::Text::StringBuilder* Append(::Array<::Il2CppChar>* value, int startIndex, int charCount);
    // public System.Text.StringBuilder Append(System.String value)
    // Offset: 0x1CFDDD4
    System::Text::StringBuilder* Append(::Il2CppString* value);
    // private System.Void AppendHelper(System.String value)
    // Offset: 0x1D009FC
    void AppendHelper(::Il2CppString* value);
    // public System.Text.StringBuilder Append(System.String value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1CFEA54
    System::Text::StringBuilder* Append(::Il2CppString* value, int startIndex, int count);
    // public System.Text.StringBuilder AppendLine()
    // Offset: 0x1D00A38
    System::Text::StringBuilder* AppendLine();
    // public System.Text.StringBuilder AppendLine(System.String value)
    // Offset: 0x1D00A64
    System::Text::StringBuilder* AppendLine(::Il2CppString* value);
    // public System.Text.StringBuilder Insert(System.Int32 index, System.String value, System.Int32 count)
    // Offset: 0x1D00A94
    System::Text::StringBuilder* Insert(int index, ::Il2CppString* value, int count);
    // public System.Text.StringBuilder Remove(System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1CFE510
    System::Text::StringBuilder* Remove(int startIndex, int length);
    // public System.Text.StringBuilder Append(System.Boolean value)
    // Offset: 0x1D0114C
    System::Text::StringBuilder* Append(bool value);
    // public System.Text.StringBuilder Append(System.Byte value)
    // Offset: 0x1D01188
    System::Text::StringBuilder* Append(uint8_t value);
    // public System.Text.StringBuilder Append(System.Char value)
    // Offset: 0x1CFF068
    System::Text::StringBuilder* Append(::Il2CppChar value);
    // public System.Text.StringBuilder Append(System.Int32 value)
    // Offset: 0x1D01218
    System::Text::StringBuilder* Append(int value);
    // public System.Text.StringBuilder Append(System.Int64 value)
    // Offset: 0x1D012A8
    System::Text::StringBuilder* Append(int64_t value);
    // public System.Text.StringBuilder Append(System.Double value)
    // Offset: 0x1D01338
    System::Text::StringBuilder* Append(double value);
    // public System.Text.StringBuilder Append(System.Object value)
    // Offset: 0x1D013C8
    System::Text::StringBuilder* Append(::Il2CppObject* value);
    // public System.Text.StringBuilder Insert(System.Int32 index, System.String value)
    // Offset: 0x1D01414
    System::Text::StringBuilder* Insert(int index, ::Il2CppString* value);
    // public System.Text.StringBuilder Insert(System.Int32 index, System.Char value)
    // Offset: 0x1D01608
    System::Text::StringBuilder* Insert(int index, ::Il2CppChar value);
    // public System.Text.StringBuilder AppendFormat(System.String format, System.Object arg0)
    // Offset: 0x1D01638
    System::Text::StringBuilder* AppendFormat(::Il2CppString* format, ::Il2CppObject* arg0);
    // public System.Text.StringBuilder AppendFormat(System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0x1D01E7C
    System::Text::StringBuilder* AppendFormat(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // public System.Text.StringBuilder AppendFormat(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
    // Offset: 0x1D01EDC
    System::Text::StringBuilder* AppendFormat(::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1, ::Il2CppObject* arg2);
    // public System.Text.StringBuilder AppendFormat(System.String format, params System.Object[] args)
    // Offset: 0x1D01F40
    System::Text::StringBuilder* AppendFormat(::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Text.StringBuilder AppendFormat(System.String format, params System.Object[] args)
    System::Text::StringBuilder* AppendFormat(::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Text.StringBuilder AppendFormat(System.String format, params System.Object[] args)
    template<class ...TParams>
    System::Text::StringBuilder* AppendFormat(::Il2CppString* format, TParams&&... args) {
      return AppendFormat(format, {args...});
    }
    // public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, System.String format, System.Object arg0)
    // Offset: 0x1D02020
    System::Text::StringBuilder* AppendFormat(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0);
    // public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, System.String format, System.Object arg0, System.Object arg1)
    // Offset: 0x1D02088
    System::Text::StringBuilder* AppendFormat(System::IFormatProvider* provider, ::Il2CppString* format, ::Il2CppObject* arg0, ::Il2CppObject* arg1);
    // public System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, System.String format, params System.Object[] args)
    // Offset: 0x1D020F4
    System::Text::StringBuilder* AppendFormat(System::IFormatProvider* provider, ::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, System.String format, params System.Object[] args)
    System::Text::StringBuilder* AppendFormat(System::IFormatProvider* provider, ::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, System.String format, params System.Object[] args)
    template<class ...TParams>
    System::Text::StringBuilder* AppendFormat(System::IFormatProvider* provider, ::Il2CppString* format, TParams&&... args) {
      return AppendFormat(provider, format, {args...});
    }
    // static private System.Void FormatError()
    // Offset: 0x1D021E0
    static void FormatError();
    // System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, System.String format, System.ParamsArray args)
    // Offset: 0x1D01694
    System::Text::StringBuilder* AppendFormatHelper(System::IFormatProvider* provider, ::Il2CppString* format, System::ParamsArray args);
    // public System.Text.StringBuilder Replace(System.String oldValue, System.String newValue)
    // Offset: 0x1D02260
    System::Text::StringBuilder* Replace(::Il2CppString* oldValue, ::Il2CppString* newValue);
    // public System.Text.StringBuilder Replace(System.String oldValue, System.String newValue, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x1D02270
    System::Text::StringBuilder* Replace(::Il2CppString* oldValue, ::Il2CppString* newValue, int startIndex, int count);
    // public System.Text.StringBuilder Append(System.Char* value, System.Int32 valueCount)
    // Offset: 0x1D008C4
    System::Text::StringBuilder* Append(::Il2CppChar* value, int valueCount);
    // private System.Void Insert(System.Int32 index, System.Char* value, System.Int32 valueCount)
    // Offset: 0x1D014F4
    void Insert(int index, ::Il2CppChar* value, int valueCount);
    // private System.Void ReplaceAllInChunk(System.Int32[] replacements, System.Int32 replacementsCount, System.Text.StringBuilder sourceChunk, System.Int32 removeCount, System.String value)
    // Offset: 0x1D02694
    void ReplaceAllInChunk(::Array<int>* replacements, int replacementsCount, System::Text::StringBuilder* sourceChunk, int removeCount, ::Il2CppString* value);
    // private System.Boolean StartsWith(System.Text.StringBuilder chunk, System.Int32 indexInChunk, System.Int32 count, System.String value)
    // Offset: 0x1D025AC
    bool StartsWith(System::Text::StringBuilder* chunk, int indexInChunk, int count, ::Il2CppString* value);
    // private System.Void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref System.Int32 indexInChunk, System.Char* value, System.Int32 count)
    // Offset: 0x1D00F3C
    void ReplaceInPlaceAtChunk(System::Text::StringBuilder*& chunk, int& indexInChunk, ::Il2CppChar* value, int count);
    // static private System.Void ThreadSafeCopy(System.Char* sourcePtr, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0x1CFF7C0
    static void ThreadSafeCopy(::Il2CppChar* sourcePtr, ::Array<::Il2CppChar>* destination, int destinationIndex, int count);
    // static private System.Void ThreadSafeCopy(System.Char[] source, System.Int32 sourceIndex, System.Char[] destination, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0x1D028A4
    static void ThreadSafeCopy(::Array<::Il2CppChar>* source, int sourceIndex, ::Array<::Il2CppChar>* destination, int destinationIndex, int count);
    // private System.Text.StringBuilder FindChunkForIndex(System.Int32 index)
    // Offset: 0x1D0055C
    System::Text::StringBuilder* FindChunkForIndex(int index);
    // private System.Text.StringBuilder Next(System.Text.StringBuilder chunk)
    // Offset: 0x1D02860
    System::Text::StringBuilder* Next(System::Text::StringBuilder* chunk);
    // private System.Void ExpandByABlock(System.Int32 minBlockCharCount)
    // Offset: 0x1D00584
    void ExpandByABlock(int minBlockCharCount);
    // private System.Void .ctor(System.Text.StringBuilder from)
    // Offset: 0x1D029C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(System::Text::StringBuilder* from) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(from)));
    }
    // private System.Void MakeRoom(System.Int32 index, System.Int32 count, out System.Text.StringBuilder chunk, out System.Int32 indexInChunk, System.Boolean doneMoveFollowingChars)
    // Offset: 0x1D00C54
    void MakeRoom(int index, int count, System::Text::StringBuilder*& chunk, int& indexInChunk, bool doneMoveFollowingChars);
    // private System.Void .ctor(System.Int32 size, System.Int32 maxCapacity, System.Text.StringBuilder previousBlock)
    // Offset: 0x1D02A1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor(int size, int maxCapacity, System::Text::StringBuilder* previousBlock) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>(size, maxCapacity, previousBlock)));
    }
    // private System.Void Remove(System.Int32 startIndex, System.Int32 count, out System.Text.StringBuilder chunk, out System.Int32 indexInChunk)
    // Offset: 0x1D01054
    void Remove(int startIndex, int count, System::Text::StringBuilder*& chunk, int& indexInChunk);
    // public System.Void .ctor()
    // Offset: 0x1CFF534
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::StringBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringBuilder*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1CFFEE4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.Text.StringBuilder
  #pragma pack(pop)
  static check_size<sizeof(StringBuilder), 40 + sizeof(int)> __System_Text_StringBuilderSizeCheck;
  static_assert(sizeof(StringBuilder) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::StringBuilder*, "System.Text", "StringBuilder");
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*, int)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*, int)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*, int, int, int)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*, int, int, int)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&StringBuilder::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::get_Capacity
// Il2CppName: get_Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringBuilder::*)()>(&StringBuilder::get_Capacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "get_Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::set_Capacity
// Il2CppName: set_Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int)>(&StringBuilder::set_Capacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "set_Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::get_MaxCapacity
// Il2CppName: get_MaxCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringBuilder::*)()>(&StringBuilder::get_MaxCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "get_MaxCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::EnsureCapacity
// Il2CppName: EnsureCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringBuilder::*)(int)>(&StringBuilder::EnsureCapacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "EnsureCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringBuilder::*)(int, int)>(&StringBuilder::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)()>(&StringBuilder::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (StringBuilder::*)()>(&StringBuilder::get_Length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::set_Length
// Il2CppName: set_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int)>(&StringBuilder::set_Length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "set_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::get_Chars
// Il2CppName: get_Chars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (StringBuilder::*)(int)>(&StringBuilder::get_Chars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "get_Chars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::set_Chars
// Il2CppName: set_Chars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int, ::Il2CppChar)>(&StringBuilder::set_Chars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "set_Chars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppChar, int)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Array<::Il2CppChar>*, int, int)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendHelper
// Il2CppName: AppendHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Il2CppString*)>(&StringBuilder::AppendHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, int, int)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)()>(&StringBuilder::AppendLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendLine
// Il2CppName: AppendLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*)>(&StringBuilder::AppendLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int, ::Il2CppString*, int)>(&StringBuilder::Insert)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int, int)>(&StringBuilder::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(bool)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(uint8_t)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppChar)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int64_t)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(double)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppObject*)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int, ::Il2CppString*)>(&StringBuilder::Insert)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int, ::Il2CppChar)>(&StringBuilder::Insert)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, ::Il2CppObject*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*, ::Il2CppObject*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(System::IFormatProvider*, ::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormat
// Il2CppName: AppendFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(System::IFormatProvider*, ::Il2CppString*, ::Array<::Il2CppObject*>*)>(&StringBuilder::AppendFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::FormatError
// Il2CppName: FormatError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StringBuilder::FormatError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "FormatError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::AppendFormatHelper
// Il2CppName: AppendFormatHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(System::IFormatProvider*, ::Il2CppString*, System::ParamsArray)>(&StringBuilder::AppendFormatHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "AppendFormatHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IFormatProvider*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::ParamsArray>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, ::Il2CppString*)>(&StringBuilder::Replace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Replace
// Il2CppName: Replace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppString*, ::Il2CppString*, int, int)>(&StringBuilder::Replace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Replace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(::Il2CppChar*, int)>(&StringBuilder::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int, ::Il2CppChar*, int)>(&StringBuilder::Insert)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::ReplaceAllInChunk
// Il2CppName: ReplaceAllInChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(::Array<int>*, int, System::Text::StringBuilder*, int, ::Il2CppString*)>(&StringBuilder::ReplaceAllInChunk)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ReplaceAllInChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StringBuilder::*)(System::Text::StringBuilder*, int, int, ::Il2CppString*)>(&StringBuilder::StartsWith)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::ReplaceInPlaceAtChunk
// Il2CppName: ReplaceInPlaceAtChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(System::Text::StringBuilder*&, int&, ::Il2CppChar*, int)>(&StringBuilder::ReplaceInPlaceAtChunk)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ReplaceInPlaceAtChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::ThreadSafeCopy
// Il2CppName: ThreadSafeCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppChar*, ::Array<::Il2CppChar>*, int, int)>(&StringBuilder::ThreadSafeCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ThreadSafeCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::ThreadSafeCopy
// Il2CppName: ThreadSafeCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<::Il2CppChar>*, int, ::Array<::Il2CppChar>*, int, int)>(&StringBuilder::ThreadSafeCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ThreadSafeCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::FindChunkForIndex
// Il2CppName: FindChunkForIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(int)>(&StringBuilder::FindChunkForIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "FindChunkForIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Next
// Il2CppName: Next
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::StringBuilder* (StringBuilder::*)(System::Text::StringBuilder*)>(&StringBuilder::Next)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Next", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::ExpandByABlock
// Il2CppName: ExpandByABlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int)>(&StringBuilder::ExpandByABlock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ExpandByABlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(System::Text::StringBuilder*)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(System::Text::StringBuilder*)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::MakeRoom
// Il2CppName: MakeRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int, int, System::Text::StringBuilder*&, int&, bool)>(&StringBuilder::MakeRoom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "MakeRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int, int, System::Text::StringBuilder*)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int, int, System::Text::StringBuilder*)>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)(int, int, System::Text::StringBuilder*&, int&)>(&StringBuilder::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: StringBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)()>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringBuilder::*)()>(&StringBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StringBuilder::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (StringBuilder::*)()>(&StringBuilder::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilder*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
