// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Microsoft.Extensions.Logging
namespace Microsoft::Extensions::Logging {
  // Forward declaring type: ILogger
  class ILogger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(Microsoft::Extensions::Logging::ILogger);
DEFINE_IL2CPP_ARG_TYPE(Microsoft::Extensions::Logging::ILogger*, "Microsoft.Extensions.Logging", "ILogger");
// Type namespace: Microsoft.Extensions.Logging
namespace Microsoft::Extensions::Logging {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Microsoft.Extensions.Logging.ILogger
  // [TokenAttribute] Offset: FFFFFFFF
  class ILogger {
    public:
    // public System.Void LogError(System.String message)
    // Offset: 0xFFFFFFFF
    void LogError(::StringW message);
    // public System.Void LogError(System.Exception exception, System.String message)
    // Offset: 0xFFFFFFFF
    void LogError(System::Exception* exception, ::StringW message);
    // public System.Void LogInformation(System.String message)
    // Offset: 0xFFFFFFFF
    void LogInformation(::StringW message);
    // public System.Void LogWarning(System.String message)
    // Offset: 0xFFFFFFFF
    void LogWarning(::StringW message);
  }; // Microsoft.Extensions.Logging.ILogger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(::StringW)>(&Microsoft::Extensions::Logging::ILogger::LogError)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(System::Exception*, ::StringW)>(&Microsoft::Extensions::Logging::ILogger::LogError)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, message});
  }
};
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogInformation
// Il2CppName: LogInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(::StringW)>(&Microsoft::Extensions::Logging::ILogger::LogInformation)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(::StringW)>(&Microsoft::Extensions::Logging::ILogger::LogWarning)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
