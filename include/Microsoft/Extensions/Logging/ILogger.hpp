// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: Microsoft.Extensions.Logging
namespace Microsoft::Extensions::Logging {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Microsoft.Extensions.Logging.ILogger
  class ILogger {
    public:
    // Creating value type constructor for type: ILogger
    ILogger() noexcept {}
    // public System.Void LogError(System.String message)
    // Offset: 0xFFFFFFFF
    void LogError(::Il2CppString* message);
    // public System.Void LogInformation(System.String message)
    // Offset: 0xFFFFFFFF
    void LogInformation(::Il2CppString* message);
    // public System.Void LogWarning(System.String message)
    // Offset: 0xFFFFFFFF
    void LogWarning(::Il2CppString* message);
  }; // Microsoft.Extensions.Logging.ILogger
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Microsoft::Extensions::Logging::ILogger*, "Microsoft.Extensions.Logging", "ILogger");
// Writing includes for template specializations
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(::Il2CppString*)>(&Microsoft::Extensions::Logging::ILogger::LogError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogInformation
// Il2CppName: LogInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(::Il2CppString*)>(&Microsoft::Extensions::Logging::ILogger::LogInformation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Microsoft::Extensions::Logging::ILogger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Microsoft::Extensions::Logging::ILogger::*)(::Il2CppString*)>(&Microsoft::Extensions::Logging::ILogger::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Microsoft::Extensions::Logging::ILogger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
