// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Microsoft.Win32.IRegistryApi
#include "Microsoft/Win32/IRegistryApi.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: Microsoft::Win32
namespace Microsoft::Win32 {
  // Forward declaring type: RegistryValueKind
  struct RegistryValueKind;
  // Forward declaring type: RegistryKey
  class RegistryKey;
  // Forward declaring type: RegistryValueOptions
  struct RegistryValueOptions;
}
// Completed forward declares
// Type namespace: Microsoft.Win32
namespace Microsoft::Win32 {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: Microsoft.Win32.Win32RegistryApi
  // [] Offset: FFFFFFFF
  class Win32RegistryApi : public ::Il2CppObject/*, public Microsoft::Win32::IRegistryApi*/ {
    public:
    // private readonly System.Int32 NativeBytesPerCharacter
    // Size: 0x4
    // Offset: 0x10
    int NativeBytesPerCharacter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Win32RegistryApi
    Win32RegistryApi(int NativeBytesPerCharacter_ = {}) noexcept : NativeBytesPerCharacter{NativeBytesPerCharacter_} {}
    // Creating interface conversion operator: operator Microsoft::Win32::IRegistryApi
    operator Microsoft::Win32::IRegistryApi() noexcept {
      return *reinterpret_cast<Microsoft::Win32::IRegistryApi*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return NativeBytesPerCharacter;
    }
    // static private System.Int32 RegCloseKey(System.IntPtr keyHandle)
    // Offset: 0x18C48C8
    static int RegCloseKey(System::IntPtr keyHandle);
    // static private System.Int32 RegFlushKey(System.IntPtr keyHandle)
    // Offset: 0x18C4948
    static int RegFlushKey(System::IntPtr keyHandle);
    // static private System.Int32 RegOpenKeyEx(System.IntPtr keyBase, System.String keyName, System.IntPtr reserved, System.Int32 access, out System.IntPtr keyHandle)
    // Offset: 0x18C49C8
    static int RegOpenKeyEx(System::IntPtr keyBase, ::Il2CppString* keyName, System::IntPtr reserved, int access, System::IntPtr& keyHandle);
    // static System.Int32 RegEnumKeyEx(System.IntPtr keyHandle, System.Int32 dwIndex, System.Char* lpName, ref System.Int32 lpcbName, System.Int32[] lpReserved, out System.Text.StringBuilder lpClass, System.Int32[] lpcbClass, System.Int64[] lpftLastWriteTime)
    // Offset: 0x18C4A7C
    static int RegEnumKeyEx(System::IntPtr keyHandle, int dwIndex, ::Il2CppChar* lpName, int& lpcbName, ::Array<int>* lpReserved, System::Text::StringBuilder*& lpClass, ::Array<int>* lpcbClass, ::Array<int64_t>* lpftLastWriteTime);
    // static private System.Int32 RegQueryValueEx(System.IntPtr keyBase, System.String valueName, System.IntPtr reserved, ref Microsoft.Win32.RegistryValueKind type, System.IntPtr zero, ref System.Int32 dataSize)
    // Offset: 0x18C4B98
    static int RegQueryValueEx(System::IntPtr keyBase, ::Il2CppString* valueName, System::IntPtr reserved, Microsoft::Win32::RegistryValueKind& type, System::IntPtr zero, int& dataSize);
    // static private System.Int32 RegQueryValueEx(System.IntPtr keyBase, System.String valueName, System.IntPtr reserved, ref Microsoft.Win32.RegistryValueKind type, out System.Byte[] data, ref System.Int32 dataSize)
    // Offset: 0x18C4C60
    static int RegQueryValueEx(System::IntPtr keyBase, ::Il2CppString* valueName, System::IntPtr reserved, Microsoft::Win32::RegistryValueKind& type, ::Array<uint8_t>*& data, int& dataSize);
    // static private System.Int32 RegQueryValueEx(System.IntPtr keyBase, System.String valueName, System.IntPtr reserved, ref Microsoft.Win32.RegistryValueKind type, ref System.Int32 data, ref System.Int32 dataSize)
    // Offset: 0x18C4DC0
    static int RegQueryValueEx(System::IntPtr keyBase, ::Il2CppString* valueName, System::IntPtr reserved, Microsoft::Win32::RegistryValueKind& type, int& data, int& dataSize);
    // static private System.Int32 RegQueryValueEx(System.IntPtr keyBase, System.String valueName, System.IntPtr reserved, ref Microsoft.Win32.RegistryValueKind type, ref System.Int64 data, ref System.Int32 dataSize)
    // Offset: 0x18C4E88
    static int RegQueryValueEx(System::IntPtr keyBase, ::Il2CppString* valueName, System::IntPtr reserved, Microsoft::Win32::RegistryValueKind& type, int64_t& data, int& dataSize);
    // static System.Int32 RegQueryInfoKey(System.IntPtr hKey, out System.Text.StringBuilder lpClass, System.Int32[] lpcbClass, System.IntPtr lpReserved_MustBeZero, ref System.Int32 lpcSubKeys, System.Int32[] lpcbMaxSubKeyLen, System.Int32[] lpcbMaxClassLen, ref System.Int32 lpcValues, System.Int32[] lpcbMaxValueNameLen, System.Int32[] lpcbMaxValueLen, System.Int32[] lpcbSecurityDescriptor, System.Int32[] lpftLastWriteTime)
    // Offset: 0x18C4F50
    static int RegQueryInfoKey(System::IntPtr hKey, System::Text::StringBuilder*& lpClass, ::Array<int>* lpcbClass, System::IntPtr lpReserved_MustBeZero, int& lpcSubKeys, ::Array<int>* lpcbMaxSubKeyLen, ::Array<int>* lpcbMaxClassLen, int& lpcValues, ::Array<int>* lpcbMaxValueNameLen, ::Array<int>* lpcbMaxValueLen, ::Array<int>* lpcbSecurityDescriptor, ::Array<int>* lpftLastWriteTime);
    // public System.IntPtr GetHandle(Microsoft.Win32.RegistryKey key)
    // Offset: 0x18C50A4
    System::IntPtr GetHandle_NEW(Microsoft::Win32::RegistryKey* key);
    // static private System.Boolean IsHandleValid(Microsoft.Win32.RegistryKey key)
    // Offset: 0x18C5120
    static bool IsHandleValid(Microsoft::Win32::RegistryKey* key);
    // public System.Object GetValue(Microsoft.Win32.RegistryKey rkey, System.String name, System.Object defaultValue, Microsoft.Win32.RegistryValueOptions options)
    // Offset: 0x18C5140
    ::Il2CppObject* GetValue_NEW(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* name, ::Il2CppObject* defaultValue, Microsoft::Win32::RegistryValueOptions options);
    // private System.Int32 GetBinaryValue(Microsoft.Win32.RegistryKey rkey, System.String name, Microsoft.Win32.RegistryValueKind type, out System.Byte[] data, System.Int32 size)
    // Offset: 0x18C55F0
    int GetBinaryValue(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* name, Microsoft::Win32::RegistryValueKind type, ::Array<uint8_t>*& data, int size);
    // public System.Int32 SubKeyCount(Microsoft.Win32.RegistryKey rkey)
    // Offset: 0x18C568C
    int SubKeyCount_NEW(Microsoft::Win32::RegistryKey* rkey);
    // public Microsoft.Win32.RegistryKey OpenSubKey(Microsoft.Win32.RegistryKey rkey, System.String keyName, System.Boolean writable)
    // Offset: 0x18C5718
    Microsoft::Win32::RegistryKey* OpenSubKey_NEW(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* keyName, bool writable);
    // public System.Void Flush(Microsoft.Win32.RegistryKey rkey)
    // Offset: 0x18C589C
    void Flush_NEW(Microsoft::Win32::RegistryKey* rkey);
    // public System.Void Close(Microsoft.Win32.RegistryKey rkey)
    // Offset: 0x18C58C8
    void Close_NEW(Microsoft::Win32::RegistryKey* rkey);
    // public System.String[] GetSubKeyNames(Microsoft.Win32.RegistryKey rkey)
    // Offset: 0x18C5924
    ::Array<::Il2CppString*>* GetSubKeyNames_NEW(Microsoft::Win32::RegistryKey* rkey);
    // private System.Void GenerateException(System.Int32 errorCode)
    // Offset: 0x18C547C
    void GenerateException(int errorCode);
    // public System.String ToString(Microsoft.Win32.RegistryKey rkey)
    // Offset: 0x18C5AD8
    ::Il2CppString* ToString_NEW(Microsoft::Win32::RegistryKey* rkey);
    // static System.String CombineName(Microsoft.Win32.RegistryKey rkey, System.String localName)
    // Offset: 0x18C5830
    static ::Il2CppString* CombineName(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* localName);
    // public System.Void .ctor()
    // Offset: 0x18C314C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Win32RegistryApi* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Microsoft::Win32::Win32RegistryApi::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Win32RegistryApi*, creationType>()));
    }
  }; // Microsoft.Win32.Win32RegistryApi
  #pragma pack(pop)
  static check_size<sizeof(Win32RegistryApi), 16 + sizeof(int)> __Microsoft_Win32_Win32RegistryApiSizeCheck;
  static_assert(sizeof(Win32RegistryApi) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(Microsoft::Win32::Win32RegistryApi*, "Microsoft.Win32", "Win32RegistryApi");
