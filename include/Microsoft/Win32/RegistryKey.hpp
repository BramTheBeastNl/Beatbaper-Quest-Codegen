// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Microsoft.Win32.RegistryHive
#include "Microsoft/Win32/RegistryHive.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafeRegistryHandle
  class SafeRegistryHandle;
}
// Forward declaring namespace: Microsoft::Win32
namespace Microsoft::Win32 {
  // Forward declaring type: IRegistryApi
  class IRegistryApi;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: IOException
  class IOException;
}
// Completed forward declares
// Type namespace: Microsoft.Win32
namespace Microsoft::Win32 {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: Microsoft.Win32.RegistryKey
  // [ComVisibleAttribute] Offset: D79E44
  class RegistryKey : public System::MarshalByRefObject/*, public System::IDisposable*/ {
    public:
    // private System.Object handle
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* handle;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private Microsoft.Win32.SafeHandles.SafeRegistryHandle safe_handle
    // Size: 0x8
    // Offset: 0x20
    Microsoft::Win32::SafeHandles::SafeRegistryHandle* safe_handle;
    // Field size check
    static_assert(sizeof(Microsoft::Win32::SafeHandles::SafeRegistryHandle*) == 0x8);
    // private System.Object hive
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* hive;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.String qname
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* qname;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Boolean isRemoteRoot
    // Size: 0x1
    // Offset: 0x38
    bool isRemoteRoot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean isWritable
    // Size: 0x1
    // Offset: 0x39
    bool isWritable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: RegistryKey
    RegistryKey(::Il2CppObject* handle_ = {}, Microsoft::Win32::SafeHandles::SafeRegistryHandle* safe_handle_ = {}, ::Il2CppObject* hive_ = {}, ::Il2CppString* qname_ = {}, bool isRemoteRoot_ = {}, bool isWritable_ = {}) noexcept : handle{handle_}, safe_handle{safe_handle_}, hive{hive_}, qname{qname_}, isRemoteRoot{isRemoteRoot_}, isWritable{isWritable_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // Get static field: static private readonly Microsoft.Win32.IRegistryApi RegistryApi
    static Microsoft::Win32::IRegistryApi* _get_RegistryApi();
    // Set static field: static private readonly Microsoft.Win32.IRegistryApi RegistryApi
    static void _set_RegistryApi(Microsoft::Win32::IRegistryApi* value);
    // static private System.Void .cctor()
    // Offset: 0x1A544A8
    static void _cctor();
    // System.Void .ctor(Microsoft.Win32.RegistryHive hiveId)
    // Offset: 0x1A5445C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegistryKey* New_ctor(Microsoft::Win32::RegistryHive hiveId) {
      static auto ___internal__logger = ::Logger::get().WithContext("Microsoft::Win32::RegistryKey::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegistryKey*, creationType>(hiveId)));
    }
    // System.Void .ctor(Microsoft.Win32.RegistryHive hiveId, System.IntPtr keyHandle, System.Boolean remoteRoot)
    // Offset: 0x1A545E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegistryKey* New_ctor(Microsoft::Win32::RegistryHive hiveId, System::IntPtr keyHandle, bool remoteRoot) {
      static auto ___internal__logger = ::Logger::get().WithContext("Microsoft::Win32::RegistryKey::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegistryKey*, creationType>(hiveId, keyHandle, remoteRoot)));
    }
    // System.Void .ctor(System.Object data, System.String keyName, System.Boolean writable)
    // Offset: 0x1A51504
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegistryKey* New_ctor(::Il2CppObject* data, ::Il2CppString* keyName, bool writable) {
      static auto ___internal__logger = ::Logger::get().WithContext("Microsoft::Win32::RegistryKey::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegistryKey*, creationType>(data, keyName, writable)));
    }
    // static System.Boolean IsEquals(Microsoft.Win32.RegistryKey a, Microsoft.Win32.RegistryKey b)
    // Offset: 0x1A547C8
    static bool IsEquals(Microsoft::Win32::RegistryKey* a, Microsoft::Win32::RegistryKey* b);
    // public System.Void Dispose()
    // Offset: 0x1A5486C
    void Dispose();
    // public System.String get_Name()
    // Offset: 0x1A549E0
    ::Il2CppString* get_Name();
    // public System.Void Flush()
    // Offset: 0x1A549E8
    void Flush();
    // public System.Void Close()
    // Offset: 0x1A548DC
    void Close();
    // public Microsoft.Win32.SafeHandles.SafeRegistryHandle get_Handle()
    // Offset: 0x1A54AC8
    Microsoft::Win32::SafeHandles::SafeRegistryHandle* get_Handle();
    // public Microsoft.Win32.RegistryKey OpenSubKey(System.String name)
    // Offset: 0x1A54CA4
    Microsoft::Win32::RegistryKey* OpenSubKey(::Il2CppString* name);
    // public Microsoft.Win32.RegistryKey OpenSubKey(System.String name, System.Boolean writable)
    // Offset: 0x1A54CAC
    Microsoft::Win32::RegistryKey* OpenSubKey(::Il2CppString* name, bool writable);
    // public System.Object GetValue(System.String name)
    // Offset: 0x1A54E80
    ::Il2CppObject* GetValue(::Il2CppString* name);
    // public System.Object GetValue(System.String name, System.Object defaultValue)
    // Offset: 0x1A54E88
    ::Il2CppObject* GetValue(::Il2CppString* name, ::Il2CppObject* defaultValue);
    // public System.String[] GetSubKeyNames()
    // Offset: 0x1A54F8C
    ::Array<::Il2CppString*>* GetSubKeyNames();
    // System.Boolean get_IsRoot()
    // Offset: 0x1A52A70
    bool get_IsRoot();
    // Microsoft.Win32.RegistryHive get_Hive()
    // Offset: 0x1A52A80
    Microsoft::Win32::RegistryHive get_Hive();
    // System.Object get_InternalHandle()
    // Offset: 0x1A5515C
    ::Il2CppObject* get_InternalHandle();
    // private System.Void AssertKeyStillValid()
    // Offset: 0x1A54BF4
    void AssertKeyStillValid();
    // private System.Void AssertKeyNameLength(System.String name)
    // Offset: 0x1A54DF0
    void AssertKeyNameLength(::Il2CppString* name);
    // static System.String DecodeString(System.Byte[] data)
    // Offset: 0x1A55164
    static ::Il2CppString* DecodeString(::Array<uint8_t>* data);
    // static System.IO.IOException CreateMarkedForDeletionException()
    // Offset: 0x1A55214
    static System::IO::IOException* CreateMarkedForDeletionException();
    // static private System.String GetHiveName(Microsoft.Win32.RegistryHive hive)
    // Offset: 0x1A546C8
    static ::Il2CppString* GetHiveName(Microsoft::Win32::RegistryHive hive);
    // public override System.String ToString()
    // Offset: 0x1A55074
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // Microsoft.Win32.RegistryKey
  #pragma pack(pop)
  static check_size<sizeof(RegistryKey), 57 + sizeof(bool)> __Microsoft_Win32_RegistryKeySizeCheck;
  static_assert(sizeof(RegistryKey) == 0x3A);
  // Writing MetadataGetter for method: RegistryKey::_cctor
  // Il2CppName: .cctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RegistryKey::_cctor)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(Microsoft::Win32::RegistryHive)>(&RegistryKey::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryHive>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(Microsoft::Win32::RegistryHive)>(&RegistryKey::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryHive>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(Microsoft::Win32::RegistryHive, System::IntPtr, bool)>(&RegistryKey::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryHive>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(Microsoft::Win32::RegistryHive, System::IntPtr, bool)>(&RegistryKey::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryHive>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(::Il2CppObject*, ::Il2CppString*, bool)>(&RegistryKey::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(::Il2CppObject*, ::Il2CppString*, bool)>(&RegistryKey::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::IsEquals
  // Il2CppName: IsEquals
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(Microsoft::Win32::RegistryKey*, Microsoft::Win32::RegistryKey*)>(&RegistryKey::IsEquals)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "IsEquals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryKey*>(), ::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryKey*>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::Dispose
  // Il2CppName: Dispose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)()>(&RegistryKey::Dispose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::get_Name
  // Il2CppName: get_Name
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RegistryKey::*)()>(&RegistryKey::get_Name)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::Flush
  // Il2CppName: Flush
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)()>(&RegistryKey::Flush)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::Close
  // Il2CppName: Close
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)()>(&RegistryKey::Close)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::get_Handle
  // Il2CppName: get_Handle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Microsoft::Win32::SafeHandles::SafeRegistryHandle* (RegistryKey::*)()>(&RegistryKey::get_Handle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::OpenSubKey
  // Il2CppName: OpenSubKey
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Microsoft::Win32::RegistryKey* (RegistryKey::*)(::Il2CppString*)>(&RegistryKey::OpenSubKey)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "OpenSubKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::OpenSubKey
  // Il2CppName: OpenSubKey
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Microsoft::Win32::RegistryKey* (RegistryKey::*)(::Il2CppString*, bool)>(&RegistryKey::OpenSubKey)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "OpenSubKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::GetValue
  // Il2CppName: GetValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RegistryKey::*)(::Il2CppString*)>(&RegistryKey::GetValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::GetValue
  // Il2CppName: GetValue
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RegistryKey::*)(::Il2CppString*, ::Il2CppObject*)>(&RegistryKey::GetValue)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::GetSubKeyNames
  // Il2CppName: GetSubKeyNames
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (RegistryKey::*)()>(&RegistryKey::GetSubKeyNames)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "GetSubKeyNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::get_IsRoot
  // Il2CppName: get_IsRoot
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RegistryKey::*)()>(&RegistryKey::get_IsRoot)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "get_IsRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::get_Hive
  // Il2CppName: get_Hive
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Microsoft::Win32::RegistryHive (RegistryKey::*)()>(&RegistryKey::get_Hive)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "get_Hive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::get_InternalHandle
  // Il2CppName: get_InternalHandle
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (RegistryKey::*)()>(&RegistryKey::get_InternalHandle)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "get_InternalHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::AssertKeyStillValid
  // Il2CppName: AssertKeyStillValid
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)()>(&RegistryKey::AssertKeyStillValid)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "AssertKeyStillValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::AssertKeyNameLength
  // Il2CppName: AssertKeyNameLength
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RegistryKey::*)(::Il2CppString*)>(&RegistryKey::AssertKeyNameLength)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "AssertKeyNameLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::DecodeString
  // Il2CppName: DecodeString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<uint8_t>*)>(&RegistryKey::DecodeString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "DecodeString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::CreateMarkedForDeletionException
  // Il2CppName: CreateMarkedForDeletionException
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IO::IOException* (*)()>(&RegistryKey::CreateMarkedForDeletionException)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "CreateMarkedForDeletionException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::GetHiveName
  // Il2CppName: GetHiveName
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(Microsoft::Win32::RegistryHive)>(&RegistryKey::GetHiveName)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "GetHiveName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Microsoft::Win32::RegistryHive>()});
    }
  };
  // Writing MetadataGetter for method: RegistryKey::ToString
  // Il2CppName: ToString
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (RegistryKey::*)()>(&RegistryKey::ToString)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(RegistryKey*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Microsoft::Win32::RegistryKey*, "Microsoft.Win32", "RegistryKey");
