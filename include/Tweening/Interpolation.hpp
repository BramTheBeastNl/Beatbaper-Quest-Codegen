// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: EaseType
  struct EaseType;
}
// Completed forward declares
// Type namespace: Tweening
namespace Tweening {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Tweening.Interpolation
  class Interpolation : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Interpolation
    Interpolation() noexcept {}
    // static public System.Single Interpolate(System.Single t, Tweening.EaseType easeType)
    // Offset: 0x1120D50
    static float Interpolate(float t, Tweening::EaseType easeType);
  }; // Tweening.Interpolation
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Tweening::Interpolation*, "Tweening", "Interpolation");
// Writing includes for template specializations
#include "Tweening/EaseType.hpp"
// Writing MetadataGetter for method: Tweening::Interpolation::Interpolate
// Il2CppName: Interpolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, Tweening::EaseType)>(&Tweening::Interpolation::Interpolate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Tweening::Interpolation*), "Interpolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<Tweening::EaseType>()});
  }
};
