// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.CAPI
#include "Oculus/Platform/CAPI.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Oculus.Platform.KeyValuePairType
#include "Oculus/Platform/KeyValuePairType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x28
  // Autogenerated type: Oculus.Platform.CAPI/ovrKeyValuePair
  // [] Offset: FFFFFFFF
  struct CAPI::ovrKeyValuePair/*, public System::ValueType*/ {
    public:
    // public System.String key_
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* key;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private Oculus.Platform.KeyValuePairType valueType_
    // Size: 0x4
    // Offset: 0x8
    Oculus::Platform::KeyValuePairType valueType;
    // Field size check
    static_assert(sizeof(Oculus::Platform::KeyValuePairType) == 0x4);
    // Padding between fields: valueType and: stringValue
    char __padding1[0x4] = {};
    // public System.String stringValue_
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* stringValue;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Int32 intValue_
    // Size: 0x4
    // Offset: 0x18
    int intValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: intValue and: doubleValue
    char __padding3[0x4] = {};
    // public System.Double doubleValue_
    // Size: 0x8
    // Offset: 0x20
    double doubleValue;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // Creating value type constructor for type: ovrKeyValuePair
    constexpr ovrKeyValuePair(::Il2CppString* key_ = {}, Oculus::Platform::KeyValuePairType valueType_ = {}, ::Il2CppString* stringValue_ = {}, int intValue_ = {}, double doubleValue_ = {}) noexcept : key{key_}, valueType{valueType_}, stringValue{stringValue_}, intValue{intValue_}, doubleValue{doubleValue_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(System.String key, System.String value)
    // Offset: 0xC96214
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    ovrKeyValuePair(::Il2CppString* key, ::Il2CppString* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("ovrKeyValuePair").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, key, value);
    }
    // public System.Void .ctor(System.String key, System.Int32 value)
    // Offset: 0xC96258
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    ovrKeyValuePair(::Il2CppString* key, int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("ovrKeyValuePair").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, key, value);
    }
    // public System.Void .ctor(System.String key, System.Double value)
    // Offset: 0xC962A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    ovrKeyValuePair(::Il2CppString* key, double value) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("ovrKeyValuePair").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, key, value);
    }
  }; // Oculus.Platform.CAPI/ovrKeyValuePair
  static check_size<sizeof(CAPI::ovrKeyValuePair), 32 + sizeof(double)> __Oculus_Platform_CAPI_ovrKeyValuePairSizeCheck;
  static_assert(sizeof(CAPI::ovrKeyValuePair) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::CAPI::ovrKeyValuePair, "Oculus.Platform", "CAPI/ovrKeyValuePair");
#pragma pack(pop)
