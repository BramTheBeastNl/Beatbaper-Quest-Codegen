// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.IMicrophone
  class IMicrophone {
    public:
    // Creating value type constructor for type: IMicrophone
    IMicrophone() noexcept {}
    // public System.Void Start()
    // Offset: 0xFFFFFFFF
    void Start();
    // public System.Void Stop()
    // Offset: 0xFFFFFFFF
    void Stop();
    // public System.Single[] Update()
    // Offset: 0xFFFFFFFF
    ::Array<float>* Update();
  }; // Oculus.Platform.IMicrophone
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::IMicrophone*, "Oculus.Platform", "IMicrophone");
// Writing MetadataGetter for method: IMicrophone::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMicrophone::*)()>(&IMicrophone::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMicrophone*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMicrophone::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMicrophone::*)()>(&IMicrophone::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMicrophone*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMicrophone::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<float>* (IMicrophone::*)()>(&IMicrophone::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMicrophone*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
