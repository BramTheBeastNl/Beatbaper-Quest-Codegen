// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.Callback
#include "Oculus/Platform/Callback.hpp"
// Including type: Oculus.Platform.Callback/RequestCallback
#include "Oculus/Platform/Callback_RequestCallback.hpp"
// Including type: Oculus.Platform.Message`1
#include "Oculus/Platform/Message_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Skipping declaration: Message because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Autogenerated type: Oculus.Platform.Callback/RequestCallback`1
  template<typename T>
  class Callback::RequestCallback_1 : public Oculus::Platform::Callback::RequestCallback {
    public:
    // private Oculus.Platform.Message`1/Callback<T> callback
    // Offset: 0x0
    typename Oculus::Platform::Message_1<T>::Callback* callback;
    // Deleting conversion operator: operator Oculus::Platform::Message::Callback*
    constexpr operator Oculus::Platform::Message::Callback*() const noexcept = delete;
    // public System.Void .ctor(Oculus.Platform.Message`1/Callback<T> callback)
    // Offset: 0xFFFFFFFF
    static Callback::RequestCallback_1<T>* New_ctor(typename Oculus::Platform::Message_1<T>::Callback* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("RequestCallback_1").WithContext(".ctor");
      return THROW_UNLESS(::il2cpp_utils::New<Callback::RequestCallback_1<T>*>(callback));
    }
    // public override System.Void HandleMessage(Oculus.Platform.Message msg)
    // Offset: 0xFFFFFFFF
    // Implemented from: Oculus.Platform.Callback/RequestCallback
    // Base method: System.Void RequestCallback::HandleMessage(Oculus.Platform.Message msg)
    void HandleMessage(Oculus::Platform::Message* msg) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("RequestCallback_1").WithContext("HandleMessage");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "HandleMessage", {}, ::il2cpp_utils::ExtractTypes(msg)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, msg);
    }
  }; // Oculus.Platform.Callback/RequestCallback`1
  // Could not write size check! Type: Oculus.Platform.Callback/RequestCallback`1 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Oculus::Platform::Callback::RequestCallback_1, "Oculus.Platform", "Callback/RequestCallback`1");
#pragma pack(pop)
