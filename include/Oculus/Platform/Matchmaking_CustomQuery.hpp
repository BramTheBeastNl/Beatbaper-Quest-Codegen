// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.Matchmaking
#include "Oculus/Platform/Matchmaking.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x20
  // Autogenerated type: Oculus.Platform.Matchmaking/CustomQuery
  // [] Offset: FFFFFFFF
  class Matchmaking::CustomQuery : public ::Il2CppObject {
    public:
    // Nested type: Oculus::Platform::Matchmaking::CustomQuery::Criterion
    struct Criterion;
    // public System.Collections.Generic.Dictionary`2<System.String,System.Object> data
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* data;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>*) == 0x8);
    // public Oculus.Platform.Matchmaking/CustomQuery/Criterion[] criteria
    // Size: 0x8
    // Offset: 0x18
    ::Array<Oculus::Platform::Matchmaking::CustomQuery::Criterion>* criteria;
    // Field size check
    static_assert(sizeof(::Array<Oculus::Platform::Matchmaking::CustomQuery::Criterion>*) == 0x8);
    // Creating value type constructor for type: CustomQuery
    CustomQuery(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* data_ = {}, ::Array<Oculus::Platform::Matchmaking::CustomQuery::Criterion>* criteria_ = {}) noexcept : data{data_}, criteria{criteria_} {}
    // public System.IntPtr ToUnmanaged()
    // Offset: 0x11D1FF8
    System::IntPtr ToUnmanaged();
    // public System.Void .ctor()
    // Offset: 0x11D34D8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Matchmaking::CustomQuery* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("CustomQuery").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Matchmaking::CustomQuery*, creationType>()));
    }
  }; // Oculus.Platform.Matchmaking/CustomQuery
  static check_size<sizeof(Matchmaking::CustomQuery), 24 + sizeof(::Array<Oculus::Platform::Matchmaking::CustomQuery::Criterion>*)> __Oculus_Platform_Matchmaking_CustomQuerySizeCheck;
  static_assert(sizeof(Matchmaking::CustomQuery) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::Matchmaking::CustomQuery*, "Oculus.Platform", "Matchmaking/CustomQuery");
#pragma pack(pop)
