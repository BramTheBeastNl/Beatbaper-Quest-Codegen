// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.Matchmaking/CustomQuery
#include "Oculus/Platform/Matchmaking_CustomQuery.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Oculus.Platform.MatchmakingCriterionImportance
#include "Oculus/Platform/MatchmakingCriterionImportance.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x18
  // Autogenerated type: Oculus.Platform.Matchmaking/CustomQuery/Criterion
  // [] Offset: FFFFFFFF
  struct Matchmaking::CustomQuery::Criterion/*, public System::ValueType*/ {
    public:
    // public System.String key
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* key;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public Oculus.Platform.MatchmakingCriterionImportance importance
    // Size: 0x4
    // Offset: 0x8
    Oculus::Platform::MatchmakingCriterionImportance importance;
    // Field size check
    static_assert(sizeof(Oculus::Platform::MatchmakingCriterionImportance) == 0x4);
    // Padding between fields: importance and: parameters
    char __padding1[0x4] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,System.Object> parameters
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* parameters;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>*) == 0x8);
    // Creating value type constructor for type: Criterion
    constexpr Criterion(::Il2CppString* key_ = {}, Oculus::Platform::MatchmakingCriterionImportance importance_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>* parameters_ = {}) noexcept : key{key_}, importance{importance_}, parameters{parameters_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(System.String key_, Oculus.Platform.MatchmakingCriterionImportance importance_)
    // Offset: 0xC963F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    Criterion(::Il2CppString* key_, Oculus::Platform::MatchmakingCriterionImportance importance_) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("Criterion").WithContext(".ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key_, importance_)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, key_, importance_);
    }
  }; // Oculus.Platform.Matchmaking/CustomQuery/Criterion
  static check_size<sizeof(Matchmaking::CustomQuery::Criterion), 16 + sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppObject*>*)> __Oculus_Platform_Matchmaking_CustomQuery_CriterionSizeCheck;
  static_assert(sizeof(Matchmaking::CustomQuery::Criterion) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::Matchmaking::CustomQuery::Criterion, "Oculus.Platform", "Matchmaking/CustomQuery/Criterion");
#pragma pack(pop)
