// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
// Type namespace: Zenject.Internal
namespace Zenject::Internal {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.Internal.ReflectionInfoTypeInfoConverter/<>c__DisplayClass8_1
  // [CompilerGeneratedAttribute] Offset: DDE73C
  class ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1 : public ::Il2CppObject {
    public:
    // public System.Object injectable
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* injectable;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Object value
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* value;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: $$c__DisplayClass8_1
    $$c__DisplayClass8_1(::Il2CppObject* injectable_ = {}, ::Il2CppObject* value_ = {}) noexcept : injectable{injectable_}, value{value_} {}
    // System.Void <GetOnlyPropertySetter>b__3(System.Reflection.FieldInfo f)
    // Offset: 0x164274C
    void $GetOnlyPropertySetter$b__3(System::Reflection::FieldInfo* f);
    // public System.Void .ctor()
    // Offset: 0x1642744
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1*, creationType>()));
    }
  }; // Zenject.Internal.ReflectionInfoTypeInfoConverter/<>c__DisplayClass8_1
  #pragma pack(pop)
  static check_size<sizeof(ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1), 24 + sizeof(::Il2CppObject*)> __Zenject_Internal_ReflectionInfoTypeInfoConverter_$$c__DisplayClass8_1SizeCheck;
  static_assert(sizeof(ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1) == 0x20);
  // Writing MetadataGetter for method: ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::$GetOnlyPropertySetter$b__3
  // Il2CppName: <GetOnlyPropertySetter>b__3
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::*)(System::Reflection::FieldInfo*)>(&ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::$GetOnlyPropertySetter$b__3)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1*), "<GetOnlyPropertySetter>b__3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::FieldInfo*>()});
    }
  };
  // Writing MetadataGetter for method: ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::*)()>(&ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::*)()>(&ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_1*, "Zenject.Internal", "ReflectionInfoTypeInfoConverter/<>c__DisplayClass8_1");
