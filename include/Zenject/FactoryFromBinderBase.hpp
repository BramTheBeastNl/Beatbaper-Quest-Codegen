// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/ScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: FactoryBindInfo
  class FactoryBindInfo;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: IProvider
  class IProvider;
  // Skipping declaration: ConditionCopyNonLazyBinder because it is already included!
  // Forward declaring type: ConcreteBinderGeneric`1<TContract>
  template<typename TContract>
  class ConcreteBinderGeneric_1;
  // Forward declaring type: InjectContext
  class InjectContext;
  // Forward declaring type: NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder
  class NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.FactoryFromBinderBase
  // [NoReflectionBakingAttribute] Offset: DDC834
  class FactoryFromBinderBase : public Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder {
    public:
    // Nested type: Zenject::FactoryFromBinderBase::$get_AllParentTypes$d__17
    class $get_AllParentTypes$d__17;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass23_0
    class $$c__DisplayClass23_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass24_0
    class $$c__DisplayClass24_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass26_0
    class $$c__DisplayClass26_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass27_0
    class $$c__DisplayClass27_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass28_0
    class $$c__DisplayClass28_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass29_0
    class $$c__DisplayClass29_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass32_0
    class $$c__DisplayClass32_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    // Nested type: Zenject::FactoryFromBinderBase::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // [CompilerGeneratedAttribute] Offset: 0xDDE98C
    // private Zenject.DiContainer <BindContainer>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    Zenject::DiContainer* BindContainer;
    // Field size check
    static_assert(sizeof(Zenject::DiContainer*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDDE99C
    // private Zenject.FactoryBindInfo <FactoryBindInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    Zenject::FactoryBindInfo* FactoryBindInfo;
    // Field size check
    static_assert(sizeof(Zenject::FactoryBindInfo*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDDE9AC
    // private System.Type <ContractType>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    System::Type* ContractType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // Creating value type constructor for type: FactoryFromBinderBase
    FactoryFromBinderBase(Zenject::DiContainer* BindContainer_ = {}, Zenject::FactoryBindInfo* FactoryBindInfo_ = {}, System::Type* ContractType_ = {}) noexcept : BindContainer{BindContainer_}, FactoryBindInfo{FactoryBindInfo_}, ContractType{ContractType_} {}
    // public System.Void .ctor(Zenject.DiContainer bindContainer, System.Type contractType, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo)
    // Offset: 0x1634FA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FactoryFromBinderBase* New_ctor(Zenject::DiContainer* bindContainer, System::Type* contractType, Zenject::BindInfo* bindInfo, Zenject::FactoryBindInfo* factoryBindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FactoryFromBinderBase*, creationType>(bindContainer, contractType, bindInfo, factoryBindInfo)));
    }
    // Zenject.DiContainer get_BindContainer()
    // Offset: 0x163505C
    Zenject::DiContainer* get_BindContainer();
    // private System.Void set_BindContainer(Zenject.DiContainer value)
    // Offset: 0x1635064
    void set_BindContainer(Zenject::DiContainer* value);
    // protected Zenject.FactoryBindInfo get_FactoryBindInfo()
    // Offset: 0x163506C
    Zenject::FactoryBindInfo* get_FactoryBindInfo();
    // private System.Void set_FactoryBindInfo(Zenject.FactoryBindInfo value)
    // Offset: 0x1635074
    void set_FactoryBindInfo(Zenject::FactoryBindInfo* value);
    // System.Func`2<Zenject.DiContainer,Zenject.IProvider> get_ProviderFunc()
    // Offset: 0x163507C
    System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* get_ProviderFunc();
    // System.Void set_ProviderFunc(System.Func`2<Zenject.DiContainer,Zenject.IProvider> value)
    // Offset: 0x1635098
    void set_ProviderFunc(System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* value);
    // protected System.Type get_ContractType()
    // Offset: 0x16350B4
    System::Type* get_ContractType();
    // private System.Void set_ContractType(System.Type value)
    // Offset: 0x16350BC
    void set_ContractType(System::Type* value);
    // public System.Collections.Generic.IEnumerable`1<System.Type> get_AllParentTypes()
    // Offset: 0x16350C4
    System::Collections::Generic::IEnumerable_1<System::Type*>* get_AllParentTypes();
    // public Zenject.ConditionCopyNonLazyBinder FromNew()
    // Offset: 0x163517C
    Zenject::ConditionCopyNonLazyBinder* FromNew();
    // public Zenject.ConditionCopyNonLazyBinder FromResolve()
    // Offset: 0x16351B4
    Zenject::ConditionCopyNonLazyBinder* FromResolve();
    // public Zenject.ConditionCopyNonLazyBinder FromInstance(System.Object instance)
    // Offset: 0x1635274
    Zenject::ConditionCopyNonLazyBinder* FromInstance(::Il2CppObject* instance);
    // public Zenject.ConditionCopyNonLazyBinder FromResolve(System.Object subIdentifier)
    // Offset: 0x16351BC
    Zenject::ConditionCopyNonLazyBinder* FromResolve(::Il2CppObject* subIdentifier);
    // Zenject.ConcreteBinderGeneric`1<T> CreateIFactoryBinder(out System.Guid factoryId)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::ConcreteBinderGeneric_1<T>* CreateIFactoryBinder(System::Guid& factoryId) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryFromBinderBase::CreateIFactoryBinder");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateIFactoryBinder", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid&>()})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ConcreteBinderGeneric_1<T>*, false>(this, ___generic__method, factoryId);
    }
    // public Zenject.ConditionCopyNonLazyBinder FromComponentOn(UnityEngine.GameObject gameObject)
    // Offset: 0x1635354
    Zenject::ConditionCopyNonLazyBinder* FromComponentOn(UnityEngine::GameObject* gameObject);
    // public Zenject.ConditionCopyNonLazyBinder FromComponentOn(System.Func`2<Zenject.InjectContext,UnityEngine.GameObject> gameObjectGetter)
    // Offset: 0x1635438
    Zenject::ConditionCopyNonLazyBinder* FromComponentOn(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>* gameObjectGetter);
    // public Zenject.ConditionCopyNonLazyBinder FromComponentOnRoot()
    // Offset: 0x1635510
    Zenject::ConditionCopyNonLazyBinder* FromComponentOnRoot();
    // public Zenject.ConditionCopyNonLazyBinder FromNewComponentOn(UnityEngine.GameObject gameObject)
    // Offset: 0x163558C
    Zenject::ConditionCopyNonLazyBinder* FromNewComponentOn(UnityEngine::GameObject* gameObject);
    // public Zenject.ConditionCopyNonLazyBinder FromNewComponentOn(System.Func`2<Zenject.InjectContext,UnityEngine.GameObject> gameObjectGetter)
    // Offset: 0x1635670
    Zenject::ConditionCopyNonLazyBinder* FromNewComponentOn(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>* gameObjectGetter);
    // public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab)
    // Offset: 0x1635748
    Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* FromNewComponentOnNewPrefab(UnityEngine::Object* prefab);
    // public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab)
    // Offset: 0x1635884
    Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* FromComponentInNewPrefab(UnityEngine::Object* prefab);
    // public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(System.String resourcePath)
    // Offset: 0x16359AC
    Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* FromComponentInNewPrefabResource(::Il2CppString* resourcePath);
    // public Zenject.NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(System.String resourcePath)
    // Offset: 0x1635AD4
    Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* FromNewComponentOnNewPrefabResource(::Il2CppString* resourcePath);
    // public Zenject.ConditionCopyNonLazyBinder FromNewScriptableObjectResource(System.String resourcePath)
    // Offset: 0x1635C08
    Zenject::ConditionCopyNonLazyBinder* FromNewScriptableObjectResource(::Il2CppString* resourcePath);
    // public Zenject.ConditionCopyNonLazyBinder FromScriptableObjectResource(System.String resourcePath)
    // Offset: 0x1635CE0
    Zenject::ConditionCopyNonLazyBinder* FromScriptableObjectResource(::Il2CppString* resourcePath);
    // public Zenject.ConditionCopyNonLazyBinder FromResource(System.String resourcePath)
    // Offset: 0x1635DB8
    Zenject::ConditionCopyNonLazyBinder* FromResource(::Il2CppString* resourcePath);
    // private Zenject.IProvider <.ctor>b__0_0(Zenject.DiContainer container)
    // Offset: 0x1635E84
    Zenject::IProvider* $_ctor$b__0_0(Zenject::DiContainer* container);
    // private UnityEngine.GameObject <FromComponentOnRoot>b__25_0(Zenject.InjectContext ctx)
    // Offset: 0x1635F34
    UnityEngine::GameObject* $FromComponentOnRoot$b__25_0(Zenject::InjectContext* ctx);
  }; // Zenject.FactoryFromBinderBase
  #pragma pack(pop)
  static check_size<sizeof(FactoryFromBinderBase), 48 + sizeof(System::Type*)> __Zenject_FactoryFromBinderBaseSizeCheck;
  static_assert(sizeof(FactoryFromBinderBase) == 0x38);
  // Writing MetadataGetter for method: FactoryFromBinderBase::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::DiContainer*, System::Type*, Zenject::BindInfo*, Zenject::FactoryBindInfo*)>(&FactoryFromBinderBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::DiContainer*, System::Type*, Zenject::BindInfo*, Zenject::FactoryBindInfo*)>(&FactoryFromBinderBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::get_BindContainer
  // Il2CppName: get_BindContainer
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_BindContainer)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_BindContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::set_BindContainer
  // Il2CppName: set_BindContainer
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::DiContainer*)>(&FactoryFromBinderBase::set_BindContainer)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_BindContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::get_FactoryBindInfo
  // Il2CppName: get_FactoryBindInfo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::FactoryBindInfo* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_FactoryBindInfo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_FactoryBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::set_FactoryBindInfo
  // Il2CppName: set_FactoryBindInfo
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(Zenject::FactoryBindInfo*)>(&FactoryFromBinderBase::set_FactoryBindInfo)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_FactoryBindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::FactoryBindInfo*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::get_ProviderFunc
  // Il2CppName: get_ProviderFunc
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_ProviderFunc)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_ProviderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::set_ProviderFunc
  // Il2CppName: set_ProviderFunc
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*)>(&FactoryFromBinderBase::set_ProviderFunc)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_ProviderFunc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::IProvider*>*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::get_ContractType
  // Il2CppName: get_ContractType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_ContractType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_ContractType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::set_ContractType
  // Il2CppName: set_ContractType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FactoryFromBinderBase::*)(System::Type*)>(&FactoryFromBinderBase::set_ContractType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "set_ContractType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::get_AllParentTypes
  // Il2CppName: get_AllParentTypes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::get_AllParentTypes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "get_AllParentTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromNew
  // Il2CppName: FromNew
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::FromNew)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNew", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromResolve
  // Il2CppName: FromResolve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::FromResolve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromInstance
  // Il2CppName: FromInstance
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppObject*)>(&FactoryFromBinderBase::FromInstance)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromResolve
  // Il2CppName: FromResolve
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppObject*)>(&FactoryFromBinderBase::FromResolve)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::CreateIFactoryBinder
  // Il2CppName: CreateIFactoryBinder
  // Cannot write MetadataGetter for generic methods!
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentOn
  // Il2CppName: FromComponentOn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::GameObject*)>(&FactoryFromBinderBase::FromComponentOn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentOn
  // Il2CppName: FromComponentOn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*)>(&FactoryFromBinderBase::FromComponentOn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentOnRoot
  // Il2CppName: FromComponentOnRoot
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)()>(&FactoryFromBinderBase::FromComponentOnRoot)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentOnRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOn
  // Il2CppName: FromNewComponentOn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::GameObject*)>(&FactoryFromBinderBase::FromNewComponentOn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOn
  // Il2CppName: FromNewComponentOn
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*)>(&FactoryFromBinderBase::FromNewComponentOn)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::InjectContext*, UnityEngine::GameObject*>*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOnNewPrefab
  // Il2CppName: FromNewComponentOnNewPrefab
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::Object*)>(&FactoryFromBinderBase::FromNewComponentOnNewPrefab)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOnNewPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentInNewPrefab
  // Il2CppName: FromComponentInNewPrefab
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(UnityEngine::Object*)>(&FactoryFromBinderBase::FromComponentInNewPrefab)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentInNewPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromComponentInNewPrefabResource
  // Il2CppName: FromComponentInNewPrefabResource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromComponentInNewPrefabResource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromComponentInNewPrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromNewComponentOnNewPrefabResource
  // Il2CppName: FromNewComponentOnNewPrefabResource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromNewComponentOnNewPrefabResource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewComponentOnNewPrefabResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromNewScriptableObjectResource
  // Il2CppName: FromNewScriptableObjectResource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromNewScriptableObjectResource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromNewScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromScriptableObjectResource
  // Il2CppName: FromScriptableObjectResource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromScriptableObjectResource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromScriptableObjectResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::FromResource
  // Il2CppName: FromResource
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConditionCopyNonLazyBinder* (FactoryFromBinderBase::*)(::Il2CppString*)>(&FactoryFromBinderBase::FromResource)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "FromResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::$_ctor$b__0_0
  // Il2CppName: <.ctor>b__0_0
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (FactoryFromBinderBase::*)(Zenject::DiContainer*)>(&FactoryFromBinderBase::$_ctor$b__0_0)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "<.ctor>b__0_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
    }
  };
  // Writing MetadataGetter for method: FactoryFromBinderBase::$FromComponentOnRoot$b__25_0
  // Il2CppName: <FromComponentOnRoot>b__25_0
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (FactoryFromBinderBase::*)(Zenject::InjectContext*)>(&FactoryFromBinderBase::$FromComponentOnRoot$b__25_0)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(FactoryFromBinderBase*), "<FromComponentOnRoot>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::FactoryFromBinderBase*, "Zenject", "FactoryFromBinderBase");
