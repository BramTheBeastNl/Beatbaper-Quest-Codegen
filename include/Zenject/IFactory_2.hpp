// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: Zenject.IFactory
#include "Zenject/IFactory.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.IFactory`2
  template<typename TParam1, typename TValue>
  class IFactory_2 : public Zenject::IFactory {
    public:
    // public TValue Create(TParam1 param)
    // Offset: 0xFFFFFFFF
    TValue Zenject_IFactory_2_Create(TParam1 param) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("IFactory_2").WithContext("Create");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<TValue>(), "Create", {}, ::il2cpp_utils::ExtractTypes(param)));
      return ::il2cpp_utils::RunMethodThrow<TValue, false>(this, ___internal__method, param);
    }
  }; // Zenject.IFactory`2
  // Could not write size check! Type: Zenject.IFactory`2 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::IFactory_2, "Zenject", "IFactory`2");
#pragma pack(pop)
