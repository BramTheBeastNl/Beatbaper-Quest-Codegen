// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MonoKernel
#include "Zenject/MonoKernel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ZenjectSettings
  class ZenjectSettings;
  // Forward declaring type: SceneContextRegistry
  class SceneContextRegistry;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.ProjectKernel
  class ProjectKernel : public Zenject::MonoKernel {
    public:
    // Writing base type padding for base size: 0x32 to desired offset: 0x38
    char ___base_padding[0x6] = {};
    // Nested type: Zenject::ProjectKernel::$$c__DisplayClass4_0
    class $$c__DisplayClass4_0;
    // [InjectAttribute] Offset: 0xDDF27C
    // private Zenject.ZenjectSettings _settings
    // Size: 0x8
    // Offset: 0x38
    Zenject::ZenjectSettings* settings;
    // Field size check
    static_assert(sizeof(Zenject::ZenjectSettings*) == 0x8);
    // [InjectAttribute] Offset: 0xDDF28C
    // private Zenject.SceneContextRegistry _contextRegistry
    // Size: 0x8
    // Offset: 0x40
    Zenject::SceneContextRegistry* contextRegistry;
    // Field size check
    static_assert(sizeof(Zenject::SceneContextRegistry*) == 0x8);
    // Creating value type constructor for type: ProjectKernel
    ProjectKernel(Zenject::ZenjectSettings* settings_ = {}, Zenject::SceneContextRegistry* contextRegistry_ = {}) noexcept : settings{settings_}, contextRegistry{contextRegistry_} {}
    // public System.Void OnApplicationQuit()
    // Offset: 0x16E20F4
    void OnApplicationQuit();
    // public System.Void DestroyEverythingInOrder()
    // Offset: 0x16E2118
    void DestroyEverythingInOrder();
    // public System.Void ForceUnloadAllScenes(System.Boolean immediate)
    // Offset: 0x16E21C0
    void ForceUnloadAllScenes(bool immediate);
    // public System.Void .ctor()
    // Offset: 0x16E24FC
    // Implemented from: Zenject.MonoKernel
    // Base method: System.Void MonoKernel::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProjectKernel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectKernel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProjectKernel*, creationType>()));
    }
  }; // Zenject.ProjectKernel
  #pragma pack(pop)
  static check_size<sizeof(ProjectKernel), 64 + sizeof(Zenject::SceneContextRegistry*)> __Zenject_ProjectKernelSizeCheck;
  static_assert(sizeof(ProjectKernel) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::ProjectKernel*, "Zenject", "ProjectKernel");
// Writing MetadataGetter for method: Zenject::ProjectKernel::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)()>(&Zenject::ProjectKernel::OnApplicationQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::DestroyEverythingInOrder
// Il2CppName: DestroyEverythingInOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)()>(&Zenject::ProjectKernel::DestroyEverythingInOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "DestroyEverythingInOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::ForceUnloadAllScenes
// Il2CppName: ForceUnloadAllScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)(bool)>(&Zenject::ProjectKernel::ForceUnloadAllScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), "ForceUnloadAllScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Zenject::ProjectKernel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)()>(&Zenject::ProjectKernel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Zenject::ProjectKernel::*)()>(&Zenject::ProjectKernel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Zenject::ProjectKernel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
