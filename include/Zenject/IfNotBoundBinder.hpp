// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: BindInfo
  class BindInfo;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x18
  // Autogenerated type: Zenject.IfNotBoundBinder
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: D92370
  class IfNotBoundBinder : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD94348
    // private Zenject.BindInfo <BindInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    Zenject::BindInfo* BindInfo;
    // Field size check
    static_assert(sizeof(Zenject::BindInfo*) == 0x8);
    // Creating value type constructor for type: IfNotBoundBinder
    IfNotBoundBinder(Zenject::BindInfo* BindInfo_ = {}) noexcept : BindInfo{BindInfo_} {}
    // Creating conversion operator: operator Zenject::BindInfo*
    constexpr operator Zenject::BindInfo*() const noexcept {
      return BindInfo;
    }
    // public System.Void .ctor(Zenject.BindInfo bindInfo)
    // Offset: 0x129FC14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IfNotBoundBinder* New_ctor(Zenject::BindInfo* bindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("IfNotBoundBinder").WithContext(".ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IfNotBoundBinder*, creationType>(bindInfo)));
    }
    // public Zenject.BindInfo get_BindInfo()
    // Offset: 0x129FC48
    Zenject::BindInfo* get_BindInfo();
    // private System.Void set_BindInfo(Zenject.BindInfo value)
    // Offset: 0x129FC50
    void set_BindInfo(Zenject::BindInfo* value);
    // public System.Void IfNotBound()
    // Offset: 0x129FC58
    void IfNotBound();
  }; // Zenject.IfNotBoundBinder
  static check_size<sizeof(IfNotBoundBinder), 16 + sizeof(Zenject::BindInfo*)> __Zenject_IfNotBoundBinderSizeCheck;
  static_assert(sizeof(IfNotBoundBinder) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::IfNotBoundBinder*, "Zenject", "IfNotBoundBinder");
#pragma pack(pop)
