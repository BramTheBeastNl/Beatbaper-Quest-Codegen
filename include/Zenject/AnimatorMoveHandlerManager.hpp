// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: IAnimatorMoveHandler
  class IAnimatorMoveHandler;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.AnimatorMoveHandlerManager
  class AnimatorMoveHandlerManager : public UnityEngine::MonoBehaviour {
    public:
    // private System.Collections.Generic.List`1<Zenject.IAnimatorMoveHandler> _handlers
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>* handlers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>*) == 0x8);
    // Creating value type constructor for type: AnimatorMoveHandlerManager
    AnimatorMoveHandlerManager(System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>* handlers_ = {}) noexcept : handlers{handlers_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void Construct(System.Collections.Generic.List`1<Zenject.IAnimatorMoveHandler> handlers)
    // Offset: 0x13883F0
    void Construct(System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>* handlers);
    // public System.Void OnAnimatorMove()
    // Offset: 0x13883F8
    void OnAnimatorMove();
    // public System.Void .ctor()
    // Offset: 0x1388558
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimatorMoveHandlerManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::AnimatorMoveHandlerManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimatorMoveHandlerManager*, creationType>()));
    }
  }; // Zenject.AnimatorMoveHandlerManager
  #pragma pack(pop)
  static check_size<sizeof(AnimatorMoveHandlerManager), 24 + sizeof(System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>*)> __Zenject_AnimatorMoveHandlerManagerSizeCheck;
  static_assert(sizeof(AnimatorMoveHandlerManager) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::AnimatorMoveHandlerManager*, "Zenject", "AnimatorMoveHandlerManager");
// Writing MetadataGetter for method: AnimatorMoveHandlerManager::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorMoveHandlerManager::*)(System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>*)>(&AnimatorMoveHandlerManager::Construct)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorMoveHandlerManager*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::IAnimatorMoveHandler*>*>()});
  }
};
// Writing MetadataGetter for method: AnimatorMoveHandlerManager::OnAnimatorMove
// Il2CppName: OnAnimatorMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorMoveHandlerManager::*)()>(&AnimatorMoveHandlerManager::OnAnimatorMove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorMoveHandlerManager*), "OnAnimatorMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimatorMoveHandlerManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorMoveHandlerManager::*)()>(&AnimatorMoveHandlerManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorMoveHandlerManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatorMoveHandlerManager::*)()>(&AnimatorMoveHandlerManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatorMoveHandlerManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
