// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Skipping declaration: <>c__DisplayClass6_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass7_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass8_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass8_1`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass9_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass9_1`1 because it is already included!
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: BindStatement
  class BindStatement;
  // Forward declaring type: SignalBindingBindInfo
  class SignalBindingBindInfo;
  // Forward declaring type: SignalCopyBinder
  class SignalCopyBinder;
  // Forward declaring type: BindSignalFromBinder`2<TObject, TSignal>
  template<typename TObject, typename TSignal>
  class BindSignalFromBinder_2;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Forward declaring type: BindSignalToBinder`1<TSignal>
  template<typename TSignal>
  class BindSignalToBinder_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Zenject::BindSignalToBinder_1, "Zenject", "BindSignalToBinder`1");
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.BindSignalToBinder`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TSignal>
  class BindSignalToBinder_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Zenject::BindSignalToBinder_1::$$c__DisplayClass6_0<TSignal>
    class $$c__DisplayClass6_0;
    // Nested type: ::Zenject::BindSignalToBinder_1::$$c__DisplayClass7_0<TSignal>
    class $$c__DisplayClass7_0;
    // Nested type: ::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_0_1<TSignal, TObject>
    template<typename TObject>
    class $$c__DisplayClass8_0_1;
    // Nested type: ::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1<TSignal, TObject>
    template<typename TObject>
    class $$c__DisplayClass8_1_1;
    // Nested type: ::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_0_1<TSignal, TObject>
    template<typename TObject>
    class $$c__DisplayClass9_0_1;
    // Nested type: ::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1<TSignal, TObject>
    template<typename TObject>
    class $$c__DisplayClass9_1_1;
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass6_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass6_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindSignalToBinder_1<TSignal>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass6_0";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // public System.Action`1<TSignal> callback
      // Size: 0x8
      // Offset: 0x0
      ::System::Action_1<TSignal>* callback;
      // Field size check
      static_assert(sizeof(::System::Action_1<TSignal>*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Action_1<TSignal>*
      constexpr operator ::System::Action_1<TSignal>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`1<TSignal> callback
      ::System::Action_1<TSignal>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass6_0::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<::System::Action_1<TSignal>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <ToMethod>b__0(System.Object o)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $ToMethod$b__0(::Il2CppObject* o) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass6_0::<ToMethod>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMethod>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, o);
      }
      // static private System.Object __zenCreate(System.Object[] P_0)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass6_0::__zenCreate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass6_0*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
      }
      // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass6_0::__zenCreateInjectTypeInfo");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass6_0*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass6_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass6_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass6_0*, creationType>()));
      }
    }; // Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass6_0
    // Could not write size check! Type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass6_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass7_0
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c__DisplayClass7_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindSignalToBinder_1<TSignal>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass7_0";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // public System.Action callback
      // Size: 0x8
      // Offset: 0x0
      ::System::Action* callback;
      // Field size check
      static_assert(sizeof(::System::Action*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Action*
      constexpr operator ::System::Action*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action callback
      ::System::Action*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass7_0::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <ToMethod>b__0(TSignal signal)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $ToMethod$b__0(TSignal signal) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass7_0::<ToMethod>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMethod>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(signal)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, signal);
      }
      // static private System.Object __zenCreate(System.Object[] P_0)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass7_0::__zenCreate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass7_0*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
      }
      // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass7_0::__zenCreateInjectTypeInfo");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass7_0*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass7_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass7_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass7_0*, creationType>()));
      }
    }; // Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass7_0
    // Could not write size check! Type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass7_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_0`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    template<typename TObject>
    class $$c__DisplayClass8_0_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindSignalToBinder_1<TSignal>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass8_0`1";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // public System.Action`2<TObject,TSignal> handler
      // Size: 0x8
      // Offset: 0x0
      ::System::Action_2<TObject, TSignal>* handler;
      // Field size check
      static_assert(sizeof(::System::Action_2<TObject, TSignal>*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Action_2<TObject, TSignal>*
      constexpr operator ::System::Action_2<TObject, TSignal>*() const noexcept {
        return handler;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`2<TObject,TSignal> handler
      ::System::Action_2<TObject, TSignal>*& dyn_handler() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_0_1::dyn_handler");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handler"))->offset;
        return *reinterpret_cast<::System::Action_2<TObject, TSignal>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Action`1<TSignal> <ToMethod>b__0(TObject x)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Action_1<TSignal>* $ToMethod$b__0(TObject x) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_0_1::<ToMethod>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMethod>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Action_1<TSignal>*, false>(this, ___internal__method, x);
      }
      // static private System.Object __zenCreate(System.Object[] P_0)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_0_1::__zenCreate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
      }
      // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_0_1::__zenCreateInjectTypeInfo");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_0_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>*, creationType>()));
      }
    }; // Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_0`1
    // Could not write size check! Type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_0`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_1`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    template<typename TObject>
    class $$c__DisplayClass8_1_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindSignalToBinder_1<TSignal>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass8_1`1";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // public TObject x
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TObject x;
      // public Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_0`1<TSignal,TObject> CS$<>8__locals1
      // Size: 0x8
      // Offset: 0x0
      typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>* CS$$$8__locals1;
      // Field size check
      static_assert(sizeof(typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public TObject x
      TObject& dyn_x() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1::dyn_x");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "x"))->offset;
        return *reinterpret_cast<TObject*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_0`1<TSignal,TObject> CS$<>8__locals1
      typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>*& dyn_CS$$$8__locals1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1::dyn_CS$$$8__locals1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CS$<>8__locals1"))->offset;
        return *reinterpret_cast<typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_0_1<TObject>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <ToMethod>b__1(TSignal s)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $ToMethod$b__1(TSignal s) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1::<ToMethod>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMethod>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
      }
      // static private System.Object __zenCreate(System.Object[] P_0)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1::__zenCreate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_1_1<TObject>*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
      }
      // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1::__zenCreateInjectTypeInfo");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_1_1<TObject>*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_1_1<TObject>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass8_1_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass8_1_1<TObject>*, creationType>()));
      }
    }; // Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_1`1
    // Could not write size check! Type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass8_1`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_0`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    template<typename TObject>
    class $$c__DisplayClass9_0_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindSignalToBinder_1<TSignal>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass9_0`1";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // public System.Func`2<TObject,System.Action> handlerGetter
      // Size: 0x8
      // Offset: 0x0
      ::System::Func_2<TObject, ::System::Action*>* handlerGetter;
      // Field size check
      static_assert(sizeof(::System::Func_2<TObject, ::System::Action*>*) == 0x8);
      public:
      // Creating conversion operator: operator ::System::Func_2<TObject, ::System::Action*>*
      constexpr operator ::System::Func_2<TObject, ::System::Action*>*() const noexcept {
        return handlerGetter;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Func`2<TObject,System.Action> handlerGetter
      ::System::Func_2<TObject, ::System::Action*>*& dyn_handlerGetter() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_0_1::dyn_handlerGetter");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handlerGetter"))->offset;
        return *reinterpret_cast<::System::Func_2<TObject, ::System::Action*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Action`1<TSignal> <ToMethod>b__0(TObject x)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Action_1<TSignal>* $ToMethod$b__0(TObject x) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_0_1::<ToMethod>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMethod>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Action_1<TSignal>*, false>(this, ___internal__method, x);
      }
      // static private System.Object __zenCreate(System.Object[] P_0)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_0_1::__zenCreate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
      }
      // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_0_1::__zenCreateInjectTypeInfo");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_0_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>*, creationType>()));
      }
    }; // Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_0`1
    // Could not write size check! Type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_0`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_1`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    template<typename TObject>
    class $$c__DisplayClass9_1_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = BindSignalToBinder_1<TSignal>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass9_1`1";
      static constexpr bool IS_VALUE_TYPE = false;
      #ifdef USE_CODEGEN_FIELDS
      public:
      #else
      #ifdef CODEGEN_FIELD_ACCESSIBILITY
      CODEGEN_FIELD_ACCESSIBILITY:
      #else
      protected:
      #endif
      #endif
      // public TObject x
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TObject x;
      // public Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_0`1<TSignal,TObject> CS$<>8__locals1
      // Size: 0x8
      // Offset: 0x0
      typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>* CS$$$8__locals1;
      // Field size check
      static_assert(sizeof(typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>*) == 0x8);
      public:
      // Autogenerated instance field getter
      // Get instance field: public TObject x
      TObject& dyn_x() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1::dyn_x");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "x"))->offset;
        return *reinterpret_cast<TObject*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_0`1<TSignal,TObject> CS$<>8__locals1
      typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>*& dyn_CS$$$8__locals1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1::dyn_CS$$$8__locals1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CS$<>8__locals1"))->offset;
        return *reinterpret_cast<typename ::Zenject::BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_0_1<TObject>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <ToMethod>b__1(TSignal s)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $ToMethod$b__1(TSignal s) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1::<ToMethod>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToMethod>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, s);
      }
      // static private System.Object __zenCreate(System.Object[] P_0)
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1::__zenCreate");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_1_1<TObject>*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
      }
      // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1::__zenCreateInjectTypeInfo");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_1_1<TObject>*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_1_1<TObject>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::$$c__DisplayClass9_1_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename BindSignalToBinder_1<TSignal>::$$c__DisplayClass9_1_1<TObject>*, creationType>()));
      }
    }; // Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_1`1
    // Could not write size check! Type: Zenject.BindSignalToBinder`1/Zenject.<>c__DisplayClass9_1`1 is generic, or has no fields that are valid for size checks!
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x0
    ::Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(::Zenject::DiContainer*) == 0x8);
    // private Zenject.BindStatement _bindStatement
    // Size: 0x8
    // Offset: 0x0
    ::Zenject::BindStatement* bindStatement;
    // Field size check
    static_assert(sizeof(::Zenject::BindStatement*) == 0x8);
    // private Zenject.SignalBindingBindInfo _signalBindInfo
    // Size: 0x8
    // Offset: 0x0
    ::Zenject::SignalBindingBindInfo* signalBindInfo;
    // Field size check
    static_assert(sizeof(::Zenject::SignalBindingBindInfo*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private Zenject.DiContainer _container
    ::Zenject::DiContainer*& dyn__container() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::dyn__container");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_container"))->offset;
      return *reinterpret_cast<::Zenject::DiContainer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Zenject.BindStatement _bindStatement
    ::Zenject::BindStatement*& dyn__bindStatement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::dyn__bindStatement");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_bindStatement"))->offset;
      return *reinterpret_cast<::Zenject::BindStatement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Zenject.SignalBindingBindInfo _signalBindInfo
    ::Zenject::SignalBindingBindInfo*& dyn__signalBindInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::dyn__signalBindInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_signalBindInfo"))->offset;
      return *reinterpret_cast<::Zenject::SignalBindingBindInfo**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // protected Zenject.SignalBindingBindInfo get_SignalBindInfo()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Zenject::SignalBindingBindInfo* get_SignalBindInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::get_SignalBindInfo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SignalBindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalBindingBindInfo*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(Zenject.DiContainer container, Zenject.SignalBindingBindInfo signalBindInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BindSignalToBinder_1<TSignal>* New_ctor(::Zenject::DiContainer* container, ::Zenject::SignalBindingBindInfo* signalBindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BindSignalToBinder_1<TSignal>*, creationType>(container, signalBindInfo)));
    }
    // public Zenject.SignalCopyBinder ToMethod(System.Action`1<TSignal> callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Zenject::SignalCopyBinder* ToMethod(::System::Action_1<TSignal>* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::ToMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalCopyBinder*, false>(this, ___internal__method, callback);
    }
    // public Zenject.SignalCopyBinder ToMethod(System.Action callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Zenject::SignalCopyBinder* ToMethod(::System::Action* callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::ToMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback)})));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::SignalCopyBinder*, false>(this, ___internal__method, callback);
    }
    // public Zenject.BindSignalFromBinder`2<TObject,TSignal> ToMethod(System.Action`2<TObject,TSignal> handler)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::Zenject::BindSignalFromBinder_2<TObject, TSignal>* ToMethod(::System::Action_2<TObject, TSignal>* handler) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::ToMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToMethod", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handler)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindSignalFromBinder_2<TObject, TSignal>*, false>(this, ___generic__method, handler);
    }
    // public Zenject.BindSignalFromBinder`2<TObject,TSignal> ToMethod(System.Func`2<TObject,System.Action> handlerGetter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::Zenject::BindSignalFromBinder_2<TObject, TSignal>* ToMethod(::System::Func_2<TObject, ::System::Action*>* handlerGetter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::ToMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToMethod", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handlerGetter)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindSignalFromBinder_2<TObject, TSignal>*, false>(this, ___generic__method, handlerGetter);
    }
    // public Zenject.BindSignalFromBinder`2<TObject,TSignal> ToMethod(System.Func`2<TObject,System.Action`1<TSignal>> handlerGetter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TObject>
    ::Zenject::BindSignalFromBinder_2<TObject, TSignal>* ToMethod(::System::Func_2<TObject, ::System::Action_1<TSignal>*>* handlerGetter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::ToMethod");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToMethod", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handlerGetter)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObject>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::BindSignalFromBinder_2<TObject, TSignal>*, false>(this, ___generic__method, handlerGetter);
    }
    // static private System.Object __zenCreate(System.Object[] P_0)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::Il2CppObject* __zenCreate(::ArrayW<::Il2CppObject*> P_0) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::__zenCreate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BindSignalToBinder_1<TSignal>*>::get(), "__zenCreate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(P_0)})));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, P_0);
    }
    // static private Zenject.InjectTypeInfo __zenCreateInjectTypeInfo()
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::Zenject::InjectTypeInfo* __zenCreateInjectTypeInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Zenject::BindSignalToBinder_1::__zenCreateInjectTypeInfo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<BindSignalToBinder_1<TSignal>*>::get(), "__zenCreateInjectTypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Zenject::InjectTypeInfo*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
    }
  }; // Zenject.BindSignalToBinder`1
  // Could not write size check! Type: Zenject.BindSignalToBinder`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
