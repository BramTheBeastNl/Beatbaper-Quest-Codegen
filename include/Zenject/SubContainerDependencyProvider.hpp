// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ISubContainerCreator
  class ISubContainerCreator;
  // Forward declaring type: InjectContext
  class InjectContext;
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.SubContainerDependencyProvider
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: CEF4E8
  class SubContainerDependencyProvider : public ::Il2CppObject/*, public Zenject::IProvider*/ {
    public:
    // private readonly Zenject.ISubContainerCreator _subContainerCreator
    // Size: 0x8
    // Offset: 0x10
    Zenject::ISubContainerCreator* subContainerCreator;
    // Field size check
    static_assert(sizeof(Zenject::ISubContainerCreator*) == 0x8);
    // private readonly System.Type _dependencyType
    // Size: 0x8
    // Offset: 0x18
    System::Type* dependencyType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // private readonly System.Object _identifier
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* identifier;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly System.Boolean _resolveAll
    // Size: 0x1
    // Offset: 0x28
    bool resolveAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: SubContainerDependencyProvider
    SubContainerDependencyProvider(Zenject::ISubContainerCreator* subContainerCreator_ = {}, System::Type* dependencyType_ = {}, ::Il2CppObject* identifier_ = {}, bool resolveAll_ = {}) noexcept : subContainerCreator{subContainerCreator_}, dependencyType{dependencyType_}, identifier{identifier_}, resolveAll{resolveAll_} {}
    // Creating interface conversion operator: operator Zenject::IProvider
    operator Zenject::IProvider() noexcept {
      return *reinterpret_cast<Zenject::IProvider*>(this);
    }
    // public System.Void .ctor(System.Type dependencyType, System.Object identifier, Zenject.ISubContainerCreator subContainerCreator, System.Boolean resolveAll)
    // Offset: 0x15189E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SubContainerDependencyProvider* New_ctor(System::Type* dependencyType, ::Il2CppObject* identifier, Zenject::ISubContainerCreator* subContainerCreator, bool resolveAll) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerDependencyProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SubContainerDependencyProvider*, creationType>(dependencyType, identifier, subContainerCreator, resolveAll)));
    }
    // public System.Boolean get_IsCached()
    // Offset: 0x151A68C
    bool get_IsCached_NEW();
    // public System.Boolean get_TypeVariesBasedOnMemberType()
    // Offset: 0x151A694
    bool get_TypeVariesBasedOnMemberType_NEW();
    // public System.Type GetInstanceType(Zenject.InjectContext context)
    // Offset: 0x151A69C
    System::Type* GetInstanceType_NEW(Zenject::InjectContext* context);
    // private Zenject.InjectContext CreateSubContext(Zenject.InjectContext parent, Zenject.DiContainer subContainer)
    // Offset: 0x151A6A4
    Zenject::InjectContext* CreateSubContext(Zenject::InjectContext* parent, Zenject::DiContainer* subContainer);
    // public System.Void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List`1<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List`1<System.Object> buffer)
    // Offset: 0x151A6EC
    void GetAllInstancesWithInjectSplit_NEW(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer);
  }; // Zenject.SubContainerDependencyProvider
  #pragma pack(pop)
  static check_size<sizeof(SubContainerDependencyProvider), 40 + sizeof(bool)> __Zenject_SubContainerDependencyProviderSizeCheck;
  static_assert(sizeof(SubContainerDependencyProvider) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::SubContainerDependencyProvider*, "Zenject", "SubContainerDependencyProvider");
