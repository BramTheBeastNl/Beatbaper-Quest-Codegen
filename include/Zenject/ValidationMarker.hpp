// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.ValidationMarker
  // [NoReflectionBakingAttribute] Offset: DDD49C
  class ValidationMarker : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xDDF43C
    // private System.Boolean <InstantiateFailed>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool InstantiateFailed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InstantiateFailed and: MarkedType
    char __padding0[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xDDF44C
    // private System.Type <MarkedType>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    System::Type* MarkedType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // Creating value type constructor for type: ValidationMarker
    ValidationMarker(bool InstantiateFailed_ = {}, System::Type* MarkedType_ = {}) noexcept : InstantiateFailed{InstantiateFailed_}, MarkedType{MarkedType_} {}
    // public System.Void .ctor(System.Type markedType, System.Boolean instantiateFailed)
    // Offset: 0x23BB294
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ValidationMarker* New_ctor(System::Type* markedType, bool instantiateFailed) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ValidationMarker*, creationType>(markedType, instantiateFailed)));
    }
    // public System.Void .ctor(System.Type markedType)
    // Offset: 0x23BB2D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ValidationMarker* New_ctor(System::Type* markedType) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ValidationMarker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ValidationMarker*, creationType>(markedType)));
    }
    // public System.Boolean get_InstantiateFailed()
    // Offset: 0x23BB304
    bool get_InstantiateFailed();
    // private System.Void set_InstantiateFailed(System.Boolean value)
    // Offset: 0x23BB30C
    void set_InstantiateFailed(bool value);
    // public System.Type get_MarkedType()
    // Offset: 0x23BB318
    System::Type* get_MarkedType();
    // private System.Void set_MarkedType(System.Type value)
    // Offset: 0x23BB320
    void set_MarkedType(System::Type* value);
  }; // Zenject.ValidationMarker
  #pragma pack(pop)
  static check_size<sizeof(ValidationMarker), 24 + sizeof(System::Type*)> __Zenject_ValidationMarkerSizeCheck;
  static_assert(sizeof(ValidationMarker) == 0x20);
  // Writing MetadataGetter for method: ValidationMarker::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValidationMarker::*)(System::Type*, bool)>(&ValidationMarker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValidationMarker::*)(System::Type*, bool)>(&ValidationMarker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ValidationMarker::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValidationMarker::*)(System::Type*)>(&ValidationMarker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValidationMarker::*)(System::Type*)>(&ValidationMarker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
  // Writing MetadataGetter for method: ValidationMarker::get_InstantiateFailed
  // Il2CppName: get_InstantiateFailed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ValidationMarker::*)()>(&ValidationMarker::get_InstantiateFailed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), "get_InstantiateFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ValidationMarker::set_InstantiateFailed
  // Il2CppName: set_InstantiateFailed
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValidationMarker::*)(bool)>(&ValidationMarker::set_InstantiateFailed)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), "set_InstantiateFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ValidationMarker::get_MarkedType
  // Il2CppName: get_MarkedType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ValidationMarker::*)()>(&ValidationMarker::get_MarkedType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), "get_MarkedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ValidationMarker::set_MarkedType
  // Il2CppName: set_MarkedType
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValidationMarker::*)(System::Type*)>(&ValidationMarker::set_MarkedType)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ValidationMarker*), "set_MarkedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::ValidationMarker*, "Zenject", "ValidationMarker");
