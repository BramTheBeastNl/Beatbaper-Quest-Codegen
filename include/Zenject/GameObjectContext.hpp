// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.RunnableContext
#include "Zenject/RunnableContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: MonoKernel
  class MonoKernel;
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: MonoBehaviour because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.GameObjectContext
  class GameObjectContext : public Zenject::RunnableContext {
    public:
    // Writing base type padding for base size: 0x42 to desired offset: 0x48
    char ___base_padding[0x6] = {};
    // [CompilerGeneratedAttribute] Offset: 0xDDEB7C
    // private System.Action PreInstall
    // Size: 0x8
    // Offset: 0x48
    System::Action* PreInstall;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDDEB8C
    // private System.Action PostInstall
    // Size: 0x8
    // Offset: 0x50
    System::Action* PostInstall;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDDEB9C
    // private System.Action PreResolve
    // Size: 0x8
    // Offset: 0x58
    System::Action* PreResolve;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xDDEBAC
    // private System.Action PostResolve
    // Size: 0x8
    // Offset: 0x60
    System::Action* PostResolve;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [NullAllowed] Offset: 0xDDEBBC
    // [TooltipAttribute] Offset: 0xDDEBBC
    // [FormerlySerializedAsAttribute] Offset: 0xDDEBBC
    // private Zenject.MonoKernel _kernel
    // Size: 0x8
    // Offset: 0x68
    Zenject::MonoKernel* kernel;
    // Field size check
    static_assert(sizeof(Zenject::MonoKernel*) == 0x8);
    // private Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x70
    Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(Zenject::DiContainer*) == 0x8);
    // Creating value type constructor for type: GameObjectContext
    GameObjectContext(System::Action* PreInstall_ = {}, System::Action* PostInstall_ = {}, System::Action* PreResolve_ = {}, System::Action* PostResolve_ = {}, Zenject::MonoKernel* kernel_ = {}, Zenject::DiContainer* container_ = {}) noexcept : PreInstall{PreInstall_}, PostInstall{PostInstall_}, PreResolve{PreResolve_}, PostResolve{PostResolve_}, kernel{kernel_}, container{container_} {}
    // public System.Void add_PreInstall(System.Action value)
    // Offset: 0x163C838
    void add_PreInstall(System::Action* value);
    // public System.Void remove_PreInstall(System.Action value)
    // Offset: 0x163C8DC
    void remove_PreInstall(System::Action* value);
    // public System.Void add_PostInstall(System.Action value)
    // Offset: 0x163C980
    void add_PostInstall(System::Action* value);
    // public System.Void remove_PostInstall(System.Action value)
    // Offset: 0x163CA24
    void remove_PostInstall(System::Action* value);
    // public System.Void add_PreResolve(System.Action value)
    // Offset: 0x163CAC8
    void add_PreResolve(System::Action* value);
    // public System.Void remove_PreResolve(System.Action value)
    // Offset: 0x163CB6C
    void remove_PreResolve(System::Action* value);
    // public System.Void add_PostResolve(System.Action value)
    // Offset: 0x163CC10
    void add_PostResolve(System::Action* value);
    // public System.Void remove_PostResolve(System.Action value)
    // Offset: 0x163CCB4
    void remove_PostResolve(System::Action* value);
    // public System.Void Construct(Zenject.DiContainer parentContainer)
    // Offset: 0x163CE10
    void Construct(Zenject::DiContainer* parentContainer);
    // private System.Void InstallBindings(System.Collections.Generic.List`1<UnityEngine.MonoBehaviour> injectableMonoBehaviours)
    // Offset: 0x163D114
    void InstallBindings(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* injectableMonoBehaviours);
    // public override Zenject.DiContainer get_Container()
    // Offset: 0x163CD58
    // Implemented from: Zenject.Context
    // Base method: Zenject.DiContainer Context::get_Container()
    Zenject::DiContainer* get_Container();
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.GameObject> GetRootGameObjects()
    // Offset: 0x163CD60
    // Implemented from: Zenject.Context
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.GameObject> Context::GetRootGameObjects()
    System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* GetRootGameObjects();
    // protected override System.Void RunInternal()
    // Offset: 0x163CE5C
    // Implemented from: Zenject.RunnableContext
    // Base method: System.Void RunnableContext::RunInternal()
    void RunInternal();
    // protected override System.Void GetInjectableMonoBehaviours(System.Collections.Generic.List`1<UnityEngine.MonoBehaviour> monoBehaviours)
    // Offset: 0x163D2C4
    // Implemented from: Zenject.Context
    // Base method: System.Void Context::GetInjectableMonoBehaviours(System.Collections.Generic.List`1<UnityEngine.MonoBehaviour> monoBehaviours)
    void GetInjectableMonoBehaviours(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* monoBehaviours);
    // public System.Void .ctor()
    // Offset: 0x163D4D8
    // Implemented from: Zenject.RunnableContext
    // Base method: System.Void RunnableContext::.ctor()
    // Base method: System.Void Context::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectContext*, creationType>()));
    }
  }; // Zenject.GameObjectContext
  #pragma pack(pop)
  static check_size<sizeof(GameObjectContext), 112 + sizeof(Zenject::DiContainer*)> __Zenject_GameObjectContextSizeCheck;
  static_assert(sizeof(GameObjectContext) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::GameObjectContext*, "Zenject", "GameObjectContext");
// Writing MetadataGetter for method: Zenject::GameObjectContext::add_PreInstall
// Il2CppName: add_PreInstall
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::remove_PreInstall
// Il2CppName: remove_PreInstall
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::add_PostInstall
// Il2CppName: add_PostInstall
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::remove_PostInstall
// Il2CppName: remove_PostInstall
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::add_PreResolve
// Il2CppName: add_PreResolve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::remove_PreResolve
// Il2CppName: remove_PreResolve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::add_PostResolve
// Il2CppName: add_PostResolve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::remove_PostResolve
// Il2CppName: remove_PostResolve
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::Construct
// Il2CppName: Construct
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::InstallBindings
// Il2CppName: InstallBindings
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::get_Container
// Il2CppName: get_Container
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::GetRootGameObjects
// Il2CppName: GetRootGameObjects
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::RunInternal
// Il2CppName: RunInternal
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::GetInjectableMonoBehaviours
// Il2CppName: GetInjectableMonoBehaviours
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::GameObjectContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
