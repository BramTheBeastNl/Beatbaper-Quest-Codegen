// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ConventionBindInfo
  class ConventionBindInfo;
  // Forward declaring type: ConventionFilterTypesBinder
  class ConventionFilterTypesBinder;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.ConventionSelectTypesBinder
  // [NoReflectionBakingAttribute] Offset: DDC5E4
  class ConventionSelectTypesBinder : public ::Il2CppObject {
    public:
    // Nested type: Zenject::ConventionSelectTypesBinder::$$c
    class $$c;
    // private readonly Zenject.ConventionBindInfo _bindInfo
    // Size: 0x8
    // Offset: 0x10
    Zenject::ConventionBindInfo* bindInfo;
    // Field size check
    static_assert(sizeof(Zenject::ConventionBindInfo*) == 0x8);
    // Creating value type constructor for type: ConventionSelectTypesBinder
    ConventionSelectTypesBinder(Zenject::ConventionBindInfo* bindInfo_ = {}) noexcept : bindInfo{bindInfo_} {}
    // Creating conversion operator: operator Zenject::ConventionBindInfo*
    constexpr operator Zenject::ConventionBindInfo*() const noexcept {
      return bindInfo;
    }
    // public System.Void .ctor(Zenject.ConventionBindInfo bindInfo)
    // Offset: 0x138C7A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConventionSelectTypesBinder* New_ctor(Zenject::ConventionBindInfo* bindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConventionSelectTypesBinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConventionSelectTypesBinder*, creationType>(bindInfo)));
    }
    // private Zenject.ConventionFilterTypesBinder CreateNextBinder()
    // Offset: 0x139001C
    Zenject::ConventionFilterTypesBinder* CreateNextBinder();
    // public Zenject.ConventionFilterTypesBinder AllTypes()
    // Offset: 0x1390084
    Zenject::ConventionFilterTypesBinder* AllTypes();
    // public Zenject.ConventionFilterTypesBinder AllClasses()
    // Offset: 0x1390088
    Zenject::ConventionFilterTypesBinder* AllClasses();
    // public Zenject.ConventionFilterTypesBinder AllNonAbstractClasses()
    // Offset: 0x1390184
    Zenject::ConventionFilterTypesBinder* AllNonAbstractClasses();
    // public Zenject.ConventionFilterTypesBinder AllAbstractClasses()
    // Offset: 0x1390280
    Zenject::ConventionFilterTypesBinder* AllAbstractClasses();
    // public Zenject.ConventionFilterTypesBinder AllInterfaces()
    // Offset: 0x139037C
    Zenject::ConventionFilterTypesBinder* AllInterfaces();
  }; // Zenject.ConventionSelectTypesBinder
  #pragma pack(pop)
  static check_size<sizeof(ConventionSelectTypesBinder), 16 + sizeof(Zenject::ConventionBindInfo*)> __Zenject_ConventionSelectTypesBinderSizeCheck;
  static_assert(sizeof(ConventionSelectTypesBinder) == 0x18);
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionSelectTypesBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionSelectTypesBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConventionSelectTypesBinder::*)(Zenject::ConventionBindInfo*)>(&ConventionSelectTypesBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ConventionBindInfo*>()});
    }
  };
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::CreateNextBinder
  // Il2CppName: CreateNextBinder
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::CreateNextBinder)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "CreateNextBinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::AllTypes
  // Il2CppName: AllTypes
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllTypes)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::AllClasses
  // Il2CppName: AllClasses
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllClasses)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::AllNonAbstractClasses
  // Il2CppName: AllNonAbstractClasses
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllNonAbstractClasses)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllNonAbstractClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::AllAbstractClasses
  // Il2CppName: AllAbstractClasses
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllAbstractClasses)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllAbstractClasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ConventionSelectTypesBinder::AllInterfaces
  // Il2CppName: AllInterfaces
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ConventionFilterTypesBinder* (ConventionSelectTypesBinder::*)()>(&ConventionSelectTypesBinder::AllInterfaces)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ConventionSelectTypesBinder*), "AllInterfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::ConventionSelectTypesBinder*, "Zenject", "ConventionSelectTypesBinder");
