// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.ProfileBlock
  // [NoReflectionBakingAttribute] Offset: DDD454
  class ProfileBlock : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Creating value type constructor for type: ProfileBlock
    ProfileBlock() noexcept {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // [CompilerGeneratedAttribute] Offset: 0xDDF40C
    // Get static field: static private System.Text.RegularExpressions.Regex <ProfilePattern>k__BackingField
    static System::Text::RegularExpressions::Regex* _get_$ProfilePattern$k__BackingField();
    // Set static field: static private System.Text.RegularExpressions.Regex <ProfilePattern>k__BackingField
    static void _set_$ProfilePattern$k__BackingField(System::Text::RegularExpressions::Regex* value);
    // private System.Void .ctor(System.String sampleName, System.Boolean rootBlock)
    // Offset: 0x16E0CC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfileBlock* New_ctor(::Il2CppString* sampleName, bool rootBlock) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfileBlock*, creationType>(sampleName, rootBlock)));
    }
    // private System.Void .ctor(System.String sampleName)
    // Offset: 0x16E0CCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfileBlock* New_ctor(::Il2CppString* sampleName) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProfileBlock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfileBlock*, creationType>(sampleName)));
    }
    // static public System.Text.RegularExpressions.Regex get_ProfilePattern()
    // Offset: 0x16E0CD4
    static System::Text::RegularExpressions::Regex* get_ProfilePattern();
    // static public System.Void set_ProfilePattern(System.Text.RegularExpressions.Regex value)
    // Offset: 0x16E0D24
    static void set_ProfilePattern(System::Text::RegularExpressions::Regex* value);
    // static public Zenject.ProfileBlock Start()
    // Offset: 0x16E0D78
    static Zenject::ProfileBlock* Start();
    // static public Zenject.ProfileBlock Start(System.String sampleNameFormat, System.Object obj1, System.Object obj2)
    // Offset: 0x16E0D80
    static Zenject::ProfileBlock* Start(::Il2CppString* sampleNameFormat, ::Il2CppObject* obj1, ::Il2CppObject* obj2);
    // static public Zenject.ProfileBlock Start(System.String sampleNameFormat, System.Object obj)
    // Offset: 0x16E0D88
    static Zenject::ProfileBlock* Start(::Il2CppString* sampleNameFormat, ::Il2CppObject* obj);
    // static public Zenject.ProfileBlock Start(System.String sampleName)
    // Offset: 0x16E0D90
    static Zenject::ProfileBlock* Start(::Il2CppString* sampleName);
    // public System.Void Dispose()
    // Offset: 0x16E0D98
    void Dispose();
  }; // Zenject.ProfileBlock
  #pragma pack(pop)
  // Writing MetadataGetter for method: ProfileBlock::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfileBlock::*)(::Il2CppString*, bool)>(&ProfileBlock::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfileBlock::*)(::Il2CppString*, bool)>(&ProfileBlock::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::New_ctor
  // Il2CppName: .ctor
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfileBlock::*)(::Il2CppString*)>(&ProfileBlock::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfileBlock::*)(::Il2CppString*)>(&ProfileBlock::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::get_ProfilePattern
  // Il2CppName: get_ProfilePattern
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::RegularExpressions::Regex* (*)()>(&ProfileBlock::get_ProfilePattern)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "get_ProfilePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::set_ProfilePattern
  // Il2CppName: set_ProfilePattern
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::RegularExpressions::Regex*)>(&ProfileBlock::set_ProfilePattern)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "set_ProfilePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::RegularExpressions::Regex*>()});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ProfileBlock* (*)()>(&ProfileBlock::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ProfileBlock* (*)(::Il2CppString*, ::Il2CppObject*, ::Il2CppObject*)>(&ProfileBlock::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ProfileBlock* (*)(::Il2CppString*, ::Il2CppObject*)>(&ProfileBlock::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::Start
  // Il2CppName: Start
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ProfileBlock* (*)(::Il2CppString*)>(&ProfileBlock::Start)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
    }
  };
  // Writing MetadataGetter for method: ProfileBlock::Dispose
  // Il2CppName: Dispose
  template<>
  struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProfileBlock::*)()>(&ProfileBlock::Dispose)> {
    const MethodInfo* get() {
      return ::il2cpp_utils::FindMethod(classof(ProfileBlock*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
    }
  };
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::ProfileBlock*, "Zenject", "ProfileBlock");
