// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: FactoryBindInfo
  class FactoryBindInfo;
  // Forward declaring type: FactoryFromBinder`2<TParam1, TContract>
  template<typename TParam1, typename TContract>
  class FactoryFromBinder_2;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.DecoratorToChoiceFromBinder`1
  template<typename TContract>
  class DecoratorToChoiceFromBinder_1 : public ::Il2CppObject {
    public:
    // private Zenject.DiContainer _bindContainer
    // Offset: 0x0
    Zenject::DiContainer* bindContainer;
    // private Zenject.BindInfo _bindInfo
    // Offset: 0x0
    Zenject::BindInfo* bindInfo;
    // private Zenject.FactoryBindInfo _factoryBindInfo
    // Offset: 0x0
    Zenject::FactoryBindInfo* factoryBindInfo;
    // public System.Void .ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo)
    // Offset: 0xFFFFFFFF
    static DecoratorToChoiceFromBinder_1<TContract>* New_ctor(Zenject::DiContainer* bindContainer, Zenject::BindInfo* bindInfo, Zenject::FactoryBindInfo* factoryBindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("DecoratorToChoiceFromBinder_1").WithContext(".ctor");
      return THROW_UNLESS(::il2cpp_utils::New<DecoratorToChoiceFromBinder_1<TContract>*>(bindContainer, bindInfo, factoryBindInfo));
    }
    // public Zenject.FactoryFromBinder`2<TContract,TConcrete> With()
    // Offset: 0xFFFFFFFF
    template<class TConcrete>
    Zenject::FactoryFromBinder_2<TContract, TConcrete>* With() {
      static_assert(std::is_convertible_v<TConcrete, TContract>);
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("DecoratorToChoiceFromBinder_1").WithContext("With");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Zenject::FactoryFromBinder_2<TContract, TConcrete>*>(), "With", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()}, ::il2cpp_utils::ExtractTypes())));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FactoryFromBinder_2<TContract, TConcrete>*, false>(this, ___internal__method);
    }
  }; // Zenject.DecoratorToChoiceFromBinder`1
  // Could not write size check! Type: Zenject.DecoratorToChoiceFromBinder`1 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::DecoratorToChoiceFromBinder_1, "Zenject", "DecoratorToChoiceFromBinder`1");
#pragma pack(pop)
