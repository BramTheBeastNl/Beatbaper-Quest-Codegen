// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Zenject.BindingId
  // [DebuggerStepThroughAttribute] Offset: FFFFFFFF
  struct BindingId/*, public System::ValueType, public System::IEquatable_1<Zenject::BindingId>*/ {
    public:
    // private System.Type _type
    // Size: 0x8
    // Offset: 0x0
    System::Type* type;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // private System.Object _identifier
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppObject* identifier;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: BindingId
    constexpr BindingId(System::Type* type_ = {}, ::Il2CppObject* identifier_ = {}) noexcept : type{type_}, identifier{identifier_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<Zenject::BindingId>
    operator System::IEquatable_1<Zenject::BindingId>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<Zenject::BindingId>*>(this);
    }
    // public System.Void .ctor(System.Type type, System.Object identifier)
    // Offset: 0xEEAF10
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  BindingId(System::Type* type, ::Il2CppObject* identifier)
    // public System.Type get_Type()
    // Offset: 0xEEAF18
    System::Type* get_Type();
    // public System.Void set_Type(System.Type value)
    // Offset: 0xEEAF20
    void set_Type(System::Type* value);
    // public System.Object get_Identifier()
    // Offset: 0xEEAF28
    ::Il2CppObject* get_Identifier();
    // public System.Void set_Identifier(System.Object value)
    // Offset: 0xEEAF30
    void set_Identifier(::Il2CppObject* value);
    // public System.Boolean Equals(Zenject.BindingId that)
    // Offset: 0xEEAF50
    bool Equals(Zenject::BindingId that);
    // public override System.String ToString()
    // Offset: 0xEEAF38
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0xEEAF40
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xEEAF48
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
  }; // Zenject.BindingId
  #pragma pack(pop)
  static check_size<sizeof(BindingId), 8 + sizeof(::Il2CppObject*)> __Zenject_BindingIdSizeCheck;
  static_assert(sizeof(BindingId) == 0x10);
  // static public System.Boolean op_Equality(Zenject.BindingId left, Zenject.BindingId right)
  // Offset: 0x138964C
  bool operator ==(const Zenject::BindingId& left, const Zenject::BindingId& right);
  // static public System.Boolean op_Inequality(Zenject.BindingId left, Zenject.BindingId right)
  // Offset: 0x1389718
  bool operator !=(const Zenject::BindingId& left, const Zenject::BindingId& right);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::BindingId, "Zenject", "BindingId");
// Writing MetadataGetter for method: Zenject::BindingId::BindingId
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Zenject::BindingId::get_Type
// Il2CppName: get_Type
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::set_Type
// Il2CppName: set_Type
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::get_Identifier
// Il2CppName: get_Identifier
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::set_Identifier
// Il2CppName: set_Identifier
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::ToString
// Il2CppName: ToString
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::GetHashCode
// Il2CppName: GetHashCode
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::Equals
// Il2CppName: Equals
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Zenject::BindingId::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
