// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetSerializer
#include "LiteNetLib/Utils/NetSerializer.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/CustomType
#include "LiteNetLib/Utils/NetSerializer_CustomType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: LiteNetLib.Utils
namespace LiteNetLib::Utils {
  // Autogenerated type: LiteNetLib.Utils.NetSerializer/CustomTypeClass`1
  template<typename TProperty>
  class NetSerializer::CustomTypeClass_1 : public LiteNetLib::Utils::NetSerializer::CustomType {
    public:
    // private readonly System.Func`1<TProperty> _constructor
    // Offset: 0x0
    System::Func_1<TProperty>* constructor;
    // Creating conversion operator: operator System::Func_1<TProperty>*
    constexpr operator System::Func_1<TProperty>*() const noexcept {
      return constructor;
    }
    // public System.Void .ctor(System.Func`1<TProperty> constructor)
    // Offset: 0xFFFFFFFF
    static NetSerializer::CustomTypeClass_1<TProperty>* New_ctor(System::Func_1<TProperty>* constructor) {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CustomTypeClass_1").WithContext(".ctor");
      return THROW_UNLESS(::il2cpp_utils::New<NetSerializer::CustomTypeClass_1<TProperty>*>(constructor));
    }
    // public override LiteNetLib.Utils.NetSerializer/FastCall`1<T> Get()
    // Offset: 0xFFFFFFFF
    // Implemented from: LiteNetLib.Utils.NetSerializer/CustomType
    // Base method: LiteNetLib.Utils.NetSerializer/FastCall`1<T> CustomType::Get()
    template<class T>
    LiteNetLib::Utils::NetSerializer::FastCall_1<T>* Get() {
      static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("LiteNetLib::Utils").WithContext("CustomTypeClass_1").WithContext("Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<LiteNetLib::Utils::NetSerializer::FastCall_1<T>*>(), "Get", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes())));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetSerializer::FastCall_1<T>*, false>(this, ___internal__method);
    }
  }; // LiteNetLib.Utils.NetSerializer/CustomTypeClass`1
  // Could not write size check! Type: LiteNetLib.Utils.NetSerializer/CustomTypeClass`1 is generic!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(LiteNetLib::Utils::NetSerializer::CustomTypeClass_1, "LiteNetLib.Utils", "NetSerializer/CustomTypeClass`1");
#pragma pack(pop)
