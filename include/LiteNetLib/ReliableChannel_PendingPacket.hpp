// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 1)
// WARNING Layout: Sequential may not be correctly taken into account!
// Begin includes
#include <stdint.h>
// Including type: LiteNetLib.ReliableChannel
#include "LiteNetLib/ReliableChannel.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPacket
  class NetPacket;
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x11
  // Autogenerated type: LiteNetLib.ReliableChannel/PendingPacket
  // [] Offset: FFFFFFFF
  struct ReliableChannel::PendingPacket/*, public System::ValueType*/ {
    public:
    // private LiteNetLib.NetPacket _packet
    // Size: 0x8
    // Offset: 0x0
    LiteNetLib::NetPacket* packet;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPacket*) == 0x8);
    // private System.Int64 _timeStamp
    // Size: 0x8
    // Offset: 0x8
    int64_t timeStamp;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean _isSent
    // Size: 0x1
    // Offset: 0x10
    bool isSent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: PendingPacket
    constexpr PendingPacket(LiteNetLib::NetPacket* packet_ = {}, int64_t timeStamp_ = {}, bool isSent_ = {}) noexcept : packet{packet_}, timeStamp{timeStamp_}, isSent{isSent_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void Init(LiteNetLib.NetPacket packet)
    // Offset: 0xE8C5AC
    void Init(LiteNetLib::NetPacket* packet);
    // public System.Void TrySend(System.Int64 currentTime, LiteNetLib.NetPeer peer)
    // Offset: 0xE8C5D8
    void TrySend(int64_t currentTime, LiteNetLib::NetPeer* peer);
    // public System.Boolean Clear(LiteNetLib.NetPeer peer)
    // Offset: 0xE8C5E0
    bool Clear(LiteNetLib::NetPeer* peer);
    // public override System.String ToString()
    // Offset: 0xE8C5A4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // LiteNetLib.ReliableChannel/PendingPacket
  static check_size<sizeof(ReliableChannel::PendingPacket), 16 + sizeof(bool)> __LiteNetLib_ReliableChannel_PendingPacketSizeCheck;
  static_assert(sizeof(ReliableChannel::PendingPacket) == 0x11);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::ReliableChannel::PendingPacket, "LiteNetLib", "ReliableChannel/PendingPacket");
#pragma pack(pop)
