// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: DisconnectInfo
  struct DisconnectInfo;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
  // Forward declaring type: UnconnectedMessageType
  struct UnconnectedMessageType;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketError
  struct SocketError;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.EventBasedNetListener
  class EventBasedNetListener : public ::Il2CppObject/*, public LiteNetLib::INetEventListener, public LiteNetLib::IDeliveryEventListener*/ {
    public:
    // Nested type: LiteNetLib::EventBasedNetListener::OnPeerConnected
    class OnPeerConnected;
    // Nested type: LiteNetLib::EventBasedNetListener::OnPeerDisconnected
    class OnPeerDisconnected;
    // Nested type: LiteNetLib::EventBasedNetListener::OnNetworkError
    class OnNetworkError;
    // Nested type: LiteNetLib::EventBasedNetListener::OnNetworkReceive
    class OnNetworkReceive;
    // Nested type: LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected
    class OnNetworkReceiveUnconnected;
    // Nested type: LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate
    class OnNetworkLatencyUpdate;
    // Nested type: LiteNetLib::EventBasedNetListener::OnConnectionRequest
    class OnConnectionRequest;
    // Nested type: LiteNetLib::EventBasedNetListener::OnDeliveryEvent
    class OnDeliveryEvent;
    // [CompilerGeneratedAttribute] Offset: 0xD0A21C
    // private LiteNetLib.EventBasedNetListener/OnPeerConnected PeerConnectedEvent
    // Size: 0x8
    // Offset: 0x10
    LiteNetLib::EventBasedNetListener::OnPeerConnected* PeerConnectedEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnPeerConnected*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A22C
    // private LiteNetLib.EventBasedNetListener/OnPeerDisconnected PeerDisconnectedEvent
    // Size: 0x8
    // Offset: 0x18
    LiteNetLib::EventBasedNetListener::OnPeerDisconnected* PeerDisconnectedEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnPeerDisconnected*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A23C
    // private LiteNetLib.EventBasedNetListener/OnNetworkError NetworkErrorEvent
    // Size: 0x8
    // Offset: 0x20
    LiteNetLib::EventBasedNetListener::OnNetworkError* NetworkErrorEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnNetworkError*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A24C
    // private LiteNetLib.EventBasedNetListener/OnNetworkReceive NetworkReceiveEvent
    // Size: 0x8
    // Offset: 0x28
    LiteNetLib::EventBasedNetListener::OnNetworkReceive* NetworkReceiveEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnNetworkReceive*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A25C
    // private LiteNetLib.EventBasedNetListener/OnNetworkReceiveUnconnected NetworkReceiveUnconnectedEvent
    // Size: 0x8
    // Offset: 0x30
    LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* NetworkReceiveUnconnectedEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A26C
    // private LiteNetLib.EventBasedNetListener/OnNetworkLatencyUpdate NetworkLatencyUpdateEvent
    // Size: 0x8
    // Offset: 0x38
    LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* NetworkLatencyUpdateEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A27C
    // private LiteNetLib.EventBasedNetListener/OnConnectionRequest ConnectionRequestEvent
    // Size: 0x8
    // Offset: 0x40
    LiteNetLib::EventBasedNetListener::OnConnectionRequest* ConnectionRequestEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnConnectionRequest*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0A28C
    // private LiteNetLib.EventBasedNetListener/OnDeliveryEvent DeliveryEvent
    // Size: 0x8
    // Offset: 0x48
    LiteNetLib::EventBasedNetListener::OnDeliveryEvent* DeliveryEvent;
    // Field size check
    static_assert(sizeof(LiteNetLib::EventBasedNetListener::OnDeliveryEvent*) == 0x8);
    // Creating value type constructor for type: EventBasedNetListener
    EventBasedNetListener(LiteNetLib::EventBasedNetListener::OnPeerConnected* PeerConnectedEvent_ = {}, LiteNetLib::EventBasedNetListener::OnPeerDisconnected* PeerDisconnectedEvent_ = {}, LiteNetLib::EventBasedNetListener::OnNetworkError* NetworkErrorEvent_ = {}, LiteNetLib::EventBasedNetListener::OnNetworkReceive* NetworkReceiveEvent_ = {}, LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* NetworkReceiveUnconnectedEvent_ = {}, LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* NetworkLatencyUpdateEvent_ = {}, LiteNetLib::EventBasedNetListener::OnConnectionRequest* ConnectionRequestEvent_ = {}, LiteNetLib::EventBasedNetListener::OnDeliveryEvent* DeliveryEvent_ = {}) noexcept : PeerConnectedEvent{PeerConnectedEvent_}, PeerDisconnectedEvent{PeerDisconnectedEvent_}, NetworkErrorEvent{NetworkErrorEvent_}, NetworkReceiveEvent{NetworkReceiveEvent_}, NetworkReceiveUnconnectedEvent{NetworkReceiveUnconnectedEvent_}, NetworkLatencyUpdateEvent{NetworkLatencyUpdateEvent_}, ConnectionRequestEvent{ConnectionRequestEvent_}, DeliveryEvent{DeliveryEvent_} {}
    // Creating interface conversion operator: operator LiteNetLib::INetEventListener
    operator LiteNetLib::INetEventListener() noexcept {
      return *reinterpret_cast<LiteNetLib::INetEventListener*>(this);
    }
    // Creating interface conversion operator: operator LiteNetLib::IDeliveryEventListener
    operator LiteNetLib::IDeliveryEventListener() noexcept {
      return *reinterpret_cast<LiteNetLib::IDeliveryEventListener*>(this);
    }
    // public System.Void add_PeerConnectedEvent(LiteNetLib.EventBasedNetListener/OnPeerConnected value)
    // Offset: 0x1A27DB4
    void add_PeerConnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerConnected* value);
    // public System.Void remove_PeerConnectedEvent(LiteNetLib.EventBasedNetListener/OnPeerConnected value)
    // Offset: 0x1A27E58
    void remove_PeerConnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerConnected* value);
    // public System.Void add_PeerDisconnectedEvent(LiteNetLib.EventBasedNetListener/OnPeerDisconnected value)
    // Offset: 0x1A27EFC
    void add_PeerDisconnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value);
    // public System.Void remove_PeerDisconnectedEvent(LiteNetLib.EventBasedNetListener/OnPeerDisconnected value)
    // Offset: 0x1A27FA0
    void remove_PeerDisconnectedEvent(LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value);
    // public System.Void add_NetworkErrorEvent(LiteNetLib.EventBasedNetListener/OnNetworkError value)
    // Offset: 0x1A28044
    void add_NetworkErrorEvent(LiteNetLib::EventBasedNetListener::OnNetworkError* value);
    // public System.Void remove_NetworkErrorEvent(LiteNetLib.EventBasedNetListener/OnNetworkError value)
    // Offset: 0x1A280E8
    void remove_NetworkErrorEvent(LiteNetLib::EventBasedNetListener::OnNetworkError* value);
    // public System.Void add_NetworkReceiveEvent(LiteNetLib.EventBasedNetListener/OnNetworkReceive value)
    // Offset: 0x1A2818C
    void add_NetworkReceiveEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceive* value);
    // public System.Void remove_NetworkReceiveEvent(LiteNetLib.EventBasedNetListener/OnNetworkReceive value)
    // Offset: 0x1A28230
    void remove_NetworkReceiveEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceive* value);
    // public System.Void add_NetworkReceiveUnconnectedEvent(LiteNetLib.EventBasedNetListener/OnNetworkReceiveUnconnected value)
    // Offset: 0x1A282D4
    void add_NetworkReceiveUnconnectedEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value);
    // public System.Void remove_NetworkReceiveUnconnectedEvent(LiteNetLib.EventBasedNetListener/OnNetworkReceiveUnconnected value)
    // Offset: 0x1A28378
    void remove_NetworkReceiveUnconnectedEvent(LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value);
    // public System.Void add_NetworkLatencyUpdateEvent(LiteNetLib.EventBasedNetListener/OnNetworkLatencyUpdate value)
    // Offset: 0x1A2841C
    void add_NetworkLatencyUpdateEvent(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value);
    // public System.Void remove_NetworkLatencyUpdateEvent(LiteNetLib.EventBasedNetListener/OnNetworkLatencyUpdate value)
    // Offset: 0x1A284C0
    void remove_NetworkLatencyUpdateEvent(LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value);
    // public System.Void add_ConnectionRequestEvent(LiteNetLib.EventBasedNetListener/OnConnectionRequest value)
    // Offset: 0x1A28564
    void add_ConnectionRequestEvent(LiteNetLib::EventBasedNetListener::OnConnectionRequest* value);
    // public System.Void remove_ConnectionRequestEvent(LiteNetLib.EventBasedNetListener/OnConnectionRequest value)
    // Offset: 0x1A28608
    void remove_ConnectionRequestEvent(LiteNetLib::EventBasedNetListener::OnConnectionRequest* value);
    // public System.Void add_DeliveryEvent(LiteNetLib.EventBasedNetListener/OnDeliveryEvent value)
    // Offset: 0x1A286AC
    void add_DeliveryEvent(LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value);
    // public System.Void remove_DeliveryEvent(LiteNetLib.EventBasedNetListener/OnDeliveryEvent value)
    // Offset: 0x1A28750
    void remove_DeliveryEvent(LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value);
    // public System.Void ClearPeerConnectedEvent()
    // Offset: 0x1A287F4
    void ClearPeerConnectedEvent();
    // public System.Void ClearPeerDisconnectedEvent()
    // Offset: 0x1A287FC
    void ClearPeerDisconnectedEvent();
    // public System.Void ClearNetworkErrorEvent()
    // Offset: 0x1A28804
    void ClearNetworkErrorEvent();
    // public System.Void ClearNetworkReceiveEvent()
    // Offset: 0x1A2880C
    void ClearNetworkReceiveEvent();
    // public System.Void ClearNetworkReceiveUnconnectedEvent()
    // Offset: 0x1A28814
    void ClearNetworkReceiveUnconnectedEvent();
    // public System.Void ClearNetworkLatencyUpdateEvent()
    // Offset: 0x1A2881C
    void ClearNetworkLatencyUpdateEvent();
    // public System.Void ClearConnectionRequestEvent()
    // Offset: 0x1A28824
    void ClearConnectionRequestEvent();
    // public System.Void ClearDeliveryEvent()
    // Offset: 0x1A2882C
    void ClearDeliveryEvent();
    // private System.Void LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer peer)
    // Offset: 0x1A28834
    void LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer);
    // private System.Void LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    // Offset: 0x1A28BD8
    void LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketErrorCode)
    // Offset: 0x1A29008
    void LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1A29424
    void LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    // Offset: 0x1A29844
    void LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latency)
    // Offset: 0x1A29C64
    void LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency);
    // private System.Void LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    // Offset: 0x1A2A080
    void LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request);
    // private System.Void LiteNetLib.IDeliveryEventListener.OnMessageDelivered(LiteNetLib.NetPeer peer, System.Object userData)
    // Offset: 0x1A2A424
    void LiteNetLib_IDeliveryEventListener_OnMessageDelivered(LiteNetLib::NetPeer* peer, ::Il2CppObject* userData);
    // public System.Void .ctor()
    // Offset: 0x1A2A81C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventBasedNetListener* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::EventBasedNetListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventBasedNetListener*, creationType>()));
    }
  }; // LiteNetLib.EventBasedNetListener
  #pragma pack(pop)
  static check_size<sizeof(EventBasedNetListener), 72 + sizeof(LiteNetLib::EventBasedNetListener::OnDeliveryEvent*)> __LiteNetLib_EventBasedNetListenerSizeCheck;
  static_assert(sizeof(EventBasedNetListener) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::EventBasedNetListener*, "LiteNetLib", "EventBasedNetListener");
