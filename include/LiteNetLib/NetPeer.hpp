// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ConnectionState
#include "LiteNetLib/ConnectionState.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPacketPool
  class NetPacketPool;
  // Forward declaring type: NetPacket
  class NetPacket;
  // Forward declaring type: BaseChannel
  class BaseChannel;
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetStatistics
  class NetStatistics;
  // Forward declaring type: NetConnectAcceptPacket
  class NetConnectAcceptPacket;
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
  // Forward declaring type: DisconnectResult
  struct DisconnectResult;
  // Forward declaring type: ShutdownResult
  struct ShutdownResult;
  // Forward declaring type: ConnectRequestResult
  struct ConnectRequestResult;
  // Forward declaring type: NetConnectRequestPacket
  class NetConnectRequestPacket;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Autogenerated type: LiteNetLib.NetPeer
  class NetPeer : public ::Il2CppObject {
    public:
    // Nested type: LiteNetLib::NetPeer::IncomingFragments
    class IncomingFragments;
    // private System.Int32 _rtt
    // Offset: 0x10
    int rtt;
    // private System.Int32 _avgRtt
    // Offset: 0x14
    int avgRtt;
    // private System.Int32 _rttCount
    // Offset: 0x18
    int rttCount;
    // private System.Double _resendDelay
    // Offset: 0x20
    double resendDelay;
    // private System.Int32 _pingSendTimer
    // Offset: 0x28
    int pingSendTimer;
    // private System.Int32 _rttResetTimer
    // Offset: 0x2C
    int rttResetTimer;
    // private readonly System.Diagnostics.Stopwatch _pingTimer
    // Offset: 0x30
    System::Diagnostics::Stopwatch* pingTimer;
    // private System.Int32 _timeSinceLastPacket
    // Offset: 0x38
    int timeSinceLastPacket;
    // private System.Int64 _remoteDelta
    // Offset: 0x40
    int64_t remoteDelta;
    // private readonly LiteNetLib.NetPacketPool _packetPool
    // Offset: 0x48
    LiteNetLib::NetPacketPool* packetPool;
    // private readonly System.Object _flushLock
    // Offset: 0x50
    ::Il2CppObject* flushLock;
    // private readonly System.Object _sendLock
    // Offset: 0x58
    ::Il2CppObject* sendLock;
    // private readonly System.Object _shutdownLock
    // Offset: 0x60
    ::Il2CppObject* shutdownLock;
    // LiteNetLib.NetPeer NextPeer
    // Offset: 0x68
    LiteNetLib::NetPeer* NextPeer;
    // LiteNetLib.NetPeer PrevPeer
    // Offset: 0x70
    LiteNetLib::NetPeer* PrevPeer;
    // private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetPacket> _unreliableChannel
    // Offset: 0x78
    System::Collections::Generic::Queue_1<LiteNetLib::NetPacket*>* unreliableChannel;
    // private readonly LiteNetLib.BaseChannel[] _channels
    // Offset: 0x80
    ::Array<LiteNetLib::BaseChannel*>* channels;
    // private LiteNetLib.BaseChannel _headChannel
    // Offset: 0x88
    LiteNetLib::BaseChannel* headChannel;
    // private System.Int32 _mtu
    // Offset: 0x90
    int mtu;
    // private System.Int32 _mtuIdx
    // Offset: 0x94
    int mtuIdx;
    // private System.Boolean _finishMtu
    // Offset: 0x98
    bool finishMtu;
    // private System.Int32 _mtuCheckTimer
    // Offset: 0x9C
    int mtuCheckTimer;
    // private System.Int32 _mtuCheckAttempts
    // Offset: 0xA0
    int mtuCheckAttempts;
    // private readonly System.Object _mtuMutex
    // Offset: 0xA8
    ::Il2CppObject* mtuMutex;
    // private System.UInt16 _fragmentId
    // Offset: 0xB0
    uint16_t fragmentId;
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt16,LiteNetLib.NetPeer/IncomingFragments> _holdedFragments
    // Offset: 0xB8
    System::Collections::Generic::Dictionary_2<uint16_t, LiteNetLib::NetPeer::IncomingFragments*>* holdedFragments;
    // private readonly System.Collections.Generic.Dictionary`2<System.UInt16,System.UInt16> _deliveredFramgnets
    // Offset: 0xC0
    System::Collections::Generic::Dictionary_2<uint16_t, uint16_t>* deliveredFramgnets;
    // private readonly LiteNetLib.NetPacket _mergeData
    // Offset: 0xC8
    LiteNetLib::NetPacket* mergeData;
    // private System.Int32 _mergePos
    // Offset: 0xD0
    int mergePos;
    // private System.Int32 _mergeCount
    // Offset: 0xD4
    int mergeCount;
    // private System.Int32 _connectAttempts
    // Offset: 0xD8
    int connectAttempts;
    // private System.Int32 _connectTimer
    // Offset: 0xDC
    int connectTimer;
    // private System.Int64 _connectTime
    // Offset: 0xE0
    int64_t connectTime;
    // private System.Byte _connectNum
    // Offset: 0xE8
    uint8_t connectNum;
    // private LiteNetLib.ConnectionState _connectionState
    // Offset: 0xE9
    LiteNetLib::ConnectionState connectionState;
    // private LiteNetLib.NetPacket _shutdownPacket
    // Offset: 0xF0
    LiteNetLib::NetPacket* shutdownPacket;
    // private System.Int32 _shutdownTimer
    // Offset: 0xF8
    int shutdownTimer;
    // private readonly LiteNetLib.NetPacket _pingPacket
    // Offset: 0x100
    LiteNetLib::NetPacket* pingPacket;
    // private readonly LiteNetLib.NetPacket _pongPacket
    // Offset: 0x108
    LiteNetLib::NetPacket* pongPacket;
    // private readonly LiteNetLib.NetPacket _connectRequestPacket
    // Offset: 0x110
    LiteNetLib::NetPacket* connectRequestPacket;
    // private readonly LiteNetLib.NetPacket _connectAcceptPacket
    // Offset: 0x118
    LiteNetLib::NetPacket* connectAcceptPacket;
    // public readonly System.Net.IPEndPoint EndPoint
    // Offset: 0x120
    System::Net::IPEndPoint* EndPoint;
    // public readonly LiteNetLib.NetManager NetManager
    // Offset: 0x128
    LiteNetLib::NetManager* NetManager;
    // public readonly System.Int32 Id
    // Offset: 0x130
    int Id;
    // public System.Object Tag
    // Offset: 0x138
    ::Il2CppObject* Tag;
    // public readonly LiteNetLib.NetStatistics Statistics
    // Offset: 0x140
    LiteNetLib::NetStatistics* Statistics;
    // static field const value: static private System.Int32 MtuCheckDelay
    static constexpr const int MtuCheckDelay = 1000;
    // Get static field: static private System.Int32 MtuCheckDelay
    static int _get_MtuCheckDelay();
    // Set static field: static private System.Int32 MtuCheckDelay
    static void _set_MtuCheckDelay(int value);
    // static field const value: static private System.Int32 MaxMtuCheckAttempts
    static constexpr const int MaxMtuCheckAttempts = 4;
    // Get static field: static private System.Int32 MaxMtuCheckAttempts
    static int _get_MaxMtuCheckAttempts();
    // Set static field: static private System.Int32 MaxMtuCheckAttempts
    static void _set_MaxMtuCheckAttempts(int value);
    // static field const value: static private System.Int32 ShutdownDelay
    static constexpr const int ShutdownDelay = 300;
    // Get static field: static private System.Int32 ShutdownDelay
    static int _get_ShutdownDelay();
    // Set static field: static private System.Int32 ShutdownDelay
    static void _set_ShutdownDelay(int value);
    // System.Byte get_ConnectionNum()
    // Offset: 0x1A70320
    uint8_t get_ConnectionNum();
    // private System.Void set_ConnectionNum(System.Byte value)
    // Offset: 0x1A70328
    void set_ConnectionNum(uint8_t value);
    // public LiteNetLib.ConnectionState get_ConnectionState()
    // Offset: 0x1A70378
    LiteNetLib::ConnectionState get_ConnectionState();
    // System.Int64 get_ConnectTime()
    // Offset: 0x1A70380
    int64_t get_ConnectTime();
    // public System.Int32 get_Ping()
    // Offset: 0x1A70388
    int get_Ping();
    // public System.Int32 get_Mtu()
    // Offset: 0x1A7039C
    int get_Mtu();
    // public System.Int64 get_RemoteTimeDelta()
    // Offset: 0x1A703A4
    int64_t get_RemoteTimeDelta();
    // public System.DateTime get_RemoteUtcTime()
    // Offset: 0x1A703AC
    System::DateTime get_RemoteUtcTime();
    // public System.Int32 get_TimeSinceLastPacket()
    // Offset: 0x1A7044C
    int get_TimeSinceLastPacket();
    // System.Double get_ResendDelay()
    // Offset: 0x1A70454
    double get_ResendDelay();
    // System.Void .ctor(LiteNetLib.NetManager netManager, System.Net.IPEndPoint remoteEndPoint, System.Int32 id)
    // Offset: 0x1A6C690
    static NetPeer* New_ctor(LiteNetLib::NetManager* netManager, System::Net::IPEndPoint* remoteEndPoint, int id);
    // private System.Void SetMtu(System.Int32 mtuIdx)
    // Offset: 0x1A7045C
    void SetMtu(int mtuIdx);
    // public System.Int32 GetPacketsCountInReliableQueue(System.Byte channelNumber, System.Boolean ordered)
    // Offset: 0x1A70520
    int GetPacketsCountInReliableQueue(uint8_t channelNumber, bool ordered);
    // private LiteNetLib.BaseChannel CreateChannel(System.Byte idx)
    // Offset: 0x1A705E0
    LiteNetLib::BaseChannel* CreateChannel(uint8_t idx);
    // System.Void .ctor(LiteNetLib.NetManager netManager, System.Net.IPEndPoint remoteEndPoint, System.Int32 id, System.Byte connectNum, LiteNetLib.Utils.NetDataWriter connectData)
    // Offset: 0x1A6F3AC
    static NetPeer* New_ctor(LiteNetLib::NetManager* netManager, System::Net::IPEndPoint* remoteEndPoint, int id, uint8_t connectNum, LiteNetLib::Utils::NetDataWriter* connectData);
    // System.Void .ctor(LiteNetLib.NetManager netManager, System.Net.IPEndPoint remoteEndPoint, System.Int32 id, System.Int64 connectId, System.Byte connectNum)
    // Offset: 0x1A6C9F4
    static NetPeer* New_ctor(LiteNetLib::NetManager* netManager, System::Net::IPEndPoint* remoteEndPoint, int id, int64_t connectId, uint8_t connectNum);
    // System.Void Reject(System.Int64 connectionId, System.Byte connectionNumber, System.Byte[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x1A6C9D8
    void Reject(int64_t connectionId, uint8_t connectionNumber, ::Array<uint8_t>* data, int start, int length);
    // System.Boolean ProcessConnectAccept(LiteNetLib.NetConnectAcceptPacket packet)
    // Offset: 0x1A6D188
    bool ProcessConnectAccept(LiteNetLib::NetConnectAcceptPacket* packet);
    // public System.Int32 GetMaxSinglePacketSize(LiteNetLib.DeliveryMethod options)
    // Offset: 0x1A709F8
    int GetMaxSinglePacketSize(LiteNetLib::DeliveryMethod options);
    // public System.Void SendWithDeliveryEvent(System.Byte[] data, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod, System.Object userData)
    // Offset: 0x1A70A7C
    void SendWithDeliveryEvent(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData);
    // public System.Void SendWithDeliveryEvent(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod, System.Object userData)
    // Offset: 0x1A71084
    void SendWithDeliveryEvent(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData);
    // public System.Void SendWithDeliveryEvent(LiteNetLib.Utils.NetDataWriter dataWriter, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod, System.Object userData)
    // Offset: 0x1A7115C
    void SendWithDeliveryEvent(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData);
    // public System.Void Send(System.Byte[] data, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1A7122C
    void Send(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(LiteNetLib.Utils.NetDataWriter dataWriter, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1A71254
    void Send(LiteNetLib::Utils::NetDataWriter* dataWriter, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(System.Byte[] data, System.Int32 start, System.Int32 length, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1A71284
    void Send(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options);
    // public System.Void Send(System.Byte[] data, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1A71294
    void Send(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(LiteNetLib.Utils.NetDataWriter dataWriter, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1A712BC
    void Send(LiteNetLib::Utils::NetDataWriter* dataWriter, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1A6DB8C
    void Send(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void SendInternal(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod deliveryMethod, System.Object userData)
    // Offset: 0x1A70B4C
    void SendInternal(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod deliveryMethod, ::Il2CppObject* userData);
    // public System.Void Disconnect(System.Byte[] data)
    // Offset: 0x1A712F4
    void Disconnect(::Array<uint8_t>* data);
    // public System.Void Disconnect(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x1A71318
    void Disconnect(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Disconnect(System.Byte[] data, System.Int32 start, System.Int32 count)
    // Offset: 0x1A7133C
    void Disconnect(::Array<uint8_t>* data, int start, int count);
    // public System.Void Disconnect()
    // Offset: 0x1A71388
    void Disconnect();
    // LiteNetLib.DisconnectResult ProcessDisconnect(LiteNetLib.NetPacket packet)
    // Offset: 0x1A6D0A4
    LiteNetLib::DisconnectResult ProcessDisconnect(LiteNetLib::NetPacket* packet);
    // LiteNetLib.ShutdownResult Shutdown(System.Byte[] data, System.Int32 start, System.Int32 length, System.Boolean force)
    // Offset: 0x1A6ACBC
    LiteNetLib::ShutdownResult Shutdown(::Array<uint8_t>* data, int start, int length, bool force);
    // private System.Void UpdateRoundTripTime(System.Int32 roundTripTime)
    // Offset: 0x1A713D0
    void UpdateRoundTripTime(int roundTripTime);
    // System.Void AddReliablePacket(LiteNetLib.DeliveryMethod method, LiteNetLib.NetPacket p)
    // Offset: 0x1A7140C
    void AddReliablePacket(LiteNetLib::DeliveryMethod method, LiteNetLib::NetPacket* p);
    // private System.Void ProcessMtuPacket(LiteNetLib.NetPacket packet)
    // Offset: 0x1A71820
    void ProcessMtuPacket(LiteNetLib::NetPacket* packet);
    // private System.Void UpdateMtuLogic(System.Int32 deltaTime)
    // Offset: 0x1A71C10
    void UpdateMtuLogic(int deltaTime);
    // LiteNetLib.ConnectRequestResult ProcessConnectRequest(LiteNetLib.NetConnectRequestPacket connRequest)
    // Offset: 0x1A6CD28
    LiteNetLib::ConnectRequestResult ProcessConnectRequest(LiteNetLib::NetConnectRequestPacket* connRequest);
    // System.Void ProcessPacket(LiteNetLib.NetPacket packet)
    // Offset: 0x1A6D1F8
    void ProcessPacket(LiteNetLib::NetPacket* packet);
    // private System.Void SendMerged()
    // Offset: 0x1A71EA8
    void SendMerged();
    // System.Void SendUserData(LiteNetLib.NetPacket packet)
    // Offset: 0x1A71F44
    void SendUserData(LiteNetLib::NetPacket* packet);
    // public System.Void Flush()
    // Offset: 0x1A6EC14
    void Flush();
    // System.Void Update(System.Int32 deltaTime)
    // Offset: 0x1A6B96C
    void Update(int deltaTime);
    // System.Void RecycleAndDeliver(LiteNetLib.NetPacket packet)
    // Offset: 0x1A72054
    void RecycleAndDeliver(LiteNetLib::NetPacket* packet);
  }; // LiteNetLib.NetPeer
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetPeer*, "LiteNetLib", "NetPeer");
#pragma pack(pop)
