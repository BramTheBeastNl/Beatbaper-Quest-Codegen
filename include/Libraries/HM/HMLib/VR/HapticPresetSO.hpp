// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Libraries.HM.HMLib.VR
namespace Libraries::HM::HMLib::VR {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: Libraries.HM.HMLib.VR.HapticPresetSO
  // [TokenAttribute] Offset: FFFFFFFF
  class HapticPresetSO : public UnityEngine::ScriptableObject {
    public:
    // public System.Single _duration
    // Size: 0x4
    // Offset: 0x18
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _strength
    // Size: 0x4
    // Offset: 0x1C
    float strength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _frequency
    // Size: 0x4
    // Offset: 0x20
    float frequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean _continuous
    // Size: 0x1
    // Offset: 0x24
    bool continuous;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HapticPresetSO
    HapticPresetSO(float duration_ = {}, float strength_ = {}, float frequency_ = {}, bool continuous_ = {}) noexcept : duration{duration_}, strength{strength_}, frequency{frequency_}, continuous{continuous_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field: public System.Single _duration
    float _get__duration();
    // Set instance field: public System.Single _duration
    void _set__duration(float value);
    // Get instance field: public System.Single _strength
    float _get__strength();
    // Set instance field: public System.Single _strength
    void _set__strength(float value);
    // Get instance field: public System.Single _frequency
    float _get__frequency();
    // Set instance field: public System.Single _frequency
    void _set__frequency(float value);
    // Get instance field: public System.Boolean _continuous
    bool _get__continuous();
    // Set instance field: public System.Boolean _continuous
    void _set__continuous(bool value);
    // public System.Void CopyFrom(Libraries.HM.HMLib.VR.HapticPresetSO hapticPreset)
    // Offset: 0x1266260
    void CopyFrom(Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset);
    // public System.Void .ctor()
    // Offset: 0x1266294
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HapticPresetSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Libraries::HM::HMLib::VR::HapticPresetSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HapticPresetSO*, creationType>()));
    }
  }; // Libraries.HM.HMLib.VR.HapticPresetSO
  #pragma pack(pop)
  static check_size<sizeof(HapticPresetSO), 36 + sizeof(bool)> __Libraries_HM_HMLib_VR_HapticPresetSOSizeCheck;
  static_assert(sizeof(HapticPresetSO) == 0x25);
}
DEFINE_IL2CPP_ARG_TYPE(Libraries::HM::HMLib::VR::HapticPresetSO*, "Libraries.HM.HMLib.VR", "HapticPresetSO");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Libraries::HM::HMLib::VR::HapticPresetSO::*)(Libraries::HM::HMLib::VR::HapticPresetSO*)>(&Libraries::HM::HMLib::VR::HapticPresetSO::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* hapticPreset = &::il2cpp_utils::GetClassFromName("Libraries.HM.HMLib.VR", "HapticPresetSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Libraries::HM::HMLib::VR::HapticPresetSO*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hapticPreset});
  }
};
// Writing MetadataGetter for method: Libraries::HM::HMLib::VR::HapticPresetSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
