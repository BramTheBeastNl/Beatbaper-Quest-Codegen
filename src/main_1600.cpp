// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SerializationHelpers
#include "GlobalNamespace/SerializationHelpers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SerializationHelpers::DeserializeData
// Il2CppName: DeserializeData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SerializationHelpers::SerializeObject
// Il2CppName: SerializeObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SerializationHelpers::DeserializeDataFromPlayerPrefs
// Il2CppName: DeserializeDataFromPlayerPrefs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SerializationHelpers::SerializeObjectIntoPlayerPrefs
// Il2CppName: SerializeObjectIntoPlayerPrefs
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SerializationHelpers::DeserializeDataFromFile
// Il2CppName: DeserializeDataFromFile
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SerializationHelpers::SerializeObjectToFile
// Il2CppName: SerializeObjectToFile
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SerializationHelpers::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SerializationHelpers::*)()>(&SerializationHelpers::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SerializationHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SerializationHelpers::*)()>(&SerializationHelpers::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SerializationHelpers*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SharedCoroutineStarter
#include "GlobalNamespace/SharedCoroutineStarter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SharedCoroutineStarter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SharedCoroutineStarter::*)()>(&SharedCoroutineStarter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SharedCoroutineStarter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SharedCoroutineStarter::*)()>(&SharedCoroutineStarter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SharedCoroutineStarter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShowHideAnimationController
#include "GlobalNamespace/ShowHideAnimationController.hpp"
// Including type: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9
#include "GlobalNamespace/ShowHideAnimationController_-DeactivateSelfAfterDelayCoroutine-d__9.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowHideAnimationController.set_Show
void GlobalNamespace::ShowHideAnimationController::set_Show(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::set_Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ShowHideAnimationController.get_Show
bool GlobalNamespace::ShowHideAnimationController::get_Show() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::get_Show");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Show", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController.Awake
void GlobalNamespace::ShowHideAnimationController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController.DeactivateSelfAfterDelayCoroutine
System::Collections::IEnumerator* GlobalNamespace::ShowHideAnimationController::DeactivateSelfAfterDelayCoroutine(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::DeactivateSelfAfterDelayCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateSelfAfterDelayCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Writing MetadataGetter for method: ShowHideAnimationController::set_Show
// Il2CppName: set_Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::*)(bool)>(&ShowHideAnimationController::set_Show)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController*), "set_Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::get_Show
// Il2CppName: get_Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowHideAnimationController::*)()>(&ShowHideAnimationController::get_Show)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController*), "get_Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::*)()>(&ShowHideAnimationController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::DeactivateSelfAfterDelayCoroutine
// Il2CppName: DeactivateSelfAfterDelayCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (ShowHideAnimationController::*)(float)>(&ShowHideAnimationController::DeactivateSelfAfterDelayCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController*), "DeactivateSelfAfterDelayCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::*)()>(&ShowHideAnimationController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::*)()>(&ShowHideAnimationController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9
#include "GlobalNamespace/ShowHideAnimationController_-DeactivateSelfAfterDelayCoroutine-d__9.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.IDisposable.Dispose
void GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.MoveNext
bool GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowHideAnimationController/<DeactivateSelfAfterDelayCoroutine>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)(int)>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)(int)>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)()>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)()>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)()>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)()>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::*)()>(&ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowHideAnimationController::$DeactivateSelfAfterDelayCoroutine$d__9*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleFileLogger
#include "GlobalNamespace/SimpleFileLogger.hpp"
// Including type: SimpleFileLogger/MonoLogger
#include "GlobalNamespace/SimpleFileLogger_MonoLogger.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kFilename
::Il2CppString* GlobalNamespace::SimpleFileLogger::_get_kFilename() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::_get_kFilename");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "SimpleFileLogger", "kFilename"));
}
// Autogenerated static field setter
// Set static field: static private System.String kFilename
void GlobalNamespace::SimpleFileLogger::_set_kFilename(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::_set_kFilename");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleFileLogger", "kFilename", value));
}
// Autogenerated static field getter
// Get static field: static private SimpleFileLogger/MonoLogger _monoLogger
GlobalNamespace::SimpleFileLogger::MonoLogger* GlobalNamespace::SimpleFileLogger::_get__monoLogger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::_get__monoLogger");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SimpleFileLogger::MonoLogger*>("", "SimpleFileLogger", "_monoLogger"));
}
// Autogenerated static field setter
// Set static field: static private SimpleFileLogger/MonoLogger _monoLogger
void GlobalNamespace::SimpleFileLogger::_set__monoLogger(GlobalNamespace::SimpleFileLogger::MonoLogger* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::_set__monoLogger");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleFileLogger", "_monoLogger", value));
}
// Autogenerated method: SimpleFileLogger.get_monoLogger
GlobalNamespace::SimpleFileLogger::MonoLogger* GlobalNamespace::SimpleFileLogger::get_monoLogger() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::get_monoLogger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "get_monoLogger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SimpleFileLogger::MonoLogger*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: SimpleFileLogger.Log
void GlobalNamespace::SimpleFileLogger::Log(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, text);
}
// Autogenerated method: SimpleFileLogger.LogVector
void GlobalNamespace::SimpleFileLogger::LogVector(::Il2CppString* description, UnityEngine::Vector3 vec) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::LogVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "LogVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(description), ::il2cpp_utils::ExtractType(vec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, description, vec);
}
// Autogenerated method: SimpleFileLogger.Clear
void GlobalNamespace::SimpleFileLogger::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SimpleFileLogger", "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SimpleFileLogger::get_monoLogger
// Il2CppName: get_monoLogger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SimpleFileLogger::MonoLogger* (*)()>(&SimpleFileLogger::get_monoLogger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger*), "get_monoLogger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&SimpleFileLogger::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::LogVector
// Il2CppName: LogVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, UnityEngine::Vector3)>(&SimpleFileLogger::LogVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger*), "LogVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SimpleFileLogger::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::*)()>(&SimpleFileLogger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::*)()>(&SimpleFileLogger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleFileLogger/MonoLogger
#include "GlobalNamespace/SimpleFileLogger_MonoLogger.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleFileLogger/MonoLogger.OnDestroy
void GlobalNamespace::SimpleFileLogger::MonoLogger::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::MonoLogger::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleFileLogger/MonoLogger.Log
void GlobalNamespace::SimpleFileLogger::MonoLogger::Log(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::MonoLogger::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: SimpleFileLogger/MonoLogger.Clear
void GlobalNamespace::SimpleFileLogger::MonoLogger::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleFileLogger::MonoLogger::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleFileLogger::MonoLogger::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::MonoLogger::*)()>(&SimpleFileLogger::MonoLogger::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger::MonoLogger*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::MonoLogger::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::MonoLogger::*)(::Il2CppString*)>(&SimpleFileLogger::MonoLogger::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger::MonoLogger*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::MonoLogger::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::MonoLogger::*)()>(&SimpleFileLogger::MonoLogger::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger::MonoLogger*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleFileLogger::MonoLogger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::MonoLogger::*)()>(&SimpleFileLogger::MonoLogger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger::MonoLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleFileLogger::MonoLogger::*)()>(&SimpleFileLogger::MonoLogger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleFileLogger::MonoLogger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleShadowController
#include "GlobalNamespace/SimpleShadowController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleShadowController.Start
void GlobalNamespace::SimpleShadowController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleShadowController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleShadowController.LateUpdate
void GlobalNamespace::SimpleShadowController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleShadowController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleShadowController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleShadowController::*)()>(&SimpleShadowController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleShadowController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleShadowController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleShadowController::*)()>(&SimpleShadowController::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleShadowController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleShadowController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleShadowController::*)()>(&SimpleShadowController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleShadowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleShadowController::*)()>(&SimpleShadowController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleShadowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SleepRigidbody2DWhenInvisible
#include "GlobalNamespace/SleepRigidbody2DWhenInvisible.hpp"
// Including type: UnityEngine.Rigidbody2D
#include "UnityEngine/Rigidbody2D.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SleepRigidbody2DWhenInvisible.Awake
void GlobalNamespace::SleepRigidbody2DWhenInvisible::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SleepRigidbody2DWhenInvisible::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SleepRigidbody2DWhenInvisible.OnBecameInvisible
void GlobalNamespace::SleepRigidbody2DWhenInvisible::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SleepRigidbody2DWhenInvisible::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SleepRigidbody2DWhenInvisible::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SleepRigidbody2DWhenInvisible::*)()>(&SleepRigidbody2DWhenInvisible::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SleepRigidbody2DWhenInvisible*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SleepRigidbody2DWhenInvisible::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SleepRigidbody2DWhenInvisible::*)()>(&SleepRigidbody2DWhenInvisible::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SleepRigidbody2DWhenInvisible*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SleepRigidbody2DWhenInvisible::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SleepRigidbody2DWhenInvisible::*)()>(&SleepRigidbody2DWhenInvisible::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SleepRigidbody2DWhenInvisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SleepRigidbody2DWhenInvisible::*)()>(&SleepRigidbody2DWhenInvisible::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SleepRigidbody2DWhenInvisible*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Snap
#include "GlobalNamespace/Snap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Snap.SnapPosition
void GlobalNamespace::Snap::SnapPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Snap::SnapPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SnapPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Snap::SnapPosition
// Il2CppName: SnapPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Snap::*)()>(&Snap::SnapPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Snap*), "SnapPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Snap::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Snap::*)()>(&Snap::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Snap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Snap::*)()>(&Snap::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Snap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StringBuilderExtension
#include "GlobalNamespace/StringBuilderExtension.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xDE38D0
// Autogenerated static field getter
// Get static field: static private System.Char[] charToInt
::Array<::Il2CppChar>* GlobalNamespace::StringBuilderExtension::_get_charToInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringBuilderExtension::_get_charToInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppChar>*>("", "StringBuilderExtension", "charToInt"));
}
// Autogenerated static field setter
// Set static field: static private System.Char[] charToInt
void GlobalNamespace::StringBuilderExtension::_set_charToInt(::Array<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringBuilderExtension::_set_charToInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StringBuilderExtension", "charToInt", value));
}
// Autogenerated method: StringBuilderExtension.Swap
void GlobalNamespace::StringBuilderExtension::Swap(System::Text::StringBuilder* sb, int startIndex, int endIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringBuilderExtension::Swap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", "Swap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sb, startIndex, endIndex);
}
// Autogenerated method: StringBuilderExtension.AppendNumber
void GlobalNamespace::StringBuilderExtension::AppendNumber(System::Text::StringBuilder* sb, int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringBuilderExtension::AppendNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", "AppendNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sb, number);
}
// Autogenerated method: StringBuilderExtension.AppendNumber
void GlobalNamespace::StringBuilderExtension::AppendNumber(System::Text::StringBuilder* sb, uint unumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringBuilderExtension::AppendNumber");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", "AppendNumber", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sb), ::il2cpp_utils::ExtractType(unumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sb, unumber);
}
// Autogenerated method: StringBuilderExtension..cctor
void GlobalNamespace::StringBuilderExtension::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringBuilderExtension::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringBuilderExtension", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: StringBuilderExtension::Swap
// Il2CppName: Swap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, int, int)>(&StringBuilderExtension::Swap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilderExtension*), "Swap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilderExtension::AppendNumber
// Il2CppName: AppendNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, int)>(&StringBuilderExtension::AppendNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilderExtension*), "AppendNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StringBuilderExtension::AppendNumber
// Il2CppName: AppendNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, uint)>(&StringBuilderExtension::AppendNumber)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilderExtension*), "AppendNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: StringBuilderExtension::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StringBuilderExtension::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringBuilderExtension*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StringExtensions
#include "GlobalNamespace/StringExtensions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StringExtensions.Truncate
::Il2CppString* GlobalNamespace::StringExtensions::Truncate(::Il2CppString* s, int length, bool appendEllipsis) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StringExtensions::Truncate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "StringExtensions", "Truncate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(appendEllipsis)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, length, appendEllipsis);
}
// Writing MetadataGetter for method: StringExtensions::Truncate
// Il2CppName: Truncate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, int, bool)>(&StringExtensions::Truncate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringExtensions*), "Truncate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TagPropertyAttribute
#include "GlobalNamespace/TagPropertyAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TagPropertyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TagPropertyAttribute::*)()>(&TagPropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TagPropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TagPropertyAttribute::*)()>(&TagPropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TagPropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TimeExtensions
#include "GlobalNamespace/TimeExtensions.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TimeExtensions.MinSecDurationText
::Il2CppString* GlobalNamespace::TimeExtensions::MinSecDurationText(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::MinSecDurationText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "MinSecDurationText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, duration);
}
// Autogenerated method: TimeExtensions.MinSecMillisecDurationText
::Il2CppString* GlobalNamespace::TimeExtensions::MinSecMillisecDurationText(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::MinSecMillisecDurationText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "MinSecMillisecDurationText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, duration);
}
// Autogenerated method: TimeExtensions.SecondsToDays
int GlobalNamespace::TimeExtensions::SecondsToDays(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::SecondsToDays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToDays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.SecondsToHours
int GlobalNamespace::TimeExtensions::SecondsToHours(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::SecondsToHours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToHours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.SecondsToMinutes
int GlobalNamespace::TimeExtensions::SecondsToMinutes(int time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::SecondsToMinutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "SecondsToMinutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.DaysToSeconds
int GlobalNamespace::TimeExtensions::DaysToSeconds(int days) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::DaysToSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "DaysToSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(days)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, days);
}
// Autogenerated method: TimeExtensions.HoursToSeconds
int GlobalNamespace::TimeExtensions::HoursToSeconds(int hours) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::HoursToSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "HoursToSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hours)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hours);
}
// Autogenerated method: TimeExtensions.MinutesToSeconds
int GlobalNamespace::TimeExtensions::MinutesToSeconds(int minutes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::MinutesToSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "MinutesToSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minutes)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, minutes);
}
// Autogenerated method: TimeExtensions.Hours
int GlobalNamespace::TimeExtensions::Hours(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::Hours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Hours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.Minutes
int GlobalNamespace::TimeExtensions::Minutes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::Minutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Minutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.Seconds
int GlobalNamespace::TimeExtensions::Seconds(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::Seconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Seconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.Milliseconds
int GlobalNamespace::TimeExtensions::Milliseconds(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::Milliseconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "Milliseconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalDays
int GlobalNamespace::TimeExtensions::TotalDays(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::TotalDays");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalDays", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalHours
int GlobalNamespace::TimeExtensions::TotalHours(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::TotalHours");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalHours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalMinutes
int GlobalNamespace::TimeExtensions::TotalMinutes(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::TotalMinutes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalMinutes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.TotalSeconds
int GlobalNamespace::TimeExtensions::TotalSeconds(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::TotalSeconds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "TotalSeconds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, time);
}
// Autogenerated method: TimeExtensions.ToUnixTime
int64_t GlobalNamespace::TimeExtensions::ToUnixTime(System::DateTime dateTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::ToUnixTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "ToUnixTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dateTime)})));
  return ::il2cpp_utils::RunMethodThrow<int64_t, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dateTime);
}
// Autogenerated method: TimeExtensions.AsUnixTime
System::DateTime GlobalNamespace::TimeExtensions::AsUnixTime(int64_t unixTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimeExtensions::AsUnixTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TimeExtensions", "AsUnixTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unixTime)})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unixTime);
}
// Writing MetadataGetter for method: TimeExtensions::MinSecDurationText
// Il2CppName: MinSecDurationText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(float)>(&TimeExtensions::MinSecDurationText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "MinSecDurationText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::MinSecMillisecDurationText
// Il2CppName: MinSecMillisecDurationText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(float)>(&TimeExtensions::MinSecMillisecDurationText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "MinSecMillisecDurationText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::SecondsToDays
// Il2CppName: SecondsToDays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&TimeExtensions::SecondsToDays)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "SecondsToDays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::SecondsToHours
// Il2CppName: SecondsToHours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&TimeExtensions::SecondsToHours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "SecondsToHours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::SecondsToMinutes
// Il2CppName: SecondsToMinutes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&TimeExtensions::SecondsToMinutes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "SecondsToMinutes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::DaysToSeconds
// Il2CppName: DaysToSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&TimeExtensions::DaysToSeconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "DaysToSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::HoursToSeconds
// Il2CppName: HoursToSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&TimeExtensions::HoursToSeconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "HoursToSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::MinutesToSeconds
// Il2CppName: MinutesToSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&TimeExtensions::MinutesToSeconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "MinutesToSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::Hours
// Il2CppName: Hours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::Hours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "Hours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::Minutes
// Il2CppName: Minutes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::Minutes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "Minutes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::Seconds
// Il2CppName: Seconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::Seconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "Seconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::Milliseconds
// Il2CppName: Milliseconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::Milliseconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "Milliseconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::TotalDays
// Il2CppName: TotalDays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::TotalDays)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "TotalDays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::TotalHours
// Il2CppName: TotalHours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::TotalHours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "TotalHours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::TotalMinutes
// Il2CppName: TotalMinutes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::TotalMinutes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "TotalMinutes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::TotalSeconds
// Il2CppName: TotalSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&TimeExtensions::TotalSeconds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "TotalSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::ToUnixTime
// Il2CppName: ToUnixTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(System::DateTime)>(&TimeExtensions::ToUnixTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "ToUnixTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: TimeExtensions::AsUnixTime
// Il2CppName: AsUnixTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)(int64_t)>(&TimeExtensions::AsUnixTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimeExtensions*), "AsUnixTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TransformExtensions
#include "GlobalNamespace/TransformExtensions.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TransformExtensions.InverseTransformRotation
UnityEngine::Quaternion GlobalNamespace::TransformExtensions::InverseTransformRotation(UnityEngine::Transform* trans, UnityEngine::Quaternion worldRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TransformExtensions::InverseTransformRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "TransformExtensions", "InverseTransformRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trans), ::il2cpp_utils::ExtractType(worldRotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, trans, worldRotation);
}
// Writing MetadataGetter for method: TransformExtensions::InverseTransformRotation
// Il2CppName: InverseTransformRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Transform*, UnityEngine::Quaternion)>(&TransformExtensions::InverseTransformRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TransformExtensions*), "InverseTransformRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TriggerChecker
#include "GlobalNamespace/TriggerChecker.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TriggerChecker.OnTriggerEnter
void GlobalNamespace::TriggerChecker::OnTriggerEnter(UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TriggerChecker::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TriggerChecker.OnTriggerExit
void GlobalNamespace::TriggerChecker::OnTriggerExit(UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TriggerChecker::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, other);
}
// Autogenerated method: TriggerChecker.OnTriggerStay
void GlobalNamespace::TriggerChecker::OnTriggerStay(UnityEngine::Collider* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TriggerChecker::OnTriggerStay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerStay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, other);
}
// Writing MetadataGetter for method: TriggerChecker::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TriggerChecker::*)(UnityEngine::Collider*)>(&TriggerChecker::OnTriggerEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TriggerChecker*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: TriggerChecker::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TriggerChecker::*)(UnityEngine::Collider*)>(&TriggerChecker::OnTriggerExit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TriggerChecker*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: TriggerChecker::OnTriggerStay
// Il2CppName: OnTriggerStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TriggerChecker::*)(UnityEngine::Collider*)>(&TriggerChecker::OnTriggerStay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TriggerChecker*), "OnTriggerStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: TriggerChecker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TriggerChecker::*)()>(&TriggerChecker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TriggerChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TriggerChecker::*)()>(&TriggerChecker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TriggerChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TupleListExtensions
#include "GlobalNamespace/TupleListExtensions.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: System.Tuple`3
#include "System/Tuple_3.hpp"
// Including type: System.Tuple`4
#include "System/Tuple_4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TupleListExtensions::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TupleListExtensions::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TupleListExtensions::Add
// Il2CppName: Add
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TweenPosition
#include "GlobalNamespace/TweenPosition.hpp"
// Including type: TweenPosition/<AnimateToNewPosCoroutine>d__11
#include "GlobalNamespace/TweenPosition_-AnimateToNewPosCoroutine-d__11.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TweenPosition.set_TargetPos
void GlobalNamespace::TweenPosition::set_TargetPos(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::set_TargetPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TargetPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TweenPosition.get_TargetPos
UnityEngine::Vector3 GlobalNamespace::TweenPosition::get_TargetPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::get_TargetPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TargetPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition.Awake
void GlobalNamespace::TweenPosition::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition.AnimateToNewPos
void GlobalNamespace::TweenPosition::AnimateToNewPos(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::AnimateToNewPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToNewPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: TweenPosition.AnimateToNewPosCoroutine
System::Collections::IEnumerator* GlobalNamespace::TweenPosition::AnimateToNewPosCoroutine(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::AnimateToNewPosCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AnimateToNewPosCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, pos);
}
// Writing MetadataGetter for method: TweenPosition::set_TargetPos
// Il2CppName: set_TargetPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::*)(UnityEngine::Vector3)>(&TweenPosition::set_TargetPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), "set_TargetPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TweenPosition::get_TargetPos
// Il2CppName: get_TargetPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TweenPosition::*)()>(&TweenPosition::get_TargetPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), "get_TargetPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TweenPosition::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::*)()>(&TweenPosition::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TweenPosition::AnimateToNewPos
// Il2CppName: AnimateToNewPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::*)(UnityEngine::Vector3)>(&TweenPosition::AnimateToNewPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), "AnimateToNewPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TweenPosition::AnimateToNewPosCoroutine
// Il2CppName: AnimateToNewPosCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TweenPosition::*)(UnityEngine::Vector3)>(&TweenPosition::AnimateToNewPosCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), "AnimateToNewPosCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TweenPosition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::*)()>(&TweenPosition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::*)()>(&TweenPosition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TweenPosition/<AnimateToNewPosCoroutine>d__11
#include "GlobalNamespace/TweenPosition_-AnimateToNewPosCoroutine-d__11.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.IDisposable.Dispose
void GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.MoveNext
bool GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.Collections.IEnumerator.Reset
void GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TweenPosition/<AnimateToNewPosCoroutine>d__11.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TweenPosition::$AnimateToNewPosCoroutine$d__11::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TweenPosition::$AnimateToNewPosCoroutine$d__11::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)(int)>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)(int)>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TweenPosition::$AnimateToNewPosCoroutine$d__11::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)()>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TweenPosition::$AnimateToNewPosCoroutine$d__11::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)()>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)()>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)()>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TweenPosition::$AnimateToNewPosCoroutine$d__11::*)()>(&TweenPosition::$AnimateToNewPosCoroutine$d__11::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TweenPosition::$AnimateToNewPosCoroutine$d__11*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VFXAnimationEvents
#include "GlobalNamespace/VFXAnimationEvents.hpp"
// Including type: VFXAnimationEvents/VFXAnimationEvent
#include "GlobalNamespace/VFXAnimationEvents_VFXAnimationEvent.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VFXAnimationEvents.add_animationDidPauseEvent
void GlobalNamespace::VFXAnimationEvents::add_animationDidPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::add_animationDidPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_animationDidPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.remove_animationDidPauseEvent
void GlobalNamespace::VFXAnimationEvents::remove_animationDidPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::remove_animationDidPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_animationDidPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.add_spawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::add_spawnCharacterEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::add_spawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_spawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.remove_spawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::remove_spawnCharacterEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::remove_spawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_spawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.add_despawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::add_despawnCharacterEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::add_despawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_despawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.remove_despawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::remove_despawnCharacterEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::remove_despawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_despawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VFXAnimationEvents.PlayEvent
void GlobalNamespace::VFXAnimationEvents::PlayEvent(::Il2CppString* eventName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::PlayEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventName);
}
// Autogenerated method: VFXAnimationEvents.PauseAnimation
void GlobalNamespace::VFXAnimationEvents::PauseAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::PauseAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents.SpawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::SpawnCharacterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::SpawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents.DeSpawnCharacterEvent
void GlobalNamespace::VFXAnimationEvents::DeSpawnCharacterEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::DeSpawnCharacterEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeSpawnCharacterEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents.ResumeAnimation
void GlobalNamespace::VFXAnimationEvents::ResumeAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::ResumeAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VFXAnimationEvents::add_animationDidPauseEvent
// Il2CppName: add_animationDidPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(System::Action*)>(&VFXAnimationEvents::add_animationDidPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "add_animationDidPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::remove_animationDidPauseEvent
// Il2CppName: remove_animationDidPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(System::Action*)>(&VFXAnimationEvents::remove_animationDidPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "remove_animationDidPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::add_spawnCharacterEvent
// Il2CppName: add_spawnCharacterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(System::Action*)>(&VFXAnimationEvents::add_spawnCharacterEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "add_spawnCharacterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::remove_spawnCharacterEvent
// Il2CppName: remove_spawnCharacterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(System::Action*)>(&VFXAnimationEvents::remove_spawnCharacterEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "remove_spawnCharacterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::add_despawnCharacterEvent
// Il2CppName: add_despawnCharacterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(System::Action*)>(&VFXAnimationEvents::add_despawnCharacterEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "add_despawnCharacterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::remove_despawnCharacterEvent
// Il2CppName: remove_despawnCharacterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(System::Action*)>(&VFXAnimationEvents::remove_despawnCharacterEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "remove_despawnCharacterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::PlayEvent
// Il2CppName: PlayEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)(::Il2CppString*)>(&VFXAnimationEvents::PlayEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "PlayEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::PauseAnimation
// Il2CppName: PauseAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)()>(&VFXAnimationEvents::PauseAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "PauseAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::SpawnCharacterEvent
// Il2CppName: SpawnCharacterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)()>(&VFXAnimationEvents::SpawnCharacterEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "SpawnCharacterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::DeSpawnCharacterEvent
// Il2CppName: DeSpawnCharacterEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)()>(&VFXAnimationEvents::DeSpawnCharacterEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "DeSpawnCharacterEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::ResumeAnimation
// Il2CppName: ResumeAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)()>(&VFXAnimationEvents::ResumeAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), "ResumeAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)()>(&VFXAnimationEvents::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::*)()>(&VFXAnimationEvents::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VFXAnimationEvents/VFXAnimationEvent
#include "GlobalNamespace/VFXAnimationEvents_VFXAnimationEvent.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VFXAnimationEvents/VFXAnimationEvent.get_name
::Il2CppString* GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: VFXAnimationEvents/VFXAnimationEvent.get_particleSystems
::Array<UnityEngine::ParticleSystem*>* GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXAnimationEvents::VFXAnimationEvent::get_particleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_particleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::ParticleSystem*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VFXAnimationEvents::VFXAnimationEvent::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (VFXAnimationEvents::VFXAnimationEvent::*)()>(&VFXAnimationEvents::VFXAnimationEvent::get_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents::VFXAnimationEvent*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::VFXAnimationEvent::get_particleSystems
// Il2CppName: get_particleSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::ParticleSystem*>* (VFXAnimationEvents::VFXAnimationEvent::*)()>(&VFXAnimationEvents::VFXAnimationEvent::get_particleSystems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents::VFXAnimationEvent*), "get_particleSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXAnimationEvents::VFXAnimationEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::VFXAnimationEvent::*)()>(&VFXAnimationEvents::VFXAnimationEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents::VFXAnimationEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXAnimationEvents::VFXAnimationEvent::*)()>(&VFXAnimationEvents::VFXAnimationEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXAnimationEvents::VFXAnimationEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VFXController
#include "GlobalNamespace/VFXController.hpp"
// Including type: VFXController/<MainCoroutine>d__9
#include "GlobalNamespace/VFXController_-MainCoroutine-d__9.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VFXController.get_animation
UnityEngine::Animation* GlobalNamespace::VFXController::get_animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::get_animation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animation*, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.get_particleSystems
::Array<UnityEngine::ParticleSystem*>* GlobalNamespace::VFXController::get_particleSystems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::get_particleSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_particleSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::ParticleSystem*>*, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.Awake
void GlobalNamespace::VFXController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.Play
void GlobalNamespace::VFXController::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController.MainCoroutine
System::Collections::IEnumerator* GlobalNamespace::VFXController::MainCoroutine(bool deactivateAfterDuration, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::MainCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MainCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deactivateAfterDuration), ::il2cpp_utils::ExtractType(duration)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, deactivateAfterDuration, duration);
}
// Writing MetadataGetter for method: VFXController::get_animation
// Il2CppName: get_animation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Animation* (VFXController::*)()>(&VFXController::get_animation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), "get_animation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::get_particleSystems
// Il2CppName: get_particleSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::ParticleSystem*>* (VFXController::*)()>(&VFXController::get_particleSystems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), "get_particleSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::*)()>(&VFXController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::*)()>(&VFXController::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::MainCoroutine
// Il2CppName: MainCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (VFXController::*)(bool, float)>(&VFXController::MainCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), "MainCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VFXController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::*)()>(&VFXController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::*)()>(&VFXController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VFXController/<MainCoroutine>d__9
#include "GlobalNamespace/VFXController_-MainCoroutine-d__9.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.IDisposable.Dispose
void GlobalNamespace::VFXController::$MainCoroutine$d__9::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::$MainCoroutine$d__9::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.MoveNext
bool GlobalNamespace::VFXController::$MainCoroutine$d__9::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::$MainCoroutine$d__9::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::VFXController::$MainCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::$MainCoroutine$d__9::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.Collections.IEnumerator.Reset
void GlobalNamespace::VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::$MainCoroutine$d__9::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VFXController/<MainCoroutine>d__9.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VFXController::$MainCoroutine$d__9::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VFXController::$MainCoroutine$d__9::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::$MainCoroutine$d__9::*)(int)>(&VFXController::$MainCoroutine$d__9::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::$MainCoroutine$d__9::*)(int)>(&VFXController::$MainCoroutine$d__9::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VFXController::$MainCoroutine$d__9::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::$MainCoroutine$d__9::*)()>(&VFXController::$MainCoroutine$d__9::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::$MainCoroutine$d__9::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VFXController::$MainCoroutine$d__9::*)()>(&VFXController::$MainCoroutine$d__9::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::$MainCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (VFXController::$MainCoroutine$d__9::*)()>(&VFXController::$MainCoroutine$d__9::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VFXController::$MainCoroutine$d__9::*)()>(&VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (VFXController::$MainCoroutine$d__9::*)()>(&VFXController::$MainCoroutine$d__9::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VFXController::$MainCoroutine$d__9*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Vector2Extensions
#include "GlobalNamespace/Vector2Extensions.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Vector2Extensions.SignedAngleToLine
float GlobalNamespace::Vector2Extensions::SignedAngleToLine(UnityEngine::Vector2 vec, UnityEngine::Vector2 line) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Vector2Extensions::SignedAngleToLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Vector2Extensions", "SignedAngleToLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vec), ::il2cpp_utils::ExtractType(line)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vec, line);
}
// Writing MetadataGetter for method: Vector2Extensions::SignedAngleToLine
// Il2CppName: SignedAngleToLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Vector2Extensions::SignedAngleToLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Extensions*), "SignedAngleToLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VisibilityChecker
#include "GlobalNamespace/VisibilityChecker.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VisibilityChecker.add_OnBecameVisibleEvent
void GlobalNamespace::VisibilityChecker::add_OnBecameVisibleEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::add_OnBecameVisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnBecameVisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.remove_OnBecameVisibleEvent
void GlobalNamespace::VisibilityChecker::remove_OnBecameVisibleEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::remove_OnBecameVisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnBecameVisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.add_OnBecameInvisibleEvent
void GlobalNamespace::VisibilityChecker::add_OnBecameInvisibleEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::add_OnBecameInvisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_OnBecameInvisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.remove_OnBecameInvisibleEvent
void GlobalNamespace::VisibilityChecker::remove_OnBecameInvisibleEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::remove_OnBecameInvisibleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_OnBecameInvisibleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VisibilityChecker.OnBecameVisible
void GlobalNamespace::VisibilityChecker::OnBecameVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::OnBecameVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VisibilityChecker.OnBecameInvisible
void GlobalNamespace::VisibilityChecker::OnBecameInvisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::OnBecameInvisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBecameInvisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VisibilityChecker::add_OnBecameVisibleEvent
// Il2CppName: add_OnBecameVisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)(System::Action*)>(&VisibilityChecker::add_OnBecameVisibleEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), "add_OnBecameVisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VisibilityChecker::remove_OnBecameVisibleEvent
// Il2CppName: remove_OnBecameVisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)(System::Action*)>(&VisibilityChecker::remove_OnBecameVisibleEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), "remove_OnBecameVisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VisibilityChecker::add_OnBecameInvisibleEvent
// Il2CppName: add_OnBecameInvisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)(System::Action*)>(&VisibilityChecker::add_OnBecameInvisibleEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), "add_OnBecameInvisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VisibilityChecker::remove_OnBecameInvisibleEvent
// Il2CppName: remove_OnBecameInvisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)(System::Action*)>(&VisibilityChecker::remove_OnBecameInvisibleEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), "remove_OnBecameInvisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: VisibilityChecker::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)()>(&VisibilityChecker::OnBecameVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisibilityChecker::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)()>(&VisibilityChecker::OnBecameInvisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VisibilityChecker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)()>(&VisibilityChecker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VisibilityChecker::*)()>(&VisibilityChecker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VisibilityChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EditScriptableAttribute
#include "GlobalNamespace/EditScriptableAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: EditScriptableAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditScriptableAttribute::*)()>(&EditScriptableAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditScriptableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditScriptableAttribute::*)()>(&EditScriptableAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditScriptableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ReorderableAttribute
#include "GlobalNamespace/ReorderableAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ReorderableAttribute.get_ElementHeader
::Il2CppString* GlobalNamespace::ReorderableAttribute::get_ElementHeader() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReorderableAttribute::get_ElementHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ReorderableAttribute.set_ElementHeader
void GlobalNamespace::ReorderableAttribute::set_ElementHeader(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReorderableAttribute::set_ElementHeader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ElementHeader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ReorderableAttribute.get_HeaderZeroIndex
bool GlobalNamespace::ReorderableAttribute::get_HeaderZeroIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReorderableAttribute::get_HeaderZeroIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HeaderZeroIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ReorderableAttribute.set_HeaderZeroIndex
void GlobalNamespace::ReorderableAttribute::set_HeaderZeroIndex(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReorderableAttribute::set_HeaderZeroIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_HeaderZeroIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ReorderableAttribute.get_ElementSingleLine
bool GlobalNamespace::ReorderableAttribute::get_ElementSingleLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReorderableAttribute::get_ElementSingleLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementSingleLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ReorderableAttribute.set_ElementSingleLine
void GlobalNamespace::ReorderableAttribute::set_ElementSingleLine(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReorderableAttribute::set_ElementSingleLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ElementSingleLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ReorderableAttribute::get_ElementHeader
// Il2CppName: get_ElementHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ReorderableAttribute::*)()>(&ReorderableAttribute::get_ElementHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), "get_ElementHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::set_ElementHeader
// Il2CppName: set_ElementHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)(::Il2CppString*)>(&ReorderableAttribute::set_ElementHeader)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), "set_ElementHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::get_HeaderZeroIndex
// Il2CppName: get_HeaderZeroIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ReorderableAttribute::*)()>(&ReorderableAttribute::get_HeaderZeroIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), "get_HeaderZeroIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::set_HeaderZeroIndex
// Il2CppName: set_HeaderZeroIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)(bool)>(&ReorderableAttribute::set_HeaderZeroIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), "set_HeaderZeroIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::get_ElementSingleLine
// Il2CppName: get_ElementSingleLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ReorderableAttribute::*)()>(&ReorderableAttribute::get_ElementSingleLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), "get_ElementSingleLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::set_ElementSingleLine
// Il2CppName: set_ElementSingleLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)(bool)>(&ReorderableAttribute::set_ElementSingleLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), "set_ElementSingleLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)(::Il2CppString*, bool, bool)>(&ReorderableAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)(::Il2CppString*, bool, bool)>(&ReorderableAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ReorderableAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)()>(&ReorderableAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReorderableAttribute::*)()>(&ReorderableAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReorderableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
// Including type: GameScenesManager/ScenePresentType
#include "GlobalNamespace/GameScenesManager_ScenePresentType.hpp"
// Including type: GameScenesManager/SceneDismissType
#include "GlobalNamespace/GameScenesManager_SceneDismissType.hpp"
// Including type: GameScenesManager/<>c__DisplayClass30_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass30_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass31_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass31_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass32_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass32_0.hpp"
// Including type: GameScenesManager/<>c__DisplayClass33_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass33_0.hpp"
// Including type: GameScenesManager/<ScenesTransitionCoroutine>d__36
#include "GlobalNamespace/GameScenesManager_-ScenesTransitionCoroutine-d__36.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: Zenject.ZenjectSceneLoader
#include "Zenject/ZenjectSceneLoader.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kStandardTransitionLength
float GlobalNamespace::GameScenesManager::_get_kStandardTransitionLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_get_kStandardTransitionLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameScenesManager", "kStandardTransitionLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kStandardTransitionLength
void GlobalNamespace::GameScenesManager::_set_kStandardTransitionLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_set_kStandardTransitionLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kStandardTransitionLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kShortTransitionLength
float GlobalNamespace::GameScenesManager::_get_kShortTransitionLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_get_kShortTransitionLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameScenesManager", "kShortTransitionLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kShortTransitionLength
void GlobalNamespace::GameScenesManager::_set_kShortTransitionLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_set_kShortTransitionLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kShortTransitionLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kLongTransitionLength
float GlobalNamespace::GameScenesManager::_get_kLongTransitionLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_get_kLongTransitionLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "GameScenesManager", "kLongTransitionLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kLongTransitionLength
void GlobalNamespace::GameScenesManager::_set_kLongTransitionLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_set_kLongTransitionLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kLongTransitionLength", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kRootContainerGOName
::Il2CppString* GlobalNamespace::GameScenesManager::_get_kRootContainerGOName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_get_kRootContainerGOName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "GameScenesManager", "kRootContainerGOName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kRootContainerGOName
void GlobalNamespace::GameScenesManager::_set_kRootContainerGOName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::_set_kRootContainerGOName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager", "kRootContainerGOName", value));
}
// Autogenerated method: GameScenesManager.add_transitionDidStartEvent
void GlobalNamespace::GameScenesManager::add_transitionDidStartEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::add_transitionDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_transitionDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_transitionDidStartEvent
void GlobalNamespace::GameScenesManager::remove_transitionDidStartEvent(System::Action_1<float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::remove_transitionDidStartEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_transitionDidStartEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.add_beforeDismissingScenesEvent
void GlobalNamespace::GameScenesManager::add_beforeDismissingScenesEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::add_beforeDismissingScenesEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_beforeDismissingScenesEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_beforeDismissingScenesEvent
void GlobalNamespace::GameScenesManager::remove_beforeDismissingScenesEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::remove_beforeDismissingScenesEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_beforeDismissingScenesEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.add_transitionDidFinishEvent
void GlobalNamespace::GameScenesManager::add_transitionDidFinishEvent(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::add_transitionDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_transitionDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_transitionDidFinishEvent
void GlobalNamespace::GameScenesManager::remove_transitionDidFinishEvent(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::remove_transitionDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_transitionDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.add_installEarlyBindingsEvent
void GlobalNamespace::GameScenesManager::add_installEarlyBindingsEvent(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::add_installEarlyBindingsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_installEarlyBindingsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.remove_installEarlyBindingsEvent
void GlobalNamespace::GameScenesManager::remove_installEarlyBindingsEvent(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::remove_installEarlyBindingsEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_installEarlyBindingsEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager.get_currentScenesContainer
Zenject::DiContainer* GlobalNamespace::GameScenesManager::get_currentScenesContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::get_currentScenesContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentScenesContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.get_isInTransition
bool GlobalNamespace::GameScenesManager::get_isInTransition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::get_isInTransition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.get_waitUntilSceneTransitionFinish
UnityEngine::WaitUntil* GlobalNamespace::GameScenesManager::get_waitUntilSceneTransitionFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::get_waitUntilSceneTransitionFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitUntilSceneTransitionFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::WaitUntil*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.MarkSceneAsPersistent
void GlobalNamespace::GameScenesManager::MarkSceneAsPersistent(::Il2CppString* sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::MarkSceneAsPersistent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkSceneAsPersistent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: GameScenesManager.GetCurrentlyLoadedSceneNames
System::Collections::Generic::List_1<::Il2CppString*>* GlobalNamespace::GameScenesManager::GetCurrentlyLoadedSceneNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::GetCurrentlyLoadedSceneNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentlyLoadedSceneNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager.PushScenes
void GlobalNamespace::GameScenesManager::PushScenes(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, System::Action* afterMinDurationCallback, System::Action_1<Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::PushScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.PopScenes
void GlobalNamespace::GameScenesManager::PopScenes(float minDuration, System::Action* afterMinDurationCallback, System::Action_1<Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::PopScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.ReplaceScenes
void GlobalNamespace::GameScenesManager::ReplaceScenes(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, System::Action* afterMinDurationCallback, System::Action_1<Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ReplaceScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.ClearAndOpenScenes
void GlobalNamespace::GameScenesManager::ClearAndOpenScenes(GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, System::Action* afterMinDurationCallback, System::Action_1<Zenject::DiContainer*>* finishCallback, bool unloadAllScenes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ClearAndOpenScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAndOpenScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesTransitionSetupData), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(finishCallback), ::il2cpp_utils::ExtractType(unloadAllScenes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback, unloadAllScenes);
}
// Autogenerated method: GameScenesManager.ScenesTransitionCoroutine
System::Collections::IEnumerator* GlobalNamespace::GameScenesManager::ScenesTransitionCoroutine(System::Collections::Generic::List_1<::Il2CppString*>* scenesToPresent, GlobalNamespace::GameScenesManager::ScenePresentType presentType, System::Collections::Generic::List_1<::Il2CppString*>* scenesToDismiss, GlobalNamespace::GameScenesManager::SceneDismissType dismissType, float minDuration, System::Action* afterMinDurationCallback, System::Action_1<Zenject::DiContainer*>* extraBindingsCallback, System::Action_1<Zenject::DiContainer*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenesTransitionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScenesTransitionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenesToPresent), ::il2cpp_utils::ExtractType(presentType), ::il2cpp_utils::ExtractType(scenesToDismiss), ::il2cpp_utils::ExtractType(dismissType), ::il2cpp_utils::ExtractType(minDuration), ::il2cpp_utils::ExtractType(afterMinDurationCallback), ::il2cpp_utils::ExtractType(extraBindingsCallback), ::il2cpp_utils::ExtractType(finishCallback)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, scenesToPresent, presentType, scenesToDismiss, dismissType, minDuration, afterMinDurationCallback, extraBindingsCallback, finishCallback);
}
// Autogenerated method: GameScenesManager.IsAnySceneInStack
bool GlobalNamespace::GameScenesManager::IsAnySceneInStack(System::Collections::Generic::List_1<::Il2CppString*>* sceneNames) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::IsAnySceneInStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsAnySceneInStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneNames)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sceneNames);
}
// Autogenerated method: GameScenesManager.IsSceneInStack
bool GlobalNamespace::GameScenesManager::IsSceneInStack(::Il2CppString* searchSceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::IsSceneInStack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSceneInStack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchSceneName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, searchSceneName);
}
// Autogenerated method: GameScenesManager.SceneNamesFromSceneInfoArray
System::Collections::Generic::List_1<::Il2CppString*>* GlobalNamespace::GameScenesManager::SceneNamesFromSceneInfoArray(::Array<GlobalNamespace::SceneInfo*>* sceneInfos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::SceneNamesFromSceneInfoArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SceneNamesFromSceneInfoArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneInfos)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(this, ___internal__method, sceneInfos);
}
// Autogenerated method: GameScenesManager.SetActiveRootObjectsInScenes
void GlobalNamespace::GameScenesManager::SetActiveRootObjectsInScenes(System::Collections::Generic::List_1<::Il2CppString*>* sceneNames, bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::SetActiveRootObjectsInScenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveRootObjectsInScenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneNames), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sceneNames, value);
}
// Autogenerated method: GameScenesManager.ReparentRootGameObjectsToDisabledGameObject
void GlobalNamespace::GameScenesManager::ReparentRootGameObjectsToDisabledGameObject(::Il2CppString* sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ReparentRootGameObjectsToDisabledGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReparentRootGameObjectsToDisabledGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: GameScenesManager.MoveGameObjectsFromContainerToSceneRoot
void GlobalNamespace::GameScenesManager::MoveGameObjectsFromContainerToSceneRoot(::Il2CppString* sceneName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::MoveGameObjectsFromContainerToSceneRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGameObjectsFromContainerToSceneRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sceneName);
}
// Autogenerated method: GameScenesManager.Log
void GlobalNamespace::GameScenesManager::Log(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameScenesManager", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: GameScenesManager.<get_waitUntilSceneTransitionFinish>b__22_0
bool GlobalNamespace::GameScenesManager::$get_waitUntilSceneTransitionFinish$b__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::<get_waitUntilSceneTransitionFinish>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_waitUntilSceneTransitionFinish>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameScenesManager::add_transitionDidStartEvent
// Il2CppName: add_transitionDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action_1<float>*)>(&GameScenesManager::add_transitionDidStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "add_transitionDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::remove_transitionDidStartEvent
// Il2CppName: remove_transitionDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action_1<float>*)>(&GameScenesManager::remove_transitionDidStartEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "remove_transitionDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<float>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::add_beforeDismissingScenesEvent
// Il2CppName: add_beforeDismissingScenesEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action*)>(&GameScenesManager::add_beforeDismissingScenesEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "add_beforeDismissingScenesEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::remove_beforeDismissingScenesEvent
// Il2CppName: remove_beforeDismissingScenesEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action*)>(&GameScenesManager::remove_beforeDismissingScenesEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "remove_beforeDismissingScenesEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::add_transitionDidFinishEvent
// Il2CppName: add_transitionDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*)>(&GameScenesManager::add_transitionDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "add_transitionDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::remove_transitionDidFinishEvent
// Il2CppName: remove_transitionDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*)>(&GameScenesManager::remove_transitionDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "remove_transitionDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::add_installEarlyBindingsEvent
// Il2CppName: add_installEarlyBindingsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*)>(&GameScenesManager::add_installEarlyBindingsEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "add_installEarlyBindingsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::remove_installEarlyBindingsEvent
// Il2CppName: remove_installEarlyBindingsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*)>(&GameScenesManager::remove_installEarlyBindingsEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "remove_installEarlyBindingsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::ScenesTransitionSetupDataSO*, Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::get_currentScenesContainer
// Il2CppName: get_currentScenesContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (GameScenesManager::*)()>(&GameScenesManager::get_currentScenesContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "get_currentScenesContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::get_isInTransition
// Il2CppName: get_isInTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameScenesManager::*)()>(&GameScenesManager::get_isInTransition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "get_isInTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::get_waitUntilSceneTransitionFinish
// Il2CppName: get_waitUntilSceneTransitionFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::WaitUntil* (GameScenesManager::*)()>(&GameScenesManager::get_waitUntilSceneTransitionFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "get_waitUntilSceneTransitionFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::MarkSceneAsPersistent
// Il2CppName: MarkSceneAsPersistent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(::Il2CppString*)>(&GameScenesManager::MarkSceneAsPersistent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "MarkSceneAsPersistent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::GetCurrentlyLoadedSceneNames
// Il2CppName: GetCurrentlyLoadedSceneNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<::Il2CppString*>* (GameScenesManager::*)()>(&GameScenesManager::GetCurrentlyLoadedSceneNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "GetCurrentlyLoadedSceneNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::PushScenes
// Il2CppName: PushScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(GlobalNamespace::ScenesTransitionSetupDataSO*, float, System::Action*, System::Action_1<Zenject::DiContainer*>*)>(&GameScenesManager::PushScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "PushScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::PopScenes
// Il2CppName: PopScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(float, System::Action*, System::Action_1<Zenject::DiContainer*>*)>(&GameScenesManager::PopScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "PopScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ReplaceScenes
// Il2CppName: ReplaceScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(GlobalNamespace::ScenesTransitionSetupDataSO*, float, System::Action*, System::Action_1<Zenject::DiContainer*>*)>(&GameScenesManager::ReplaceScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "ReplaceScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ClearAndOpenScenes
// Il2CppName: ClearAndOpenScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(GlobalNamespace::ScenesTransitionSetupDataSO*, float, System::Action*, System::Action_1<Zenject::DiContainer*>*, bool)>(&GameScenesManager::ClearAndOpenScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "ClearAndOpenScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::DiContainer*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ScenesTransitionCoroutine
// Il2CppName: ScenesTransitionCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (GameScenesManager::*)(System::Collections::Generic::List_1<::Il2CppString*>*, GlobalNamespace::GameScenesManager::ScenePresentType, System::Collections::Generic::List_1<::Il2CppString*>*, GlobalNamespace::GameScenesManager::SceneDismissType, float, System::Action*, System::Action_1<Zenject::DiContainer*>*, System::Action_1<Zenject::DiContainer*>*)>(&GameScenesManager::ScenesTransitionCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "ScenesTransitionCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameScenesManager::ScenePresentType>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameScenesManager::SceneDismissType>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::DiContainer*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<Zenject::DiContainer*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::IsAnySceneInStack
// Il2CppName: IsAnySceneInStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameScenesManager::*)(System::Collections::Generic::List_1<::Il2CppString*>*)>(&GameScenesManager::IsAnySceneInStack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "IsAnySceneInStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::IsSceneInStack
// Il2CppName: IsSceneInStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameScenesManager::*)(::Il2CppString*)>(&GameScenesManager::IsSceneInStack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "IsSceneInStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::SceneNamesFromSceneInfoArray
// Il2CppName: SceneNamesFromSceneInfoArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<::Il2CppString*>* (GameScenesManager::*)(::Array<GlobalNamespace::SceneInfo*>*)>(&GameScenesManager::SceneNamesFromSceneInfoArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "SceneNamesFromSceneInfoArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::SceneInfo*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::SetActiveRootObjectsInScenes
// Il2CppName: SetActiveRootObjectsInScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(System::Collections::Generic::List_1<::Il2CppString*>*, bool)>(&GameScenesManager::SetActiveRootObjectsInScenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "SetActiveRootObjectsInScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ReparentRootGameObjectsToDisabledGameObject
// Il2CppName: ReparentRootGameObjectsToDisabledGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(::Il2CppString*)>(&GameScenesManager::ReparentRootGameObjectsToDisabledGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "ReparentRootGameObjectsToDisabledGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::MoveGameObjectsFromContainerToSceneRoot
// Il2CppName: MoveGameObjectsFromContainerToSceneRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)(::Il2CppString*)>(&GameScenesManager::MoveGameObjectsFromContainerToSceneRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "MoveGameObjectsFromContainerToSceneRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&GameScenesManager::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$get_waitUntilSceneTransitionFinish$b__22_0
// Il2CppName: <get_waitUntilSceneTransitionFinish>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameScenesManager::*)()>(&GameScenesManager::$get_waitUntilSceneTransitionFinish$b__22_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), "<get_waitUntilSceneTransitionFinish>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)()>(&GameScenesManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::*)()>(&GameScenesManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameScenesManager/ScenesStackData.get_sceneNames
System::Collections::Generic::List_1<::Il2CppString*>* GlobalNamespace::GameScenesManager::ScenesStackData::get_sceneNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenesStackData::get_sceneNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/ScenesStackData.set_sceneNames
void GlobalNamespace::GameScenesManager::ScenesStackData::set_sceneNames(System::Collections::Generic::List_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenesStackData::set_sceneNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager/ScenesStackData.get_container
Zenject::DiContainer* GlobalNamespace::GameScenesManager::ScenesStackData::get_container() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenesStackData::get_container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/ScenesStackData.set_container
void GlobalNamespace::GameScenesManager::ScenesStackData::set_container(Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenesStackData::set_container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameScenesManager/ScenesStackData.SetDiContainer
void GlobalNamespace::GameScenesManager::ScenesStackData::SetDiContainer(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenesStackData::SetDiContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDiContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: GameScenesManager::ScenesStackData::get_sceneNames
// Il2CppName: get_sceneNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<::Il2CppString*>* (GameScenesManager::ScenesStackData::*)()>(&GameScenesManager::ScenesStackData::get_sceneNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), "get_sceneNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ScenesStackData::set_sceneNames
// Il2CppName: set_sceneNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::ScenesStackData::*)(System::Collections::Generic::List_1<::Il2CppString*>*)>(&GameScenesManager::ScenesStackData::set_sceneNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), "set_sceneNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ScenesStackData::get_container
// Il2CppName: get_container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (GameScenesManager::ScenesStackData::*)()>(&GameScenesManager::ScenesStackData::get_container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), "get_container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ScenesStackData::set_container
// Il2CppName: set_container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::ScenesStackData::*)(Zenject::DiContainer*)>(&GameScenesManager::ScenesStackData::set_container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), "set_container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ScenesStackData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::ScenesStackData::*)(System::Collections::Generic::List_1<::Il2CppString*>*)>(&GameScenesManager::ScenesStackData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::ScenesStackData::*)(System::Collections::Generic::List_1<::Il2CppString*>*)>(&GameScenesManager::ScenesStackData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::ScenesStackData::SetDiContainer
// Il2CppName: SetDiContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::ScenesStackData::*)(Zenject::DiContainer*)>(&GameScenesManager::ScenesStackData::SetDiContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::ScenesStackData*), "SetDiContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/ScenePresentType
#include "GlobalNamespace/GameScenesManager_ScenePresentType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameScenesManager/ScenePresentType Load
GlobalNamespace::GameScenesManager::ScenePresentType GlobalNamespace::GameScenesManager::ScenePresentType::_get_Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenePresentType::_get_Load");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameScenesManager::ScenePresentType>("", "GameScenesManager/ScenePresentType", "Load"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/ScenePresentType Load
void GlobalNamespace::GameScenesManager::ScenePresentType::_set_Load(GlobalNamespace::GameScenesManager::ScenePresentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenePresentType::_set_Load");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/ScenePresentType", "Load", value));
}
// Autogenerated static field getter
// Get static field: static public GameScenesManager/ScenePresentType Activate
GlobalNamespace::GameScenesManager::ScenePresentType GlobalNamespace::GameScenesManager::ScenePresentType::_get_Activate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenePresentType::_get_Activate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameScenesManager::ScenePresentType>("", "GameScenesManager/ScenePresentType", "Activate"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/ScenePresentType Activate
void GlobalNamespace::GameScenesManager::ScenePresentType::_set_Activate(GlobalNamespace::GameScenesManager::ScenePresentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::ScenePresentType::_set_Activate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/ScenePresentType", "Activate", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/SceneDismissType
#include "GlobalNamespace/GameScenesManager_SceneDismissType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameScenesManager/SceneDismissType Unload
GlobalNamespace::GameScenesManager::SceneDismissType GlobalNamespace::GameScenesManager::SceneDismissType::_get_Unload() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::SceneDismissType::_get_Unload");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameScenesManager::SceneDismissType>("", "GameScenesManager/SceneDismissType", "Unload"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/SceneDismissType Unload
void GlobalNamespace::GameScenesManager::SceneDismissType::_set_Unload(GlobalNamespace::GameScenesManager::SceneDismissType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::SceneDismissType::_set_Unload");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/SceneDismissType", "Unload", value));
}
// Autogenerated static field getter
// Get static field: static public GameScenesManager/SceneDismissType Deactivate
GlobalNamespace::GameScenesManager::SceneDismissType GlobalNamespace::GameScenesManager::SceneDismissType::_get_Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::SceneDismissType::_get_Deactivate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameScenesManager::SceneDismissType>("", "GameScenesManager/SceneDismissType", "Deactivate"));
}
// Autogenerated static field setter
// Set static field: static public GameScenesManager/SceneDismissType Deactivate
void GlobalNamespace::GameScenesManager::SceneDismissType::_set_Deactivate(GlobalNamespace::GameScenesManager::SceneDismissType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::SceneDismissType::_set_Deactivate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameScenesManager/SceneDismissType", "Deactivate", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass30_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass30_0.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameScenesManager/<>c__DisplayClass30_0.<PushScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::<PushScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass30_0.<PushScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__1(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0::<PushScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PushScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__0
// Il2CppName: <PushScenes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass30_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass30_0*), "<PushScenes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__1
// Il2CppName: <PushScenes>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass30_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass30_0::$PushScenes$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass30_0*), "<PushScenes>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass30_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass30_0::*)()>(&GameScenesManager::$$c__DisplayClass30_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass30_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass30_0::*)()>(&GameScenesManager::$$c__DisplayClass30_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass30_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameScenesManager/<>c__DisplayClass31_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass31_0.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameScenesManager/<>c__DisplayClass31_0.<PopScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::$PopScenes$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0::<PopScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PopScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass31_0::$PopScenes$b__0
// Il2CppName: <PopScenes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass31_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass31_0::$PopScenes$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass31_0*), "<PopScenes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass31_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass31_0::*)()>(&GameScenesManager::$$c__DisplayClass31_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass31_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass31_0::*)()>(&GameScenesManager::$$c__DisplayClass31_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass31_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameScenesManager/<>c__DisplayClass32_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass32_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameScenesManager/<>c__DisplayClass32_0.<ReplaceScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__0(Zenject::DiContainer* emptySceneContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::<ReplaceScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(emptySceneContainer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, emptySceneContainer);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass32_0.<ReplaceScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__1(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::<ReplaceScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass32_0.<ReplaceScenes>b__2
void GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__2(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0::<ReplaceScenes>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReplaceScenes>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__0
// Il2CppName: <ReplaceScenes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass32_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass32_0*), "<ReplaceScenes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__1
// Il2CppName: <ReplaceScenes>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass32_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass32_0*), "<ReplaceScenes>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__2
// Il2CppName: <ReplaceScenes>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass32_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass32_0::$ReplaceScenes$b__2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass32_0*), "<ReplaceScenes>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass32_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass32_0::*)()>(&GameScenesManager::$$c__DisplayClass32_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass32_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass32_0::*)()>(&GameScenesManager::$$c__DisplayClass32_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass32_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameScenesManager/<>c__DisplayClass33_0
#include "GlobalNamespace/GameScenesManager_--c__DisplayClass33_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: GameScenesManager/ScenesStackData
#include "GlobalNamespace/GameScenesManager_ScenesStackData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameScenesManager/<>c__DisplayClass33_0.<ClearAndOpenScenes>b__0
void GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__0(Zenject::DiContainer* emptySceneContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::<ClearAndOpenScenes>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ClearAndOpenScenes>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(emptySceneContainer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, emptySceneContainer);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass33_0.<ClearAndOpenScenes>b__1
void GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__1(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::<ClearAndOpenScenes>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ClearAndOpenScenes>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: GameScenesManager/<>c__DisplayClass33_0.<ClearAndOpenScenes>b__2
void GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__2(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0::<ClearAndOpenScenes>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ClearAndOpenScenes>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__0
// Il2CppName: <ClearAndOpenScenes>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass33_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass33_0*), "<ClearAndOpenScenes>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__1
// Il2CppName: <ClearAndOpenScenes>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass33_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass33_0*), "<ClearAndOpenScenes>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__2
// Il2CppName: <ClearAndOpenScenes>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass33_0::*)(Zenject::DiContainer*)>(&GameScenesManager::$$c__DisplayClass33_0::$ClearAndOpenScenes$b__2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass33_0*), "<ClearAndOpenScenes>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$$c__DisplayClass33_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass33_0::*)()>(&GameScenesManager::$$c__DisplayClass33_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass33_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$$c__DisplayClass33_0::*)()>(&GameScenesManager::$$c__DisplayClass33_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$$c__DisplayClass33_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameScenesManager/<ScenesTransitionCoroutine>d__36
#include "GlobalNamespace/GameScenesManager_-ScenesTransitionCoroutine-d__36.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.System.IDisposable.Dispose
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.MoveNext
bool GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.<>m__Finally1
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.<>m__Finally2
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::$$m__Finally2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::<>m__Finally2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.System.Collections.IEnumerator.Reset
void GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameScenesManager/<ScenesTransitionCoroutine>d__36.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__36::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)(int)>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)(int)>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::$$m__Finally2
// Il2CppName: <>m__Finally2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::$$m__Finally2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "<>m__Finally2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (GameScenesManager::$ScenesTransitionCoroutine$d__36::*)()>(&GameScenesManager::$ScenesTransitionCoroutine$d__36::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameScenesManager::$ScenesTransitionCoroutine$d__36*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MarkSceneAsPersistent
#include "GlobalNamespace/MarkSceneAsPersistent.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MarkSceneAsPersistent.Awake
void GlobalNamespace::MarkSceneAsPersistent::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MarkSceneAsPersistent::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MarkSceneAsPersistent::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkSceneAsPersistent::*)()>(&MarkSceneAsPersistent::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkSceneAsPersistent*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MarkSceneAsPersistent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkSceneAsPersistent::*)()>(&MarkSceneAsPersistent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkSceneAsPersistent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MarkSceneAsPersistent::*)()>(&MarkSceneAsPersistent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MarkSceneAsPersistent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SceneInfo.get_sceneName
::Il2CppString* GlobalNamespace::SceneInfo::get_sceneName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneInfo::get_sceneName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SceneInfo.get_disabledRootObjects
bool GlobalNamespace::SceneInfo::get_disabledRootObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneInfo::get_disabledRootObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disabledRootObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SceneInfo::get_sceneName
// Il2CppName: get_sceneName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SceneInfo::*)()>(&SceneInfo::get_sceneName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneInfo*), "get_sceneName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneInfo::get_disabledRootObjects
// Il2CppName: get_disabledRootObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneInfo::*)()>(&SceneInfo::get_disabledRootObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneInfo*), "get_disabledRootObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneInfo::*)()>(&SceneInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneInfo::*)()>(&SceneInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SceneSetupData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneSetupData::*)()>(&SceneSetupData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneSetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneSetupData::*)()>(&SceneSetupData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneSetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FixedScenesScenesTransitionSetupDataSO
#include "GlobalNamespace/FixedScenesScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FixedScenesScenesTransitionSetupDataSO.Init
void GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FixedScenesScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FixedScenesScenesTransitionSetupDataSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FixedScenesScenesTransitionSetupDataSO::*)()>(&FixedScenesScenesTransitionSetupDataSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FixedScenesScenesTransitionSetupDataSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FixedScenesScenesTransitionSetupDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FixedScenesScenesTransitionSetupDataSO::*)()>(&FixedScenesScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FixedScenesScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FixedScenesScenesTransitionSetupDataSO::*)()>(&FixedScenesScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FixedScenesScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO.Init
void GlobalNamespace::NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::*)()>(&NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::*)()>(&NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::*)()>(&NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoSetupDataSingleFixedSceneScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScenesTransitionSetupDataSO.get_scenes
::Array<GlobalNamespace::SceneInfo*>* GlobalNamespace::ScenesTransitionSetupDataSO::get_scenes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScenesTransitionSetupDataSO::get_scenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SceneInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.set_scenes
void GlobalNamespace::ScenesTransitionSetupDataSO::set_scenes(::Array<GlobalNamespace::SceneInfo*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScenesTransitionSetupDataSO::set_scenes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scenes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScenesTransitionSetupDataSO.get_sceneSetupDataArray
::Array<GlobalNamespace::SceneSetupData*>* GlobalNamespace::ScenesTransitionSetupDataSO::get_sceneSetupDataArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScenesTransitionSetupDataSO::get_sceneSetupDataArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneSetupDataArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::SceneSetupData*>*, false>(this, ___internal__method);
}
// Autogenerated method: ScenesTransitionSetupDataSO.set_sceneSetupDataArray
void GlobalNamespace::ScenesTransitionSetupDataSO::set_sceneSetupDataArray(::Array<GlobalNamespace::SceneSetupData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScenesTransitionSetupDataSO::set_sceneSetupDataArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sceneSetupDataArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ScenesTransitionSetupDataSO.Init
void GlobalNamespace::ScenesTransitionSetupDataSO::Init(::Array<GlobalNamespace::SceneInfo*>* scenes, ::Array<GlobalNamespace::SceneSetupData*>* sceneSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scenes), ::il2cpp_utils::ExtractType(sceneSetupData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scenes, sceneSetupData);
}
// Autogenerated method: ScenesTransitionSetupDataSO.InstallBindings
void GlobalNamespace::ScenesTransitionSetupDataSO::InstallBindings(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScenesTransitionSetupDataSO::InstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::get_scenes
// Il2CppName: get_scenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::SceneInfo*>* (ScenesTransitionSetupDataSO::*)()>(&ScenesTransitionSetupDataSO::get_scenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), "get_scenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::set_scenes
// Il2CppName: set_scenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScenesTransitionSetupDataSO::*)(::Array<GlobalNamespace::SceneInfo*>*)>(&ScenesTransitionSetupDataSO::set_scenes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), "set_scenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::SceneInfo*>*>()});
  }
};
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::get_sceneSetupDataArray
// Il2CppName: get_sceneSetupDataArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::SceneSetupData*>* (ScenesTransitionSetupDataSO::*)()>(&ScenesTransitionSetupDataSO::get_sceneSetupDataArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), "get_sceneSetupDataArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::set_sceneSetupDataArray
// Il2CppName: set_sceneSetupDataArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScenesTransitionSetupDataSO::*)(::Array<GlobalNamespace::SceneSetupData*>*)>(&ScenesTransitionSetupDataSO::set_sceneSetupDataArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), "set_sceneSetupDataArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::SceneSetupData*>*>()});
  }
};
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScenesTransitionSetupDataSO::*)(::Array<GlobalNamespace::SceneInfo*>*, ::Array<GlobalNamespace::SceneSetupData*>*)>(&ScenesTransitionSetupDataSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::SceneInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::SceneSetupData*>*>()});
  }
};
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScenesTransitionSetupDataSO::*)(Zenject::DiContainer*)>(&ScenesTransitionSetupDataSO::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::Get
// Il2CppName: Get
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ScenesTransitionSetupDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScenesTransitionSetupDataSO::*)()>(&ScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScenesTransitionSetupDataSO::*)()>(&ScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SingleFixedSceneScenesTransitionSetupDataSO
#include "GlobalNamespace/SingleFixedSceneScenesTransitionSetupDataSO.hpp"
// Including type: SceneInfo
#include "GlobalNamespace/SceneInfo.hpp"
// Including type: SceneSetupData
#include "GlobalNamespace/SceneSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SingleFixedSceneScenesTransitionSetupDataSO.get_sceneInfo
GlobalNamespace::SceneInfo* GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SceneInfo*, false>(this, ___internal__method);
}
// Autogenerated method: SingleFixedSceneScenesTransitionSetupDataSO.Init
void GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::Init(GlobalNamespace::SceneSetupData* sceneSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SingleFixedSceneScenesTransitionSetupDataSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneSetupData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sceneSetupData);
}
// Writing MetadataGetter for method: SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo
// Il2CppName: get_sceneInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SceneInfo* (SingleFixedSceneScenesTransitionSetupDataSO::*)()>(&SingleFixedSceneScenesTransitionSetupDataSO::get_sceneInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleFixedSceneScenesTransitionSetupDataSO*), "get_sceneInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SingleFixedSceneScenesTransitionSetupDataSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleFixedSceneScenesTransitionSetupDataSO::*)(GlobalNamespace::SceneSetupData*)>(&SingleFixedSceneScenesTransitionSetupDataSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleFixedSceneScenesTransitionSetupDataSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SceneSetupData*>()});
  }
};
// Writing MetadataGetter for method: SingleFixedSceneScenesTransitionSetupDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleFixedSceneScenesTransitionSetupDataSO::*)()>(&SingleFixedSceneScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleFixedSceneScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleFixedSceneScenesTransitionSetupDataSO::*)()>(&SingleFixedSceneScenesTransitionSetupDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleFixedSceneScenesTransitionSetupDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreateSOAttribute
#include "GlobalNamespace/CreateSOAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CreateSOAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateSOAttribute::*)()>(&CreateSOAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateSOAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateSOAttribute::*)()>(&CreateSOAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateSOAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolSignal
#include "GlobalNamespace/BoolSignal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BoolSignal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolSignal::*)()>(&BoolSignal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolSignal::*)()>(&BoolSignal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSignal
#include "GlobalNamespace/ColorSignal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ColorSignal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSignal::*)()>(&ColorSignal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorSignal::*)()>(&ColorSignal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DIContainerSignal
#include "GlobalNamespace/DIContainerSignal.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DIContainerSignal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DIContainerSignal::*)()>(&DIContainerSignal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DIContainerSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DIContainerSignal::*)()>(&DIContainerSignal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DIContainerSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSignal
#include "GlobalNamespace/FloatSignal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FloatSignal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignal::*)()>(&FloatSignal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignal::*)()>(&FloatSignal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSignalListener
#include "GlobalNamespace/FloatSignalListener.hpp"
// Including type: FloatSignal
#include "GlobalNamespace/FloatSignal.hpp"
// Including type: FloatUnityEvent
#include "GlobalNamespace/FloatUnityEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FloatSignalListener.OnEnable
void GlobalNamespace::FloatSignalListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FloatSignalListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatSignalListener.OnDisable
void GlobalNamespace::FloatSignalListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FloatSignalListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FloatSignalListener.HandleEvent
void GlobalNamespace::FloatSignalListener::HandleEvent(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FloatSignalListener::HandleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, f);
}
// Writing MetadataGetter for method: FloatSignalListener::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignalListener::*)()>(&FloatSignalListener::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignalListener*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FloatSignalListener::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignalListener::*)()>(&FloatSignalListener::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignalListener*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FloatSignalListener::HandleEvent
// Il2CppName: HandleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignalListener::*)(float)>(&FloatSignalListener::HandleEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignalListener*), "HandleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FloatSignalListener::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignalListener::*)()>(&FloatSignalListener::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignalListener*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSignalListener::*)()>(&FloatSignalListener::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSignalListener*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Signal.add__event
void GlobalNamespace::Signal::add__event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Signal::add__event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add__event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Signal.remove__event
void GlobalNamespace::Signal::remove__event(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Signal::remove__event");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove__event", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Signal.Raise
void GlobalNamespace::Signal::Raise() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Signal::Raise");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Signal.Subscribe
void GlobalNamespace::Signal::Subscribe(System::Action* foo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Signal::Subscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Subscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, foo);
}
// Autogenerated method: Signal.Unsubscribe
void GlobalNamespace::Signal::Unsubscribe(System::Action* foo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Signal::Unsubscribe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Unsubscribe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, foo);
}
// Writing MetadataGetter for method: Signal::add__event
// Il2CppName: add__event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)(System::Action*)>(&Signal::add__event)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), "add__event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: Signal::remove__event
// Il2CppName: remove__event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)(System::Action*)>(&Signal::remove__event)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), "remove__event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: Signal::Raise
// Il2CppName: Raise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)()>(&Signal::Raise)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), "Raise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Signal::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)(System::Action*)>(&Signal::Subscribe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: Signal::Unsubscribe
// Il2CppName: Unsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)(System::Action*)>(&Signal::Unsubscribe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), "Unsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: Signal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)()>(&Signal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Signal::*)()>(&Signal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Signal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalListener
#include "GlobalNamespace/SignalListener.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SignalListener.OnEnable
void GlobalNamespace::SignalListener::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalListener::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalListener.OnDisable
void GlobalNamespace::SignalListener::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalListener::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalListener.HandleEvent
void GlobalNamespace::SignalListener::HandleEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalListener::HandleEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SignalListener::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalListener::*)()>(&SignalListener::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalListener*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalListener::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalListener::*)()>(&SignalListener::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalListener*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalListener::HandleEvent
// Il2CppName: HandleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalListener::*)()>(&SignalListener::HandleEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalListener*), "HandleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalListener::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalListener::*)()>(&SignalListener::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalListener*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalListener::*)()>(&SignalListener::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalListener*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalOnPointerClick
#include "GlobalNamespace/SignalOnPointerClick.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SignalOnPointerClick.OnPointerClick
void GlobalNamespace::SignalOnPointerClick::OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalOnPointerClick::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Writing MetadataGetter for method: SignalOnPointerClick::OnPointerClick
// Il2CppName: OnPointerClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnPointerClick::*)(UnityEngine::EventSystems::PointerEventData*)>(&SignalOnPointerClick::OnPointerClick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnPointerClick*), "OnPointerClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: SignalOnPointerClick::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnPointerClick::*)()>(&SignalOnPointerClick::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnPointerClick*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnPointerClick::*)()>(&SignalOnPointerClick::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnPointerClick*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalOnUIButtonClick
#include "GlobalNamespace/SignalOnUIButtonClick.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SignalOnUIButtonClick.OnReset
void GlobalNamespace::SignalOnUIButtonClick::OnReset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalOnUIButtonClick::OnReset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnReset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalOnUIButtonClick.Start
void GlobalNamespace::SignalOnUIButtonClick::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalOnUIButtonClick::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SignalOnUIButtonClick.OnDestroy
void GlobalNamespace::SignalOnUIButtonClick::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SignalOnUIButtonClick::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SignalOnUIButtonClick::OnReset
// Il2CppName: OnReset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnUIButtonClick::*)()>(&SignalOnUIButtonClick::OnReset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnUIButtonClick*), "OnReset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalOnUIButtonClick::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnUIButtonClick::*)()>(&SignalOnUIButtonClick::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnUIButtonClick*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalOnUIButtonClick::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnUIButtonClick::*)()>(&SignalOnUIButtonClick::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnUIButtonClick*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SignalOnUIButtonClick::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnUIButtonClick::*)()>(&SignalOnUIButtonClick::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnUIButtonClick*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalOnUIButtonClick::*)()>(&SignalOnUIButtonClick::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalOnUIButtonClick*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SignalSenderAttribute
#include "GlobalNamespace/SignalSenderAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SignalSenderAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalSenderAttribute::*)()>(&SignalSenderAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalSenderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SignalSenderAttribute::*)()>(&SignalSenderAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SignalSenderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StringSignal
#include "GlobalNamespace/StringSignal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: StringSignal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringSignal::*)()>(&StringSignal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StringSignal::*)()>(&StringSignal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StringSignal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PSSortingLayer
#include "GlobalNamespace/PSSortingLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PSSortingLayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSSortingLayer::*)()>(&PSSortingLayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSSortingLayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSSortingLayer::*)()>(&PSSortingLayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSSortingLayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SortingLayer
#include "GlobalNamespace/SortingLayer.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SortingLayer.get_renderer
UnityEngine::Renderer* GlobalNamespace::SortingLayer::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SortingLayer::get_renderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: SortingLayer.Reset
void GlobalNamespace::SortingLayer::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SortingLayer::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SortingLayer::get_renderer
// Il2CppName: get_renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Renderer* (SortingLayer::*)()>(&SortingLayer::get_renderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SortingLayer*), "get_renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SortingLayer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SortingLayer::*)()>(&SortingLayer::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SortingLayer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SortingLayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SortingLayer::*)()>(&SortingLayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SortingLayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SortingLayer::*)()>(&SortingLayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SortingLayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMMainThreadDispatcher
#include "GlobalNamespace/HMMainThreadDispatcher.hpp"
// Including type: HMMainThreadDispatcher/<>c__DisplayClass2_0
#include "GlobalNamespace/HMMainThreadDispatcher_--c__DisplayClass2_0.hpp"
// Including type: HMMainThreadDispatcher/<ActionCoroutine>d__4
#include "GlobalNamespace/HMMainThreadDispatcher_-ActionCoroutine-d__4.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Queue`1<System.Action> _mainThreadExecutionQueue
System::Collections::Generic::Queue_1<System::Action*>* GlobalNamespace::HMMainThreadDispatcher::_get__mainThreadExecutionQueue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::_get__mainThreadExecutionQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::Queue_1<System::Action*>*>("", "HMMainThreadDispatcher", "_mainThreadExecutionQueue"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Queue`1<System.Action> _mainThreadExecutionQueue
void GlobalNamespace::HMMainThreadDispatcher::_set__mainThreadExecutionQueue(System::Collections::Generic::Queue_1<System::Action*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::_set__mainThreadExecutionQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HMMainThreadDispatcher", "_mainThreadExecutionQueue", value));
}
// Autogenerated method: HMMainThreadDispatcher.Update
void GlobalNamespace::HMMainThreadDispatcher::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher.Enqueue
void GlobalNamespace::HMMainThreadDispatcher::Enqueue(System::Collections::IEnumerator* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher.Enqueue
void GlobalNamespace::HMMainThreadDispatcher::Enqueue(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::Enqueue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher.ActionCoroutine
System::Collections::IEnumerator* GlobalNamespace::HMMainThreadDispatcher::ActionCoroutine(System::Action* action) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::ActionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, action);
}
// Autogenerated method: HMMainThreadDispatcher..cctor
void GlobalNamespace::HMMainThreadDispatcher::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HMMainThreadDispatcher", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: HMMainThreadDispatcher::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::*)()>(&HMMainThreadDispatcher::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::*)(System::Collections::IEnumerator*)>(&HMMainThreadDispatcher::Enqueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::Enqueue
// Il2CppName: Enqueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::*)(System::Action*)>(&HMMainThreadDispatcher::Enqueue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), "Enqueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::ActionCoroutine
// Il2CppName: ActionCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (HMMainThreadDispatcher::*)(System::Action*)>(&HMMainThreadDispatcher::ActionCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), "ActionCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::*)()>(&HMMainThreadDispatcher::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::*)()>(&HMMainThreadDispatcher::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HMMainThreadDispatcher::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMMainThreadDispatcher/<>c__DisplayClass2_0
#include "GlobalNamespace/HMMainThreadDispatcher_--c__DisplayClass2_0.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMMainThreadDispatcher/<>c__DisplayClass2_0.<Enqueue>b__0
void GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::$Enqueue$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::$$c__DisplayClass2_0::<Enqueue>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Enqueue>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HMMainThreadDispatcher::$$c__DisplayClass2_0::$Enqueue$b__0
// Il2CppName: <Enqueue>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$$c__DisplayClass2_0::*)()>(&HMMainThreadDispatcher::$$c__DisplayClass2_0::$Enqueue$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$$c__DisplayClass2_0*), "<Enqueue>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::$$c__DisplayClass2_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$$c__DisplayClass2_0::*)()>(&HMMainThreadDispatcher::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$$c__DisplayClass2_0::*)()>(&HMMainThreadDispatcher::$$c__DisplayClass2_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$$c__DisplayClass2_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMMainThreadDispatcher/<ActionCoroutine>d__4
#include "GlobalNamespace/HMMainThreadDispatcher_-ActionCoroutine-d__4.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.IDisposable.Dispose
void GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.MoveNext
bool GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMMainThreadDispatcher/<ActionCoroutine>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMMainThreadDispatcher::$ActionCoroutine$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HMMainThreadDispatcher::$ActionCoroutine$d__4::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)(int)>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)(int)>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::$ActionCoroutine$d__4::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)()>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)()>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)()>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)()>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (HMMainThreadDispatcher::$ActionCoroutine$d__4::*)()>(&HMMainThreadDispatcher::$ActionCoroutine$d__4::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMMainThreadDispatcher::$ActionCoroutine$d__4*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HMTask
#include "GlobalNamespace/HMTask.hpp"
// Including type: HMTask/<RunCoroutine>d__8
#include "GlobalNamespace/HMTask_-RunCoroutine-d__8.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMTask.Run
void GlobalNamespace::HMTask::Run() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.RunCoroutine
System::Collections::IEnumerator* GlobalNamespace::HMTask::RunCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::RunCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.RunJob
void GlobalNamespace::HMTask::RunJob() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::RunJob");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunJob", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.Cancel
void GlobalNamespace::HMTask::Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::Cancel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cancel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.<RunCoroutine>b__8_0
bool GlobalNamespace::HMTask::$RunCoroutine$b__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::<RunCoroutine>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunCoroutine>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMTask.<RunJob>b__9_0
void GlobalNamespace::HMTask::$RunJob$b__9_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::<RunJob>b__9_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RunJob>b__9_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HMTask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::*)(System::Action*, System::Action*)>(&HMTask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::*)(System::Action*, System::Action*)>(&HMTask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: HMTask::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::*)()>(&HMTask::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::RunCoroutine
// Il2CppName: RunCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (HMTask::*)()>(&HMTask::RunCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), "RunCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::RunJob
// Il2CppName: RunJob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::*)()>(&HMTask::RunJob)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), "RunJob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::*)()>(&HMTask::Cancel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::$RunCoroutine$b__8_0
// Il2CppName: <RunCoroutine>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMTask::*)()>(&HMTask::$RunCoroutine$b__8_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), "<RunCoroutine>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::$RunJob$b__9_0
// Il2CppName: <RunJob>b__9_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::*)()>(&HMTask::$RunJob$b__9_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask*), "<RunJob>b__9_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMTask/<RunCoroutine>d__8
#include "GlobalNamespace/HMTask_-RunCoroutine-d__8.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::HMTask::$RunCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::$RunCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.MoveNext
bool GlobalNamespace::HMTask::$RunCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::$RunCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HMTask/<RunCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::$RunCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HMTask::$RunCoroutine$d__8::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::$RunCoroutine$d__8::*)(int)>(&HMTask::$RunCoroutine$d__8::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::$RunCoroutine$d__8::*)(int)>(&HMTask::$RunCoroutine$d__8::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HMTask::$RunCoroutine$d__8::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::$RunCoroutine$d__8::*)()>(&HMTask::$RunCoroutine$d__8::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::$RunCoroutine$d__8::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HMTask::$RunCoroutine$d__8::*)()>(&HMTask::$RunCoroutine$d__8::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::$RunCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (HMTask::$RunCoroutine$d__8::*)()>(&HMTask::$RunCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HMTask::$RunCoroutine$d__8::*)()>(&HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (HMTask::$RunCoroutine$d__8::*)()>(&HMTask::$RunCoroutine$d__8::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HMTask::$RunCoroutine$d__8*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JumpDestinationMarker
#include "GlobalNamespace/JumpDestinationMarker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: JumpDestinationMarker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpDestinationMarker::*)()>(&JumpDestinationMarker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpDestinationMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpDestinationMarker::*)()>(&JumpDestinationMarker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpDestinationMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: JumpMarker
#include "GlobalNamespace/JumpMarker.hpp"
// Including type: JumpDestinationMarker
#include "GlobalNamespace/JumpDestinationMarker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JumpMarker.get_id
UnityEngine::PropertyName GlobalNamespace::JumpMarker::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::JumpMarker::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Autogenerated method: JumpMarker.get_jumpDestination
GlobalNamespace::JumpDestinationMarker* GlobalNamespace::JumpMarker::get_jumpDestination() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::JumpMarker::get_jumpDestination");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpDestination", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::JumpDestinationMarker*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: JumpMarker::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::PropertyName (JumpMarker::*)()>(&JumpMarker::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpMarker*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: JumpMarker::get_jumpDestination
// Il2CppName: get_jumpDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::JumpDestinationMarker* (JumpMarker::*)()>(&JumpMarker::get_jumpDestination)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpMarker*), "get_jumpDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: JumpMarker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpMarker::*)()>(&JumpMarker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpMarker::*)()>(&JumpMarker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: JumpReceiver
#include "GlobalNamespace/JumpReceiver.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: JumpReceiver.get_jumpToDestinationValid
bool GlobalNamespace::JumpReceiver::get_jumpToDestinationValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::JumpReceiver::get_jumpToDestinationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_jumpToDestinationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: JumpReceiver.set_jumpToDestinationValid
void GlobalNamespace::JumpReceiver::set_jumpToDestinationValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::JumpReceiver::set_jumpToDestinationValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_jumpToDestinationValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: JumpReceiver.OnNotify
void GlobalNamespace::JumpReceiver::OnNotify(UnityEngine::Playables::Playable origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::JumpReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Writing MetadataGetter for method: JumpReceiver::get_jumpToDestinationValid
// Il2CppName: get_jumpToDestinationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (JumpReceiver::*)()>(&JumpReceiver::get_jumpToDestinationValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpReceiver*), "get_jumpToDestinationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: JumpReceiver::set_jumpToDestinationValid
// Il2CppName: set_jumpToDestinationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpReceiver::*)(bool)>(&JumpReceiver::set_jumpToDestinationValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpReceiver*), "set_jumpToDestinationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: JumpReceiver::OnNotify
// Il2CppName: OnNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpReceiver::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::INotification*, ::Il2CppObject*)>(&JumpReceiver::OnNotify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpReceiver*), "OnNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotification*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: JumpReceiver::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpReceiver::*)()>(&JumpReceiver::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpReceiver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (JumpReceiver::*)()>(&JumpReceiver::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(JumpReceiver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TimelinePauseMarker
#include "GlobalNamespace/TimelinePauseMarker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TimelinePauseMarker.get_id
UnityEngine::PropertyName GlobalNamespace::TimelinePauseMarker::get_id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimelinePauseMarker::get_id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::PropertyName, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TimelinePauseMarker::get_id
// Il2CppName: get_id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::PropertyName (TimelinePauseMarker::*)()>(&TimelinePauseMarker::get_id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseMarker*), "get_id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TimelinePauseMarker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseMarker::*)()>(&TimelinePauseMarker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseMarker::*)()>(&TimelinePauseMarker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseMarker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TimelinePauseReceiver
#include "GlobalNamespace/TimelinePauseReceiver.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.INotification
#include "UnityEngine/Playables/INotification.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TimelinePauseReceiver.add_timelinePauseEvent
void GlobalNamespace::TimelinePauseReceiver::add_timelinePauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimelinePauseReceiver::add_timelinePauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_timelinePauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimelinePauseReceiver.remove_timelinePauseEvent
void GlobalNamespace::TimelinePauseReceiver::remove_timelinePauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimelinePauseReceiver::remove_timelinePauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_timelinePauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TimelinePauseReceiver.OnNotify
void GlobalNamespace::TimelinePauseReceiver::OnNotify(UnityEngine::Playables::Playable origin, UnityEngine::Playables::INotification* notification, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TimelinePauseReceiver::OnNotify");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(notification), ::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, origin, notification, context);
}
// Writing MetadataGetter for method: TimelinePauseReceiver::add_timelinePauseEvent
// Il2CppName: add_timelinePauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseReceiver::*)(System::Action*)>(&TimelinePauseReceiver::add_timelinePauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseReceiver*), "add_timelinePauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TimelinePauseReceiver::remove_timelinePauseEvent
// Il2CppName: remove_timelinePauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseReceiver::*)(System::Action*)>(&TimelinePauseReceiver::remove_timelinePauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseReceiver*), "remove_timelinePauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: TimelinePauseReceiver::OnNotify
// Il2CppName: OnNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseReceiver::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::INotification*, ::Il2CppObject*)>(&TimelinePauseReceiver::OnNotify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseReceiver*), "OnNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::INotification*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TimelinePauseReceiver::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseReceiver::*)()>(&TimelinePauseReceiver::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseReceiver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TimelinePauseReceiver::*)()>(&TimelinePauseReceiver::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TimelinePauseReceiver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatUnityEvent
#include "GlobalNamespace/FloatUnityEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FloatUnityEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatUnityEvent::*)()>(&FloatUnityEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatUnityEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatUnityEvent::*)()>(&FloatUnityEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatUnityEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DevicelessVRHelper
#include "GlobalNamespace/DevicelessVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DevicelessVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::add_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::add_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::DevicelessVRHelper::add_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::DevicelessVRHelper::remove_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_hmdMountedEvent
void GlobalNamespace::DevicelessVRHelper::add_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_hmdMountedEvent
void GlobalNamespace::DevicelessVRHelper::remove_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DevicelessVRHelper.get_hasInputFocus
bool GlobalNamespace::DevicelessVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_isAlwaysWireless
bool GlobalNamespace::DevicelessVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformSDK GlobalNamespace::DevicelessVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.get_currentXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::DevicelessVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.Update
void GlobalNamespace::DevicelessVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DevicelessVRHelper.TriggerHapticPulse
void GlobalNamespace::DevicelessVRHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: DevicelessVRHelper.StopHaptics
void GlobalNamespace::DevicelessVRHelper::StopHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: DevicelessVRHelper.AdjustControllerTransform
void GlobalNamespace::DevicelessVRHelper::AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: DevicelessVRHelper.GetNodePose
bool GlobalNamespace::DevicelessVRHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DevicelessVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, nodeType, idx, pos, rot);
}
// Writing MetadataGetter for method: DevicelessVRHelper::add_inputFocusWasCapturedEvent
// Il2CppName: add_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_inputFocusWasCapturedEvent
// Il2CppName: remove_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_inputFocusWasReleasedEvent
// Il2CppName: add_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_inputFocusWasReleasedEvent
// Il2CppName: remove_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_vrFocusWasCapturedEvent
// Il2CppName: add_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_vrFocusWasCapturedEvent
// Il2CppName: remove_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_vrFocusWasReleasedEvent
// Il2CppName: add_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_vrFocusWasReleasedEvent
// Il2CppName: remove_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_hmdUnmountedEvent
// Il2CppName: add_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_hmdUnmountedEvent
// Il2CppName: remove_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_hmdMountedEvent
// Il2CppName: add_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_hmdMountedEvent
// Il2CppName: remove_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent
// Il2CppName: add_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::add_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent
// Il2CppName: remove_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action*)>(&DevicelessVRHelper::remove_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent
// Il2CppName: add_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&DevicelessVRHelper::add_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent
// Il2CppName: remove_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&DevicelessVRHelper::remove_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DevicelessVRHelper::*)()>(&DevicelessVRHelper::get_hasInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::get_isAlwaysWireless
// Il2CppName: get_isAlwaysWireless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DevicelessVRHelper::*)()>(&DevicelessVRHelper::get_isAlwaysWireless)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "get_isAlwaysWireless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::get_vrPlatformSDK
// Il2CppName: get_vrPlatformSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRPlatformSDK (DevicelessVRHelper::*)()>(&DevicelessVRHelper::get_vrPlatformSDK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "get_vrPlatformSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::get_currentXRDeviceModel
// Il2CppName: get_currentXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (DevicelessVRHelper::*)()>(&DevicelessVRHelper::get_currentXRDeviceModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "get_currentXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)()>(&DevicelessVRHelper::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(UnityEngine::XR::XRNode, float, float, float)>(&DevicelessVRHelper::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::StopHaptics
// Il2CppName: StopHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(UnityEngine::XR::XRNode)>(&DevicelessVRHelper::StopHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "StopHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::AdjustControllerTransform
// Il2CppName: AdjustControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)(UnityEngine::XR::XRNode, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3)>(&DevicelessVRHelper::AdjustControllerTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "AdjustControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DevicelessVRHelper::*)(UnityEngine::XR::XRNode, int, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&DevicelessVRHelper::GetNodePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: DevicelessVRHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)()>(&DevicelessVRHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DevicelessVRHelper::*)()>(&DevicelessVRHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DevicelessVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuousRumbleFrameDuration
float GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::_get_kContinuousRumbleFrameDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HapticFeedbackController", "kContinuousRumbleFrameDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuousRumbleFrameDuration
void GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::_set_kContinuousRumbleFrameDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HapticFeedbackController", "kContinuousRumbleFrameDuration", value));
}
// Autogenerated method: HapticFeedbackController.get_continuousRumblePreset
Libraries::HM::HMLib::VR::HapticPresetSO* GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::get_continuousRumblePreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_continuousRumblePreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Libraries::HM::HMLib::VR::HapticPresetSO*, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.Awake
void GlobalNamespace::HapticFeedbackController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.PlayHapticFeedback
void GlobalNamespace::HapticFeedbackController::PlayHapticFeedback(UnityEngine::XR::XRNode node, Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::PlayHapticFeedback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayHapticFeedback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(hapticPreset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, hapticPreset);
}
// Autogenerated method: HapticFeedbackController.Update
void GlobalNamespace::HapticFeedbackController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.UpdateRumbles
void GlobalNamespace::HapticFeedbackController::UpdateRumbles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::UpdateRumbles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRumbles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HapticFeedbackController.GetRumble
GlobalNamespace::HapticFeedbackController::RumbleData* GlobalNamespace::HapticFeedbackController::GetRumble(UnityEngine::XR::XRNode node, ::Il2CppObject* preset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HapticFeedbackController::GetRumble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRumble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(preset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HapticFeedbackController::RumbleData*, false>(this, ___internal__method, node, preset);
}
// Writing MetadataGetter for method: HapticFeedbackController::get_continuousRumblePreset
// Il2CppName: get_continuousRumblePreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Libraries::HM::HMLib::VR::HapticPresetSO* (HapticFeedbackController::*)()>(&HapticFeedbackController::get_continuousRumblePreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), "get_continuousRumblePreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HapticFeedbackController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::*)()>(&HapticFeedbackController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HapticFeedbackController::PlayHapticFeedback
// Il2CppName: PlayHapticFeedback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::*)(UnityEngine::XR::XRNode, Libraries::HM::HMLib::VR::HapticPresetSO*)>(&HapticFeedbackController::PlayHapticFeedback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), "PlayHapticFeedback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<Libraries::HM::HMLib::VR::HapticPresetSO*>()});
  }
};
// Writing MetadataGetter for method: HapticFeedbackController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::*)()>(&HapticFeedbackController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HapticFeedbackController::UpdateRumbles
// Il2CppName: UpdateRumbles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::*)()>(&HapticFeedbackController::UpdateRumbles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), "UpdateRumbles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HapticFeedbackController::GetRumble
// Il2CppName: GetRumble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HapticFeedbackController::RumbleData* (HapticFeedbackController::*)(UnityEngine::XR::XRNode, ::Il2CppObject*)>(&HapticFeedbackController::GetRumble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), "GetRumble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: HapticFeedbackController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::*)()>(&HapticFeedbackController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::*)()>(&HapticFeedbackController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HapticFeedbackController/RumbleData
#include "GlobalNamespace/HapticFeedbackController_RumbleData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HapticFeedbackController::RumbleData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::RumbleData::*)()>(&HapticFeedbackController::RumbleData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController::RumbleData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HapticFeedbackController::RumbleData::*)()>(&HapticFeedbackController::RumbleData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HapticFeedbackController::RumbleData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK OpenVR
GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_OpenVR() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformSDK::_get_OpenVR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "OpenVR"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK OpenVR
void GlobalNamespace::VRPlatformSDK::_set_OpenVR(GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformSDK::_set_OpenVR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "OpenVR", value));
}
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK Oculus
GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformSDK::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK Oculus
void GlobalNamespace::VRPlatformSDK::_set_Oculus(GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformSDK::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "Oculus", value));
}
// Autogenerated static field getter
// Get static field: static public VRPlatformSDK Unknown
GlobalNamespace::VRPlatformSDK GlobalNamespace::VRPlatformSDK::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformSDK::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRPlatformSDK>("", "VRPlatformSDK", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public VRPlatformSDK Unknown
void GlobalNamespace::VRPlatformSDK::_set_Unknown(GlobalNamespace::VRPlatformSDK value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformSDK::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRPlatformSDK", "Unknown", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public XRDeviceModel Unknown
GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel Unknown
void GlobalNamespace::XRDeviceModel::_set_Unknown(GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusRift
GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusRift() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_get_OculusRift");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusRift"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusRift
void GlobalNamespace::XRDeviceModel::_set_OculusRift(GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_set_OculusRift");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusRift", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusQuest
GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusQuest() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_get_OculusQuest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusQuest"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusQuest
void GlobalNamespace::XRDeviceModel::_set_OculusQuest(GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_set_OculusQuest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusQuest", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel OculusQuestLink
GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_OculusQuestLink() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_get_OculusQuestLink");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "OculusQuestLink"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel OculusQuestLink
void GlobalNamespace::XRDeviceModel::_set_OculusQuestLink(GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_set_OculusQuestLink");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "OculusQuestLink", value));
}
// Autogenerated static field getter
// Get static field: static public XRDeviceModel Other
GlobalNamespace::XRDeviceModel GlobalNamespace::XRDeviceModel::_get_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_get_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::XRDeviceModel>("", "XRDeviceModel", "Other"));
}
// Autogenerated static field setter
// Set static field: static public XRDeviceModel Other
void GlobalNamespace::XRDeviceModel::_set_Other(GlobalNamespace::XRDeviceModel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRDeviceModel::_set_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "XRDeviceModel", "Other", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IVRPlatformHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::add_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::add_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_hmdUnmountedEvent
void GlobalNamespace::IVRPlatformHelper::add_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_hmdUnmountedEvent
void GlobalNamespace::IVRPlatformHelper::remove_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_hmdMountedEvent
void GlobalNamespace::IVRPlatformHelper::add_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_hmdMountedEvent
void GlobalNamespace::IVRPlatformHelper::remove_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IVRPlatformHelper.get_hasInputFocus
bool GlobalNamespace::IVRPlatformHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_isAlwaysWireless
bool GlobalNamespace::IVRPlatformHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformSDK GlobalNamespace::IVRPlatformHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.get_currentXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::IVRPlatformHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: IVRPlatformHelper.TriggerHapticPulse
void GlobalNamespace::IVRPlatformHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: IVRPlatformHelper.StopHaptics
void GlobalNamespace::IVRPlatformHelper::StopHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: IVRPlatformHelper.AdjustControllerTransform
void GlobalNamespace::IVRPlatformHelper::AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: IVRPlatformHelper.GetNodePose
bool GlobalNamespace::IVRPlatformHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IVRPlatformHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, nodeType, idx, pos, rot);
}
// Writing MetadataGetter for method: IVRPlatformHelper::add_inputFocusWasCapturedEvent
// Il2CppName: add_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_inputFocusWasCapturedEvent
// Il2CppName: remove_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_inputFocusWasReleasedEvent
// Il2CppName: add_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_inputFocusWasReleasedEvent
// Il2CppName: remove_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_vrFocusWasCapturedEvent
// Il2CppName: add_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_vrFocusWasCapturedEvent
// Il2CppName: remove_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_vrFocusWasReleasedEvent
// Il2CppName: add_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_vrFocusWasReleasedEvent
// Il2CppName: remove_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_hmdUnmountedEvent
// Il2CppName: add_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_hmdUnmountedEvent
// Il2CppName: remove_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_hmdMountedEvent
// Il2CppName: add_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_hmdMountedEvent
// Il2CppName: remove_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent
// Il2CppName: add_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::add_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent
// Il2CppName: remove_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action*)>(&IVRPlatformHelper::remove_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent
// Il2CppName: add_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&IVRPlatformHelper::add_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent
// Il2CppName: remove_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&IVRPlatformHelper::remove_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRPlatformHelper::*)()>(&IVRPlatformHelper::get_hasInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::get_isAlwaysWireless
// Il2CppName: get_isAlwaysWireless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRPlatformHelper::*)()>(&IVRPlatformHelper::get_isAlwaysWireless)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "get_isAlwaysWireless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::get_vrPlatformSDK
// Il2CppName: get_vrPlatformSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRPlatformSDK (IVRPlatformHelper::*)()>(&IVRPlatformHelper::get_vrPlatformSDK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "get_vrPlatformSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::get_currentXRDeviceModel
// Il2CppName: get_currentXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (IVRPlatformHelper::*)()>(&IVRPlatformHelper::get_currentXRDeviceModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "get_currentXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(UnityEngine::XR::XRNode, float, float, float)>(&IVRPlatformHelper::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::StopHaptics
// Il2CppName: StopHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(UnityEngine::XR::XRNode)>(&IVRPlatformHelper::StopHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "StopHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::AdjustControllerTransform
// Il2CppName: AdjustControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRPlatformHelper::*)(UnityEngine::XR::XRNode, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3)>(&IVRPlatformHelper::AdjustControllerTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "AdjustControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IVRPlatformHelper::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRPlatformHelper::*)(UnityEngine::XR::XRNode, int, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&IVRPlatformHelper::GetNodePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRPlatformHelper*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRPlatformUtils
#include "GlobalNamespace/VRPlatformUtils.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRPlatformUtils.GetXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::VRPlatformUtils::GetXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRPlatformUtils::GetXRDeviceModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRPlatformUtils", "GetXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: VRPlatformUtils::GetXRDeviceModel
// Il2CppName: GetXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (*)()>(&VRPlatformUtils::GetXRDeviceModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRPlatformUtils*), "GetXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusMRCManager
#include "GlobalNamespace/OculusMRCManager.hpp"
// Including type: OculusMRCManager/<>c__DisplayClass1_0
#include "GlobalNamespace/OculusMRCManager_--c__DisplayClass1_0.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusMRCManager.Init
void GlobalNamespace::OculusMRCManager::Init(System::Func_2<UnityEngine::GameObject*, UnityEngine::GameObject*>* instantiateMixedRealityBackgroundCameraGameObject, System::Func_2<UnityEngine::GameObject*, UnityEngine::GameObject*>* instantiateMixedRealityForegroundCameraGameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusMRCManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instantiateMixedRealityBackgroundCameraGameObject), ::il2cpp_utils::ExtractType(instantiateMixedRealityForegroundCameraGameObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instantiateMixedRealityBackgroundCameraGameObject, instantiateMixedRealityForegroundCameraGameObject);
}
// Writing MetadataGetter for method: OculusMRCManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusMRCManager::*)(System::Func_2<UnityEngine::GameObject*, UnityEngine::GameObject*>*, System::Func_2<UnityEngine::GameObject*, UnityEngine::GameObject*>*)>(&OculusMRCManager::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusMRCManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_2<UnityEngine::GameObject*, UnityEngine::GameObject*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<UnityEngine::GameObject*, UnityEngine::GameObject*>*>()});
  }
};
// Writing MetadataGetter for method: OculusMRCManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusMRCManager::*)()>(&OculusMRCManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusMRCManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusMRCManager::*)()>(&OculusMRCManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusMRCManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusMRCManager/<>c__DisplayClass1_0
#include "GlobalNamespace/OculusMRCManager_--c__DisplayClass1_0.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRManager/MrcCameraType
#include "GlobalNamespace/OVRManager_MrcCameraType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusMRCManager/<>c__DisplayClass1_0.<Init>b__0
UnityEngine::GameObject* GlobalNamespace::OculusMRCManager::$$c__DisplayClass1_0::$Init$b__0(UnityEngine::GameObject* mainCameraGameObject, GlobalNamespace::OVRManager_MrcCameraType cameraType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusMRCManager::$$c__DisplayClass1_0::<Init>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Init>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainCameraGameObject), ::il2cpp_utils::ExtractType(cameraType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method, mainCameraGameObject, cameraType);
}
// Writing MetadataGetter for method: OculusMRCManager::$$c__DisplayClass1_0::$Init$b__0
// Il2CppName: <Init>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (OculusMRCManager::$$c__DisplayClass1_0::*)(UnityEngine::GameObject*, GlobalNamespace::OVRManager_MrcCameraType)>(&OculusMRCManager::$$c__DisplayClass1_0::$Init$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusMRCManager::$$c__DisplayClass1_0*), "<Init>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OVRManager_MrcCameraType>()});
  }
};
// Writing MetadataGetter for method: OculusMRCManager::$$c__DisplayClass1_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusMRCManager::$$c__DisplayClass1_0::*)()>(&OculusMRCManager::$$c__DisplayClass1_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusMRCManager::$$c__DisplayClass1_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusMRCManager::$$c__DisplayClass1_0::*)()>(&OculusMRCManager::$$c__DisplayClass1_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusMRCManager::$$c__DisplayClass1_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OculusVRHelper
#include "GlobalNamespace/OculusVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OculusVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::add_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::OculusVRHelper::remove_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::add_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::OculusVRHelper::remove_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OculusVRHelper::add_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OculusVRHelper::remove_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_hmdMountedEvent
void GlobalNamespace::OculusVRHelper::add_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OculusVRHelper::remove_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::add_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::remove_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OculusVRHelper.get_hasInputFocus
bool GlobalNamespace::OculusVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OculusVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformSDK GlobalNamespace::OculusVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get_currentXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::OculusVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.get__isOVRManagerPresent
bool GlobalNamespace::OculusVRHelper::get__isOVRManagerPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::get__isOVRManagerPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__isOVRManagerPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.Update
void GlobalNamespace::OculusVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.FixedUpdate
void GlobalNamespace::OculusVRHelper::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.LateUpdate
void GlobalNamespace::OculusVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.TriggerHapticPulse
void GlobalNamespace::OculusVRHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OculusVRHelper.StopHaptics
void GlobalNamespace::OculusVRHelper::StopHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OculusVRHelper.AdjustControllerTransform
void GlobalNamespace::OculusVRHelper::AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OculusVRHelper.GetNodePose
bool GlobalNamespace::OculusVRHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, nodeType, idx, pos, rot);
}
// Autogenerated method: OculusVRHelper.EnableEventSystem
void GlobalNamespace::OculusVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OculusVRHelper.DisableEventSystem
void GlobalNamespace::OculusVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusVRHelper::DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OculusVRHelper::add_inputFocusWasCapturedEvent
// Il2CppName: add_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_inputFocusWasCapturedEvent
// Il2CppName: remove_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_inputFocusWasReleasedEvent
// Il2CppName: add_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_inputFocusWasReleasedEvent
// Il2CppName: remove_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_vrFocusWasCapturedEvent
// Il2CppName: add_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_vrFocusWasCapturedEvent
// Il2CppName: remove_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_vrFocusWasReleasedEvent
// Il2CppName: add_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_vrFocusWasReleasedEvent
// Il2CppName: remove_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_hmdUnmountedEvent
// Il2CppName: add_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_hmdUnmountedEvent
// Il2CppName: remove_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_hmdMountedEvent
// Il2CppName: add_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_hmdMountedEvent
// Il2CppName: remove_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_joystickWasCenteredThisFrameEvent
// Il2CppName: add_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::add_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_joystickWasCenteredThisFrameEvent
// Il2CppName: remove_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action*)>(&OculusVRHelper::remove_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent
// Il2CppName: add_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&OculusVRHelper::add_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent
// Il2CppName: remove_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&OculusVRHelper::remove_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusVRHelper::*)()>(&OculusVRHelper::get_hasInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::get_isAlwaysWireless
// Il2CppName: get_isAlwaysWireless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusVRHelper::*)()>(&OculusVRHelper::get_isAlwaysWireless)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "get_isAlwaysWireless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::get_vrPlatformSDK
// Il2CppName: get_vrPlatformSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRPlatformSDK (OculusVRHelper::*)()>(&OculusVRHelper::get_vrPlatformSDK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "get_vrPlatformSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::get_currentXRDeviceModel
// Il2CppName: get_currentXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (OculusVRHelper::*)()>(&OculusVRHelper::get_currentXRDeviceModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "get_currentXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::get__isOVRManagerPresent
// Il2CppName: get__isOVRManagerPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusVRHelper::*)()>(&OculusVRHelper::get__isOVRManagerPresent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "get__isOVRManagerPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(UnityEngine::XR::XRNode, float, float, float)>(&OculusVRHelper::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::StopHaptics
// Il2CppName: StopHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(UnityEngine::XR::XRNode)>(&OculusVRHelper::StopHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "StopHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::AdjustControllerTransform
// Il2CppName: AdjustControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)(UnityEngine::XR::XRNode, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3)>(&OculusVRHelper::AdjustControllerTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "AdjustControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OculusVRHelper::*)(UnityEngine::XR::XRNode, int, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&OculusVRHelper::GetNodePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::EnableEventSystem
// Il2CppName: EnableEventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::EnableEventSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "EnableEventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::DisableEventSystem
// Il2CppName: DisableEventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::DisableEventSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), "DisableEventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OculusVRHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OculusVRHelper::*)()>(&OculusVRHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OculusVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IOpenVRHaptics.TriggerHapticPulse
void GlobalNamespace::IOpenVRHaptics::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IOpenVRHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: IOpenVRHaptics.Destroy
void GlobalNamespace::IOpenVRHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IOpenVRHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IOpenVRHaptics::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOpenVRHaptics::*)(UnityEngine::XR::XRNode, float, float, float)>(&IOpenVRHaptics::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOpenVRHaptics*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IOpenVRHaptics::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IOpenVRHaptics::*)()>(&IOpenVRHaptics::Destroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IOpenVRHaptics*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleOpenVrOpenVrHaptics
#include "GlobalNamespace/SimpleOpenVrOpenVrHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleOpenVrOpenVrHaptics.TriggerHapticPulse
void GlobalNamespace::SimpleOpenVrOpenVrHaptics::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleOpenVrOpenVrHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: SimpleOpenVrOpenVrHaptics.Destroy
void GlobalNamespace::SimpleOpenVrOpenVrHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleOpenVrOpenVrHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleOpenVrOpenVrHaptics::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleOpenVrOpenVrHaptics::*)(UnityEngine::XR::XRNode, float, float, float)>(&SimpleOpenVrOpenVrHaptics::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleOpenVrOpenVrHaptics*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SimpleOpenVrOpenVrHaptics::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleOpenVrOpenVrHaptics::*)()>(&SimpleOpenVrOpenVrHaptics::Destroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleOpenVrOpenVrHaptics*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleOpenVrOpenVrHaptics::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleOpenVrOpenVrHaptics::*)()>(&SimpleOpenVrOpenVrHaptics::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleOpenVrOpenVrHaptics*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleOpenVrOpenVrHaptics::*)()>(&SimpleOpenVrOpenVrHaptics::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleOpenVrOpenVrHaptics*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ThreadedOpenVrOpenVrHaptics
#include "GlobalNamespace/ThreadedOpenVrOpenVrHaptics.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: System.Threading.Thread
#include "System/Threading/Thread.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.TriggerHapticPulse
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.UpdateHaptics
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHaptics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.UpdateHandHaptics
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateHandHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: ThreadedOpenVrOpenVrHaptics.Destroy
void GlobalNamespace::ThreadedOpenVrOpenVrHaptics::Destroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ThreadedOpenVrOpenVrHaptics::Destroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::*)(UnityEngine::XR::XRNode, float, float, float)>(&ThreadedOpenVrOpenVrHaptics::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ThreadedOpenVrOpenVrHaptics::UpdateHaptics
// Il2CppName: UpdateHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::*)()>(&ThreadedOpenVrOpenVrHaptics::UpdateHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics*), "UpdateHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics
// Il2CppName: UpdateHandHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::*)(UnityEngine::XR::XRNode)>(&ThreadedOpenVrOpenVrHaptics::UpdateHandHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics*), "UpdateHandHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: ThreadedOpenVrOpenVrHaptics::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::*)()>(&ThreadedOpenVrOpenVrHaptics::Destroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ThreadedOpenVrOpenVrHaptics::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::*)()>(&ThreadedOpenVrOpenVrHaptics::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::*)()>(&ThreadedOpenVrOpenVrHaptics::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ThreadedOpenVrOpenVrHaptics/OpenVrHapticData
#include "GlobalNamespace/ThreadedOpenVrOpenVrHaptics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::OpenVrHapticData
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::*)(float, float)>(&ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::OpenVrHapticData<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics::OpenVrHapticData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::*)(float, float)>(&ThreadedOpenVrOpenVrHaptics::OpenVrHapticData::OpenVrHapticData<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ThreadedOpenVrOpenVrHaptics::OpenVrHapticData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OpenVRHelper
#include "GlobalNamespace/OpenVRHelper.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kMicroSecondsInSecond
float GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_get_kMicroSecondsInSecond");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kMicroSecondsInSecond"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kMicroSecondsInSecond
void GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_set_kMicroSecondsInSecond");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMicroSecondsInSecond", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kUpdateInterval
int GlobalNamespace::OpenVRHelper::_get_kUpdateInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_get_kUpdateInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kUpdateInterval"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kUpdateInterval
void GlobalNamespace::OpenVRHelper::_set_kUpdateInterval(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_set_kUpdateInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateInterval", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 kMaxDurationMs
int GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_get_kMaxDurationMs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OpenVRHelper", "kMaxDurationMs"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kMaxDurationMs
void GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_set_kMaxDurationMs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kMaxDurationMs", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kUpdateIntervalSeconds
float GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_get_kUpdateIntervalSeconds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OpenVRHelper", "kUpdateIntervalSeconds"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kUpdateIntervalSeconds
void GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::_set_kUpdateIntervalSeconds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper", "kUpdateIntervalSeconds", value));
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::add_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_hmdMountedEvent
void GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OpenVRHelper.get_hasInputFocus
bool GlobalNamespace::OpenVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_isAlwaysWireless
bool GlobalNamespace::OpenVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformSDK GlobalNamespace::OpenVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_currentXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.get_vrControllerManufacturerName
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::get_vrControllerManufacturerName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrControllerManufacturerName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.Awake
void GlobalNamespace::OpenVRHelper::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.TriggerHapticPulse
void GlobalNamespace::OpenVRHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: OpenVRHelper.StopHaptics
void GlobalNamespace::OpenVRHelper::StopHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: OpenVRHelper.AdjustControllerTransform
void GlobalNamespace::OpenVRHelper::AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: OpenVRHelper.GetNodePose
bool GlobalNamespace::OpenVRHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, nodeType, idx, pos, rot);
}
// Autogenerated method: OpenVRHelper.Update
void GlobalNamespace::OpenVRHelper::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.LateUpdate
void GlobalNamespace::OpenVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnDestroy
void GlobalNamespace::OpenVRHelper::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.DisableEventSystem
void GlobalNamespace::OpenVRHelper::DisableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::DisableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.EnableEventSystem
void GlobalNamespace::OpenVRHelper::EnableEventSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::EnableEventSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableEventSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OpenVRHelper.OnBeforeRender
void GlobalNamespace::OpenVRHelper::OnBeforeRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::OnBeforeRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OpenVRHelper::add_inputFocusWasCapturedEvent
// Il2CppName: add_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_inputFocusWasCapturedEvent
// Il2CppName: remove_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_inputFocusWasReleasedEvent
// Il2CppName: add_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_inputFocusWasReleasedEvent
// Il2CppName: remove_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_vrFocusWasCapturedEvent
// Il2CppName: add_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_vrFocusWasCapturedEvent
// Il2CppName: remove_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_vrFocusWasReleasedEvent
// Il2CppName: add_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_vrFocusWasReleasedEvent
// Il2CppName: remove_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_hmdUnmountedEvent
// Il2CppName: add_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_hmdUnmountedEvent
// Il2CppName: remove_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_hmdMountedEvent
// Il2CppName: add_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_hmdMountedEvent
// Il2CppName: remove_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_joystickWasCenteredThisFrameEvent
// Il2CppName: add_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::add_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_joystickWasCenteredThisFrameEvent
// Il2CppName: remove_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action*)>(&OpenVRHelper::remove_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent
// Il2CppName: add_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&OpenVRHelper::add_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent
// Il2CppName: remove_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&OpenVRHelper::remove_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OpenVRHelper::*)()>(&OpenVRHelper::get_hasInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::get_isAlwaysWireless
// Il2CppName: get_isAlwaysWireless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OpenVRHelper::*)()>(&OpenVRHelper::get_isAlwaysWireless)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "get_isAlwaysWireless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::get_vrPlatformSDK
// Il2CppName: get_vrPlatformSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRPlatformSDK (OpenVRHelper::*)()>(&OpenVRHelper::get_vrPlatformSDK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "get_vrPlatformSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::get_currentXRDeviceModel
// Il2CppName: get_currentXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (OpenVRHelper::*)()>(&OpenVRHelper::get_currentXRDeviceModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "get_currentXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::get_vrControllerManufacturerName
// Il2CppName: get_vrControllerManufacturerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName (OpenVRHelper::*)()>(&OpenVRHelper::get_vrControllerManufacturerName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "get_vrControllerManufacturerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(UnityEngine::XR::XRNode, float, float, float)>(&OpenVRHelper::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::StopHaptics
// Il2CppName: StopHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(UnityEngine::XR::XRNode)>(&OpenVRHelper::StopHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "StopHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::AdjustControllerTransform
// Il2CppName: AdjustControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)(UnityEngine::XR::XRNode, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3)>(&OpenVRHelper::AdjustControllerTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "AdjustControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OpenVRHelper::*)(UnityEngine::XR::XRNode, int, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&OpenVRHelper::GetNodePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::DisableEventSystem
// Il2CppName: DisableEventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::DisableEventSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "DisableEventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::EnableEventSystem
// Il2CppName: EnableEventSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::EnableEventSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "EnableEventSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::OnBeforeRender
// Il2CppName: OnBeforeRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::OnBeforeRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), "OnBeforeRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRHelper::*)()>(&OpenVRHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OpenVRHelper/VRControllerManufacturerName
#include "GlobalNamespace/OpenVRHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName HTC
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_HTC() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_HTC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "HTC"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName HTC
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_HTC(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_HTC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "HTC", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Oculus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Oculus");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Oculus"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Oculus
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Oculus(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Oculus");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Oculus", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Valve
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Valve() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Valve");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Valve"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Valve
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Valve(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Valve");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Valve", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Unknown
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Unknown(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
GlobalNamespace::OpenVRHelper::VRControllerManufacturerName GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Undefined() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_get_Undefined");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OpenVRHelper::VRControllerManufacturerName>("", "OpenVRHelper/VRControllerManufacturerName", "Undefined"));
}
// Autogenerated static field setter
// Set static field: static public OpenVRHelper/VRControllerManufacturerName Undefined
void GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Undefined(GlobalNamespace::OpenVRHelper::VRControllerManufacturerName value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OpenVRHelper::VRControllerManufacturerName::_set_Undefined");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OpenVRHelper/VRControllerManufacturerName", "Undefined", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PSVRHelper
#include "GlobalNamespace/PSVRHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
// Including type: XRDeviceModel
#include "GlobalNamespace/XRDeviceModel.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kContinuesRumbleImpulseStrength
float GlobalNamespace::PSVRHelper::_get_kContinuesRumbleImpulseStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::_get_kContinuesRumbleImpulseStrength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PSVRHelper", "kContinuesRumbleImpulseStrength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kContinuesRumbleImpulseStrength
void GlobalNamespace::PSVRHelper::_set_kContinuesRumbleImpulseStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::_set_kContinuesRumbleImpulseStrength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PSVRHelper", "kContinuesRumbleImpulseStrength", value));
}
// Autogenerated method: PSVRHelper.add_inputFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::add_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_inputFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::remove_inputFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_inputFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_inputFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::add_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_inputFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::remove_inputFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_inputFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_vrFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::add_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_vrFocusWasCapturedEvent
void GlobalNamespace::PSVRHelper::remove_vrFocusWasCapturedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_vrFocusWasCapturedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_vrFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::add_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_vrFocusWasReleasedEvent
void GlobalNamespace::PSVRHelper::remove_vrFocusWasReleasedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_vrFocusWasReleasedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_hmdUnmountedEvent
void GlobalNamespace::PSVRHelper::add_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_hmdUnmountedEvent
void GlobalNamespace::PSVRHelper::remove_hmdUnmountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_hmdUnmountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_hmdMountedEvent
void GlobalNamespace::PSVRHelper::add_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_hmdMountedEvent
void GlobalNamespace::PSVRHelper::remove_hmdMountedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_hmdMountedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_hmdMountedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_joystickWasCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::add_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_joystickWasCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::remove_joystickWasCenteredThisFrameEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_joystickWasCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.add_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::add_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::add_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.remove_joystickWasNotCenteredThisFrameEvent
void GlobalNamespace::PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent(System::Action_1<UnityEngine::Vector2>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PSVRHelper.get_hasInputFocus
bool GlobalNamespace::PSVRHelper::get_hasInputFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::get_hasInputFocus");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasInputFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_isAlwaysWireless
bool GlobalNamespace::PSVRHelper::get_isAlwaysWireless() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::get_isAlwaysWireless");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAlwaysWireless", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_vrPlatformSDK
GlobalNamespace::VRPlatformSDK GlobalNamespace::PSVRHelper::get_vrPlatformSDK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::get_vrPlatformSDK");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vrPlatformSDK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRPlatformSDK, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.get_currentXRDeviceModel
GlobalNamespace::XRDeviceModel GlobalNamespace::PSVRHelper::get_currentXRDeviceModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::get_currentXRDeviceModel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentXRDeviceModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::XRDeviceModel, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.LateUpdate
void GlobalNamespace::PSVRHelper::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PSVRHelper.TriggerHapticPulse
void GlobalNamespace::PSVRHelper::TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::TriggerHapticPulse");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(strength), ::il2cpp_utils::ExtractType(frequency)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, duration, strength, frequency);
}
// Autogenerated method: PSVRHelper.StopHaptics
void GlobalNamespace::PSVRHelper::StopHaptics(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::StopHaptics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopHaptics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
}
// Autogenerated method: PSVRHelper.AdjustControllerTransform
void GlobalNamespace::PSVRHelper::AdjustControllerTransform(UnityEngine::XR::XRNode node, UnityEngine::Transform* transform, UnityEngine::Vector3 position, UnityEngine::Vector3 rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::AdjustControllerTransform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, transform, position, rotation);
}
// Autogenerated method: PSVRHelper.GetNodePose
bool GlobalNamespace::PSVRHelper::GetNodePose(UnityEngine::XR::XRNode nodeType, int idx, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PSVRHelper::GetNodePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, nodeType, idx, pos, rot);
}
// Writing MetadataGetter for method: PSVRHelper::add_inputFocusWasCapturedEvent
// Il2CppName: add_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_inputFocusWasCapturedEvent
// Il2CppName: remove_inputFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_inputFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_inputFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_inputFocusWasReleasedEvent
// Il2CppName: add_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_inputFocusWasReleasedEvent
// Il2CppName: remove_inputFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_inputFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_inputFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_vrFocusWasCapturedEvent
// Il2CppName: add_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_vrFocusWasCapturedEvent
// Il2CppName: remove_vrFocusWasCapturedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_vrFocusWasCapturedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_vrFocusWasCapturedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_vrFocusWasReleasedEvent
// Il2CppName: add_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_vrFocusWasReleasedEvent
// Il2CppName: remove_vrFocusWasReleasedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_vrFocusWasReleasedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_vrFocusWasReleasedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_hmdUnmountedEvent
// Il2CppName: add_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_hmdUnmountedEvent
// Il2CppName: remove_hmdUnmountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_hmdUnmountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_hmdUnmountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_hmdMountedEvent
// Il2CppName: add_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_hmdMountedEvent
// Il2CppName: remove_hmdMountedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_hmdMountedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_hmdMountedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_joystickWasCenteredThisFrameEvent
// Il2CppName: add_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::add_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_joystickWasCenteredThisFrameEvent
// Il2CppName: remove_joystickWasCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action*)>(&PSVRHelper::remove_joystickWasCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_joystickWasCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::add_joystickWasNotCenteredThisFrameEvent
// Il2CppName: add_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&PSVRHelper::add_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "add_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent
// Il2CppName: remove_joystickWasNotCenteredThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(System::Action_1<UnityEngine::Vector2>*)>(&PSVRHelper::remove_joystickWasNotCenteredThisFrameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "remove_joystickWasNotCenteredThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector2>*>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PSVRHelper::*)()>(&PSVRHelper::get_hasInputFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PSVRHelper::get_isAlwaysWireless
// Il2CppName: get_isAlwaysWireless
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PSVRHelper::*)()>(&PSVRHelper::get_isAlwaysWireless)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "get_isAlwaysWireless", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PSVRHelper::get_vrPlatformSDK
// Il2CppName: get_vrPlatformSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRPlatformSDK (PSVRHelper::*)()>(&PSVRHelper::get_vrPlatformSDK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "get_vrPlatformSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PSVRHelper::get_currentXRDeviceModel
// Il2CppName: get_currentXRDeviceModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::XRDeviceModel (PSVRHelper::*)()>(&PSVRHelper::get_currentXRDeviceModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "get_currentXRDeviceModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PSVRHelper::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)()>(&PSVRHelper::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PSVRHelper::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(UnityEngine::XR::XRNode, float, float, float)>(&PSVRHelper::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::StopHaptics
// Il2CppName: StopHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(UnityEngine::XR::XRNode)>(&PSVRHelper::StopHaptics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "StopHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::AdjustControllerTransform
// Il2CppName: AdjustControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)(UnityEngine::XR::XRNode, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3)>(&PSVRHelper::AdjustControllerTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "AdjustControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PSVRHelper::*)(UnityEngine::XR::XRNode, int, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&PSVRHelper::GetNodePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: PSVRHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)()>(&PSVRHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PSVRHelper::*)()>(&PSVRHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PSVRHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRControllerTransformOffset
#include "GlobalNamespace/VRControllerTransformOffset.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRController.get_node
UnityEngine::XR::XRNode GlobalNamespace::VRController::get_node() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::XR::XRNode, false>(this, ___internal__method);
}
// Autogenerated method: VRController.set_node
void GlobalNamespace::VRController::set_node(UnityEngine::XR::XRNode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::set_node");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_node", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRController.get_nodeIdx
int GlobalNamespace::VRController::get_nodeIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_nodeIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_nodeIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: VRController.set_nodeIdx
void GlobalNamespace::VRController::set_nodeIdx(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::set_nodeIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nodeIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRController.get_position
UnityEngine::Vector3 GlobalNamespace::VRController::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_rotation
UnityEngine::Quaternion GlobalNamespace::VRController::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_forward
UnityEngine::Vector3 GlobalNamespace::VRController::get_forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_forward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_triggerValue
float GlobalNamespace::VRController::get_triggerValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_triggerValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_triggerValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_verticalAxisValue
float GlobalNamespace::VRController::get_verticalAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_verticalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_horizontalAxisValue
float GlobalNamespace::VRController::get_horizontalAxisValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_horizontalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_horizontalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: VRController.get_active
bool GlobalNamespace::VRController::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRController.Update
void GlobalNamespace::VRController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRController::get_node
// Il2CppName: get_node
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::XR::XRNode (VRController::*)()>(&VRController::get_node)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_node", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::set_node
// Il2CppName: set_node
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRController::*)(UnityEngine::XR::XRNode)>(&VRController::set_node)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "set_node", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: VRController::get_nodeIdx
// Il2CppName: get_nodeIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VRController::*)()>(&VRController::get_nodeIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_nodeIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::set_nodeIdx
// Il2CppName: set_nodeIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRController::*)(int)>(&VRController::set_nodeIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "set_nodeIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRController::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRController::*)()>(&VRController::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (VRController::*)()>(&VRController::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::get_forward
// Il2CppName: get_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRController::*)()>(&VRController::get_forward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::get_triggerValue
// Il2CppName: get_triggerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRController::*)()>(&VRController::get_triggerValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_triggerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::get_verticalAxisValue
// Il2CppName: get_verticalAxisValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRController::*)()>(&VRController::get_verticalAxisValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_verticalAxisValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::get_horizontalAxisValue
// Il2CppName: get_horizontalAxisValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRController::*)()>(&VRController::get_horizontalAxisValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_horizontalAxisValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRController::*)()>(&VRController::get_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRController::*)()>(&VRController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRController::*)()>(&VRController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRController::*)()>(&VRController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllerTransformOffset
#include "GlobalNamespace/VRControllerTransformOffset.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllerTransformOffset.get_positionOffset
UnityEngine::Vector3 GlobalNamespace::VRControllerTransformOffset::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllerTransformOffset::get_positionOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: VRControllerTransformOffset.get_rotationOffset
UnityEngine::Vector3 GlobalNamespace::VRControllerTransformOffset::get_rotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllerTransformOffset::get_rotationOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRControllerTransformOffset::get_positionOffset
// Il2CppName: get_positionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRControllerTransformOffset::*)()>(&VRControllerTransformOffset::get_positionOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllerTransformOffset*), "get_positionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllerTransformOffset::get_rotationOffset
// Il2CppName: get_rotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (VRControllerTransformOffset::*)()>(&VRControllerTransformOffset::get_rotationOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllerTransformOffset*), "get_rotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllerTransformOffset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllerTransformOffset::*)()>(&VRControllerTransformOffset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllerTransformOffset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllerTransformOffset::*)()>(&VRControllerTransformOffset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllerTransformOffset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kTriggerLeftHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kTriggerLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kTriggerLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kTriggerLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTriggerLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kTriggerLeftHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kTriggerLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kTriggerLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kTriggerRightHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kTriggerRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kTriggerRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kTriggerRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kTriggerRightHand
void GlobalNamespace::VRControllersInputManager::_set_kTriggerRightHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kTriggerRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kTriggerRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kVerticalLeftHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kVerticalLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kVerticalLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kVerticalLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kVerticalLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kVerticalLeftHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kVerticalLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kVerticalLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kVerticalRightHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kVerticalRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kVerticalRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kVerticalRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kVerticalRightHand
void GlobalNamespace::VRControllersInputManager::_set_kVerticalRightHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kVerticalRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kVerticalRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kHorizontalLeftHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kHorizontalLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kHorizontalLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kHorizontalLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kHorizontalLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kHorizontalLeftHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kHorizontalLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kHorizontalLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kHorizontalRightHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kHorizontalRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kHorizontalRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kHorizontalRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kHorizontalRightHand
void GlobalNamespace::VRControllersInputManager::_set_kHorizontalRightHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kHorizontalRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kHorizontalRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonLeftHandOculusTouch
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHandOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHandOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kMenuButtonLeftHandOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonLeftHandOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHandOculusTouch(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHandOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonLeftHandOculusTouch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonLeftHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kMenuButtonLeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kMenuButtonLeftHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonLeftHand
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kMenuButtonLeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonLeftHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonRightHandOculusTouch
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHandOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHandOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kMenuButtonRightHandOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonRightHandOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHandOculusTouch(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHandOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonRightHandOculusTouch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonRightHand
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kMenuButtonRightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kMenuButtonRightHand"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonRightHand
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHand(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kMenuButtonRightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonRightHand", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMenuButtonOculusTouch
::Il2CppString* GlobalNamespace::VRControllersInputManager::_get_kMenuButtonOculusTouch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_get_kMenuButtonOculusTouch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "VRControllersInputManager", "kMenuButtonOculusTouch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMenuButtonOculusTouch
void GlobalNamespace::VRControllersInputManager::_set_kMenuButtonOculusTouch(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::_set_kMenuButtonOculusTouch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersInputManager", "kMenuButtonOculusTouch", value));
}
// Autogenerated method: VRControllersInputManager.TriggerValue
float GlobalNamespace::VRControllersInputManager::TriggerValue(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::TriggerValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.VerticalAxisValue
float GlobalNamespace::VRControllersInputManager::VerticalAxisValue(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::VerticalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "VerticalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.HorizontalAxisValue
float GlobalNamespace::VRControllersInputManager::HorizontalAxisValue(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::HorizontalAxisValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HorizontalAxisValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, node);
}
// Autogenerated method: VRControllersInputManager.MenuButtonDown
bool GlobalNamespace::VRControllersInputManager::MenuButtonDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::MenuButtonDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButtonDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersInputManager.MenuButton
bool GlobalNamespace::VRControllersInputManager::MenuButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersInputManager::MenuButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRControllersInputManager::TriggerValue
// Il2CppName: TriggerValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRControllersInputManager::*)(UnityEngine::XR::XRNode)>(&VRControllersInputManager::TriggerValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), "TriggerValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: VRControllersInputManager::VerticalAxisValue
// Il2CppName: VerticalAxisValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRControllersInputManager::*)(UnityEngine::XR::XRNode)>(&VRControllersInputManager::VerticalAxisValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), "VerticalAxisValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: VRControllersInputManager::HorizontalAxisValue
// Il2CppName: HorizontalAxisValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRControllersInputManager::*)(UnityEngine::XR::XRNode)>(&VRControllersInputManager::HorizontalAxisValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), "HorizontalAxisValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: VRControllersInputManager::MenuButtonDown
// Il2CppName: MenuButtonDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRControllersInputManager::*)()>(&VRControllersInputManager::MenuButtonDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), "MenuButtonDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersInputManager::MenuButton
// Il2CppName: MenuButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRControllersInputManager::*)()>(&VRControllersInputManager::MenuButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), "MenuButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersInputManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersInputManager::*)()>(&VRControllersInputManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersInputManager::*)()>(&VRControllersInputManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersInputManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: XRNodeExtensions
#include "GlobalNamespace/XRNodeExtensions.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: OVRPlugin/Node
#include "GlobalNamespace/OVRPlugin_Node.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: XRNodeExtensions.OculusNode
GlobalNamespace::OVRPlugin::Node GlobalNamespace::XRNodeExtensions::OculusNode(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRNodeExtensions::OculusNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XRNodeExtensions", "OculusNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Node, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, node);
}
// Autogenerated method: XRNodeExtensions.PSMoveDeviceIndex
int GlobalNamespace::XRNodeExtensions::PSMoveDeviceIndex(UnityEngine::XR::XRNode node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::XRNodeExtensions::PSMoveDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "XRNodeExtensions", "PSMoveDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, node);
}
// Writing MetadataGetter for method: XRNodeExtensions::OculusNode
// Il2CppName: OculusNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRPlugin::Node (*)(UnityEngine::XR::XRNode)>(&XRNodeExtensions::OculusNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeExtensions*), "OculusNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Writing MetadataGetter for method: XRNodeExtensions::PSMoveDeviceIndex
// Il2CppName: PSMoveDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::XR::XRNode)>(&XRNodeExtensions::PSMoveDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(XRNodeExtensions*), "PSMoveDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolSO
#include "GlobalNamespace/BoolSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BoolSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolSO::*)()>(&BoolSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolSO::*)()>(&BoolSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BoolWithDefaultValueSO
#include "GlobalNamespace/BoolWithDefaultValueSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BoolWithDefaultValueSO.OnEnable
void GlobalNamespace::BoolWithDefaultValueSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoolWithDefaultValueSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BoolWithDefaultValueSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolWithDefaultValueSO::*)()>(&BoolWithDefaultValueSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolWithDefaultValueSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BoolWithDefaultValueSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolWithDefaultValueSO::*)()>(&BoolWithDefaultValueSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolWithDefaultValueSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BoolWithDefaultValueSO::*)()>(&BoolWithDefaultValueSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BoolWithDefaultValueSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DoubleSO
#include "GlobalNamespace/DoubleSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DoubleSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DoubleSO::*)()>(&DoubleSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DoubleSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DoubleSO::*)()>(&DoubleSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DoubleSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FloatSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSO::*)()>(&FloatSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FloatSO::*)()>(&FloatSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IObservableChange
#include "GlobalNamespace/IObservableChange.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IObservableChange.add_didChangeEvent
void GlobalNamespace::IObservableChange::add_didChangeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IObservableChange::add_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IObservableChange.remove_didChangeEvent
void GlobalNamespace::IObservableChange::remove_didChangeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IObservableChange::remove_didChangeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: IObservableChange::add_didChangeEvent
// Il2CppName: add_didChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IObservableChange::*)(System::Action*)>(&IObservableChange::add_didChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IObservableChange*), "add_didChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IObservableChange::remove_didChangeEvent
// Il2CppName: remove_didChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IObservableChange::*)(System::Action*)>(&IObservableChange::remove_didChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IObservableChange*), "remove_didChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IntSO
#include "GlobalNamespace/IntSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IntSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntSO::*)()>(&IntSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IntSO::*)()>(&IntSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IntSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SOVariableAttribute
#include "GlobalNamespace/SOVariableAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SOVariableAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SOVariableAttribute::*)()>(&SOVariableAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SOVariableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SOVariableAttribute::*)()>(&SOVariableAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SOVariableAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
