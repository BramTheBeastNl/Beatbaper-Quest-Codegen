// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.PlatformSettings
#include "Oculus/Platform/PlatformSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Oculus.Platform.PlatformSettings instance
Oculus::Platform::PlatformSettings* Oculus::Platform::PlatformSettings::_get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("_get_instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Oculus::Platform::PlatformSettings*>("Oculus.Platform", "PlatformSettings", "instance"));
}
// Autogenerated static field setter
// Set static field: static private Oculus.Platform.PlatformSettings instance
void Oculus::Platform::PlatformSettings::_set_instance(Oculus::Platform::PlatformSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("_set_instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Oculus.Platform", "PlatformSettings", "instance", value));
}
// Autogenerated method: Oculus.Platform.PlatformSettings.get_AppID
::Il2CppString* Oculus::Platform::PlatformSettings::get_AppID() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("get_AppID");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "get_AppID", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.set_AppID
void Oculus::Platform::PlatformSettings::set_AppID(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("set_AppID");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "set_AppID", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.get_MobileAppID
::Il2CppString* Oculus::Platform::PlatformSettings::get_MobileAppID() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("get_MobileAppID");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "get_MobileAppID", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.set_MobileAppID
void Oculus::Platform::PlatformSettings::set_MobileAppID(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("set_MobileAppID");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "set_MobileAppID", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.get_UseStandalonePlatform
bool Oculus::Platform::PlatformSettings::get_UseStandalonePlatform() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("get_UseStandalonePlatform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "get_UseStandalonePlatform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.set_UseStandalonePlatform
void Oculus::Platform::PlatformSettings::set_UseStandalonePlatform(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("set_UseStandalonePlatform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "set_UseStandalonePlatform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.get_Instance
Oculus::Platform::PlatformSettings* Oculus::Platform::PlatformSettings::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("get_Instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "get_Instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Oculus::Platform::PlatformSettings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Oculus.Platform.PlatformSettings.set_Instance
void Oculus::Platform::PlatformSettings::set_Instance(Oculus::Platform::PlatformSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Oculus::Platform").WithContext("PlatformSettings").WithContext("set_Instance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Oculus.Platform", "PlatformSettings", "set_Instance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
