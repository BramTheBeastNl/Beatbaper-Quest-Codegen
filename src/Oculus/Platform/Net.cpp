// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.Net
#include "Oculus\Platform\Net.hpp"
// Including type: Oculus.Platform.Packet
#include "Oculus\Platform\Packet.hpp"
// Including type: Oculus.Platform.SendPolicy
#include "Oculus\Platform\SendPolicy.hpp"
// Including type: Oculus.Platform.Request`1
#include "Oculus\Platform\Request_1.hpp"
// Including type: Oculus.Platform.Models.PingResult
#include "Oculus\Platform\Models\PingResult.hpp"
// Including type: Oculus.Platform.Models.NetworkingPeer
#include "Oculus\Platform\Models\NetworkingPeer.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Oculus.Platform.Net.ReadPacket
Oculus::Platform::Packet* Oculus::Platform::Net::ReadPacket() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Oculus::Platform::Packet*>("Oculus.Platform", "Net", "ReadPacket"));
}
// Autogenerated method: Oculus.Platform.Net.SendPacket
bool Oculus::Platform::Net::SendPacket(uint64_t userID, ::Array<uint8_t>* bytes, Oculus::Platform::SendPolicy policy) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Oculus.Platform", "Net", "SendPacket", userID, bytes, policy));
}
// Autogenerated method: Oculus.Platform.Net.Connect
void Oculus::Platform::Net::Connect(uint64_t userID) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "Connect", userID));
}
// Autogenerated method: Oculus.Platform.Net.Accept
void Oculus::Platform::Net::Accept(uint64_t userID) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "Accept", userID));
}
// Autogenerated method: Oculus.Platform.Net.Close
void Oculus::Platform::Net::Close(uint64_t userID) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "Close", userID));
}
// Autogenerated method: Oculus.Platform.Net.IsConnected
bool Oculus::Platform::Net::IsConnected(uint64_t userID) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Oculus.Platform", "Net", "IsConnected", userID));
}
// Autogenerated method: Oculus.Platform.Net.SendPacketToCurrentRoom
bool Oculus::Platform::Net::SendPacketToCurrentRoom(::Array<uint8_t>* bytes, Oculus::Platform::SendPolicy policy) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Oculus.Platform", "Net", "SendPacketToCurrentRoom", bytes, policy));
}
// Autogenerated method: Oculus.Platform.Net.AcceptForCurrentRoom
bool Oculus::Platform::Net::AcceptForCurrentRoom() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Oculus.Platform", "Net", "AcceptForCurrentRoom"));
}
// Autogenerated method: Oculus.Platform.Net.CloseForCurrentRoom
void Oculus::Platform::Net::CloseForCurrentRoom() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "CloseForCurrentRoom"));
}
// Autogenerated method: Oculus.Platform.Net.Ping
Oculus::Platform::Request_1<Oculus::Platform::Models::PingResult*>* Oculus::Platform::Net::Ping(uint64_t userID) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Oculus::Platform::Request_1<Oculus::Platform::Models::PingResult*>*>("Oculus.Platform", "Net", "Ping", userID));
}
// Autogenerated method: Oculus.Platform.Net.SetConnectionStateChangedCallback
void Oculus::Platform::Net::SetConnectionStateChangedCallback(typename Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>::Callback* callback) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "SetConnectionStateChangedCallback", callback));
}
// Autogenerated method: Oculus.Platform.Net.SetPeerConnectRequestCallback
void Oculus::Platform::Net::SetPeerConnectRequestCallback(typename Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>::Callback* callback) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "SetPeerConnectRequestCallback", callback));
}
// Autogenerated method: Oculus.Platform.Net.SetPingResultNotificationCallback
void Oculus::Platform::Net::SetPingResultNotificationCallback(typename Oculus::Platform::Message_1<Oculus::Platform::Models::PingResult*>::Callback* callback) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Oculus.Platform", "Net", "SetPingResultNotificationCallback", callback));
}
