// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SaberBurnMarkArea
#include "GlobalNamespace/SaberBurnMarkArea.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberBurnMarkArea.Start
void GlobalNamespace::SaberBurnMarkArea::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnDestroy
void GlobalNamespace::SaberBurnMarkArea::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnEnable
void GlobalNamespace::SaberBurnMarkArea::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.OnDisable
void GlobalNamespace::SaberBurnMarkArea::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkArea.GetBurnMarkPos
bool GlobalNamespace::SaberBurnMarkArea::GetBurnMarkPos(UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bladeBottomPos, bladeTopPos, burnMarkPos);
}
// Autogenerated method: SaberBurnMarkArea.WorldToCameraBurnMarkPos
UnityEngine::Vector3 GlobalNamespace::SaberBurnMarkArea::WorldToCameraBurnMarkPos(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::WorldToCameraBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WorldToCameraBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos);
}
// Autogenerated method: SaberBurnMarkArea.LateUpdate
void GlobalNamespace::SaberBurnMarkArea::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkArea::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberBurnMarkArea::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::GetBurnMarkPos
// Il2CppName: GetBurnMarkPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SaberBurnMarkArea::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&)>(&SaberBurnMarkArea::GetBurnMarkPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "GetBurnMarkPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::WorldToCameraBurnMarkPos
// Il2CppName: WorldToCameraBurnMarkPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SaberBurnMarkArea::*)(UnityEngine::Vector3)>(&SaberBurnMarkArea::WorldToCameraBurnMarkPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "WorldToCameraBurnMarkPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkArea::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkArea::*)()>(&SaberBurnMarkArea::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkArea*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SaberBurnMarkSparkles
#include "GlobalNamespace/SaberBurnMarkSparkles.hpp"
// Including type: UnityEngine.BoxCollider
#include "UnityEngine/BoxCollider.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberBurnMarkSparkles.Start
void GlobalNamespace::SaberBurnMarkSparkles::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnDestroy
void GlobalNamespace::SaberBurnMarkSparkles::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnEnable
void GlobalNamespace::SaberBurnMarkSparkles::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.OnDisable
void GlobalNamespace::SaberBurnMarkSparkles::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberBurnMarkSparkles.GetBurnMarkPos
bool GlobalNamespace::SaberBurnMarkSparkles::GetBurnMarkPos(UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::GetBurnMarkPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBurnMarkPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bladeBottomPos), ::il2cpp_utils::ExtractType(bladeTopPos), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bladeBottomPos, bladeTopPos, burnMarkPos);
}
// Autogenerated method: SaberBurnMarkSparkles.LateUpdate
void GlobalNamespace::SaberBurnMarkSparkles::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberBurnMarkSparkles::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberBurnMarkSparkles::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkSparkles::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkSparkles::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkSparkles::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkSparkles::GetBurnMarkPos
// Il2CppName: GetBurnMarkPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SaberBurnMarkSparkles::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&)>(&SaberBurnMarkSparkles::GetBurnMarkPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), "GetBurnMarkPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkSparkles::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberBurnMarkSparkles::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberBurnMarkSparkles::*)()>(&SaberBurnMarkSparkles::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberBurnMarkSparkles*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberTrail
#include "GlobalNamespace/SaberTrail.hpp"
// Including type: SaberTrailRenderer
#include "GlobalNamespace/SaberTrailRenderer.hpp"
// Including type: IBladeMovementData
#include "GlobalNamespace/IBladeMovementData.hpp"
// Including type: TrailElementCollection
#include "GlobalNamespace/TrailElementCollection.hpp"
// Including type: BladeMovementDataElement
#include "GlobalNamespace/BladeMovementDataElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kIgnoredFramesCount
int GlobalNamespace::SaberTrail::_get_kIgnoredFramesCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::_get_kIgnoredFramesCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrail", "kIgnoredFramesCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kIgnoredFramesCount
void GlobalNamespace::SaberTrail::_set_kIgnoredFramesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::_set_kIgnoredFramesCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrail", "kIgnoredFramesCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kSnapshotCapacityMargin
int GlobalNamespace::SaberTrail::_get_kSnapshotCapacityMargin() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::_get_kSnapshotCapacityMargin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrail", "kSnapshotCapacityMargin"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kSnapshotCapacityMargin
void GlobalNamespace::SaberTrail::_set_kSnapshotCapacityMargin(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::_set_kSnapshotCapacityMargin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrail", "kSnapshotCapacityMargin", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kScaleCheckFramesInterval
int GlobalNamespace::SaberTrail::_get_kScaleCheckFramesInterval() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::_get_kScaleCheckFramesInterval");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SaberTrail", "kScaleCheckFramesInterval"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kScaleCheckFramesInterval
void GlobalNamespace::SaberTrail::_set_kScaleCheckFramesInterval(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::_set_kScaleCheckFramesInterval");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrail", "kScaleCheckFramesInterval", value));
}
// Autogenerated method: SaberTrail.Awake
void GlobalNamespace::SaberTrail::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.Setup
void GlobalNamespace::SaberTrail::Setup(UnityEngine::Color color, GlobalNamespace::IBladeMovementData* movementData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color), ::il2cpp_utils::ExtractType(movementData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color, movementData);
}
// Autogenerated method: SaberTrail.Init
void GlobalNamespace::SaberTrail::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.ResetTrailData
void GlobalNamespace::SaberTrail::ResetTrailData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::ResetTrailData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetTrailData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.LateUpdate
void GlobalNamespace::SaberTrail::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.OnEnable
void GlobalNamespace::SaberTrail::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.OnDisable
void GlobalNamespace::SaberTrail::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.OnDestroy
void GlobalNamespace::SaberTrail::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrail.GetTrailWidth
float GlobalNamespace::SaberTrail::GetTrailWidth(GlobalNamespace::BladeMovementDataElement lastAddedData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::GetTrailWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrailWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastAddedData)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, lastAddedData);
}
// Autogenerated method: SaberTrail.OnDrawGizmosSelected
void GlobalNamespace::SaberTrail::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrail::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberTrail::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)(UnityEngine::Color, GlobalNamespace::IBladeMovementData*)>(&SaberTrail::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBladeMovementData*>()});
  }
};
// Writing MetadataGetter for method: SaberTrail::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::ResetTrailData
// Il2CppName: ResetTrailData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::ResetTrailData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "ResetTrailData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::GetTrailWidth
// Il2CppName: GetTrailWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SaberTrail::*)(GlobalNamespace::BladeMovementDataElement)>(&SaberTrail::GetTrailWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "GetTrailWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BladeMovementDataElement>()});
  }
};
// Writing MetadataGetter for method: SaberTrail::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::OnDrawGizmosSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrail::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrail::*)()>(&SaberTrail::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrail*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SaberTrailRenderer
#include "GlobalNamespace/SaberTrailRenderer.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TrailElementCollection
#include "GlobalNamespace/TrailElementCollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1AB9C
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Bounds _bounds
UnityEngine::Bounds GlobalNamespace::SaberTrailRenderer::_get__bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::_get__bounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Bounds>("", "SaberTrailRenderer", "_bounds"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Bounds _bounds
void GlobalNamespace::SaberTrailRenderer::_set__bounds(UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::_set__bounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "_bounds", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMinMotionBlurSpeed
float GlobalNamespace::SaberTrailRenderer::_get_kMinMotionBlurSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::_get_kMinMotionBlurSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberTrailRenderer", "kMinMotionBlurSpeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMinMotionBlurSpeed
void GlobalNamespace::SaberTrailRenderer::_set_kMinMotionBlurSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::_set_kMinMotionBlurSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "kMinMotionBlurSpeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kMotionBlurStrength
float GlobalNamespace::SaberTrailRenderer::_get_kMotionBlurStrength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::_get_kMotionBlurStrength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "SaberTrailRenderer", "kMotionBlurStrength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kMotionBlurStrength
void GlobalNamespace::SaberTrailRenderer::_set_kMotionBlurStrength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::_set_kMotionBlurStrength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SaberTrailRenderer", "kMotionBlurStrength", value));
}
// Autogenerated method: SaberTrailRenderer.Init
void GlobalNamespace::SaberTrailRenderer::Init(float trailWidth, float trailDuration, int granularity, float whiteSectionMaxDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::Init");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailWidth), ::il2cpp_utils::ExtractType(trailDuration), ::il2cpp_utils::ExtractType(granularity), ::il2cpp_utils::ExtractType(whiteSectionMaxDuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, trailWidth, trailDuration, granularity, whiteSectionMaxDuration);
}
// Autogenerated method: SaberTrailRenderer.OnDestroy
void GlobalNamespace::SaberTrailRenderer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.OnValidate
void GlobalNamespace::SaberTrailRenderer::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.OnEnable
void GlobalNamespace::SaberTrailRenderer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.OnDisable
void GlobalNamespace::SaberTrailRenderer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer.SetTrailWidth
void GlobalNamespace::SaberTrailRenderer::SetTrailWidth(float width) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::SetTrailWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrailWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, width);
}
// Autogenerated method: SaberTrailRenderer.UpdateMesh
void GlobalNamespace::SaberTrailRenderer::UpdateMesh(GlobalNamespace::TrailElementCollection* trailElementCollection, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::UpdateMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailElementCollection), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, trailElementCollection, color);
}
// Autogenerated method: SaberTrailRenderer.UpdateVertices
void GlobalNamespace::SaberTrailRenderer::UpdateVertices(GlobalNamespace::TrailElementCollection* trailElementCollection, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::UpdateVertices");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(trailElementCollection), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, trailElementCollection, color);
}
// Autogenerated method: SaberTrailRenderer.UpdateIndices
void GlobalNamespace::SaberTrailRenderer::UpdateIndices() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::UpdateIndices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateIndices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberTrailRenderer..cctor
void GlobalNamespace::SaberTrailRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberTrailRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SaberTrailRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SaberTrailRenderer::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)(float, float, int, float)>(&SaberTrailRenderer::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::SetTrailWidth
// Il2CppName: SetTrailWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)(float)>(&SaberTrailRenderer::SetTrailWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "SetTrailWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::UpdateMesh
// Il2CppName: UpdateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)(GlobalNamespace::TrailElementCollection*, UnityEngine::Color)>(&SaberTrailRenderer::UpdateMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "UpdateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TrailElementCollection*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::UpdateVertices
// Il2CppName: UpdateVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)(GlobalNamespace::TrailElementCollection*, UnityEngine::Color)>(&SaberTrailRenderer::UpdateVertices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "UpdateVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TrailElementCollection*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::UpdateIndices
// Il2CppName: UpdateIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::UpdateIndices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), "UpdateIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberTrailRenderer::*)()>(&SaberTrailRenderer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberTrailRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SaberTrailRenderer::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberTrailRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SplineUtils
#include "GlobalNamespace/SplineUtils.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SplineUtils.Interpolate
UnityEngine::Vector3 GlobalNamespace::SplineUtils::Interpolate(UnityEngine::Vector3 t0, UnityEngine::Vector3 p0, UnityEngine::Vector3 p1, UnityEngine::Vector3 t1, float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SplineUtils::Interpolate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SplineUtils", "Interpolate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t0), ::il2cpp_utils::ExtractType(p0), ::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(t1), ::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t0, p0, p1, t1, f);
}
// Writing MetadataGetter for method: SplineUtils::Interpolate
// Il2CppName: Interpolate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&SplineUtils::Interpolate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SplineUtils*), "Interpolate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrailElement
#include "GlobalNamespace/TrailElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrailElement.get_position
UnityEngine::Vector3 GlobalNamespace::TrailElement::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: TrailElement.set_position
void GlobalNamespace::TrailElement::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TrailElement.get_normal
UnityEngine::Vector3 GlobalNamespace::TrailElement::get_normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::get_normal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_normal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: TrailElement.set_normal
void GlobalNamespace::TrailElement::set_normal(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::set_normal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_normal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TrailElement.get_distance
float GlobalNamespace::TrailElement::get_distance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::get_distance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_distance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrailElement.set_distance
void GlobalNamespace::TrailElement::set_distance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::set_distance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_distance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TrailElement.get_time
float GlobalNamespace::TrailElement::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrailElement.set_time
void GlobalNamespace::TrailElement::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TrailElement.SetData
void GlobalNamespace::TrailElement::SetData(UnityEngine::Vector3 start, UnityEngine::Vector3 end, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, start, end, time);
}
// Autogenerated method: TrailElement.SetDistance
void GlobalNamespace::TrailElement::SetDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElement::SetDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: TrailElement::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TrailElement::*)()>(&TrailElement::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElement::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)(UnityEngine::Vector3)>(&TrailElement::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TrailElement::get_normal
// Il2CppName: get_normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TrailElement::*)()>(&TrailElement::get_normal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "get_normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElement::set_normal
// Il2CppName: set_normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)(UnityEngine::Vector3)>(&TrailElement::set_normal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "set_normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TrailElement::get_distance
// Il2CppName: get_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrailElement::*)()>(&TrailElement::get_distance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "get_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElement::set_distance
// Il2CppName: set_distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)(float)>(&TrailElement::set_distance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "set_distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElement::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrailElement::*)()>(&TrailElement::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElement::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)(float)>(&TrailElement::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElement::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElement::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElement::SetDistance
// Il2CppName: SetDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)(float)>(&TrailElement::SetDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), "SetDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElement::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)()>(&TrailElement::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElement::*)()>(&TrailElement::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TrailElementCollection
#include "GlobalNamespace/TrailElementCollection.hpp"
// Including type: TrailElement
#include "GlobalNamespace/TrailElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrailElementCollection.get_capacity
int GlobalNamespace::TrailElementCollection::get_capacity() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::get_capacity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capacity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TrailElementCollection.get_head
GlobalNamespace::TrailElement* GlobalNamespace::TrailElementCollection::get_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::get_head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::TrailElement*, false>(this, ___internal__method);
}
// Autogenerated method: TrailElementCollection.get_Item
GlobalNamespace::TrailElement* GlobalNamespace::TrailElementCollection::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::TrailElement*, false>(this, ___internal__method, index);
}
// Autogenerated method: TrailElementCollection.InitSnapshots
void GlobalNamespace::TrailElementCollection::InitSnapshots(UnityEngine::Vector3 defaultStartPosition, UnityEngine::Vector3 defaultEndPosition, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::InitSnapshots");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitSnapshots", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultStartPosition), ::il2cpp_utils::ExtractType(defaultEndPosition), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, defaultStartPosition, defaultEndPosition, time);
}
// Autogenerated method: TrailElementCollection.MoveTailToHead
void GlobalNamespace::TrailElementCollection::MoveTailToHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::MoveTailToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTailToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailElementCollection.UpdateDistances
void GlobalNamespace::TrailElementCollection::UpdateDistances() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::UpdateDistances");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateDistances", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailElementCollection.InterpolateByLen
UnityEngine::Vector3 GlobalNamespace::TrailElementCollection::InterpolateByLen(float tl) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::InterpolateByLen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InterpolateByLen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, tl);
}
// Autogenerated method: TrailElementCollection.InterpolateNormalByLen
UnityEngine::Vector3 GlobalNamespace::TrailElementCollection::InterpolateNormalByLen(float tl) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::InterpolateNormalByLen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InterpolateNormalByLen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, tl);
}
// Autogenerated method: TrailElementCollection.InterpolateTimeByLen
float GlobalNamespace::TrailElementCollection::InterpolateTimeByLen(float tl) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::InterpolateTimeByLen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InterpolateTimeByLen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tl)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, tl);
}
// Autogenerated method: TrailElementCollection.LenToSegment
int GlobalNamespace::TrailElementCollection::LenToSegment(float t, float& localF) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::LenToSegment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LenToSegment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, t, localF);
}
// Autogenerated method: TrailElementCollection.GetElementWithinBoundary
GlobalNamespace::TrailElement* GlobalNamespace::TrailElementCollection::GetElementWithinBoundary(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::GetElementWithinBoundary");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetElementWithinBoundary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::TrailElement*, false>(this, ___internal__method, index);
}
// Writing MetadataGetter for method: TrailElementCollection::get_capacity
// Il2CppName: get_capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrailElementCollection::*)()>(&TrailElementCollection::get_capacity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "get_capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::get_head
// Il2CppName: get_head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrailElement* (TrailElementCollection::*)()>(&TrailElementCollection::get_head)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "get_head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrailElement* (TrailElementCollection::*)(int)>(&TrailElementCollection::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)(int, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElementCollection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)(int, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElementCollection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InitSnapshots
// Il2CppName: InitSnapshots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&TrailElementCollection::InitSnapshots)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InitSnapshots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::MoveTailToHead
// Il2CppName: MoveTailToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)()>(&TrailElementCollection::MoveTailToHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "MoveTailToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::UpdateDistances
// Il2CppName: UpdateDistances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailElementCollection::*)()>(&TrailElementCollection::UpdateDistances)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "UpdateDistances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InterpolateByLen
// Il2CppName: InterpolateByLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TrailElementCollection::*)(float)>(&TrailElementCollection::InterpolateByLen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InterpolateByLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InterpolateNormalByLen
// Il2CppName: InterpolateNormalByLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (TrailElementCollection::*)(float)>(&TrailElementCollection::InterpolateNormalByLen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InterpolateNormalByLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::InterpolateTimeByLen
// Il2CppName: InterpolateTimeByLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrailElementCollection::*)(float)>(&TrailElementCollection::InterpolateTimeByLen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "InterpolateTimeByLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::LenToSegment
// Il2CppName: LenToSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrailElementCollection::*)(float, float&)>(&TrailElementCollection::LenToSegment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "LenToSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: TrailElementCollection::GetElementWithinBoundary
// Il2CppName: GetElementWithinBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrailElement* (TrailElementCollection::*)(int)>(&TrailElementCollection::GetElementWithinBoundary)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailElementCollection*), "GetElementWithinBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShockwaveEffect
#include "GlobalNamespace/ShockwaveEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: IntSO
#include "GlobalNamespace/IntSO.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShockwaveEffect.Start
void GlobalNamespace::ShockwaveEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShockwaveEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShockwaveEffect.SpawnShockwave
void GlobalNamespace::ShockwaveEffect::SpawnShockwave(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShockwaveEffect::SpawnShockwave");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnShockwave", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Writing MetadataGetter for method: ShockwaveEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShockwaveEffect::*)()>(&ShockwaveEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShockwaveEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShockwaveEffect::SpawnShockwave
// Il2CppName: SpawnShockwave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShockwaveEffect::*)(UnityEngine::Vector3)>(&ShockwaveEffect::SpawnShockwave)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShockwaveEffect*), "SpawnShockwave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: ShockwaveEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShockwaveEffect::*)()>(&ShockwaveEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShockwaveEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShockwaveEffect::*)()>(&ShockwaveEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShockwaveEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnLaserAnimation
#include "GlobalNamespace/SpawnLaserAnimation.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpawnLaserAnimation.InitIfNeeded
void GlobalNamespace::SpawnLaserAnimation::InitIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnLaserAnimation::InitIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnLaserAnimation.LateUpdate
void GlobalNamespace::SpawnLaserAnimation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnLaserAnimation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SpawnLaserAnimation::InitIfNeeded
// Il2CppName: InitIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnLaserAnimation::*)()>(&SpawnLaserAnimation::InitIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnLaserAnimation*), "InitIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnLaserAnimation::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnLaserAnimation::*)()>(&SpawnLaserAnimation::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnLaserAnimation*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnLaserAnimation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnLaserAnimation::*)()>(&SpawnLaserAnimation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnLaserAnimation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnLaserAnimation::*)()>(&SpawnLaserAnimation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnLaserAnimation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HeadObstacleLowPassAudioEffect
#include "GlobalNamespace/HeadObstacleLowPassAudioEffect.hpp"
// Including type: PlayerHeadAndObstacleInteraction
#include "GlobalNamespace/PlayerHeadAndObstacleInteraction.hpp"
// Including type: MainAudioEffects
#include "GlobalNamespace/MainAudioEffects.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HeadObstacleLowPassAudioEffect.Update
void GlobalNamespace::HeadObstacleLowPassAudioEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HeadObstacleLowPassAudioEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HeadObstacleLowPassAudioEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeadObstacleLowPassAudioEffect::*)()>(&HeadObstacleLowPassAudioEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadObstacleLowPassAudioEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HeadObstacleLowPassAudioEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeadObstacleLowPassAudioEffect::*)()>(&HeadObstacleLowPassAudioEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadObstacleLowPassAudioEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeadObstacleLowPassAudioEffect::*)()>(&HeadObstacleLowPassAudioEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadObstacleLowPassAudioEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightPairRotationEventEffect
#include "GlobalNamespace/LightPairRotationEventEffect.hpp"
// Including type: LightPairRotationEventEffect/RotationData
#include "GlobalNamespace/LightPairRotationEventEffect_RotationData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSpeedMultiplier
float GlobalNamespace::LightPairRotationEventEffect::_get_kSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::_get_kSpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightPairRotationEventEffect", "kSpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSpeedMultiplier
void GlobalNamespace::LightPairRotationEventEffect::_set_kSpeedMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::_set_kSpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightPairRotationEventEffect", "kSpeedMultiplier", value));
}
// Autogenerated method: LightPairRotationEventEffect.Start
void GlobalNamespace::LightPairRotationEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightPairRotationEventEffect.Update
void GlobalNamespace::LightPairRotationEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightPairRotationEventEffect.OnDestroy
void GlobalNamespace::LightPairRotationEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightPairRotationEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::LightPairRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: LightPairRotationEventEffect.UpdateRotationData
void GlobalNamespace::LightPairRotationEventEffect::UpdateRotationData(int beatmapEventDataValue, GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationData, float startRotationOffset, float direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::UpdateRotationData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRotationData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventDataValue), ::il2cpp_utils::ExtractType(rotationData), ::il2cpp_utils::ExtractType(startRotationOffset), ::il2cpp_utils::ExtractType(direction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventDataValue, rotationData, startRotationOffset, direction);
}
// Writing MetadataGetter for method: LightPairRotationEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)()>(&LightPairRotationEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightPairRotationEventEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)()>(&LightPairRotationEventEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightPairRotationEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)()>(&LightPairRotationEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightPairRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&LightPairRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: LightPairRotationEventEffect::UpdateRotationData
// Il2CppName: UpdateRotationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)(int, GlobalNamespace::LightPairRotationEventEffect::RotationData*, float, float)>(&LightPairRotationEventEffect::UpdateRotationData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), "UpdateRotationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LightPairRotationEventEffect::RotationData*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LightPairRotationEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)()>(&LightPairRotationEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::*)()>(&LightPairRotationEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightPairRotationEventEffect/RotationData
#include "GlobalNamespace/LightPairRotationEventEffect_RotationData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LightPairRotationEventEffect::RotationData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::RotationData::*)()>(&LightPairRotationEventEffect::RotationData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect::RotationData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairRotationEventEffect::RotationData::*)()>(&LightPairRotationEventEffect::RotationData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairRotationEventEffect::RotationData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightPairSinMoveEventEffect
#include "GlobalNamespace/LightPairSinMoveEventEffect.hpp"
// Including type: LightPairSinMoveEventEffect/MovementData
#include "GlobalNamespace/LightPairSinMoveEventEffect_MovementData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSpeedMultiplier
float GlobalNamespace::LightPairSinMoveEventEffect::_get_kSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::_get_kSpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightPairSinMoveEventEffect", "kSpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSpeedMultiplier
void GlobalNamespace::LightPairSinMoveEventEffect::_set_kSpeedMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::_set_kSpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightPairSinMoveEventEffect", "kSpeedMultiplier", value));
}
// Autogenerated method: LightPairSinMoveEventEffect.Start
void GlobalNamespace::LightPairSinMoveEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightPairSinMoveEventEffect.Update
void GlobalNamespace::LightPairSinMoveEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightPairSinMoveEventEffect.OnDestroy
void GlobalNamespace::LightPairSinMoveEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightPairSinMoveEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::LightPairSinMoveEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: LightPairSinMoveEventEffect.UpdateMovementData
void GlobalNamespace::LightPairSinMoveEventEffect::UpdateMovementData(int beatmapEventDataValue, GlobalNamespace::LightPairSinMoveEventEffect::MovementData* movementData, float movementValueOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairSinMoveEventEffect::UpdateMovementData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMovementData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventDataValue), ::il2cpp_utils::ExtractType(movementData), ::il2cpp_utils::ExtractType(movementValueOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventDataValue, movementData, movementValueOffset);
}
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)()>(&LightPairSinMoveEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)()>(&LightPairSinMoveEventEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)()>(&LightPairSinMoveEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&LightPairSinMoveEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::UpdateMovementData
// Il2CppName: UpdateMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)(int, GlobalNamespace::LightPairSinMoveEventEffect::MovementData*, float)>(&LightPairSinMoveEventEffect::UpdateMovementData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), "UpdateMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LightPairSinMoveEventEffect::MovementData*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)()>(&LightPairSinMoveEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::*)()>(&LightPairSinMoveEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightPairSinMoveEventEffect/MovementData
#include "GlobalNamespace/LightPairSinMoveEventEffect_MovementData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LightPairSinMoveEventEffect::MovementData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::MovementData::*)()>(&LightPairSinMoveEventEffect::MovementData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect::MovementData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightPairSinMoveEventEffect::MovementData::*)()>(&LightPairSinMoveEventEffect::MovementData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightPairSinMoveEventEffect::MovementData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightRotationEventEffect
#include "GlobalNamespace/LightRotationEventEffect.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSpeedMultiplier
float GlobalNamespace::LightRotationEventEffect::_get_kSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightRotationEventEffect::_get_kSpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightRotationEventEffect", "kSpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSpeedMultiplier
void GlobalNamespace::LightRotationEventEffect::_set_kSpeedMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightRotationEventEffect::_set_kSpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightRotationEventEffect", "kSpeedMultiplier", value));
}
// Autogenerated method: LightRotationEventEffect.Start
void GlobalNamespace::LightRotationEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightRotationEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationEventEffect.Update
void GlobalNamespace::LightRotationEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightRotationEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationEventEffect.OnDestroy
void GlobalNamespace::LightRotationEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightRotationEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightRotationEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::LightRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Writing MetadataGetter for method: LightRotationEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightRotationEventEffect::*)()>(&LightRotationEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightRotationEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightRotationEventEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightRotationEventEffect::*)()>(&LightRotationEventEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightRotationEventEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightRotationEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightRotationEventEffect::*)()>(&LightRotationEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightRotationEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightRotationEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&LightRotationEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightRotationEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: LightRotationEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightRotationEventEffect::*)()>(&LightRotationEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightRotationEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightRotationEventEffect::*)()>(&LightRotationEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightRotationEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightSwitchEventEffect
#include "GlobalNamespace/LightSwitchEventEffect.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: LightWithIdManager
#include "GlobalNamespace/LightWithIdManager.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kFadeSpeed
float GlobalNamespace::LightSwitchEventEffect::_get_kFadeSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::_get_kFadeSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightSwitchEventEffect", "kFadeSpeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kFadeSpeed
void GlobalNamespace::LightSwitchEventEffect::_set_kFadeSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::_set_kFadeSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightSwitchEventEffect", "kFadeSpeed", value));
}
// Autogenerated method: LightSwitchEventEffect.get_lightsId
int GlobalNamespace::LightSwitchEventEffect::get_lightsId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::get_lightsId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightsId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.Start
void GlobalNamespace::LightSwitchEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.OnDestroy
void GlobalNamespace::LightSwitchEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.Update
void GlobalNamespace::LightSwitchEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightSwitchEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::LightSwitchEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: LightSwitchEventEffect.ProcessLightSwitchEvent
void GlobalNamespace::LightSwitchEventEffect::ProcessLightSwitchEvent(int beatmapEventDataValue, bool updateColorsOnly) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::ProcessLightSwitchEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLightSwitchEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventDataValue), ::il2cpp_utils::ExtractType(updateColorsOnly)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventDataValue, updateColorsOnly);
}
// Autogenerated method: LightSwitchEventEffect.GetNormalColor
UnityEngine::Color GlobalNamespace::LightSwitchEventEffect::GetNormalColor(int beatmapEventValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::GetNormalColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNormalColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventValue)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, beatmapEventValue);
}
// Autogenerated method: LightSwitchEventEffect.GetHighlightColor
UnityEngine::Color GlobalNamespace::LightSwitchEventEffect::GetHighlightColor(int beatmapEventValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::GetHighlightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighlightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventValue)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, beatmapEventValue);
}
// Autogenerated method: LightSwitchEventEffect.SetColor
void GlobalNamespace::LightSwitchEventEffect::SetColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightSwitchEventEffect::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: LightSwitchEventEffect::get_lightsId
// Il2CppName: get_lightsId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LightSwitchEventEffect::*)()>(&LightSwitchEventEffect::get_lightsId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "get_lightsId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)()>(&LightSwitchEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)()>(&LightSwitchEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)()>(&LightSwitchEventEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&LightSwitchEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::ProcessLightSwitchEvent
// Il2CppName: ProcessLightSwitchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)(int, bool)>(&LightSwitchEventEffect::ProcessLightSwitchEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "ProcessLightSwitchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::GetNormalColor
// Il2CppName: GetNormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LightSwitchEventEffect::*)(int)>(&LightSwitchEventEffect::GetNormalColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "GetNormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::GetHighlightColor
// Il2CppName: GetHighlightColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (LightSwitchEventEffect::*)(int)>(&LightSwitchEventEffect::GetHighlightColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "GetHighlightColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)(UnityEngine::Color)>(&LightSwitchEventEffect::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: LightSwitchEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)()>(&LightSwitchEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightSwitchEventEffect::*)()>(&LightSwitchEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightSwitchEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionClearedEnvironmentEffect
#include "GlobalNamespace/MissionClearedEnvironmentEffect.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionClearedEnvironmentEffect.Awake
void GlobalNamespace::MissionClearedEnvironmentEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionClearedEnvironmentEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionClearedEnvironmentEffect.OnDestroy
void GlobalNamespace::MissionClearedEnvironmentEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionClearedEnvironmentEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionClearedEnvironmentEffect.HandleMissionObjectiveCheckersManagerObjectiveWasCleared
void GlobalNamespace::MissionClearedEnvironmentEffect::HandleMissionObjectiveCheckersManagerObjectiveWasCleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionClearedEnvironmentEffect::HandleMissionObjectiveCheckersManagerObjectiveWasCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckersManagerObjectiveWasCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionClearedEnvironmentEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionClearedEnvironmentEffect::*)()>(&MissionClearedEnvironmentEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionClearedEnvironmentEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionClearedEnvironmentEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionClearedEnvironmentEffect::*)()>(&MissionClearedEnvironmentEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionClearedEnvironmentEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionClearedEnvironmentEffect::HandleMissionObjectiveCheckersManagerObjectiveWasCleared
// Il2CppName: HandleMissionObjectiveCheckersManagerObjectiveWasCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionClearedEnvironmentEffect::*)()>(&MissionClearedEnvironmentEffect::HandleMissionObjectiveCheckersManagerObjectiveWasCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionClearedEnvironmentEffect*), "HandleMissionObjectiveCheckersManagerObjectiveWasCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionClearedEnvironmentEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionClearedEnvironmentEffect::*)()>(&MissionClearedEnvironmentEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionClearedEnvironmentEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionClearedEnvironmentEffect::*)()>(&MissionClearedEnvironmentEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionClearedEnvironmentEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteTrailEffect
#include "GlobalNamespace/NoteTrailEffect.hpp"
// Including type: NoteMovement
#include "GlobalNamespace/NoteMovement.hpp"
// Including type: NoteTrailParticleSystem
#include "GlobalNamespace/NoteTrailParticleSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NoteTrailEffect.Awake
void GlobalNamespace::NoteTrailEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.OnDestroy
void GlobalNamespace::NoteTrailEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.Update
void GlobalNamespace::NoteTrailEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.HandleNoteMovementDidInit
void GlobalNamespace::NoteTrailEffect::HandleNoteMovementDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailEffect::HandleNoteMovementDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteMovementDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteTrailEffect.HandleNoteDidStartJump
void GlobalNamespace::NoteTrailEffect::HandleNoteDidStartJump() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailEffect::HandleNoteDidStartJump");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteDidStartJump", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NoteTrailEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteTrailEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteTrailEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteTrailEffect::HandleNoteMovementDidInit
// Il2CppName: HandleNoteMovementDidInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::HandleNoteMovementDidInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), "HandleNoteMovementDidInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteTrailEffect::HandleNoteDidStartJump
// Il2CppName: HandleNoteDidStartJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::HandleNoteDidStartJump)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), "HandleNoteDidStartJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteTrailEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteTrailEffect::*)()>(&NoteTrailEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteTrailEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleSaberSparkleEffect
#include "GlobalNamespace/ObstacleSaberSparkleEffect.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObstacleSaberSparkleEffect.set_color
void GlobalNamespace::ObstacleSaberSparkleEffect::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffect::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObstacleSaberSparkleEffect.Awake
void GlobalNamespace::ObstacleSaberSparkleEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffect.SetPositionAndRotation
void GlobalNamespace::ObstacleSaberSparkleEffect::SetPositionAndRotation(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffect::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos, rot);
}
// Autogenerated method: ObstacleSaberSparkleEffect.StartEmission
void GlobalNamespace::ObstacleSaberSparkleEffect::StartEmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffect::StartEmission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEmission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSparkleEffect.StopEmission
void GlobalNamespace::ObstacleSaberSparkleEffect::StopEmission() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffect::StopEmission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopEmission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ObstacleSaberSparkleEffect::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)(UnityEngine::Color)>(&ObstacleSaberSparkleEffect::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSparkleEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)()>(&ObstacleSaberSparkleEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSparkleEffect::SetPositionAndRotation
// Il2CppName: SetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&ObstacleSaberSparkleEffect::SetPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), "SetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSparkleEffect::StartEmission
// Il2CppName: StartEmission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)()>(&ObstacleSaberSparkleEffect::StartEmission)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), "StartEmission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSparkleEffect::StopEmission
// Il2CppName: StopEmission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)()>(&ObstacleSaberSparkleEffect::StopEmission)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), "StopEmission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSparkleEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)()>(&ObstacleSaberSparkleEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSparkleEffect::*)()>(&ObstacleSaberSparkleEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSparkleEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ParticleSystemEventEffect
#include "GlobalNamespace/ParticleSystemEventEffect.hpp"
// Including type: ColorSO
#include "GlobalNamespace/ColorSO.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ParticleSystemEventEffect.Start
void GlobalNamespace::ParticleSystemEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventEffect.OnDestroy
void GlobalNamespace::ParticleSystemEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventEffect.Update
void GlobalNamespace::ParticleSystemEventEffect::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemEventEffect::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ParticleSystemEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::ParticleSystemEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: ParticleSystemEventEffect.RefreshParticles
void GlobalNamespace::ParticleSystemEventEffect::RefreshParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ParticleSystemEventEffect::RefreshParticles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshParticles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ParticleSystemEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)()>(&ParticleSystemEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParticleSystemEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)()>(&ParticleSystemEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParticleSystemEventEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)()>(&ParticleSystemEventEffect::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParticleSystemEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&ParticleSystemEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: ParticleSystemEventEffect::RefreshParticles
// Il2CppName: RefreshParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)()>(&ParticleSystemEventEffect::RefreshParticles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), "RefreshParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ParticleSystemEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)()>(&ParticleSystemEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParticleSystemEventEffect::*)()>(&ParticleSystemEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParticleSystemEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SaberClashEffect
#include "GlobalNamespace/SaberClashEffect.hpp"
// Including type: Libraries.HM.HMLib.VR.HapticPresetSO
#include "Libraries/HM/HMLib/VR/HapticPresetSO.hpp"
// Including type: SaberClashChecker
#include "GlobalNamespace/SaberClashChecker.hpp"
// Including type: HapticFeedbackController
#include "GlobalNamespace/HapticFeedbackController.hpp"
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SaberClashEffect.Start
void GlobalNamespace::SaberClashEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberClashEffect.OnDisable
void GlobalNamespace::SaberClashEffect::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashEffect::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SaberClashEffect.LateUpdate
void GlobalNamespace::SaberClashEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberClashEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SaberClashEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashEffect::*)()>(&SaberClashEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberClashEffect::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashEffect::*)()>(&SaberClashEffect::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashEffect*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberClashEffect::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashEffect::*)()>(&SaberClashEffect::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashEffect*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SaberClashEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashEffect::*)()>(&SaberClashEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SaberClashEffect::*)()>(&SaberClashEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SaberClashEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TunnelSmokeEventEffect
#include "GlobalNamespace/TunnelSmokeEventEffect.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSpeedMultiplier
float GlobalNamespace::TunnelSmokeEventEffect::_get_kSpeedMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::_get_kSpeedMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "TunnelSmokeEventEffect", "kSpeedMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSpeedMultiplier
void GlobalNamespace::TunnelSmokeEventEffect::_set_kSpeedMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::_set_kSpeedMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TunnelSmokeEventEffect", "kSpeedMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxParticles
int GlobalNamespace::TunnelSmokeEventEffect::_get_kMaxParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::_get_kMaxParticles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "TunnelSmokeEventEffect", "kMaxParticles"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxParticles
void GlobalNamespace::TunnelSmokeEventEffect::_set_kMaxParticles(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::_set_kMaxParticles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TunnelSmokeEventEffect", "kMaxParticles", value));
}
// Autogenerated method: TunnelSmokeEventEffect.Start
void GlobalNamespace::TunnelSmokeEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TunnelSmokeEventEffect.OnDestroy
void GlobalNamespace::TunnelSmokeEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TunnelSmokeEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::TunnelSmokeEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TunnelSmokeEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Writing MetadataGetter for method: TunnelSmokeEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TunnelSmokeEventEffect::*)()>(&TunnelSmokeEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TunnelSmokeEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TunnelSmokeEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TunnelSmokeEventEffect::*)()>(&TunnelSmokeEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TunnelSmokeEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TunnelSmokeEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TunnelSmokeEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&TunnelSmokeEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TunnelSmokeEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: TunnelSmokeEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TunnelSmokeEventEffect::*)()>(&TunnelSmokeEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TunnelSmokeEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TunnelSmokeEventEffect::*)()>(&TunnelSmokeEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TunnelSmokeEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentSpawnRotation
#include "GlobalNamespace/EnvironmentSpawnRotation.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1B1F0
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _spawnRotationID
int GlobalNamespace::EnvironmentSpawnRotation::_get__spawnRotationID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::_get__spawnRotationID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EnvironmentSpawnRotation", "_spawnRotationID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _spawnRotationID
void GlobalNamespace::EnvironmentSpawnRotation::_set__spawnRotationID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::_set__spawnRotationID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentSpawnRotation", "_spawnRotationID", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 _numberOfActiveEnvironmentSpawnRotationObjects
int GlobalNamespace::EnvironmentSpawnRotation::_get__numberOfActiveEnvironmentSpawnRotationObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::_get__numberOfActiveEnvironmentSpawnRotationObjects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "EnvironmentSpawnRotation", "_numberOfActiveEnvironmentSpawnRotationObjects"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _numberOfActiveEnvironmentSpawnRotationObjects
void GlobalNamespace::EnvironmentSpawnRotation::_set__numberOfActiveEnvironmentSpawnRotationObjects(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::_set__numberOfActiveEnvironmentSpawnRotationObjects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EnvironmentSpawnRotation", "_numberOfActiveEnvironmentSpawnRotationObjects", value));
}
// Autogenerated method: EnvironmentSpawnRotation.get_targetRotation
float GlobalNamespace::EnvironmentSpawnRotation::get_targetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::get_targetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.Awake
void GlobalNamespace::EnvironmentSpawnRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.OnEnable
void GlobalNamespace::EnvironmentSpawnRotation::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.OnDisable
void GlobalNamespace::EnvironmentSpawnRotation::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.Start
void GlobalNamespace::EnvironmentSpawnRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.OnDestroy
void GlobalNamespace::EnvironmentSpawnRotation::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.BeatmapEventAtNoteSpawnCallback
void GlobalNamespace::EnvironmentSpawnRotation::BeatmapEventAtNoteSpawnCallback(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::BeatmapEventAtNoteSpawnCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeatmapEventAtNoteSpawnCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: EnvironmentSpawnRotation.FixedUpdate
void GlobalNamespace::EnvironmentSpawnRotation::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation.LateUpdate
void GlobalNamespace::EnvironmentSpawnRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentSpawnRotation..cctor
void GlobalNamespace::EnvironmentSpawnRotation::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentSpawnRotation::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "EnvironmentSpawnRotation", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: EnvironmentSpawnRotation::get_targetRotation
// Il2CppName: get_targetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::get_targetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "get_targetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::BeatmapEventAtNoteSpawnCallback
// Il2CppName: BeatmapEventAtNoteSpawnCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)(GlobalNamespace::BeatmapEventData*)>(&EnvironmentSpawnRotation::BeatmapEventAtNoteSpawnCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "BeatmapEventAtNoteSpawnCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentSpawnRotation::*)()>(&EnvironmentSpawnRotation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentSpawnRotation::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&EnvironmentSpawnRotation::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentSpawnRotation*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FlickeringNeonSign
#include "GlobalNamespace/FlickeringNeonSign.hpp"
// Including type: FlickeringNeonSign/<FlickeringCoroutine>d__16
#include "GlobalNamespace/FlickeringNeonSign_-FlickeringCoroutine-d__16.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlickeringNeonSign.Awake
void GlobalNamespace::FlickeringNeonSign::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.Start
void GlobalNamespace::FlickeringNeonSign::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.OnEnable
void GlobalNamespace::FlickeringNeonSign::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.FlickeringCoroutine
System::Collections::IEnumerator* GlobalNamespace::FlickeringNeonSign::FlickeringCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::FlickeringCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FlickeringCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign.SetOn
void GlobalNamespace::FlickeringNeonSign::SetOn(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::SetOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, on);
}
// Writing MetadataGetter for method: FlickeringNeonSign::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::*)()>(&FlickeringNeonSign::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::*)()>(&FlickeringNeonSign::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::*)()>(&FlickeringNeonSign::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::FlickeringCoroutine
// Il2CppName: FlickeringCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (FlickeringNeonSign::*)()>(&FlickeringNeonSign::FlickeringCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), "FlickeringCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::SetOn
// Il2CppName: SetOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::*)(bool)>(&FlickeringNeonSign::SetOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), "SetOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::*)()>(&FlickeringNeonSign::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::*)()>(&FlickeringNeonSign::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FlickeringNeonSign/<FlickeringCoroutine>d__16
#include "GlobalNamespace/FlickeringNeonSign_-FlickeringCoroutine-d__16.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.IDisposable.Dispose
void GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.MoveNext
bool GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.Collections.IEnumerator.Reset
void GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlickeringNeonSign/<FlickeringCoroutine>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FlickeringNeonSign::$FlickeringCoroutine$d__16::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)(int)>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)(int)>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::$FlickeringCoroutine$d__16::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)()>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::$FlickeringCoroutine$d__16::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)()>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)()>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)()>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (FlickeringNeonSign::$FlickeringCoroutine$d__16::*)()>(&FlickeringNeonSign::$FlickeringCoroutine$d__16::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlickeringNeonSign::$FlickeringCoroutine$d__16*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingCar
#include "GlobalNamespace/FlyingCar.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingCar.Start
void GlobalNamespace::FlyingCar::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingCar::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingCar.Update
void GlobalNamespace::FlyingCar::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingCar::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingCar.UpdatePos
void GlobalNamespace::FlyingCar::UpdatePos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingCar::UpdatePos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FlyingCar::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingCar::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingCar::UpdatePos
// Il2CppName: UpdatePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::UpdatePos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), "UpdatePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingCar::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingCar::*)()>(&FlyingCar::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingCar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FlyingGameHUDRotation
#include "GlobalNamespace/FlyingGameHUDRotation.hpp"
// Including type: BeatLineManager
#include "GlobalNamespace/BeatLineManager.hpp"
// Including type: EnvironmentSpawnRotation
#include "GlobalNamespace/EnvironmentSpawnRotation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FlyingGameHUDRotation.Start
void GlobalNamespace::FlyingGameHUDRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingGameHUDRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingGameHUDRotation.FixedUpdate
void GlobalNamespace::FlyingGameHUDRotation::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingGameHUDRotation::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FlyingGameHUDRotation.LateUpdate
void GlobalNamespace::FlyingGameHUDRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlyingGameHUDRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FlyingGameHUDRotation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingGameHUDRotation::*)()>(&FlyingGameHUDRotation::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingGameHUDRotation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingGameHUDRotation::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingGameHUDRotation::*)()>(&FlyingGameHUDRotation::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingGameHUDRotation*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingGameHUDRotation::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingGameHUDRotation::*)()>(&FlyingGameHUDRotation::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingGameHUDRotation*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FlyingGameHUDRotation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingGameHUDRotation::*)()>(&FlyingGameHUDRotation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingGameHUDRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FlyingGameHUDRotation::*)()>(&FlyingGameHUDRotation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FlyingGameHUDRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MovementBeatmapEventEffect
#include "GlobalNamespace/MovementBeatmapEventEffect.hpp"
// Including type: MovementBeatmapEventEffect/MovementData
#include "GlobalNamespace/MovementBeatmapEventEffect_MovementData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MovementBeatmapEventEffect.Start
void GlobalNamespace::MovementBeatmapEventEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.OnDestroy
void GlobalNamespace::MovementBeatmapEventEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.FixedUpdate
void GlobalNamespace::MovementBeatmapEventEffect::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.LateUpdate
void GlobalNamespace::MovementBeatmapEventEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MovementBeatmapEventEffect.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::MovementBeatmapEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: MovementBeatmapEventEffect.SetLocalPositionOffsetsForAllObjects
void GlobalNamespace::MovementBeatmapEventEffect::SetLocalPositionOffsetsForAllObjects(UnityEngine::Vector3 localPositionOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::SetLocalPositionOffsetsForAllObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPositionOffsetsForAllObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localPositionOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localPositionOffset);
}
// Writing MetadataGetter for method: MovementBeatmapEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)()>(&MovementBeatmapEventEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)()>(&MovementBeatmapEventEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)()>(&MovementBeatmapEventEffect::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)()>(&MovementBeatmapEventEffect::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)(GlobalNamespace::BeatmapEventData*)>(&MovementBeatmapEventEffect::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::SetLocalPositionOffsetsForAllObjects
// Il2CppName: SetLocalPositionOffsetsForAllObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)(UnityEngine::Vector3)>(&MovementBeatmapEventEffect::SetLocalPositionOffsetsForAllObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), "SetLocalPositionOffsetsForAllObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)()>(&MovementBeatmapEventEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::*)()>(&MovementBeatmapEventEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MovementBeatmapEventEffect/MovementData
#include "GlobalNamespace/MovementBeatmapEventEffect_MovementData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MovementBeatmapEventEffect/MovementData.get_localPositionOffset
UnityEngine::Vector3 GlobalNamespace::MovementBeatmapEventEffect::MovementData::get_localPositionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MovementBeatmapEventEffect::MovementData::get_localPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MovementBeatmapEventEffect::MovementData::get_localPositionOffset
// Il2CppName: get_localPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (MovementBeatmapEventEffect::MovementData::*)()>(&MovementBeatmapEventEffect::MovementData::get_localPositionOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect::MovementData*), "get_localPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MovementBeatmapEventEffect::MovementData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::MovementData::*)()>(&MovementBeatmapEventEffect::MovementData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect::MovementData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MovementBeatmapEventEffect::MovementData::*)()>(&MovementBeatmapEventEffect::MovementData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MovementBeatmapEventEffect::MovementData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RectangleFakeGlow
#include "GlobalNamespace/RectangleFakeGlow.hpp"
// Including type: MaterialPropertyBlockController
#include "GlobalNamespace/MaterialPropertyBlockController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1B428
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _colorID
int GlobalNamespace::RectangleFakeGlow::_get__colorID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::_get__colorID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RectangleFakeGlow", "_colorID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _colorID
void GlobalNamespace::RectangleFakeGlow::_set__colorID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::_set__colorID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RectangleFakeGlow", "_colorID", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1B438
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _sizeParamsID
int GlobalNamespace::RectangleFakeGlow::_get__sizeParamsID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::_get__sizeParamsID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "RectangleFakeGlow", "_sizeParamsID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _sizeParamsID
void GlobalNamespace::RectangleFakeGlow::_set__sizeParamsID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::_set__sizeParamsID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "RectangleFakeGlow", "_sizeParamsID", value));
}
// Autogenerated method: RectangleFakeGlow.set_color
void GlobalNamespace::RectangleFakeGlow::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::set_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RectangleFakeGlow.get_color
UnityEngine::Color GlobalNamespace::RectangleFakeGlow::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.Awake
void GlobalNamespace::RectangleFakeGlow::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.OnEnable
void GlobalNamespace::RectangleFakeGlow::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.OnDisable
void GlobalNamespace::RectangleFakeGlow::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow.Refresh
void GlobalNamespace::RectangleFakeGlow::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::Refresh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlow..cctor
void GlobalNamespace::RectangleFakeGlow::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlow::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "RectangleFakeGlow", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: RectangleFakeGlow::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)(UnityEngine::Color)>(&RectangleFakeGlow::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (RectangleFakeGlow::*)()>(&RectangleFakeGlow::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)()>(&RectangleFakeGlow::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)()>(&RectangleFakeGlow::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)()>(&RectangleFakeGlow::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)()>(&RectangleFakeGlow::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)()>(&RectangleFakeGlow::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlow::*)()>(&RectangleFakeGlow::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlow::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RectangleFakeGlow::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlow*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RectangleFakeGlowLightWithId
#include "GlobalNamespace/RectangleFakeGlowLightWithId.hpp"
// Including type: RectangleFakeGlow
#include "GlobalNamespace/RectangleFakeGlow.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RectangleFakeGlowLightWithId.get_color
UnityEngine::Color GlobalNamespace::RectangleFakeGlowLightWithId::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlowLightWithId::get_color");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: RectangleFakeGlowLightWithId.ColorWasSet
void GlobalNamespace::RectangleFakeGlowLightWithId::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RectangleFakeGlowLightWithId::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: RectangleFakeGlowLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (RectangleFakeGlowLightWithId::*)()>(&RectangleFakeGlowLightWithId::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlowLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlowLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlowLightWithId::*)(UnityEngine::Color)>(&RectangleFakeGlowLightWithId::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlowLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: RectangleFakeGlowLightWithId::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlowLightWithId::*)()>(&RectangleFakeGlowLightWithId::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlowLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RectangleFakeGlowLightWithId::*)()>(&RectangleFakeGlowLightWithId::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RectangleFakeGlowLightWithId*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RotateBySpawnRotation
#include "GlobalNamespace/RotateBySpawnRotation.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RotateBySpawnRotation.Awake
void GlobalNamespace::RotateBySpawnRotation::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RotateBySpawnRotation::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.Start
void GlobalNamespace::RotateBySpawnRotation::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RotateBySpawnRotation::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.OnDestroy
void GlobalNamespace::RotateBySpawnRotation::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RotateBySpawnRotation::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.BeatmapEventAtNoteSpawnCallback
void GlobalNamespace::RotateBySpawnRotation::BeatmapEventAtNoteSpawnCallback(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RotateBySpawnRotation::BeatmapEventAtNoteSpawnCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeatmapEventAtNoteSpawnCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: RotateBySpawnRotation.FixedUpdate
void GlobalNamespace::RotateBySpawnRotation::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RotateBySpawnRotation::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RotateBySpawnRotation.LateUpdate
void GlobalNamespace::RotateBySpawnRotation::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RotateBySpawnRotation::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: RotateBySpawnRotation::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RotateBySpawnRotation::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RotateBySpawnRotation::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RotateBySpawnRotation::BeatmapEventAtNoteSpawnCallback
// Il2CppName: BeatmapEventAtNoteSpawnCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)(GlobalNamespace::BeatmapEventData*)>(&RotateBySpawnRotation::BeatmapEventAtNoteSpawnCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), "BeatmapEventAtNoteSpawnCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: RotateBySpawnRotation::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RotateBySpawnRotation::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RotateBySpawnRotation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RotateBySpawnRotation::*)()>(&RotateBySpawnRotation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RotateBySpawnRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnChevronObjectPoolsInstaller
#include "GlobalNamespace/SpawnChevronObjectPoolsInstaller.hpp"
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpawnChevronObjectPoolsInstaller.InstallBindings
void GlobalNamespace::SpawnChevronObjectPoolsInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnChevronObjectPoolsInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SpawnChevronObjectPoolsInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnChevronObjectPoolsInstaller::*)()>(&SpawnChevronObjectPoolsInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnChevronObjectPoolsInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnChevronObjectPoolsInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnChevronObjectPoolsInstaller::*)()>(&SpawnChevronObjectPoolsInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnChevronObjectPoolsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnChevronObjectPoolsInstaller::*)()>(&SpawnChevronObjectPoolsInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnChevronObjectPoolsInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
// Including type: SpawnRotationChevron/Pool
#include "GlobalNamespace/SpawnRotationChevron_Pool.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpawnRotationChevron.SetLightAmount
void GlobalNamespace::SpawnRotationChevron::SetLightAmount(float amount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevron::SetLightAmount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightAmount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(amount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, amount);
}
// Autogenerated method: SpawnRotationChevron.UpdateLights
void GlobalNamespace::SpawnRotationChevron::UpdateLights() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevron::UpdateLights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevron.ColorWasSet
void GlobalNamespace::SpawnRotationChevron::ColorWasSet(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevron::ColorWasSet");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorWasSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Writing MetadataGetter for method: SpawnRotationChevron::SetLightAmount
// Il2CppName: SetLightAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::*)(float)>(&SpawnRotationChevron::SetLightAmount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron*), "SetLightAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevron::UpdateLights
// Il2CppName: UpdateLights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::*)()>(&SpawnRotationChevron::UpdateLights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron*), "UpdateLights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevron::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::*)(UnityEngine::Color)>(&SpawnRotationChevron::ColorWasSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevron::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::*)()>(&SpawnRotationChevron::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::*)()>(&SpawnRotationChevron::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevron/Pool
#include "GlobalNamespace/SpawnRotationChevron_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SpawnRotationChevron::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::Pool::*)()>(&SpawnRotationChevron::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevron::Pool::*)()>(&SpawnRotationChevron::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevron::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevronManager
#include "GlobalNamespace/SpawnRotationChevronManager.hpp"
// Including type: SpawnRotationChevronManager/DirectionData
#include "GlobalNamespace/SpawnRotationChevronManager_DirectionData.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: SpawnRotationProcessor
#include "GlobalNamespace/SpawnRotationProcessor.hpp"
// Including type: BeatmapObjectCallbackData
#include "GlobalNamespace/BeatmapObjectCallbackData.hpp"
// Including type: BeatmapEventCallbackData
#include "GlobalNamespace/BeatmapEventCallbackData.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
// Including type: SpawnRotationChevron/Pool
#include "GlobalNamespace/SpawnRotationChevron_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SpawnRotationChevronManager.Start
void GlobalNamespace::SpawnRotationChevronManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevronManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.Update
void GlobalNamespace::SpawnRotationChevronManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevronManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.OnDestroy
void GlobalNamespace::SpawnRotationChevronManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevronManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SpawnRotationChevronManager.HandleBeatmapObjectCallback
void GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapObjectData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapObjectData);
}
// Autogenerated method: SpawnRotationChevronManager.HandleBeatmapEventCallback
void GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapEventCallback(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapEventCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapEventCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Autogenerated method: SpawnRotationChevronManager.HandleBeatmapObjectSpawnControllerDidInit
void GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectSpawnControllerDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SpawnRotationChevronManager::HandleBeatmapObjectSpawnControllerDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectSpawnControllerDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SpawnRotationChevronManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)()>(&SpawnRotationChevronManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevronManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)()>(&SpawnRotationChevronManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevronManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)()>(&SpawnRotationChevronManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevronManager::HandleBeatmapObjectCallback
// Il2CppName: HandleBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)(GlobalNamespace::BeatmapObjectData*)>(&SpawnRotationChevronManager::HandleBeatmapObjectCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapObjectData*>()});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevronManager::HandleBeatmapEventCallback
// Il2CppName: HandleBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)(GlobalNamespace::BeatmapEventData*)>(&SpawnRotationChevronManager::HandleBeatmapEventCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), "HandleBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevronManager::HandleBeatmapObjectSpawnControllerDidInit
// Il2CppName: HandleBeatmapObjectSpawnControllerDidInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)()>(&SpawnRotationChevronManager::HandleBeatmapObjectSpawnControllerDidInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), "HandleBeatmapObjectSpawnControllerDidInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SpawnRotationChevronManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)()>(&SpawnRotationChevronManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::*)()>(&SpawnRotationChevronManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SpawnRotationChevronManager/DirectionData
#include "GlobalNamespace/SpawnRotationChevronManager_DirectionData.hpp"
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SpawnRotationChevronManager::DirectionData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::DirectionData::*)()>(&SpawnRotationChevronManager::DirectionData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager::DirectionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpawnRotationChevronManager::DirectionData::*)()>(&SpawnRotationChevronManager::DirectionData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpawnRotationChevronManager::DirectionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 kNumberOfSamples
int GlobalNamespace::BasicSpectrogramData::_get_kNumberOfSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::_get_kNumberOfSamples");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BasicSpectrogramData", "kNumberOfSamples"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 kNumberOfSamples
void GlobalNamespace::BasicSpectrogramData::_set_kNumberOfSamples(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::_set_kNumberOfSamples");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BasicSpectrogramData", "kNumberOfSamples", value));
}
// Autogenerated method: BasicSpectrogramData.get_Samples
::Array<float>* GlobalNamespace::BasicSpectrogramData::get_Samples() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::get_Samples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Samples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<float>*, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.get_ProcessedSamples
System::Collections::Generic::List_1<float>* GlobalNamespace::BasicSpectrogramData::get_ProcessedSamples() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::get_ProcessedSamples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProcessedSamples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<float>*, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.Awake
void GlobalNamespace::BasicSpectrogramData::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.LateUpdate
void GlobalNamespace::BasicSpectrogramData::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BasicSpectrogramData.ProcessSamples
void GlobalNamespace::BasicSpectrogramData::ProcessSamples(::Array<float>* sourceSamples, System::Collections::Generic::List_1<float>* processedSamples) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BasicSpectrogramData::ProcessSamples");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSamples", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceSamples), ::il2cpp_utils::ExtractType(processedSamples)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceSamples, processedSamples);
}
// Writing MetadataGetter for method: BasicSpectrogramData::get_Samples
// Il2CppName: get_Samples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<float>* (BasicSpectrogramData::*)()>(&BasicSpectrogramData::get_Samples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), "get_Samples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicSpectrogramData::get_ProcessedSamples
// Il2CppName: get_ProcessedSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<float>* (BasicSpectrogramData::*)()>(&BasicSpectrogramData::get_ProcessedSamples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), "get_ProcessedSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicSpectrogramData::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicSpectrogramData::*)()>(&BasicSpectrogramData::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicSpectrogramData::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicSpectrogramData::*)()>(&BasicSpectrogramData::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BasicSpectrogramData::ProcessSamples
// Il2CppName: ProcessSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicSpectrogramData::*)(::Array<float>*, System::Collections::Generic::List_1<float>*)>(&BasicSpectrogramData::ProcessSamples)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), "ProcessSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<float>*>()});
  }
};
// Writing MetadataGetter for method: BasicSpectrogramData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicSpectrogramData::*)()>(&BasicSpectrogramData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BasicSpectrogramData::*)()>(&BasicSpectrogramData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BasicSpectrogramData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Spectrogram
#include "GlobalNamespace/Spectrogram.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: BasicSpectrogramData
#include "GlobalNamespace/BasicSpectrogramData.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1B5A8
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _spectrogramDataID
int GlobalNamespace::Spectrogram::_get__spectrogramDataID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::_get__spectrogramDataID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "Spectrogram", "_spectrogramDataID"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _spectrogramDataID
void GlobalNamespace::Spectrogram::_set__spectrogramDataID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::_set__spectrogramDataID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Spectrogram", "_spectrogramDataID", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::Spectrogram::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("", "Spectrogram", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::Spectrogram::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "Spectrogram", "_materialPropertyBlock", value));
}
// Autogenerated method: Spectrogram.Awake
void GlobalNamespace::Spectrogram::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Spectrogram.Update
void GlobalNamespace::Spectrogram::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Spectrogram..cctor
void GlobalNamespace::Spectrogram::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Spectrogram::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "Spectrogram", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Spectrogram::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Spectrogram::*)()>(&Spectrogram::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Spectrogram*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Spectrogram::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Spectrogram::*)()>(&Spectrogram::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Spectrogram*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Spectrogram::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Spectrogram::*)()>(&Spectrogram::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Spectrogram*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Spectrogram::*)()>(&Spectrogram::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Spectrogram*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Spectrogram::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Spectrogram::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Spectrogram*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StaticEnvironmentLights
#include "GlobalNamespace/StaticEnvironmentLights.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StaticEnvironmentLights.Awake
void GlobalNamespace::StaticEnvironmentLights::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StaticEnvironmentLights::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StaticEnvironmentLights::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StaticEnvironmentLights::*)()>(&StaticEnvironmentLights::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StaticEnvironmentLights*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StaticEnvironmentLights::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StaticEnvironmentLights::*)()>(&StaticEnvironmentLights::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StaticEnvironmentLights*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StaticEnvironmentLights::*)()>(&StaticEnvironmentLights::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StaticEnvironmentLights*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRing
#include "GlobalNamespace/TrackLaneRing.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrackLaneRing.get_destRotZ
float GlobalNamespace::TrackLaneRing::get_destRotZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::get_destRotZ");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_destRotZ", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRing.Init
void GlobalNamespace::TrackLaneRing::Init(UnityEngine::Vector3 position, UnityEngine::Vector3 positionOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(positionOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, positionOffset);
}
// Autogenerated method: TrackLaneRing.FixedUpdateRing
void GlobalNamespace::TrackLaneRing::FixedUpdateRing(float fixedDeltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::FixedUpdateRing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdateRing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixedDeltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fixedDeltaTime);
}
// Autogenerated method: TrackLaneRing.LateUpdateRing
void GlobalNamespace::TrackLaneRing::LateUpdateRing(float interpolationFactor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::LateUpdateRing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdateRing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interpolationFactor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interpolationFactor);
}
// Autogenerated method: TrackLaneRing.SetDestRotation
void GlobalNamespace::TrackLaneRing::SetDestRotation(float destRotZ, float rotateSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::SetDestRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDestRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destRotZ), ::il2cpp_utils::ExtractType(rotateSpeed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destRotZ, rotateSpeed);
}
// Autogenerated method: TrackLaneRing.GetRotation
float GlobalNamespace::TrackLaneRing::GetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRing.GetDestinationRotation
float GlobalNamespace::TrackLaneRing::GetDestinationRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::GetDestinationRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDestinationRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRing.SetPosition
void GlobalNamespace::TrackLaneRing::SetPosition(float destPosZ, float moveSpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRing::SetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destPosZ), ::il2cpp_utils::ExtractType(moveSpeed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destPosZ, moveSpeed);
}
// Writing MetadataGetter for method: TrackLaneRing::get_destRotZ
// Il2CppName: get_destRotZ
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrackLaneRing::*)()>(&TrackLaneRing::get_destRotZ)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "get_destRotZ", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&TrackLaneRing::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::FixedUpdateRing
// Il2CppName: FixedUpdateRing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)(float)>(&TrackLaneRing::FixedUpdateRing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "FixedUpdateRing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::LateUpdateRing
// Il2CppName: LateUpdateRing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)(float)>(&TrackLaneRing::LateUpdateRing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "LateUpdateRing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::SetDestRotation
// Il2CppName: SetDestRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)(float, float)>(&TrackLaneRing::SetDestRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "SetDestRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrackLaneRing::*)()>(&TrackLaneRing::GetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::GetDestinationRotation
// Il2CppName: GetDestinationRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrackLaneRing::*)()>(&TrackLaneRing::GetDestinationRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "GetDestinationRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)(float, float)>(&TrackLaneRing::SetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRing::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)()>(&TrackLaneRing::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRing::*)()>(&TrackLaneRing::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRing*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TrackLaneRingsManager
#include "GlobalNamespace/TrackLaneRingsManager.hpp"
// Including type: TrackLaneRing
#include "GlobalNamespace/TrackLaneRing.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrackLaneRingsManager.get_ringPositionStep
float GlobalNamespace::TrackLaneRingsManager::get_ringPositionStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsManager::get_ringPositionStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ringPositionStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.get_Rings
::Array<GlobalNamespace::TrackLaneRing*>* GlobalNamespace::TrackLaneRingsManager::get_Rings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsManager::get_Rings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Rings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::TrackLaneRing*>*, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.Awake
void GlobalNamespace::TrackLaneRingsManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.FixedUpdate
void GlobalNamespace::TrackLaneRingsManager::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsManager::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.LateUpdate
void GlobalNamespace::TrackLaneRingsManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsManager.OnDrawGizmosSelected
void GlobalNamespace::TrackLaneRingsManager::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsManager::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TrackLaneRingsManager::get_ringPositionStep
// Il2CppName: get_ringPositionStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::get_ringPositionStep)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), "get_ringPositionStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsManager::get_Rings
// Il2CppName: get_Rings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::TrackLaneRing*>* (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::get_Rings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), "get_Rings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsManager::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsManager::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::OnDrawGizmosSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsManager::*)()>(&TrackLaneRingsManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsPositionStepEffectSpawner
#include "GlobalNamespace/TrackLaneRingsPositionStepEffectSpawner.hpp"
// Including type: TrackLaneRingsManager
#include "GlobalNamespace/TrackLaneRingsManager.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrackLaneRingsPositionStepEffectSpawner.Start
void GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsPositionStepEffectSpawner.OnDestroy
void GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsPositionStepEffectSpawner.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsPositionStepEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Writing MetadataGetter for method: TrackLaneRingsPositionStepEffectSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsPositionStepEffectSpawner::*)()>(&TrackLaneRingsPositionStepEffectSpawner::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsPositionStepEffectSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsPositionStepEffectSpawner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsPositionStepEffectSpawner::*)()>(&TrackLaneRingsPositionStepEffectSpawner::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsPositionStepEffectSpawner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsPositionStepEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsPositionStepEffectSpawner::*)(GlobalNamespace::BeatmapEventData*)>(&TrackLaneRingsPositionStepEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsPositionStepEffectSpawner*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsPositionStepEffectSpawner::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsPositionStepEffectSpawner::*)()>(&TrackLaneRingsPositionStepEffectSpawner::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsPositionStepEffectSpawner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsPositionStepEffectSpawner::*)()>(&TrackLaneRingsPositionStepEffectSpawner::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsPositionStepEffectSpawner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect.hpp"
// Including type: TrackLaneRingsRotationEffect/RingRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect_RingRotationEffect.hpp"
// Including type: TrackLaneRingsManager
#include "GlobalNamespace/TrackLaneRingsManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrackLaneRingsRotationEffect.Awake
void GlobalNamespace::TrackLaneRingsRotationEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.Start
void GlobalNamespace::TrackLaneRingsRotationEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.FixedUpdate
void GlobalNamespace::TrackLaneRingsRotationEffect::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.AddRingRotationEffect
void GlobalNamespace::TrackLaneRingsRotationEffect::AddRingRotationEffect(float angle, float step, int propagationSpeed, float flexySpeed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::AddRingRotationEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRingRotationEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle), ::il2cpp_utils::ExtractType(step), ::il2cpp_utils::ExtractType(propagationSpeed), ::il2cpp_utils::ExtractType(flexySpeed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, angle, step, propagationSpeed, flexySpeed);
}
// Autogenerated method: TrackLaneRingsRotationEffect.GetFirstRingRotationAngle
float GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingRotationAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFirstRingRotationAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.GetFirstRingDestinationRotationAngle
float GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingDestinationRotationAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::GetFirstRingDestinationRotationAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFirstRingDestinationRotationAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.SpawnRingRotationEffect
GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect* GlobalNamespace::TrackLaneRingsRotationEffect::SpawnRingRotationEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::SpawnRingRotationEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnRingRotationEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffect.RecycleRingRotationEffect
void GlobalNamespace::TrackLaneRingsRotationEffect::RecycleRingRotationEffect(GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect* ringRotationEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffect::RecycleRingRotationEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecycleRingRotationEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ringRotationEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ringRotationEffect);
}
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::AddRingRotationEffect
// Il2CppName: AddRingRotationEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)(float, float, int, float)>(&TrackLaneRingsRotationEffect::AddRingRotationEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "AddRingRotationEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::GetFirstRingRotationAngle
// Il2CppName: GetFirstRingRotationAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::GetFirstRingRotationAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "GetFirstRingRotationAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::GetFirstRingDestinationRotationAngle
// Il2CppName: GetFirstRingDestinationRotationAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::GetFirstRingDestinationRotationAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "GetFirstRingDestinationRotationAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::SpawnRingRotationEffect
// Il2CppName: SpawnRingRotationEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect* (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::SpawnRingRotationEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "SpawnRingRotationEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::RecycleRingRotationEffect
// Il2CppName: RecycleRingRotationEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)(GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*)>(&TrackLaneRingsRotationEffect::RecycleRingRotationEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), "RecycleRingRotationEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::TrackLaneRingsRotationEffect::RingRotationEffect*>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::*)()>(&TrackLaneRingsRotationEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffect/RingRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect_RingRotationEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TrackLaneRingsRotationEffect::RingRotationEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::RingRotationEffect::*)()>(&TrackLaneRingsRotationEffect::RingRotationEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect::RingRotationEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffect::RingRotationEffect::*)()>(&TrackLaneRingsRotationEffect::RingRotationEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffect::RingRotationEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffectSpawner
#include "GlobalNamespace/TrackLaneRingsRotationEffectSpawner.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: TrackLaneRingsRotationEffect
#include "GlobalNamespace/TrackLaneRingsRotationEffect.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrackLaneRingsRotationEffectSpawner.Start
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffectSpawner.OnDestroy
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrackLaneRingsRotationEffectSpawner.HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapEventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapEventData);
}
// Writing MetadataGetter for method: TrackLaneRingsRotationEffectSpawner::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffectSpawner::*)()>(&TrackLaneRingsRotationEffectSpawner::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffectSpawner*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffectSpawner::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffectSpawner::*)()>(&TrackLaneRingsRotationEffectSpawner::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffectSpawner*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
// Il2CppName: HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffectSpawner::*)(GlobalNamespace::BeatmapEventData*)>(&TrackLaneRingsRotationEffectSpawner::HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffectSpawner*), "HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapEventData*>()});
  }
};
// Writing MetadataGetter for method: TrackLaneRingsRotationEffectSpawner::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffectSpawner::*)()>(&TrackLaneRingsRotationEffectSpawner::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffectSpawner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackLaneRingsRotationEffectSpawner::*)()>(&TrackLaneRingsRotationEffectSpawner::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackLaneRingsRotationEffectSpawner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrackLaneRingsRotationEffectSpawner/RotationStepType
#include "GlobalNamespace/TrackLaneRingsRotationEffectSpawner.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range0ToMax
GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range0ToMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range0ToMax");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType>("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range0ToMax"));
}
// Autogenerated static field setter
// Set static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range0ToMax
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range0ToMax(GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range0ToMax");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range0ToMax", value));
}
// Autogenerated static field getter
// Get static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range
GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_Range");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType>("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range"));
}
// Autogenerated static field setter
// Set static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType Range
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range(GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_Range");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "Range", value));
}
// Autogenerated static field getter
// Get static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType MaxOr0
GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_MaxOr0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_get_MaxOr0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType>("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "MaxOr0"));
}
// Autogenerated static field setter
// Set static field: static public TrackLaneRingsRotationEffectSpawner/RotationStepType MaxOr0
void GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_MaxOr0(GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrackLaneRingsRotationEffectSpawner::RotationStepType::_set_MaxOr0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "TrackLaneRingsRotationEffectSpawner/RotationStepType", "MaxOr0", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ComboUIController
#include "GlobalNamespace/ComboUIController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ComboUIController.Start
void GlobalNamespace::ComboUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.OnEnable
void GlobalNamespace::ComboUIController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.OnDisable
void GlobalNamespace::ComboUIController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.RegisterForEvents
void GlobalNamespace::ComboUIController::RegisterForEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::RegisterForEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.UnregisterFromEvents
void GlobalNamespace::ComboUIController::UnregisterFromEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::UnregisterFromEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ComboUIController.HandleComboDidChange
void GlobalNamespace::ComboUIController::HandleComboDidChange(int combo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::HandleComboDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(combo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, combo);
}
// Autogenerated method: ComboUIController.HandleComboBreakingEventHappened
void GlobalNamespace::ComboUIController::HandleComboBreakingEventHappened() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ComboUIController::HandleComboBreakingEventHappened");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleComboBreakingEventHappened", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ComboUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComboUIController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComboUIController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComboUIController::RegisterForEvents
// Il2CppName: RegisterForEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::RegisterForEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "RegisterForEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComboUIController::UnregisterFromEvents
// Il2CppName: UnregisterFromEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::UnregisterFromEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "UnregisterFromEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComboUIController::HandleComboDidChange
// Il2CppName: HandleComboDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)(int)>(&ComboUIController::HandleComboDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "HandleComboDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ComboUIController::HandleComboBreakingEventHappened
// Il2CppName: HandleComboBreakingEventHappened
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::HandleComboBreakingEventHappened)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), "HandleComboBreakingEventHappened", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComboUIController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComboUIController::*)()>(&ComboUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComboUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoreGameHUDController
#include "GlobalNamespace/CoreGameHUDController.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CoreGameHUDController.set_alpha
void GlobalNamespace::CoreGameHUDController::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoreGameHUDController::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CoreGameHUDController.Start
void GlobalNamespace::CoreGameHUDController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CoreGameHUDController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CoreGameHUDController::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoreGameHUDController::*)(float)>(&CoreGameHUDController::set_alpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoreGameHUDController*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CoreGameHUDController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoreGameHUDController::*)()>(&CoreGameHUDController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoreGameHUDController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CoreGameHUDController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoreGameHUDController::*)()>(&CoreGameHUDController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoreGameHUDController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoreGameHUDController::*)()>(&CoreGameHUDController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoreGameHUDController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CoreGameHUDController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoreGameHUDController::InitData::*)(bool, bool, bool)>(&CoreGameHUDController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoreGameHUDController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CoreGameHUDController::InitData::*)(bool, bool, bool)>(&CoreGameHUDController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CoreGameHUDController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FeverModeUIPanel
#include "GlobalNamespace/FeverModeUIPanel.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FeverModeUIPanel.Start
void GlobalNamespace::FeverModeUIPanel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeverModeUIPanel.OnDestroy
void GlobalNamespace::FeverModeUIPanel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeverModeUIPanel.Update
void GlobalNamespace::FeverModeUIPanel::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeverModeUIPanel.SetProgress
void GlobalNamespace::FeverModeUIPanel::SetProgress(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::SetProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, progress);
}
// Autogenerated method: FeverModeUIPanel.HandleFeverModeDidStart
void GlobalNamespace::FeverModeUIPanel::HandleFeverModeDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::HandleFeverModeDidStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFeverModeDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeverModeUIPanel.HandleFeverModeDidFinish
void GlobalNamespace::FeverModeUIPanel::HandleFeverModeDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::HandleFeverModeDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFeverModeDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FeverModeUIPanel.HandleFeverModeChargeProgressDidChange
void GlobalNamespace::FeverModeUIPanel::HandleFeverModeChargeProgressDidChange(float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FeverModeUIPanel::HandleFeverModeChargeProgressDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFeverModeChargeProgressDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, progress);
}
// Writing MetadataGetter for method: FeverModeUIPanel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::SetProgress
// Il2CppName: SetProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)(float)>(&FeverModeUIPanel::SetProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "SetProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::HandleFeverModeDidStart
// Il2CppName: HandleFeverModeDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::HandleFeverModeDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "HandleFeverModeDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::HandleFeverModeDidFinish
// Il2CppName: HandleFeverModeDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::HandleFeverModeDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "HandleFeverModeDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::HandleFeverModeChargeProgressDidChange
// Il2CppName: HandleFeverModeChargeProgressDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)(float)>(&FeverModeUIPanel::HandleFeverModeChargeProgressDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), "HandleFeverModeChargeProgressDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FeverModeUIPanel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FeverModeUIPanel::*)()>(&FeverModeUIPanel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FeverModeUIPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameEnergyUIPanel
#include "GlobalNamespace/GameEnergyUIPanel.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: IGameEnergyCounter
#include "GlobalNamespace/IGameEnergyCounter.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameEnergyUIPanel.Start
void GlobalNamespace::GameEnergyUIPanel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.Init
void GlobalNamespace::GameEnergyUIPanel::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.OnDestroy
void GlobalNamespace::GameEnergyUIPanel::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.CreateUIForBatteryEnergyType
void GlobalNamespace::GameEnergyUIPanel::CreateUIForBatteryEnergyType(int batteryLives) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::CreateUIForBatteryEnergyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateUIForBatteryEnergyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(batteryLives)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, batteryLives);
}
// Autogenerated method: GameEnergyUIPanel.RefreshEnergyUI
void GlobalNamespace::GameEnergyUIPanel::RefreshEnergyUI(float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::RefreshEnergyUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshEnergyUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, energy);
}
// Autogenerated method: GameEnergyUIPanel.HandleGameEnergyCounterDidInit
void GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyCounterDidInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyCounterDidInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyCounterDidInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameEnergyUIPanel.HandleGameEnergyDidChange
void GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyDidChange(float energy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameEnergyUIPanel::HandleGameEnergyDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(energy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, energy);
}
// Writing MetadataGetter for method: GameEnergyUIPanel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)()>(&GameEnergyUIPanel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)()>(&GameEnergyUIPanel::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)()>(&GameEnergyUIPanel::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::CreateUIForBatteryEnergyType
// Il2CppName: CreateUIForBatteryEnergyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)(int)>(&GameEnergyUIPanel::CreateUIForBatteryEnergyType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "CreateUIForBatteryEnergyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::RefreshEnergyUI
// Il2CppName: RefreshEnergyUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)(float)>(&GameEnergyUIPanel::RefreshEnergyUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "RefreshEnergyUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::HandleGameEnergyCounterDidInit
// Il2CppName: HandleGameEnergyCounterDidInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)()>(&GameEnergyUIPanel::HandleGameEnergyCounterDidInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "HandleGameEnergyCounterDidInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::HandleGameEnergyDidChange
// Il2CppName: HandleGameEnergyDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)(float)>(&GameEnergyUIPanel::HandleGameEnergyDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), "HandleGameEnergyDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GameEnergyUIPanel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)()>(&GameEnergyUIPanel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameEnergyUIPanel::*)()>(&GameEnergyUIPanel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameEnergyUIPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ImmediateRankUIPanel
#include "GlobalNamespace/ImmediateRankUIPanel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: RelativeScoreAndImmediateRankCounter
#include "GlobalNamespace/RelativeScoreAndImmediateRankCounter.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ImmediateRankUIPanel.Start
void GlobalNamespace::ImmediateRankUIPanel::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImmediateRankUIPanel::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ImmediateRankUIPanel.HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange
void GlobalNamespace::ImmediateRankUIPanel::HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImmediateRankUIPanel::HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ImmediateRankUIPanel.RefreshUI
void GlobalNamespace::ImmediateRankUIPanel::RefreshUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ImmediateRankUIPanel::RefreshUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ImmediateRankUIPanel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImmediateRankUIPanel::*)()>(&ImmediateRankUIPanel::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImmediateRankUIPanel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ImmediateRankUIPanel::HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange
// Il2CppName: HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImmediateRankUIPanel::*)()>(&ImmediateRankUIPanel::HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImmediateRankUIPanel*), "HandleRelativeScoreAndImmediateRankCounterRelativeScoreOrImmediateRankDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ImmediateRankUIPanel::RefreshUI
// Il2CppName: RefreshUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImmediateRankUIPanel::*)()>(&ImmediateRankUIPanel::RefreshUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImmediateRankUIPanel*), "RefreshUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ImmediateRankUIPanel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImmediateRankUIPanel::*)()>(&ImmediateRankUIPanel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImmediateRankUIPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ImmediateRankUIPanel::*)()>(&ImmediateRankUIPanel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ImmediateRankUIPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectiveGameUIView
#include "GlobalNamespace/MissionObjectiveGameUIView.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: MissionObjectiveChecker
#include "GlobalNamespace/MissionObjectiveChecker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionObjectiveGameUIView.SetMissionObjectiveChecker
void GlobalNamespace::MissionObjectiveGameUIView::SetMissionObjectiveChecker(GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveGameUIView::SetMissionObjectiveChecker");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMissionObjectiveChecker", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveGameUIView.HandleMissionObjectiveStatusDidChange
void GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveStatusDidChange(GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveStatusDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveStatusDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveGameUIView.HandleMissionObjectiveCheckedValueDidChange
void GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveCheckedValueDidChange(GlobalNamespace::MissionObjectiveChecker* missionObjectiveChecker) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveGameUIView::HandleMissionObjectiveCheckedValueDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckedValueDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionObjectiveChecker)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionObjectiveChecker);
}
// Autogenerated method: MissionObjectiveGameUIView.RefreshIcon
void GlobalNamespace::MissionObjectiveGameUIView::RefreshIcon() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveGameUIView::RefreshIcon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshIcon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectiveGameUIView.RefreshValue
void GlobalNamespace::MissionObjectiveGameUIView::RefreshValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectiveGameUIView::RefreshValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionObjectiveGameUIView::SetMissionObjectiveChecker
// Il2CppName: SetMissionObjectiveChecker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)(GlobalNamespace::MissionObjectiveChecker*)>(&MissionObjectiveGameUIView::SetMissionObjectiveChecker)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), "SetMissionObjectiveChecker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjectiveChecker*>()});
  }
};
// Writing MetadataGetter for method: MissionObjectiveGameUIView::HandleMissionObjectiveStatusDidChange
// Il2CppName: HandleMissionObjectiveStatusDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)(GlobalNamespace::MissionObjectiveChecker*)>(&MissionObjectiveGameUIView::HandleMissionObjectiveStatusDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), "HandleMissionObjectiveStatusDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjectiveChecker*>()});
  }
};
// Writing MetadataGetter for method: MissionObjectiveGameUIView::HandleMissionObjectiveCheckedValueDidChange
// Il2CppName: HandleMissionObjectiveCheckedValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)(GlobalNamespace::MissionObjectiveChecker*)>(&MissionObjectiveGameUIView::HandleMissionObjectiveCheckedValueDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), "HandleMissionObjectiveCheckedValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionObjectiveChecker*>()});
  }
};
// Writing MetadataGetter for method: MissionObjectiveGameUIView::RefreshIcon
// Il2CppName: RefreshIcon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)()>(&MissionObjectiveGameUIView::RefreshIcon)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), "RefreshIcon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveGameUIView::RefreshValue
// Il2CppName: RefreshValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)()>(&MissionObjectiveGameUIView::RefreshValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), "RefreshValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectiveGameUIView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)()>(&MissionObjectiveGameUIView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectiveGameUIView::*)()>(&MissionObjectiveGameUIView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectiveGameUIView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionObjectivesGameUIController
#include "GlobalNamespace/MissionObjectivesGameUIController.hpp"
// Including type: MissionObjectiveGameUIView
#include "GlobalNamespace/MissionObjectiveGameUIView.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionObjectivesGameUIController.Start
void GlobalNamespace::MissionObjectivesGameUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectivesGameUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectivesGameUIController.OnDestroy
void GlobalNamespace::MissionObjectivesGameUIController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectivesGameUIController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectivesGameUIController.HandleMissionObjectiveCheckersManagerObjectivesListDidChange
void GlobalNamespace::MissionObjectivesGameUIController::HandleMissionObjectiveCheckersManagerObjectivesListDidChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectivesGameUIController::HandleMissionObjectiveCheckersManagerObjectivesListDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckersManagerObjectivesListDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionObjectivesGameUIController.CreateUIElements
void GlobalNamespace::MissionObjectivesGameUIController::CreateUIElements() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionObjectivesGameUIController::CreateUIElements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateUIElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionObjectivesGameUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectivesGameUIController::*)()>(&MissionObjectivesGameUIController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectivesGameUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectivesGameUIController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectivesGameUIController::*)()>(&MissionObjectivesGameUIController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectivesGameUIController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectivesGameUIController::HandleMissionObjectiveCheckersManagerObjectivesListDidChange
// Il2CppName: HandleMissionObjectiveCheckersManagerObjectivesListDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectivesGameUIController::*)()>(&MissionObjectivesGameUIController::HandleMissionObjectiveCheckersManagerObjectivesListDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectivesGameUIController*), "HandleMissionObjectiveCheckersManagerObjectivesListDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectivesGameUIController::CreateUIElements
// Il2CppName: CreateUIElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectivesGameUIController::*)()>(&MissionObjectivesGameUIController::CreateUIElements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectivesGameUIController*), "CreateUIElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionObjectivesGameUIController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectivesGameUIController::*)()>(&MissionObjectivesGameUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectivesGameUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionObjectivesGameUIController::*)()>(&MissionObjectivesGameUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionObjectivesGameUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLeaderboardPanelController
#include "GlobalNamespace/MultiplayerLeaderboardPanelController.hpp"
// Including type: MultiplayerLeaderboardPanelItem
#include "GlobalNamespace/MultiplayerLeaderboardPanelItem.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLeaderboardPanelController.Start
void GlobalNamespace::MultiplayerLeaderboardPanelController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeaderboardPanelController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLeaderboardPanelController.Update
void GlobalNamespace::MultiplayerLeaderboardPanelController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeaderboardPanelController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLeaderboardPanelController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelController::*)()>(&MultiplayerLeaderboardPanelController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLeaderboardPanelController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelController::*)()>(&MultiplayerLeaderboardPanelController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLeaderboardPanelController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelController::*)()>(&MultiplayerLeaderboardPanelController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelController::*)()>(&MultiplayerLeaderboardPanelController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLeaderboardPanelItem
#include "GlobalNamespace/MultiplayerLeaderboardPanelItem.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLeaderboardPanelItem.SetData
void GlobalNamespace::MultiplayerLeaderboardPanelItem::SetData(int position, ::Il2CppString* playerName, int score, bool failed, int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeaderboardPanelItem::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(playerName), ::il2cpp_utils::ExtractType(score), ::il2cpp_utils::ExtractType(failed), ::il2cpp_utils::ExtractType(numberOfPlayers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, playerName, score, failed, numberOfPlayers);
}
// Autogenerated method: MultiplayerLeaderboardPanelItem.set_hide
void GlobalNamespace::MultiplayerLeaderboardPanelItem::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLeaderboardPanelItem::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MultiplayerLeaderboardPanelItem::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelItem::*)(int, ::Il2CppString*, int, bool, int)>(&MultiplayerLeaderboardPanelItem::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelItem*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLeaderboardPanelItem::set_hide
// Il2CppName: set_hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelItem::*)(bool)>(&MultiplayerLeaderboardPanelItem::set_hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelItem*), "set_hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLeaderboardPanelItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelItem::*)()>(&MultiplayerLeaderboardPanelItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLeaderboardPanelItem::*)()>(&MultiplayerLeaderboardPanelItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLeaderboardPanelItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerPositionHUDController
#include "GlobalNamespace/MultiplayerPositionHUDController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: MultiplayerPlayersManager
#include "GlobalNamespace/MultiplayerPlayersManager.hpp"
// Including type: CoreGameHUDController/InitData
#include "GlobalNamespace/CoreGameHUDController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerPositionHUDController.set_alpha
void GlobalNamespace::MultiplayerPositionHUDController::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionHUDController::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerPositionHUDController.Start
void GlobalNamespace::MultiplayerPositionHUDController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionHUDController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerPositionHUDController.Update
void GlobalNamespace::MultiplayerPositionHUDController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerPositionHUDController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerPositionHUDController::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionHUDController::*)(float)>(&MultiplayerPositionHUDController::set_alpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionHUDController*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerPositionHUDController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionHUDController::*)()>(&MultiplayerPositionHUDController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionHUDController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerPositionHUDController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionHUDController::*)()>(&MultiplayerPositionHUDController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionHUDController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerPositionHUDController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionHUDController::*)()>(&MultiplayerPositionHUDController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionHUDController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerPositionHUDController::*)()>(&MultiplayerPositionHUDController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerPositionHUDController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RelativeScoreAndImmediateRankCounter
#include "GlobalNamespace/RelativeScoreAndImmediateRankCounter.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RelativeScoreAndImmediateRankCounter.add_relativeScoreOrImmediateRankDidChangeEvent
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::add_relativeScoreOrImmediateRankDidChangeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::add_relativeScoreOrImmediateRankDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_relativeScoreOrImmediateRankDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.remove_relativeScoreOrImmediateRankDidChangeEvent
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::remove_relativeScoreOrImmediateRankDidChangeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::remove_relativeScoreOrImmediateRankDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_relativeScoreOrImmediateRankDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.get_relativeScore
float GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_relativeScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_relativeScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_relativeScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.set_relativeScore
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_relativeScore(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_relativeScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_relativeScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.get_immediateRank
GlobalNamespace::RankModel::Rank GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_immediateRank() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::get_immediateRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_immediateRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::RankModel::Rank, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.set_immediateRank
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_immediateRank(GlobalNamespace::RankModel::Rank value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::set_immediateRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_immediateRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.Start
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.OnDestroy
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.HandleScoreControllerImmediateMaxPossibleScoreDidChange
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::HandleScoreControllerImmediateMaxPossibleScoreDidChange(int immediateMaxPossibleScore, int immediateMaxPossibleModifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::HandleScoreControllerImmediateMaxPossibleScoreDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreControllerImmediateMaxPossibleScoreDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(immediateMaxPossibleScore), ::il2cpp_utils::ExtractType(immediateMaxPossibleModifiedScore)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, immediateMaxPossibleScore, immediateMaxPossibleModifiedScore);
}
// Autogenerated method: RelativeScoreAndImmediateRankCounter.UpdateRelativeScoreAndImmediateRank
void GlobalNamespace::RelativeScoreAndImmediateRankCounter::UpdateRelativeScoreAndImmediateRank(int score, int modifiedScore, int maxPossibleScore, int maxPossibleModifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RelativeScoreAndImmediateRankCounter::UpdateRelativeScoreAndImmediateRank");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRelativeScoreAndImmediateRank", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(score), ::il2cpp_utils::ExtractType(modifiedScore), ::il2cpp_utils::ExtractType(maxPossibleScore), ::il2cpp_utils::ExtractType(maxPossibleModifiedScore)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, score, modifiedScore, maxPossibleScore, maxPossibleModifiedScore);
}
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::add_relativeScoreOrImmediateRankDidChangeEvent
// Il2CppName: add_relativeScoreOrImmediateRankDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)(System::Action*)>(&RelativeScoreAndImmediateRankCounter::add_relativeScoreOrImmediateRankDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "add_relativeScoreOrImmediateRankDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::remove_relativeScoreOrImmediateRankDidChangeEvent
// Il2CppName: remove_relativeScoreOrImmediateRankDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)(System::Action*)>(&RelativeScoreAndImmediateRankCounter::remove_relativeScoreOrImmediateRankDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "remove_relativeScoreOrImmediateRankDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::get_relativeScore
// Il2CppName: get_relativeScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (RelativeScoreAndImmediateRankCounter::*)()>(&RelativeScoreAndImmediateRankCounter::get_relativeScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "get_relativeScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::set_relativeScore
// Il2CppName: set_relativeScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)(float)>(&RelativeScoreAndImmediateRankCounter::set_relativeScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "set_relativeScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::get_immediateRank
// Il2CppName: get_immediateRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::RankModel::Rank (RelativeScoreAndImmediateRankCounter::*)()>(&RelativeScoreAndImmediateRankCounter::get_immediateRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "get_immediateRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::set_immediateRank
// Il2CppName: set_immediateRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)(GlobalNamespace::RankModel::Rank)>(&RelativeScoreAndImmediateRankCounter::set_immediateRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "set_immediateRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::RankModel::Rank>()});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)()>(&RelativeScoreAndImmediateRankCounter::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)()>(&RelativeScoreAndImmediateRankCounter::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::HandleScoreControllerImmediateMaxPossibleScoreDidChange
// Il2CppName: HandleScoreControllerImmediateMaxPossibleScoreDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)(int, int)>(&RelativeScoreAndImmediateRankCounter::HandleScoreControllerImmediateMaxPossibleScoreDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "HandleScoreControllerImmediateMaxPossibleScoreDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::UpdateRelativeScoreAndImmediateRank
// Il2CppName: UpdateRelativeScoreAndImmediateRank
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)(int, int, int, int)>(&RelativeScoreAndImmediateRankCounter::UpdateRelativeScoreAndImmediateRank)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), "UpdateRelativeScoreAndImmediateRank", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: RelativeScoreAndImmediateRankCounter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)()>(&RelativeScoreAndImmediateRankCounter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RelativeScoreAndImmediateRankCounter::*)()>(&RelativeScoreAndImmediateRankCounter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RelativeScoreAndImmediateRankCounter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ScoreMultiplierUIController
#include "GlobalNamespace/ScoreMultiplierUIController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ScoreMultiplierUIController.Start
void GlobalNamespace::ScoreMultiplierUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.OnEnable
void GlobalNamespace::ScoreMultiplierUIController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.OnDisable
void GlobalNamespace::ScoreMultiplierUIController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.RegisterForEvents
void GlobalNamespace::ScoreMultiplierUIController::RegisterForEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::RegisterForEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.UnregisterFromEvents
void GlobalNamespace::ScoreMultiplierUIController::UnregisterFromEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::UnregisterFromEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.Update
void GlobalNamespace::ScoreMultiplierUIController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreMultiplierUIController.HandleMultiplierDidChange
void GlobalNamespace::ScoreMultiplierUIController::HandleMultiplierDidChange(int multiplier, float progress) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreMultiplierUIController::HandleMultiplierDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplierDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier), ::il2cpp_utils::ExtractType(progress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplier, progress);
}
// Writing MetadataGetter for method: ScoreMultiplierUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::RegisterForEvents
// Il2CppName: RegisterForEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::RegisterForEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "RegisterForEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::UnregisterFromEvents
// Il2CppName: UnregisterFromEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::UnregisterFromEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "UnregisterFromEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::HandleMultiplierDidChange
// Il2CppName: HandleMultiplierDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)(int, float)>(&ScoreMultiplierUIController::HandleMultiplierDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), "HandleMultiplierDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: ScoreMultiplierUIController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreMultiplierUIController::*)()>(&ScoreMultiplierUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreMultiplierUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreUIController
#include "GlobalNamespace/ScoreUIController.hpp"
// Including type: ScoreUIController/InitData
#include "GlobalNamespace/ScoreUIController_InitData.hpp"
// Including type: ScoreUIController/ScoreDisplayType
#include "GlobalNamespace/ScoreUIController_ScoreDisplayType.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfDigits
int GlobalNamespace::ScoreUIController::_get_kMaxNumberOfDigits() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::_get_kMaxNumberOfDigits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "ScoreUIController", "kMaxNumberOfDigits"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfDigits
void GlobalNamespace::ScoreUIController::_set_kMaxNumberOfDigits(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::_set_kMaxNumberOfDigits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreUIController", "kMaxNumberOfDigits", value));
}
// Autogenerated method: ScoreUIController.Start
void GlobalNamespace::ScoreUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.OnEnable
void GlobalNamespace::ScoreUIController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.OnDisable
void GlobalNamespace::ScoreUIController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.RegisterForEvents
void GlobalNamespace::ScoreUIController::RegisterForEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::RegisterForEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterForEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.UnregisterFromEvents
void GlobalNamespace::ScoreUIController::UnregisterFromEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::UnregisterFromEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterFromEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ScoreUIController.HandleScoreDidChangeRealtime
void GlobalNamespace::ScoreUIController::HandleScoreDidChangeRealtime(int rawScore, int modifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::HandleScoreDidChangeRealtime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleScoreDidChangeRealtime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawScore), ::il2cpp_utils::ExtractType(modifiedScore)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rawScore, modifiedScore);
}
// Autogenerated method: ScoreUIController.UpdateScore
void GlobalNamespace::ScoreUIController::UpdateScore(int rawScore, int modifiedScore) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::UpdateScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rawScore), ::il2cpp_utils::ExtractType(modifiedScore)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rawScore, modifiedScore);
}
// Autogenerated method: ScoreUIController.Append000Number
void GlobalNamespace::ScoreUIController::Append000Number(System::Text::StringBuilder* stringBuilder, int number) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::Append000Number");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ScoreUIController", "Append000Number", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringBuilder), ::il2cpp_utils::ExtractType(number)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stringBuilder, number);
}
// Writing MetadataGetter for method: ScoreUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreUIController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreUIController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreUIController::RegisterForEvents
// Il2CppName: RegisterForEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::RegisterForEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "RegisterForEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreUIController::UnregisterFromEvents
// Il2CppName: UnregisterFromEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::UnregisterFromEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "UnregisterFromEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ScoreUIController::HandleScoreDidChangeRealtime
// Il2CppName: HandleScoreDidChangeRealtime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)(int, int)>(&ScoreUIController::HandleScoreDidChangeRealtime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "HandleScoreDidChangeRealtime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScoreUIController::UpdateScore
// Il2CppName: UpdateScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)(int, int)>(&ScoreUIController::UpdateScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "UpdateScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScoreUIController::Append000Number
// Il2CppName: Append000Number
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Text::StringBuilder*, int)>(&ScoreUIController::Append000Number)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), "Append000Number", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ScoreUIController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::*)()>(&ScoreUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreUIController/InitData
#include "GlobalNamespace/ScoreUIController_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ScoreUIController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::InitData::*)(GlobalNamespace::ScoreUIController::ScoreDisplayType)>(&ScoreUIController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScoreUIController::ScoreDisplayType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScoreUIController::InitData::*)(GlobalNamespace::ScoreUIController::ScoreDisplayType)>(&ScoreUIController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScoreUIController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScoreUIController::ScoreDisplayType>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ScoreUIController/ScoreDisplayType
#include "GlobalNamespace/ScoreUIController_ScoreDisplayType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ScoreUIController/ScoreDisplayType RawScore
GlobalNamespace::ScoreUIController::ScoreDisplayType GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_RawScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_RawScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScoreUIController::ScoreDisplayType>("", "ScoreUIController/ScoreDisplayType", "RawScore"));
}
// Autogenerated static field setter
// Set static field: static public ScoreUIController/ScoreDisplayType RawScore
void GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_RawScore(GlobalNamespace::ScoreUIController::ScoreDisplayType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_RawScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreUIController/ScoreDisplayType", "RawScore", value));
}
// Autogenerated static field getter
// Get static field: static public ScoreUIController/ScoreDisplayType ModifiedScore
GlobalNamespace::ScoreUIController::ScoreDisplayType GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_ModifiedScore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::ScoreDisplayType::_get_ModifiedScore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ScoreUIController::ScoreDisplayType>("", "ScoreUIController/ScoreDisplayType", "ModifiedScore"));
}
// Autogenerated static field setter
// Set static field: static public ScoreUIController/ScoreDisplayType ModifiedScore
void GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_ModifiedScore(GlobalNamespace::ScoreUIController::ScoreDisplayType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreUIController::ScoreDisplayType::_set_ModifiedScore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ScoreUIController/ScoreDisplayType", "ModifiedScore", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SetApplicationVersionText
#include "GlobalNamespace/SetApplicationVersionText.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SetApplicationVersionText.Start
void GlobalNamespace::SetApplicationVersionText::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SetApplicationVersionText::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SetApplicationVersionText::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetApplicationVersionText::*)()>(&SetApplicationVersionText::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetApplicationVersionText*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SetApplicationVersionText::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetApplicationVersionText::*)()>(&SetApplicationVersionText::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetApplicationVersionText*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SetApplicationVersionText::*)()>(&SetApplicationVersionText::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetApplicationVersionText*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongProgressUIController
#include "GlobalNamespace/SongProgressUIController.hpp"
// Including type: UnityEngine.UI.Slider
#include "UnityEngine/UI/Slider.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongProgressUIController.Start
void GlobalNamespace::SongProgressUIController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongProgressUIController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongProgressUIController.Update
void GlobalNamespace::SongProgressUIController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongProgressUIController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongProgressUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongProgressUIController::*)()>(&SongProgressUIController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongProgressUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongProgressUIController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongProgressUIController::*)()>(&SongProgressUIController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongProgressUIController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongProgressUIController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongProgressUIController::*)()>(&SongProgressUIController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongProgressUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongProgressUIController::*)()>(&SongProgressUIController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongProgressUIController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EventsTestGameplayManager
#include "GlobalNamespace/EventsTestGameplayManager.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EventsTestGameplayManager.Awake
void GlobalNamespace::EventsTestGameplayManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EventsTestGameplayManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EventsTestGameplayManager.Update
void GlobalNamespace::EventsTestGameplayManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EventsTestGameplayManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EventsTestGameplayManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventsTestGameplayManager::*)()>(&EventsTestGameplayManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventsTestGameplayManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EventsTestGameplayManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventsTestGameplayManager::*)()>(&EventsTestGameplayManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventsTestGameplayManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EventsTestGameplayManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventsTestGameplayManager::*)()>(&EventsTestGameplayManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventsTestGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventsTestGameplayManager::*)()>(&EventsTestGameplayManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventsTestGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILevelEndActions.add_levelFailedEvent
void GlobalNamespace::ILevelEndActions::add_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelEndActions::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelEndActions.remove_levelFailedEvent
void GlobalNamespace::ILevelEndActions::remove_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelEndActions::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelEndActions.add_levelFinishedEvent
void GlobalNamespace::ILevelEndActions::add_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelEndActions::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ILevelEndActions.remove_levelFinishedEvent
void GlobalNamespace::ILevelEndActions::remove_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelEndActions::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ILevelEndActions::add_levelFailedEvent
// Il2CppName: add_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelEndActions::*)(System::Action*)>(&ILevelEndActions::add_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelEndActions*), "add_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILevelEndActions::remove_levelFailedEvent
// Il2CppName: remove_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelEndActions::*)(System::Action*)>(&ILevelEndActions::remove_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelEndActions*), "remove_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILevelEndActions::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelEndActions::*)(System::Action*)>(&ILevelEndActions::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelEndActions*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ILevelEndActions::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelEndActions::*)(System::Action*)>(&ILevelEndActions::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelEndActions*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmappingGameplayManager
#include "GlobalNamespace/LightmappingGameplayManager.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightmappingGameplayManager.Start
void GlobalNamespace::LightmappingGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmappingGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LightmappingGameplayManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmappingGameplayManager::*)()>(&LightmappingGameplayManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmappingGameplayManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmappingGameplayManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmappingGameplayManager::*)()>(&LightmappingGameplayManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmappingGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmappingGameplayManager::*)()>(&LightmappingGameplayManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmappingGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelGameplayManager
#include "GlobalNamespace/MissionLevelGameplayManager.hpp"
// Including type: MissionLevelGameplayManager/InitData
#include "GlobalNamespace/MissionLevelGameplayManager_InitData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MissionLevelGameplayManager/<Start>d__16
#include "GlobalNamespace/MissionLevelGameplayManager_-Start-d__16.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionLevelGameplayManager.add_levelFailedEvent
void GlobalNamespace::MissionLevelGameplayManager::add_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.remove_levelFailedEvent
void GlobalNamespace::MissionLevelGameplayManager::remove_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.add_levelFinishedEvent
void GlobalNamespace::MissionLevelGameplayManager::add_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.remove_levelFinishedEvent
void GlobalNamespace::MissionLevelGameplayManager::remove_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionLevelGameplayManager.Awake
void GlobalNamespace::MissionLevelGameplayManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.Start
System::Collections::IEnumerator* GlobalNamespace::MissionLevelGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.OnDestroy
void GlobalNamespace::MissionLevelGameplayManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandleGameEnergyDidReach0
void GlobalNamespace::MissionLevelGameplayManager::HandleGameEnergyDidReach0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::HandleGameEnergyDidReach0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandleMissionObjectiveCheckersManagerObjectiveDidFail
void GlobalNamespace::MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionObjectiveCheckersManagerObjectiveDidFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandleSongDidFinish
void GlobalNamespace::MissionLevelGameplayManager::HandleSongDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::HandleSongDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandlePauseControllerCanPause
void GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerCanPause(System::Action_1<bool>* canPause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerCanPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerCanPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canPause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, canPause);
}
// Autogenerated method: MissionLevelGameplayManager.HandlePauseControllerDidPause
void GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager.HandlePauseControllerDidResume
void GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionLevelGameplayManager::add_levelFailedEvent
// Il2CppName: add_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)(System::Action*)>(&MissionLevelGameplayManager::add_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "add_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::remove_levelFailedEvent
// Il2CppName: remove_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)(System::Action*)>(&MissionLevelGameplayManager::remove_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "remove_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)(System::Action*)>(&MissionLevelGameplayManager::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)(System::Action*)>(&MissionLevelGameplayManager::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::HandleGameEnergyDidReach0
// Il2CppName: HandleGameEnergyDidReach0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::HandleGameEnergyDidReach0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail
// Il2CppName: HandleMissionObjectiveCheckersManagerObjectiveDidFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "HandleMissionObjectiveCheckersManagerObjectiveDidFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::HandleSongDidFinish
// Il2CppName: HandleSongDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::HandleSongDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "HandleSongDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::HandlePauseControllerCanPause
// Il2CppName: HandlePauseControllerCanPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)(System::Action_1<bool>*)>(&MissionLevelGameplayManager::HandlePauseControllerCanPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "HandlePauseControllerCanPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::HandlePauseControllerDidPause
// Il2CppName: HandlePauseControllerDidPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::HandlePauseControllerDidPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "HandlePauseControllerDidPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::HandlePauseControllerDidResume
// Il2CppName: HandlePauseControllerDidResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::HandlePauseControllerDidResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), "HandlePauseControllerDidResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::*)()>(&MissionLevelGameplayManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelGameplayManager/InitData
#include "GlobalNamespace/MissionLevelGameplayManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MissionLevelGameplayManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::InitData::*)(bool)>(&MissionLevelGameplayManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::InitData::*)(bool)>(&MissionLevelGameplayManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelGameplayManager/GameState
#include "GlobalNamespace/MissionLevelGameplayManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Intro
GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Intro() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Intro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Intro"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Intro
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Intro(GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Intro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Intro", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Playing
GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Playing
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Playing(GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Playing", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Paused
GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Paused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Paused"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Paused
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Paused(GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Paused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Paused", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Finished
GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Finished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Finished"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Finished
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Finished(GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Finished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Finished", value));
}
// Autogenerated static field getter
// Get static field: static public MissionLevelGameplayManager/GameState Failed
GlobalNamespace::MissionLevelGameplayManager::GameState GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::MissionLevelGameplayManager::GameState>("", "MissionLevelGameplayManager/GameState", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public MissionLevelGameplayManager/GameState Failed
void GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Failed(GlobalNamespace::MissionLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::GameState::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MissionLevelGameplayManager/GameState", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionLevelGameplayManager/<Start>d__16
#include "GlobalNamespace/MissionLevelGameplayManager_-Start-d__16.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionLevelGameplayManager/<Start>d__16.System.IDisposable.Dispose
void GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__16.MoveNext
bool GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__16.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__16.System.Collections.IEnumerator.Reset
void GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelGameplayManager/<Start>d__16.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelGameplayManager::$Start$d__16::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionLevelGameplayManager::$Start$d__16::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::$Start$d__16::*)(int)>(&MissionLevelGameplayManager::$Start$d__16::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::$Start$d__16::*)(int)>(&MissionLevelGameplayManager::$Start$d__16::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::$Start$d__16::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::$Start$d__16::*)()>(&MissionLevelGameplayManager::$Start$d__16::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::$Start$d__16::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionLevelGameplayManager::$Start$d__16::*)()>(&MissionLevelGameplayManager::$Start$d__16::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::$Start$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionLevelGameplayManager::$Start$d__16::*)()>(&MissionLevelGameplayManager::$Start$d__16::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::$Start$d__16::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelGameplayManager::$Start$d__16::*)()>(&MissionLevelGameplayManager::$Start$d__16::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelGameplayManager::$Start$d__16::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionLevelGameplayManager::$Start$d__16::*)()>(&MissionLevelGameplayManager::$Start$d__16::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelGameplayManager::$Start$d__16*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockLevelEndActions
#include "GlobalNamespace/MockLevelEndActions.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockLevelEndActions.add_levelFailedEvent
void GlobalNamespace::MockLevelEndActions::add_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockLevelEndActions::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockLevelEndActions.remove_levelFailedEvent
void GlobalNamespace::MockLevelEndActions::remove_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockLevelEndActions::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockLevelEndActions.add_levelFinishedEvent
void GlobalNamespace::MockLevelEndActions::add_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockLevelEndActions::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockLevelEndActions.remove_levelFinishedEvent
void GlobalNamespace::MockLevelEndActions::remove_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockLevelEndActions::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: MockLevelEndActions::add_levelFailedEvent
// Il2CppName: add_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockLevelEndActions::*)(System::Action*)>(&MockLevelEndActions::add_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockLevelEndActions*), "add_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockLevelEndActions::remove_levelFailedEvent
// Il2CppName: remove_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockLevelEndActions::*)(System::Action*)>(&MockLevelEndActions::remove_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockLevelEndActions*), "remove_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockLevelEndActions::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockLevelEndActions::*)(System::Action*)>(&MockLevelEndActions::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockLevelEndActions*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockLevelEndActions::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockLevelEndActions::*)(System::Action*)>(&MockLevelEndActions::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockLevelEndActions*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockLevelEndActions::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockLevelEndActions::*)()>(&MockLevelEndActions::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockLevelEndActions*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockLevelEndActions::*)()>(&MockLevelEndActions::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockLevelEndActions*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelGameplayManager
#include "GlobalNamespace/StandardLevelGameplayManager.hpp"
// Including type: StandardLevelGameplayManager/InitData
#include "GlobalNamespace/StandardLevelGameplayManager_InitData.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: StandardLevelGameplayManager/<Start>d__15
#include "GlobalNamespace/StandardLevelGameplayManager_-Start-d__15.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelGameplayManager.add_levelFailedEvent
void GlobalNamespace::StandardLevelGameplayManager::add_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::add_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.remove_levelFailedEvent
void GlobalNamespace::StandardLevelGameplayManager::remove_levelFailedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::remove_levelFailedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFailedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.add_levelFinishedEvent
void GlobalNamespace::StandardLevelGameplayManager::add_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::add_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.remove_levelFinishedEvent
void GlobalNamespace::StandardLevelGameplayManager::remove_levelFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::remove_levelFinishedEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_levelFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelGameplayManager.Awake
void GlobalNamespace::StandardLevelGameplayManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.Start
System::Collections::IEnumerator* GlobalNamespace::StandardLevelGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.OnDestroy
void GlobalNamespace::StandardLevelGameplayManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.Update
void GlobalNamespace::StandardLevelGameplayManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandleGameEnergyDidReach0
void GlobalNamespace::StandardLevelGameplayManager::HandleGameEnergyDidReach0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::HandleGameEnergyDidReach0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandleSongDidFinish
void GlobalNamespace::StandardLevelGameplayManager::HandleSongDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::HandleSongDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSongDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandlePauseControllerCanPause
void GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerCanPause(System::Action_1<bool>* canPause) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerCanPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerCanPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(canPause)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, canPause);
}
// Autogenerated method: StandardLevelGameplayManager.HandlePauseControllerDidPause
void GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager.HandlePauseControllerDidResume
void GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::HandlePauseControllerDidResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseControllerDidResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelGameplayManager::add_levelFailedEvent
// Il2CppName: add_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)(System::Action*)>(&StandardLevelGameplayManager::add_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "add_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::remove_levelFailedEvent
// Il2CppName: remove_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)(System::Action*)>(&StandardLevelGameplayManager::remove_levelFailedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "remove_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)(System::Action*)>(&StandardLevelGameplayManager::add_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)(System::Action*)>(&StandardLevelGameplayManager::remove_levelFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::HandleGameEnergyDidReach0
// Il2CppName: HandleGameEnergyDidReach0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::HandleGameEnergyDidReach0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::HandleSongDidFinish
// Il2CppName: HandleSongDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::HandleSongDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "HandleSongDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::HandlePauseControllerCanPause
// Il2CppName: HandlePauseControllerCanPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)(System::Action_1<bool>*)>(&StandardLevelGameplayManager::HandlePauseControllerCanPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "HandlePauseControllerCanPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::HandlePauseControllerDidPause
// Il2CppName: HandlePauseControllerDidPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::HandlePauseControllerDidPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "HandlePauseControllerDidPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::HandlePauseControllerDidResume
// Il2CppName: HandlePauseControllerDidResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::HandlePauseControllerDidResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), "HandlePauseControllerDidResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::*)()>(&StandardLevelGameplayManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelGameplayManager/InitData
#include "GlobalNamespace/StandardLevelGameplayManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: StandardLevelGameplayManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::InitData::*)(bool)>(&StandardLevelGameplayManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::InitData::*)(bool)>(&StandardLevelGameplayManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelGameplayManager/GameState
#include "GlobalNamespace/StandardLevelGameplayManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Intro
GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Intro() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Intro");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Intro"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Intro
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Intro(GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Intro");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Intro", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Playing
GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Playing
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Playing(GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Playing", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Paused
GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Paused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Paused"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Paused
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Paused(GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Paused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Paused", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Finished
GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Finished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Finished");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Finished"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Finished
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Finished(GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Finished");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Finished", value));
}
// Autogenerated static field getter
// Get static field: static public StandardLevelGameplayManager/GameState Failed
GlobalNamespace::StandardLevelGameplayManager::GameState GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::StandardLevelGameplayManager::GameState>("", "StandardLevelGameplayManager/GameState", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public StandardLevelGameplayManager/GameState Failed
void GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Failed(GlobalNamespace::StandardLevelGameplayManager::GameState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::GameState::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "StandardLevelGameplayManager/GameState", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelGameplayManager/<Start>d__15
#include "GlobalNamespace/StandardLevelGameplayManager_-Start-d__15.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelGameplayManager/<Start>d__15.System.IDisposable.Dispose
void GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__15.MoveNext
bool GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__15.System.Collections.IEnumerator.Reset
void GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelGameplayManager/<Start>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelGameplayManager::$Start$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: StandardLevelGameplayManager::$Start$d__15::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::$Start$d__15::*)(int)>(&StandardLevelGameplayManager::$Start$d__15::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::$Start$d__15::*)(int)>(&StandardLevelGameplayManager::$Start$d__15::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::$Start$d__15::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::$Start$d__15::*)()>(&StandardLevelGameplayManager::$Start$d__15::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::$Start$d__15::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (StandardLevelGameplayManager::$Start$d__15::*)()>(&StandardLevelGameplayManager::$Start$d__15::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::$Start$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StandardLevelGameplayManager::$Start$d__15::*)()>(&StandardLevelGameplayManager::$Start$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::$Start$d__15::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelGameplayManager::$Start$d__15::*)()>(&StandardLevelGameplayManager::$Start$d__15::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelGameplayManager::$Start$d__15::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (StandardLevelGameplayManager::$Start$d__15::*)()>(&StandardLevelGameplayManager::$Start$d__15::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelGameplayManager::$Start$d__15*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TrailerGameplayManager
#include "GlobalNamespace/TrailerGameplayManager.hpp"
// Including type: TrailerGameplayManager/<Start>d__4
#include "GlobalNamespace/TrailerGameplayManager_-Start-d__4.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: MainCamera
#include "GlobalNamespace/MainCamera.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrailerGameplayManager.Start
System::Collections::IEnumerator* GlobalNamespace::TrailerGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailerGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TrailerGameplayManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TrailerGameplayManager::*)()>(&TrailerGameplayManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailerGameplayManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailerGameplayManager::*)()>(&TrailerGameplayManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailerGameplayManager::*)()>(&TrailerGameplayManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TrailerGameplayManager/<Start>d__4
#include "GlobalNamespace/TrailerGameplayManager_-Start-d__4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.IDisposable.Dispose
void GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.MoveNext
bool GlobalNamespace::TrailerGameplayManager::$Start$d__4::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailerGameplayManager::$Start$d__4::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.Collections.IEnumerator.Reset
void GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TrailerGameplayManager/<Start>d__4.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailerGameplayManager::$Start$d__4::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TrailerGameplayManager::$Start$d__4::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailerGameplayManager::$Start$d__4::*)(int)>(&TrailerGameplayManager::$Start$d__4::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailerGameplayManager::$Start$d__4::*)(int)>(&TrailerGameplayManager::$Start$d__4::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TrailerGameplayManager::$Start$d__4::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailerGameplayManager::$Start$d__4::*)()>(&TrailerGameplayManager::$Start$d__4::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailerGameplayManager::$Start$d__4::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrailerGameplayManager::$Start$d__4::*)()>(&TrailerGameplayManager::$Start$d__4::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailerGameplayManager::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TrailerGameplayManager::$Start$d__4::*)()>(&TrailerGameplayManager::$Start$d__4::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrailerGameplayManager::$Start$d__4::*)()>(&TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TrailerGameplayManager::$Start$d__4::*)()>(&TrailerGameplayManager::$Start$d__4::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrailerGameplayManager::$Start$d__4*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: WaypointsTestGameplayManager
#include "GlobalNamespace/WaypointsTestGameplayManager.hpp"
// Including type: BTSCharacterSpawnController
#include "GlobalNamespace/BTSCharacterSpawnController.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
// Including type: StandardGameplaySceneSetupData
#include "GlobalNamespace/StandardGameplaySceneSetupData.hpp"
// Including type: GameplayCoreSceneSetupData
#include "GlobalNamespace/GameplayCoreSceneSetupData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: WaypointsTestGameplayManager.Start
void GlobalNamespace::WaypointsTestGameplayManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestGameplayManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestGameplayManager.LateUpdate
void GlobalNamespace::WaypointsTestGameplayManager::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestGameplayManager::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestGameplayManager.OnDestroy
void GlobalNamespace::WaypointsTestGameplayManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestGameplayManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: WaypointsTestGameplayManager.GetBar
::Il2CppString* GlobalNamespace::WaypointsTestGameplayManager::GetBar(float songTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestGameplayManager::GetBar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(songTime)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, songTime);
}
// Autogenerated method: WaypointsTestGameplayManager.OnDrawGizmos
void GlobalNamespace::WaypointsTestGameplayManager::OnDrawGizmos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::WaypointsTestGameplayManager::OnDrawGizmos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: WaypointsTestGameplayManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointsTestGameplayManager::*)()>(&WaypointsTestGameplayManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointsTestGameplayManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointsTestGameplayManager::*)()>(&WaypointsTestGameplayManager::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointsTestGameplayManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointsTestGameplayManager::*)()>(&WaypointsTestGameplayManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointsTestGameplayManager::GetBar
// Il2CppName: GetBar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (WaypointsTestGameplayManager::*)(float)>(&WaypointsTestGameplayManager::GetBar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), "GetBar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: WaypointsTestGameplayManager::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointsTestGameplayManager::*)()>(&WaypointsTestGameplayManager::OnDrawGizmos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaypointsTestGameplayManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointsTestGameplayManager::*)()>(&WaypointsTestGameplayManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaypointsTestGameplayManager::*)()>(&WaypointsTestGameplayManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaypointsTestGameplayManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GamePause
#include "GlobalNamespace/GamePause.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: GameEnergyCounter
#include "GlobalNamespace/GameEnergyCounter.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: AudioListenerController
#include "GlobalNamespace/AudioListenerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GamePause.add_didPauseEvent
void GlobalNamespace::GamePause::add_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::add_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.remove_didPauseEvent
void GlobalNamespace::GamePause::remove_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::remove_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.add_willResumeEvent
void GlobalNamespace::GamePause::add_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::add_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.remove_willResumeEvent
void GlobalNamespace::GamePause::remove_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::remove_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.add_didResumeEvent
void GlobalNamespace::GamePause::add_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::add_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.remove_didResumeEvent
void GlobalNamespace::GamePause::remove_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::remove_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GamePause.Pause
void GlobalNamespace::GamePause::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GamePause.WillResume
void GlobalNamespace::GamePause::WillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::WillResume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GamePause.Resume
void GlobalNamespace::GamePause::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GamePause::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GamePause::add_didPauseEvent
// Il2CppName: add_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)(System::Action*)>(&GamePause::add_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "add_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GamePause::remove_didPauseEvent
// Il2CppName: remove_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)(System::Action*)>(&GamePause::remove_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "remove_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GamePause::add_willResumeEvent
// Il2CppName: add_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)(System::Action*)>(&GamePause::add_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "add_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GamePause::remove_willResumeEvent
// Il2CppName: remove_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)(System::Action*)>(&GamePause::remove_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "remove_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GamePause::add_didResumeEvent
// Il2CppName: add_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)(System::Action*)>(&GamePause::add_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "add_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GamePause::remove_didResumeEvent
// Il2CppName: remove_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)(System::Action*)>(&GamePause::remove_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "remove_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GamePause::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)()>(&GamePause::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GamePause::WillResume
// Il2CppName: WillResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)()>(&GamePause::WillResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "WillResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GamePause::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)()>(&GamePause::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GamePause::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)()>(&GamePause::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GamePause::*)()>(&GamePause::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GamePause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IGamePause.add_didPauseEvent
void GlobalNamespace::IGamePause::add_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::add_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.remove_didPauseEvent
void GlobalNamespace::IGamePause::remove_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::remove_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.add_willResumeEvent
void GlobalNamespace::IGamePause::add_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::add_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.remove_willResumeEvent
void GlobalNamespace::IGamePause::remove_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::remove_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.add_didResumeEvent
void GlobalNamespace::IGamePause::add_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::add_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.remove_didResumeEvent
void GlobalNamespace::IGamePause::remove_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::remove_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IGamePause.Pause
void GlobalNamespace::IGamePause::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGamePause.WillResume
void GlobalNamespace::IGamePause::WillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::WillResume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: IGamePause.Resume
void GlobalNamespace::IGamePause::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IGamePause::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IGamePause::add_didPauseEvent
// Il2CppName: add_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)(System::Action*)>(&IGamePause::add_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "add_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IGamePause::remove_didPauseEvent
// Il2CppName: remove_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)(System::Action*)>(&IGamePause::remove_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "remove_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IGamePause::add_willResumeEvent
// Il2CppName: add_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)(System::Action*)>(&IGamePause::add_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "add_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IGamePause::remove_willResumeEvent
// Il2CppName: remove_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)(System::Action*)>(&IGamePause::remove_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "remove_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IGamePause::add_didResumeEvent
// Il2CppName: add_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)(System::Action*)>(&IGamePause::add_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "add_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IGamePause::remove_didResumeEvent
// Il2CppName: remove_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)(System::Action*)>(&IGamePause::remove_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "remove_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IGamePause::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)()>(&IGamePause::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGamePause::WillResume
// Il2CppName: WillResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)()>(&IGamePause::WillResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "WillResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IGamePause::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IGamePause::*)()>(&IGamePause::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IGamePause*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalPlayerInGameMenuInitData
#include "GlobalNamespace/LocalPlayerInGameMenuInitData.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LocalPlayerInGameMenuInitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalPlayerInGameMenuInitData::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, bool)>(&LocalPlayerInGameMenuInitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalPlayerInGameMenuInitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalPlayerInGameMenuInitData::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, bool)>(&LocalPlayerInGameMenuInitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalPlayerInGameMenuInitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DelayedMenuButtonTrigger
#include "GlobalNamespace/DelayedMenuButtonTrigger.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DelayedMenuButtonTrigger.add_menuButtonTriggeredEvent
void GlobalNamespace::DelayedMenuButtonTrigger::add_menuButtonTriggeredEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DelayedMenuButtonTrigger::add_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DelayedMenuButtonTrigger.remove_menuButtonTriggeredEvent
void GlobalNamespace::DelayedMenuButtonTrigger::remove_menuButtonTriggeredEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DelayedMenuButtonTrigger::remove_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DelayedMenuButtonTrigger.Tick
void GlobalNamespace::DelayedMenuButtonTrigger::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DelayedMenuButtonTrigger::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DelayedMenuButtonTrigger::add_menuButtonTriggeredEvent
// Il2CppName: add_menuButtonTriggeredEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelayedMenuButtonTrigger::*)(System::Action*)>(&DelayedMenuButtonTrigger::add_menuButtonTriggeredEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelayedMenuButtonTrigger*), "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DelayedMenuButtonTrigger::remove_menuButtonTriggeredEvent
// Il2CppName: remove_menuButtonTriggeredEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelayedMenuButtonTrigger::*)(System::Action*)>(&DelayedMenuButtonTrigger::remove_menuButtonTriggeredEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelayedMenuButtonTrigger*), "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: DelayedMenuButtonTrigger::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelayedMenuButtonTrigger::*)()>(&DelayedMenuButtonTrigger::Tick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelayedMenuButtonTrigger*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DelayedMenuButtonTrigger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelayedMenuButtonTrigger::*)()>(&DelayedMenuButtonTrigger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelayedMenuButtonTrigger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelayedMenuButtonTrigger::*)()>(&DelayedMenuButtonTrigger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelayedMenuButtonTrigger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IMenuButtonTrigger
#include "GlobalNamespace/IMenuButtonTrigger.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IMenuButtonTrigger.add_menuButtonTriggeredEvent
void GlobalNamespace::IMenuButtonTrigger::add_menuButtonTriggeredEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuButtonTrigger::add_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: IMenuButtonTrigger.remove_menuButtonTriggeredEvent
void GlobalNamespace::IMenuButtonTrigger::remove_menuButtonTriggeredEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IMenuButtonTrigger::remove_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: IMenuButtonTrigger::add_menuButtonTriggeredEvent
// Il2CppName: add_menuButtonTriggeredEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuButtonTrigger::*)(System::Action*)>(&IMenuButtonTrigger::add_menuButtonTriggeredEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuButtonTrigger*), "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: IMenuButtonTrigger::remove_menuButtonTriggeredEvent
// Il2CppName: remove_menuButtonTriggeredEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMenuButtonTrigger::*)(System::Action*)>(&IMenuButtonTrigger::remove_menuButtonTriggeredEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMenuButtonTrigger*), "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: InstantMenuButtonTrigger
#include "GlobalNamespace/InstantMenuButtonTrigger.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: InstantMenuButtonTrigger.add_menuButtonTriggeredEvent
void GlobalNamespace::InstantMenuButtonTrigger::add_menuButtonTriggeredEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InstantMenuButtonTrigger::add_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InstantMenuButtonTrigger.remove_menuButtonTriggeredEvent
void GlobalNamespace::InstantMenuButtonTrigger::remove_menuButtonTriggeredEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InstantMenuButtonTrigger::remove_menuButtonTriggeredEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: InstantMenuButtonTrigger.Tick
void GlobalNamespace::InstantMenuButtonTrigger::Tick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::InstantMenuButtonTrigger::Tick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Tick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InstantMenuButtonTrigger::add_menuButtonTriggeredEvent
// Il2CppName: add_menuButtonTriggeredEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantMenuButtonTrigger::*)(System::Action*)>(&InstantMenuButtonTrigger::add_menuButtonTriggeredEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantMenuButtonTrigger*), "add_menuButtonTriggeredEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: InstantMenuButtonTrigger::remove_menuButtonTriggeredEvent
// Il2CppName: remove_menuButtonTriggeredEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantMenuButtonTrigger::*)(System::Action*)>(&InstantMenuButtonTrigger::remove_menuButtonTriggeredEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantMenuButtonTrigger*), "remove_menuButtonTriggeredEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: InstantMenuButtonTrigger::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantMenuButtonTrigger::*)()>(&InstantMenuButtonTrigger::Tick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantMenuButtonTrigger*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstantMenuButtonTrigger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantMenuButtonTrigger::*)()>(&InstantMenuButtonTrigger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantMenuButtonTrigger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstantMenuButtonTrigger::*)()>(&InstantMenuButtonTrigger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstantMenuButtonTrigger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MockPause
#include "GlobalNamespace/MockPause.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MockPause.add_didPauseEvent
void GlobalNamespace::MockPause::add_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::add_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPause.remove_didPauseEvent
void GlobalNamespace::MockPause::remove_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::remove_didPauseEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPause.add_willResumeEvent
void GlobalNamespace::MockPause::add_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::add_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPause.remove_willResumeEvent
void GlobalNamespace::MockPause::remove_willResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::remove_willResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPause.add_didResumeEvent
void GlobalNamespace::MockPause::add_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::add_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPause.remove_didResumeEvent
void GlobalNamespace::MockPause::remove_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::remove_didResumeEvent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MockPause.Pause
void GlobalNamespace::MockPause::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::Pause");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPause.WillResume
void GlobalNamespace::MockPause::WillResume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::WillResume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MockPause.Resume
void GlobalNamespace::MockPause::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockPause::Resume");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MockPause::add_didPauseEvent
// Il2CppName: add_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)(System::Action*)>(&MockPause::add_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "add_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockPause::remove_didPauseEvent
// Il2CppName: remove_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)(System::Action*)>(&MockPause::remove_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "remove_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockPause::add_willResumeEvent
// Il2CppName: add_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)(System::Action*)>(&MockPause::add_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "add_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockPause::remove_willResumeEvent
// Il2CppName: remove_willResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)(System::Action*)>(&MockPause::remove_willResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "remove_willResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockPause::add_didResumeEvent
// Il2CppName: add_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)(System::Action*)>(&MockPause::add_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "add_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockPause::remove_didResumeEvent
// Il2CppName: remove_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)(System::Action*)>(&MockPause::remove_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "remove_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MockPause::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)()>(&MockPause::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockPause::WillResume
// Il2CppName: WillResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)()>(&MockPause::WillResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "WillResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockPause::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)()>(&MockPause::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MockPause::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)()>(&MockPause::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MockPause::*)()>(&MockPause::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MockPause*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerInGameMenuController
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuController.hpp"
// Including type: MultiplayerLocalActivePlayerInGameMenuController/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuController_--c__DisplayClass18_0.hpp"
// Including type: MultiplayerLocalActivePlayerInGameMenuViewController
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuViewController.hpp"
// Including type: IMenuButtonTrigger
#include "GlobalNamespace/IMenuButtonTrigger.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.add_didGiveUpEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::add_didGiveUpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::add_didGiveUpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didGiveUpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.remove_didGiveUpEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::remove_didGiveUpEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::remove_didGiveUpEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didGiveUpEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.add_canShowInGameMenuEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::add_canShowInGameMenuEvent(System::Action_1<System::Action_1<bool>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::add_canShowInGameMenuEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_canShowInGameMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.remove_canShowInGameMenuEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::remove_canShowInGameMenuEvent(System::Action_1<System::Action_1<bool>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::remove_canShowInGameMenuEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_canShowInGameMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.add_requestsDisconnectEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::add_requestsDisconnectEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::add_requestsDisconnectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_requestsDisconnectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.remove_requestsDisconnectEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::remove_requestsDisconnectEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::remove_requestsDisconnectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_requestsDisconnectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.get_gameMenuIsShown
bool GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::get_gameMenuIsShown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::get_gameMenuIsShown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMenuIsShown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.get_canShowInGameMenu
bool GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::get_canShowInGameMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::get_canShowInGameMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canShowInGameMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.Start
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.OnDestroy
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.OnApplicationPause
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::OnApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.ShowInGameMenu
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::ShowInGameMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::ShowInGameMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowInGameMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HideInGameMenu
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HideInGameMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HideInGameMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideInGameMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HandleMenuButtonTriggered
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleMenuButtonTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleMenuButtonTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuButtonTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HandleInputFocusWasCaptured
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInputFocusWasCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInputFocusWasCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusWasCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HandleInGameMenuViewControllerDidPressResumeButton
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressResumeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressResumeButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInGameMenuViewControllerDidPressResumeButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HandleInGameMenuViewControllerDidPressGiveUpButton
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressGiveUpButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressGiveUpButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInGameMenuViewControllerDidPressGiveUpButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HandleInGameMenuViewControllerDidPressDisconnectButton
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressDisconnectButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressDisconnectButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInGameMenuViewControllerDidPressDisconnectButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController.HandleStateChanged
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::add_didGiveUpEvent
// Il2CppName: add_didGiveUpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuController::add_didGiveUpEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "add_didGiveUpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::remove_didGiveUpEvent
// Il2CppName: remove_didGiveUpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuController::remove_didGiveUpEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "remove_didGiveUpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::add_canShowInGameMenuEvent
// Il2CppName: add_canShowInGameMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(System::Action_1<System::Action_1<bool>*>*)>(&MultiplayerLocalActivePlayerInGameMenuController::add_canShowInGameMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "add_canShowInGameMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Action_1<bool>*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::remove_canShowInGameMenuEvent
// Il2CppName: remove_canShowInGameMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(System::Action_1<System::Action_1<bool>*>*)>(&MultiplayerLocalActivePlayerInGameMenuController::remove_canShowInGameMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "remove_canShowInGameMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Action_1<bool>*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::add_requestsDisconnectEvent
// Il2CppName: add_requestsDisconnectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuController::add_requestsDisconnectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "add_requestsDisconnectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::remove_requestsDisconnectEvent
// Il2CppName: remove_requestsDisconnectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuController::remove_requestsDisconnectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "remove_requestsDisconnectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::get_gameMenuIsShown
// Il2CppName: get_gameMenuIsShown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::get_gameMenuIsShown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "get_gameMenuIsShown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::get_canShowInGameMenu
// Il2CppName: get_canShowInGameMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::get_canShowInGameMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "get_canShowInGameMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(bool)>(&MultiplayerLocalActivePlayerInGameMenuController::OnApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::ShowInGameMenu
// Il2CppName: ShowInGameMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::ShowInGameMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "ShowInGameMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HideInGameMenu
// Il2CppName: HideInGameMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::HideInGameMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HideInGameMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HandleMenuButtonTriggered
// Il2CppName: HandleMenuButtonTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::HandleMenuButtonTriggered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HandleMenuButtonTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HandleInputFocusWasCaptured
// Il2CppName: HandleInputFocusWasCaptured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::HandleInputFocusWasCaptured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HandleInputFocusWasCaptured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressResumeButton
// Il2CppName: HandleInGameMenuViewControllerDidPressResumeButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressResumeButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HandleInGameMenuViewControllerDidPressResumeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressGiveUpButton
// Il2CppName: HandleInGameMenuViewControllerDidPressGiveUpButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressGiveUpButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HandleInGameMenuViewControllerDidPressGiveUpButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressDisconnectButton
// Il2CppName: HandleInGameMenuViewControllerDidPressDisconnectButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::HandleInGameMenuViewControllerDidPressDisconnectButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HandleInGameMenuViewControllerDidPressDisconnectButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)(GlobalNamespace::MultiplayerController::State)>(&MultiplayerLocalActivePlayerInGameMenuController::HandleStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerController::State>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerInGameMenuController/<>c__DisplayClass18_0
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuController_--c__DisplayClass18_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuController/<>c__DisplayClass18_0.<get_canShowInGameMenu>b__0
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::$get_canShowInGameMenu$b__0(bool newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::<get_canShowInGameMenu>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_canShowInGameMenu>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newValue);
}
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::$get_canShowInGameMenu$b__0
// Il2CppName: <get_canShowInGameMenu>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::*)(bool)>(&MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::$get_canShowInGameMenu$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0*), "<get_canShowInGameMenu>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::*)()>(&MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuController::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalActivePlayerInGameMenuViewController
#include "GlobalNamespace/MultiplayerLocalActivePlayerInGameMenuViewController.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: Polyglot.LocalizedTextMeshProUGUI
#include "Polyglot/LocalizedTextMeshProUGUI.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DisconnectPromptView
#include "GlobalNamespace/DisconnectPromptView.hpp"
// Including type: LevelBar
#include "GlobalNamespace/LevelBar.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: LocalPlayerInGameMenuInitData
#include "GlobalNamespace/LocalPlayerInGameMenuInitData.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
// Including type: MultiplayerLocalPlayerDisconnectHelper
#include "GlobalNamespace/MultiplayerLocalPlayerDisconnectHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kDisabledInteractionDuration
float GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::_get_kDisabledInteractionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::_get_kDisabledInteractionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "MultiplayerLocalActivePlayerInGameMenuViewController", "kDisabledInteractionDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDisabledInteractionDuration
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::_set_kDisabledInteractionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::_set_kDisabledInteractionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerLocalActivePlayerInGameMenuViewController", "kDisabledInteractionDuration", value));
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.add_didPressDisconnectButtonEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressDisconnectButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressDisconnectButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressDisconnectButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.remove_didPressDisconnectButtonEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressDisconnectButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressDisconnectButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressDisconnectButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.add_didPressGiveUpButtonEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressGiveUpButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressGiveUpButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressGiveUpButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.remove_didPressGiveUpButtonEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressGiveUpButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressGiveUpButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressGiveUpButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.add_didPressResumeButtonEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressResumeButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressResumeButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressResumeButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.remove_didPressResumeButtonEvent
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressResumeButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressResumeButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressResumeButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.Awake
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.Start
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.OnDestroy
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.Update
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.ShowMenu
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::ShowMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::ShowMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.HideMenu
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::HideMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::HideMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.DisconnectButtonPressed
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::DisconnectButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::DisconnectButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.HandleDisconnectPromptViewDidViewFinish
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish(bool disconnect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnectPromptViewDidViewFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnect);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.GiveUpButtonPressed
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::GiveUpButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::GiveUpButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GiveUpButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.ResumeButtonPressed
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::ResumeButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::ResumeButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalActivePlayerInGameMenuViewController.<HandleDisconnectPromptViewDidViewFinish>b__32_0
void GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::$HandleDisconnectPromptViewDidViewFinish$b__32_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerInGameMenuViewController::<HandleDisconnectPromptViewDidViewFinish>b__32_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleDisconnectPromptViewDidViewFinish>b__32_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressDisconnectButtonEvent
// Il2CppName: add_didPressDisconnectButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressDisconnectButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "add_didPressDisconnectButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressDisconnectButtonEvent
// Il2CppName: remove_didPressDisconnectButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressDisconnectButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "remove_didPressDisconnectButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressGiveUpButtonEvent
// Il2CppName: add_didPressGiveUpButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressGiveUpButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "add_didPressGiveUpButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressGiveUpButtonEvent
// Il2CppName: remove_didPressGiveUpButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressGiveUpButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "remove_didPressGiveUpButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressResumeButtonEvent
// Il2CppName: add_didPressResumeButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuViewController::add_didPressResumeButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "add_didPressResumeButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressResumeButtonEvent
// Il2CppName: remove_didPressResumeButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(System::Action*)>(&MultiplayerLocalActivePlayerInGameMenuViewController::remove_didPressResumeButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "remove_didPressResumeButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::ShowMenu
// Il2CppName: ShowMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::ShowMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "ShowMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::HideMenu
// Il2CppName: HideMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::HideMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "HideMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::DisconnectButtonPressed
// Il2CppName: DisconnectButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::DisconnectButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "DisconnectButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish
// Il2CppName: HandleDisconnectPromptViewDidViewFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)(bool)>(&MultiplayerLocalActivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "HandleDisconnectPromptViewDidViewFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::GiveUpButtonPressed
// Il2CppName: GiveUpButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::GiveUpButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "GiveUpButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::ResumeButtonPressed
// Il2CppName: ResumeButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::ResumeButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "ResumeButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::$HandleDisconnectPromptViewDidViewFinish$b__32_0
// Il2CppName: <HandleDisconnectPromptViewDidViewFinish>b__32_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::$HandleDisconnectPromptViewDidViewFinish$b__32_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), "<HandleDisconnectPromptViewDidViewFinish>b__32_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalActivePlayerInGameMenuViewController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalActivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalActivePlayerInGameMenuViewController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalActivePlayerInGameMenuViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLocalInactivePlayerInGameMenuViewController
#include "GlobalNamespace/MultiplayerLocalInactivePlayerInGameMenuViewController.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: Polyglot.LocalizedTextMeshProUGUI
#include "Polyglot/LocalizedTextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: DisconnectPromptView
#include "GlobalNamespace/DisconnectPromptView.hpp"
// Including type: LevelBar
#include "GlobalNamespace/LevelBar.hpp"
// Including type: LocalPlayerInGameMenuInitData
#include "GlobalNamespace/LocalPlayerInGameMenuInitData.hpp"
// Including type: MultiplayerLocalPlayerDisconnectHelper
#include "GlobalNamespace/MultiplayerLocalPlayerDisconnectHelper.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.ToggleBinder
#include "HMUI/ToggleBinder.hpp"
// Including type: Tweening.Tween
#include "Tweening/Tween.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.OnEnable
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.OnDisable
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.Start
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.OnDestroy
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.DisconnectButtonPressed
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::DisconnectButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::DisconnectButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.DetailsToggleValueChanged
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::DetailsToggleValueChanged(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::DetailsToggleValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DetailsToggleValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.HandleDisconnectPromptViewDidViewFinish
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish(bool disconnect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDisconnectPromptViewDidViewFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnect);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.HandleStateChanged
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::HandleStateChanged(GlobalNamespace::MultiplayerController::State state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::HandleStateChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.<HandleDisconnectPromptViewDidViewFinish>b__22_0
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleDisconnectPromptViewDidViewFinish$b__22_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::<HandleDisconnectPromptViewDidViewFinish>b__22_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleDisconnectPromptViewDidViewFinish>b__22_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.<HandleStateChanged>b__23_0
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleStateChanged$b__23_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::<HandleStateChanged>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleStateChanged>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerLocalInactivePlayerInGameMenuViewController.<HandleStateChanged>b__23_1
void GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleStateChanged$b__23_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalInactivePlayerInGameMenuViewController::<HandleStateChanged>b__23_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleStateChanged>b__23_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::DisconnectButtonPressed
// Il2CppName: DisconnectButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::DisconnectButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "DisconnectButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::DetailsToggleValueChanged
// Il2CppName: DetailsToggleValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)(bool)>(&MultiplayerLocalInactivePlayerInGameMenuViewController::DetailsToggleValueChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "DetailsToggleValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish
// Il2CppName: HandleDisconnectPromptViewDidViewFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)(bool)>(&MultiplayerLocalInactivePlayerInGameMenuViewController::HandleDisconnectPromptViewDidViewFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "HandleDisconnectPromptViewDidViewFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)(GlobalNamespace::MultiplayerController::State)>(&MultiplayerLocalInactivePlayerInGameMenuViewController::HandleStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerController::State>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleDisconnectPromptViewDidViewFinish$b__22_0
// Il2CppName: <HandleDisconnectPromptViewDidViewFinish>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleDisconnectPromptViewDidViewFinish$b__22_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "<HandleDisconnectPromptViewDidViewFinish>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleStateChanged$b__23_0
// Il2CppName: <HandleStateChanged>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)(float)>(&MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleStateChanged$b__23_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "<HandleStateChanged>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleStateChanged$b__23_1
// Il2CppName: <HandleStateChanged>b__23_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::$HandleStateChanged$b__23_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), "<HandleStateChanged>b__23_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLocalInactivePlayerInGameMenuViewController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLocalInactivePlayerInGameMenuViewController::*)()>(&MultiplayerLocalInactivePlayerInGameMenuViewController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLocalInactivePlayerInGameMenuViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerSpectatingSpotPickerViewController
#include "GlobalNamespace/MultiplayerSpectatingSpotPickerViewController.hpp"
// Including type: StepValuePicker
#include "GlobalNamespace/StepValuePicker.hpp"
// Including type: MultiplayerSpectatorController
#include "GlobalNamespace/MultiplayerSpectatorController.hpp"
// Including type: IMultiplayerSpectatingSpot
#include "GlobalNamespace/IMultiplayerSpectatingSpot.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerSpectatingSpotPickerViewController.Start
void GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotPickerViewController.OnDestroy
void GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotPickerViewController.HandleSpectatingSpotDidChangeEvent
void GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::HandleSpectatingSpotDidChangeEvent(GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::HandleSpectatingSpotDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSpectatingSpotDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spectatingSpot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spectatingSpot);
}
// Autogenerated method: MultiplayerSpectatingSpotPickerViewController.RefreshSpectatingSpotName
void GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::RefreshSpectatingSpotName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::RefreshSpectatingSpotName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshSpectatingSpotName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotPickerViewController.HandleIncButtonWasPressed
void GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::HandleIncButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::HandleIncButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleIncButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerSpectatingSpotPickerViewController.HandleDecButtonWasPressed
void GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::HandleDecButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerSpectatingSpotPickerViewController::HandleDecButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDecButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::HandleSpectatingSpotDidChangeEvent
// Il2CppName: HandleSpectatingSpotDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)(GlobalNamespace::IMultiplayerSpectatingSpot*)>(&MultiplayerSpectatingSpotPickerViewController::HandleSpectatingSpotDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), "HandleSpectatingSpotDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IMultiplayerSpectatingSpot*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::RefreshSpectatingSpotName
// Il2CppName: RefreshSpectatingSpotName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::RefreshSpectatingSpotName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), "RefreshSpectatingSpotName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::HandleIncButtonWasPressed
// Il2CppName: HandleIncButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::HandleIncButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), "HandleIncButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::HandleDecButtonWasPressed
// Il2CppName: HandleDecButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::HandleDecButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), "HandleDecButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerSpectatingSpotPickerViewController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerSpectatingSpotPickerViewController::*)()>(&MultiplayerSpectatingSpotPickerViewController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerSpectatingSpotPickerViewController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PauseAnimationController
#include "GlobalNamespace/PauseAnimationController.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PauseAnimationController.add_resumeFromPauseAnimationDidFinishEvent
void GlobalNamespace::PauseAnimationController::add_resumeFromPauseAnimationDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::add_resumeFromPauseAnimationDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_resumeFromPauseAnimationDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseAnimationController.remove_resumeFromPauseAnimationDidFinishEvent
void GlobalNamespace::PauseAnimationController::remove_resumeFromPauseAnimationDidFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::remove_resumeFromPauseAnimationDidFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_resumeFromPauseAnimationDidFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseAnimationController.Awake
void GlobalNamespace::PauseAnimationController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseAnimationController.StartEnterPauseAnimation
void GlobalNamespace::PauseAnimationController::StartEnterPauseAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::StartEnterPauseAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEnterPauseAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseAnimationController.StartResumeFromPauseAnimation
void GlobalNamespace::PauseAnimationController::StartResumeFromPauseAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::StartResumeFromPauseAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartResumeFromPauseAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseAnimationController.EnterPauseAnimationDidFinish
void GlobalNamespace::PauseAnimationController::EnterPauseAnimationDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::EnterPauseAnimationDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnterPauseAnimationDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseAnimationController.ResumeFromPauseAnimationDidFinish
void GlobalNamespace::PauseAnimationController::ResumeFromPauseAnimationDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseAnimationController::ResumeFromPauseAnimationDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeFromPauseAnimationDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PauseAnimationController::add_resumeFromPauseAnimationDidFinishEvent
// Il2CppName: add_resumeFromPauseAnimationDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)(System::Action*)>(&PauseAnimationController::add_resumeFromPauseAnimationDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "add_resumeFromPauseAnimationDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::remove_resumeFromPauseAnimationDidFinishEvent
// Il2CppName: remove_resumeFromPauseAnimationDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)(System::Action*)>(&PauseAnimationController::remove_resumeFromPauseAnimationDidFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "remove_resumeFromPauseAnimationDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::StartEnterPauseAnimation
// Il2CppName: StartEnterPauseAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::StartEnterPauseAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "StartEnterPauseAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::StartResumeFromPauseAnimation
// Il2CppName: StartResumeFromPauseAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::StartResumeFromPauseAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "StartResumeFromPauseAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::EnterPauseAnimationDidFinish
// Il2CppName: EnterPauseAnimationDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::EnterPauseAnimationDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "EnterPauseAnimationDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::ResumeFromPauseAnimationDidFinish
// Il2CppName: ResumeFromPauseAnimationDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::ResumeFromPauseAnimationDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), "ResumeFromPauseAnimationDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseAnimationController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseAnimationController::*)()>(&PauseAnimationController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseAnimationController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
// Including type: PauseController/<>c__DisplayClass20_0
#include "GlobalNamespace/PauseController_--c__DisplayClass20_0.hpp"
// Including type: PauseMenuManager
#include "GlobalNamespace/PauseMenuManager.hpp"
// Including type: IGamePause
#include "GlobalNamespace/IGamePause.hpp"
// Including type: IMenuButtonTrigger
#include "GlobalNamespace/IMenuButtonTrigger.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: ILevelRestartController
#include "GlobalNamespace/ILevelRestartController.hpp"
// Including type: IReturnToMenuController
#include "GlobalNamespace/IReturnToMenuController.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PauseController.add_didPauseEvent
void GlobalNamespace::PauseController::add_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::add_didPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.remove_didPauseEvent
void GlobalNamespace::PauseController::remove_didPauseEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::remove_didPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.add_didResumeEvent
void GlobalNamespace::PauseController::add_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::add_didResumeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.remove_didResumeEvent
void GlobalNamespace::PauseController::remove_didResumeEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::remove_didResumeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didResumeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.add_canPauseEvent
void GlobalNamespace::PauseController::add_canPauseEvent(System::Action_1<System::Action_1<bool>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::add_canPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_canPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.remove_canPauseEvent
void GlobalNamespace::PauseController::remove_canPauseEvent(System::Action_1<System::Action_1<bool>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::remove_canPauseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_canPauseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.add_didReturnToMenuEvent
void GlobalNamespace::PauseController::add_didReturnToMenuEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::add_didReturnToMenuEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didReturnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.remove_didReturnToMenuEvent
void GlobalNamespace::PauseController::remove_didReturnToMenuEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::remove_didReturnToMenuEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didReturnToMenuEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseController.get_canPause
bool GlobalNamespace::PauseController::get_canPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::get_canPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.get_wantsToPause
bool GlobalNamespace::PauseController::get_wantsToPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::get_wantsToPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wantsToPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.Start
void GlobalNamespace::PauseController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.OnDestroy
void GlobalNamespace::PauseController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.OnApplicationPause
void GlobalNamespace::PauseController::OnApplicationPause(bool pauseStatus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::OnApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pauseStatus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pauseStatus);
}
// Autogenerated method: PauseController.Pause
void GlobalNamespace::PauseController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandleMenuButtonTriggered
void GlobalNamespace::PauseController::HandleMenuButtonTriggered() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandleMenuButtonTriggered");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuButtonTriggered", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandleInputFocusWasCaptured
void GlobalNamespace::PauseController::HandleInputFocusWasCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandleInputFocusWasCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusWasCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandleHMDUnmounted
void GlobalNamespace::PauseController::HandleHMDUnmounted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandleHMDUnmounted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHMDUnmounted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandlePauseMenuManagerDidFinishResumeAnimation
void GlobalNamespace::PauseController::HandlePauseMenuManagerDidFinishResumeAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandlePauseMenuManagerDidFinishResumeAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseMenuManagerDidFinishResumeAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandlePauseMenuManagerDidPressContinueButton
void GlobalNamespace::PauseController::HandlePauseMenuManagerDidPressContinueButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandlePauseMenuManagerDidPressContinueButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseMenuManagerDidPressContinueButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandlePauseMenuManagerDidPressRestartButton
void GlobalNamespace::PauseController::HandlePauseMenuManagerDidPressRestartButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandlePauseMenuManagerDidPressRestartButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseMenuManagerDidPressRestartButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseController.HandlePauseMenuManagerDidPressMenuButton
void GlobalNamespace::PauseController::HandlePauseMenuManagerDidPressMenuButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::HandlePauseMenuManagerDidPressMenuButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePauseMenuManagerDidPressMenuButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PauseController::add_didPauseEvent
// Il2CppName: add_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action*)>(&PauseController::add_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "add_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseController::remove_didPauseEvent
// Il2CppName: remove_didPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action*)>(&PauseController::remove_didPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "remove_didPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseController::add_didResumeEvent
// Il2CppName: add_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action*)>(&PauseController::add_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "add_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseController::remove_didResumeEvent
// Il2CppName: remove_didResumeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action*)>(&PauseController::remove_didResumeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "remove_didResumeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseController::add_canPauseEvent
// Il2CppName: add_canPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action_1<System::Action_1<bool>*>*)>(&PauseController::add_canPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "add_canPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Action_1<bool>*>*>()});
  }
};
// Writing MetadataGetter for method: PauseController::remove_canPauseEvent
// Il2CppName: remove_canPauseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action_1<System::Action_1<bool>*>*)>(&PauseController::remove_canPauseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "remove_canPauseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<System::Action_1<bool>*>*>()});
  }
};
// Writing MetadataGetter for method: PauseController::add_didReturnToMenuEvent
// Il2CppName: add_didReturnToMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action*)>(&PauseController::add_didReturnToMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "add_didReturnToMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseController::remove_didReturnToMenuEvent
// Il2CppName: remove_didReturnToMenuEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(System::Action*)>(&PauseController::remove_didReturnToMenuEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "remove_didReturnToMenuEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseController::get_canPause
// Il2CppName: get_canPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PauseController::*)()>(&PauseController::get_canPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "get_canPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::get_wantsToPause
// Il2CppName: get_wantsToPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PauseController::*)()>(&PauseController::get_wantsToPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "get_wantsToPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)(bool)>(&PauseController::OnApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PauseController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandleMenuButtonTriggered
// Il2CppName: HandleMenuButtonTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandleMenuButtonTriggered)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandleMenuButtonTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandleInputFocusWasCaptured
// Il2CppName: HandleInputFocusWasCaptured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandleInputFocusWasCaptured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandleInputFocusWasCaptured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandleHMDUnmounted
// Il2CppName: HandleHMDUnmounted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandleHMDUnmounted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandleHMDUnmounted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandlePauseMenuManagerDidFinishResumeAnimation
// Il2CppName: HandlePauseMenuManagerDidFinishResumeAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandlePauseMenuManagerDidFinishResumeAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandlePauseMenuManagerDidFinishResumeAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandlePauseMenuManagerDidPressContinueButton
// Il2CppName: HandlePauseMenuManagerDidPressContinueButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandlePauseMenuManagerDidPressContinueButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandlePauseMenuManagerDidPressContinueButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandlePauseMenuManagerDidPressRestartButton
// Il2CppName: HandlePauseMenuManagerDidPressRestartButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandlePauseMenuManagerDidPressRestartButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandlePauseMenuManagerDidPressRestartButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::HandlePauseMenuManagerDidPressMenuButton
// Il2CppName: HandlePauseMenuManagerDidPressMenuButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::HandlePauseMenuManagerDidPressMenuButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), "HandlePauseMenuManagerDidPressMenuButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::*)()>(&PauseController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PauseController/<>c__DisplayClass20_0
#include "GlobalNamespace/PauseController_--c__DisplayClass20_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PauseController/<>c__DisplayClass20_0.<get_canPause>b__0
void GlobalNamespace::PauseController::$$c__DisplayClass20_0::$get_canPause$b__0(bool newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseController::$$c__DisplayClass20_0::<get_canPause>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_canPause>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newValue);
}
// Writing MetadataGetter for method: PauseController::$$c__DisplayClass20_0::$get_canPause$b__0
// Il2CppName: <get_canPause>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::$$c__DisplayClass20_0::*)(bool)>(&PauseController::$$c__DisplayClass20_0::$get_canPause$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController::$$c__DisplayClass20_0*), "<get_canPause>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PauseController::$$c__DisplayClass20_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::$$c__DisplayClass20_0::*)()>(&PauseController::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseController::$$c__DisplayClass20_0::*)()>(&PauseController::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseController::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PauseMenuManager
#include "GlobalNamespace/PauseMenuManager.hpp"
// Including type: PauseMenuManager/InitData
#include "GlobalNamespace/PauseMenuManager_InitData.hpp"
// Including type: PauseAnimationController
#include "GlobalNamespace/PauseAnimationController.hpp"
// Including type: LevelBar
#include "GlobalNamespace/LevelBar.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: VRControllersInputManager
#include "GlobalNamespace/VRControllersInputManager.hpp"
// Including type: EnvironmentSpawnRotation
#include "GlobalNamespace/EnvironmentSpawnRotation.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kDisabledInteractionDuration
float GlobalNamespace::PauseMenuManager::_get_kDisabledInteractionDuration() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::_get_kDisabledInteractionDuration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "PauseMenuManager", "kDisabledInteractionDuration"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDisabledInteractionDuration
void GlobalNamespace::PauseMenuManager::_set_kDisabledInteractionDuration(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::_set_kDisabledInteractionDuration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PauseMenuManager", "kDisabledInteractionDuration", value));
}
// Autogenerated method: PauseMenuManager.add_didPressContinueButtonEvent
void GlobalNamespace::PauseMenuManager::add_didPressContinueButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::add_didPressContinueButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressContinueButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.remove_didPressContinueButtonEvent
void GlobalNamespace::PauseMenuManager::remove_didPressContinueButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::remove_didPressContinueButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressContinueButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.add_didPressMenuButtonEvent
void GlobalNamespace::PauseMenuManager::add_didPressMenuButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::add_didPressMenuButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressMenuButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.remove_didPressMenuButtonEvent
void GlobalNamespace::PauseMenuManager::remove_didPressMenuButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::remove_didPressMenuButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressMenuButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.add_didPressRestartButtonEvent
void GlobalNamespace::PauseMenuManager::add_didPressRestartButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::add_didPressRestartButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didPressRestartButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.remove_didPressRestartButtonEvent
void GlobalNamespace::PauseMenuManager::remove_didPressRestartButtonEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::remove_didPressRestartButtonEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didPressRestartButtonEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.add_didFinishResumeAnimationEvent
void GlobalNamespace::PauseMenuManager::add_didFinishResumeAnimationEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::add_didFinishResumeAnimationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishResumeAnimationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.remove_didFinishResumeAnimationEvent
void GlobalNamespace::PauseMenuManager::remove_didFinishResumeAnimationEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::remove_didFinishResumeAnimationEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishResumeAnimationEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: PauseMenuManager.Awake
void GlobalNamespace::PauseMenuManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.Start
void GlobalNamespace::PauseMenuManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.OnDestroy
void GlobalNamespace::PauseMenuManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.Update
void GlobalNamespace::PauseMenuManager::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.ShowMenu
void GlobalNamespace::PauseMenuManager::ShowMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::ShowMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.StartResumeAnimation
void GlobalNamespace::PauseMenuManager::StartResumeAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::StartResumeAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartResumeAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.HandleResumeFromPauseAnimationDidFinish
void GlobalNamespace::PauseMenuManager::HandleResumeFromPauseAnimationDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::HandleResumeFromPauseAnimationDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResumeFromPauseAnimationDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.MenuButtonPressed
void GlobalNamespace::PauseMenuManager::MenuButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::MenuButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MenuButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.RestartButtonPressed
void GlobalNamespace::PauseMenuManager::RestartButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::RestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PauseMenuManager.ContinueButtonPressed
void GlobalNamespace::PauseMenuManager::ContinueButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PauseMenuManager::ContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PauseMenuManager::add_didPressContinueButtonEvent
// Il2CppName: add_didPressContinueButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::add_didPressContinueButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "add_didPressContinueButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::remove_didPressContinueButtonEvent
// Il2CppName: remove_didPressContinueButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::remove_didPressContinueButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "remove_didPressContinueButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::add_didPressMenuButtonEvent
// Il2CppName: add_didPressMenuButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::add_didPressMenuButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "add_didPressMenuButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::remove_didPressMenuButtonEvent
// Il2CppName: remove_didPressMenuButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::remove_didPressMenuButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "remove_didPressMenuButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::add_didPressRestartButtonEvent
// Il2CppName: add_didPressRestartButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::add_didPressRestartButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "add_didPressRestartButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::remove_didPressRestartButtonEvent
// Il2CppName: remove_didPressRestartButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::remove_didPressRestartButtonEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "remove_didPressRestartButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::add_didFinishResumeAnimationEvent
// Il2CppName: add_didFinishResumeAnimationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::add_didFinishResumeAnimationEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "add_didFinishResumeAnimationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::remove_didFinishResumeAnimationEvent
// Il2CppName: remove_didFinishResumeAnimationEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)(System::Action*)>(&PauseMenuManager::remove_didFinishResumeAnimationEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "remove_didFinishResumeAnimationEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::ShowMenu
// Il2CppName: ShowMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::ShowMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "ShowMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::StartResumeAnimation
// Il2CppName: StartResumeAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::StartResumeAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "StartResumeAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::HandleResumeFromPauseAnimationDidFinish
// Il2CppName: HandleResumeFromPauseAnimationDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::HandleResumeFromPauseAnimationDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "HandleResumeFromPauseAnimationDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::MenuButtonPressed
// Il2CppName: MenuButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::MenuButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "MenuButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::RestartButtonPressed
// Il2CppName: RestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::RestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "RestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::ContinueButtonPressed
// Il2CppName: ContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::ContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), "ContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PauseMenuManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::*)()>(&PauseMenuManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PauseMenuManager/InitData
#include "GlobalNamespace/PauseMenuManager_InitData.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PauseMenuManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::InitData::*)(::Il2CppString*, GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, bool, bool)>(&PauseMenuManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PauseMenuManager::InitData::*)(::Il2CppString*, GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, bool, bool)>(&PauseMenuManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PauseMenuManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ILevelRestartController
#include "GlobalNamespace/ILevelRestartController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ILevelRestartController.RestartLevel
void GlobalNamespace::ILevelRestartController::RestartLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ILevelRestartController::RestartLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ILevelRestartController::RestartLevel
// Il2CppName: RestartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ILevelRestartController::*)()>(&ILevelRestartController::RestartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ILevelRestartController*), "RestartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IReturnToMenuController
#include "GlobalNamespace/IReturnToMenuController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IReturnToMenuController.ReturnToMenu
void GlobalNamespace::IReturnToMenuController::ReturnToMenu() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IReturnToMenuController::ReturnToMenu");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReturnToMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IReturnToMenuController::ReturnToMenu
// Il2CppName: ReturnToMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IReturnToMenuController::*)()>(&IReturnToMenuController::ReturnToMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IReturnToMenuController*), "ReturnToMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionLevelFailedController
#include "GlobalNamespace/MissionLevelFailedController.hpp"
// Including type: MissionLevelFailedController/InitData
#include "GlobalNamespace/MissionLevelFailedController_InitData.hpp"
// Including type: MissionLevelFailedController/<LevelFailedCoroutine>d__13
#include "GlobalNamespace/MissionLevelFailedController_-LevelFailedCoroutine-d__13.hpp"
// Including type: PrepareLevelCompletionResults
#include "GlobalNamespace/PrepareLevelCompletionResults.hpp"
// Including type: LevelFailedTextEffect
#include "GlobalNamespace/LevelFailedTextEffect.hpp"
// Including type: MissionLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MissionLevelScenesTransitionSetupDataSO.hpp"
// Including type: MissionObjectiveCheckersManager
#include "GlobalNamespace/MissionObjectiveCheckersManager.hpp"
// Including type: BeatmapObjectSpawnController
#include "GlobalNamespace/BeatmapObjectSpawnController.hpp"
// Including type: GameSongController
#include "GlobalNamespace/GameSongController.hpp"
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionLevelFailedController.Start
void GlobalNamespace::MissionLevelFailedController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelFailedController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelFailedController.OnDestroy
void GlobalNamespace::MissionLevelFailedController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelFailedController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelFailedController.HandleLevelFailed
void GlobalNamespace::MissionLevelFailedController::HandleLevelFailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelFailedController::HandleLevelFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionLevelFailedController.LevelFailedCoroutine
System::Collections::IEnumerator* GlobalNamespace::MissionLevelFailedController::LevelFailedCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionLevelFailedController::LevelFailedCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelFailedCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionLevelFailedController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelFailedController::*)()>(&MissionLevelFailedController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelFailedController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelFailedController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelFailedController::*)()>(&MissionLevelFailedController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelFailedController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelFailedController::HandleLevelFailed
// Il2CppName: HandleLevelFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelFailedController::*)()>(&MissionLevelFailedController::HandleLevelFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelFailedController*), "HandleLevelFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelFailedController::LevelFailedCoroutine
// Il2CppName: LevelFailedCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MissionLevelFailedController::*)()>(&MissionLevelFailedController::LevelFailedCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelFailedController*), "LevelFailedCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionLevelFailedController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelFailedController::*)()>(&MissionLevelFailedController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelFailedController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionLevelFailedController::*)()>(&MissionLevelFailedController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionLevelFailedController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
