// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.BindingUtil
#include "Zenject/BindingUtil.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InvalidBindResponses
#include "Zenject/InvalidBindResponses.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.BindingUtil.AssertIsValidPrefab
void Zenject::BindingUtil::AssertIsValidPrefab(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsValidPrefab");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsValidPrefab", {}, ::il2cpp_utils::ExtractTypes(prefab)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prefab);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsValidGameObject
void Zenject::BindingUtil::AssertIsValidGameObject(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsValidGameObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsValidGameObject", {}, ::il2cpp_utils::ExtractTypes(gameObject)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameObject);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotComponent
void Zenject::BindingUtil::AssertIsNotComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsNotComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsNotComponent", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotComponent
void Zenject::BindingUtil::AssertIsNotComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsNotComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsNotComponent", {}, ::il2cpp_utils::ExtractTypes(type)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertDerivesFromUnityObject
void Zenject::BindingUtil::AssertDerivesFromUnityObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertDerivesFromUnityObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertDerivesFromUnityObject", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertDerivesFromUnityObject
void Zenject::BindingUtil::AssertDerivesFromUnityObject(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertDerivesFromUnityObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertDerivesFromUnityObject", {}, ::il2cpp_utils::ExtractTypes(type)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertTypesAreNotComponents
void Zenject::BindingUtil::AssertTypesAreNotComponents(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertTypesAreNotComponents");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertTypesAreNotComponents", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsValidResourcePath
void Zenject::BindingUtil::AssertIsValidResourcePath(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsValidResourcePath");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsValidResourcePath", {}, ::il2cpp_utils::ExtractTypes(resourcePath)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrScriptableObject
void Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsInterfaceOrScriptableObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsInterfaceOrScriptableObject", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrScriptableObject
void Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsInterfaceOrScriptableObject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsInterfaceOrScriptableObject", {}, ::il2cpp_utils::ExtractTypes(type)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrComponent
void Zenject::BindingUtil::AssertIsInterfaceOrComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsInterfaceOrComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsInterfaceOrComponent", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrComponent
void Zenject::BindingUtil::AssertIsInterfaceOrComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsInterfaceOrComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsInterfaceOrComponent", {}, ::il2cpp_utils::ExtractTypes(type)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsComponent
void Zenject::BindingUtil::AssertIsComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsComponent", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsComponent
void Zenject::BindingUtil::AssertIsComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsComponent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsComponent", {}, ::il2cpp_utils::ExtractTypes(type)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertTypesAreNotAbstract
void Zenject::BindingUtil::AssertTypesAreNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertTypesAreNotAbstract");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertTypesAreNotAbstract", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotAbstract
void Zenject::BindingUtil::AssertIsNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsNotAbstract");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsNotAbstract", {}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotAbstract
void Zenject::BindingUtil::AssertIsNotAbstract(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsNotAbstract");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsNotAbstract", {}, ::il2cpp_utils::ExtractTypes(type)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromType
void Zenject::BindingUtil::AssertIsDerivedFromType(System::Type* concreteType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsDerivedFromType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsDerivedFromType", {}, ::il2cpp_utils::ExtractTypes(concreteType, parentType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteType, parentType);
}
// Autogenerated method: Zenject.BindingUtil.AssertConcreteTypeListIsNotEmpty
void Zenject::BindingUtil::AssertConcreteTypeListIsNotEmpty(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertConcreteTypeListIsNotEmpty");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertConcreteTypeListIsNotEmpty", {}, ::il2cpp_utils::ExtractTypes(concreteTypes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromTypes
void Zenject::BindingUtil::AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes, Zenject::InvalidBindResponses invalidBindResponse) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsDerivedFromTypes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsDerivedFromTypes", {}, ::il2cpp_utils::ExtractTypes(concreteTypes, parentTypes, invalidBindResponse)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteTypes, parentTypes, invalidBindResponse);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromTypes
void Zenject::BindingUtil::AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsDerivedFromTypes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsDerivedFromTypes", {}, ::il2cpp_utils::ExtractTypes(concreteTypes, parentTypes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteTypes, parentTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromTypes
void Zenject::BindingUtil::AssertIsDerivedFromTypes(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertIsDerivedFromTypes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertIsDerivedFromTypes", {}, ::il2cpp_utils::ExtractTypes(concreteType, parentTypes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteType, parentTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertInstanceDerivesFromOrEqual
void Zenject::BindingUtil::AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertInstanceDerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertInstanceDerivesFromOrEqual", {}, ::il2cpp_utils::ExtractTypes(instance, parentTypes)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, instance, parentTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertInstanceDerivesFromOrEqual
void Zenject::BindingUtil::AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Type* baseType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("AssertInstanceDerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<void>(), "AssertInstanceDerivesFromOrEqual", {}, ::il2cpp_utils::ExtractTypes(instance, baseType)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, instance, baseType);
}
// Autogenerated method: Zenject.BindingUtil.CreateCachedProvider
Zenject::IProvider* Zenject::BindingUtil::CreateCachedProvider(Zenject::IProvider* creator) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("BindingUtil").WithContext("CreateCachedProvider");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", il2cpp_utils::NoArgClass<Zenject::IProvider*>(), "CreateCachedProvider", {}, ::il2cpp_utils::ExtractTypes(creator)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator);
}
