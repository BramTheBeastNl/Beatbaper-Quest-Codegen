// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConventionAssemblySelectionBinder
#include "Zenject/ConventionAssemblySelectionBinder.hpp"
// Including type: Zenject.ConventionAssemblySelectionBinder/<>c
#include "Zenject/ConventionAssemblySelectionBinder_--c.hpp"
// Including type: Zenject.ConventionAssemblySelectionBinder/<>c__DisplayClass12_0
#include "Zenject/ConventionAssemblySelectionBinder_--c__DisplayClass12_0.hpp"
// Including type: Zenject.ConventionBindInfo
#include "Zenject/ConventionBindInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.get_BindInfo
Zenject::ConventionBindInfo* Zenject::ConventionAssemblySelectionBinder::get_BindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("get_BindInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_BindInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ConventionBindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.set_BindInfo
void Zenject::ConventionAssemblySelectionBinder::set_BindInfo(Zenject::ConventionBindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("set_BindInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_BindInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAllAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAllAssemblies() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAllAssemblies");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAllAssemblies", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesContaining
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(::Array<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAssembliesContaining");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAssembliesContaining", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, types);
}
// Creating initializer_list -> params proxy for: System.Void FromAssembliesContaining(params System.Type[] types)
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(std::initializer_list<System::Type*> types) {
  Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(::Array<System::Type*>::New(types));
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesContaining
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesContaining(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAssembliesContaining");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAssembliesContaining", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(types)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, types);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromThisAssembly
void Zenject::ConventionAssemblySelectionBinder::FromThisAssembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromThisAssembly");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromThisAssembly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembly
void Zenject::ConventionAssemblySelectionBinder::FromAssembly(System::Reflection::Assembly* assembly) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAssembly");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAssembly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(assembly)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assembly);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(::Array<System::Reflection::Assembly*>* assemblies) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAssemblies");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAssemblies", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(assemblies)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assemblies);
}
// Creating initializer_list -> params proxy for: System.Void FromAssemblies(params System.Reflection.Assembly[] assemblies)
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(std::initializer_list<System::Reflection::Assembly*> assemblies) {
  Zenject::ConventionAssemblySelectionBinder::FromAssemblies(::Array<System::Reflection::Assembly*>::New(assemblies));
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssemblies
void Zenject::ConventionAssemblySelectionBinder::FromAssemblies(System::Collections::Generic::IEnumerable_1<System::Reflection::Assembly*>* assemblies) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAssemblies");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAssemblies", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(assemblies)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, assemblies);
}
// Autogenerated method: Zenject.ConventionAssemblySelectionBinder.FromAssembliesWhere
void Zenject::ConventionAssemblySelectionBinder::FromAssembliesWhere(System::Func_2<System::Reflection::Assembly*, bool>* predicate) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConventionAssemblySelectionBinder").WithContext("FromAssembliesWhere");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromAssembliesWhere", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(predicate)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, predicate);
}
