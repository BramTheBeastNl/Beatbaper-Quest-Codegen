// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Internal.ReflectionInfoTypeInfoConverter/<>c__DisplayClass8_0
#include "Zenject/Internal/ReflectionInfoTypeInfoConverter_--c__DisplayClass8_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Reflection.FieldInfo
#include "System/Reflection/FieldInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter/<>c__DisplayClass8_0.<GetOnlyPropertySetter>b__0
bool Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_0::$GetOnlyPropertySetter$b__0(System::Reflection::FieldInfo* f) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject::Internal").WithContext("$$c__DisplayClass8_0").WithContext("<GetOnlyPropertySetter>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetOnlyPropertySetter>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(f))));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, f);
}
// Autogenerated method: Zenject.Internal.ReflectionInfoTypeInfoConverter/<>c__DisplayClass8_0.<GetOnlyPropertySetter>b__2
void Zenject::Internal::ReflectionInfoTypeInfoConverter::$$c__DisplayClass8_0::$GetOnlyPropertySetter$b__2(::Il2CppObject* injectable, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject::Internal").WithContext("$$c__DisplayClass8_0").WithContext("<GetOnlyPropertySetter>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetOnlyPropertySetter>b__2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(injectable, value))));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectable, value);
}
