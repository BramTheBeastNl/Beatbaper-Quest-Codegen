// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ConditionCopyNonLazyBinder
#include "Zenject/ConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass2_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass2_0.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_0
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_0.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__DisplayClass3_1
#include "Zenject/ConditionCopyNonLazyBinder_--c__DisplayClass3_1.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__4`1
#include "Zenject/ConditionCopyNonLazyBinder_--c__4_1.hpp"
// Including type: Zenject.ConditionCopyNonLazyBinder/<>c__5`1
#include "Zenject/ConditionCopyNonLazyBinder_--c__5_1.hpp"
// Including type: Zenject.BindingCondition
#include "Zenject/BindingCondition.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.When
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::When(Zenject::BindingCondition* condition) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConditionCopyNonLazyBinder").WithContext("When");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Zenject::CopyNonLazyBinder*>(), "When", {}, ::il2cpp_utils::ExtractTypes(condition)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, condition);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.WhenInjectedIntoInstance
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedIntoInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConditionCopyNonLazyBinder").WithContext("WhenInjectedIntoInstance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Zenject::CopyNonLazyBinder*>(), "WhenInjectedIntoInstance", {}, ::il2cpp_utils::ExtractTypes(instance)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder.WhenInjectedInto
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(::Array<System::Type*>* targets) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConditionCopyNonLazyBinder").WithContext("WhenInjectedInto");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Zenject::CopyNonLazyBinder*>(), "WhenInjectedInto", {}, ::il2cpp_utils::ExtractTypes(targets)));
  return ::il2cpp_utils::RunMethodThrow<Zenject::CopyNonLazyBinder*, false>(this, ___internal__method, targets);
}
// Creating initializer_list -> params proxy for: Zenject.CopyNonLazyBinder WhenInjectedInto(params System.Type[] targets)
Zenject::CopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(std::initializer_list<System::Type*> targets) {
  return Zenject::ConditionCopyNonLazyBinder::WhenInjectedInto(::Array<System::Type*>::New(targets));
}
// Autogenerated method: Zenject.ConditionCopyNonLazyBinder..ctor
Zenject::ConditionCopyNonLazyBinder* Zenject::ConditionCopyNonLazyBinder::New_ctor(Zenject::BindInfo* bindInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("ConditionCopyNonLazyBinder").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<ConditionCopyNonLazyBinder*>(bindInfo));
}
