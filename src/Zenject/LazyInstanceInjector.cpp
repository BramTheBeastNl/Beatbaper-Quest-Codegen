// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.LazyInstanceInjector
#include "Zenject/LazyInstanceInjector.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.LazyInstanceInjector..ctor
Zenject::LazyInstanceInjector* Zenject::LazyInstanceInjector::New_ctor(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("LazyInstanceInjector").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<LazyInstanceInjector*>(container));
}
// Autogenerated method: Zenject.LazyInstanceInjector.get_Instances
System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* Zenject::LazyInstanceInjector::get_Instances() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("LazyInstanceInjector").WithContext("get_Instances");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>(), "get_Instances", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.LazyInstanceInjector.AddInstance
void Zenject::LazyInstanceInjector::AddInstance(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("LazyInstanceInjector").WithContext("AddInstance");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "AddInstance", {}, ::il2cpp_utils::ExtractTypes(instance)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.LazyInstanceInjector.AddInstances
void Zenject::LazyInstanceInjector::AddInstances(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* instances) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("LazyInstanceInjector").WithContext("AddInstances");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "AddInstances", {}, ::il2cpp_utils::ExtractTypes(instances)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instances);
}
// Autogenerated method: Zenject.LazyInstanceInjector.LazyInject
void Zenject::LazyInstanceInjector::LazyInject(::Il2CppObject* instance) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("LazyInstanceInjector").WithContext("LazyInject");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "LazyInject", {}, ::il2cpp_utils::ExtractTypes(instance)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instance);
}
// Autogenerated method: Zenject.LazyInstanceInjector.LazyInjectAll
void Zenject::LazyInstanceInjector::LazyInjectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Zenject").WithContext("LazyInstanceInjector").WithContext("LazyInjectAll");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "LazyInjectAll", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
