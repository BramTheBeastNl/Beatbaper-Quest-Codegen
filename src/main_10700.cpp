// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerBinder/<>c__DisplayClass17_0
#include "Zenject/SubContainerBinder_--c__DisplayClass17_0.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBinder/<>c__DisplayClass17_0.<ByNewPrefabInstaller>b__0
Zenject::ISubContainerCreator* Zenject::SubContainerBinder::$$c__DisplayClass17_0::$ByNewPrefabInstaller$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBinder::$$c__DisplayClass17_0::<ByNewPrefabInstaller>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ByNewPrefabInstaller>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ISubContainerCreator*, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass17_0::$ByNewPrefabInstaller$b__0
// Il2CppName: <ByNewPrefabInstaller>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ISubContainerCreator* (SubContainerBinder::$$c__DisplayClass17_0::*)(Zenject::DiContainer*)>(&SubContainerBinder::$$c__DisplayClass17_0::$ByNewPrefabInstaller$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass17_0*), "<ByNewPrefabInstaller>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass17_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass17_0::*)()>(&SubContainerBinder::$$c__DisplayClass17_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass17_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass17_0::*)()>(&SubContainerBinder::$$c__DisplayClass17_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass17_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerBinder/<>c__DisplayClass18_0
#include "Zenject/SubContainerBinder_--c__DisplayClass18_0.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBinder/<>c__DisplayClass18_0.<ByNewPrefabResourceMethod>b__0
Zenject::ISubContainerCreator* Zenject::SubContainerBinder::$$c__DisplayClass18_0::$ByNewPrefabResourceMethod$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBinder::$$c__DisplayClass18_0::<ByNewPrefabResourceMethod>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ByNewPrefabResourceMethod>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ISubContainerCreator*, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass18_0::$ByNewPrefabResourceMethod$b__0
// Il2CppName: <ByNewPrefabResourceMethod>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ISubContainerCreator* (SubContainerBinder::$$c__DisplayClass18_0::*)(Zenject::DiContainer*)>(&SubContainerBinder::$$c__DisplayClass18_0::$ByNewPrefabResourceMethod$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass18_0*), "<ByNewPrefabResourceMethod>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass18_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass18_0::*)()>(&SubContainerBinder::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass18_0::*)()>(&SubContainerBinder::$$c__DisplayClass18_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass18_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerBinder/<>c__DisplayClass20_0
#include "Zenject/SubContainerBinder_--c__DisplayClass20_0.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBinder/<>c__DisplayClass20_0.<ByNewPrefabResourceInstaller>b__0
Zenject::ISubContainerCreator* Zenject::SubContainerBinder::$$c__DisplayClass20_0::$ByNewPrefabResourceInstaller$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBinder::$$c__DisplayClass20_0::<ByNewPrefabResourceInstaller>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ByNewPrefabResourceInstaller>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ISubContainerCreator*, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass20_0::$ByNewPrefabResourceInstaller$b__0
// Il2CppName: <ByNewPrefabResourceInstaller>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ISubContainerCreator* (SubContainerBinder::$$c__DisplayClass20_0::*)(Zenject::DiContainer*)>(&SubContainerBinder::$$c__DisplayClass20_0::$ByNewPrefabResourceInstaller$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass20_0*), "<ByNewPrefabResourceInstaller>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass20_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass20_0::*)()>(&SubContainerBinder::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass20_0::*)()>(&SubContainerBinder::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerBinder/<>c__DisplayClass22_0
#include "Zenject/SubContainerBinder_--c__DisplayClass22_0.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBinder/<>c__DisplayClass22_0.<ByNewContextPrefab>b__0
Zenject::ISubContainerCreator* Zenject::SubContainerBinder::$$c__DisplayClass22_0::$ByNewContextPrefab$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBinder::$$c__DisplayClass22_0::<ByNewContextPrefab>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ByNewContextPrefab>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ISubContainerCreator*, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass22_0::$ByNewContextPrefab$b__0
// Il2CppName: <ByNewContextPrefab>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ISubContainerCreator* (SubContainerBinder::$$c__DisplayClass22_0::*)(Zenject::DiContainer*)>(&SubContainerBinder::$$c__DisplayClass22_0::$ByNewContextPrefab$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass22_0*), "<ByNewContextPrefab>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass22_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass22_0::*)()>(&SubContainerBinder::$$c__DisplayClass22_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass22_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass22_0::*)()>(&SubContainerBinder::$$c__DisplayClass22_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass22_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerBinder/<>c__DisplayClass24_0
#include "Zenject/SubContainerBinder_--c__DisplayClass24_0.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBinder/<>c__DisplayClass24_0.<ByNewContextPrefabResource>b__0
Zenject::ISubContainerCreator* Zenject::SubContainerBinder::$$c__DisplayClass24_0::$ByNewContextPrefabResource$b__0(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBinder::$$c__DisplayClass24_0::<ByNewContextPrefabResource>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ByNewContextPrefabResource>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ISubContainerCreator*, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass24_0::$ByNewContextPrefabResource$b__0
// Il2CppName: <ByNewContextPrefabResource>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ISubContainerCreator* (SubContainerBinder::$$c__DisplayClass24_0::*)(Zenject::DiContainer*)>(&SubContainerBinder::$$c__DisplayClass24_0::$ByNewContextPrefabResource$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass24_0*), "<ByNewContextPrefabResource>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBinder::$$c__DisplayClass24_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass24_0::*)()>(&SubContainerBinder::$$c__DisplayClass24_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass24_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBinder::$$c__DisplayClass24_0::*)()>(&SubContainerBinder::$$c__DisplayClass24_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBinder::$$c__DisplayClass24_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.Kernel
#include "Zenject/Kernel.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.WithKernel
Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel
// Il2CppName: WithKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder* (WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)()>(&WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), "WithKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel
// Il2CppName: WithKernel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*, Zenject::BindInfo*)>(&WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*, Zenject::BindInfo*)>(&WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder
#include "Zenject/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.hpp"
// Including type: Zenject.SubContainerCreatorBindInfo
#include "Zenject/SubContainerCreatorBindInfo.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.Kernel
#include "Zenject/Kernel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.WithKernel
Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* Zenject::WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*, Zenject::BindInfo*)>(&WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::*)(Zenject::SubContainerCreatorBindInfo*, Zenject::BindInfo*)>(&WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SubContainerCreatorBindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Writing MetadataGetter for method: WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel
// Il2CppName: WithKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* (WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::*)()>(&WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder*), "WithKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder::WithKernel
// Il2CppName: WithKernel
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.BindingUtil
#include "Zenject/BindingUtil.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.InvalidBindResponses
#include "Zenject/InvalidBindResponses.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.BindingUtil.AssertIsValidPrefab
void Zenject::BindingUtil::AssertIsValidPrefab(UnityEngine::Object* prefab) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsValidPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsValidPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(prefab)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, prefab);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsValidGameObject
void Zenject::BindingUtil::AssertIsValidGameObject(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsValidGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsValidGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameObject);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotComponent
void Zenject::BindingUtil::AssertIsNotComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsNotComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsNotComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotComponent
void Zenject::BindingUtil::AssertIsNotComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsNotComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsNotComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertDerivesFromUnityObject
void Zenject::BindingUtil::AssertDerivesFromUnityObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertDerivesFromUnityObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertDerivesFromUnityObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertDerivesFromUnityObject
void Zenject::BindingUtil::AssertDerivesFromUnityObject(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertDerivesFromUnityObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertDerivesFromUnityObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertTypesAreNotComponents
void Zenject::BindingUtil::AssertTypesAreNotComponents(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertTypesAreNotComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertTypesAreNotComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsValidResourcePath
void Zenject::BindingUtil::AssertIsValidResourcePath(::Il2CppString* resourcePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsValidResourcePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsValidResourcePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourcePath)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, resourcePath);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrScriptableObject
void Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrScriptableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrScriptableObject
void Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrScriptableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrComponent
void Zenject::BindingUtil::AssertIsInterfaceOrComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsInterfaceOrComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsInterfaceOrComponent
void Zenject::BindingUtil::AssertIsInterfaceOrComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsInterfaceOrComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsComponent
void Zenject::BindingUtil::AssertIsComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsComponent
void Zenject::BindingUtil::AssertIsComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertTypesAreNotAbstract
void Zenject::BindingUtil::AssertTypesAreNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertTypesAreNotAbstract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertTypesAreNotAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotAbstract
void Zenject::BindingUtil::AssertIsNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsNotAbstract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsNotAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(types)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, types);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsNotAbstract
void Zenject::BindingUtil::AssertIsNotAbstract(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsNotAbstract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsNotAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromType
void Zenject::BindingUtil::AssertIsDerivedFromType(System::Type* concreteType, System::Type* parentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsDerivedFromType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsDerivedFromType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(parentType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteType, parentType);
}
// Autogenerated method: Zenject.BindingUtil.AssertConcreteTypeListIsNotEmpty
void Zenject::BindingUtil::AssertConcreteTypeListIsNotEmpty(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertConcreteTypeListIsNotEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertConcreteTypeListIsNotEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromTypes
void Zenject::BindingUtil::AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes, Zenject::InvalidBindResponses invalidBindResponse) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsDerivedFromTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsDerivedFromTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes), ::il2cpp_utils::ExtractType(parentTypes), ::il2cpp_utils::ExtractType(invalidBindResponse)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteTypes, parentTypes, invalidBindResponse);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromTypes
void Zenject::BindingUtil::AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsDerivedFromTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsDerivedFromTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteTypes), ::il2cpp_utils::ExtractType(parentTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteTypes, parentTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertIsDerivedFromTypes
void Zenject::BindingUtil::AssertIsDerivedFromTypes(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsDerivedFromTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsDerivedFromTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(parentTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, concreteType, parentTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertInstanceDerivesFromOrEqual
void Zenject::BindingUtil::AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertInstanceDerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertInstanceDerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(parentTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, instance, parentTypes);
}
// Autogenerated method: Zenject.BindingUtil.AssertInstanceDerivesFromOrEqual
void Zenject::BindingUtil::AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Type* baseType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertInstanceDerivesFromOrEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertInstanceDerivesFromOrEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(baseType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, instance, baseType);
}
// Autogenerated method: Zenject.BindingUtil.CreateCachedProvider
Zenject::IProvider* Zenject::BindingUtil::CreateCachedProvider(Zenject::IProvider* creator) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::CreateCachedProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "CreateCachedProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(creator)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, creator);
}
// Writing MetadataGetter for method: BindingUtil::AssertIsValidPrefab
// Il2CppName: AssertIsValidPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&BindingUtil::AssertIsValidPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsValidPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsValidGameObject
// Il2CppName: AssertIsValidGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::GameObject*)>(&BindingUtil::AssertIsValidGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsValidGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsNotComponent
// Il2CppName: AssertIsNotComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsNotComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsNotComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsNotComponent
// Il2CppName: AssertIsNotComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BindingUtil::AssertIsNotComponent
// Il2CppName: AssertIsNotComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*)>(&BindingUtil::AssertIsNotComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsNotComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertDerivesFromUnityObject
// Il2CppName: AssertDerivesFromUnityObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertDerivesFromUnityObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertDerivesFromUnityObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertDerivesFromUnityObject
// Il2CppName: AssertDerivesFromUnityObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BindingUtil::AssertDerivesFromUnityObject
// Il2CppName: AssertDerivesFromUnityObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*)>(&BindingUtil::AssertDerivesFromUnityObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertDerivesFromUnityObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertTypesAreNotComponents
// Il2CppName: AssertTypesAreNotComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertTypesAreNotComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertTypesAreNotComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsValidResourcePath
// Il2CppName: AssertIsValidResourcePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&BindingUtil::AssertIsValidResourcePath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsValidResourcePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsInterfaceOrScriptableObject
// Il2CppName: AssertIsInterfaceOrScriptableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsInterfaceOrScriptableObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsInterfaceOrScriptableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsInterfaceOrScriptableObject
// Il2CppName: AssertIsInterfaceOrScriptableObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BindingUtil::AssertIsInterfaceOrScriptableObject
// Il2CppName: AssertIsInterfaceOrScriptableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*)>(&BindingUtil::AssertIsInterfaceOrScriptableObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsInterfaceOrScriptableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsInterfaceOrComponent
// Il2CppName: AssertIsInterfaceOrComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsInterfaceOrComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsInterfaceOrComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsInterfaceOrComponent
// Il2CppName: AssertIsInterfaceOrComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BindingUtil::AssertIsInterfaceOrComponent
// Il2CppName: AssertIsInterfaceOrComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*)>(&BindingUtil::AssertIsInterfaceOrComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsInterfaceOrComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsComponent
// Il2CppName: AssertIsComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsComponent
// Il2CppName: AssertIsComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BindingUtil::AssertIsComponent
// Il2CppName: AssertIsComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*)>(&BindingUtil::AssertIsComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertTypesAreNotAbstract
// Il2CppName: AssertTypesAreNotAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertTypesAreNotAbstract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertTypesAreNotAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsNotAbstract
// Il2CppName: AssertIsNotAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsNotAbstract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsNotAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsNotAbstract
// Il2CppName: AssertIsNotAbstract
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: BindingUtil::AssertIsNotAbstract
// Il2CppName: AssertIsNotAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*)>(&BindingUtil::AssertIsNotAbstract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsNotAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsDerivedFromType
// Il2CppName: AssertIsDerivedFromType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*, System::Type*)>(&BindingUtil::AssertIsDerivedFromType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsDerivedFromType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertConcreteTypeListIsNotEmpty
// Il2CppName: AssertConcreteTypeListIsNotEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertConcreteTypeListIsNotEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertConcreteTypeListIsNotEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsDerivedFromTypes
// Il2CppName: AssertIsDerivedFromTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*, System::Collections::Generic::IEnumerable_1<System::Type*>*, Zenject::InvalidBindResponses)>(&BindingUtil::AssertIsDerivedFromTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsDerivedFromTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::InvalidBindResponses>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsDerivedFromTypes
// Il2CppName: AssertIsDerivedFromTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IEnumerable_1<System::Type*>*, System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsDerivedFromTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsDerivedFromTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertIsDerivedFromTypes
// Il2CppName: AssertIsDerivedFromTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Type*, System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertIsDerivedFromTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertIsDerivedFromTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertInstanceDerivesFromOrEqual
// Il2CppName: AssertInstanceDerivesFromOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&BindingUtil::AssertInstanceDerivesFromOrEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertInstanceDerivesFromOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::AssertInstanceDerivesFromOrEqual
// Il2CppName: AssertInstanceDerivesFromOrEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, System::Type*)>(&BindingUtil::AssertInstanceDerivesFromOrEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "AssertInstanceDerivesFromOrEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: BindingUtil::CreateCachedProvider
// Il2CppName: CreateCachedProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (*)(Zenject::IProvider*)>(&BindingUtil::CreateCachedProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BindingUtil*), "CreateCachedProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IBindingFinalizer
#include "Zenject/IBindingFinalizer.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IBindingFinalizer.get_BindingInheritanceMethod
Zenject::BindingInheritanceMethods Zenject::IBindingFinalizer::get_BindingInheritanceMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IBindingFinalizer::get_BindingInheritanceMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindingInheritanceMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IBindingFinalizer.FinalizeBinding
void Zenject::IBindingFinalizer::FinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IBindingFinalizer::FinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: IBindingFinalizer::get_BindingInheritanceMethod
// Il2CppName: get_BindingInheritanceMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindingInheritanceMethods (IBindingFinalizer::*)()>(&IBindingFinalizer::get_BindingInheritanceMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBindingFinalizer*), "get_BindingInheritanceMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IBindingFinalizer::FinalizeBinding
// Il2CppName: FinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IBindingFinalizer::*)(Zenject::DiContainer*)>(&IBindingFinalizer::FinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IBindingFinalizer*), "FinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.NullBindingFinalizer
#include "Zenject/NullBindingFinalizer.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.NullBindingFinalizer.get_BindingInheritanceMethod
Zenject::BindingInheritanceMethods Zenject::NullBindingFinalizer::get_BindingInheritanceMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NullBindingFinalizer::get_BindingInheritanceMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindingInheritanceMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.NullBindingFinalizer.FinalizeBinding
void Zenject::NullBindingFinalizer::FinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::NullBindingFinalizer::FinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: NullBindingFinalizer::get_BindingInheritanceMethod
// Il2CppName: get_BindingInheritanceMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindingInheritanceMethods (NullBindingFinalizer::*)()>(&NullBindingFinalizer::get_BindingInheritanceMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullBindingFinalizer*), "get_BindingInheritanceMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NullBindingFinalizer::FinalizeBinding
// Il2CppName: FinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullBindingFinalizer::*)(Zenject::DiContainer*)>(&NullBindingFinalizer::FinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullBindingFinalizer*), "FinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: NullBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullBindingFinalizer::*)()>(&NullBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NullBindingFinalizer::*)()>(&NullBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NullBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabBindingFinalizer
#include "Zenject/PrefabBindingFinalizer.hpp"
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IPrefabInstantiator
#include "Zenject/IPrefabInstantiator.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabBindingFinalizer.FinalizeBindingConcrete
void Zenject::PrefabBindingFinalizer::FinalizeBindingConcrete(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::FinalizeBindingConcrete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingConcrete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes);
}
// Autogenerated method: Zenject.PrefabBindingFinalizer.FinalizeBindingSelf
void Zenject::PrefabBindingFinalizer::FinalizeBindingSelf(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::FinalizeBindingSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.PrefabBindingFinalizer.OnFinalizeBinding
void Zenject::PrefabBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: PrefabBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::*)(Zenject::BindInfo*, Zenject::GameObjectCreationParameters*, UnityEngine::Object*, System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*)>(&PrefabBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::*)(Zenject::BindInfo*, Zenject::GameObjectCreationParameters*, UnityEngine::Object*, System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*)>(&PrefabBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::FinalizeBindingConcrete
// Il2CppName: FinalizeBindingConcrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*)>(&PrefabBindingFinalizer::FinalizeBindingConcrete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer*), "FinalizeBindingConcrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::FinalizeBindingSelf
// Il2CppName: FinalizeBindingSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::*)(Zenject::DiContainer*)>(&PrefabBindingFinalizer::FinalizeBindingSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer*), "FinalizeBindingSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::*)(Zenject::DiContainer*)>(&PrefabBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_0.<FinalizeBindingConcrete>b__0
Zenject::IProvider* Zenject::PrefabBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::$$c__DisplayClass5_0::<FinalizeBindingConcrete>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0
// Il2CppName: <FinalizeBindingConcrete>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabBindingFinalizer::$$c__DisplayClass5_0::*)(Zenject::DiContainer*, System::Type*)>(&PrefabBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass5_0*), "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass5_0::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass5_0::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.PrefabInstantiatorCached
#include "Zenject/PrefabInstantiatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabBindingFinalizer/<>c__DisplayClass5_1.<FinalizeBindingConcrete>b__1
Zenject::IProvider* Zenject::PrefabBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::$$c__DisplayClass5_1::<FinalizeBindingConcrete>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1
// Il2CppName: <FinalizeBindingConcrete>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabBindingFinalizer::$$c__DisplayClass5_1::*)(Zenject::DiContainer*, System::Type*)>(&PrefabBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass5_1*), "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass5_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass5_1::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass5_1::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_0.<FinalizeBindingSelf>b__0
Zenject::IProvider* Zenject::PrefabBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::$$c__DisplayClass6_0::<FinalizeBindingSelf>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0
// Il2CppName: <FinalizeBindingSelf>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabBindingFinalizer::$$c__DisplayClass6_0::*)(Zenject::DiContainer*, System::Type*)>(&PrefabBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass6_0*), "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass6_0::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass6_0::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: Zenject.PrefabInstantiatorCached
#include "Zenject/PrefabInstantiatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/PrefabBindingFinalizer_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabBindingFinalizer/<>c__DisplayClass6_1.<FinalizeBindingSelf>b__1
Zenject::IProvider* Zenject::PrefabBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabBindingFinalizer::$$c__DisplayClass6_1::<FinalizeBindingSelf>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1
// Il2CppName: <FinalizeBindingSelf>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabBindingFinalizer::$$c__DisplayClass6_1::*)(Zenject::DiContainer*, System::Type*)>(&PrefabBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass6_1*), "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabBindingFinalizer::$$c__DisplayClass6_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass6_1::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabBindingFinalizer::$$c__DisplayClass6_1::*)()>(&PrefabBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PrefabResourceBindingFinalizer
#include "Zenject/PrefabResourceBindingFinalizer.hpp"
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: Zenject.GameObjectCreationParameters
#include "Zenject/GameObjectCreationParameters.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IPrefabInstantiator
#include "Zenject/IPrefabInstantiator.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer.FinalizeBindingConcrete
void Zenject::PrefabResourceBindingFinalizer::FinalizeBindingConcrete(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::FinalizeBindingConcrete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingConcrete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes);
}
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer.FinalizeBindingSelf
void Zenject::PrefabResourceBindingFinalizer::FinalizeBindingSelf(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::FinalizeBindingSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer.OnFinalizeBinding
void Zenject::PrefabResourceBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::*)(Zenject::BindInfo*, Zenject::GameObjectCreationParameters*, ::Il2CppString*, System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*)>(&PrefabResourceBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::*)(Zenject::BindInfo*, Zenject::GameObjectCreationParameters*, ::Il2CppString*, System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*)>(&PrefabResourceBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::GameObjectCreationParameters*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<System::Type*, Zenject::IPrefabInstantiator*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::FinalizeBindingConcrete
// Il2CppName: FinalizeBindingConcrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*)>(&PrefabResourceBindingFinalizer::FinalizeBindingConcrete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer*), "FinalizeBindingConcrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::FinalizeBindingSelf
// Il2CppName: FinalizeBindingSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::*)(Zenject::DiContainer*)>(&PrefabResourceBindingFinalizer::FinalizeBindingSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer*), "FinalizeBindingSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::*)(Zenject::DiContainer*)>(&PrefabResourceBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_0.<FinalizeBindingConcrete>b__0
Zenject::IProvider* Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::<FinalizeBindingConcrete>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0
// Il2CppName: <FinalizeBindingConcrete>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::*)(Zenject::DiContainer*, System::Type*)>(&PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass5_0*), "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.PrefabInstantiatorCached
#include "Zenject/PrefabInstantiatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass5_1.<FinalizeBindingConcrete>b__1
Zenject::IProvider* Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::<FinalizeBindingConcrete>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1
// Il2CppName: <FinalizeBindingConcrete>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::*)(Zenject::DiContainer*, System::Type*)>(&PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass5_1*), "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_0.<FinalizeBindingSelf>b__0
Zenject::IProvider* Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::<FinalizeBindingSelf>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0
// Il2CppName: <FinalizeBindingSelf>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::*)(Zenject::DiContainer*, System::Type*)>(&PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass6_0*), "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: Zenject.PrefabInstantiatorCached
#include "Zenject/PrefabInstantiatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/PrefabResourceBindingFinalizer_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PrefabResourceBindingFinalizer/<>c__DisplayClass6_1.<FinalizeBindingSelf>b__1
Zenject::IProvider* Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::<FinalizeBindingSelf>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1
// Il2CppName: <FinalizeBindingSelf>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::*)(Zenject::DiContainer*, System::Type*)>(&PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass6_1*), "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::*)()>(&PrefabResourceBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PrefabResourceBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ProviderBindingFinalizer
#include "Zenject/ProviderBindingFinalizer.hpp"
// Including type: Zenject.ProviderBindingFinalizer/<>c
#include "Zenject/ProviderBindingFinalizer_--c.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: Zenject.BindingInheritanceMethods
#include "Zenject/BindingInheritanceMethods.hpp"
// Including type: Zenject.ScopeTypes
#include "Zenject/ScopeTypes.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ProviderBindingFinalizer.get_BindingInheritanceMethod
Zenject::BindingInheritanceMethods Zenject::ProviderBindingFinalizer::get_BindingInheritanceMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::get_BindingInheritanceMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingInheritanceMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindingInheritanceMethods, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.get_BindInfo
Zenject::BindInfo* Zenject::ProviderBindingFinalizer::get_BindInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::get_BindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindInfo*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.set_BindInfo
void Zenject::ProviderBindingFinalizer::set_BindInfo(Zenject::BindInfo* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::set_BindInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BindInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.GetScope
Zenject::ScopeTypes Zenject::ProviderBindingFinalizer::GetScope() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::GetScope");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScope", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeTypes, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.FinalizeBinding
void Zenject::ProviderBindingFinalizer::FinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::FinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.OnFinalizeBinding
void Zenject::ProviderBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.RegisterProvider
void Zenject::ProviderBindingFinalizer::RegisterProvider(Zenject::DiContainer* container, System::Type* contractType, Zenject::IProvider* provider) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::RegisterProvider");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterProvider", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(contractType), ::il2cpp_utils::ExtractType(provider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, contractType, provider);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.RegisterProviderPerContract
void Zenject::ProviderBindingFinalizer::RegisterProviderPerContract(Zenject::DiContainer* container, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>* providerFunc) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::RegisterProviderPerContract");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterProviderPerContract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(providerFunc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, providerFunc);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.RegisterProviderForAllContracts
void Zenject::ProviderBindingFinalizer::RegisterProviderForAllContracts(Zenject::DiContainer* container, Zenject::IProvider* provider) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::RegisterProviderForAllContracts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterProviderForAllContracts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(provider)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, provider);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.RegisterProvidersPerContractAndConcreteType
void Zenject::ProviderBindingFinalizer::RegisterProvidersPerContractAndConcreteType(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes, System::Func_3<System::Type*, System::Type*, Zenject::IProvider*>* providerFunc) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::RegisterProvidersPerContractAndConcreteType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterProvidersPerContractAndConcreteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes), ::il2cpp_utils::ExtractType(providerFunc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes, providerFunc);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.ValidateBindTypes
bool Zenject::ProviderBindingFinalizer::ValidateBindTypes(System::Type* concreteType, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::ValidateBindTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateBindTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(concreteType), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, concreteType, contractType);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer.RegisterProvidersForAllContractsPerConcreteType
void Zenject::ProviderBindingFinalizer::RegisterProvidersForAllContractsPerConcreteType(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>* providerFunc) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::RegisterProvidersForAllContractsPerConcreteType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterProvidersForAllContractsPerConcreteType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes), ::il2cpp_utils::ExtractType(providerFunc)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes, providerFunc);
}
// Writing MetadataGetter for method: ProviderBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::BindInfo*)>(&ProviderBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::BindInfo*)>(&ProviderBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::get_BindingInheritanceMethod
// Il2CppName: get_BindingInheritanceMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindingInheritanceMethods (ProviderBindingFinalizer::*)()>(&ProviderBindingFinalizer::get_BindingInheritanceMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "get_BindingInheritanceMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::get_BindInfo
// Il2CppName: get_BindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindInfo* (ProviderBindingFinalizer::*)()>(&ProviderBindingFinalizer::get_BindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "get_BindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::set_BindInfo
// Il2CppName: set_BindInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::BindInfo*)>(&ProviderBindingFinalizer::set_BindInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "set_BindInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::GetScope
// Il2CppName: GetScope
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ScopeTypes (ProviderBindingFinalizer::*)()>(&ProviderBindingFinalizer::GetScope)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "GetScope", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::FinalizeBinding
// Il2CppName: FinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*)>(&ProviderBindingFinalizer::FinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "FinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*)>(&ProviderBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::RegisterProvider
// Il2CppName: RegisterProvider
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ProviderBindingFinalizer::RegisterProvider
// Il2CppName: RegisterProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*, System::Type*, Zenject::IProvider*)>(&ProviderBindingFinalizer::RegisterProvider)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "RegisterProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::RegisterProviderPerContract
// Il2CppName: RegisterProviderPerContract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*)>(&ProviderBindingFinalizer::RegisterProviderPerContract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "RegisterProviderPerContract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::RegisterProviderForAllContracts
// Il2CppName: RegisterProviderForAllContracts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*, Zenject::IProvider*)>(&ProviderBindingFinalizer::RegisterProviderForAllContracts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "RegisterProviderForAllContracts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<Zenject::IProvider*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::RegisterProvidersPerContractAndConcreteType
// Il2CppName: RegisterProvidersPerContractAndConcreteType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*, System::Func_3<System::Type*, System::Type*, Zenject::IProvider*>*)>(&ProviderBindingFinalizer::RegisterProvidersPerContractAndConcreteType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "RegisterProvidersPerContractAndConcreteType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<System::Type*, System::Type*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::ValidateBindTypes
// Il2CppName: ValidateBindTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProviderBindingFinalizer::*)(System::Type*, System::Type*)>(&ProviderBindingFinalizer::ValidateBindTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "ValidateBindTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::RegisterProvidersForAllContractsPerConcreteType
// Il2CppName: RegisterProvidersForAllContractsPerConcreteType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*)>(&ProviderBindingFinalizer::RegisterProvidersForAllContractsPerConcreteType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer*), "RegisterProvidersForAllContractsPerConcreteType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ProviderBindingFinalizer/<>c
#include "Zenject/ProviderBindingFinalizer_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.ProviderBindingFinalizer/<>c <>9
Zenject::ProviderBindingFinalizer::$$c* Zenject::ProviderBindingFinalizer::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::ProviderBindingFinalizer::$$c*>("Zenject", "ProviderBindingFinalizer/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.ProviderBindingFinalizer/<>c <>9
void Zenject::ProviderBindingFinalizer::$$c::_set_$$9(Zenject::ProviderBindingFinalizer::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ProviderBindingFinalizer/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.String> <>9__7_0
System::Func_2<System::Type*, ::Il2CppString*>* Zenject::ProviderBindingFinalizer::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, ::Il2CppString*>*>("Zenject", "ProviderBindingFinalizer/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.String> <>9__7_0
void Zenject::ProviderBindingFinalizer::$$c::_set_$$9__7_0(System::Func_2<System::Type*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ProviderBindingFinalizer/<>c", "<>9__7_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.String> <>9__8_0
System::Func_2<System::Type*, ::Il2CppString*>* Zenject::ProviderBindingFinalizer::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, ::Il2CppString*>*>("Zenject", "ProviderBindingFinalizer/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.String> <>9__8_0
void Zenject::ProviderBindingFinalizer::$$c::_set_$$9__8_0(System::Func_2<System::Type*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "ProviderBindingFinalizer/<>c", "<>9__8_0", value)));
}
// Autogenerated method: Zenject.ProviderBindingFinalizer/<>c..cctor
void Zenject::ProviderBindingFinalizer::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProviderBindingFinalizer/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer/<>c.<GetScope>b__7_0
::Il2CppString* Zenject::ProviderBindingFinalizer::$$c::$GetScope$b__7_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::<GetScope>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetScope>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.ProviderBindingFinalizer/<>c.<FinalizeBinding>b__8_0
::Il2CppString* Zenject::ProviderBindingFinalizer::$$c::$FinalizeBinding$b__8_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProviderBindingFinalizer::$$c::<FinalizeBinding>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBinding>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: ProviderBindingFinalizer::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ProviderBindingFinalizer::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::$$c::$GetScope$b__7_0
// Il2CppName: <GetScope>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProviderBindingFinalizer::$$c::*)(System::Type*)>(&ProviderBindingFinalizer::$$c::$GetScope$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer::$$c*), "<GetScope>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::$$c::$FinalizeBinding$b__8_0
// Il2CppName: <FinalizeBinding>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ProviderBindingFinalizer::$$c::*)(System::Type*)>(&ProviderBindingFinalizer::$$c::$FinalizeBinding$b__8_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer::$$c*), "<FinalizeBinding>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ProviderBindingFinalizer::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::$$c::*)()>(&ProviderBindingFinalizer::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProviderBindingFinalizer::$$c::*)()>(&ProviderBindingFinalizer::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProviderBindingFinalizer::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScopableBindingFinalizer
#include "Zenject/ScopableBindingFinalizer.hpp"
// Including type: Zenject.ScopableBindingFinalizer/<>c__DisplayClass3_0
#include "Zenject/ScopableBindingFinalizer_--c__DisplayClass3_0.hpp"
// Including type: Zenject.ScopableBindingFinalizer/<>c__DisplayClass4_0
#include "Zenject/ScopableBindingFinalizer_--c__DisplayClass4_0.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScopableBindingFinalizer.FinalizeBindingConcrete
void Zenject::ScopableBindingFinalizer::FinalizeBindingConcrete(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopableBindingFinalizer::FinalizeBindingConcrete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingConcrete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes);
}
// Autogenerated method: Zenject.ScopableBindingFinalizer.FinalizeBindingSelf
void Zenject::ScopableBindingFinalizer::FinalizeBindingSelf(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopableBindingFinalizer::FinalizeBindingSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.ScopableBindingFinalizer.OnFinalizeBinding
void Zenject::ScopableBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopableBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: ScopableBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::*)(Zenject::BindInfo*, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*)>(&ScopableBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::*)(Zenject::BindInfo*, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*)>(&ScopableBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: ScopableBindingFinalizer::FinalizeBindingConcrete
// Il2CppName: FinalizeBindingConcrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*)>(&ScopableBindingFinalizer::FinalizeBindingConcrete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer*), "FinalizeBindingConcrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ScopableBindingFinalizer::FinalizeBindingSelf
// Il2CppName: FinalizeBindingSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::*)(Zenject::DiContainer*)>(&ScopableBindingFinalizer::FinalizeBindingSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer*), "FinalizeBindingSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: ScopableBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::*)(Zenject::DiContainer*)>(&ScopableBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScopableBindingFinalizer/<>c__DisplayClass3_0
#include "Zenject/ScopableBindingFinalizer_--c__DisplayClass3_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScopableBindingFinalizer/<>c__DisplayClass3_0.<FinalizeBindingConcrete>b__0
Zenject::IProvider* Zenject::ScopableBindingFinalizer::$$c__DisplayClass3_0::$FinalizeBindingConcrete$b__0(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopableBindingFinalizer::$$c__DisplayClass3_0::<FinalizeBindingConcrete>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: ScopableBindingFinalizer::$$c__DisplayClass3_0::$FinalizeBindingConcrete$b__0
// Il2CppName: <FinalizeBindingConcrete>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (ScopableBindingFinalizer::$$c__DisplayClass3_0::*)(Zenject::DiContainer*, System::Type*)>(&ScopableBindingFinalizer::$$c__DisplayClass3_0::$FinalizeBindingConcrete$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer::$$c__DisplayClass3_0*), "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ScopableBindingFinalizer::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::$$c__DisplayClass3_0::*)()>(&ScopableBindingFinalizer::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::$$c__DisplayClass3_0::*)()>(&ScopableBindingFinalizer::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.ScopableBindingFinalizer/<>c__DisplayClass4_0
#include "Zenject/ScopableBindingFinalizer_--c__DisplayClass4_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.ScopableBindingFinalizer/<>c__DisplayClass4_0.<FinalizeBindingSelf>b__0
Zenject::IProvider* Zenject::ScopableBindingFinalizer::$$c__DisplayClass4_0::$FinalizeBindingSelf$b__0(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ScopableBindingFinalizer::$$c__DisplayClass4_0::<FinalizeBindingSelf>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: ScopableBindingFinalizer::$$c__DisplayClass4_0::$FinalizeBindingSelf$b__0
// Il2CppName: <FinalizeBindingSelf>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (ScopableBindingFinalizer::$$c__DisplayClass4_0::*)(Zenject::DiContainer*, System::Type*)>(&ScopableBindingFinalizer::$$c__DisplayClass4_0::$FinalizeBindingSelf$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer::$$c__DisplayClass4_0*), "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ScopableBindingFinalizer::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::$$c__DisplayClass4_0::*)()>(&ScopableBindingFinalizer::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScopableBindingFinalizer::$$c__DisplayClass4_0::*)()>(&ScopableBindingFinalizer::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScopableBindingFinalizer::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SingleProviderBindingFinalizer
#include "Zenject/SingleProviderBindingFinalizer.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SingleProviderBindingFinalizer.OnFinalizeBinding
void Zenject::SingleProviderBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SingleProviderBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SingleProviderBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleProviderBindingFinalizer::*)(Zenject::BindInfo*, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*)>(&SingleProviderBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleProviderBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleProviderBindingFinalizer::*)(Zenject::BindInfo*, System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*)>(&SingleProviderBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleProviderBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Func_3<Zenject::DiContainer*, System::Type*, Zenject::IProvider*>*>()});
  }
};
// Writing MetadataGetter for method: SingleProviderBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SingleProviderBindingFinalizer::*)(Zenject::DiContainer*)>(&SingleProviderBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SingleProviderBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerBindingFinalizer
#include "Zenject/SubContainerBindingFinalizer.hpp"
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBindingFinalizer.FinalizeBindingConcrete
void Zenject::SubContainerBindingFinalizer::FinalizeBindingConcrete(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::FinalizeBindingConcrete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingConcrete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes);
}
// Autogenerated method: Zenject.SubContainerBindingFinalizer.FinalizeBindingSelf
void Zenject::SubContainerBindingFinalizer::FinalizeBindingSelf(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::FinalizeBindingSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.SubContainerBindingFinalizer.OnFinalizeBinding
void Zenject::SubContainerBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::*)(Zenject::BindInfo*, ::Il2CppObject*, bool, System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*)>(&SubContainerBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::*)(Zenject::BindInfo*, ::Il2CppObject*, bool, System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*)>(&SubContainerBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::FinalizeBindingConcrete
// Il2CppName: FinalizeBindingConcrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*)>(&SubContainerBindingFinalizer::FinalizeBindingConcrete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer*), "FinalizeBindingConcrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::FinalizeBindingSelf
// Il2CppName: FinalizeBindingSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::*)(Zenject::DiContainer*)>(&SubContainerBindingFinalizer::FinalizeBindingSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer*), "FinalizeBindingSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::*)(Zenject::DiContainer*)>(&SubContainerBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_0.<FinalizeBindingConcrete>b__0
Zenject::IProvider* Zenject::SubContainerBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::$$c__DisplayClass5_0::<FinalizeBindingConcrete>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0
// Il2CppName: <FinalizeBindingConcrete>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerBindingFinalizer::$$c__DisplayClass5_0::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass5_0*), "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass5_0::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass5_0::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.SubContainerCreatorCached
#include "Zenject/SubContainerCreatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass5_1.<FinalizeBindingConcrete>b__1
Zenject::IProvider* Zenject::SubContainerBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::$$c__DisplayClass5_1::<FinalizeBindingConcrete>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1
// Il2CppName: <FinalizeBindingConcrete>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerBindingFinalizer::$$c__DisplayClass5_1::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass5_1*), "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass5_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass5_1::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass5_1::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_0.<FinalizeBindingSelf>b__0
Zenject::IProvider* Zenject::SubContainerBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::$$c__DisplayClass6_0::<FinalizeBindingSelf>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0
// Il2CppName: <FinalizeBindingSelf>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerBindingFinalizer::$$c__DisplayClass6_0::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass6_0*), "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass6_0::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass6_0::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: Zenject.SubContainerCreatorCached
#include "Zenject/SubContainerCreatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/SubContainerBindingFinalizer_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerBindingFinalizer/<>c__DisplayClass6_1.<FinalizeBindingSelf>b__1
Zenject::IProvider* Zenject::SubContainerBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerBindingFinalizer::$$c__DisplayClass6_1::<FinalizeBindingSelf>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1
// Il2CppName: <FinalizeBindingSelf>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerBindingFinalizer::$$c__DisplayClass6_1::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass6_1*), "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerBindingFinalizer::$$c__DisplayClass6_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass6_1::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerBindingFinalizer::$$c__DisplayClass6_1::*)()>(&SubContainerBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SubContainerPrefabBindingFinalizer
#include "Zenject/SubContainerPrefabBindingFinalizer.hpp"
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.ISubContainerCreator
#include "Zenject/ISubContainerCreator.hpp"
// Including type: Zenject.BindInfo
#include "Zenject/BindInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer.FinalizeBindingConcrete
void Zenject::SubContainerPrefabBindingFinalizer::FinalizeBindingConcrete(Zenject::DiContainer* container, System::Collections::Generic::List_1<System::Type*>* concreteTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::FinalizeBindingConcrete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingConcrete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container), ::il2cpp_utils::ExtractType(concreteTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container, concreteTypes);
}
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer.FinalizeBindingSelf
void Zenject::SubContainerPrefabBindingFinalizer::FinalizeBindingSelf(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::FinalizeBindingSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FinalizeBindingSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer.OnFinalizeBinding
void Zenject::SubContainerPrefabBindingFinalizer::OnFinalizeBinding(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::OnFinalizeBinding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalizeBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::*)(Zenject::BindInfo*, ::Il2CppObject*, bool, System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*)>(&SubContainerPrefabBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::*)(Zenject::BindInfo*, ::Il2CppObject*, bool, System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*)>(&SubContainerPrefabBindingFinalizer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::BindInfo*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Func_2<Zenject::DiContainer*, Zenject::ISubContainerCreator*>*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::FinalizeBindingConcrete
// Il2CppName: FinalizeBindingConcrete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::*)(Zenject::DiContainer*, System::Collections::Generic::List_1<System::Type*>*)>(&SubContainerPrefabBindingFinalizer::FinalizeBindingConcrete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer*), "FinalizeBindingConcrete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::FinalizeBindingSelf
// Il2CppName: FinalizeBindingSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::*)(Zenject::DiContainer*)>(&SubContainerPrefabBindingFinalizer::FinalizeBindingSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer*), "FinalizeBindingSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::OnFinalizeBinding
// Il2CppName: OnFinalizeBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::*)(Zenject::DiContainer*)>(&SubContainerPrefabBindingFinalizer::OnFinalizeBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer*), "OnFinalizeBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass5_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_0.<FinalizeBindingConcrete>b__0
Zenject::IProvider* Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::<FinalizeBindingConcrete>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0
// Il2CppName: <FinalizeBindingConcrete>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::$FinalizeBindingConcrete$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0*), "<FinalizeBindingConcrete>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_1
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass5_1.hpp"
// Including type: Zenject.SubContainerCreatorCached
#include "Zenject/SubContainerCreatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_0
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass5_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass5_1.<FinalizeBindingConcrete>b__1
Zenject::IProvider* Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1(Zenject::DiContainer* _, System::Type* concreteType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::<FinalizeBindingConcrete>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(concreteType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, concreteType);
}
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1
// Il2CppName: <FinalizeBindingConcrete>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::$FinalizeBindingConcrete$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1*), "<FinalizeBindingConcrete>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass5_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass6_0.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_0.<FinalizeBindingSelf>b__0
Zenject::IProvider* Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::<FinalizeBindingSelf>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0
// Il2CppName: <FinalizeBindingSelf>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::$FinalizeBindingSelf$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0*), "<FinalizeBindingSelf>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_1
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass6_1.hpp"
// Including type: Zenject.SubContainerCreatorCached
#include "Zenject/SubContainerCreatorCached.hpp"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_0
#include "Zenject/SubContainerPrefabBindingFinalizer_--c__DisplayClass6_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SubContainerPrefabBindingFinalizer/<>c__DisplayClass6_1.<FinalizeBindingSelf>b__1
Zenject::IProvider* Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1(Zenject::DiContainer* _, System::Type* contractType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::<FinalizeBindingSelf>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_), ::il2cpp_utils::ExtractType(contractType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, _, contractType);
}
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1
// Il2CppName: <FinalizeBindingSelf>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::IProvider* (SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::*)(Zenject::DiContainer*, System::Type*)>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::$FinalizeBindingSelf$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1*), "<FinalizeBindingSelf>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::*)()>(&SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SubContainerPrefabBindingFinalizer::$$c__DisplayClass6_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IMemoryPool.get_NumTotal
int Zenject::IMemoryPool::get_NumTotal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::get_NumTotal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumTotal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IMemoryPool.get_NumActive
int Zenject::IMemoryPool::get_NumActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::get_NumActive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IMemoryPool.get_NumInactive
int Zenject::IMemoryPool::get_NumInactive() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::get_NumInactive");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NumInactive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IMemoryPool.get_ItemType
System::Type* Zenject::IMemoryPool::get_ItemType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::get_ItemType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ItemType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IMemoryPool.Resize
void Zenject::IMemoryPool::Resize(int desiredPoolSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::Resize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(desiredPoolSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, desiredPoolSize);
}
// Autogenerated method: Zenject.IMemoryPool.Clear
void Zenject::IMemoryPool::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::Clear");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IMemoryPool.ExpandBy
void Zenject::IMemoryPool::ExpandBy(int numToAdd) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::ExpandBy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExpandBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numToAdd)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numToAdd);
}
// Autogenerated method: Zenject.IMemoryPool.ShrinkBy
void Zenject::IMemoryPool::ShrinkBy(int numToRemove) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::ShrinkBy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShrinkBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numToRemove)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numToRemove);
}
// Autogenerated method: Zenject.IMemoryPool.Despawn
void Zenject::IMemoryPool::Despawn(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IMemoryPool::Despawn");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Writing MetadataGetter for method: IMemoryPool::get_NumTotal
// Il2CppName: get_NumTotal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMemoryPool::*)()>(&IMemoryPool::get_NumTotal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "get_NumTotal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMemoryPool::get_NumActive
// Il2CppName: get_NumActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMemoryPool::*)()>(&IMemoryPool::get_NumActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "get_NumActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMemoryPool::get_NumInactive
// Il2CppName: get_NumInactive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IMemoryPool::*)()>(&IMemoryPool::get_NumInactive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "get_NumInactive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMemoryPool::get_ItemType
// Il2CppName: get_ItemType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (IMemoryPool::*)()>(&IMemoryPool::get_ItemType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "get_ItemType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMemoryPool::Resize
// Il2CppName: Resize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMemoryPool::*)(int)>(&IMemoryPool::Resize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "Resize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMemoryPool::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMemoryPool::*)()>(&IMemoryPool::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMemoryPool::ExpandBy
// Il2CppName: ExpandBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMemoryPool::*)(int)>(&IMemoryPool::ExpandBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "ExpandBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMemoryPool::ShrinkBy
// Il2CppName: ShrinkBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMemoryPool::*)(int)>(&IMemoryPool::ShrinkBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "ShrinkBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IMemoryPool::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IMemoryPool::*)(::Il2CppObject*)>(&IMemoryPool::Despawn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMemoryPool*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.PoolExceededFixedSizeException
#include "Zenject/PoolExceededFixedSizeException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PoolExceededFixedSizeException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolExceededFixedSizeException::*)(::Il2CppString*)>(&PoolExceededFixedSizeException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolExceededFixedSizeException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolExceededFixedSizeException::*)(::Il2CppString*)>(&PoolExceededFixedSizeException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolExceededFixedSizeException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.MemoryPoolSettings
#include "Zenject/MemoryPoolSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.MemoryPoolSettings Default
Zenject::MemoryPoolSettings* Zenject::MemoryPoolSettings::_get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolSettings::_get_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::MemoryPoolSettings*>("Zenject", "MemoryPoolSettings", "Default"));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.MemoryPoolSettings Default
void Zenject::MemoryPoolSettings::_set_Default(Zenject::MemoryPoolSettings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolSettings::_set_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "MemoryPoolSettings", "Default", value));
}
// Autogenerated method: Zenject.MemoryPoolSettings..cctor
void Zenject::MemoryPoolSettings::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolSettings::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "MemoryPoolSettings", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: MemoryPoolSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolSettings::*)(int, int, Zenject::PoolExpandMethods)>(&MemoryPoolSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<Zenject::PoolExpandMethods>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolSettings::*)(int, int, Zenject::PoolExpandMethods)>(&MemoryPoolSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<Zenject::PoolExpandMethods>()});
  }
};
// Writing MetadataGetter for method: MemoryPoolSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MemoryPoolSettings::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MemoryPoolSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolSettings::*)()>(&MemoryPoolSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MemoryPoolSettings::*)()>(&MemoryPoolSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MemoryPoolSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolCleanupChecker
#include "Zenject/PoolCleanupChecker.hpp"
// Including type: Zenject.PoolCleanupChecker/<>c
#include "Zenject/PoolCleanupChecker_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.IMemoryPool
#include "Zenject/IMemoryPool.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.PoolCleanupChecker.LateDispose
void Zenject::PoolCleanupChecker::LateDispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::LateDispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateDispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PoolCleanupChecker::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolCleanupChecker::*)(System::Collections::Generic::List_1<Zenject::IMemoryPool*>*, System::Collections::Generic::List_1<System::Type*>*)>(&PoolCleanupChecker::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::IMemoryPool*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolCleanupChecker::*)(System::Collections::Generic::List_1<Zenject::IMemoryPool*>*, System::Collections::Generic::List_1<System::Type*>*)>(&PoolCleanupChecker::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::IMemoryPool*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: PoolCleanupChecker::LateDispose
// Il2CppName: LateDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolCleanupChecker::*)()>(&PoolCleanupChecker::LateDispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker*), "LateDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.PoolCleanupChecker/<>c
#include "Zenject/PoolCleanupChecker_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.PoolCleanupChecker/<>c <>9
Zenject::PoolCleanupChecker::$$c* Zenject::PoolCleanupChecker::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::PoolCleanupChecker::$$c*>("Zenject", "PoolCleanupChecker/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.PoolCleanupChecker/<>c <>9
void Zenject::PoolCleanupChecker::$$c::_set_$$9(Zenject::PoolCleanupChecker::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolCleanupChecker/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__2_0
System::Func_2<System::Type*, bool>* Zenject::PoolCleanupChecker::$$c::_get_$$9__2_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::$$c::_get_$$9__2_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "PoolCleanupChecker/<>c", "<>9__2_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__2_0
void Zenject::PoolCleanupChecker::$$c::_set_$$9__2_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::$$c::_set_$$9__2_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "PoolCleanupChecker/<>c", "<>9__2_0", value)));
}
// Autogenerated method: Zenject.PoolCleanupChecker/<>c..cctor
void Zenject::PoolCleanupChecker::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "PoolCleanupChecker/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.PoolCleanupChecker/<>c.<.ctor>b__2_0
bool Zenject::PoolCleanupChecker::$$c::$_ctor$b__2_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolCleanupChecker::$$c::<.ctor>b__2_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__2_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: PoolCleanupChecker::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PoolCleanupChecker::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PoolCleanupChecker::$$c::$_ctor$b__2_0
// Il2CppName: <.ctor>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PoolCleanupChecker::$$c::*)(System::Type*)>(&PoolCleanupChecker::$$c::$_ctor$b__2_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker::$$c*), "<.ctor>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: PoolCleanupChecker::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolCleanupChecker::$$c::*)()>(&PoolCleanupChecker::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PoolCleanupChecker::$$c::*)()>(&PoolCleanupChecker::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PoolCleanupChecker::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectContext
#include "Zenject/InjectContext.hpp"
// Including type: Zenject.InjectContext/<get_ParentContexts>d__52
#include "Zenject/InjectContext_-get_ParentContexts-d__52.hpp"
// Including type: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54
#include "Zenject/InjectContext_-get_ParentContextsAndSelf-d__54.hpp"
// Including type: Zenject.InjectContext/<get_AllObjectTypes>d__56
#include "Zenject/InjectContext_-get_AllObjectTypes-d__56.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InjectContext.Dispose
void Zenject::InjectContext::Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.Reset
void Zenject::InjectContext::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.get_BindingId
Zenject::BindingId Zenject::InjectContext::get_BindingId() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_BindingId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BindingId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::BindingId, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.get_ObjectType
System::Type* Zenject::InjectContext::get_ObjectType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_ObjectType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_ObjectType
void Zenject::InjectContext::set_ObjectType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_ObjectType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ObjectType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_ParentContext
Zenject::InjectContext* Zenject::InjectContext::get_ParentContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_ParentContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_ParentContext
void Zenject::InjectContext::set_ParentContext(Zenject::InjectContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_ParentContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_ObjectInstance
::Il2CppObject* Zenject::InjectContext::get_ObjectInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_ObjectInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ObjectInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_ObjectInstance
void Zenject::InjectContext::set_ObjectInstance(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_ObjectInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ObjectInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_Identifier
::Il2CppObject* Zenject::InjectContext::get_Identifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_Identifier
void Zenject::InjectContext::set_Identifier(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_Identifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Identifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_MemberName
::Il2CppString* Zenject::InjectContext::get_MemberName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_MemberName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MemberName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_MemberName
void Zenject::InjectContext::set_MemberName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_MemberName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MemberName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_MemberType
System::Type* Zenject::InjectContext::get_MemberType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_MemberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_MemberType
void Zenject::InjectContext::set_MemberType(System::Type* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_MemberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MemberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_Optional
bool Zenject::InjectContext::get_Optional() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_Optional
void Zenject::InjectContext::set_Optional(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_Optional");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Optional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_SourceType
Zenject::InjectSources Zenject::InjectContext::get_SourceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_SourceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SourceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectSources, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_SourceType
void Zenject::InjectContext::set_SourceType(Zenject::InjectSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_SourceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_SourceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_ConcreteIdentifier
::Il2CppObject* Zenject::InjectContext::get_ConcreteIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_ConcreteIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ConcreteIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_ConcreteIdentifier
void Zenject::InjectContext::set_ConcreteIdentifier(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_ConcreteIdentifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ConcreteIdentifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_FallBackValue
::Il2CppObject* Zenject::InjectContext::get_FallBackValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_FallBackValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FallBackValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_FallBackValue
void Zenject::InjectContext::set_FallBackValue(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_FallBackValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_FallBackValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_Container
Zenject::DiContainer* Zenject::InjectContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.set_Container
void Zenject::InjectContext::set_Container(Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::set_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.InjectContext.get_ParentContexts
System::Collections::Generic::IEnumerable_1<Zenject::InjectContext*>* Zenject::InjectContext::get_ParentContexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_ParentContexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentContexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InjectContext*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.get_ParentContextsAndSelf
System::Collections::Generic::IEnumerable_1<Zenject::InjectContext*>* Zenject::InjectContext::get_ParentContextsAndSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_ParentContextsAndSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentContextsAndSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InjectContext*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.get_AllObjectTypes
System::Collections::Generic::IEnumerable_1<System::Type*>* Zenject::InjectContext::get_AllObjectTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::get_AllObjectTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AllObjectTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.CreateSubContext
Zenject::InjectContext* Zenject::InjectContext::CreateSubContext(System::Type* memberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::CreateSubContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memberType)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method, memberType);
}
// Autogenerated method: Zenject.InjectContext.CreateSubContext
Zenject::InjectContext* Zenject::InjectContext::CreateSubContext(System::Type* memberType, ::Il2CppObject* identifier) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::CreateSubContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSubContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(memberType), ::il2cpp_utils::ExtractType(identifier)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method, memberType, identifier);
}
// Autogenerated method: Zenject.InjectContext.Clone
Zenject::InjectContext* Zenject::InjectContext::Clone() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext.GetObjectGraphString
::Il2CppString* Zenject::InjectContext::GetObjectGraphString() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::GetObjectGraphString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObjectGraphString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InjectContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*, System::Type*)>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*, System::Type*)>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*, System::Type*, ::Il2CppObject*)>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*, System::Type*, ::Il2CppObject*)>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*, System::Type*, ::Il2CppObject*, bool)>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*, System::Type*, ::Il2CppObject*, bool)>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InjectContext::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)()>(&InjectContext::Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)()>(&InjectContext::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::get_BindingId
// Il2CppName: get_BindingId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::BindingId (InjectContext::*)()>(&InjectContext::get_BindingId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_BindingId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::get_ObjectType
// Il2CppName: get_ObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (InjectContext::*)()>(&InjectContext::get_ObjectType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_ObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_ObjectType
// Il2CppName: set_ObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(System::Type*)>(&InjectContext::set_ObjectType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_ObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_ParentContext
// Il2CppName: get_ParentContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (InjectContext::*)()>(&InjectContext::get_ParentContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_ParentContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_ParentContext
// Il2CppName: set_ParentContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::InjectContext*)>(&InjectContext::set_ParentContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_ParentContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectContext*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_ObjectInstance
// Il2CppName: get_ObjectInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::*)()>(&InjectContext::get_ObjectInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_ObjectInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_ObjectInstance
// Il2CppName: set_ObjectInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(::Il2CppObject*)>(&InjectContext::set_ObjectInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_ObjectInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::*)()>(&InjectContext::get_Identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_Identifier
// Il2CppName: set_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(::Il2CppObject*)>(&InjectContext::set_Identifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_MemberName
// Il2CppName: get_MemberName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (InjectContext::*)()>(&InjectContext::get_MemberName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_MemberName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_MemberName
// Il2CppName: set_MemberName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(::Il2CppString*)>(&InjectContext::set_MemberName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_MemberName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_MemberType
// Il2CppName: get_MemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (InjectContext::*)()>(&InjectContext::get_MemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_MemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_MemberType
// Il2CppName: set_MemberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(System::Type*)>(&InjectContext::set_MemberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_MemberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_Optional
// Il2CppName: get_Optional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InjectContext::*)()>(&InjectContext::get_Optional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_Optional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_Optional
// Il2CppName: set_Optional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(bool)>(&InjectContext::set_Optional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_Optional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_SourceType
// Il2CppName: get_SourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectSources (InjectContext::*)()>(&InjectContext::get_SourceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_SourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_SourceType
// Il2CppName: set_SourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::InjectSources)>(&InjectContext::set_SourceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_SourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InjectSources>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_ConcreteIdentifier
// Il2CppName: get_ConcreteIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::*)()>(&InjectContext::get_ConcreteIdentifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_ConcreteIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_ConcreteIdentifier
// Il2CppName: set_ConcreteIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(::Il2CppObject*)>(&InjectContext::set_ConcreteIdentifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_ConcreteIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_FallBackValue
// Il2CppName: get_FallBackValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::*)()>(&InjectContext::get_FallBackValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_FallBackValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_FallBackValue
// Il2CppName: set_FallBackValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(::Il2CppObject*)>(&InjectContext::set_FallBackValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_FallBackValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (InjectContext::*)()>(&InjectContext::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::set_Container
// Il2CppName: set_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)(Zenject::DiContainer*)>(&InjectContext::set_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "set_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::get_ParentContexts
// Il2CppName: get_ParentContexts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::InjectContext*>* (InjectContext::*)()>(&InjectContext::get_ParentContexts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_ParentContexts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::get_ParentContextsAndSelf
// Il2CppName: get_ParentContextsAndSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::InjectContext*>* (InjectContext::*)()>(&InjectContext::get_ParentContextsAndSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_ParentContextsAndSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::get_AllObjectTypes
// Il2CppName: get_AllObjectTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (InjectContext::*)()>(&InjectContext::get_AllObjectTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "get_AllObjectTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::CreateSubContext
// Il2CppName: CreateSubContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (InjectContext::*)(System::Type*)>(&InjectContext::CreateSubContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "CreateSubContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::CreateSubContext
// Il2CppName: CreateSubContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (InjectContext::*)(System::Type*, ::Il2CppObject*)>(&InjectContext::CreateSubContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "CreateSubContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectContext::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (InjectContext::*)()>(&InjectContext::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::GetObjectGraphString
// Il2CppName: GetObjectGraphString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (InjectContext::*)()>(&InjectContext::GetObjectGraphString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), "GetObjectGraphString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)()>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::*)()>(&InjectContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectContext/<get_ParentContexts>d__52
#include "Zenject/InjectContext_-get_ParentContexts-d__52.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.System.IDisposable.Dispose
void Zenject::InjectContext::$get_ParentContexts$d__52::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.MoveNext
bool Zenject::InjectContext::$get_ParentContexts$d__52::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.<>m__Finally1
void Zenject::InjectContext::$get_ParentContexts$d__52::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current
Zenject::InjectContext* Zenject::InjectContext::$get_ParentContexts$d__52::System_Collections_Generic_IEnumerator$Zenject_InjectContext$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.System.Collections.IEnumerator.Reset
void Zenject::InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.System.Collections.IEnumerator.get_Current
::Il2CppObject* Zenject::InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator
System::Collections::Generic::IEnumerator_1<Zenject::InjectContext*>* Zenject::InjectContext::$get_ParentContexts$d__52::System_Collections_Generic_IEnumerable$Zenject_InjectContext$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<Zenject::InjectContext*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContexts>d__52.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* Zenject::InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContexts$d__52::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContexts$d__52::*)(int)>(&InjectContext::$get_ParentContexts$d__52::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContexts$d__52::*)(int)>(&InjectContext::$get_ParentContexts$d__52::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::System_Collections_Generic_IEnumerator$Zenject_InjectContext$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::System_Collections_Generic_IEnumerator$Zenject_InjectContext$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::System_Collections_Generic_IEnumerable$Zenject_InjectContext$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<Zenject::InjectContext*>* (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::System_Collections_Generic_IEnumerable$Zenject_InjectContext$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (InjectContext::$get_ParentContexts$d__52::*)()>(&InjectContext::$get_ParentContexts$d__52::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContexts$d__52*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54
#include "Zenject/InjectContext_-get_ParentContextsAndSelf-d__54.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.System.IDisposable.Dispose
void Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.MoveNext
bool Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.<>m__Finally1
void Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current
Zenject::InjectContext* Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_Generic_IEnumerator$Zenject_InjectContext$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::InjectContext*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.System.Collections.IEnumerator.Reset
void Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.System.Collections.IEnumerator.get_Current
::Il2CppObject* Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator
System::Collections::Generic::IEnumerator_1<Zenject::InjectContext*>* Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_Generic_IEnumerable$Zenject_InjectContext$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<Zenject::InjectContext*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_ParentContextsAndSelf>d__54.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_ParentContextsAndSelf$d__54::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContextsAndSelf$d__54::*)(int)>(&InjectContext::$get_ParentContextsAndSelf$d__54::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContextsAndSelf$d__54::*)(int)>(&InjectContext::$get_ParentContextsAndSelf$d__54::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_Generic_IEnumerator$Zenject_InjectContext$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::InjectContext* (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_Generic_IEnumerator$Zenject_InjectContext$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "System.Collections.Generic.IEnumerator<Zenject.InjectContext>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_Generic_IEnumerable$Zenject_InjectContext$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<Zenject::InjectContext*>* (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_Generic_IEnumerable$Zenject_InjectContext$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "System.Collections.Generic.IEnumerable<Zenject.InjectContext>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (InjectContext::$get_ParentContextsAndSelf$d__54::*)()>(&InjectContext::$get_ParentContextsAndSelf$d__54::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_ParentContextsAndSelf$d__54*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectContext/<get_AllObjectTypes>d__56
#include "Zenject/InjectContext_-get_AllObjectTypes-d__56.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.System.IDisposable.Dispose
void Zenject::InjectContext::$get_AllObjectTypes$d__56::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.MoveNext
bool Zenject::InjectContext::$get_AllObjectTypes$d__56::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.<>m__Finally1
void Zenject::InjectContext::$get_AllObjectTypes$d__56::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.System.Collections.Generic.IEnumerator<System.Type>.get_Current
System::Type* Zenject::InjectContext::$get_AllObjectTypes$d__56::System_Collections_Generic_IEnumerator$System_Type$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::System.Collections.Generic.IEnumerator<System.Type>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.System.Collections.IEnumerator.Reset
void Zenject::InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.System.Collections.IEnumerator.get_Current
::Il2CppObject* Zenject::InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
System::Collections::Generic::IEnumerator_1<System::Type*>* Zenject::InjectContext::$get_AllObjectTypes$d__56::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InjectContext/<get_AllObjectTypes>d__56.System.Collections.IEnumerable.GetEnumerator
System::Collections::IEnumerator* Zenject::InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerable_GetEnumerator() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectContext::$get_AllObjectTypes$d__56::System.Collections.IEnumerable.GetEnumerator");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_AllObjectTypes$d__56::*)(int)>(&InjectContext::$get_AllObjectTypes$d__56::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_AllObjectTypes$d__56::*)(int)>(&InjectContext::$get_AllObjectTypes$d__56::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::System_Collections_Generic_IEnumerator$System_Type$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Type>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::System_Collections_Generic_IEnumerator$System_Type$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "System.Collections.Generic.IEnumerator<System.Type>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<System::Type*>* (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::System_Collections_Generic_IEnumerable$System_Type$_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (InjectContext::$get_AllObjectTypes$d__56::*)()>(&InjectContext::$get_AllObjectTypes$d__56::System_Collections_IEnumerable_GetEnumerator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectContext::$get_AllObjectTypes$d__56*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.TypeValuePair
#include "Zenject/TypeValuePair.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TypeValuePair::TypeValuePair
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeValuePair::*)(System::Type*, ::Il2CppObject*)>(&TypeValuePair::TypeValuePair<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeValuePair), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TypeValuePair::*)(System::Type*, ::Il2CppObject*)>(&TypeValuePair::TypeValuePair<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TypeValuePair), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectUtil
#include "Zenject/InjectUtil.hpp"
// Including type: Zenject.InjectUtil/<>c
#include "Zenject/InjectUtil_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InjectUtil.CreateArgList
System::Collections::Generic::List_1<Zenject::TypeValuePair>* Zenject::InjectUtil::CreateArgList(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::CreateArgList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectUtil", "CreateArgList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::TypeValuePair>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, args);
}
// Autogenerated method: Zenject.InjectUtil.PopValueWithType
bool Zenject::InjectUtil::PopValueWithType(System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgMap, System::Type* injectedFieldType, ::Il2CppObject*& value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::PopValueWithType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectUtil", "PopValueWithType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(extraArgMap), ::il2cpp_utils::ExtractType(injectedFieldType), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, extraArgMap, injectedFieldType, value);
}
// Writing MetadataGetter for method: InjectUtil::CreateArgList
// Il2CppName: CreateArgList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::TypeValuePair>* (*)(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*)>(&InjectUtil::CreateArgList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectUtil*), "CreateArgList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: InjectUtil::CreateTypePair
// Il2CppName: CreateTypePair
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::CreateArgListExplicit
// Il2CppName: CreateArgListExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::CreateArgListExplicit
// Il2CppName: CreateArgListExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::CreateArgListExplicit
// Il2CppName: CreateArgListExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::CreateArgListExplicit
// Il2CppName: CreateArgListExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::CreateArgListExplicit
// Il2CppName: CreateArgListExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::CreateArgListExplicit
// Il2CppName: CreateArgListExplicit
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: InjectUtil::PopValueWithType
// Il2CppName: PopValueWithType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Collections::Generic::List_1<Zenject::TypeValuePair>*, System::Type*, ::Il2CppObject*&)>(&InjectUtil::PopValueWithType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectUtil*), "PopValueWithType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::TypeValuePair>*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.InjectUtil/<>c
#include "Zenject/InjectUtil_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.InjectUtil/<>c <>9
Zenject::InjectUtil::$$c* Zenject::InjectUtil::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::InjectUtil::$$c*>("Zenject", "InjectUtil/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.InjectUtil/<>c <>9
void Zenject::InjectUtil::$$c::_set_$$9(Zenject::InjectUtil::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InjectUtil/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Object,Zenject.TypeValuePair> <>9__0_0
System::Func_2<::Il2CppObject*, Zenject::TypeValuePair>* Zenject::InjectUtil::$$c::_get_$$9__0_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::$$c::_get_$$9__0_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<::Il2CppObject*, Zenject::TypeValuePair>*>("Zenject", "InjectUtil/<>c", "<>9__0_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Object,Zenject.TypeValuePair> <>9__0_0
void Zenject::InjectUtil::$$c::_set_$$9__0_0(System::Func_2<::Il2CppObject*, Zenject::TypeValuePair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::$$c::_set_$$9__0_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "InjectUtil/<>c", "<>9__0_0", value)));
}
// Autogenerated method: Zenject.InjectUtil/<>c..cctor
void Zenject::InjectUtil::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "InjectUtil/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.InjectUtil/<>c.<CreateArgList>b__0_0
Zenject::TypeValuePair Zenject::InjectUtil::$$c::$CreateArgList$b__0_0(::Il2CppObject* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectUtil::$$c::<CreateArgList>b__0_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateArgList>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::TypeValuePair, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: InjectUtil::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&InjectUtil::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectUtil::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InjectUtil::$$c::$CreateArgList$b__0_0
// Il2CppName: <CreateArgList>b__0_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::TypeValuePair (InjectUtil::$$c::*)(::Il2CppObject*)>(&InjectUtil::$$c::$CreateArgList$b__0_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectUtil::$$c*), "<CreateArgList>b__0_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InjectUtil::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectUtil::$$c::*)()>(&InjectUtil::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectUtil::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InjectUtil::$$c::*)()>(&InjectUtil::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InjectUtil::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Context
#include "Zenject/Context.hpp"
// Including type: Zenject.Context/<>c
#include "Zenject/Context_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.ScriptableObjectInstaller
#include "Zenject/ScriptableObjectInstaller.hpp"
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
// Including type: Zenject.InstallerBase
#include "Zenject/InstallerBase.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.ZenjectBinding
#include "Zenject/ZenjectBinding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.Context.get_Installers
System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* Zenject::Context::get_Installers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::get_Installers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Installers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.set_Installers
void Zenject::Context::set_Installers(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::set_Installers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Installers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.Context.get_InstallerPrefabs
System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* Zenject::Context::get_InstallerPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::get_InstallerPrefabs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InstallerPrefabs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.set_InstallerPrefabs
void Zenject::Context::set_InstallerPrefabs(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::set_InstallerPrefabs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InstallerPrefabs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.Context.get_ScriptableObjectInstallers
System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>* Zenject::Context::get_ScriptableObjectInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::get_ScriptableObjectInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ScriptableObjectInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.set_ScriptableObjectInstallers
void Zenject::Context::set_ScriptableObjectInstallers(System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::set_ScriptableObjectInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ScriptableObjectInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.Context.get_NormalInstallerTypes
System::Collections::Generic::IEnumerable_1<System::Type*>* Zenject::Context::get_NormalInstallerTypes() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::get_NormalInstallerTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NormalInstallerTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<System::Type*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.set_NormalInstallerTypes
void Zenject::Context::set_NormalInstallerTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::set_NormalInstallerTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NormalInstallerTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.Context.get_NormalInstallers
System::Collections::Generic::IEnumerable_1<Zenject::InstallerBase*>* Zenject::Context::get_NormalInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::get_NormalInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_NormalInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::InstallerBase*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.set_NormalInstallers
void Zenject::Context::set_NormalInstallers(System::Collections::Generic::IEnumerable_1<Zenject::InstallerBase*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::set_NormalInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_NormalInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.Context.get_Container
Zenject::DiContainer* Zenject::Context::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::get_Container");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.GetRootGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::Context::GetRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::GetRootGameObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.AddNormalInstallerType
void Zenject::Context::AddNormalInstallerType(System::Type* installerType) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::AddNormalInstallerType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNormalInstallerType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(installerType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, installerType);
}
// Autogenerated method: Zenject.Context.AddNormalInstaller
void Zenject::Context::AddNormalInstaller(Zenject::InstallerBase* installer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::AddNormalInstaller");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddNormalInstaller", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(installer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, installer);
}
// Autogenerated method: Zenject.Context.CheckInstallerPrefabTypes
void Zenject::Context::CheckInstallerPrefabTypes(System::Collections::Generic::List_1<Zenject::MonoInstaller*>* installers, System::Collections::Generic::List_1<Zenject::MonoInstaller*>* installerPrefabs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::CheckInstallerPrefabTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckInstallerPrefabTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(installers), ::il2cpp_utils::ExtractType(installerPrefabs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, installers, installerPrefabs);
}
// Autogenerated method: Zenject.Context.InstallInstallers
void Zenject::Context::InstallInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::InstallInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.Context.InstallInstallers
void Zenject::Context::InstallInstallers(System::Collections::Generic::List_1<Zenject::InstallerBase*>* normalInstallers, System::Collections::Generic::List_1<System::Type*>* normalInstallerTypes, System::Collections::Generic::List_1<Zenject::ScriptableObjectInstaller*>* scriptableObjectInstallers, System::Collections::Generic::List_1<Zenject::MonoInstaller*>* installers, System::Collections::Generic::List_1<Zenject::MonoInstaller*>* installerPrefabs) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::InstallInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normalInstallers), ::il2cpp_utils::ExtractType(normalInstallerTypes), ::il2cpp_utils::ExtractType(scriptableObjectInstallers), ::il2cpp_utils::ExtractType(installers), ::il2cpp_utils::ExtractType(installerPrefabs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, normalInstallers, normalInstallerTypes, scriptableObjectInstallers, installers, installerPrefabs);
}
// Autogenerated method: Zenject.Context.InstallSceneBindings
void Zenject::Context::InstallSceneBindings(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* injectableMonoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::InstallSceneBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallSceneBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectableMonoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectableMonoBehaviours);
}
// Autogenerated method: Zenject.Context.InstallZenjectBinding
void Zenject::Context::InstallZenjectBinding(Zenject::ZenjectBinding* binding) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::InstallZenjectBinding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallZenjectBinding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(binding)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, binding);
}
// Autogenerated method: Zenject.Context.GetInjectableMonoBehaviours
void Zenject::Context::GetInjectableMonoBehaviours(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* components) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::GetInjectableMonoBehaviours");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(components)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, components);
}
// Writing MetadataGetter for method: Context::get_Installers
// Il2CppName: get_Installers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* (Context::*)()>(&Context::get_Installers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "get_Installers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::set_Installers
// Il2CppName: set_Installers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*)>(&Context::set_Installers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "set_Installers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: Context::get_InstallerPrefabs
// Il2CppName: get_InstallerPrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* (Context::*)()>(&Context::get_InstallerPrefabs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "get_InstallerPrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::set_InstallerPrefabs
// Il2CppName: set_InstallerPrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*)>(&Context::set_InstallerPrefabs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "set_InstallerPrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: Context::get_ScriptableObjectInstallers
// Il2CppName: get_ScriptableObjectInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>* (Context::*)()>(&Context::get_ScriptableObjectInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "get_ScriptableObjectInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::set_ScriptableObjectInstallers
// Il2CppName: set_ScriptableObjectInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>*)>(&Context::set_ScriptableObjectInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "set_ScriptableObjectInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: Context::get_NormalInstallerTypes
// Il2CppName: get_NormalInstallerTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<System::Type*>* (Context::*)()>(&Context::get_NormalInstallerTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "get_NormalInstallerTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::set_NormalInstallerTypes
// Il2CppName: set_NormalInstallerTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::IEnumerable_1<System::Type*>*)>(&Context::set_NormalInstallerTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "set_NormalInstallerTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: Context::get_NormalInstallers
// Il2CppName: get_NormalInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::InstallerBase*>* (Context::*)()>(&Context::get_NormalInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "get_NormalInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::set_NormalInstallers
// Il2CppName: set_NormalInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::IEnumerable_1<Zenject::InstallerBase*>*)>(&Context::set_NormalInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "set_NormalInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::InstallerBase*>*>()});
  }
};
// Writing MetadataGetter for method: Context::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (Context::*)()>(&Context::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::GetRootGameObjects
// Il2CppName: GetRootGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (Context::*)()>(&Context::GetRootGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "GetRootGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::AddNormalInstallerType
// Il2CppName: AddNormalInstallerType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Type*)>(&Context::AddNormalInstallerType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "AddNormalInstallerType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Context::AddNormalInstaller
// Il2CppName: AddNormalInstaller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(Zenject::InstallerBase*)>(&Context::AddNormalInstaller)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "AddNormalInstaller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::InstallerBase*>()});
  }
};
// Writing MetadataGetter for method: Context::CheckInstallerPrefabTypes
// Il2CppName: CheckInstallerPrefabTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::List_1<Zenject::MonoInstaller*>*, System::Collections::Generic::List_1<Zenject::MonoInstaller*>*)>(&Context::CheckInstallerPrefabTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "CheckInstallerPrefabTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::MonoInstaller*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::MonoInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: Context::InstallInstallers
// Il2CppName: InstallInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)()>(&Context::InstallInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "InstallInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::InstallInstallers
// Il2CppName: InstallInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::List_1<Zenject::InstallerBase*>*, System::Collections::Generic::List_1<System::Type*>*, System::Collections::Generic::List_1<Zenject::ScriptableObjectInstaller*>*, System::Collections::Generic::List_1<Zenject::MonoInstaller*>*, System::Collections::Generic::List_1<Zenject::MonoInstaller*>*)>(&Context::InstallInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "InstallInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::InstallerBase*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<System::Type*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::ScriptableObjectInstaller*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::MonoInstaller*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<Zenject::MonoInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: Context::InstallSceneBindings
// Il2CppName: InstallSceneBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&Context::InstallSceneBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "InstallSceneBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: Context::InstallZenjectBinding
// Il2CppName: InstallZenjectBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(Zenject::ZenjectBinding*)>(&Context::InstallZenjectBinding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "InstallZenjectBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::ZenjectBinding*>()});
  }
};
// Writing MetadataGetter for method: Context::GetInjectableMonoBehaviours
// Il2CppName: GetInjectableMonoBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&Context::GetInjectableMonoBehaviours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: Context::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)()>(&Context::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::*)()>(&Context::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Context/<>c
#include "Zenject/Context_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.Context/<>c <>9
Zenject::Context::$$c* Zenject::Context::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::Context::$$c*>("Zenject", "Context/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.Context/<>c <>9
void Zenject::Context::$$c::_set_$$9(Zenject::Context::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "Context/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Type,System.Boolean> <>9__16_0
System::Func_2<System::Type*, bool>* Zenject::Context::$$c::_get_$$9__16_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::$$c::_get_$$9__16_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Type*, bool>*>("Zenject", "Context/<>c", "<>9__16_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Type,System.Boolean> <>9__16_0
void Zenject::Context::$$c::_set_$$9__16_0(System::Func_2<System::Type*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::$$c::_set_$$9__16_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "Context/<>c", "<>9__16_0", value)));
}
// Autogenerated method: Zenject.Context/<>c..cctor
void Zenject::Context::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "Context/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.Context/<>c.<set_NormalInstallerTypes>b__16_0
bool Zenject::Context::$$c::$set_NormalInstallerTypes$b__16_0(System::Type* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::Context::$$c::<set_NormalInstallerTypes>b__16_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<set_NormalInstallerTypes>b__16_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: Context::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Context::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Context::$$c::$set_NormalInstallerTypes$b__16_0
// Il2CppName: <set_NormalInstallerTypes>b__16_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Context::$$c::*)(System::Type*)>(&Context::$$c::$set_NormalInstallerTypes$b__16_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context::$$c*), "<set_NormalInstallerTypes>b__16_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Context::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::$$c::*)()>(&Context::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Context::$$c::*)()>(&Context::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Context::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.GameObjectContext
#include "Zenject/GameObjectContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: Zenject.MonoKernel
#include "Zenject/MonoKernel.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.GameObjectContext.add_PreInstall
void Zenject::GameObjectContext::add_PreInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::add_PreInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.remove_PreInstall
void Zenject::GameObjectContext::remove_PreInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::remove_PreInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.add_PostInstall
void Zenject::GameObjectContext::add_PostInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::add_PostInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.remove_PostInstall
void Zenject::GameObjectContext::remove_PostInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::remove_PostInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.add_PreResolve
void Zenject::GameObjectContext::add_PreResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::add_PreResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.remove_PreResolve
void Zenject::GameObjectContext::remove_PreResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::remove_PreResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.add_PostResolve
void Zenject::GameObjectContext::add_PostResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::add_PostResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PostResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.remove_PostResolve
void Zenject::GameObjectContext::remove_PostResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::remove_PostResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PostResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.GameObjectContext.Construct
void Zenject::GameObjectContext::Construct(Zenject::DiContainer* parentContainer) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::Construct");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentContainer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parentContainer);
}
// Autogenerated method: Zenject.GameObjectContext.InstallBindings
void Zenject::GameObjectContext::InstallBindings(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* injectableMonoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::InstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectableMonoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectableMonoBehaviours);
}
// Autogenerated method: Zenject.GameObjectContext.get_Container
Zenject::DiContainer* Zenject::GameObjectContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::get_Container");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectContext.GetRootGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::GameObjectContext::GetRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::GetRootGameObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectContext.RunInternal
void Zenject::GameObjectContext::RunInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::RunInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.GameObjectContext.GetInjectableMonoBehaviours
void Zenject::GameObjectContext::GetInjectableMonoBehaviours(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* monoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GameObjectContext::GetInjectableMonoBehaviours");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(monoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, monoBehaviours);
}
// Writing MetadataGetter for method: GameObjectContext::add_PreInstall
// Il2CppName: add_PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::add_PreInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "add_PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::remove_PreInstall
// Il2CppName: remove_PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::remove_PreInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "remove_PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::add_PostInstall
// Il2CppName: add_PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::add_PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "add_PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::remove_PostInstall
// Il2CppName: remove_PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::remove_PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "remove_PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::add_PreResolve
// Il2CppName: add_PreResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::add_PreResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "add_PreResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::remove_PreResolve
// Il2CppName: remove_PreResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::remove_PreResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "remove_PreResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::add_PostResolve
// Il2CppName: add_PostResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::add_PostResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "add_PostResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::remove_PostResolve
// Il2CppName: remove_PostResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Action*)>(&GameObjectContext::remove_PostResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "remove_PostResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(Zenject::DiContainer*)>(&GameObjectContext::Construct)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&GameObjectContext::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (GameObjectContext::*)()>(&GameObjectContext::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectContext::GetRootGameObjects
// Il2CppName: GetRootGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (GameObjectContext::*)()>(&GameObjectContext::GetRootGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "GetRootGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectContext::RunInternal
// Il2CppName: RunInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)()>(&GameObjectContext::RunInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "RunInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectContext::GetInjectableMonoBehaviours
// Il2CppName: GetInjectableMonoBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&GameObjectContext::GetInjectableMonoBehaviours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: GameObjectContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)()>(&GameObjectContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectContext::*)()>(&GameObjectContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ProjectContext
#include "Zenject/ProjectContext.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: Zenject.ZenjectSettings
#include "Zenject/ZenjectSettings.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String ProjectContextResourcePath
::Il2CppString* Zenject::ProjectContext::_get_ProjectContextResourcePath() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_get_ProjectContextResourcePath");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "ProjectContext", "ProjectContextResourcePath"));
}
// Autogenerated static field setter
// Set static field: static public System.String ProjectContextResourcePath
void Zenject::ProjectContext::_set_ProjectContextResourcePath(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_set_ProjectContextResourcePath");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ProjectContext", "ProjectContextResourcePath", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ProjectContextResourcePathOld
::Il2CppString* Zenject::ProjectContext::_get_ProjectContextResourcePathOld() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_get_ProjectContextResourcePathOld");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Zenject", "ProjectContext", "ProjectContextResourcePathOld"));
}
// Autogenerated static field setter
// Set static field: static public System.String ProjectContextResourcePathOld
void Zenject::ProjectContext::_set_ProjectContextResourcePathOld(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_set_ProjectContextResourcePathOld");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ProjectContext", "ProjectContextResourcePathOld", value));
}
// Autogenerated static field getter
// Get static field: static private Zenject.ProjectContext _instance
Zenject::ProjectContext* Zenject::ProjectContext::_get__instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_get__instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::ProjectContext*>("Zenject", "ProjectContext", "_instance"));
}
// Autogenerated static field setter
// Set static field: static private Zenject.ProjectContext _instance
void Zenject::ProjectContext::_set__instance(Zenject::ProjectContext* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_set__instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ProjectContext", "_instance", value));
}
// [CompilerGeneratedAttribute] Offset: 0xDDECF8
// Autogenerated static field getter
// Get static field: static private System.Boolean <ValidateOnNextRun>k__BackingField
bool Zenject::ProjectContext::_get_$ValidateOnNextRun$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_get_$ValidateOnNextRun$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("Zenject", "ProjectContext", "<ValidateOnNextRun>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <ValidateOnNextRun>k__BackingField
void Zenject::ProjectContext::_set_$ValidateOnNextRun$k__BackingField(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::_set_$ValidateOnNextRun$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "ProjectContext", "<ValidateOnNextRun>k__BackingField", value));
}
// Autogenerated method: Zenject.ProjectContext.add_PreInstall
void Zenject::ProjectContext::add_PreInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::add_PreInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.remove_PreInstall
void Zenject::ProjectContext::remove_PreInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::remove_PreInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.add_PostInstall
void Zenject::ProjectContext::add_PostInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::add_PostInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.remove_PostInstall
void Zenject::ProjectContext::remove_PostInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::remove_PostInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.add_PreResolve
void Zenject::ProjectContext::add_PreResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::add_PreResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.remove_PreResolve
void Zenject::ProjectContext::remove_PreResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::remove_PreResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.add_PostResolve
void Zenject::ProjectContext::add_PostResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::add_PostResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PostResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.remove_PostResolve
void Zenject::ProjectContext::remove_PostResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::remove_PostResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PostResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.get_HasInstance
bool Zenject::ProjectContext::get_HasInstance() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::get_HasInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectContext", "get_HasInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.get_Instance
Zenject::ProjectContext* Zenject::ProjectContext::get_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::get_Instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectContext", "get_Instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::ProjectContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.get_ValidateOnNextRun
bool Zenject::ProjectContext::get_ValidateOnNextRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::get_ValidateOnNextRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectContext", "get_ValidateOnNextRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.set_ValidateOnNextRun
void Zenject::ProjectContext::set_ValidateOnNextRun(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::set_ValidateOnNextRun");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectContext", "set_ValidateOnNextRun", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.TryGetPrefab
UnityEngine::GameObject* Zenject::ProjectContext::TryGetPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::TryGetPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectContext", "TryGetPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.InstantiateAndInitialize
void Zenject::ProjectContext::InstantiateAndInitialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::InstantiateAndInitialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "ProjectContext", "InstantiateAndInitialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.get_ParentNewObjectsUnderContext
bool Zenject::ProjectContext::get_ParentNewObjectsUnderContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::get_ParentNewObjectsUnderContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentNewObjectsUnderContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.set_ParentNewObjectsUnderContext
void Zenject::ProjectContext::set_ParentNewObjectsUnderContext(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::set_ParentNewObjectsUnderContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentNewObjectsUnderContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.ProjectContext.EnsureIsInitialized
void Zenject::ProjectContext::EnsureIsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::EnsureIsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnsureIsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.Awake
void Zenject::ProjectContext::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.Initialize
void Zenject::ProjectContext::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.InstallBindings
void Zenject::ProjectContext::InstallBindings(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* injectableMonoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::InstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectableMonoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectableMonoBehaviours);
}
// Autogenerated method: Zenject.ProjectContext.get_Container
Zenject::DiContainer* Zenject::ProjectContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::get_Container");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.GetRootGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::ProjectContext::GetRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::GetRootGameObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.ProjectContext.GetInjectableMonoBehaviours
void Zenject::ProjectContext::GetInjectableMonoBehaviours(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* monoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ProjectContext::GetInjectableMonoBehaviours");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(monoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, monoBehaviours);
}
// Writing MetadataGetter for method: ProjectContext::add_PreInstall
// Il2CppName: add_PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::add_PreInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "add_PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::remove_PreInstall
// Il2CppName: remove_PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::remove_PreInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "remove_PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::add_PostInstall
// Il2CppName: add_PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::add_PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "add_PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::remove_PostInstall
// Il2CppName: remove_PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::remove_PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "remove_PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::add_PreResolve
// Il2CppName: add_PreResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::add_PreResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "add_PreResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::remove_PreResolve
// Il2CppName: remove_PreResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::remove_PreResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "remove_PreResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::add_PostResolve
// Il2CppName: add_PostResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::add_PostResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "add_PostResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::remove_PostResolve
// Il2CppName: remove_PostResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Action*)>(&ProjectContext::remove_PostResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "remove_PostResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::get_HasInstance
// Il2CppName: get_HasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ProjectContext::get_HasInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "get_HasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::ProjectContext* (*)()>(&ProjectContext::get_Instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::get_ValidateOnNextRun
// Il2CppName: get_ValidateOnNextRun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ProjectContext::get_ValidateOnNextRun)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "get_ValidateOnNextRun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::set_ValidateOnNextRun
// Il2CppName: set_ValidateOnNextRun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&ProjectContext::set_ValidateOnNextRun)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "set_ValidateOnNextRun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::TryGetPrefab
// Il2CppName: TryGetPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (*)()>(&ProjectContext::TryGetPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "TryGetPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::InstantiateAndInitialize
// Il2CppName: InstantiateAndInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ProjectContext::InstantiateAndInitialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "InstantiateAndInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::get_ParentNewObjectsUnderContext
// Il2CppName: get_ParentNewObjectsUnderContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ProjectContext::*)()>(&ProjectContext::get_ParentNewObjectsUnderContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "get_ParentNewObjectsUnderContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::set_ParentNewObjectsUnderContext
// Il2CppName: set_ParentNewObjectsUnderContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(bool)>(&ProjectContext::set_ParentNewObjectsUnderContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "set_ParentNewObjectsUnderContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::EnsureIsInitialized
// Il2CppName: EnsureIsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)()>(&ProjectContext::EnsureIsInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "EnsureIsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)()>(&ProjectContext::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)()>(&ProjectContext::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&ProjectContext::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (ProjectContext::*)()>(&ProjectContext::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::GetRootGameObjects
// Il2CppName: GetRootGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (ProjectContext::*)()>(&ProjectContext::GetRootGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "GetRootGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ProjectContext::GetInjectableMonoBehaviours
// Il2CppName: GetInjectableMonoBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&ProjectContext::GetInjectableMonoBehaviours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: ProjectContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)()>(&ProjectContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ProjectContext::*)()>(&ProjectContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ProjectContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.RunnableContext
#include "Zenject/RunnableContext.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean _staticAutoRun
bool Zenject::RunnableContext::_get__staticAutoRun() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::_get__staticAutoRun");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("Zenject", "RunnableContext", "_staticAutoRun"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _staticAutoRun
void Zenject::RunnableContext::_set__staticAutoRun(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::_set__staticAutoRun");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "RunnableContext", "_staticAutoRun", value));
}
// Autogenerated method: Zenject.RunnableContext.get_Initialized
bool Zenject::RunnableContext::get_Initialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::get_Initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.RunnableContext.set_Initialized
void Zenject::RunnableContext::set_Initialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::set_Initialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Initialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.RunnableContext.Initialize
void Zenject::RunnableContext::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.RunnableContext.Run
void Zenject::RunnableContext::Run() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::Run");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Run", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.RunnableContext.RunInternal
void Zenject::RunnableContext::RunInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::RunInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.RunnableContext..cctor
void Zenject::RunnableContext::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::RunnableContext::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "RunnableContext", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: RunnableContext::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RunnableContext::*)()>(&RunnableContext::get_Initialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RunnableContext::set_Initialized
// Il2CppName: set_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RunnableContext::*)(bool)>(&RunnableContext::set_Initialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), "set_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: RunnableContext::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RunnableContext::*)()>(&RunnableContext::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RunnableContext::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RunnableContext::*)()>(&RunnableContext::Run)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RunnableContext::RunInternal
// Il2CppName: RunInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RunnableContext::*)()>(&RunnableContext::RunInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), "RunInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RunnableContext::CreateComponent
// Il2CppName: CreateComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: RunnableContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RunnableContext::*)()>(&RunnableContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RunnableContext::*)()>(&RunnableContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RunnableContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RunnableContext::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RunnableContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SceneContext
#include "Zenject/SceneContext.hpp"
// Including type: Zenject.SceneContext/<>c__DisplayClass49_0
#include "Zenject/SceneContext_--c__DisplayClass49_0.hpp"
// Including type: Zenject.SceneContext/<>c
#include "Zenject/SceneContext_--c.hpp"
// Including type: Zenject.SceneContext/<>c__DisplayClass51_0
#include "Zenject/SceneContext_--c__DisplayClass51_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.SceneDecoratorContext
#include "Zenject/SceneDecoratorContext.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Action`1<Zenject.DiContainer> ExtraBindingsEarlyInstallMethod
System::Action_1<Zenject::DiContainer*>* Zenject::SceneContext::_get_ExtraBindingsEarlyInstallMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_get_ExtraBindingsEarlyInstallMethod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<Zenject::DiContainer*>*>("Zenject", "SceneContext", "ExtraBindingsEarlyInstallMethod"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Zenject.DiContainer> ExtraBindingsEarlyInstallMethod
void Zenject::SceneContext::_set_ExtraBindingsEarlyInstallMethod(System::Action_1<Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_set_ExtraBindingsEarlyInstallMethod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SceneContext", "ExtraBindingsEarlyInstallMethod", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Zenject.DiContainer> ExtraBindingsInstallMethod
System::Action_1<Zenject::DiContainer*>* Zenject::SceneContext::_get_ExtraBindingsInstallMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_get_ExtraBindingsInstallMethod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<Zenject::DiContainer*>*>("Zenject", "SceneContext", "ExtraBindingsInstallMethod"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Zenject.DiContainer> ExtraBindingsInstallMethod
void Zenject::SceneContext::_set_ExtraBindingsInstallMethod(System::Action_1<Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_set_ExtraBindingsInstallMethod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SceneContext", "ExtraBindingsInstallMethod", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Zenject.DiContainer> ExtraBindingsLateInstallMethod
System::Action_1<Zenject::DiContainer*>* Zenject::SceneContext::_get_ExtraBindingsLateInstallMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_get_ExtraBindingsLateInstallMethod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<Zenject::DiContainer*>*>("Zenject", "SceneContext", "ExtraBindingsLateInstallMethod"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Zenject.DiContainer> ExtraBindingsLateInstallMethod
void Zenject::SceneContext::_set_ExtraBindingsLateInstallMethod(System::Action_1<Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_set_ExtraBindingsLateInstallMethod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SceneContext", "ExtraBindingsLateInstallMethod", value));
}
// Autogenerated static field getter
// Get static field: static public System.Action`1<Zenject.DiContainer> ExtraPostInstallMethod
System::Action_1<Zenject::DiContainer*>* Zenject::SceneContext::_get_ExtraPostInstallMethod() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_get_ExtraPostInstallMethod");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<Zenject::DiContainer*>*>("Zenject", "SceneContext", "ExtraPostInstallMethod"));
}
// Autogenerated static field setter
// Set static field: static public System.Action`1<Zenject.DiContainer> ExtraPostInstallMethod
void Zenject::SceneContext::_set_ExtraPostInstallMethod(System::Action_1<Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_set_ExtraPostInstallMethod");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SceneContext", "ExtraPostInstallMethod", value));
}
// Autogenerated static field getter
// Get static field: static public System.Collections.Generic.IEnumerable`1<Zenject.DiContainer> ParentContainers
System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>* Zenject::SceneContext::_get_ParentContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_get_ParentContainers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*>("Zenject", "SceneContext", "ParentContainers"));
}
// Autogenerated static field setter
// Set static field: static public System.Collections.Generic.IEnumerable`1<Zenject.DiContainer> ParentContainers
void Zenject::SceneContext::_set_ParentContainers(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::_set_ParentContainers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "SceneContext", "ParentContainers", value));
}
// Autogenerated method: Zenject.SceneContext.add_PreInstall
void Zenject::SceneContext::add_PreInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::add_PreInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.remove_PreInstall
void Zenject::SceneContext::remove_PreInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::remove_PreInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.add_PostInstall
void Zenject::SceneContext::add_PostInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::add_PostInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.remove_PostInstall
void Zenject::SceneContext::remove_PostInstall(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::remove_PostInstall");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PostInstall", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.add_PreResolve
void Zenject::SceneContext::add_PreResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::add_PreResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PreResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.remove_PreResolve
void Zenject::SceneContext::remove_PreResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::remove_PreResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PreResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.add_PostResolve
void Zenject::SceneContext::add_PostResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::add_PostResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_PostResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.remove_PostResolve
void Zenject::SceneContext::remove_PostResolve(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::remove_PostResolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_PostResolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.get_HasResolved
bool Zenject::SceneContext::get_HasResolved() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_HasResolved");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasResolved", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.get_HasInstalled
bool Zenject::SceneContext::get_HasInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_HasInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.get_IsValidating
bool Zenject::SceneContext::get_IsValidating() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_IsValidating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsValidating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.get_ContractNames
System::Collections::Generic::IEnumerable_1<::Il2CppString*>* Zenject::SceneContext::get_ContractNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_ContractNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContractNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.set_ContractNames
void Zenject::SceneContext::set_ContractNames(System::Collections::Generic::IEnumerable_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::set_ContractNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ContractNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.get_ParentContractNames
System::Collections::Generic::IEnumerable_1<::Il2CppString*>* Zenject::SceneContext::get_ParentContractNames() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_ParentContractNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentContractNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.set_ParentContractNames
void Zenject::SceneContext::set_ParentContractNames(System::Collections::Generic::IEnumerable_1<::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::set_ParentContractNames");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentContractNames", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.get_ParentNewObjectsUnderSceneContext
bool Zenject::SceneContext::get_ParentNewObjectsUnderSceneContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_ParentNewObjectsUnderSceneContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParentNewObjectsUnderSceneContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.set_ParentNewObjectsUnderSceneContext
void Zenject::SceneContext::set_ParentNewObjectsUnderSceneContext(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::set_ParentNewObjectsUnderSceneContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ParentNewObjectsUnderSceneContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneContext.Awake
void Zenject::SceneContext::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.Validate
void Zenject::SceneContext::Validate() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.GetParentContainers
System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>* Zenject::SceneContext::GetParentContainers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::GetParentContainers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentContainers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.LookupDecoratorContexts
System::Collections::Generic::List_1<Zenject::SceneDecoratorContext*>* Zenject::SceneContext::LookupDecoratorContexts() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::LookupDecoratorContexts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookupDecoratorContexts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<Zenject::SceneDecoratorContext*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.Install
void Zenject::SceneContext::Install() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::Install");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Install", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.Resolve
void Zenject::SceneContext::Resolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::Resolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.InstallBindings
void Zenject::SceneContext::InstallBindings(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* injectableMonoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::InstallBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(injectableMonoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, injectableMonoBehaviours);
}
// Autogenerated method: Zenject.SceneContext.Create
Zenject::SceneContext* Zenject::SceneContext::Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::Create");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneContext", "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::SceneContext*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.<LookupDecoratorContexts>b__50_2
bool Zenject::SceneContext::$LookupDecoratorContexts$b__50_2(Zenject::SceneDecoratorContext* decoratorContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::<LookupDecoratorContexts>b__50_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LookupDecoratorContexts>b__50_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(decoratorContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, decoratorContext);
}
// Autogenerated method: Zenject.SceneContext.get_Container
Zenject::DiContainer* Zenject::SceneContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::get_Container");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.RunInternal
void Zenject::SceneContext::RunInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::RunInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.GetRootGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::SceneContext::GetRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::GetRootGameObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneContext.GetInjectableMonoBehaviours
void Zenject::SceneContext::GetInjectableMonoBehaviours(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* monoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::GetInjectableMonoBehaviours");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(monoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, monoBehaviours);
}
// Writing MetadataGetter for method: SceneContext::add_PreInstall
// Il2CppName: add_PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::add_PreInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "add_PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::remove_PreInstall
// Il2CppName: remove_PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::remove_PreInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "remove_PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::add_PostInstall
// Il2CppName: add_PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::add_PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "add_PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::remove_PostInstall
// Il2CppName: remove_PostInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::remove_PostInstall)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "remove_PostInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::add_PreResolve
// Il2CppName: add_PreResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::add_PreResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "add_PreResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::remove_PreResolve
// Il2CppName: remove_PreResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::remove_PreResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "remove_PreResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::add_PostResolve
// Il2CppName: add_PostResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::add_PostResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "add_PostResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::remove_PostResolve
// Il2CppName: remove_PostResolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Action*)>(&SceneContext::remove_PostResolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "remove_PostResolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::get_HasResolved
// Il2CppName: get_HasResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::*)()>(&SceneContext::get_HasResolved)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_HasResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::get_HasInstalled
// Il2CppName: get_HasInstalled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::*)()>(&SceneContext::get_HasInstalled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_HasInstalled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::get_IsValidating
// Il2CppName: get_IsValidating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::*)()>(&SceneContext::get_IsValidating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_IsValidating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::get_ContractNames
// Il2CppName: get_ContractNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Il2CppString*>* (SceneContext::*)()>(&SceneContext::get_ContractNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_ContractNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::set_ContractNames
// Il2CppName: set_ContractNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&SceneContext::set_ContractNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "set_ContractNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::get_ParentContractNames
// Il2CppName: get_ParentContractNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<::Il2CppString*>* (SceneContext::*)()>(&SceneContext::get_ParentContractNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_ParentContractNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::set_ParentContractNames
// Il2CppName: set_ParentContractNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Collections::Generic::IEnumerable_1<::Il2CppString*>*)>(&SceneContext::set_ParentContractNames)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "set_ParentContractNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::get_ParentNewObjectsUnderSceneContext
// Il2CppName: get_ParentNewObjectsUnderSceneContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::*)()>(&SceneContext::get_ParentNewObjectsUnderSceneContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_ParentNewObjectsUnderSceneContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::set_ParentNewObjectsUnderSceneContext
// Il2CppName: set_ParentNewObjectsUnderSceneContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(bool)>(&SceneContext::set_ParentNewObjectsUnderSceneContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "set_ParentNewObjectsUnderSceneContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SceneContext::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::Validate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::GetParentContainers
// Il2CppName: GetParentContainers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>* (SceneContext::*)()>(&SceneContext::GetParentContainers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "GetParentContainers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::LookupDecoratorContexts
// Il2CppName: LookupDecoratorContexts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<Zenject::SceneDecoratorContext*>* (SceneContext::*)()>(&SceneContext::LookupDecoratorContexts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "LookupDecoratorContexts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::Install
// Il2CppName: Install
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::Install)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "Install", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&SceneContext::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::SceneContext* (*)()>(&SceneContext::Create)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::$LookupDecoratorContexts$b__50_2
// Il2CppName: <LookupDecoratorContexts>b__50_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::*)(Zenject::SceneDecoratorContext*)>(&SceneContext::$LookupDecoratorContexts$b__50_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "<LookupDecoratorContexts>b__50_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SceneDecoratorContext*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (SceneContext::*)()>(&SceneContext::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::RunInternal
// Il2CppName: RunInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::RunInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "RunInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::GetRootGameObjects
// Il2CppName: GetRootGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (SceneContext::*)()>(&SceneContext::GetRootGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "GetRootGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::GetInjectableMonoBehaviours
// Il2CppName: GetInjectableMonoBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&SceneContext::GetInjectableMonoBehaviours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::*)()>(&SceneContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SceneContext/<>c__DisplayClass49_0
#include "Zenject/SceneContext_--c__DisplayClass49_0.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SceneContext/<>c__DisplayClass49_0.<GetParentContainers>b__2
bool Zenject::SceneContext::$$c__DisplayClass49_0::$GetParentContainers$b__2(Zenject::SceneContext* sceneContext) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c__DisplayClass49_0::<GetParentContainers>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetParentContainers>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sceneContext)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sceneContext);
}
// Autogenerated method: Zenject.SceneContext/<>c__DisplayClass49_0.<GetParentContainers>b__4
bool Zenject::SceneContext::$$c__DisplayClass49_0::$GetParentContainers$b__4(::Il2CppString* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c__DisplayClass49_0::<GetParentContainers>b__4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetParentContainers>b__4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: SceneContext::$$c__DisplayClass49_0::$GetParentContainers$b__2
// Il2CppName: <GetParentContainers>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::$$c__DisplayClass49_0::*)(Zenject::SceneContext*)>(&SceneContext::$$c__DisplayClass49_0::$GetParentContainers$b__2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass49_0*), "<GetParentContainers>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SceneContext*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c__DisplayClass49_0::$GetParentContainers$b__4
// Il2CppName: <GetParentContainers>b__4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::$$c__DisplayClass49_0::*)(::Il2CppString*)>(&SceneContext::$$c__DisplayClass49_0::$GetParentContainers$b__4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass49_0*), "<GetParentContainers>b__4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c__DisplayClass49_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::$$c__DisplayClass49_0::*)()>(&SceneContext::$$c__DisplayClass49_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass49_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::$$c__DisplayClass49_0::*)()>(&SceneContext::$$c__DisplayClass49_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass49_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SceneContext/<>c
#include "Zenject/SceneContext_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: Zenject.SceneDecoratorContext
#include "Zenject/SceneDecoratorContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly Zenject.SceneContext/<>c <>9
Zenject::SceneContext::$$c* Zenject::SceneContext::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<Zenject::SceneContext::$$c*>("Zenject", "SceneContext/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly Zenject.SceneContext/<>c <>9
void Zenject::SceneContext::$$c::_set_$$9(Zenject::SceneContext::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SceneContext/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Collections.Generic.IEnumerable`1<UnityEngine.GameObject>> <>9__49_0
System::Func_2<UnityEngine::SceneManagement::Scene, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>* Zenject::SceneContext::$$c::_get_$$9__49_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_get_$$9__49_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::SceneManagement::Scene, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>*>("Zenject", "SceneContext/<>c", "<>9__49_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Collections.Generic.IEnumerable`1<UnityEngine.GameObject>> <>9__49_0
void Zenject::SceneContext::$$c::_set_$$9__49_0(System::Func_2<UnityEngine::SceneManagement::Scene, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_set_$$9__49_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SceneContext/<>c", "<>9__49_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.GameObject,System.Collections.Generic.IEnumerable`1<Zenject.SceneContext>> <>9__49_1
System::Func_2<UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>*>* Zenject::SceneContext::$$c::_get_$$9__49_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_get_$$9__49_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>*>*>("Zenject", "SceneContext/<>c", "<>9__49_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.GameObject,System.Collections.Generic.IEnumerable`1<Zenject.SceneContext>> <>9__49_1
void Zenject::SceneContext::$$c::_set_$$9__49_1(System::Func_2<UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_set_$$9__49_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SceneContext/<>c", "<>9__49_1", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<Zenject.SceneContext,Zenject.DiContainer> <>9__49_3
System::Func_2<Zenject::SceneContext*, Zenject::DiContainer*>* Zenject::SceneContext::$$c::_get_$$9__49_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_get_$$9__49_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<Zenject::SceneContext*, Zenject::DiContainer*>*>("Zenject", "SceneContext/<>c", "<>9__49_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<Zenject.SceneContext,Zenject.DiContainer> <>9__49_3
void Zenject::SceneContext::$$c::_set_$$9__49_3(System::Func_2<Zenject::SceneContext*, Zenject::DiContainer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_set_$$9__49_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SceneContext/<>c", "<>9__49_3", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Collections.Generic.IEnumerable`1<UnityEngine.GameObject>> <>9__50_0
System::Func_2<UnityEngine::SceneManagement::Scene, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>* Zenject::SceneContext::$$c::_get_$$9__50_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_get_$$9__50_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::SceneManagement::Scene, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>*>("Zenject", "SceneContext/<>c", "<>9__50_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.SceneManagement.Scene,System.Collections.Generic.IEnumerable`1<UnityEngine.GameObject>> <>9__50_0
void Zenject::SceneContext::$$c::_set_$$9__50_0(System::Func_2<UnityEngine::SceneManagement::Scene, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_set_$$9__50_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SceneContext/<>c", "<>9__50_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.GameObject,System.Collections.Generic.IEnumerable`1<Zenject.SceneDecoratorContext>> <>9__50_1
System::Func_2<UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<Zenject::SceneDecoratorContext*>*>* Zenject::SceneContext::$$c::_get_$$9__50_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_get_$$9__50_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<Zenject::SceneDecoratorContext*>*>*>("Zenject", "SceneContext/<>c", "<>9__50_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.GameObject,System.Collections.Generic.IEnumerable`1<Zenject.SceneDecoratorContext>> <>9__50_1
void Zenject::SceneContext::$$c::_set_$$9__50_1(System::Func_2<UnityEngine::GameObject*, System::Collections::Generic::IEnumerable_1<Zenject::SceneDecoratorContext*>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::_set_$$9__50_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("Zenject", "SceneContext/<>c", "<>9__50_1", value)));
}
// Autogenerated method: Zenject.SceneContext/<>c..cctor
void Zenject::SceneContext::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "SceneContext/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.SceneContext/<>c.<GetParentContainers>b__49_0
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::SceneContext::$$c::$GetParentContainers$b__49_0(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::<GetParentContainers>b__49_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetParentContainers>b__49_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContext/<>c.<GetParentContainers>b__49_1
System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>* Zenject::SceneContext::$$c::$GetParentContainers$b__49_1(UnityEngine::GameObject* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::<GetParentContainers>b__49_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetParentContainers>b__49_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>*, false>(this, ___internal__method, root);
}
// Autogenerated method: Zenject.SceneContext/<>c.<GetParentContainers>b__49_3
Zenject::DiContainer* Zenject::SceneContext::$$c::$GetParentContainers$b__49_3(Zenject::SceneContext* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::<GetParentContainers>b__49_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetParentContainers>b__49_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method, x);
}
// Autogenerated method: Zenject.SceneContext/<>c.<LookupDecoratorContexts>b__50_0
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::SceneContext::$$c::$LookupDecoratorContexts$b__50_0(UnityEngine::SceneManagement::Scene scene) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::<LookupDecoratorContexts>b__50_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LookupDecoratorContexts>b__50_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scene)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method, scene);
}
// Autogenerated method: Zenject.SceneContext/<>c.<LookupDecoratorContexts>b__50_1
System::Collections::Generic::IEnumerable_1<Zenject::SceneDecoratorContext*>* Zenject::SceneContext::$$c::$LookupDecoratorContexts$b__50_1(UnityEngine::GameObject* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c::<LookupDecoratorContexts>b__50_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LookupDecoratorContexts>b__50_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::SceneDecoratorContext*>*, false>(this, ___internal__method, root);
}
// Writing MetadataGetter for method: SceneContext::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SceneContext::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c::$GetParentContainers$b__49_0
// Il2CppName: <GetParentContainers>b__49_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (SceneContext::$$c::*)(UnityEngine::SceneManagement::Scene)>(&SceneContext::$$c::$GetParentContainers$b__49_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), "<GetParentContainers>b__49_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c::$GetParentContainers$b__49_1
// Il2CppName: <GetParentContainers>b__49_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::SceneContext*>* (SceneContext::$$c::*)(UnityEngine::GameObject*)>(&SceneContext::$$c::$GetParentContainers$b__49_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), "<GetParentContainers>b__49_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c::$GetParentContainers$b__49_3
// Il2CppName: <GetParentContainers>b__49_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (SceneContext::$$c::*)(Zenject::SceneContext*)>(&SceneContext::$$c::$GetParentContainers$b__49_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), "<GetParentContainers>b__49_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::SceneContext*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c::$LookupDecoratorContexts$b__50_0
// Il2CppName: <LookupDecoratorContexts>b__50_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (SceneContext::$$c::*)(UnityEngine::SceneManagement::Scene)>(&SceneContext::$$c::$LookupDecoratorContexts$b__50_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), "<LookupDecoratorContexts>b__50_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c::$LookupDecoratorContexts$b__50_1
// Il2CppName: <LookupDecoratorContexts>b__50_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::SceneDecoratorContext*>* (SceneContext::$$c::*)(UnityEngine::GameObject*)>(&SceneContext::$$c::$LookupDecoratorContexts$b__50_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), "<LookupDecoratorContexts>b__50_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::$$c::*)()>(&SceneContext::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::$$c::*)()>(&SceneContext::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.SceneContext/<>c__DisplayClass51_0
#include "Zenject/SceneContext_--c__DisplayClass51_0.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SceneContext/<>c__DisplayClass51_0.<Install>b__0
bool Zenject::SceneContext::$$c__DisplayClass51_0::$Install$b__0(Zenject::DiContainer* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneContext::$$c__DisplayClass51_0::<Install>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Install>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: SceneContext::$$c__DisplayClass51_0::$Install$b__0
// Il2CppName: <Install>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SceneContext::$$c__DisplayClass51_0::*)(Zenject::DiContainer*)>(&SceneContext::$$c__DisplayClass51_0::$Install$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass51_0*), "<Install>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SceneContext::$$c__DisplayClass51_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::$$c__DisplayClass51_0::*)()>(&SceneContext::$$c__DisplayClass51_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass51_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneContext::$$c__DisplayClass51_0::*)()>(&SceneContext::$$c__DisplayClass51_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneContext::$$c__DisplayClass51_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.SceneDecoratorContext
#include "Zenject/SceneDecoratorContext.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
// Including type: Zenject.ScriptableObjectInstaller
#include "Zenject/ScriptableObjectInstaller.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.SceneDecoratorContext.get_LateInstallers
System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* Zenject::SceneDecoratorContext::get_LateInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::get_LateInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LateInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.set_LateInstallers
void Zenject::SceneDecoratorContext::set_LateInstallers(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::set_LateInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LateInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneDecoratorContext.get_LateInstallerPrefabs
System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* Zenject::SceneDecoratorContext::get_LateInstallerPrefabs() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::get_LateInstallerPrefabs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LateInstallerPrefabs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.set_LateInstallerPrefabs
void Zenject::SceneDecoratorContext::set_LateInstallerPrefabs(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::set_LateInstallerPrefabs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LateInstallerPrefabs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneDecoratorContext.get_LateScriptableObjectInstallers
System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>* Zenject::SceneDecoratorContext::get_LateScriptableObjectInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::get_LateScriptableObjectInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_LateScriptableObjectInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.set_LateScriptableObjectInstallers
void Zenject::SceneDecoratorContext::set_LateScriptableObjectInstallers(System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::set_LateScriptableObjectInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_LateScriptableObjectInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: Zenject.SceneDecoratorContext.get_DecoratedContractName
::Il2CppString* Zenject::SceneDecoratorContext::get_DecoratedContractName() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::get_DecoratedContractName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DecoratedContractName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.Initialize
void Zenject::SceneDecoratorContext::Initialize(Zenject::DiContainer* container) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(container)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, container);
}
// Autogenerated method: Zenject.SceneDecoratorContext.InstallDecoratorSceneBindings
void Zenject::SceneDecoratorContext::InstallDecoratorSceneBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::InstallDecoratorSceneBindings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallDecoratorSceneBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.InstallDecoratorInstallers
void Zenject::SceneDecoratorContext::InstallDecoratorInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::InstallDecoratorInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallDecoratorInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.InstallLateDecoratorInstallers
void Zenject::SceneDecoratorContext::InstallLateDecoratorInstallers() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::InstallLateDecoratorInstallers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallLateDecoratorInstallers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.get_Container
Zenject::DiContainer* Zenject::SceneDecoratorContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::get_Container");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.GetRootGameObjects
System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* Zenject::SceneDecoratorContext::GetRootGameObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::GetRootGameObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootGameObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.SceneDecoratorContext.GetInjectableMonoBehaviours
void Zenject::SceneDecoratorContext::GetInjectableMonoBehaviours(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>* monoBehaviours) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::SceneDecoratorContext::GetInjectableMonoBehaviours");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(monoBehaviours)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, monoBehaviours);
}
// Writing MetadataGetter for method: SceneDecoratorContext::get_LateInstallers
// Il2CppName: get_LateInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* (SceneDecoratorContext::*)()>(&SceneDecoratorContext::get_LateInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "get_LateInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::set_LateInstallers
// Il2CppName: set_LateInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*)>(&SceneDecoratorContext::set_LateInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "set_LateInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::get_LateInstallerPrefabs
// Il2CppName: get_LateInstallerPrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>* (SceneDecoratorContext::*)()>(&SceneDecoratorContext::get_LateInstallerPrefabs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "get_LateInstallerPrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::set_LateInstallerPrefabs
// Il2CppName: set_LateInstallerPrefabs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)(System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*)>(&SceneDecoratorContext::set_LateInstallerPrefabs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "set_LateInstallerPrefabs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::MonoInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::get_LateScriptableObjectInstallers
// Il2CppName: get_LateScriptableObjectInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>* (SceneDecoratorContext::*)()>(&SceneDecoratorContext::get_LateScriptableObjectInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "get_LateScriptableObjectInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::set_LateScriptableObjectInstallers
// Il2CppName: set_LateScriptableObjectInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)(System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>*)>(&SceneDecoratorContext::set_LateScriptableObjectInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "set_LateScriptableObjectInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<Zenject::ScriptableObjectInstaller*>*>()});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::get_DecoratedContractName
// Il2CppName: get_DecoratedContractName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SceneDecoratorContext::*)()>(&SceneDecoratorContext::get_DecoratedContractName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "get_DecoratedContractName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)(Zenject::DiContainer*)>(&SceneDecoratorContext::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<Zenject::DiContainer*>()});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::InstallDecoratorSceneBindings
// Il2CppName: InstallDecoratorSceneBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)()>(&SceneDecoratorContext::InstallDecoratorSceneBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "InstallDecoratorSceneBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::InstallDecoratorInstallers
// Il2CppName: InstallDecoratorInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)()>(&SceneDecoratorContext::InstallDecoratorInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "InstallDecoratorInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::InstallLateDecoratorInstallers
// Il2CppName: InstallLateDecoratorInstallers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)()>(&SceneDecoratorContext::InstallLateDecoratorInstallers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "InstallLateDecoratorInstallers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (SceneDecoratorContext::*)()>(&SceneDecoratorContext::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::GetRootGameObjects
// Il2CppName: GetRootGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* (SceneDecoratorContext::*)()>(&SceneDecoratorContext::GetRootGameObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "GetRootGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::GetInjectableMonoBehaviours
// Il2CppName: GetInjectableMonoBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)(System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*)>(&SceneDecoratorContext::GetInjectableMonoBehaviours)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), "GetInjectableMonoBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::MonoBehaviour*>*>()});
  }
};
// Writing MetadataGetter for method: SceneDecoratorContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)()>(&SceneDecoratorContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SceneDecoratorContext::*)()>(&SceneDecoratorContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SceneDecoratorContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.StaticContext
#include "Zenject/StaticContext.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private Zenject.DiContainer _container
Zenject::DiContainer* Zenject::StaticContext::_get__container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::StaticContext::_get__container");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Zenject::DiContainer*>("Zenject", "StaticContext", "_container"));
}
// Autogenerated static field setter
// Set static field: static private Zenject.DiContainer _container
void Zenject::StaticContext::_set__container(Zenject::DiContainer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::StaticContext::_set__container");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Zenject", "StaticContext", "_container", value));
}
// Autogenerated method: Zenject.StaticContext.Clear
void Zenject::StaticContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::StaticContext::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "StaticContext", "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.StaticContext.get_HasContainer
bool Zenject::StaticContext::get_HasContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::StaticContext::get_HasContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "StaticContext", "get_HasContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Zenject.StaticContext.get_Container
Zenject::DiContainer* Zenject::StaticContext::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::StaticContext::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Zenject", "StaticContext", "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: StaticContext::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StaticContext::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StaticContext*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StaticContext::get_HasContainer
// Il2CppName: get_HasContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&StaticContext::get_HasContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StaticContext*), "get_HasContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StaticContext::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (*)()>(&StaticContext::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StaticContext*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.IInstaller
#include "Zenject/IInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.IInstaller.InstallBindings
void Zenject::IInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.IInstaller.get_IsEnabled
bool Zenject::IInstaller::get_IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::IInstaller::get_IsEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IInstaller::*)()>(&IInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IInstaller::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IInstaller::*)()>(&IInstaller::get_IsEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IInstaller*), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.Installer
#include "Zenject/Installer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: Installer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Installer::*)()>(&Installer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Installer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Installer::*)()>(&Installer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Installer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.InstallerBase
#include "Zenject/InstallerBase.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Zenject.InstallerBase.get_Container
Zenject::DiContainer* Zenject::InstallerBase::get_Container() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstallerBase::get_Container");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Container", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<Zenject::DiContainer*, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InstallerBase.get_IsEnabled
bool Zenject::InstallerBase::get_IsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstallerBase::get_IsEnabled");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Zenject.InstallerBase.InstallBindings
void Zenject::InstallerBase::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InstallerBase::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InstallerBase::get_Container
// Il2CppName: get_Container
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Zenject::DiContainer* (InstallerBase::*)()>(&InstallerBase::get_Container)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstallerBase*), "get_Container", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstallerBase::get_IsEnabled
// Il2CppName: get_IsEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InstallerBase::*)()>(&InstallerBase::get_IsEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstallerBase*), "get_IsEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstallerBase::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstallerBase::*)()>(&InstallerBase::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstallerBase*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InstallerBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstallerBase::*)()>(&InstallerBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstallerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InstallerBase::*)()>(&InstallerBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InstallerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MonoInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstaller::*)()>(&MonoInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoInstaller::*)()>(&MonoInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
